[{"compiler":[[14,10]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09853651490993798,0.10341527522541583],[11,0.7687799381092191,0.13463405007496476,0.09658601181581616],[10,0.7258531395345926,0.19121937546879053,0.08292748499661684],[9,0.6712190322577953,0.2575607914477587,0.07122017629444599],[8,0.5931703075766563,0.35902413353323936,0.047805558890104294],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":30.322998046875,"type":"analyze"},{"outcomes":[["body",256,"invalid",9.2587890625,237],["body",512,"valid",3.267578125,47],["body",1024,"valid",9.115234375,90],["body",256,"valid",314.928466796875,8119]],"time":345.175048828125,"type":"sample"},{"compiler":[[13,9]],"inputs":[["0","1"],["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))","(+.f64 (+.f64 (*.f64 d2 10) (*.f64 d2 d1)) (*.f64 d2 20))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))","(*.f64 d1 (+.f64 20 (+.f64 10 d2)))","(+.f64 (+.f64 (*.f64 d2 10) (*.f64 d2 d1)) (*.f64 d2 20))","(*.f64 d2 (+.f64 (+.f64 10 d1) 20))"]],"symmetry":[[]],"time":70.475830078125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))","(*.f64 d1 (+.f64 (+.f64 10 d2) 20))"]],"time":22.14111328125,"type":"simplify"},{"compiler":[[20,14]],"time":0.48095703125,"type":"eval"},{"alts":[["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","next",0.03125],["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))","fresh",0.1875]],"compiler":[[9,7],[13,9],[9,7],[13,9]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.02734375],"time":1.340087890625,"type":"prune"},{"compiler":[[21,15]],"locations":[["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))",0.00390625,true],["(+.f64 (+.f64 10 d2) 20)",0.0078125,true]],"time":5.02587890625,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","d2","-inf",0.280029296875],["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","d2","inf",0.48583984375],["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","d2","0",0.283935546875],["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","d1","-inf",0.348876953125],["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","d1","inf",0.446044921875],["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","d1","0",0.387939453125],["(+.f64 (+.f64 10 d2) 20)","d2","-inf",0.18701171875],["(+.f64 (+.f64 10 d2) 20)","d2","inf",0.30322265625],["(+.f64 (+.f64 10 d2) 20)","d2","0",0.34814453125]],"time":3.234130859375,"type":"series"},{"count":[[2,155]],"inputs":[["(+.f64 (+.f64 10 d2) 20)","(*.f64 d1 (+.f64 (+.f64 10 d2) 20))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 30 d2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 d2 30)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 30 d2) 0) (+.f64 30 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 30 d2) (*.f64 (+.f64 30 d2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 30 d2)) (+.f64 30 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 30 d2) (*.f64 0 (+.f64 30 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 d2 (*.f64 30 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 30 1) d2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 10 d2) 20)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 20 (+.f64 10 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 10 (+.f64 d2 20))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 d2 20) 10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 30 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 30 d2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) (/.f64 1 (neg.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1000 (pow.f64 (+.f64 d2 20) 3)) (/.f64 1 (+.f64 100 (*.f64 (+.f64 d2 20) (-.f64 (+.f64 d2 20) 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) 1) (/.f64 (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) 2) (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))) (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))) (/.f64 (+.f64 30 d2) (pow.f64 (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))) 1) (/.f64 (+.f64 30 d2) (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))) (/.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) (pow.f64 (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 30 d2)) (cbrt.f64 (pow.f64 (+.f64 30 d2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) (-.f64 (cbrt.f64 400) (cbrt.f64 (*.f64 (+.f64 10 d2) 20)))) (+.f64 (cbrt.f64 (+.f64 10 d2)) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 400) (-.f64 (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) (cbrt.f64 (*.f64 (+.f64 10 d2) 20)))) (+.f64 (cbrt.f64 20) (cbrt.f64 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 30 d2) 2)) (cbrt.f64 (+.f64 30 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) (/.f64 1 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 30 d2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 30 d2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))) (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (+.f64 10 d2) 3) 3) 512000000000) (/.f64 1 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))) (-.f64 (+.f64 (pow.f64 (+.f64 10 d2) 6) 64000000) (pow.f64 (*.f64 (+.f64 10 d2) 20) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))) (pow.f64 (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 30 3) (pow.f64 d2 3)) (+.f64 (*.f64 30 30) (-.f64 (*.f64 d2 d2) (*.f64 30 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 d2 3) (pow.f64 30 3)) (+.f64 (*.f64 d2 d2) (-.f64 (*.f64 30 30) (*.f64 d2 30))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1000 (pow.f64 (+.f64 d2 20) 3)) (+.f64 (pow.f64 (+.f64 d2 20) 2) (-.f64 100 (*.f64 10 (+.f64 d2 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (+.f64 10 d2) 3) 3) 512000000000) 1) (*.f64 (-.f64 (+.f64 (pow.f64 (+.f64 10 d2) 6) 64000000) (pow.f64 (*.f64 (+.f64 10 d2) 20) 3)) (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1000 (pow.f64 (+.f64 d2 20) 3))) (neg.f64 (+.f64 100 (*.f64 (+.f64 d2 20) (-.f64 (+.f64 d2 20) 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) (neg.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 30 d2) 2)) (cbrt.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000))) (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 30 d2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) (cbrt.f64 (pow.f64 (+.f64 30 d2) 2))) (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) 1) (neg.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) 1) (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1000 (pow.f64 (+.f64 d2 20) 3)) (+.f64 100 (*.f64 (+.f64 d2 20) (-.f64 (+.f64 d2 20) 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1000 (pow.f64 (+.f64 d2 20) 3)) 1) (+.f64 100 (*.f64 (+.f64 d2 20) (-.f64 (+.f64 d2 20) 10))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 30 d2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 30 d2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 30 d2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 30 d2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 30 d2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 30 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) (neg.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 30 d2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 20) (sqrt.f64 20) (+.f64 10 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 20) (cbrt.f64 400) (+.f64 10 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 10) (sqrt.f64 10) (+.f64 d2 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 10) (cbrt.f64 100) (+.f64 d2 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 10 d2)) (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) 20)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1000 (pow.f64 d2 3)) (/.f64 1 (fma.f64 d2 (+.f64 d2 -10) 100)) 20)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) (cbrt.f64 (+.f64 10 d2)) 20)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (+.f64 10 d2)) 20)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 d2 20)) (cbrt.f64 (pow.f64 (+.f64 d2 20) 2)) 10)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 100) (cbrt.f64 10) (+.f64 d2 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 (sqrt.f64 10)) (+.f64 d2 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -10 (+.f64 d2 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d2) (cbrt.f64 (*.f64 d2 d2)) 30)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d2 d2)) (cbrt.f64 d2) 30)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 d2) 30)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 20)) (neg.f64 (sqrt.f64 20)) (+.f64 10 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 400) (cbrt.f64 20) (+.f64 10 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -20 (+.f64 10 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 20 (+.f64 10 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 10 (+.f64 d2 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 10 d2) 20)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 10 d2) 1 20)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 d2 20) 10)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 10 1 (+.f64 d2 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d2 1 30)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 d2 30)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 20 1 (+.f64 10 d2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 d1 20) (*.f64 d1 10)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (+.f64 (*.f64 d1 10) (*.f64 d1 20)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (+.f64 30 d2)) 0) (*.f64 d1 (+.f64 30 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 30 d2)) (*.f64 (*.f64 d1 (+.f64 30 d2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (*.f64 d1 30))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 30) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 10 d2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 10) 1) (*.f64 (*.f64 d1 (+.f64 d2 20)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 d1 (+.f64 30 d2))) (*.f64 d1 (+.f64 30 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 30 d2)) (*.f64 0 (*.f64 d1 (+.f64 30 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 10) (*.f64 d1 (+.f64 d2 20)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (*.f64 30 d1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 30 d1) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 20) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 d2 20)) (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (+.f64 30 d2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 30 d2) d1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 30 d2)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 30 d2) 2)) d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 (*.f64 d1 d1)) (+.f64 30 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 d1 (+.f64 30 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 d1 d1)) (+.f64 30 d2)) (cbrt.f64 d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 30 d2) 2)) d1) (cbrt.f64 (+.f64 30 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 d1 (+.f64 30 d2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 d1 (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))) (/.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) (pow.f64 (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))) (/.f64 d1 (pow.f64 (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) 1) (/.f64 d1 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (+.f64 30 d2))) (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 30 d2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 30 d2)) 2)) (cbrt.f64 (*.f64 d1 (+.f64 30 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 30 d2) (cbrt.f64 d1)) (cbrt.f64 (*.f64 d1 d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (cbrt.f64 (+.f64 30 d2))) (cbrt.f64 (pow.f64 (+.f64 30 d2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 d1 (+.f64 30 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (+.f64 30 d2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 d1)) (*.f64 (+.f64 30 d2) (cbrt.f64 d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 30 d2) 2)) (*.f64 d1 (cbrt.f64 (+.f64 30 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 d1)) (+.f64 (cbrt.f64 (*.f64 8000 d1)) (*.f64 (+.f64 10 d2) (cbrt.f64 d1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 d1)) (+.f64 (*.f64 (+.f64 10 d2) (cbrt.f64 d1)) (cbrt.f64 (*.f64 8000 d1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) (/.f64 1 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 d1 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))) (pow.f64 (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (neg.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000))) (neg.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (+.f64 30 d2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 30 d2) 2)) d1)) (cbrt.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 d1 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) 1) (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) d1) (neg.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 d1 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000)) 1) (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 d1 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000))) (neg.f64 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (+.f64 1000 (pow.f64 (+.f64 d2 20) 3))) (+.f64 100 (*.f64 (+.f64 d2 20) (-.f64 (+.f64 d2 20) 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1000 (pow.f64 (+.f64 d2 20) 3)) d1) (+.f64 100 (*.f64 (+.f64 d2 20) (-.f64 (+.f64 d2 20) 10))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 d1 (+.f64 30 d2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 30 d2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 30 d2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 30 d2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (+.f64 30 d2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 d1 (+.f64 30 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 30 d2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 (+.f64 10 d2) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 10 d2) d1 (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 10 (*.f64 d1 (+.f64 d2 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 10 d2) (cbrt.f64 d1)) (cbrt.f64 (*.f64 d1 d1)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 10 d2)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) d1) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (cbrt.f64 (+.f64 10 d2))) (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 (+.f64 10 d2))) (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 10 d2)) 2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 (*.f64 d1 d1)) (+.f64 10 d2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 20)) (cbrt.f64 (*.f64 400 (*.f64 d1 d1))) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (cbrt.f64 20)) (cbrt.f64 400) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 8000 d1)) (cbrt.f64 (*.f64 d1 d1)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 20 d1 (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 20 (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d1) (cbrt.f64 (*.f64 (*.f64 d1 d1) 8000)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 20) (*.f64 d1 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 20) (*.f64 (cbrt.f64 400) d1) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 10 d1 (*.f64 d1 (+.f64 d2 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (+.f64 10 d2)) 1 (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 (+.f64 10 d2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 20) (*.f64 d1 (+.f64 10 d2)))))))"]],"rules":[["egg-rr",76],["egg-rr",79]],"time":32.2958984375,"type":"rewrite"},{"count":[[191,161]],"inputs":[["30","(+.f64 d2 30)","(+.f64 d2 30)","(+.f64 d2 30)","d2","(+.f64 30 d2)","(+.f64 30 d2)","(+.f64 30 d2)","d2","(+.f64 30 d2)","(+.f64 30 d2)","(+.f64 30 d2)","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 30 d2))","(*.f64 30 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))"]],"method":["egg-herbie"],"outputs":[["30","(+.f64 d2 30)","(+.f64 d2 30)","(+.f64 d2 30)","d2","(+.f64 30 d2)","(+.f64 d2 30)","(+.f64 30 d2)","(+.f64 d2 30)","(+.f64 30 d2)","(+.f64 d2 30)","d2","(+.f64 30 d2)","(+.f64 d2 30)","(+.f64 30 d2)","(+.f64 d2 30)","(+.f64 30 d2)","(+.f64 d2 30)","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 d2 30))","(*.f64 30 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(*.f64 d2 d1)","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))","(+.f64 (*.f64 d2 d1) (*.f64 30 d1))","(*.f64 d1 (+.f64 d2 30))"]],"time":114.1201171875,"type":"simplify"},{"compiler":[[2183,1625]],"time":31.69091796875,"type":"eval"},{"alts":[["(*.f64 (/.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) 1) (/.f64 d1 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))","fresh",19.62920224534346],["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","done",0.03125],["(fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","next",0.25]],"compiler":[[23,19],[9,7],[14,11],[23,19],[14,11]],"count":[[163,3]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[161,2],"picked":[1,1]}],"min-error":[0.0078125],"time":47.9609375,"type":"prune"},{"compiler":[[32,23]],"locations":[["(*.f64 d1 (+.f64 10 d2))",0.01171875,true],["(fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))",0.16796875,true],["(*.f64 d1 (sqrt.f64 20))",0.32421875,true]],"time":8.412109375,"type":"localize"},{"count":[[3,48]],"series":[["(*.f64 d1 (+.f64 10 d2))","d2","-inf",0.159912109375],["(*.f64 d1 (+.f64 10 d2))","d2","inf",0.14599609375],["(*.f64 d1 (+.f64 10 d2))","d2","0",0.14892578125],["(*.f64 d1 (+.f64 10 d2))","d1","-inf",0.162109375],["(*.f64 d1 (+.f64 10 d2))","d1","inf",0.142822265625],["(*.f64 d1 (+.f64 10 d2))","d1","0",0.166015625],["(fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","d2","-inf",0.251953125],["(fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","d2","inf",0.26708984375],["(fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","d2","0",0.405029296875],["(fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","d1","-inf",0.44580078125],["(fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","d1","inf",0.4091796875],["(fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","d1","0",0.864990234375],["(*.f64 d1 (sqrt.f64 20))","d1","-inf",0.27197265625],["(*.f64 d1 (sqrt.f64 20))","d1","inf",0.325927734375],["(*.f64 d1 (sqrt.f64 20))","d1","0",0.510986328125]],"time":4.863037109375,"type":"series"},{"count":[[3,146]],"inputs":[["(*.f64 d1 (sqrt.f64 20))","(fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","(*.f64 d1 (+.f64 10 d2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) 0) (*.f64 d1 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) 1/2) (*.f64 (*.f64 d1 (sqrt.f64 20)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (sqrt.f64 20)) (*.f64 (*.f64 d1 (sqrt.f64 20)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 d1 (sqrt.f64 20))) (*.f64 d1 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 d1 (sqrt.f64 20))) (*.f64 1/2 (*.f64 d1 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (sqrt.f64 20)) (*.f64 0 (*.f64 d1 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 (cbrt.f64 20) d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 (*.f64 d1 d1)) (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 d1 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 d1 d1)) (sqrt.f64 20)) (cbrt.f64 d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 20) d1) (cbrt.f64 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 d1 (sqrt.f64 20))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (sqrt.f64 20))) (cbrt.f64 (*.f64 (*.f64 d1 d1) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (sqrt.f64 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 20) d1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 d1 d1) 20)) (cbrt.f64 (*.f64 d1 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (cbrt.f64 (sqrt.f64 20))) (cbrt.f64 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 20) (cbrt.f64 d1)) (cbrt.f64 (*.f64 d1 d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 d1 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (sqrt.f64 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 20) (*.f64 d1 (cbrt.f64 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 d1)) (*.f64 (sqrt.f64 20) (cbrt.f64 d1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (sqrt.f64 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 8000) (pow.f64 d1 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (sqrt.f64 20))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (sqrt.f64 20))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (sqrt.f64 20))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (sqrt.f64 20)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 d1 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (sqrt.f64 8000) (pow.f64 d1 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 0) (*.f64 d1 (+.f64 20 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 1/2) (*.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) (*.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) (*.f64 d1 (+.f64 20 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) (*.f64 1/2 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) (*.f64 0 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 20) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 10 d2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 20 10)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (*.f64 d1 (+.f64 20 10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 d1 20) (*.f64 d1 d2)) (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 10) (+.f64 (*.f64 d1 d2) (*.f64 d1 20)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (+.f64 20 10)) 1) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 2)) (cbrt.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (+.f64 20 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (+.f64 (+.f64 10 d2) 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 d1 (+.f64 20 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 (+.f64 10 d2) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 10 d2) (cbrt.f64 d1)) (cbrt.f64 (*.f64 d1 d1)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 (*.f64 d1 d1)) (+.f64 10 d2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 d1 (+.f64 10 d2))) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 10 d2) d1 (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 10 d2)) 2)) (cbrt.f64 (*.f64 d1 (+.f64 10 d2))) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 (+.f64 10 d2))) (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 10 d2)) 2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 10 d2)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) d1) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (cbrt.f64 (+.f64 10 d2))) (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 20 (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 (sqrt.f64 20))) (*.f64 (cbrt.f64 (*.f64 (*.f64 d1 d1) 20)) (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (cbrt.f64 (sqrt.f64 20))) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 20)) (cbrt.f64 (*.f64 (*.f64 d1 d1) 400)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 20) (*.f64 d1 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 (+.f64 10 d2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (+.f64 10 d2)) 1 (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 20) 1 (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 20) (*.f64 d1 (+.f64 10 d2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (+.f64 10 d2)) 0) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (+.f64 10 d2)) 1/2) (*.f64 (*.f64 d1 (+.f64 10 d2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 10 d2)) (*.f64 (*.f64 d1 (+.f64 10 d2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 10) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 d1 (+.f64 10 d2))) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 d1 (+.f64 10 d2))) (*.f64 1/2 (*.f64 d1 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 10 d2)) (*.f64 0 (*.f64 d1 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (+.f64 10 d2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 10 d2) d1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 10 d2)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 (*.f64 d1 d1)) (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 d1 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 d1 d1)) (+.f64 10 d2)) (cbrt.f64 d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 d1 (+.f64 10 d2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) d1) (cbrt.f64 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1000 (pow.f64 d2 3)) (cbrt.f64 (fma.f64 d2 (+.f64 d2 -10) 100))) (/.f64 d1 (pow.f64 (cbrt.f64 (fma.f64 d2 (+.f64 d2 -10) 100)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 d1 (cbrt.f64 (fma.f64 d2 (+.f64 d2 -10) 100))) (/.f64 (+.f64 1000 (pow.f64 d2 3)) (pow.f64 (cbrt.f64 (fma.f64 d2 (+.f64 d2 -10) 100)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (+.f64 10 d2))) (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 10 d2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 10 d2)) 2)) (cbrt.f64 (*.f64 d1 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (cbrt.f64 (+.f64 10 d2))) (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 10 d2) (cbrt.f64 d1)) (cbrt.f64 (*.f64 d1 d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (+.f64 10 d2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 d1)) (*.f64 (+.f64 10 d2) (cbrt.f64 d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) (*.f64 d1 (cbrt.f64 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 d1)) (+.f64 (*.f64 d2 (cbrt.f64 d1)) (cbrt.f64 (*.f64 1000 d1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 d1)) (+.f64 (cbrt.f64 (*.f64 1000 d1)) (*.f64 d2 (cbrt.f64 d1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (+.f64 1000 (pow.f64 d2 3))) (/.f64 1 (fma.f64 d2 (+.f64 d2 -10) 100)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1000 (pow.f64 d2 3)) (/.f64 d1 (fma.f64 d2 (+.f64 d2 -10) 100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 d1 (+.f64 1000 (pow.f64 d2 3))) (cbrt.f64 (fma.f64 d2 (+.f64 d2 -10) 100))) (pow.f64 (cbrt.f64 (fma.f64 d2 (+.f64 d2 -10) 100)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (+.f64 1000 (pow.f64 d2 3))) (fma.f64 d2 (+.f64 d2 -10) 100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (+.f64 10 d2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (neg.f64 (+.f64 1000 (pow.f64 d2 3)))) (neg.f64 (fma.f64 d2 (+.f64 d2 -10) 100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1000 (pow.f64 d2 3))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) d1)) (cbrt.f64 (fma.f64 d2 (+.f64 d2 -10) 100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 d1 (+.f64 1000 (pow.f64 d2 3))) 1) (fma.f64 d2 (+.f64 d2 -10) 100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 1000 (pow.f64 d2 3))) d1) (neg.f64 (fma.f64 d2 (+.f64 d2 -10) 100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 d1 (+.f64 1000 (pow.f64 d2 3))) 1) (fma.f64 d2 (+.f64 d2 -10) 100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 d1 (+.f64 1000 (pow.f64 d2 3)))) (neg.f64 (fma.f64 d2 (+.f64 d2 -10) 100)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 d1 (+.f64 10 d2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 10 d2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 10 d2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 10 d2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (+.f64 10 d2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 d1 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 10 d2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 10 (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 10 d1 (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d1) (cbrt.f64 (*.f64 (*.f64 d1 d1) 1000)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1000 d1)) (cbrt.f64 (*.f64 d1 d1)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 10) (*.f64 (cbrt.f64 100) d1) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (cbrt.f64 10)) (cbrt.f64 100) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 10) (*.f64 d1 (sqrt.f64 10)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (sqrt.f64 10)) (sqrt.f64 10) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 10)) (cbrt.f64 (*.f64 100 (*.f64 d1 d1))) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 d2 (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (cbrt.f64 d2)) (cbrt.f64 (*.f64 d2 d2)) (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d2) (*.f64 (cbrt.f64 (*.f64 d2 d2)) d1) (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d2 (cbrt.f64 d1)) (cbrt.f64 (*.f64 d1 d1)) (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d2 d1 (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 (*.f64 d1 d1)) d2) (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 d2)) (cbrt.f64 (pow.f64 (*.f64 d1 d2) 2)) (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 10) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 10) 1 (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 d2) (*.f64 d1 10))))))"]],"rules":[["egg-rr",65],["egg-rr",49],["egg-rr",32]],"time":31.677001953125,"type":"rewrite"},{"count":[[194,157]],"inputs":[["(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 10 d1))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 d1 (+.f64 d2 10))","(*.f64 d1 (+.f64 d2 10))","(*.f64 d1 (+.f64 d2 10))","(*.f64 d1 (+.f64 d2 10))","(*.f64 10 d1)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 30 d2))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 d1 (+.f64 30 d2))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 d1 (+.f64 30 d2))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 d1 (+.f64 30 d2))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 10 d1))","(*.f64 d1 30)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d1 (+.f64 30 d2))","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d1 (+.f64 30 d2))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d1 (+.f64 30 d2))","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 (+.f64 10 d2) d1)","(*.f64 d1 (+.f64 d2 10))","(*.f64 (+.f64 10 d2) d1)","(*.f64 d1 (+.f64 d2 10))","(*.f64 (+.f64 10 d2) d1)","(*.f64 d1 (+.f64 d2 10))","(*.f64 (+.f64 10 d2) d1)","(*.f64 d1 (+.f64 d2 10))","(*.f64 (+.f64 10 d2) d1)","(*.f64 10 d1)","(*.f64 d1 10)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(*.f64 (+.f64 10 d2) d1)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(*.f64 (+.f64 10 d2) d1)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(*.f64 (+.f64 10 d2) d1)","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(*.f64 (+.f64 10 d2) d1)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(*.f64 (+.f64 10 d2) d1)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(*.f64 (+.f64 10 d2) d1)","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(*.f64 (+.f64 10 d2) d1)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(*.f64 (+.f64 10 d2) d1)","(+.f64 (*.f64 10 d1) (*.f64 d2 d1))","(*.f64 (+.f64 10 d2) d1)"]],"time":170.8369140625,"type":"simplify"},{"compiler":[[2473,1804]],"time":34.697021484375,"type":"eval"},{"alts":[["(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","next",0.15625],["(*.f64 (/.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) 1) (/.f64 d1 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))","fresh",19.62920224534346],["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","done",0.03125],["(fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","done",0.25],["(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","fresh",0.17578125]],"compiler":[[19,16],[23,19],[9,7],[14,11],[19,16],[19,16],[23,19],[19,16]],"count":[[160,5]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[157,2],"picked":[1,1]}],"min-error":[0],"time":41.431884765625,"type":"prune"},{"compiler":[[48,38]],"locations":[["(*.f64 d1 (+.f64 10 d2))",0.01171875,false],["(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))",0.14453125,true],["(*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20)))",0.31640625,true],["(*.f64 d1 (sqrt.f64 20))",0.32421875,false]],"time":12.81201171875,"type":"localize"},{"count":[[2,36]],"series":[["(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d2","-inf",0.196044921875],["(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d2","inf",0.178955078125],["(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d2","0",0.43701171875],["(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d1","-inf",0.322021484375],["(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d1","inf",0.239990234375],["(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d1","0",1.10400390625],["(*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20)))","d1","-inf",0.27880859375],["(*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20)))","d1","inf",0.357177734375],["(*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20)))","d1","0",1.14599609375]],"time":4.401123046875,"type":"series"},{"count":[[2,85]],"inputs":[["(*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20)))","(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) 0) (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) (*.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) 1/2) (*.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))) (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) (*.f64 0 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))) (*.f64 1/2 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 (*.f64 d1 d1)) (sqrt.f64 (sqrt.f64 8000))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (sqrt.f64 20))) (*.f64 (cbrt.f64 (*.f64 (*.f64 d1 d1) 20)) (sqrt.f64 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 d1) (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (*.f64 d1 d1)) (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (sqrt.f64 (sqrt.f64 8000)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 d1 d1)) (sqrt.f64 20)) (*.f64 (cbrt.f64 d1) (sqrt.f64 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 8000)) d1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 20)) (cbrt.f64 (*.f64 d1 (sqrt.f64 20)))) (cbrt.f64 (*.f64 (*.f64 d1 d1) 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 20)) d1) (sqrt.f64 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (pow.f64 20 1/8)) (pow.f64 20 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 20) (*.f64 d1 (sqrt.f64 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 20 1/8) (*.f64 (pow.f64 20 1/8) (*.f64 d1 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (cbrt.f64 (sqrt.f64 (sqrt.f64 20)))) (cbrt.f64 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 d1) (sqrt.f64 (sqrt.f64 20))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 d1) (sqrt.f64 (sqrt.f64 20))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 d1) (sqrt.f64 (sqrt.f64 20))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 20) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 10 d2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 20 10)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 d1 20) (*.f64 d1 d2)) (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 10) (+.f64 (*.f64 d1 d2) (*.f64 d1 20)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 0) (*.f64 d1 (+.f64 20 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) (*.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 1/2) (*.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) (*.f64 d1 (+.f64 20 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) (*.f64 0 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) (*.f64 1/2 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 d1 (+.f64 20 10)) 1) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (*.f64 d1 (+.f64 20 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 d1 (+.f64 20 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (+.f64 20 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (+.f64 (+.f64 10 d2) 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 2)) (cbrt.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 20 (+.f64 10 d2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 20) 1 (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d1) (*.f64 (cbrt.f64 (*.f64 d1 d1)) (+.f64 10 d2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (cbrt.f64 (+.f64 10 d2))) (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 10 d2)) 2)) (cbrt.f64 (*.f64 d1 (+.f64 10 d2))) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (+.f64 10 d2)) 1 (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 10 d2) (cbrt.f64 d1)) (cbrt.f64 (*.f64 d1 d1)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 (+.f64 10 d2))) (cbrt.f64 (pow.f64 (*.f64 d1 (+.f64 10 d2)) 2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 (+.f64 10 d2) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 10 d2)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 10 d2) 2)) d1) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 d1 (+.f64 10 d2))) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 (+.f64 10 d2)) (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 10 d2) d1 (*.f64 d1 20))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 20 (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 20)) (cbrt.f64 (*.f64 (*.f64 d1 d1) 400)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 20) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) (pow.f64 20 1/8)) (pow.f64 20 1/8) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 d1) (sqrt.f64 (sqrt.f64 20))) (*.f64 (*.f64 (cbrt.f64 (*.f64 d1 d1)) (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 8000))) (cbrt.f64 (sqrt.f64 (sqrt.f64 20)))) (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))))))"]],"rules":[["egg-rr",51],["egg-rr",34]],"time":26.931884765625,"type":"rewrite"},{"count":[[121,93]],"inputs":[["(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 10 d1))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 10 d1))","(*.f64 d1 30)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)"]],"time":133.85400390625,"type":"simplify"},{"compiler":[[3684,2873]],"time":52.43408203125,"type":"eval"},{"alts":[["(fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","next",0.1640625],["(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","done",0.15625],["(*.f64 (/.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) 1) (/.f64 d1 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))","fresh",19.62920224534346],["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","done",0.03125]],"compiler":[[24,21],[19,16],[23,19],[9,7],[24,21],[23,19]],"count":[[199,4]],"kept":[{"done":[2,1],"fresh":[2,1],"new":[194,1],"picked":[1,1]}],"min-error":[0],"time":65.919921875,"type":"prune"},{"compiler":[[73,62]],"locations":[["(fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))",0.14453125,true],["(*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20))))",0.31640625,true],["(*.f64 d1 (sqrt.f64 20))",0.32421875,false],["(*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))",0.33431625976844204,true]],"time":21.04296875,"type":"localize"},{"count":[[3,48]],"series":[["(fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d2","-inf",0.205078125],["(fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d2","inf",0.181884765625],["(fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d2","0",0.35693359375],["(fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d1","-inf",0.258056640625],["(fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d1","inf",0.277099609375],["(fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","d1","0",0.294921875],["(*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20))))","d1","-inf",0.239990234375],["(*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20))))","d1","inf",0.288818359375],["(*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20))))","d1","0",0.508056640625],["(*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))","d1","-inf",0.3408203125],["(*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))","d1","inf",0.302978515625],["(*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))","d1","0",2.052001953125]],"time":5.4990234375,"type":"series"},{"count":[[3,118]],"inputs":[["(*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))","(*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20))))","(fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 400) d1) 0) (*.f64 (cbrt.f64 400) d1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 400) d1) (*.f64 (*.f64 (cbrt.f64 400) d1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 400) d1) 1/2) (*.f64 (*.f64 (cbrt.f64 400) d1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 400) d1)) (*.f64 (cbrt.f64 400) d1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 400) d1) (*.f64 0 (*.f64 (cbrt.f64 400) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cbrt.f64 400) d1)) (*.f64 1/2 (*.f64 (cbrt.f64 400) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 400) d1)) (pow.f64 (*.f64 (cbrt.f64 400) d1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 400) d1) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 400) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (cbrt.f64 20)) (*.f64 d1 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 20)) d1) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 400) d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 400) d1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (sqrt.f64 20)) d1) (cbrt.f64 (sqrt.f64 20))) (cbrt.f64 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 400) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 400) d1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 20)) (cbrt.f64 (*.f64 d1 (sqrt.f64 20)))) (cbrt.f64 (*.f64 20 (*.f64 d1 d1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 20)) d1) (sqrt.f64 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 d1 (sqrt.f64 20))) (pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 20) (*.f64 (cbrt.f64 (sqrt.f64 20)) d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (cbrt.f64 (cbrt.f64 (sqrt.f64 20)))) (cbrt.f64 (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 d1 (cbrt.f64 400))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (sqrt.f64 20)) (cbrt.f64 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 400) d1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 400) d1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 400) d1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 400) d1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 400) d1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 400 (pow.f64 d1 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 400) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (cbrt.f64 400) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cbrt.f64 400) d1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 400 (pow.f64 d1 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 0) (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) (*.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 1/2) (*.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1)) (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) (*.f64 0 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1)) (*.f64 1/2 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20)))) (*.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 400) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 400) d1)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 400) d1) 2/3) (cbrt.f64 (sqrt.f64 (sqrt.f64 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 8000)) d1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))))) (cbrt.f64 (cbrt.f64 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (cbrt.f64 (*.f64 (cbrt.f64 400) d1))) (pow.f64 (*.f64 (cbrt.f64 400) d1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 20)) d1) (*.f64 (sqrt.f64 20) (cbrt.f64 (sqrt.f64 (sqrt.f64 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 20)) (cbrt.f64 d1)) (pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 400) d1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 (sqrt.f64 (sqrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 2/3) (*.f64 (sqrt.f64 (sqrt.f64 20)) (cbrt.f64 d1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 20)) d1) (sqrt.f64 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 20)) (cbrt.f64 (*.f64 d1 (sqrt.f64 20)))) (cbrt.f64 (*.f64 20 (*.f64 d1 d1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) d1)) (sqrt.f64 20))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 (*.f64 d1 (sqrt.f64 20)) (cbrt.f64 (sqrt.f64 (sqrt.f64 20)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 d1 (sqrt.f64 20))) (cbrt.f64 (sqrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 20)) (cbrt.f64 d1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 20)) (cbrt.f64 d1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 20)) (cbrt.f64 d1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 (+.f64 10 d2)) (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)) (*.f64 d1 d2)) (*.f64 d1 10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 10)) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 10) (+.f64 (*.f64 d1 d2) (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) 0) (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) (*.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) 1/2) (*.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 10)) 1) (*.f64 d1 d2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))) (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) (*.f64 0 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))) (*.f64 1/2 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 d1 d2) (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))) (pow.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) 2/3) (cbrt.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)) 1 (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 20)) (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (*.f64 (cbrt.f64 400) d1) (sqrt.f64 (sqrt.f64 20))) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) (pow.f64 20 1/8)) (pow.f64 20 1/8) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20))) 2) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (sqrt.f64 20)) (cbrt.f64 d1)) (*.f64 (pow.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) 2/3) (sqrt.f64 (sqrt.f64 20))) (*.f64 d1 (+.f64 10 d2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 d1 (+.f64 10 d2)) 2/3) (cbrt.f64 (*.f64 d1 (+.f64 10 d2))) (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 d1) (*.f64 (pow.f64 d1 2/3) (+.f64 10 d2)) (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 d1 (+.f64 10 d2))) (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 10 d2) (cbrt.f64 d1)) (pow.f64 d1 2/3) (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 d1 (+.f64 10 d2))) (pow.f64 (*.f64 d1 (+.f64 10 d2)) 2/3) (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (cbrt.f64 (+.f64 10 d2))) (pow.f64 (+.f64 10 d2) 2/3) (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d1 (+.f64 10 d2)) 1 (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 10 d2) d1 (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 10 d2)) (*.f64 (pow.f64 (+.f64 10 d2) 2/3) d1) (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 d1 (+.f64 10 d2)) (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d1 (+.f64 10 d2) (*.f64 (*.f64 (cbrt.f64 400) d1) (cbrt.f64 20)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (sqrt.f64 (sqrt.f64 8000)) d1) (cbrt.f64 (sqrt.f64 (sqrt.f64 20)))) (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))))))"]],"rules":[["egg-rr",49],["egg-rr",36],["egg-rr",33]],"time":34.77099609375,"type":"rewrite"},{"count":[[166,128]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 10 d1))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sqrt.f64 20) 4)) 1/3) d1)","(*.f64 (cbrt.f64 400) d1)","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (sqrt.f64 (pow.f64 (sqrt.f64 20) 3)))","(*.f64 d1 (sqrt.f64 (sqrt.f64 8000)))","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d1 (+.f64 10 (+.f64 d2 (pow.f64 (sqrt.f64 20) 2))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 (+.f64 30 d2) d1)","(*.f64 -1 (*.f64 d1 (+.f64 (*.f64 -1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 -1 (+.f64 10 d2)))))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 10 d1))","(*.f64 d1 30)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(*.f64 d2 d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)","(+.f64 (*.f64 10 d1) (+.f64 (*.f64 d1 (pow.f64 (sqrt.f64 20) 2)) (*.f64 d2 d1)))","(*.f64 (+.f64 30 d2) d1)"]],"time":175.09912109375,"type":"simplify"},{"compiler":[[3322,2742]],"time":47.179931640625,"type":"eval"},{"alts":[["(fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","done",0.1640625],["(fma.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (*.f64 (cbrt.f64 400) d1) (sqrt.f64 (sqrt.f64 20))) (*.f64 d1 (+.f64 10 d2)))","fresh",0.14453125],["(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","done",0.15625],["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","done",0.03125]],"compiler":[[24,21],[20,17],[19,16],[9,7]],"count":[[164,4]],"kept":[{"done":[2,2],"fresh":[1,0],"new":[160,1],"picked":[1,1]}],"min-error":[0],"time":44.696044921875,"type":"prune"},{"accuracy":[0.03125],"baseline":[0.03125],"branch":[["d1",0.03125,1],["d2",0.03125,1],["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))",0.03125,1]],"compiler":[[3,2],[3,2],[13,9],[127,102]],"count":[[8,1]],"inputs":[["(fma.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (*.f64 (cbrt.f64 400) d1) (sqrt.f64 (sqrt.f64 20))) (*.f64 d1 (+.f64 10 d2)))","(fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 20))) (*.f64 (cbrt.f64 (sqrt.f64 20)) (*.f64 d1 (sqrt.f64 20)))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20)) (*.f64 d1 (+.f64 10 d2)))","(fma.f64 (*.f64 (*.f64 d1 (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 (sqrt.f64 20))) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","(*.f64 (/.f64 (+.f64 (pow.f64 (+.f64 10 d2) 3) 8000) 1) (/.f64 d1 (+.f64 400 (*.f64 (+.f64 10 d2) (+.f64 d2 -10)))))","(fma.f64 (*.f64 d1 (sqrt.f64 20)) (sqrt.f64 20) (*.f64 d1 (+.f64 10 d2)))","(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))"]],"link":["."],"name":["FastMath test2"],"oracle":[19.949514745343464],"outputs":[["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))"]],"time":14.367919921875,"times":[["d1",3.886962890625],["d2",3.7900390625],["(+.f64 (+.f64 (*.f64 d1 10) (*.f64 d1 d2)) (*.f64 d1 20))",4.231201171875]],"type":"regimes"},{"compiler":[[9,7]],"inputs":[["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))"]],"method":["egg-herbie"],"outputs":[["(*.f64 d1 (+.f64 (+.f64 10 d2) 20))","(*.f64 d1 (+.f64 d2 30))"]],"stop":[["fuel",1]],"time":20.218017578125,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[9,7]],"remove-preprocessing":[[]],"time":8.032958984375,"type":"end"}]
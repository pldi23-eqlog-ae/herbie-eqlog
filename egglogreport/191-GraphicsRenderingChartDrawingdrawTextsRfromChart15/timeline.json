[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4407599744804429,0.09117633580581241],[11,0.41345625924714113,0.5148700586851191,0.07167368206773972],[10,0.34324670579007943,0.600681735132639,0.05607155907728156],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":87.2421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",53.24560546875,1271],["body",256,"valid",340.6904296875,8256]],"time":403.036865234375,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 y 1) z))","(+.f64 (*.f64 z y) (*.f64 (-.f64 z 1) x))","(+.f64 (*.f64 x z) (*.f64 (-.f64 x 1) y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","(fma.f64 x y (*.f64 (+.f64 x -1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 y 1) z))","(fma.f64 y x (*.f64 (+.f64 y -1) z))","(+.f64 (*.f64 z y) (*.f64 (-.f64 z 1) x))","(fma.f64 z y (*.f64 (+.f64 z -1) x))","(+.f64 (*.f64 x z) (*.f64 (-.f64 x 1) y))","(fma.f64 x z (*.f64 (+.f64 x -1) y))"]],"symmetry":[[]],"time":80.33203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","(fma.f64 x y (*.f64 (+.f64 x -1) z))"]],"time":20.239990234375,"type":"simplify"},{"compiler":[[20,12]],"time":2.426025390625,"type":"eval"},{"alts":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))","next",0]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0],"time":1.0810546875,"type":"prune"},{"compiler":[[23,13]],"locations":[["(*.f64 (+.f64 x -1) z)",0.00390625,true]],"time":5.886962890625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (+.f64 x -1) z)","z","-inf",0.316162109375],["(*.f64 (+.f64 x -1) z)","z","inf",0.467041015625],["(*.f64 (+.f64 x -1) z)","z","0",0.2939453125],["(*.f64 (+.f64 x -1) z)","x","-inf",0.39404296875],["(*.f64 (+.f64 x -1) z)","x","inf",0.376953125],["(*.f64 (+.f64 x -1) z)","x","0",0.35595703125]],"time":2.280029296875,"type":"series"},{"count":[[1,57]],"inputs":[["(*.f64 (+.f64 x -1) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (neg.f64 (neg.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 z x))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 z x) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 1 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x -1) z)) (pow.f64 (*.f64 (+.f64 x -1) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 2/3) (cbrt.f64 (*.f64 (+.f64 x -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (pow.f64 (+.f64 x -1) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) (+.f64 x -1)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 x -1) 2/3) z) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 (+.f64 (pow.f64 x 3) -1) (pow.f64 (fma.f64 x x (+.f64 1 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 x 3) -1) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 z (pow.f64 (fma.f64 x x (+.f64 1 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (+.f64 x -1))) (pow.f64 (+.f64 x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x -1) 2/3) (*.f64 z (cbrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (+.f64 (pow.f64 x 3) -1)) (/.f64 -1 (-.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 x) z)) (neg.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (pow.f64 (+.f64 x -1) 2/3) z)) (pow.f64 (fma.f64 x x (+.f64 1 x)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z (+.f64 (pow.f64 x 3) -1)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 z 2/3) (-.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 z x))))) (+.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (-.f64 (pow.f64 z 2/3) (*.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 (neg.f64 z))))) (+.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) -1) (/.f64 z (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (*.f64 (+.f64 x -1) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 1 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x -1) z) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 z) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (-.f64 1 (pow.f64 x 3))) (/.f64 1 (-.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (pow.f64 (+.f64 x -1) 2/3) z))) (neg.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 z (+.f64 (pow.f64 x 3) -1)) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))) (neg.f64 (pow.f64 (fma.f64 x x (+.f64 1 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (+.f64 (pow.f64 x 3) -1)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (fma.f64 x x (+.f64 1 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1)) (*.f64 (pow.f64 (+.f64 x -1) 2/3) z)) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (-.f64 1 (pow.f64 x 3))) (-.f64 -1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x -1) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 z (+.f64 (pow.f64 x 3) -1)) (pow.f64 (*.f64 (+.f64 x -1) z) 2))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (+.f64 (pow.f64 x 3) -1)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z (-.f64 1 (pow.f64 x 3)))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 z (+.f64 (pow.f64 x 3) -1)) (-.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z -1 (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (*.f64 z x))))))"]],"rules":[["egg-rr",57]],"time":44.60302734375,"type":"rewrite"},{"count":[[81,62]],"inputs":[["(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 (+.f64 x -1) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 (+.f64 x -1) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 (+.f64 x -1) z)","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 (+.f64 x -1) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 (+.f64 x -1) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 (+.f64 x -1) z)","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 (+.f64 x -1) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 (+.f64 x -1) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (+.f64 x -1) z)"]],"time":82.60693359375,"type":"simplify"},{"compiler":[[903,509]],"time":12.373046875,"type":"eval"},{"alts":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))","done",0]],"compiler":[[11,7]],"count":[[63,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[62,0],"picked":[1,1]}],"min-error":[0],"time":11.97705078125,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["z",0,1],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))",0,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[20,12]],"count":[[2,1]],"inputs":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))","(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))"]],"link":["."],"name":["Graphics.Rendering.Chart.Drawing:drawTextsR from Chart-1.5.3"],"oracle":[0.0078125],"outputs":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))"]],"time":11.014892578125,"times":[["x",2.322021484375],["y",2.64501953125],["z",2.6640625],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))",2.6298828125]],"type":"regimes"},{"compiler":[[11,7]],"inputs":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))"]],"stop":[["done",1]],"time":21.791015625,"type":"simplify"},{"time":0.02490234375,"type":"soundness"},{"compiler":[[11,7]],"remove-preprocessing":[[]],"time":10.541015625,"type":"end"}]
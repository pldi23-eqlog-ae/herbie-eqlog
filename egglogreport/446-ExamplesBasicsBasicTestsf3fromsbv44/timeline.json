[{"compiler":[[10,5]],"method":["search"],"sampling":[[12,0.4936581836082041,0.0809755518566817,0.42536626453511417],[11,0.4721947843208909,0.10731699643656611,0.420488219242543],[10,0.42926798574626446,0.15999988559633493,0.4107321286574006],[9,0.39024362340569496,0.21073155663907528,0.39902481995522976],[8,0.31219489872455597,0.31219489872455597,0.37561020255088806],[7,0.24975591897964478,0.40585336834192276,0.34439071267843246],[6,0.24975591897964478,0.5619508177042007,0.18829326331615448],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":19.2861328125,"type":"analyze"},{"outcomes":[["body",256,"invalid",5.888427734375,192],["body",256,"valid",255.37646484375,8256]],"time":269.142822265625,"type":"sample"},{"compiler":[[9,4]],"inputs":[["0","1"],["(*.f64 (+.f64 x y) (+.f64 x y))","(*.f64 (+.f64 y x) (+.f64 y x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (+.f64 x y) (+.f64 x y))","(pow.f64 (+.f64 x y) 2)","(*.f64 (+.f64 y x) (+.f64 y x))","(pow.f64 (+.f64 x y) 2)"]],"symmetry":[[]],"time":58.114013671875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (+.f64 x y) (+.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 x y) (+.f64 x y))","(pow.f64 (+.f64 x y) 2)"]],"time":35.6181640625,"type":"simplify"},{"compiler":[[14,6]],"time":0.284912109375,"type":"eval"},{"alts":[["(pow.f64 (+.f64 x y) 2)","next",0.02734375]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.02734375],"time":0.81298828125,"type":"prune"},{"compiler":[[13,6]],"locations":[["(pow.f64 (+.f64 x y) 2)",0.02734375,true]],"time":4.385986328125,"type":"localize"},{"count":[[1,24]],"series":[["(pow.f64 (+.f64 x y) 2)","y","-inf",0.2880859375],["(pow.f64 (+.f64 x y) 2)","y","inf",0.254150390625],["(pow.f64 (+.f64 x y) 2)","y","0",0.247802734375],["(pow.f64 (+.f64 x y) 2)","x","-inf",0.295166015625],["(pow.f64 (+.f64 x y) 2)","x","inf",0.335205078125],["(pow.f64 (+.f64 x y) 2)","x","0",0.3798828125]],"time":1.881103515625,"type":"series"},{"count":[[1,48]],"inputs":[["(pow.f64 (+.f64 x y) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 x y) y) (*.f64 x y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (+.f64 (*.f64 x y) (*.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 x y) x))) (neg.f64 (neg.f64 (*.f64 (+.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 (+.f64 x y) y))) (neg.f64 (neg.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 (+.f64 x y) x) -1)) (neg.f64 (*.f64 (*.f64 (+.f64 x y) y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 (+.f64 x y) y) -1)) (neg.f64 (*.f64 (*.f64 (+.f64 x y) x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) y) (*.f64 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 (+.f64 x y) y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 x y) x) (*.f64 x y)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 (+.f64 x y) y)) (*.f64 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 (+.f64 x y) x)) (*.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (+.f64 (*.f64 x y) (*.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (fma.f64 x x (*.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) x) (+.f64 (*.f64 (+.f64 x y) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) y) (+.f64 (*.f64 (+.f64 x y) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 x y) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (+.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (+.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x y) 2/3) (pow.f64 (+.f64 x y) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x y) 4/3) (pow.f64 (+.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 x y) 2/3)) (neg.f64 (pow.f64 (+.f64 x y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) (cbrt.f64 (*.f64 (+.f64 x y) x))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) (cbrt.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (pow.f64 (cbrt.f64 (+.f64 x y)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 5) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (+.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 x y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (+.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 x y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (+.f64 x y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x y) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x y) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x y) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (+.f64 x y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (+.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x y) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 x y) (*.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) y (*.f64 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 x y) (*.f64 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) x (*.f64 (+.f64 x y) y))))))"]],"rules":[["egg-rr",48]],"time":36.291015625,"type":"rewrite"},{"count":[[72,58]],"inputs":[["(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(*.f64 y (+.f64 y (+.f64 x x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 x (+.f64 y y)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 x (+.f64 y y)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (+.f64 x (+.f64 y y)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(*.f64 y (+.f64 y (+.f64 x x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(*.f64 y (+.f64 y (+.f64 x x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 y (+.f64 y (+.f64 x x))) (*.f64 x x))"]],"time":83.220947265625,"type":"simplify"},{"compiler":[[621,209]],"time":6.61083984375,"type":"eval"},{"alts":[["(*.f64 (+.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))","next",0.6648790039794927],["(*.f64 x (+.f64 x (+.f64 y y)))","fresh",25.36585641675293],["(pow.f64 (+.f64 x y) 2)","done",0.02734375]],"compiler":[[47,16],[9,5],[7,5],[47,16],[9,5]],"count":[[59,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[58,2],"picked":[1,1]}],"min-error":[0.00390625],"time":11.5341796875,"type":"prune"},{"compiler":[[170,30]],"locations":[["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2)",0.4381637695368841,true],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2)",0.47884750976844204,true],["(cbrt.f64 (*.f64 (+.f64 x y) x))",8.796194163822738,true],["(cbrt.f64 (*.f64 (+.f64 x y) y))",9.051130772056885,true]],"time":19.85791015625,"type":"localize"},{"count":[[4,16]],"series":[["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2)","y","-inf",0.65185546875],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2)","y","inf",0.241943359375],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2)","y","0",0.656982421875],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2)","x","-inf",0.39501953125],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2)","x","inf",0.2109375],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2)","x","0",0.31494140625],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2)","y","-inf",0.494140625],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2)","y","inf",0.5],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2)","y","0",0.2861328125],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2)","x","-inf",0.3388671875],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2)","x","inf",0.4169921875],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2)","x","0",0.638916015625],["(cbrt.f64 (*.f64 (+.f64 x y) x))","y","-inf",0.26318359375],["(cbrt.f64 (*.f64 (+.f64 x y) x))","y","inf",0.254150390625],["(cbrt.f64 (*.f64 (+.f64 x y) x))","y","0",0.64697265625],["(cbrt.f64 (*.f64 (+.f64 x y) x))","x","-inf",0.375],["(cbrt.f64 (*.f64 (+.f64 x y) x))","x","inf",0.244140625],["(cbrt.f64 (*.f64 (+.f64 x y) x))","x","0",0.284912109375],["(cbrt.f64 (*.f64 (+.f64 x y) y))","y","-inf",0.697021484375],["(cbrt.f64 (*.f64 (+.f64 x y) y))","y","inf",0.343017578125],["(cbrt.f64 (*.f64 (+.f64 x y) y))","y","0",0.307861328125],["(cbrt.f64 (*.f64 (+.f64 x y) y))","x","-inf",0.300048828125],["(cbrt.f64 (*.f64 (+.f64 x y) y))","x","inf",0.4228515625],["(cbrt.f64 (*.f64 (+.f64 x y) y))","x","0",0.868896484375]],"time":10.450927734375,"type":"series"},{"count":[[4,112]],"inputs":[["(cbrt.f64 (*.f64 (+.f64 x y) y))","(cbrt.f64 (*.f64 (+.f64 x y) x))","(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2)","(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 0) (cbrt.f64 (*.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) (*.f64 0 (cbrt.f64 (*.f64 (+.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (+.f64 x y) y))) (cbrt.f64 (*.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (+.f64 x y)))) (cbrt.f64 (pow.f64 (+.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 x y) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) (cbrt.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 (+.f64 x y) y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) y))) 5)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) y) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)))) (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (+.f64 x y) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 0) (cbrt.f64 (*.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (*.f64 0 (cbrt.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (+.f64 x y) x))) (cbrt.f64 (*.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (+.f64 x y)))) (cbrt.f64 (pow.f64 (+.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (*.f64 (+.f64 x y) x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 x y) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (pow.f64 x 2/3) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))) 5)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) x) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)))) (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (+.f64 x y) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3) (*.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3) 0) (pow.f64 (*.f64 (+.f64 x y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3) (*.f64 0 (pow.f64 (*.f64 (+.f64 x y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (*.f64 (+.f64 x y) y) 2/3)) (pow.f64 (*.f64 (+.f64 x y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) y))) (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) (cbrt.f64 (*.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x y) 2/3) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) y) 4/3)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (+.f64 x y) y) (+.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (*.f64 y (*.f64 (+.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) y))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) y))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 (+.f64 x y) y) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 (+.f64 x y) y))) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) y))) 5) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (pow.f64 (+.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) y))) 1) (*.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 (+.f64 x y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) y) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) y))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) y) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3) (*.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3) 0) (pow.f64 (*.f64 (+.f64 x y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3) (*.f64 0 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)) (pow.f64 (*.f64 (+.f64 x y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) x))) (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x y) 2/3) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) x) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) x) 4/3)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (+.f64 x y) x) (+.f64 x y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (*.f64 x (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (*.f64 (+.f64 x y) x))) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))) 5) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (pow.f64 (+.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 (+.f64 x y) x) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) x))) 1) (*.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 (+.f64 x y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) x) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (*.f64 (+.f64 x y) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2))))))"]],"rules":[["egg-rr",31],["egg-rr",31],["egg-rr",25],["egg-rr",25]],"time":32.906005859375,"type":"rewrite"},{"count":[[128,144]],"inputs":[["(pow.f64 (pow.f64 y 2) 1/3)","(+.f64 (pow.f64 (pow.f64 y 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/9) x)))","(+.f64 (pow.f64 (pow.f64 y 2) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/9) x)) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 4)) 1/9) (pow.f64 x 2)))))","(+.f64 (pow.f64 (pow.f64 y 2) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/9) x)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3) (*.f64 (+.f64 (*.f64 1/27 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 y 5) 1/3)))) (pow.f64 x 3)))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 4)) 1/9) (pow.f64 x 2))))))","(pow.f64 (pow.f64 x 2) 1/3)","(+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 5) 1/3))) (*.f64 1/27 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/3)))))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y)))))","(pow.f64 (pow.f64 y 4) 1/3)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 11)) 1/9) x)) (pow.f64 (pow.f64 y 4) 1/3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 11)) 1/9) x)) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 y 10)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 y 10)) 1/9))) (pow.f64 x 2)) (pow.f64 (pow.f64 y 4) 1/3)))","(+.f64 (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) y)) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (+.f64 (*.f64 1/27 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 y 5) 1/3))))))) (pow.f64 x 3)) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 11)) 1/9) x)) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 y 10)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 y 10)) 1/9))) (pow.f64 x 2)) (pow.f64 (pow.f64 y 4) 1/3))))","(pow.f64 (pow.f64 x 4) 1/3)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) y)) (pow.f64 (pow.f64 x 4) 1/3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) y)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 10)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 10)) 1/9)))) (pow.f64 (pow.f64 x 4) 1/3)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) y)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 10)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 10)) 1/9)))) (+.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) x)) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (+.f64 (*.f64 1/27 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 5) 1/3)))))))) (pow.f64 (pow.f64 x 4) 1/3))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 y 2) 1/3)","(cbrt.f64 (*.f64 y y))","(+.f64 (pow.f64 (pow.f64 y 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/9) x)))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 y 5) 1/9) x) (cbrt.f64 (*.f64 y y)))","(+.f64 (pow.f64 (pow.f64 y 2) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/9) x)) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 4)) 1/9) (pow.f64 x 2)))))","(+.f64 (cbrt.f64 (*.f64 y y)) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 y 5) 1/9) x) (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 y 4) 1/9)) (*.f64 x x))))","(+.f64 (pow.f64 (pow.f64 y 2) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/9) x)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/3) (*.f64 (+.f64 (*.f64 1/27 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 y 5) 1/3)))) (pow.f64 x 3)))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 4)) 1/9) (pow.f64 x 2))))))","(+.f64 (cbrt.f64 (*.f64 y y)) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 y 5) 1/9) x) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 y -4)) (*.f64 (cbrt.f64 (pow.f64 y 5)) (+.f64 -2/9 1/27))) (pow.f64 x 3)) (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 y 4) 1/9)) (*.f64 x x)))))","(pow.f64 (pow.f64 x 2) 1/3)","(cbrt.f64 (*.f64 x x))","(+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y)))","(fma.f64 (*.f64 1/3 (pow.f64 (pow.f64 x 5) 1/9)) y (cbrt.f64 (*.f64 x x)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y))))","(fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 4) 1/9) (*.f64 y y)) (fma.f64 (*.f64 1/3 (pow.f64 (pow.f64 x 5) 1/9)) y (cbrt.f64 (*.f64 x x))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 5) 1/3))) (*.f64 1/27 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/3)))))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y)))))","(fma.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -4)) (pow.f64 y 3)) (*.f64 (cbrt.f64 (pow.f64 x 5)) (+.f64 -2/9 1/27))) -1/3 (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 4) 1/9) (*.f64 y y)) (fma.f64 (*.f64 1/3 (pow.f64 (pow.f64 x 5) 1/9)) y (cbrt.f64 (*.f64 x x)))))","(pow.f64 (pow.f64 y 4) 1/3)","(cbrt.f64 (pow.f64 y 4))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 11)) 1/9) x)) (pow.f64 (pow.f64 y 4) 1/3))","(fma.f64 2/3 (*.f64 (pow.f64 (pow.f64 y 11) 1/9) x) (cbrt.f64 (pow.f64 y 4)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 11)) 1/9) x)) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 y 10)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 y 10)) 1/9))) (pow.f64 x 2)) (pow.f64 (pow.f64 y 4) 1/3)))","(fma.f64 (*.f64 2/3 (pow.f64 (pow.f64 y 11) 1/9)) x (fma.f64 (*.f64 (pow.f64 (pow.f64 y 10) 1/9) -1/9) (*.f64 x x) (cbrt.f64 (pow.f64 y 4))))","(+.f64 (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) y)) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) (+.f64 (*.f64 1/27 (pow.f64 (*.f64 1 (pow.f64 y 5)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 y 5) 1/3))))))) (pow.f64 x 3)) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 11)) 1/9) x)) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 y 10)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 y 10)) 1/9))) (pow.f64 x 2)) (pow.f64 (pow.f64 y 4) 1/3))))","(fma.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (cbrt.f64 (pow.f64 y 5)) (+.f64 -2/9 1/27))) -2/3 (*.f64 -2/27 y)) (pow.f64 x 3) (fma.f64 (*.f64 2/3 (pow.f64 (pow.f64 y 11) 1/9)) x (fma.f64 (*.f64 (pow.f64 (pow.f64 y 10) 1/9) -1/9) (*.f64 x x) (cbrt.f64 (pow.f64 y 4)))))","(pow.f64 (pow.f64 x 4) 1/3)","(cbrt.f64 (pow.f64 x 4))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) y)) (pow.f64 (pow.f64 x 4) 1/3))","(fma.f64 2/3 (*.f64 (pow.f64 (pow.f64 x 11) 1/9) y) (cbrt.f64 (pow.f64 x 4)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) y)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 10)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 10)) 1/9)))) (pow.f64 (pow.f64 x 4) 1/3)))","(fma.f64 (*.f64 2/3 (pow.f64 (pow.f64 x 11) 1/9)) y (fma.f64 (*.f64 y y) (*.f64 (pow.f64 (pow.f64 x 10) 1/9) -1/9) (cbrt.f64 (pow.f64 x 4))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) y)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 10)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 10)) 1/9)))) (+.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) x)) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (+.f64 (*.f64 1/27 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 5) 1/3)))))))) (pow.f64 (pow.f64 x 4) 1/3))))","(fma.f64 (*.f64 2/3 (pow.f64 (pow.f64 x 11) 1/9)) y (fma.f64 (*.f64 y y) (*.f64 (pow.f64 (pow.f64 x 10) 1/9) -1/9) (fma.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (*.f64 (cbrt.f64 (pow.f64 x 5)) (+.f64 -2/9 1/27))) -2/3 (*.f64 -2/27 x)) (pow.f64 y 3) (cbrt.f64 (pow.f64 x 4)))))"]],"time":65.156982421875,"type":"simplify"},{"compiler":[[14846,3953]],"time":74.41015625,"type":"eval"},{"alts":[["(*.f64 (+.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))","done",0.6648790039794927],["(*.f64 (+.f64 (pow.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))","next",0.7797878539792407],["(*.f64 x (+.f64 x (+.f64 y y)))","fresh",25.36585641675293],["(pow.f64 (+.f64 x y) 2)","done",0.02734375]],"compiler":[[47,16],[48,19],[9,5],[7,5],[48,19],[9,5]],"count":[[279,4]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[276,1],"picked":[1,1]}],"min-error":[0],"time":74.202880859375,"type":"prune"},{"compiler":[[186,33]],"locations":[["(*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x))",0.44435502930532605,true],["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2)",0.47884750976844204,false],["(cbrt.f64 (*.f64 (+.f64 x y) x))",8.796194163822738,false],["(cbrt.f64 (*.f64 (+.f64 x y) y))",9.051130772056885,false]],"time":23.155029296875,"type":"localize"},{"count":[[1,4]],"series":[["(*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x))","y","-inf",0.22412109375],["(*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x))","y","inf",0.232177734375],["(*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x))","y","0",0.2451171875],["(*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x))","x","-inf",0.2919921875],["(*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x))","x","inf",0.243896484375],["(*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x))","x","0",0.35009765625]],"time":1.68896484375,"type":"series"},{"count":[[1,26]],"inputs":[["(*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 0) (cbrt.f64 (*.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (*.f64 0 (cbrt.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (+.f64 x y) x))) (cbrt.f64 (*.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (pow.f64 x 2/3) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 x y) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (+.f64 x y)))) (cbrt.f64 (pow.f64 (+.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x y) 2/3) x)) (cbrt.f64 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2/3)) (cbrt.f64 (*.f64 x (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 2/3) (+.f64 x y))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) x) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (*.f64 (+.f64 x y) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cbrt.f64 (*.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (+.f64 x y) x))))))"]],"rules":[["egg-rr",26]],"time":23.4970703125,"type":"rewrite"},{"count":[[30,34]],"inputs":[["(pow.f64 (pow.f64 x 2) 1/3)","(+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 5) 1/3))) (*.f64 1/27 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/3)))))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y)))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 x 2) 1/3)","(pow.f64 x 2/3)","(+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y)))","(fma.f64 (*.f64 1/3 (pow.f64 (pow.f64 x 5) 1/9)) y (pow.f64 x 2/3))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y))))","(+.f64 (*.f64 y (+.f64 (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 x 4) 1/9)) y) (*.f64 1/3 (pow.f64 (pow.f64 x 5) 1/9)))) (pow.f64 x 2/3))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 5) 1/3))) (*.f64 1/27 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/3)))))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) (pow.f64 y 2))) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 5)) 1/9) y)))))","(fma.f64 -1/3 (*.f64 (cbrt.f64 (pow.f64 x -4)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x 5)) (pow.f64 y 3)) -5/27)) (+.f64 (*.f64 y (+.f64 (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 x 4) 1/9)) y) (*.f64 1/3 (pow.f64 (pow.f64 x 5) 1/9)))) (pow.f64 x 2/3)))"]],"time":42.386962890625,"type":"simplify"},{"compiler":[[13021,3459]],"time":64.416015625,"type":"eval"},{"alts":[["(*.f64 (+.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))","done",0.6648790039794927],["(*.f64 (+.f64 (pow.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))","done",0.7797878539792407],["(*.f64 x (+.f64 x (+.f64 y y)))","next",25.36585641675293],["(pow.f64 (+.f64 x y) 2)","done",0.02734375]],"compiler":[[47,16],[48,19],[9,5],[7,5],[9,5]],"count":[[242,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[238,0],"picked":[1,1]}],"min-error":[0],"time":51.3310546875,"type":"prune"},{"compiler":[[19,5]],"locations":[["(*.f64 x (+.f64 x (+.f64 y y)))",0.0234375,true]],"time":3.635009765625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 x (+.f64 x (+.f64 y y)))","y","-inf",0.227783203125],["(*.f64 x (+.f64 x (+.f64 y y)))","y","inf",0.326171875],["(*.f64 x (+.f64 x (+.f64 y y)))","y","0",0.275146484375],["(*.f64 x (+.f64 x (+.f64 y y)))","x","-inf",0.343994140625],["(*.f64 x (+.f64 x (+.f64 y y)))","x","inf",0.326171875],["(*.f64 x (+.f64 x (+.f64 y y)))","x","0",0.391845703125]],"time":1.98583984375,"type":"series"},{"count":[[1,51]],"inputs":[["(*.f64 x (+.f64 x (+.f64 y y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (fma.f64 2 y x)) 0) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 (*.f64 x (fma.f64 2 y x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 x y)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 x y)) 1) (*.f64 (*.f64 y x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 x (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (fma.f64 2 y x))) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 0 (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 x (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 2 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 2 y x)) (*.f64 (pow.f64 (fma.f64 2 y x) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 2 y x) 2/3) x) (cbrt.f64 (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (fma.f64 2 y x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (fma.f64 2 y x))) (pow.f64 (*.f64 x (fma.f64 2 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2/3) (cbrt.f64 (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (fma.f64 2 y x))) (pow.f64 (fma.f64 2 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 2 y x) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 2 y x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 2 y x) 2/3) (*.f64 x (cbrt.f64 (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (+.f64 (*.f64 (+.f64 y y) (cbrt.f64 x)) (pow.f64 x 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 x 4/3) (*.f64 (+.f64 y y) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (fma.f64 2 y x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (fma.f64 2 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 2 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 2 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (fma.f64 2 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 x (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (pow.f64 x 4/3) (*.f64 x (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4/3) (pow.f64 x 2/3) (*.f64 x (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 5) (*.f64 x (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y y) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 y y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (+.f64 y y))) (pow.f64 (+.f64 y y) 2/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y y)) (*.f64 (pow.f64 (+.f64 y y) 2/3) x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) y (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y y))) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y y)) 2)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y y) x (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) x (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 x y) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 y x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 x (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (*.f64 x (+.f64 y y)))))))"]],"rules":[["egg-rr",51]],"time":21.688232421875,"type":"rewrite"},{"count":[[75,56]],"inputs":[["(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 y x))","(*.f64 (+.f64 y y) x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(*.f64 2 (*.f64 y x))","(*.f64 (+.f64 y y) x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(*.f64 2 (*.f64 y x))","(*.f64 (+.f64 y y) x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 x (fma.f64 2 y x))"]],"time":78.02685546875,"type":"simplify"},{"compiler":[[590,268]],"time":7.37109375,"type":"eval"},{"alts":[["(*.f64 (+.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))","done",0.6648790039794927],["(*.f64 (+.f64 (pow.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))","done",0.7797878539792407],["(*.f64 x (+.f64 x (+.f64 y y)))","done",25.36585641675293],["(pow.f64 (+.f64 x y) 2)","done",0.02734375]],"compiler":[[47,16],[48,19],[9,5],[7,5]],"count":[[60,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[56,0],"picked":[1,1]}],"min-error":[0],"time":8.821044921875,"type":"prune"},{"accuracy":[0.02734375],"baseline":[0.02734375],"branch":[["x",0.02734375,1],["y",0.02734375,1],["(*.f64 (+.f64 x y) (+.f64 x y))",0.02734375,1],["(+.f64 x y)",0.02734375,1]],"compiler":[[3,2],[3,2],[9,4],[5,3],[112,32]],"count":[[5,1]],"inputs":[["(*.f64 (+.f64 (pow.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 x)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))","(*.f64 (+.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) 2) (-.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) y)) 2) (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (*.f64 (+.f64 x y) y))))","(*.f64 x (+.f64 x (+.f64 y y)))","(pow.f64 (+.f64 x y) 2)","(*.f64 (+.f64 x y) (+.f64 x y))"]],"link":["."],"name":["Examples.Basics.BasicTests:f3 from sbv-4.4"],"oracle":[25.884882991426853],"outputs":[["(pow.f64 (+.f64 x y) 2)"]],"time":14.536865234375,"times":[["x",3.223876953125],["y",3.258056640625],["(*.f64 (+.f64 x y) (+.f64 x y))",3.1689453125],["(+.f64 x y)",3.32080078125]],"type":"regimes"},{"compiler":[[7,5]],"inputs":[["(pow.f64 (+.f64 x y) 2)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (+.f64 x y) 2)"]],"stop":[["done",1]],"time":34.922119140625,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.5390625,"type":"end"}]
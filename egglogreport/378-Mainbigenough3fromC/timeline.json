[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.4992678165435791,0.0009760856628417969,0.4997560977935791],[11,0.4987797737121582,0.0019521713256835938,0.4992680549621582],[10,0.4978036880493164,0.0039043426513671875,0.4982919692993164],[9,0.4958515167236328,0.007808685302734375,0.4963397979736328],[8,0.4919471740722656,0.01561737060546875,0.4924354553222656],[7,0.48413848876953125,0.0312347412109375,0.48462677001953125],[6,0.4685211181640625,0.062469482421875,0.4690093994140625],[5,0.437286376953125,0.12493896484375,0.437774658203125],[4,0.37481689453125,0.2498779296875,0.37530517578125],[3,0.2498779296875,0.499755859375,0.2503662109375],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.530029296875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.164306640625,5],["body",1024,"valid",193.10205078125,2014],["body",512,"valid",66.08349609375,1020],["body",2048,"valid",30.072998046875,235],["body",256,"valid",177.528076171875,4987]],"time":475.707763671875,"type":"sample"},{"compiler":[[8,6]],"inputs":[["0"],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))"]],"symmetry":[[]],"time":53.22021484375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))"]],"time":19.371826171875,"type":"simplify"},{"compiler":[[15,10]],"time":0.3701171875,"type":"eval"},{"alts":[["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","next",29.550838072395354],["(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))","fresh",29.758700225892735]],"compiler":[[8,6],[8,6],[8,6],[8,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[29.30418576554707],"time":1.2470703125,"type":"prune"},{"compiler":[[19,12]],"locations":[["(sqrt.f64 (+.f64 x 1))",0.0078125,true],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",3.109577381821928,true]],"time":4.994873046875,"type":"localize"},{"count":[[2,5]],"series":[["(sqrt.f64 (+.f64 x 1))","x","-inf",0.296875],["(sqrt.f64 (+.f64 x 1))","x","inf",0.297119140625],["(sqrt.f64 (+.f64 x 1))","x","0",0.18408203125],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","-inf",0.68603515625],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","inf",1.1640625],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","0",0.490966796875]],"time":3.197021484375,"type":"series"},{"count":[[2,142]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","(sqrt.f64 (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 1/2 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))) (neg.f64 (/.f64 (pow.f64 x 3/2) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))) (/.f64 (pow.f64 x 3/2) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (+.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 x))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 x))) (-.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))) (-.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))) (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))))) (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))))) (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2))) 2) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 (fma.f64 x x x))))) (-.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (/.f64 1 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))) (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (-.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (/.f64 1 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (/.f64 1 (neg.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))) (/.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))))) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))) (*.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))) (pow.f64 x 3/2))) (*.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) 1) (*.f64 (neg.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (neg.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (neg.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (sqrt.f64 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (neg.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)))) (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) 1) (neg.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (+.f64 x (-.f64 (exp.f64 (log1p.f64 x)) (neg.f64 (sqrt.f64 (fma.f64 x x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (*.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (sqrt.f64 (fma.f64 x x x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (neg.f64 (cbrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1/2) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 1/2 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 0 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (fabs.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (+.f64 (pow.f64 x 3) 1))) (cbrt.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 1)) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (cbrt.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (*.f64 (log1p.f64 x) 1/2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 -1 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 -1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (neg.f64 (sqrt.f64 x)))))))"]],"rules":[["egg-rr",56],["egg-rr",86]],"time":31.6630859375,"type":"rewrite"},{"count":[[147,149]],"inputs":[["1","1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["1","1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(+.f64 (*.f64 x (+.f64 1/2 (*.f64 x -1/8))) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))","(+.f64 (*.f64 x (+.f64 1/2 (*.f64 x -1/8))) (fma.f64 1/16 (pow.f64 x 3) 1))"]],"time":36.62890625,"type":"simplify"},{"compiler":[[2271,683]],"time":20.346923828125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","next",29.485162821658463],["1","fresh",30.722987394225004],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","done",29.550838072395354],["(/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))) (*.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))) (pow.f64 x 3/2))) (*.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))","fresh",30.42294403203718],["(-.f64 (/.f64 (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (+.f64 (pow.f64 x 3) 1))) (cbrt.f64 (fma.f64 x x (-.f64 1 x)))) (sqrt.f64 x))","fresh",30.29288034186686],["(/.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))","fresh",30.076185033049867]],"compiler":[[14,8],[2,2],[8,6],[58,17],[24,18],[35,23],[14,8],[2,2],[58,17],[24,18],[35,23]],"count":[[151,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[149,5],"picked":[1,1]}],"min-error":[28.343434220432385],"time":35.400146484375,"type":"prune"},{"compiler":[[38,8]],"locations":[["(+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))",0.01171875,true],["(/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))",0.16015625,true],["(exp.f64 (log1p.f64 x))",2.7488502204935705,true],["(-.f64 (exp.f64 (log1p.f64 x)) x)",28.80085189861417,true]],"time":7.75390625,"type":"localize"},{"count":[[4,26]],"series":[["(+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))","x","-inf",0.4638671875],["(+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))","x","inf",0.337158203125],["(+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))","x","0",0.211181640625],["(/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","x","-inf",3.5810546875],["(/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","x","inf",1.625],["(/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","x","0",0.535888671875],["(exp.f64 (log1p.f64 x))","x","-inf",2.291015625],["(exp.f64 (log1p.f64 x))","x","inf",1.673828125],["(exp.f64 (log1p.f64 x))","x","0",0.14892578125],["(-.f64 (exp.f64 (log1p.f64 x)) x)","x","-inf",2.6708984375],["(-.f64 (exp.f64 (log1p.f64 x)) x)","x","inf",0.4970703125],["(-.f64 (exp.f64 (log1p.f64 x)) x)","x","0",21.06494140625]],"time":35.284912109375,"type":"series"},{"count":[[4,324]],"inputs":[["(-.f64 (exp.f64 (log1p.f64 x)) x)","(exp.f64 (log1p.f64 x))","(/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","(+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1/2) (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 0) (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (*.f64 0 (-.f64 (exp.f64 (log1p.f64 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (exp.f64 (log1p.f64 x)) x)) (*.f64 1/2 (-.f64 (exp.f64 (log1p.f64 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (exp.f64 (log1p.f64 x)) x)) (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 x) (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (exp.f64 (log1p.f64 x)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2)) (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (exp.f64 (log1p.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (exp.f64 (log1p.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (-.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 x)) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (*.f64 2 (log1p.f64 x)))) (+.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) (-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (exp.f64 (log1p.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 2 (log1p.f64 x))) (*.f64 x x)) (+.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)) (neg.f64 (pow.f64 x 3))) (+.f64 (exp.f64 (*.f64 2 (log1p.f64 x))) (*.f64 (neg.f64 x) (-.f64 (neg.f64 x) (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 x 3)) (exp.f64 (*.f64 (log1p.f64 x) 3))) (+.f64 (*.f64 x x) (-.f64 (exp.f64 (*.f64 2 (log1p.f64 x))) (*.f64 (exp.f64 (log1p.f64 x)) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)) (pow.f64 x 3)) (fma.f64 x x (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (exp.f64 (log1p.f64 x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 x (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (exp.f64 (*.f64 2 (log1p.f64 x)))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (*.f64 x x)) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 x (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (neg.f64 (cbrt.f64 (*.f64 x x))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (*.f64 2 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (exp.f64 (log1p.f64 x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (exp.f64 (log1p.f64 x)) (+.f64 1/3 1/2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (log1p.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 x) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (log1p.f64 x)) 1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (exp.f64 (log1p.f64 x)) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (*.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 x)) 1/2) (*.f64 (exp.f64 (log1p.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 x)) 0) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (*.f64 0 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (exp.f64 (log1p.f64 x))) (*.f64 1/2 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (log1p.f64 x))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (exp.f64 (*.f64 2 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 2 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (exp.f64 (log1p.f64 x)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (log1p.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (log1p.f64 x)) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 1 (+.f64 1 (*.f64 x (-.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x))) (+.f64 1 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 1 (cbrt.f64 x))) (+.f64 (cbrt.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 x)) (pow.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 0) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 x 3)) (+.f64 1 (*.f64 x (-.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) 1) (+.f64 1 (*.f64 x (-.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (log1p.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (log1p.f64 x)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 (log1p.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 1 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (/.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 x 3)) (+.f64 (*.f64 x x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) 1) (*.f64 (+.f64 1 (*.f64 x (-.f64 x 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 x 3))) (neg.f64 (+.f64 1 (*.f64 x (-.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (exp.f64 (log1p.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 0) (pow.f64 (exp.f64 (log1p.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 x)) (pow.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (log1p.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 2 (log1p.f64 x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (neg.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (log1p.f64 x) 2))) (cbrt.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (exp.f64 (*.f64 2 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log1p.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 x) 1/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 x) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log1p.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (pow.f64 x 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 x 3/2)) (sqrt.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 x) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) 1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (neg.f64 x)) (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1/2) (*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 0) (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 0 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (*.f64 1/2 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (/.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (/.f64 (exp.f64 (log1p.f64 x)) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (/.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (/.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) x) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (-.f64 (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)) (cbrt.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 (exp.f64 (log1p.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 x (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) x))) (/.f64 1 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (-.f64 (exp.f64 (log1p.f64 x)) x)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (sqrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (sqrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (/.f64 x (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (log1p.f64 x)) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 x))) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (log1p.f64 x)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (/.f64 x (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (*.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (/.f64 x (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (*.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) x)) (*.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (*.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (/.f64 x (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (*.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (neg.f64 x))) (*.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) x)) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (*.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (/.f64 x (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (*.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 x)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (/.f64 x (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 x)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (neg.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 x)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 x)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (/.f64 x (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) x)))) (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) x))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)) (cbrt.f64 (-.f64 x (exp.f64 (log1p.f64 x))))) (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)) (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (-.f64 (exp.f64 (log1p.f64 x)) x)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) 2))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) x))) 1) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x (exp.f64 (log1p.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2))) (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (log1p.f64 x)) x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) -1) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (exp.f64 (log1p.f64 x))) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 x))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (*.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (/.f64 x (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 x (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (log1p.f64 x)) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (/.f64 (cbrt.f64 (exp.f64 (*.f64 2 (log1p.f64 x)))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (/.f64 (exp.f64 (log1p.f64 x)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (/.f64 (exp.f64 (log1p.f64 x)) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 (cbrt.f64 (exp.f64 (*.f64 2 (log1p.f64 x)))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (exp.f64 (log1p.f64 x)) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (/.f64 x (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 0 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 1/2 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (*.f64 -1 (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1) (*.f64 (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) -1) (*.f64 (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))) (+.f64 (cbrt.f64 (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (-.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))) (+.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3/2) (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) 1 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))"]],"rules":[["egg-rr",59],["egg-rr",103],["egg-rr",91],["egg-rr",71]],"time":55.127197265625,"type":"rewrite"},{"count":[[350,337]],"inputs":[["1","1","1","1","(*.f64 -1 x)","(+.f64 (*.f64 -1 x) x)","(+.f64 1 (+.f64 (*.f64 -1 x) x))","(+.f64 1 (+.f64 (*.f64 -1 x) x))","(*.f64 -1 x)","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (*.f64 -1 x))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (+.f64 (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x) (*.f64 -1 x)))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (+.f64 (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x) (*.f64 -1 x)))","1","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","x","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","(exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))","1","1"]],"method":["egg-herbie"],"outputs":[["1","1","1","1","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) x)","0","(+.f64 1 (+.f64 (*.f64 -1 x) x))","1","(+.f64 1 (+.f64 (*.f64 -1 x) x))","1","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (*.f64 -1 x))","0","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (+.f64 (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x) (*.f64 -1 x)))","(/.f64 x x)","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (+.f64 (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x) (*.f64 -1 x)))","(/.f64 x x)","1","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","x","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","(exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","x","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))","(+.f64 x (/.f64 x x))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))","(+.f64 x (/.f64 x x))","(+.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) x))","(+.f64 x (/.f64 x x))","1","1"]],"time":101.2548828125,"type":"simplify"},{"compiler":[[9072,2318]],"time":63.078125,"type":"eval"},{"alts":[["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","done",29.550838072395354],["(/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","next",1.8703415633318639],["(-.f64 (/.f64 (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (+.f64 (pow.f64 x 3) 1))) (cbrt.f64 (fma.f64 x x (-.f64 1 x)))) (sqrt.f64 x))","fresh",30.29288034186686]],"compiler":[[8,6],[10,8],[24,18],[10,8],[24,18]],"count":[[438,3]],"kept":[{"done":[1,1],"fresh":[4,1],"new":[432,1],"picked":[1,0]}],"min-error":[1.825087803563422],"time":194.785888671875,"type":"prune"},{"compiler":[[30,9]],"locations":[["(sqrt.f64 (exp.f64 (log1p.f64 x)))",0.0078125,true],["(+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))",0.01171875,false],["(/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))",0.19921875,true],["(exp.f64 (log1p.f64 x))",2.7488502204935705,false]],"time":6.5390625,"type":"localize"},{"count":[[2,13]],"series":[["(sqrt.f64 (exp.f64 (log1p.f64 x)))","x","-inf",0.3759765625],["(sqrt.f64 (exp.f64 (log1p.f64 x)))","x","inf",0.278076171875],["(sqrt.f64 (exp.f64 (log1p.f64 x)))","x","0",0.18896484375],["(/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","x","-inf",2.6201171875],["(/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","x","inf",1.7548828125],["(/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","x","0",0.427978515625]],"time":5.7470703125,"type":"series"},{"count":[[2,119]],"inputs":[["(/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","(sqrt.f64 (exp.f64 (log1p.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1/2) (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 0) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 0 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2)) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2))) (cbrt.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) -1) (*.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) -1) (*.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) 1) (*.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) 1) (*.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2))) (*.f64 -1 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (sqrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (sqrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) -1) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) -1) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) 1) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2)) -1) (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2)))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2))) (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (cbrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) 1) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 -3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1/2) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 1/2 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 0 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (fabs.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log1p.f64 x) 1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (*.f64 (log1p.f64 x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 x) 1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 -1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 -1 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (neg.f64 (sqrt.f64 x)))))))"]],"rules":[["egg-rr",57],["egg-rr",62]],"time":28.720947265625,"type":"rewrite"},{"count":[[132,141]],"inputs":[["1","1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))","(sqrt.f64 x)","(+.f64 (sqrt.f64 x) (*.f64 1/2 (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 x 3)))) (+.f64 (sqrt.f64 x) (*.f64 1/2 (sqrt.f64 (/.f64 1 x)))))","(+.f64 (*.f64 1/16 (sqrt.f64 (/.f64 1 (pow.f64 x 5)))) (+.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 x 3)))) (+.f64 (sqrt.f64 x) (*.f64 1/2 (sqrt.f64 (/.f64 1 x))))))","(sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 x))) (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 x))) (+.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (*.f64 -1/8 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 (pow.f64 x 2))))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 x))) (+.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 (pow.f64 x 3)))) (*.f64 -1/8 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 (pow.f64 x 2)))))))"]],"method":["egg-herbie"],"outputs":[["1","1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(fma.f64 (*.f64 x x) -1/8 (fma.f64 1/2 x 1))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))","(fma.f64 (*.f64 x x) -1/8 (fma.f64 x 1/2 (fma.f64 1/16 (pow.f64 x 3) 1)))","(sqrt.f64 x)","(+.f64 (sqrt.f64 x) (*.f64 1/2 (sqrt.f64 (/.f64 1 x))))","(fma.f64 1/2 (sqrt.f64 (/.f64 1 x)) (sqrt.f64 x))","(+.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 x 3)))) (+.f64 (sqrt.f64 x) (*.f64 1/2 (sqrt.f64 (/.f64 1 x)))))","(fma.f64 -1/8 (sqrt.f64 (pow.f64 x -3)) (fma.f64 1/2 (sqrt.f64 (/.f64 1 x)) (sqrt.f64 x)))","(+.f64 (*.f64 1/16 (sqrt.f64 (/.f64 1 (pow.f64 x 5)))) (+.f64 (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 x 3)))) (+.f64 (sqrt.f64 x) (*.f64 1/2 (sqrt.f64 (/.f64 1 x))))))","(fma.f64 (sqrt.f64 (pow.f64 x -5)) 1/16 (fma.f64 -1/8 (sqrt.f64 (pow.f64 x -3)) (fma.f64 1/2 (sqrt.f64 (/.f64 1 x)) (sqrt.f64 x))))","(sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(sqrt.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x))))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 x))) (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(fma.f64 1/2 (/.f64 (sqrt.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x)))))) x) (sqrt.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x)))))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 x))) (+.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (*.f64 -1/8 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 (pow.f64 x 2))))))","(fma.f64 1/2 (/.f64 (sqrt.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x)))))) x) (fma.f64 (*.f64 -1/8 (sqrt.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x))))))) (pow.f64 x -2) (sqrt.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x))))))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 x))) (+.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 (pow.f64 x 3)))) (*.f64 -1/8 (*.f64 (sqrt.f64 (exp.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (/.f64 1 (pow.f64 x 2)))))))","(+.f64 (fma.f64 1/2 (/.f64 (sqrt.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x)))))) x) (sqrt.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x))))))) (fma.f64 1/16 (*.f64 (sqrt.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x)))))) (pow.f64 x -3)) (*.f64 (*.f64 -1/8 (sqrt.f64 (exp.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 x))))))) (pow.f64 x -2))))"]],"time":51.6728515625,"type":"simplify"},{"compiler":[[4614,2162]],"time":49.10107421875,"type":"eval"},{"alts":[["(/.f64 1 (+.f64 (sqrt.f64 (pow.f64 (exp.f64 -1) (neg.f64 (log1p.f64 x)))) (sqrt.f64 x)))","fresh",1.9876674120028877],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","done",29.550838072395354],["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x)))","next",0.19140625],["(/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))","fresh",1.8514397163103284],["(/.f64 1 (+.f64 (sqrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (log1p.f64 x) 2)))) (sqrt.f64 x)))","fresh",2.229500918417067],["(/.f64 1 (+.f64 (sqrt.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) 1)) (sqrt.f64 x)))","fresh",13.798440592344145],["(/.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2) 2))","fresh",2.0795952084157787],["(pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -3)","fresh",1.8807580589027155]],"compiler":[[13,11],[8,6],[12,10],[19,10],[17,13],[15,11],[37,19],[11,9],[13,11],[12,10],[19,10],[17,13],[15,11],[37,19],[11,9]],"count":[[298,8]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[295,7],"picked":[1,0]}],"min-error":[0.125],"time":103.658935546875,"type":"prune"},{"compiler":[[40,29]],"locations":[["(+.f64 1/2 (+.f64 1/2 x))",0.00390625,true],["(sqrt.f64 (+.f64 1/2 (+.f64 1/2 x)))",0.0078125,true],["(+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x))",0.01171875,true],["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x)))",0.19921875,true]],"time":9.988037109375,"type":"localize"},{"count":[[4,18]],"series":[["(+.f64 1/2 (+.f64 1/2 x))","x","-inf",0.14501953125],["(+.f64 1/2 (+.f64 1/2 x))","x","inf",0.153076171875],["(+.f64 1/2 (+.f64 1/2 x))","x","0",0.15478515625],["(sqrt.f64 (+.f64 1/2 (+.f64 1/2 x)))","x","-inf",0.197021484375],["(sqrt.f64 (+.f64 1/2 (+.f64 1/2 x)))","x","inf",0.212890625],["(sqrt.f64 (+.f64 1/2 (+.f64 1/2 x)))","x","0",0.153076171875],["(+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x))","x","-inf",0.405029296875],["(+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x))","x","inf",0.365966796875],["(+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x))","x","0",0.179931640625],["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x)))","x","-inf",2.697998046875],["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x)))","x","inf",1.1279296875],["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x)))","x","0",0.31396484375]],"time":6.257080078125,"type":"series"},{"count":[[4,303]],"inputs":[["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x)))","(+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x))","(sqrt.f64 (+.f64 1/2 (+.f64 1/2 x)))","(+.f64 1/2 (+.f64 1/2 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1/2) (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 0) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (*.f64 1/2 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 0 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1/2 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (/.f64 1/2 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2)) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (sqrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (sqrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (*.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) -1) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) -1) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1/4) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2)) 1) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2)) -1) (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (cbrt.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) 1) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) 1) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/2 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 4 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/4 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 0 (log.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (*.f64 1/2 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (*.f64 0 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (sqrt.f64 x)) -1) (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1) (*.f64 (neg.f64 (sqrt.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -1) (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/4) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (pow.f64 (cbrt.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (/.f64 1 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))) (+.f64 (cbrt.f64 (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (-.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))) (+.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2)) (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/4) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (cbrt.f64 1/2)) (*.f64 2 (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (cbrt.f64 1/4)) (*.f64 2 (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (sqrt.f64 1/2)) (*.f64 2 (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) 1) (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2)) (cbrt.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x))))) (pow.f64 (cbrt.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) (neg.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 -1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2))) (neg.f64 (-.f64 (+.f64 (exp.f64 (log1p.f64 x)) x) (sqrt.f64 (*.f64 (exp.f64 (log1p.f64 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x)))) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (cbrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 x) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1/2) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (*.f64 1/2 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (*.f64 0 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) (fabs.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (exp.f64 (log1p.f64 x)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1/4) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (+.f64 1/8 (pow.f64 (+.f64 1/2 x) 3)))) (cbrt.f64 (+.f64 1/4 (*.f64 (+.f64 1/2 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 0) (pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 (log1p.f64 x) 1/2) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (+.f64 1/2 x)) (sqrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 1/2) (sqrt.f64 (+.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 -1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 1/2) (neg.f64 (sqrt.f64 (+.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 1/2)) (sqrt.f64 (+.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 1/2)) (neg.f64 (sqrt.f64 (+.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 -1 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (+.f64 1/2 x)) (neg.f64 (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 x))) (sqrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (sqrt.f64 (+.f64 1/2 x))) (neg.f64 (sqrt.f64 1/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1/2 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 x)) 1/2) (*.f64 (exp.f64 (log1p.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (log1p.f64 x)) 0) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (*.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (exp.f64 (log1p.f64 x))) (*.f64 1/2 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (log1p.f64 x))) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (log1p.f64 x)) (*.f64 0 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)) (cbrt.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (pow.f64 (exp.f64 (log1p.f64 x)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/8 (pow.f64 (+.f64 1/2 x) 3)) (/.f64 1 (+.f64 1/4 (*.f64 (+.f64 1/2 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))) (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (sqrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 1 (+.f64 1 (*.f64 x (-.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) (*.f64 2 (+.f64 1/8 (pow.f64 x 3)))) (/.f64 1 (*.f64 2 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 1/8 (pow.f64 (+.f64 1/2 x) 3))) (/.f64 1 (neg.f64 (+.f64 1/4 (*.f64 (+.f64 1/2 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (+.f64 1/8 (pow.f64 x 3)) 2) (+.f64 1/4 (*.f64 x (+.f64 x -1/2)))) (/.f64 1 (*.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 1/4) (-.f64 (cbrt.f64 (pow.f64 (+.f64 1/2 x) 2)) (cbrt.f64 (*.f64 1/2 (+.f64 1/2 x))))) (+.f64 (cbrt.f64 1/2) (cbrt.f64 (+.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 1 (cbrt.f64 x))) (+.f64 (cbrt.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x))) (+.f64 1 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 1/2 x) 2)) (-.f64 (cbrt.f64 1/4) (cbrt.f64 (*.f64 1/2 (+.f64 1/2 x))))) (+.f64 (cbrt.f64 (+.f64 1/2 x)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 0) (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (log1p.f64 x)) (pow.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 x 3)) (+.f64 1 (*.f64 x (-.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 1/8 (pow.f64 x 3)) 2) (+.f64 1/4 (*.f64 x (+.f64 x -1/2)))) (*.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) (*.f64 2 (+.f64 1/8 (pow.f64 x 3)))) (*.f64 2 (+.f64 1/4 (*.f64 x (+.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1/8 (pow.f64 (+.f64 1/2 x) 3))) (neg.f64 (+.f64 1/4 (*.f64 (+.f64 1/2 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 (log1p.f64 x)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 (log1p.f64 x)) 1/4) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 (log1p.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2)) (cbrt.f64 (+.f64 1/8 (pow.f64 (+.f64 1/2 x) 3)))) (cbrt.f64 (+.f64 1/4 (*.f64 (+.f64 1/2 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 (+.f64 1/8 (pow.f64 x 3)) 2) (+.f64 1/4 (*.f64 x (+.f64 x -1/2)))) (+.f64 1/4 (*.f64 x (+.f64 x -1/2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) (*.f64 2 (+.f64 1/8 (pow.f64 x 3)))) 2) (+.f64 1/4 (*.f64 x (+.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 x 3)) (+.f64 (*.f64 x x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4)) (*.f64 2 (neg.f64 (+.f64 1/8 (pow.f64 x 3))))) (*.f64 2 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sqrt.f64 1/2) (+.f64 1/4 (*.f64 x (+.f64 x -1/2)))) (*.f64 (sqrt.f64 2) (+.f64 1/8 (pow.f64 x 3)))) (*.f64 (sqrt.f64 2) (+.f64 1/4 (*.f64 x (+.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4))) (*.f64 (sqrt.f64 2) (neg.f64 (+.f64 1/8 (pow.f64 x 3))))) (*.f64 (sqrt.f64 2) (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (+.f64 1/4 (*.f64 x (+.f64 x -1/2)))) (*.f64 (cbrt.f64 4) (+.f64 1/8 (pow.f64 x 3)))) (*.f64 (cbrt.f64 4) (+.f64 1/4 (*.f64 x (+.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4))) (*.f64 (cbrt.f64 4) (neg.f64 (+.f64 1/8 (pow.f64 x 3))))) (*.f64 (cbrt.f64 4) (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4)) (*.f64 -2 (+.f64 1/8 (pow.f64 x 3)))) (*.f64 -2 (+.f64 1/4 (*.f64 x (+.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4))) (*.f64 -2 (neg.f64 (+.f64 1/8 (pow.f64 x 3))))) (*.f64 -2 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 1/8 (pow.f64 x 3)) (cbrt.f64 4)) (*.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) (cbrt.f64 1/2))) (*.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 1/8 (pow.f64 x 3)) (sqrt.f64 2)) (*.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) (sqrt.f64 1/2))) (*.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 1/8 (pow.f64 x 3)) -2) (*.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) -1)) (*.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (+.f64 1/8 (pow.f64 x 3))) (cbrt.f64 4)) (*.f64 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4)) (cbrt.f64 1/2))) (*.f64 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4)) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (+.f64 1/8 (pow.f64 x 3))) (sqrt.f64 2)) (*.f64 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4)) (sqrt.f64 1/2))) (*.f64 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (+.f64 1/8 (pow.f64 x 3))) 2) (*.f64 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4)) 1)) (*.f64 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (+.f64 1/8 (pow.f64 x 3))) -2) (*.f64 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4)) -1)) (*.f64 (+.f64 (*.f64 x (-.f64 1/2 x)) (neg.f64 1/4)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 x 3))) (neg.f64 (+.f64 1 (*.f64 x (-.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) (*.f64 2 (+.f64 1/8 (pow.f64 x 3))))) (neg.f64 (*.f64 2 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (+.f64 1/8 (pow.f64 x 3)) 2) (+.f64 1/4 (*.f64 x (+.f64 x -1/2))))) (neg.f64 (*.f64 (+.f64 1/4 (*.f64 x (+.f64 x -1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (exp.f64 (log1p.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (log1p.f64 x)) (pow.f64 (exp.f64 (log1p.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 0) (pow.f64 (exp.f64 (log1p.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/8 (pow.f64 (+.f64 1/2 x) 3)) (+.f64 1/4 (*.f64 (+.f64 1/2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1/8 (pow.f64 (+.f64 1/2 x) 3)) 1) (+.f64 1/4 (*.f64 (+.f64 1/2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1/8 (pow.f64 (+.f64 1/2 x) 3)) 1) (+.f64 1/4 (*.f64 (+.f64 1/2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/4 (*.f64 (+.f64 1/2 x) x)) (/.f64 (+.f64 1/4 (*.f64 (+.f64 1/2 x) x)) (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1/8 (pow.f64 (+.f64 1/2 x) 3)) (cbrt.f64 (+.f64 1/4 (*.f64 (+.f64 1/2 x) x)))) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 (+.f64 1/2 x) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (log1p.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (exp.f64 (log1p.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (exp.f64 (log1p.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 1/8 (pow.f64 (+.f64 1/2 x) 3)) (neg.f64 (+.f64 1/4 (*.f64 (+.f64 1/2 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (log1p.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 (*.f64 (log1p.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (exp.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 x) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 x) 1/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (+.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (+.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 1/2 x)) (sqrt.f64 (+.f64 1/2 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1/2 x)) (cbrt.f64 (pow.f64 (+.f64 1/2 x) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1/2 (+.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 1/2 x) 1/2)))))"]],"rules":[["egg-rr",105],["egg-rr",59],["egg-rr",72],["egg-rr",67]],"time":49.657958984375,"type":"rewrite"},{"count":[[321,311]],"inputs":[["1","1","1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))","1","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","x","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","x","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)"]],"method":["egg-herbie"],"outputs":[["1","1","1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(+.f64 (*.f64 x (+.f64 (*.f64 x -1/8) 1/2)) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))","(+.f64 (*.f64 x (+.f64 (*.f64 x -1/8) 1/2)) (fma.f64 (pow.f64 x 3) 1/16 1))","1","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","x","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)","x","(+.f64 1 x)","(+.f64 1 x)","(+.f64 1 x)"]],"time":79.49609375,"type":"simplify"},{"compiler":[[5154,2648]],"time":53.663818359375,"type":"eval"},{"alts":[["(/.f64 1 (+.f64 (sqrt.f64 (pow.f64 (exp.f64 -1) (neg.f64 (log1p.f64 x)))) (sqrt.f64 x)))","fresh",1.9876674120028877],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","done",29.550838072395354],["(/.f64 1 (/.f64 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (cbrt.f64 1/4)) (*.f64 2 (cbrt.f64 1/2))))","fresh",2.3170628954511474],["(/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))","fresh",1.8514397163103284],["(/.f64 1 (+.f64 (sqrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (log1p.f64 x) 2)))) (sqrt.f64 x)))","fresh",2.229500918417067],["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x)))","done",0.19140625],["(/.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2) 2))","fresh",2.0795952084157787],["(pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -3)","fresh",1.8807580589027155]],"compiler":[[13,11],[8,6],[18,16],[19,10],[17,13],[12,10],[37,19],[11,9]],"count":[[319,8]],"kept":[{"done":[1,1],"fresh":[6,3],"new":[311,3],"picked":[1,1]}],"min-error":[0.12109375],"time":126.468994140625,"type":"prune"},{"accuracy":[0.19140625],"baseline":[0.19140625],"branch":[["x",0.19140625,1],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",0.19140625,1],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",0.19140625,1]],"compiler":[[2,1],[8,6],[8,6],[340,134]],"count":[[18,1]],"inputs":[["(/.f64 1 (/.f64 (/.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (cbrt.f64 1/4)) (*.f64 2 (cbrt.f64 1/2))))","(/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))","(/.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2) 2))","(/.f64 1 (+.f64 (sqrt.f64 (pow.f64 (exp.f64 -1) (neg.f64 (log1p.f64 x)))) (sqrt.f64 x)))","(/.f64 1 (+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x)))","(/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) -1/2) (sqrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))))","(/.f64 1 (+.f64 (sqrt.f64 (pow.f64 (exp.f64 (cbrt.f64 (log1p.f64 x))) (cbrt.f64 (pow.f64 (log1p.f64 x) 2)))) (sqrt.f64 x)))","(/.f64 1 (+.f64 (sqrt.f64 (fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) 1)) (sqrt.f64 x)))","(/.f64 (/.f64 (pow.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) (neg.f64 1/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))) 2) 2))","(pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))) -3)","(/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","(/.f64 (-.f64 (exp.f64 (log1p.f64 x)) x) (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))","1","(/.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))) (*.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))) (pow.f64 x 3/2))) (*.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x)))) (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))","(-.f64 (/.f64 (*.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (log1p.f64 x)))) (cbrt.f64 (+.f64 (pow.f64 x 3) 1))) (cbrt.f64 (fma.f64 x x (-.f64 1 x)))) (sqrt.f64 x))","(/.f64 (*.f64 (cbrt.f64 (-.f64 (exp.f64 (*.f64 (log1p.f64 x) 3/2)) (pow.f64 x 3/2))) (cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)) 2))) (cbrt.f64 (+.f64 (exp.f64 (log1p.f64 x)) (+.f64 x (sqrt.f64 (fma.f64 x x x))))))","(-.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x))","(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))"]],"link":["."],"name":["Main:bigenough3 from C"],"oracle":[33.0116472397847],"outputs":[["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x)))"]],"time":15.385009765625,"times":[["x",5.737060546875],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",2.5859375],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",2.386962890625]],"type":"regimes"},{"compiler":[[12,10]],"inputs":[["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 1/2 (+.f64 1/2 x))) (sqrt.f64 x)))","(/.f64 1 (+.f64 (sqrt.f64 (exp.f64 (log1p.f64 x))) (sqrt.f64 x)))"]],"stop":[["fuel",1]],"time":23.28515625,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[12,10]],"remove-preprocessing":[[]],"time":9.26806640625,"type":"end"}]
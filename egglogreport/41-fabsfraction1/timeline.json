[{"compiler":[[16,11]],"method":["search"],"sampling":[[12,0.4797652819565883,0.4719642204613592,0.048270497582052485],[11,0.4212573207423702,0.5548504988481682,0.023892180409461616],[10,0.3588488287805376,0.622134654244519,0.019016516974943443],[9,0.2496339678473305,0.7411008420467624,0.009265190105907095],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":99.703857421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",78.0107421875,1652],["body",256,"valid",388.83740234375,8256]],"time":476.037109375,"type":"sample"},{"compiler":[[15,10]],"inputs":[["0","1","2"],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))","(fabs.f64 (-.f64 (/.f64 (+.f64 y 4) x) (*.f64 (/.f64 y x) z)))","(fabs.f64 (-.f64 (/.f64 (+.f64 z 4) y) (*.f64 (/.f64 z y) x)))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) z) (*.f64 (/.f64 x z) y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))","(fabs.f64 (/.f64 (+.f64 (*.f64 z x) (-.f64 -4 x)) y))","(fabs.f64 (-.f64 (/.f64 (+.f64 y 4) x) (*.f64 (/.f64 y x) z)))","(fabs.f64 (/.f64 (+.f64 (*.f64 y z) (-.f64 -4 y)) x))","(fabs.f64 (-.f64 (/.f64 (+.f64 z 4) y) (*.f64 (/.f64 z y) x)))","(fabs.f64 (/.f64 (+.f64 (*.f64 z x) (-.f64 -4 z)) y))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) z) (*.f64 (/.f64 x z) y)))","(fabs.f64 (/.f64 (+.f64 (*.f64 x y) (-.f64 -4 x)) z))"]],"symmetry":[[]],"time":80.385009765625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))"]],"method":["egg-herbie"],"outputs":[["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))","(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))"]],"time":21.658935546875,"type":"simplify"},{"compiler":[[24,15]],"time":0.39794921875,"type":"eval"},{"alts":[["(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))","fresh",2.84375],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))","next",1.2552797300709377]],"compiler":[[12,8],[15,10],[12,8],[15,10]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0703125],"time":1.360107421875,"type":"prune"},{"compiler":[[46,20]],"locations":[["(/.f64 (+.f64 x 4) y)",0.01953125,true],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))",0.0234375,true],["(*.f64 (/.f64 x y) z)",3.027047889472936,true]],"time":9.239990234375,"type":"localize"},{"count":[[3,96]],"series":[["(/.f64 (+.f64 x 4) y)","y","-inf",0.14599609375],["(/.f64 (+.f64 x 4) y)","y","inf",0.140869140625],["(/.f64 (+.f64 x 4) y)","y","0",0.333984375],["(/.f64 (+.f64 x 4) y)","x","-inf",0.2939453125],["(/.f64 (+.f64 x 4) y)","x","inf",0.2841796875],["(/.f64 (+.f64 x 4) y)","x","0",0.26318359375],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","z","-inf",0.195068359375],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","z","inf",0.2119140625],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","z","0",0.36083984375],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","y","-inf",0.341064453125],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","y","inf",0.368896484375],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","y","0",0.60302734375],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","x","-inf",0.220947265625],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","x","inf",0.27099609375],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","x","0",0.77197265625],["(*.f64 (/.f64 x y) z)","z","-inf",0.30810546875],["(*.f64 (/.f64 x y) z)","z","inf",0.338134765625],["(*.f64 (/.f64 x y) z)","z","0",0.430908203125],["(*.f64 (/.f64 x y) z)","y","-inf",0.31005859375],["(*.f64 (/.f64 x y) z)","y","inf",0.507080078125],["(*.f64 (/.f64 x y) z)","y","0",0.44091796875],["(*.f64 (/.f64 x y) z)","x","-inf",0.384033203125],["(*.f64 (/.f64 x y) z)","x","inf",0.371826171875],["(*.f64 (/.f64 x y) z)","x","0",0.56982421875]],"time":8.77490234375,"type":"series"},{"count":[[3,226]],"inputs":[["(*.f64 (/.f64 x y) z)","(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))","(/.f64 (+.f64 x 4) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x z) y) 0) (/.f64 (*.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x z) y) (*.f64 (/.f64 (*.f64 x z) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x z) y)) (/.f64 (*.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x z) y) (*.f64 0 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x z) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x z) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (/.f64 z (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x z) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (*.f64 z (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 (*.f64 y y))) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x z) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (/.f64 x y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) z) (cbrt.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x z)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x z) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x z) y) 2)) (cbrt.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) z) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x z) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x z) y) 2)) (cbrt.f64 (*.f64 x z))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (*.f64 x z))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (/.f64 x (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) z)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x z)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x z) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x z) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 z (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x z) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x z) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x z) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x z) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x z) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x z)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x z)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x z) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x z) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x z) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x z) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 0) (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) (*.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) (*.f64 0 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 4) y) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 (*.f64 x z) y)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 (*.f64 x z) y)) (/.f64 (-.f64 -4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (-.f64 -4 x) y) (neg.f64 (*.f64 y y))) (/.f64 (neg.f64 (*.f64 y (*.f64 x z))) (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 x 4) y) (*.f64 y y)) (/.f64 (*.f64 y (*.f64 x z)) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x 4) y) (/.f64 (*.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (+.f64 x 4) y) 0) (/.f64 (*.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 (-.f64 -4 x) y) (neg.f64 (/.f64 (*.f64 x z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))) (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (-.f64 -4 x) y) (*.f64 y (*.f64 x z))) (/.f64 1 (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2)) (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x z) y) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x 4) (*.f64 x z)) (*.f64 y y))))) (-.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (cbrt.f64 (/.f64 (*.f64 x z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) 2) (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (-.f64 (+.f64 x 4) (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 x 4) y (neg.f64 (*.f64 y (*.f64 x z)))) (/.f64 1 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 x z)) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y)) (*.f64 y (+.f64 (pow.f64 x 3) 64))) (*.f64 y (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 x z)) (cbrt.f64 (*.f64 y y))) (*.f64 y (/.f64 (+.f64 x 4) (cbrt.f64 y)))) (*.f64 y (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 x z)) (+.f64 16 (*.f64 x (+.f64 x -4)))) (*.f64 y (/.f64 (+.f64 (pow.f64 x 3) 64) y))) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y) y) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) (neg.f64 (*.f64 x z)))) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (pow.f64 x 3) 64) y) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) (neg.f64 (*.f64 x z)))) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 x z)))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -4 x) (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (/.f64 (*.f64 x z) (cbrt.f64 y)))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y) y) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) (*.f64 x z))) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y) (neg.f64 y)) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) (neg.f64 (*.f64 x z)))) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y) (cbrt.f64 (*.f64 y y))) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) (/.f64 (*.f64 x z) (cbrt.f64 y)))) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x 3) 64) y) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) (*.f64 x z))) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x 3) 64) (neg.f64 y)) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) (neg.f64 (*.f64 x z)))) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (pow.f64 x 3) 64) (cbrt.f64 (*.f64 y y))) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) (/.f64 (*.f64 x z) (cbrt.f64 y)))) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x 4) (cbrt.f64 (*.f64 y y))) (*.f64 y (/.f64 (*.f64 x z) (cbrt.f64 y)))) (*.f64 y (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 x z))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 x z)))) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 -4 x) y) (*.f64 y (*.f64 x z))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 x 4) y (neg.f64 (*.f64 y (*.f64 x z)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (fma.f64 (*.f64 x z) y (*.f64 (-.f64 -4 x) y))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (fma.f64 (*.f64 x z) (neg.f64 y) (neg.f64 (*.f64 (-.f64 -4 x) y)))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (fma.f64 x z (-.f64 -4 x))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (+.f64 x 4) y (neg.f64 (*.f64 y (*.f64 x z)))) 1) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 (-.f64 -4 x) y) (*.f64 y (*.f64 x z))) 1) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 (-.f64 -4 x) y) (*.f64 y (*.f64 x z))) (neg.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 x 4) y (neg.f64 (*.f64 y (*.f64 x z)))) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 -4 x) (neg.f64 (*.f64 x z))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) (/.f64 (*.f64 x z) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (*.f64 x z)) (+.f64 x 4)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 x z)) (neg.f64 y)) (*.f64 (-.f64 -4 x) y)) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 x z)) y) (*.f64 (+.f64 x 4) y)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 x 4) y) (*.f64 y (neg.f64 (*.f64 x z)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 -4 x) y) (*.f64 (neg.f64 y) (neg.f64 (*.f64 x z)))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x 4) (neg.f64 y)) (*.f64 y (neg.f64 (*.f64 x z)))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 -4 x) (neg.f64 y)) (*.f64 (neg.f64 y) (neg.f64 (*.f64 x z)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (*.f64 x z) (cbrt.f64 y)))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x z (-.f64 -4 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x z) (neg.f64 y) (neg.f64 (*.f64 (-.f64 -4 x) y))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x z) y (*.f64 (-.f64 -4 x) y)) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2)) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x z) y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x z) y) 2)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) (neg.f64 z) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 (/.f64 x y)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 x z) y)) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x z) y) 2))) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (/.f64 x y)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 x y)) z (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (-.f64 -4 x) y) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 -4 x) (/.f64 -1 y) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 4)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) y) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (+.f64 x 4) (cbrt.f64 (*.f64 y y))) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 x z) y) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 (*.f64 x z) y)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x 4) y) 1 (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) 4) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 x 4) y) 0) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 (+.f64 x 4) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 x 4) y)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 4) y) (*.f64 0 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 -4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (-.f64 -4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 4)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -4 x) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 4) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (+.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (+.f64 x 4) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x 4) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 -4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 -4 x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (-.f64 -4 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) y) (cbrt.f64 (+.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x 4) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) 64) (/.f64 1 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y) (/.f64 1 (+.f64 16 (*.f64 x (+.f64 x -4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x 4) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -4 x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y) (+.f64 16 (*.f64 x (+.f64 x -4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) 64) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (neg.f64 (+.f64 (pow.f64 x 3) 64))) (neg.f64 (+.f64 16 (*.f64 x (+.f64 x -4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (cbrt.f64 (pow.f64 (+.f64 x 4) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x 4) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 x 4)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (+.f64 (pow.f64 x 3) 64) y)) (+.f64 16 (*.f64 x (+.f64 x -4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2)) (cbrt.f64 (-.f64 -4 x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2)) (cbrt.f64 (+.f64 x 4))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x 3) 64)) (/.f64 1 y)) (neg.f64 (+.f64 16 (*.f64 x (+.f64 x -4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x 4) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 x 3) 64)) (/.f64 -1 y)) (+.f64 16 (*.f64 x (+.f64 x -4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) 64)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) y)) (cbrt.f64 (+.f64 16 (*.f64 x (+.f64 x -4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y) 1) (+.f64 16 (*.f64 x (+.f64 x -4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 -4 x)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x 4)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x 4) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y) (cbrt.f64 (+.f64 16 (*.f64 x (+.f64 x -4))))) (pow.f64 (cbrt.f64 (+.f64 16 (*.f64 x (+.f64 x -4)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y) 1) (+.f64 16 (*.f64 x (+.f64 x -4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 -4 x) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) 64) (/.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) 64)) (neg.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y)) (neg.f64 (+.f64 16 (*.f64 x (+.f64 x -4)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x 4) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 -4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 3))))))"]],"rules":[["egg-rr",64],["egg-rr",104],["egg-rr",58]],"time":39.697021484375,"type":"rewrite"},{"count":[[322,241]],"inputs":[["(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x)","(/.f64 (*.f64 x (-.f64 1 z)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (-.f64 (/.f64 1 y) (/.f64 z y)) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(/.f64 (*.f64 x (-.f64 1 z)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (-.f64 (+.f64 4 x) (*.f64 z x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (+.f64 4 x)) (*.f64 -1 (*.f64 z x))) y))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)"]],"time":320.3291015625,"type":"simplify"},{"compiler":[[4359,2185]],"time":42.39892578125,"type":"eval"},{"alts":[["(fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y)))","next",1.2435609800709377],["(fabs.f64 (/.f64 (/.f64 (+.f64 (*.f64 (-.f64 -4 x) y) (*.f64 y (*.f64 x z))) (neg.f64 y)) y))","fresh",12.342128759768443],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 x (/.f64 z y))))","fresh",3.849941259768442],["(fabs.f64 (-.f64 (+.f64 (*.f64 (/.f64 1 y) 4) (/.f64 x y)) (*.f64 (/.f64 x y) z)))","fresh",1.2552797300709377],["(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))","fresh",2.84375],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (*.f64 z (cbrt.f64 (/.f64 x y))))))","fresh",14.260984558009289],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (*.f64 x z) (/.f64 1 y))))","fresh",2.8671875],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x y)))))","fresh",11.125753852543664]],"compiler":[[15,10],[20,13],[15,10],[19,12],[12,8],[23,15],[17,12],[21,14],[15,10],[20,13],[15,10],[19,12],[12,8],[23,15],[17,12],[21,14]],"count":[[243,8]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[241,7],"picked":[1,0]}],"min-error":[0],"time":89.95703125,"type":"prune"},{"compiler":[[43,20]],"locations":[["(/.f64 (+.f64 x 4) y)",0.01953125,false],["(fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))",1.2357484800709377,true]],"time":9.6240234375,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))","y","-inf",0.452880859375],["(fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))","y","inf",0.39013671875],["(fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))","y","0",0.31787109375],["(fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))","x","-inf",1.10302734375],["(fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))","x","inf",0.245849609375],["(fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))","x","0",0.256103515625],["(fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))","z","-inf",0.263916015625],["(fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))","z","inf",0.319091796875],["(fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))","z","0",0.458984375]],"time":3.95703125,"type":"series"},{"count":[[1,71]],"inputs":[["(fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y) (*.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y) 0) (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y) (*.f64 0 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y)) (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 (*.f64 z x) y)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x 4) y) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 (*.f64 z x) y)) (/.f64 (-.f64 -4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x 4) y) (/.f64 (*.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y) 2)) (cbrt.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 (*.f64 z x) y) (/.f64 (-.f64 -4 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 (-.f64 -4 x) y) (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (+.f64 (+.f64 x 4) (neg.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (pow.f64 x 3) 64) (neg.f64 y)) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) (neg.f64 (neg.f64 (*.f64 z x))))) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (pow.f64 x 3) 64) y) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) (neg.f64 (*.f64 z x)))) (*.f64 (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y) (neg.f64 y)) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) (neg.f64 (neg.f64 (*.f64 z x))))) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (+.f64 (pow.f64 x 3) 64) y) y) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) (neg.f64 (*.f64 z x)))) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 -4 x) (neg.f64 y)) (*.f64 (neg.f64 y) (neg.f64 (neg.f64 (*.f64 z x))))) (*.f64 (neg.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 -4 x) y) (*.f64 (neg.f64 y) (neg.f64 (*.f64 z x)))) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 x 4) (neg.f64 y)) (*.f64 y (neg.f64 (neg.f64 (*.f64 z x))))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 (neg.f64 (*.f64 z x))))) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (+.f64 x 4) (cbrt.f64 y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 z x)))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z x)) (neg.f64 y)) (*.f64 y (-.f64 -4 x))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z x)) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y)) (*.f64 y (+.f64 (pow.f64 x 3) 64))) (*.f64 y (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))) (*.f64 y (/.f64 (+.f64 x 4) (cbrt.f64 y)))) (*.f64 y (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z x)) (+.f64 16 (*.f64 x (+.f64 x -4)))) (*.f64 y (/.f64 (+.f64 (pow.f64 x 3) 64) y))) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (neg.f64 (*.f64 z x))) (neg.f64 y)) (*.f64 (neg.f64 y) (-.f64 -4 x))) (*.f64 (neg.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (neg.f64 (*.f64 z x))) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y)) (*.f64 (neg.f64 y) (+.f64 (pow.f64 x 3) 64))) (*.f64 (neg.f64 y) (*.f64 (+.f64 16 (*.f64 x (+.f64 x -4))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (neg.f64 (*.f64 z x))) y) (*.f64 (neg.f64 y) (+.f64 x 4))) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (neg.f64 (*.f64 z x))) (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (/.f64 (+.f64 x 4) (cbrt.f64 y)))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (neg.f64 (*.f64 z x))) (+.f64 16 (*.f64 x (+.f64 x -4)))) (*.f64 (neg.f64 y) (/.f64 (+.f64 (pow.f64 x 3) 64) y))) (*.f64 (neg.f64 y) (+.f64 16 (*.f64 x (+.f64 x -4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (neg.f64 (*.f64 z x))) (-.f64 -4 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 -4 x) (neg.f64 (neg.f64 (*.f64 z x)))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 x 4) (neg.f64 (*.f64 z x))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 x 4) y) (*.f64 y (neg.f64 (*.f64 z x)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z x)) y) (*.f64 y (+.f64 x 4))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 (*.f64 z x) y) (/.f64 (-.f64 -4 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 (-.f64 -4 x) y) (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 x 4)) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 -4 x) (/.f64 -1 y) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2)) (cbrt.f64 (/.f64 (+.f64 x 4) y)) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 4) (/.f64 1 y) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (+.f64 x 4) (cbrt.f64 (*.f64 y y))) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 x 4) y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x 4) y) 2)) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (-.f64 -4 x) y) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (+.f64 x 4) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 4)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x 4) 2)) y) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (cbrt.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x y)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 z x) y))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 z x) y))) 2) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 z x) y) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) (neg.f64 z) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x 4) y) 1 (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (+.f64 x 4) y) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 (*.f64 z x) y)) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 (*.f64 z x) y)) 1 (/.f64 (+.f64 x 4) y))))))"]],"rules":[["egg-rr",71]],"time":24.56005859375,"type":"rewrite"},{"count":[[107,86]],"inputs":[["(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 4 y)","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 4 y)","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(/.f64 (*.f64 x (-.f64 1 z)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x))","(/.f64 (*.f64 x (-.f64 1 z)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 z x) (*.f64 -1 (+.f64 4 x))) y))","(/.f64 (fma.f64 z x (-.f64 -4 x)) (neg.f64 y))"]],"time":142.60888671875,"type":"simplify"},{"compiler":[[2774,1444]],"time":27.633056640625,"type":"eval"},{"alts":[["(fabs.f64 (fma.f64 (*.f64 (neg.f64 z) (cbrt.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (/.f64 (+.f64 x 4) y)))","fresh",14.260984558009289],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 x (/.f64 z y))))","fresh",3.849941259768442],["(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))","fresh",2.84375],["(fabs.f64 (/.f64 (/.f64 (+.f64 (*.f64 (-.f64 -4 x) y) (*.f64 y (*.f64 x z))) (neg.f64 y)) y))","fresh",12.342128759768443],["(fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))))","next",1.2435609800709377],["(fabs.f64 (fma.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y) (/.f64 (+.f64 x 4) y)))","fresh",2.859375],["(fabs.f64 (fma.f64 (cbrt.f64 (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x y)) (/.f64 (+.f64 x 4) y)))","fresh",11.121847602543664]],"compiler":[[23,15],[15,10],[12,8],[20,13],[19,12],[17,12],[21,14],[23,15],[15,10],[12,8],[20,13],[19,12],[17,12],[21,14]],"count":[[158,7]],"kept":[{"done":[0,0],"fresh":[7,3],"new":[150,4],"picked":[1,0]}],"min-error":[0],"time":46.261962890625,"type":"prune"},{"compiler":[[61,31]],"locations":[["(+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))",0.01953125,true],["(fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))",1.2357484800709377,true]],"time":12.199951171875,"type":"localize"},{"count":[[2,60]],"series":[["(+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))","y","-inf",0.162109375],["(+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))","y","inf",0.156982421875],["(+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))","y","0",0.14013671875],["(+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))","x","-inf",0.156005859375],["(+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))","x","inf",0.1650390625],["(+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))","x","0",0.15087890625],["(fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))","y","-inf",0.33984375],["(fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))","y","inf",0.3271484375],["(fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))","y","0",0.170166015625],["(fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))","x","-inf",0.223876953125],["(fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))","x","inf",0.194091796875],["(fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))","x","0",0.176025390625],["(fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))","z","-inf",0.205078125],["(fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))","z","inf",0.19091796875],["(fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))","z","0",0.26708984375]],"time":3.219970703125,"type":"series"},{"count":[[2,164]],"inputs":[["(fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))","(+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y) (*.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y) 0) (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y) (*.f64 0 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y)) (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 (*.f64 z x) y)) (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 4 x) y) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) 4) y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x y) (+.f64 (neg.f64 z) 1)) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 4 y) (*.f64 (/.f64 x y) (+.f64 (neg.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (/.f64 (+.f64 (neg.f64 (*.f64 z x)) 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 x y) (+.f64 (neg.f64 z) 1)) 1) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) 4) y) 1) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) 4) y) (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 4 x) y) (/.f64 (*.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 (*.f64 z x) y) (neg.f64 (/.f64 (+.f64 4 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 (/.f64 (+.f64 4 x) y)) (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y) 2)) (cbrt.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 (neg.f64 x) y (neg.f64 (*.f64 4 y))) y) (*.f64 (neg.f64 (*.f64 y y)) (neg.f64 (*.f64 z x)))) (*.f64 (neg.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 (neg.f64 x) y (neg.f64 (*.f64 4 y))) (neg.f64 y)) (*.f64 (neg.f64 (*.f64 y y)) (neg.f64 (neg.f64 (*.f64 z x))))) (*.f64 (neg.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (neg.f64 (*.f64 z x))) (neg.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (fma.f64 (neg.f64 x) y (neg.f64 (*.f64 4 y))))) (*.f64 (neg.f64 y) (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z x)) (neg.f64 (*.f64 y y))) (*.f64 y (fma.f64 (neg.f64 x) y (neg.f64 (*.f64 4 y))))) (*.f64 y (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 4 x) (neg.f64 (*.f64 z x))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 4 x) y) (*.f64 y (neg.f64 (*.f64 z x)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 4 x) (neg.f64 y)) (*.f64 y (neg.f64 (neg.f64 (*.f64 z x))))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 x y (*.f64 4 y)) y) (*.f64 (*.f64 y y) (neg.f64 (*.f64 z x)))) (pow.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 x y (*.f64 4 y)) (neg.f64 y)) (*.f64 (*.f64 y y) (neg.f64 (neg.f64 (*.f64 z x))))) (neg.f64 (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (neg.f64 (*.f64 z x))) y) (*.f64 (neg.f64 y) (+.f64 4 x))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (neg.f64 (*.f64 z x))) (*.f64 y y)) (*.f64 (neg.f64 y) (fma.f64 x y (*.f64 4 y)))) (neg.f64 (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z x)) y) (*.f64 y (+.f64 4 x))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 z x)) (*.f64 y y)) (*.f64 y (fma.f64 x y (*.f64 4 y)))) (pow.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 (neg.f64 (*.f64 z x)) (+.f64 4 x)) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (+.f64 4 x) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (+.f64 4 x) y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 4 x) y) 2)) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 (+.f64 4 x) y)) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 4 x) y) 2)) (cbrt.f64 (/.f64 (+.f64 4 x) y)) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x y)) (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) (neg.f64 z) (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y) (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (cbrt.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 z x) y))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 z x) y))) 2) (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 z x) y) (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (+.f64 4 x) y) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 4 x) y) 1 (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 (*.f64 z x) y)) (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 (*.f64 z x) y)) 1 (/.f64 (+.f64 4 x) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 4 x) y) (*.f64 (/.f64 (+.f64 4 x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 4 x) y) 0) (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 4 x) y) (*.f64 0 (/.f64 (+.f64 4 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 4 x) y)) (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 4 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 4 y) (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (+.f64 4 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (+.f64 4 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 4 x) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (+.f64 4 x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (cbrt.f64 (/.f64 64 (*.f64 y y))) (*.f64 x (cbrt.f64 (pow.f64 y -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 (*.f64 x (cbrt.f64 (pow.f64 y -2))) (cbrt.f64 (/.f64 64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 4 x) y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 4 x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (-.f64 (cbrt.f64 (/.f64 16 (*.f64 y y))) (cbrt.f64 (/.f64 (*.f64 x 4) (*.f64 y y))))) (+.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 (/.f64 4 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (/.f64 16 (*.f64 y y))) (-.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (/.f64 (*.f64 x 4) (*.f64 y y))))) (+.f64 (cbrt.f64 (/.f64 4 y)) (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 4 x) y) 2)) (cbrt.f64 (/.f64 (+.f64 4 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 4 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 4 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -2)) (+.f64 (cbrt.f64 (/.f64 64 y)) (/.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -2)) (+.f64 (/.f64 x (cbrt.f64 y)) (cbrt.f64 (/.f64 64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x y (*.f64 4 y)) (/.f64 1 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 x) y (neg.f64 (*.f64 4 y))) (/.f64 1 (neg.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (*.f64 y 1/2)) (*.f64 (neg.f64 y) 2)) (*.f64 (neg.f64 y) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (cbrt.f64 (/.f64 64 y)))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (*.f64 y 1/2)) (*.f64 (cbrt.f64 (*.f64 y y)) 2)) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) 4)) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) -4)) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 y 4)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (/.f64 y 4)) (neg.f64 y)) (*.f64 (neg.f64 y) (/.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (*.f64 y 1/2)) (*.f64 y 2)) (*.f64 y (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (cbrt.f64 (*.f64 y y))) (*.f64 y (cbrt.f64 (/.f64 64 y)))) (*.f64 y (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (/.f64 y 4)) y) (*.f64 y (/.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -4 (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (/.f64 x (cbrt.f64 y)))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 4 (cbrt.f64 (*.f64 y y))) (*.f64 y (/.f64 x (cbrt.f64 y)))) (*.f64 y (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 64 y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) x)) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 64 y)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 x))) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 2 y) (*.f64 (*.f64 y 1/2) x)) (*.f64 (*.f64 y 1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 2 (neg.f64 y)) (*.f64 (*.f64 y 1/2) (neg.f64 x))) (*.f64 (*.f64 y 1/2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 2 (cbrt.f64 (*.f64 y y))) (*.f64 (*.f64 y 1/2) (/.f64 x (cbrt.f64 y)))) (*.f64 (*.f64 y 1/2) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 y (*.f64 (/.f64 y 4) x)) (*.f64 (/.f64 y 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 y) (*.f64 (/.f64 y 4) (neg.f64 x))) (*.f64 (/.f64 y 4) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (/.f64 y 4) (/.f64 x (cbrt.f64 y)))) (*.f64 (/.f64 y 4) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 4 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x y (*.f64 4 y)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 x) y (neg.f64 (*.f64 4 y))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 4 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 4 x) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x y (*.f64 4 y)) 1) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (neg.f64 x) y (neg.f64 (*.f64 4 y))) 1) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 4 x)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (+.f64 4 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x y (*.f64 4 y)) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 x) y (neg.f64 (*.f64 4 y))) (neg.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 4 x) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 4 x) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 4 x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 4 x) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 x) y (neg.f64 (*.f64 4 y))) y) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -4 (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (/.f64 64 y)) (/.f64 x (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 x) -4) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 x (cbrt.f64 y)) (cbrt.f64 (/.f64 64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (neg.f64 y)) (*.f64 (neg.f64 y) -4)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (/.f64 64 y)))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (neg.f64 y)) (*.f64 y -4)) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -4 y) (*.f64 (neg.f64 y) x)) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -4 (neg.f64 y)) (*.f64 (neg.f64 y) (neg.f64 x))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 64 y)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 x (cbrt.f64 y)))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 4 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x y (*.f64 4 y))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (neg.f64 x) y (neg.f64 (*.f64 4 y)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 4 x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 4 x) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 4 x) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 4 x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 4 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 y) (+.f64 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (+.f64 4 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 4 x) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 y) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 4 y)) (cbrt.f64 (/.f64 16 (*.f64 y y))) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 4 (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) 4 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 x y)) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (/.f64 x y)) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) y) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 -1 y) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (cbrt.f64 y)) (cbrt.f64 (pow.f64 y -2)) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 x (cbrt.f64 (pow.f64 y -2))) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) x (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 4) (/.f64 (cbrt.f64 16) y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 y)) (cbrt.f64 (/.f64 64 (*.f64 y y))) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 64 y)) (cbrt.f64 (pow.f64 y -2)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (/.f64 2 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 8 y)) (cbrt.f64 (/.f64 8 (*.f64 y y))) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 2 y) 2 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 16 (*.f64 y y))) (cbrt.f64 (/.f64 4 y)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -4 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 4) y) (cbrt.f64 16) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x y) (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 4 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) 1 (/.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 4 y) 1 (/.f64 x y))))))"]],"rules":[["egg-rr",105],["egg-rr",59]],"time":32.3740234375,"type":"rewrite"},{"count":[[224,180]],"inputs":[["(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 4 y)","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(*.f64 -1 (/.f64 (-.f64 (+.f64 (*.f64 z x) (*.f64 -1 x)) 4) y))","(*.f64 -1 (/.f64 (-.f64 (+.f64 (*.f64 z x) (*.f64 -1 x)) 4) y))","(*.f64 -1 (/.f64 (-.f64 (+.f64 (*.f64 z x) (*.f64 -1 x)) 4) y))","(*.f64 -1 (/.f64 (-.f64 (+.f64 (*.f64 z x) (*.f64 -1 x)) 4) y))","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) 4) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) 4) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) 4) y))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) 4) y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) (+.f64 (/.f64 x y) (*.f64 4 (/.f64 1 y))))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(/.f64 4 y)","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x)","(/.f64 (*.f64 x (-.f64 1 z)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 (+.f64 (/.f64 1 y) (*.f64 -1 (/.f64 z y))) x))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x))","(/.f64 (*.f64 x (-.f64 1 z)) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (*.f64 -1 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x)))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(/.f64 (+.f64 4 (+.f64 (*.f64 -1 (*.f64 z x)) x)) y)","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(*.f64 -1 (/.f64 (-.f64 (+.f64 (*.f64 z x) (*.f64 -1 x)) 4) y))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(*.f64 -1 (/.f64 (-.f64 (+.f64 (*.f64 z x) (*.f64 -1 x)) 4) y))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(*.f64 -1 (/.f64 (-.f64 (+.f64 (*.f64 z x) (*.f64 -1 x)) 4) y))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(*.f64 -1 (/.f64 (-.f64 (+.f64 (*.f64 z x) (*.f64 -1 x)) 4) y))","(/.f64 (+.f64 (*.f64 x (-.f64 1 z)) 4) y)","(/.f64 4 y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 x y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 1 y)) (/.f64 x y))","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(/.f64 (+.f64 4 x) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) 4) y))","(/.f64 (+.f64 4 x) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) 4) y))","(/.f64 (+.f64 4 x) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) 4) y))","(/.f64 (+.f64 4 x) y)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) 4) y))","(/.f64 (+.f64 4 x) y)"]],"time":231.4521484375,"type":"simplify"},{"compiler":[[3321,1500]],"time":31.44287109375,"type":"eval"},{"alts":[["(fabs.f64 (fma.f64 (*.f64 (neg.f64 z) (cbrt.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (/.f64 (+.f64 x 4) y)))","fresh",14.260984558009289],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 x (/.f64 z y))))","fresh",3.849941259768442],["(fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (/.f64 (fma.f64 x y (*.f64 4 y)) y) y)))","fresh",8.751373480070939],["(fabs.f64 (fma.f64 (/.f64 1 y) (+.f64 4 x) (neg.f64 (/.f64 (*.f64 z x) y))))","fresh",2.8984375],["(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))","next",2.84375],["(fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))))","done",1.2435609800709377],["(fabs.f64 (fma.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y) (/.f64 (+.f64 x 4) y)))","fresh",2.859375],["(fabs.f64 (fma.f64 (cbrt.f64 (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x y)) (/.f64 (+.f64 x 4) y)))","fresh",11.121847602543664]],"compiler":[[23,15],[15,10],[20,12],[17,12],[12,8],[19,12],[17,12],[21,14],[23,15],[15,10],[20,12],[17,12],[12,8],[17,12],[21,14]],"count":[[187,8]],"kept":[{"done":[0,0],"fresh":[6,5],"new":[180,2],"picked":[1,1]}],"min-error":[0],"time":55.965087890625,"type":"prune"},{"compiler":[[33,18]],"locations":[["(/.f64 (fma.f64 x z (-.f64 -4 x)) y)",2.6704550970956658,true]],"time":8.2119140625,"type":"localize"},{"count":[[1,36]],"series":[["(/.f64 (fma.f64 x z (-.f64 -4 x)) y)","y","-inf",0.339111328125],["(/.f64 (fma.f64 x z (-.f64 -4 x)) y)","y","inf",0.363037109375],["(/.f64 (fma.f64 x z (-.f64 -4 x)) y)","y","0",0.469970703125],["(/.f64 (fma.f64 x z (-.f64 -4 x)) y)","z","-inf",0.406005859375],["(/.f64 (fma.f64 x z (-.f64 -4 x)) y)","z","inf",0.346923828125],["(/.f64 (fma.f64 x z (-.f64 -4 x)) y)","z","0",0.390869140625],["(/.f64 (fma.f64 x z (-.f64 -4 x)) y)","x","-inf",0.467041015625],["(/.f64 (fma.f64 x z (-.f64 -4 x)) y)","x","inf",0.384033203125],["(/.f64 (fma.f64 x z (-.f64 -4 x)) y)","x","0",0.4599609375]],"time":3.7509765625,"type":"series"},{"count":[[1,68]],"inputs":[["(/.f64 (fma.f64 x z (-.f64 -4 x)) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 0) (/.f64 (fma.f64 x z (-.f64 -4 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) (*.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) (-.f64 -4 x)) (*.f64 (/.f64 1 y) (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) (fma.f64 z x -4)) (*.f64 (/.f64 1 y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) (*.f64 x z)) (*.f64 (/.f64 1 y) (-.f64 -4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) (/.f64 (fma.f64 x z (-.f64 -4 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) (*.f64 0 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -4 x) (/.f64 1 y)) (*.f64 (*.f64 x z) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z x -4) (/.f64 1 y)) (*.f64 (neg.f64 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x z) (/.f64 1 y)) (*.f64 (-.f64 -4 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 x z (-.f64 -4 x)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (fma.f64 x z (-.f64 -4 x)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x z) y) (/.f64 (+.f64 x 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (fma.f64 z x -4) y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 x z (-.f64 -4 x)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2)) -1) (/.f64 (cbrt.f64 (fma.f64 x z (-.f64 -4 x))) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) -1) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 y)) (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (+.f64 x 4) (*.f64 x z))) 1) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (+.f64 x 4) (*.f64 x z))) (cbrt.f64 y)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2)) (neg.f64 (cbrt.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 x z (-.f64 -4 x))) (cbrt.f64 (neg.f64 y))) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2))) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 x z (-.f64 -4 x))) -1) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (fma.f64 x z (-.f64 -4 x)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x z (-.f64 -4 x))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x z (-.f64 -4 x)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 2)) (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (fma.f64 x z (-.f64 -4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2)) y) (cbrt.f64 (fma.f64 x z (-.f64 -4 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (-.f64 (+.f64 x 4) (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2)) (cbrt.f64 y)) (/.f64 (cbrt.f64 (fma.f64 x z (-.f64 -4 x))) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2)) (/.f64 (cbrt.f64 (fma.f64 x z (-.f64 -4 x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (fma.f64 x z (-.f64 -4 x)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 x z (-.f64 -4 x))) (cbrt.f64 (*.f64 y y))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 x z (-.f64 -4 x))) y) (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 x z (-.f64 -4 x))) -1) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 y)) (/.f64 (fma.f64 x z (-.f64 -4 x)) (neg.f64 (cbrt.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x z (-.f64 -4 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) (cbrt.f64 (pow.f64 (fma.f64 x z (-.f64 -4 x)) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 2)) (cbrt.f64 (fma.f64 x z (-.f64 -4 x)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 2)) (cbrt.f64 (-.f64 (+.f64 x 4) (*.f64 x z)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (fma.f64 x z (-.f64 -4 x))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (+.f64 x 4) (*.f64 x z))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) (neg.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y) 3))))))"]],"rules":[["egg-rr",68]],"time":22.9951171875,"type":"rewrite"},{"count":[[104,81]],"inputs":[["(/.f64 -4 y)","(-.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x) (*.f64 4 (/.f64 1 y)))","(-.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x) (*.f64 4 (/.f64 1 y)))","(-.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (*.f64 (-.f64 z 1) x) y)","(-.f64 (/.f64 (*.f64 (-.f64 z 1) x) y) (*.f64 4 (/.f64 1 y)))","(-.f64 (/.f64 (*.f64 (-.f64 z 1) x) y) (*.f64 4 (/.f64 1 y)))","(-.f64 (/.f64 (*.f64 (-.f64 z 1) x) y) (*.f64 4 (/.f64 1 y)))","(*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) y))","(-.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) y)) (*.f64 4 (/.f64 1 y)))","(-.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) y)) (*.f64 4 (/.f64 1 y)))","(-.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) y)) (*.f64 4 (/.f64 1 y)))","(*.f64 -1 (/.f64 (+.f64 4 x) y))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)"]],"method":["egg-herbie"],"outputs":[["(/.f64 -4 y)","(-.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(-.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(-.f64 (*.f64 (-.f64 (/.f64 z y) (/.f64 1 y)) x) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (*.f64 (-.f64 z 1) x) y)","(/.f64 (*.f64 (+.f64 z -1) x) y)","(-.f64 (/.f64 (*.f64 (-.f64 z 1) x) y) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(-.f64 (/.f64 (*.f64 (-.f64 z 1) x) y) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(-.f64 (/.f64 (*.f64 (-.f64 z 1) x) y) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) y))","(/.f64 (*.f64 (+.f64 z -1) x) y)","(-.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) y)) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(-.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) y)) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(-.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) y)) (*.f64 4 (/.f64 1 y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(*.f64 -1 (/.f64 (+.f64 4 x) y))","(/.f64 (-.f64 -4 x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (*.f64 z x) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(+.f64 (/.f64 (*.f64 z x) y) (*.f64 -1 (/.f64 (+.f64 4 x) y)))","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)","(/.f64 (-.f64 (*.f64 z x) (+.f64 4 x)) y)","(/.f64 (fma.f64 z x (-.f64 -4 x)) y)"]],"time":135.9169921875,"type":"simplify"},{"compiler":[[1289,767]],"time":15.468994140625,"type":"eval"},{"alts":[["(fabs.f64 (fma.f64 (*.f64 (neg.f64 z) (cbrt.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (/.f64 (+.f64 x 4) y)))","fresh",14.260984558009289],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 x (/.f64 z y))))","fresh",3.849941259768442],["(fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (/.f64 (fma.f64 x y (*.f64 4 y)) y) y)))","fresh",8.751373480070939],["(fabs.f64 (fma.f64 (/.f64 1 y) (+.f64 4 x) (neg.f64 (/.f64 (*.f64 z x) y))))","fresh",2.8984375],["(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))","done",2.84375],["(fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))))","done",1.2435609800709377],["(fabs.f64 (fma.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y) (/.f64 (+.f64 x 4) y)))","fresh",2.859375],["(fabs.f64 (fma.f64 (cbrt.f64 (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x y)) (/.f64 (+.f64 x 4) y)))","fresh",11.121847602543664]],"compiler":[[23,15],[15,10],[20,12],[17,12],[12,8],[19,12],[17,12],[21,14]],"count":[[89,8]],"kept":[{"done":[1,1],"fresh":[6,6],"new":[81,0],"picked":[1,1]}],"min-error":[0],"time":18.02490234375,"type":"prune"},{"accuracy":[0.09603500976844201],"baseline":[1.2435609800709377],"branch":[["x",1.2435609800709377,1],["y",1.2435609800709377,1],["z",1.2435609800709377,1],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))",0.09603500976844201,2],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))",0.09603500976844201,3]],"compiler":[[4,3],[4,3],[4,3],[15,10],[14,9],[232,120]],"count":[[15,3]],"inputs":[["(fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (/.f64 (fma.f64 x y (*.f64 4 y)) y) y)))","(fabs.f64 (fma.f64 (/.f64 1 y) (+.f64 4 x) (neg.f64 (/.f64 (*.f64 z x) y))))","(fabs.f64 (fma.f64 (*.f64 (neg.f64 z) (cbrt.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (/.f64 (+.f64 x 4) y)))","(fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))))","(fabs.f64 (fma.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y) (/.f64 (+.f64 x 4) y)))","(fabs.f64 (fma.f64 (cbrt.f64 (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x y)) (/.f64 (+.f64 x 4) y)))","(fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y)))","(fabs.f64 (/.f64 (/.f64 (+.f64 (*.f64 (-.f64 -4 x) y) (*.f64 y (*.f64 x z))) (neg.f64 y)) y))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 x (/.f64 z y))))","(fabs.f64 (-.f64 (+.f64 (*.f64 (/.f64 1 y) 4) (/.f64 x y)) (*.f64 (/.f64 x y) z)))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (*.f64 z (cbrt.f64 (/.f64 x y))))))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (*.f64 x z) (/.f64 1 y))))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x y)))))","(fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))"]],"link":["."],"name":["fabs fraction 1"],"oracle":[30.027109620114704],"outputs":[["(fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4))))","(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 x (/.f64 z y))))","(fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y)))"]],"time":47.85302734375,"times":[["x",5.487060546875],["y",7.421875],["z",5.362060546875],["(fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)))",10.2978515625],["(-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z))",15.340087890625]],"type":"regimes"},{"bstep":[[1.1193285723570113e+105,3.0873022160880443e+109,0.032958984375],[-69.9419385443065,-3.0389948783497512e-28,0.093994140625]],"compiler":[[7,6],[14,9]],"method":["left-value","left-value"],"time":0.2890625,"type":"bsearch"},{"compiler":[[71,39]],"inputs":[["(if (<=.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) -50) (fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))) (if (<=.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) 1999999999999999876516601650563957080654054728944248956588832425077742983649199427273641055007816510603264) (fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 x (/.f64 z y)))) (fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) -50) (fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (+.f64 (/.f64 x y) (*.f64 (/.f64 1 y) 4)))) (if (<=.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 (/.f64 x y) z)) 1999999999999999876516601650563957080654054728944248956588832425077742983649199427273641055007816510603264) (fabs.f64 (-.f64 (/.f64 (+.f64 x 4) y) (*.f64 x (/.f64 z y)))) (fabs.f64 (fma.f64 (neg.f64 z) (/.f64 x y) (/.f64 (+.f64 x 4) y)))))","(if (<=.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) -50) (fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) (if (<=.f64 (/.f64 (-.f64 (+.f64 x 4) (*.f64 x z)) y) 1999999999999999876516601650563957080654054728944248956588832425077742983649199427273641055007816510603264) (fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y)) (fabs.f64 (/.f64 (fma.f64 x z (-.f64 -4 x)) y))))"]],"stop":[["fuel",1]],"time":26.51904296875,"type":"simplify"},{"time":0.0068359375,"type":"soundness"},{"compiler":[[71,39]],"remove-preprocessing":[[]],"time":18.989990234375,"type":"end"}]
[{"compiler":[[17,13]],"method":["search"],"sampling":[[12,0.39200334013526117,0.5158451913720228,0.09215146849271605],[11,0.25353449859494503,0.6981950038230025,0.048270497582052485],[10,0.2106286603711851,0.745001372794377,0.044369966834437946],[9,0.15602122990458156,0.8191114569990532,0.02486731309636525],[8,0.0,0.998535871389322,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":127.883056640625,"type":"analyze"},{"outcomes":[["body",256,"invalid",59.52783203125,1245],["body",256,"valid",398.042236328125,8256]],"time":466.4228515625,"type":"sample"},{"compiler":[[16,12]],"inputs":[["0","1","2"],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 y (*.f64 x 1/4)) z)) x))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 z (*.f64 y 1/4)) x)) y))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 z 1/4)) y)) z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))","(+.f64 1 (*.f64 (-.f64 (fma.f64 1/4 y x) z) (/.f64 4 y)))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 y (*.f64 x 1/4)) z)) x))","(+.f64 1 (*.f64 (-.f64 (fma.f64 1/4 x y) z) (/.f64 4 x)))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 z (*.f64 y 1/4)) x)) y))","(+.f64 1 (*.f64 (-.f64 (fma.f64 1/4 y z) x) (/.f64 4 y)))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 z 1/4)) y)) z))","(+.f64 1 (*.f64 (-.f64 (fma.f64 1/4 z x) y) (/.f64 4 z)))"]],"symmetry":[[]],"time":80.489990234375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))","(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)"]],"time":21.193115234375,"type":"simplify"},{"compiler":[[27,19]],"time":0.494873046875,"type":"eval"},{"alts":[["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))","fresh",0.26953125],["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)","next",0.17578125]],"compiler":[[16,12],[14,10],[16,12],[14,10]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.01171875],"time":1.488037109375,"type":"prune"},{"compiler":[[32,17]],"locations":[["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)",0.17578125,true]],"time":7.376953125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)","z","-inf",0.2890625],["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)","z","inf",0.357177734375],["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)","z","0",0.4189453125],["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)","x","-inf",0.557861328125],["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)","x","inf",0.363037109375],["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)","x","0",0.508056640625],["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)","y","-inf",0.635986328125],["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)","y","inf",0.511962890625],["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)","y","0",0.60888671875]],"time":4.385009765625,"type":"series"},{"count":[[1,49]],"inputs":[["(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) 0) (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) (*.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)) (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) (*.f64 0 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 3) 1) (/.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 2) (neg.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)) (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) 2)) (cbrt.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 3) 1) (+.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 2) (neg.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 3) 1) 1) (+.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 2) (neg.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 3) 1) (+.f64 1 (-.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 2) (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 3) 1) 1) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 2) (neg.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 3) 1)) (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 2) (neg.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) 4) 1) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) -4) 1) (neg.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 y (*.f64 (fma.f64 y 1/4 (-.f64 x z)) 4)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 y) (*.f64 (fma.f64 y 1/4 (-.f64 x z)) -4)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) 4) (/.f64 1 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (cbrt.f64 (/.f64 4 y))) (cbrt.f64 (/.f64 16 (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 4 y) (fma.f64 y 1/4 (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y 1/4 (-.f64 x z))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 y 1/4 (-.f64 x z)) 2)) (/.f64 4 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (*.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y)))))))"]],"rules":[["egg-rr",49]],"time":21.92919921875,"type":"rewrite"},{"count":[[85,66]],"inputs":[["(*.f64 4 (/.f64 (-.f64 x z) y))","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","2","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","2","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 1 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 x y)) (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 x y)) (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 x y)) (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y))))","(*.f64 4 (/.f64 x y))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(*.f64 4 (/.f64 x y))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(*.f64 -4 (/.f64 z y))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(*.f64 -4 (/.f64 z y))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 4 (/.f64 (-.f64 x z) y))","(/.f64 (*.f64 4 (-.f64 x z)) y)","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","2","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","2","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","(+.f64 2 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","(+.f64 1 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)))","(fma.f64 4 (-.f64 1/4 (/.f64 z y)) 1)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 x y)) (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 x y)) (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 x y)) (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(*.f64 4 (/.f64 x y))","(/.f64 (*.f64 4 x) y)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(*.f64 4 (/.f64 x y))","(/.f64 (*.f64 4 x) y)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 1/4 y) z) y)) (*.f64 4 (/.f64 x y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","(fma.f64 4 (+.f64 (/.f64 x y) 1/4) 1)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(*.f64 -4 (/.f64 z y))","(/.f64 (*.f64 -4 z) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(*.f64 -4 (/.f64 z y))","(/.f64 (*.f64 -4 z) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(fma.f64 4 (+.f64 1/4 (/.f64 (-.f64 x z) y)) 1)"]],"time":148.4990234375,"type":"simplify"},{"compiler":[[1081,668]],"time":14.06396484375,"type":"eval"},{"alts":[["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","next",0.0078125],["(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","fresh",0.01171875]],"compiler":[[20,15],[11,8],[20,15],[11,8]],"count":[[68,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[66,2],"picked":[1,0]}],"min-error":[0],"time":12.992919921875,"type":"prune"},{"compiler":[[74,45]],"locations":[["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))",0.00390625,true],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))",0.00390625,true],["(/.f64 (+.f64 (*.f64 1/4 y) x) y)",0.0078125,true],["(*.f64 -4 (/.f64 z y))",0.017910009768442016,true]],"time":15.719970703125,"type":"localize"},{"count":[[4,78]],"series":[["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","x","-inf",0.18798828125],["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","x","inf",0.174072265625],["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","x","0",0.196044921875],["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","y","-inf",0.173095703125],["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","y","inf",0.178955078125],["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","y","0",0.19091796875],["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","z","-inf",0.18603515625],["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","z","inf",0.2099609375],["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","z","0",0.182861328125],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","x","-inf",0.263916015625],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","x","inf",0.2470703125],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","x","0",0.407958984375],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","y","-inf",0.3291015625],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","y","inf",0.345947265625],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","y","0",0.27001953125],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","z","-inf",0.177978515625],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","z","inf",0.3291015625],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","z","0",0.39794921875],["(/.f64 (+.f64 (*.f64 1/4 y) x) y)","x","-inf",0.2509765625],["(/.f64 (+.f64 (*.f64 1/4 y) x) y)","x","inf",0.26123046875],["(/.f64 (+.f64 (*.f64 1/4 y) x) y)","x","0",0.3271484375],["(/.f64 (+.f64 (*.f64 1/4 y) x) y)","y","-inf",0.334228515625],["(/.f64 (+.f64 (*.f64 1/4 y) x) y)","y","inf",0.964111328125],["(/.f64 (+.f64 (*.f64 1/4 y) x) y)","y","0",0.31689453125],["(*.f64 -4 (/.f64 z y))","y","-inf",0.294921875],["(*.f64 -4 (/.f64 z y))","y","inf",0.427978515625],["(*.f64 -4 (/.f64 z y))","y","0",0.428955078125],["(*.f64 -4 (/.f64 z y))","z","-inf",0.2822265625],["(*.f64 -4 (/.f64 z y))","z","inf",0.4580078125],["(*.f64 -4 (/.f64 z y))","z","0",0.505126953125]],"time":9.657958984375,"type":"series"},{"count":[[4,268]],"inputs":[["(*.f64 -4 (/.f64 z y))","(/.f64 (+.f64 (*.f64 1/4 y) x) y)","(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 -4 z) y) 0) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 -4 z) y) (*.f64 (/.f64 (*.f64 -4 z) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 -4 z) y)) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 -4 z) y) (*.f64 0 (/.f64 (*.f64 -4 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -4) (*.f64 (cbrt.f64 16) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 z y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 z y) 2)) -4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -4 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -64 y)) (/.f64 z (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 -4 z) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -4 z) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -4 z) y) 2)) (cbrt.f64 (/.f64 (*.f64 -4 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 z y) (cbrt.f64 -4)) (cbrt.f64 16))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -4 (cbrt.f64 (/.f64 z y))) (cbrt.f64 (pow.f64 (/.f64 z y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -4 (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z y) -4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -4 z) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 (/.f64 1 y) -4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -4 z) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 4 z) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -4 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -4 z) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -4 z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 4 z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -4 z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -4 (/.f64 z (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -4 z) y) 2)) (cbrt.f64 (*.f64 -4 z))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -4 z) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -64 y)) z) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 4 z) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -4 z) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -4 z) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -4 z) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -4 z) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 z) (/.f64 (neg.f64 y) -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (/.f64 y -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 -4 z) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 -4 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 -4 z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 -4 z) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 -4 z) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 -4 z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 -4 z) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 1/4 y x) y) 0) (/.f64 (fma.f64 1/4 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 1/4 y x) y) (*.f64 (/.f64 (fma.f64 1/4 y x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) x) (*.f64 (/.f64 1 y) (*.f64 1/4 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) (*.f64 1/4 y)) (*.f64 (/.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 1/4 y x) y)) (/.f64 (fma.f64 1/4 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 1/4 y x) y) (*.f64 0 (/.f64 (fma.f64 1/4 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 1 y)) (*.f64 (*.f64 1/4 y) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/4 y) (/.f64 1 y)) (*.f64 x (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 1/4 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (fma.f64 1/4 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 1/4 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 1/4 y x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 1/4 y x) y)) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 1/4 y x) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (fma.f64 1/4 y x) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 1/4 y x) y)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 1/4 y x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 1/4 y x) y) 2)) (cbrt.f64 (/.f64 (fma.f64 1/4 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/4 y x)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 1/4 y x) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 -1/4 y) x) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/4 y x) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (fma.f64 1/4 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 1/4 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 1/4 y x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/4 y x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 1/4 y x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/4 y x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1/4 y) x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/4 y x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (fma.f64 1/4 y x)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 1/4 y x) y) 2)) (cbrt.f64 (-.f64 (*.f64 -1/4 y) x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 1/4 y x) y) 2)) (cbrt.f64 (fma.f64 1/4 y x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 1/4 y x) y)) (cbrt.f64 (pow.f64 (fma.f64 1/4 y x) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (*.f64 -1/4 y) x) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (*.f64 -1/4 y) x) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/4 y x) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 1/4 y x) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/4 y x) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 1/4 y x) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 1/4 y x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 1/4 y x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 1/4 y x) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 1/4 y x) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 1/4 y x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 1/4 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 1/4 y x) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 -4 z) y) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 0) (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (*.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)) (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (*.f64 0 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -4 z) y) 2)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) 2)) (cbrt.f64 (/.f64 (*.f64 (*.f64 (/.f64 (*.f64 -4 z) y) 4) (fma.f64 1/4 y x)) y)))) (+.f64 (cbrt.f64 (/.f64 (*.f64 -4 z) y)) (cbrt.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) 2)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -4 z) y) 2)) (cbrt.f64 (/.f64 (*.f64 (*.f64 (/.f64 (*.f64 -4 z) y) 4) (fma.f64 1/4 y x)) y)))) (+.f64 (cbrt.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y)) (cbrt.f64 (/.f64 (*.f64 -4 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 2)) (cbrt.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 16) (+.f64 (*.f64 (/.f64 (fma.f64 1/4 y x) y) (cbrt.f64 4)) (*.f64 (/.f64 z y) (cbrt.f64 -4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 16) (+.f64 (*.f64 (/.f64 z y) (cbrt.f64 -4)) (*.f64 (/.f64 (fma.f64 1/4 y x) y) (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 4 (fma.f64 1/4 y x)) y (*.f64 y (*.f64 -4 z))) (/.f64 1 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 -4 z) (cbrt.f64 y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 4 (fma.f64 1/4 y x)))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 -4 z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) (cbrt.f64 y)))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 -4 z) (cbrt.f64 y)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 -4 (fma.f64 1/4 y x)))) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 4 z) (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) (cbrt.f64 y)))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -4 z) (cbrt.f64 (*.f64 y y))) (*.f64 y (/.f64 (*.f64 4 (fma.f64 1/4 y x)) (cbrt.f64 y)))) (*.f64 y (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -4 z) (neg.f64 y)) (*.f64 y (*.f64 -4 (fma.f64 1/4 y x)))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 4 z) y) (*.f64 (neg.f64 y) (*.f64 4 (fma.f64 1/4 y x)))) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 4 z) (neg.f64 y)) (*.f64 (neg.f64 y) (*.f64 -4 (fma.f64 1/4 y x)))) (*.f64 (neg.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) (cbrt.f64 y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 -4 z))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (*.f64 -4 z) (cbrt.f64 y)))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) (cbrt.f64 y)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 4 z))) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -4 (fma.f64 1/4 y x)) (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (/.f64 (*.f64 -4 z) (cbrt.f64 y)))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 4 (fma.f64 1/4 y x)) (cbrt.f64 (*.f64 y y))) (*.f64 y (/.f64 (*.f64 -4 z) (cbrt.f64 y)))) (*.f64 y (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -4 (fma.f64 1/4 y x)) y) (*.f64 (neg.f64 y) (*.f64 -4 z))) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -4 (fma.f64 1/4 y x)) (neg.f64 y)) (*.f64 (neg.f64 y) (*.f64 4 z))) (*.f64 (neg.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 4 (fma.f64 1/4 y x)) (neg.f64 y)) (*.f64 y (*.f64 4 z))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (*.f64 4 (fma.f64 1/4 y x)) y (*.f64 y (*.f64 -4 z)))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 4 (fma.f64 1/4 y x)) y (*.f64 y (*.f64 -4 z))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 4 (fma.f64 1/4 y x)) y (*.f64 y (*.f64 -4 z))) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) (cbrt.f64 y)) (/.f64 (*.f64 -4 z) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -4 (fma.f64 1/4 y x)) (*.f64 4 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (*.f64 -4 z) (cbrt.f64 y)) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 4 z) (*.f64 -4 (fma.f64 1/4 y x))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 -4 z) y) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) 2)) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 -4 z) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -4 z) y) 2)) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -4 (/.f64 z y) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 4 (/.f64 (fma.f64 1/4 y x) y) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z y) -4 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 z y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 z y) 2)) -4) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -4) (*.f64 (cbrt.f64 16) (/.f64 z y)) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -4 z) (/.f64 1 y) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 (/.f64 1 y) -4) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 -4 z) y) 1 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 4 z) y) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -64 y)) (/.f64 z (cbrt.f64 (*.f64 y y))) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -4 z) y) 2)) (cbrt.f64 (/.f64 (*.f64 -4 z) y)) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 z y) (cbrt.f64 -4)) (cbrt.f64 16) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -4 (cbrt.f64 (/.f64 z y))) (cbrt.f64 (pow.f64 (/.f64 z y) 2)) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 1/4 y x) (*.f64 (/.f64 1 y) 4) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (/.f64 (*.f64 2 (fma.f64 1/4 y x)) y) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (fma.f64 1/4 y x) y) 2) 2 (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (fma.f64 1/4 y x) y) (cbrt.f64 4)) (cbrt.f64 16) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (fma.f64 1/4 y x)) (/.f64 1 y) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) 2)) (cbrt.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y)) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) 1 (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 4) (/.f64 (*.f64 (cbrt.f64 16) (fma.f64 1/4 y x)) y) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 64 y)) (/.f64 (fma.f64 1/4 y x) (cbrt.f64 (*.f64 y y))) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (cbrt.f64 (/.f64 (fma.f64 1/4 y x) y))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 1/4 y x) y) 2)) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (fma.f64 1/4 y x) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 1/4 y x) y) 2)) 4) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 -4 (fma.f64 1/4 y x)) y) (/.f64 (*.f64 -4 z) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z y) -4 1) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1) (/.f64 (*.f64 -4 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 -4 z) y) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 0) (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) (*.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y)) (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) (*.f64 0 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (neg.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 2)) (cbrt.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 3)) -1) (/.f64 1 (+.f64 (-.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 2)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 2)) (-.f64 1 (cbrt.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)))) (+.f64 (cbrt.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 2)) (cbrt.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)))) (+.f64 1 (cbrt.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 3)) (/.f64 1 (fma.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (+.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 3)) (cbrt.f64 (fma.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (+.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) -1) 1))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (+.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) -1) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 -4 z) y) 3)) y) (*.f64 (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y))) (*.f64 4 (fma.f64 1/4 y x)))) (*.f64 (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y))) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 -4 z) y) 3)) (cbrt.f64 (*.f64 y y))) (*.f64 (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y))) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) (cbrt.f64 y)))) (*.f64 (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y))) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 (*.f64 -4 z) y) 3)) (neg.f64 y)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y))) (*.f64 -4 (fma.f64 1/4 y x)))) (*.f64 (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y))) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) (cbrt.f64 y)) (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y)))) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 1 (pow.f64 (/.f64 (*.f64 -4 z) y) 3)))) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -4 (fma.f64 1/4 y x)) (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y)))) (*.f64 (neg.f64 y) (+.f64 1 (pow.f64 (/.f64 (*.f64 -4 z) y) 3)))) (*.f64 (neg.f64 y) (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 4 (fma.f64 1/4 y x)) (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y)))) (*.f64 y (+.f64 1 (pow.f64 (/.f64 (*.f64 -4 z) y) 3)))) (*.f64 y (+.f64 1 (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (/.f64 (*.f64 4 z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 3)) -1) (+.f64 (-.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 3)) (fma.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (+.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 3)) 1) (fma.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (+.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 2)) (cbrt.f64 (+.f64 1 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 3)))) (cbrt.f64 (fma.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (+.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 3)) 1) (fma.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (+.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) 1) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 (*.f64 4 (fma.f64 1/4 y x)) y (*.f64 y (*.f64 -4 z))) 1) (*.f64 y y)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y y) (fma.f64 (*.f64 4 (fma.f64 1/4 y x)) y (*.f64 y (*.f64 -4 z)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 1 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 3)) (+.f64 (-.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 2)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (/.f64 z y) -4 1)) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 z y) -4 1)) 2) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (/.f64 z y) -4 1) (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y) 2)) (cbrt.f64 (/.f64 (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z)) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 z y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 z y) 2)) -4) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 -4 z) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -4 z) y) 2)) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -4) (*.f64 (cbrt.f64 16) (/.f64 z y)) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -4 z) (/.f64 1 y) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 -4 z) y) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 (/.f64 1 y) -4) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z y) -4 (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -4 (/.f64 z y) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 -4 z) y) 1 (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 4 z) y) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -64 y)) (/.f64 z (cbrt.f64 (*.f64 y y))) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -4 z) y) 2)) (cbrt.f64 (/.f64 (*.f64 -4 z) y)) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 z y) (cbrt.f64 -4)) (cbrt.f64 16) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -4 (cbrt.f64 (/.f64 z y))) (cbrt.f64 (pow.f64 (/.f64 z y) 2)) (fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (/.f64 z y) -4 1) 1 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) 2)) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 1/4 y x) (*.f64 (/.f64 1 y) 4) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 4 (/.f64 (fma.f64 1/4 y x) y) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (/.f64 (*.f64 2 (fma.f64 1/4 y x)) y) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (fma.f64 1/4 y x) y) 2) 2 (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (fma.f64 1/4 y x) y) (cbrt.f64 4)) (cbrt.f64 16) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (fma.f64 1/4 y x)) (/.f64 1 y) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) 2)) (cbrt.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y)) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 4 (fma.f64 1/4 y x)) y) 1 (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 4) (/.f64 (*.f64 (cbrt.f64 16) (fma.f64 1/4 y x)) y) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 64 y)) (/.f64 (fma.f64 1/4 y x) (cbrt.f64 (*.f64 y y))) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (cbrt.f64 (/.f64 (fma.f64 1/4 y x) y))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 1/4 y x) y) 2)) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (fma.f64 1/4 y x) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 1/4 y x) y) 2)) 4) (fma.f64 (/.f64 z y) -4 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 -4 (fma.f64 1/4 y x)) y) (fma.f64 (/.f64 z y) -4 1))))))"]],"rules":[["egg-rr",95],["egg-rr",85],["egg-rr",44],["egg-rr",44]],"time":50.571044921875,"type":"rewrite"},{"count":[[346,291]],"inputs":[["(/.f64 x y)","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","1/4","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","1/4","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","1/4","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(/.f64 x y)","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(/.f64 x y)","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))","(*.f64 -4 (/.f64 z y))","(*.f64 -4 (/.f64 z y))","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","1","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","1","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(+.f64 1 (*.f64 -4 (/.f64 z y)))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(*.f64 4 (/.f64 x y))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(*.f64 4 (/.f64 x y))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 1 (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","(*.f64 -4 (/.f64 z y))","(*.f64 -4 (/.f64 z y))","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","2","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","2","(+.f64 2 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(+.f64 2 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(+.f64 2 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(+.f64 2 (*.f64 -4 (/.f64 z y)))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(*.f64 4 (/.f64 x y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(*.f64 4 (/.f64 x y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x y)","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","1/4","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","1/4","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","1/4","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(/.f64 x y)","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(/.f64 x y)","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(+.f64 1/4 (/.f64 x y))","(*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))","(/.f64 (fma.f64 1/4 y x) (/.f64 y 4))","(*.f64 -4 (/.f64 z y))","(/.f64 (*.f64 -4 z) y)","(*.f64 -4 (/.f64 z y))","(/.f64 (*.f64 -4 z) y)","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","1","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","1","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (*.f64 -4 (/.f64 z y)))","(fma.f64 -4 (/.f64 z y) 1)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(*.f64 4 (/.f64 x y))","(/.f64 (*.f64 4 x) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(*.f64 4 (/.f64 x y))","(/.f64 (*.f64 4 x) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(/.f64 (+.f64 (fma.f64 -4 z (*.f64 4 x)) y) y)","(+.f64 1 (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y)))","(fma.f64 (/.f64 (fma.f64 1/4 y x) y) 4 1)","(*.f64 -4 (/.f64 z y))","(/.f64 (*.f64 -4 z) y)","(*.f64 -4 (/.f64 z y))","(/.f64 (*.f64 -4 z) y)","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","2","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","2","(+.f64 2 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y)))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (*.f64 -4 (/.f64 z y)))","(fma.f64 -4 (/.f64 z y) 2)","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(*.f64 4 (/.f64 x y))","(/.f64 (*.f64 4 x) y)","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(*.f64 4 (/.f64 x y))","(/.f64 (*.f64 4 x) y)","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))","(+.f64 2 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 2 (/.f64 (fma.f64 -4 z (*.f64 4 x)) y))"]],"time":286.883056640625,"type":"simplify"},{"compiler":[[6271,4113]],"time":73.745849609375,"type":"eval"},{"alts":[["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","done",0.0078125],["(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","next",0.01171875]],"compiler":[[20,15],[11,8],[11,8]],"count":[[293,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[291,0],"picked":[1,1]}],"min-error":[0],"time":135.39404296875,"type":"prune"},{"compiler":[[24,10]],"locations":[["(/.f64 (-.f64 x z) y)",0.015625,true]],"time":4.754150390625,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (-.f64 x z) y)","y","-inf",0.337890625],["(/.f64 (-.f64 x z) y)","y","inf",0.3330078125],["(/.f64 (-.f64 x z) y)","y","0",0.2939453125],["(/.f64 (-.f64 x z) y)","z","-inf",0.262939453125],["(/.f64 (-.f64 x z) y)","z","inf",0.248046875],["(/.f64 (-.f64 x z) y)","z","0",0.280029296875],["(/.f64 (-.f64 x z) y)","x","-inf",0.356201171875],["(/.f64 (-.f64 x z) y)","x","inf",0.26220703125],["(/.f64 (-.f64 x z) y)","x","0",0.44580078125]],"time":2.9169921875,"type":"series"},{"count":[[1,73]],"inputs":[["(/.f64 (-.f64 x z) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 z y)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) (neg.f64 z)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (*.f64 (/.f64 1 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x z) y) (*.f64 (/.f64 (-.f64 x z) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 x z) y) 0) (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (*.f64 (neg.f64 (/.f64 z y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x z) y) (*.f64 0 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 x z) y)) (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x y) (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x y) (*.f64 y y)) (/.f64 (*.f64 y z) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 z y)) (/.f64 x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 y) (/.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x z)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x z) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (-.f64 x z) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x z) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x z) y) 2)) (cbrt.f64 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 x z) 2)) y) (cbrt.f64 (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x z) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x z) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x y (neg.f64 (*.f64 y z))) (/.f64 1 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x z) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 z))) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) z)) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 z (cbrt.f64 y)))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (neg.f64 y)) (*.f64 (neg.f64 y) (neg.f64 z))) (*.f64 (neg.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) y) (*.f64 (neg.f64 y) z)) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (/.f64 z (cbrt.f64 y)))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (neg.f64 y)) (*.f64 y (neg.f64 z))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (cbrt.f64 (*.f64 y y))) (*.f64 y (/.f64 z (cbrt.f64 y)))) (*.f64 y (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x y (neg.f64 (*.f64 y z)))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x y (neg.f64 (*.f64 y z))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (-.f64 x z)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) (cbrt.f64 (pow.f64 (-.f64 x z) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x z) y) 2)) (cbrt.f64 (-.f64 x z))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x z) y) 2)) (cbrt.f64 (-.f64 z x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x z) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x y (neg.f64 (*.f64 y z))) 1) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x z) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x z) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 z x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x z) y) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x z) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x y (neg.f64 (*.f64 y z))) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x z) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z x) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 x z) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 z x) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) y) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 y) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 x (cbrt.f64 (*.f64 y y))) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x y) (neg.f64 (/.f64 z y)))))))"]],"rules":[["egg-rr",73]],"time":20.95703125,"type":"rewrite"},{"count":[[97,77]],"inputs":[["(*.f64 -1 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(*.f64 -1 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(*.f64 -1 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)","(+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 x z) y)"]],"time":78.725830078125,"type":"simplify"},{"compiler":[[1123,505]],"time":12.301025390625,"type":"eval"},{"alts":[["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","done",0.0078125],["(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","done",0.01171875]],"compiler":[[20,15],[11,8]],"count":[[79,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[77,0],"picked":[1,1]}],"min-error":[0],"time":17.18212890625,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["z",0.0078125,1],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))",0.0078125,1],["(/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y)",0.0078125,1]],"compiler":[[4,3],[4,3],[4,3],[16,12],[14,10],[52,35]],"count":[[4,1]],"inputs":[["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(fma.f64 4 (/.f64 (-.f64 x z) y) 2)","(fma.f64 (fma.f64 y 1/4 (-.f64 x z)) (/.f64 4 y) 1)","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))"]],"link":["."],"name":["Data.Array.Repa.Algorithms.ColorRamp:rampColorHotToCold from repa-algorithms-3.4.0.1, C"],"oracle":[0.4375],"outputs":[["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))"]],"time":17.199951171875,"times":[["x",3.216064453125],["y",3.286865234375],["z",3.52392578125],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y))",2.926025390625],["(/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 1/4)) z)) y)",2.791015625]],"type":"regimes"},{"compiler":[[20,15]],"inputs":[["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 1 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 (+.f64 (*.f64 1/4 y) x) y))))","(/.f64 (+.f64 y (fma.f64 4 (fma.f64 1/4 y x) (*.f64 -4 z))) y)"]],"stop":[["done",1]],"time":24.828857421875,"type":"simplify"},{"time":0.031005859375,"type":"soundness"},{"compiler":[[20,15]],"remove-preprocessing":[[]],"time":11.752197265625,"type":"end"}]
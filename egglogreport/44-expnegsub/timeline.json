[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.5017080307006836,0.0009760856628417969,0.4973158836364746],[11,0.5017080307006836,0.0019521713256835938,0.4963397979736328],[10,0.499755859375,0.0039043426513671875,0.4963397979736328],[9,0.499755859375,0.007808685302734375,0.4924354553222656],[8,0.499755859375,0.01561737060546875,0.48462677001953125],[7,0.499755859375,0.0312347412109375,0.4690093994140625],[6,0.499755859375,0.062469482421875,0.437774658203125],[5,0.499755859375,0.12493896484375,0.37530517578125],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.529052734375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.6923828125,19],["body",256,"valid",307.293701171875,8256]],"time":315.558837890625,"type":"sample"},{"compiler":[[8,6]],"inputs":[["0"],["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))"]],"symmetry":[[]],"time":53.607177734375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))"]],"time":19.407958984375,"type":"simplify"},{"compiler":[[14,9]],"time":0.3330078125,"type":"eval"},{"alts":[["(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","fresh",0.049718439275637495],["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))","next",0.04891250171767081]],"compiler":[[7,5],[8,6],[7,5],[8,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.03719375171767081],"time":1.158935546875,"type":"prune"},{"compiler":[[24,12]],"locations":[["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))",0.0489125017176708,true]],"time":6.72802734375,"type":"localize"},{"count":[[1,12]],"series":[["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))","x","-inf",0.2080078125],["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))","x","inf",0.216064453125],["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))","x","0",0.43505859375]],"time":0.909912109375,"type":"series"},{"count":[[1,40]],"inputs":[["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 0) (/.f64 (exp.f64 (*.f64 x x)) (E.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) (*.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))) (/.f64 (exp.f64 (*.f64 x x)) (E.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) (*.f64 0 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 (E.f64) (exp.f64 (*.f64 x x)))) (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) (/.f64 0 (/.f64 (E.f64) (exp.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 (neg.f64 (E.f64)) (exp.f64 (*.f64 x x)))) (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (E.f64)) (/.f64 -1 (exp.f64 (neg.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cbrt.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))))) (/.f64 -1 (pow.f64 (cbrt.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 -1) (/.f64 1 (exp.f64 (neg.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))) (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 -1) (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 2/3) (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x x)) (exp.f64 -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))) (pow.f64 (cbrt.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 2/3) (cbrt.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 -1) (exp.f64 (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 x x)) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 (E.f64)) (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (E.f64) (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (fma.f64 (neg.f64 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (fma.f64 x x -1))) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (fma.f64 x x -1) 2/3)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (+.f64 x -1)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x 1))) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (+.f64 x 1)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (fma.f64 x x -1) 3) 1/3))))))"]],"rules":[["egg-rr",40]],"time":21.405029296875,"type":"rewrite"},{"count":[[52,48]],"inputs":[["(exp.f64 -1)","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (exp.f64 -1))","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4)))))","(+.f64 (*.f64 1/6 (*.f64 (exp.f64 -1) (pow.f64 x 6))) (+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4))))))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(exp.f64 (-.f64 (pow.f64 x 2) 1))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 -1)","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (exp.f64 -1))","(/.f64 (fma.f64 x x 1) (E.f64))","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4)))))","(+.f64 (/.f64 (fma.f64 x x 1) (E.f64)) (*.f64 (/.f64 1/2 (E.f64)) (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (*.f64 (exp.f64 -1) (pow.f64 x 6))) (+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4))))))","(fma.f64 (/.f64 1/6 (E.f64)) (pow.f64 x 6) (+.f64 (/.f64 (fma.f64 x x 1) (E.f64)) (*.f64 (/.f64 1/2 (E.f64)) (pow.f64 x 4))))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (-.f64 (pow.f64 x 2) 1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))"]],"time":61.253173828125,"type":"simplify"},{"compiler":[[543,240]],"time":6.5,"type":"eval"},{"alts":[["(pow.f64 (E.f64) (fma.f64 x x -1))","next",0.04371025218312507],["(*.f64 (exp.f64 -1) (exp.f64 (*.f64 x x)))","fresh",0.04500625171767081],["(pow.f64 (exp.f64 (+.f64 x 1)) (+.f64 x -1))","fresh",0.05203878162065376]],"compiler":[[7,5],[8,6],[9,7],[7,5],[8,6],[9,7]],"count":[[50,3]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[48,3],"picked":[1,0]}],"min-error":[0.01297628162065376],"time":9.48095703125,"type":"prune"},{"compiler":[[14,8]],"locations":[["(pow.f64 (E.f64) (fma.f64 x x -1))",0.04371025218312507,true]],"time":5.10498046875,"type":"localize"},{"count":[[1,12]],"series":[["(pow.f64 (E.f64) (fma.f64 x x -1))","x","-inf",0.196044921875],["(pow.f64 (E.f64) (fma.f64 x x -1))","x","inf",0.2080078125],["(pow.f64 (E.f64) (fma.f64 x x -1))","x","0",0.745849609375]],"time":1.21484375,"type":"series"},{"count":[[1,36]],"inputs":[["(pow.f64 (E.f64) (fma.f64 x x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))) (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 2/3) (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)))) (pow.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)))) 4) (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)))) (neg.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x x)) (exp.f64 -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 -1) (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 (*.f64 x x))) (neg.f64 (E.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 x x)) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (fma.f64 x x -1) 2/3)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (fma.f64 x x -1))) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x -1)))) (pow.f64 (pow.f64 (fma.f64 x x -1) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 4)) (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (+.f64 (pow.f64 x 6) -1)) (/.f64 1 (+.f64 (pow.f64 x 4) (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (-.f64 1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 x) (E.f64)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (-.f64 1 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (+.f64 x -1)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (fma.f64 x x -1))))))"]],"rules":[["egg-rr",36]],"time":36.212158203125,"type":"rewrite"},{"count":[[48,43]],"inputs":[["(exp.f64 -1)","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (exp.f64 -1))","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4)))))","(+.f64 (*.f64 1/6 (*.f64 (exp.f64 -1) (pow.f64 x 6))) (+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4))))))","(exp.f64 (fma.f64 x x -1))","(exp.f64 (fma.f64 x x -1))","(exp.f64 (fma.f64 x x -1))","(exp.f64 (fma.f64 x x -1))","(exp.f64 (fma.f64 x x -1))","(exp.f64 (fma.f64 x x -1))","(exp.f64 (fma.f64 x x -1))","(exp.f64 (fma.f64 x x -1))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 -1)","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (exp.f64 -1))","(/.f64 (fma.f64 x x 1) (E.f64))","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4)))))","(+.f64 (/.f64 (fma.f64 x x 1) (E.f64)) (*.f64 (/.f64 1/2 (E.f64)) (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (*.f64 (exp.f64 -1) (pow.f64 x 6))) (+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4))))))","(fma.f64 (/.f64 1/6 (E.f64)) (pow.f64 x 6) (+.f64 (/.f64 (fma.f64 x x 1) (E.f64)) (*.f64 (/.f64 1/2 (E.f64)) (pow.f64 x 4))))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (fma.f64 x x -1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))"]],"time":59.1279296875,"type":"simplify"},{"compiler":[[486,242]],"time":6.533935546875,"type":"eval"},{"alts":[["(pow.f64 (exp.f64 (-.f64 1 (*.f64 x x))) -1)","next",0.03724716943992501],["(pow.f64 (exp.f64 (+.f64 x 1)) (+.f64 x -1))","fresh",0.05203878162065376],["(pow.f64 (E.f64) (fma.f64 x x -1))","done",0.04371025218312507]],"compiler":[[9,7],[9,7],[7,5],[9,7],[9,7]],"count":[[46,3]],"kept":[{"done":[0,0],"fresh":[2,1],"new":[43,1],"picked":[1,1]}],"min-error":[0.01297628162065376],"time":7.591064453125,"type":"prune"},{"compiler":[[26,14]],"locations":[["(exp.f64 (-.f64 1 (*.f64 x x)))",0.03810502930532605,true]],"time":6.60498046875,"type":"localize"},{"count":[[1,12]],"series":[["(exp.f64 (-.f64 1 (*.f64 x x)))","x","-inf",0.14892578125],["(exp.f64 (-.f64 1 (*.f64 x x)))","x","inf",0.197998046875],["(exp.f64 (-.f64 1 (*.f64 x x)))","x","0",0.31591796875]],"time":0.708984375,"type":"series"},{"count":[[1,45]],"inputs":[["(exp.f64 (-.f64 1 (*.f64 x x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) (*.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) 0) (/.f64 (E.f64) (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) (*.f64 0 (/.f64 (E.f64) (exp.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (E.f64) (exp.f64 (*.f64 x x)))) (/.f64 (E.f64) (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))) (/.f64 (neg.f64 (E.f64)) (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) (/.f64 0 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (E.f64)) (/.f64 1 (neg.f64 (exp.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (exp.f64 (*.f64 x x)))) (/.f64 (E.f64) (pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (E.f64)) 1) (/.f64 (cbrt.f64 (*.f64 (E.f64) (E.f64))) (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x)))) (pow.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) 2/3) (cbrt.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (E.f64) (exp.f64 (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 (*.f64 x x))) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (neg.f64 (E.f64)) (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (E.f64)) (exp.f64 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (E.f64) (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (E.f64)) (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) 2/3) (cbrt.f64 (E.f64))) (cbrt.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (E.f64)) (pow.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) 2/3)) (cbrt.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (E.f64)) 1) (neg.f64 (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (E.f64) (cbrt.f64 (exp.f64 (*.f64 x x)))) (pow.f64 (cbrt.f64 (exp.f64 (*.f64 x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (/.f64 1 (+.f64 (pow.f64 x 4) (fma.f64 x x 1)))) (exp.f64 (/.f64 (pow.f64 x 6) (+.f64 (pow.f64 x 4) (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (E.f64) (exp.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (fma.f64 (neg.f64 x) x 1) 2/3)) (cbrt.f64 (fma.f64 (neg.f64 x) x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (+.f64 1 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (+.f64 -1 x)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (fma.f64 (neg.f64 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (fma.f64 (neg.f64 x) x 1))) (pow.f64 (fma.f64 (neg.f64 x) x 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (-.f64 1 (pow.f64 x 6))) (/.f64 1 (+.f64 (pow.f64 x 4) (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 (*.f64 x x)) (E.f64)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 (E.f64)) (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (E.f64) (neg.f64 (exp.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (E.f64) (exp.f64 (*.f64 x x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (fma.f64 (neg.f64 x) x 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (fma.f64 (neg.f64 x) x 1) 3) 1/3))))))"]],"rules":[["egg-rr",45]],"time":21.404052734375,"type":"rewrite"},{"count":[[57,54]],"inputs":[["(exp.f64 1)","(+.f64 (*.f64 -1 (*.f64 (exp.f64 1) (pow.f64 x 2))) (exp.f64 1))","(+.f64 (*.f64 -1 (*.f64 (exp.f64 1) (pow.f64 x 2))) (+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 x 4))) (exp.f64 1)))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 1) (pow.f64 x 6))) (+.f64 (*.f64 -1 (*.f64 (exp.f64 1) (pow.f64 x 2))) (+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 x 4))) (exp.f64 1))))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 1)","(E.f64)","(+.f64 (*.f64 -1 (*.f64 (exp.f64 1) (pow.f64 x 2))) (exp.f64 1))","(fma.f64 (neg.f64 (E.f64)) (*.f64 x x) (E.f64))","(+.f64 (*.f64 -1 (*.f64 (exp.f64 1) (pow.f64 x 2))) (+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 x 4))) (exp.f64 1)))","(fma.f64 (neg.f64 (E.f64)) (*.f64 x x) (fma.f64 (*.f64 1/2 (E.f64)) (pow.f64 x 4) (E.f64)))","(+.f64 (*.f64 -1/6 (*.f64 (exp.f64 1) (pow.f64 x 6))) (+.f64 (*.f64 -1 (*.f64 (exp.f64 1) (pow.f64 x 2))) (+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 x 4))) (exp.f64 1))))","(+.f64 (*.f64 (E.f64) (-.f64 (*.f64 (pow.f64 x 6) -1/6) (*.f64 x x))) (fma.f64 (*.f64 1/2 (E.f64)) (pow.f64 x 4) (E.f64)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(/.f64 (E.f64) (exp.f64 (*.f64 x x)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(/.f64 (E.f64) (exp.f64 (*.f64 x x)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(/.f64 (E.f64) (exp.f64 (*.f64 x x)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(/.f64 (E.f64) (exp.f64 (*.f64 x x)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(/.f64 (E.f64) (exp.f64 (*.f64 x x)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(/.f64 (E.f64) (exp.f64 (*.f64 x x)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(/.f64 (E.f64) (exp.f64 (*.f64 x x)))","(exp.f64 (-.f64 1 (pow.f64 x 2)))","(/.f64 (E.f64) (exp.f64 (*.f64 x x)))"]],"time":58.7099609375,"type":"simplify"},{"compiler":[[727,378]],"time":9.468994140625,"type":"eval"},{"alts":[["(pow.f64 (exp.f64 (-.f64 1 (*.f64 x x))) -1)","done",0.03724716943992501],["(pow.f64 (exp.f64 (+.f64 x 1)) (+.f64 x -1))","next",0.05203878162065376],["(pow.f64 (E.f64) (fma.f64 x x -1))","done",0.04371025218312507]],"compiler":[[9,7],[9,7],[7,5],[9,7]],"count":[[57,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[54,0],"picked":[1,1]}],"min-error":[0.01297628162065376],"time":10.68994140625,"type":"prune"},{"compiler":[[22,16]],"locations":[["(exp.f64 (+.f64 x 1))",0.03125,true],["(pow.f64 (exp.f64 (+.f64 x 1)) (+.f64 x -1))",0.03250753162065376,true]],"time":6.861083984375,"type":"localize"},{"count":[[2,24]],"series":[["(exp.f64 (+.f64 x 1))","x","-inf",0.155029296875],["(exp.f64 (+.f64 x 1))","x","inf",0.168212890625],["(exp.f64 (+.f64 x 1))","x","0",0.64599609375],["(pow.f64 (exp.f64 (+.f64 x 1)) (+.f64 x -1))","x","-inf",0.302978515625],["(pow.f64 (exp.f64 (+.f64 x 1)) (+.f64 x -1))","x","inf",0.410888671875],["(pow.f64 (exp.f64 (+.f64 x 1)) (+.f64 x -1))","x","0",0.615966796875]],"time":2.386962890625,"type":"series"},{"count":[[2,56]],"inputs":[["(pow.f64 (exp.f64 (+.f64 x 1)) (+.f64 x -1))","(exp.f64 (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)) 0) (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)) (*.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))) (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)) (*.f64 0 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))) (pow.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)) 2/3) (cbrt.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (fma.f64 x x x)) (exp.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (-.f64 -1 x)) (exp.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (+.f64 1 x))) (*.f64 (pow.f64 (+.f64 1 x) 2/3) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 (+.f64 1 x) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 (+.f64 1 x) (+.f64 x -1)))) (pow.f64 (cbrt.f64 (*.f64 (+.f64 1 x) (+.f64 x -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (+.f64 x -1)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 (+.f64 1 x) (cbrt.f64 (+.f64 x -1)))) (pow.f64 (+.f64 x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 1 x) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (*.f64 (+.f64 1 x) (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (+.f64 1 x) (+.f64 x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 (+.f64 1 x) (+.f64 x -1)) 3) 1/3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (E.f64) (exp.f64 x)) 0) (*.f64 (E.f64) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (E.f64) (exp.f64 x)) (*.f64 (*.f64 (E.f64) (exp.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (E.f64) (exp.f64 x))) (*.f64 (E.f64) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (E.f64) (exp.f64 x)) (*.f64 0 (*.f64 (E.f64) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (E.f64) (exp.f64 x))) (pow.f64 (*.f64 (E.f64) (exp.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) 2/3) (cbrt.f64 (*.f64 (E.f64) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (E.f64) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 x) (E.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (E.f64) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (E.f64) (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (E.f64) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (E.f64) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (E.f64) (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 x) (exp.f64 -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (E.f64) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (+.f64 1 x) 2/3)) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (+.f64 1 x))) (pow.f64 (+.f64 1 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (+.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (E.f64) (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (E.f64) (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (E.f64) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (E.f64) (exp.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (+.f64 1 x) 3) 1/3))))))"]],"rules":[["egg-rr",28],["egg-rr",28]],"time":24.76708984375,"type":"rewrite"},{"count":[[80,74]],"inputs":[["(exp.f64 -1)","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (exp.f64 -1))","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4)))))","(+.f64 (*.f64 1/6 (*.f64 (exp.f64 -1) (pow.f64 x 6))) (+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4))))))","(exp.f64 (*.f64 (+.f64 1 x) (-.f64 x 1)))","(exp.f64 (*.f64 (+.f64 1 x) (-.f64 x 1)))","(exp.f64 (*.f64 (+.f64 1 x) (-.f64 x 1)))","(exp.f64 (*.f64 (+.f64 1 x) (-.f64 x 1)))","(exp.f64 (*.f64 -1 (*.f64 (-.f64 1 (*.f64 -1 x)) (+.f64 1 (*.f64 -1 x)))))","(exp.f64 (*.f64 -1 (*.f64 (-.f64 1 (*.f64 -1 x)) (+.f64 1 (*.f64 -1 x)))))","(exp.f64 (*.f64 -1 (*.f64 (-.f64 1 (*.f64 -1 x)) (+.f64 1 (*.f64 -1 x)))))","(exp.f64 (*.f64 -1 (*.f64 (-.f64 1 (*.f64 -1 x)) (+.f64 1 (*.f64 -1 x)))))","(exp.f64 1)","(+.f64 (*.f64 x (exp.f64 1)) (exp.f64 1))","(+.f64 (*.f64 x (exp.f64 1)) (+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 x 2))) (exp.f64 1)))","(+.f64 (*.f64 x (exp.f64 1)) (+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 x 2))) (+.f64 (*.f64 1/6 (*.f64 (exp.f64 1) (pow.f64 x 3))) (exp.f64 1))))","(exp.f64 (+.f64 1 x))","(exp.f64 (+.f64 1 x))","(exp.f64 (+.f64 1 x))","(exp.f64 (+.f64 1 x))","(exp.f64 (-.f64 1 (*.f64 -1 x)))","(exp.f64 (-.f64 1 (*.f64 -1 x)))","(exp.f64 (-.f64 1 (*.f64 -1 x)))","(exp.f64 (-.f64 1 (*.f64 -1 x)))"]],"method":["egg-herbie"],"outputs":[["(exp.f64 -1)","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (exp.f64 -1))","(+.f64 (/.f64 (*.f64 x x) (E.f64)) (exp.f64 -1))","(+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4)))))","(+.f64 (/.f64 (*.f64 x x) (E.f64)) (fma.f64 (/.f64 1/2 (E.f64)) (pow.f64 x 4) (exp.f64 -1)))","(+.f64 (*.f64 1/6 (*.f64 (exp.f64 -1) (pow.f64 x 6))) (+.f64 (*.f64 (exp.f64 -1) (pow.f64 x 2)) (+.f64 (exp.f64 -1) (*.f64 1/2 (*.f64 (exp.f64 -1) (pow.f64 x 4))))))","(+.f64 (fma.f64 (/.f64 1/6 (E.f64)) (pow.f64 x 6) (/.f64 (*.f64 x x) (E.f64))) (fma.f64 (/.f64 1/2 (E.f64)) (pow.f64 x 4) (exp.f64 -1)))","(exp.f64 (*.f64 (+.f64 1 x) (-.f64 x 1)))","(pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))","(exp.f64 (*.f64 (+.f64 1 x) (-.f64 x 1)))","(pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))","(exp.f64 (*.f64 (+.f64 1 x) (-.f64 x 1)))","(pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))","(exp.f64 (*.f64 (+.f64 1 x) (-.f64 x 1)))","(pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))","(exp.f64 (*.f64 -1 (*.f64 (-.f64 1 (*.f64 -1 x)) (+.f64 1 (*.f64 -1 x)))))","(pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))","(exp.f64 (*.f64 -1 (*.f64 (-.f64 1 (*.f64 -1 x)) (+.f64 1 (*.f64 -1 x)))))","(pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))","(exp.f64 (*.f64 -1 (*.f64 (-.f64 1 (*.f64 -1 x)) (+.f64 1 (*.f64 -1 x)))))","(pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))","(exp.f64 (*.f64 -1 (*.f64 (-.f64 1 (*.f64 -1 x)) (+.f64 1 (*.f64 -1 x)))))","(pow.f64 (*.f64 (E.f64) (exp.f64 x)) (+.f64 x -1))","(exp.f64 1)","(E.f64)","(+.f64 (*.f64 x (exp.f64 1)) (exp.f64 1))","(fma.f64 x (E.f64) (E.f64))","(+.f64 (*.f64 x (exp.f64 1)) (+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 x 2))) (exp.f64 1)))","(fma.f64 x (E.f64) (fma.f64 (*.f64 1/2 (E.f64)) (*.f64 x x) (E.f64)))","(+.f64 (*.f64 x (exp.f64 1)) (+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 x 2))) (+.f64 (*.f64 1/6 (*.f64 (exp.f64 1) (pow.f64 x 3))) (exp.f64 1))))","(fma.f64 x (E.f64) (fma.f64 (*.f64 1/2 (E.f64)) (*.f64 x x) (fma.f64 (*.f64 1/6 (E.f64)) (pow.f64 x 3) (E.f64))))","(exp.f64 (+.f64 1 x))","(*.f64 (E.f64) (exp.f64 x))","(exp.f64 (+.f64 1 x))","(*.f64 (E.f64) (exp.f64 x))","(exp.f64 (+.f64 1 x))","(*.f64 (E.f64) (exp.f64 x))","(exp.f64 (+.f64 1 x))","(*.f64 (E.f64) (exp.f64 x))","(exp.f64 (-.f64 1 (*.f64 -1 x)))","(*.f64 (E.f64) (exp.f64 x))","(exp.f64 (-.f64 1 (*.f64 -1 x)))","(*.f64 (E.f64) (exp.f64 x))","(exp.f64 (-.f64 1 (*.f64 -1 x)))","(*.f64 (E.f64) (exp.f64 x))","(exp.f64 (-.f64 1 (*.f64 -1 x)))","(*.f64 (E.f64) (exp.f64 x))"]],"time":77.906005859375,"type":"simplify"},{"compiler":[[937,582]],"time":13.369873046875,"type":"eval"},{"alts":[["(pow.f64 (exp.f64 (-.f64 1 (*.f64 x x))) -1)","done",0.03724716943992501],["(pow.f64 (exp.f64 (+.f64 x 1)) (+.f64 x -1))","done",0.05203878162065376],["(pow.f64 (E.f64) (fma.f64 x x -1))","done",0.04371025218312507]],"compiler":[[9,7],[9,7],[7,5]],"count":[[77,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[74,0],"picked":[1,1]}],"min-error":[0.01297628162065376],"time":15.59814453125,"type":"prune"},{"accuracy":[0.03724716943992501],"baseline":[0.03724716943992501],"branch":[["x",0.03724716943992501,1],["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))",0.03724716943992501,1],["(neg.f64 (-.f64 1 (*.f64 x x)))",0.03724716943992501,1],["(-.f64 1 (*.f64 x x))",0.03724716943992501,1],["(*.f64 x x)",0.03724716943992501,1]],"compiler":[[2,1],[8,6],[7,5],[6,4],[4,2],[43,26]],"count":[[6,1]],"inputs":[["(pow.f64 (exp.f64 (-.f64 1 (*.f64 x x))) -1)","(pow.f64 (E.f64) (fma.f64 x x -1))","(*.f64 (exp.f64 -1) (exp.f64 (*.f64 x x)))","(pow.f64 (exp.f64 (+.f64 x 1)) (+.f64 x -1))","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))","(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))"]],"link":["."],"name":["exp neg sub"],"oracle":[0.08277275218312508],"outputs":[["(pow.f64 (exp.f64 (-.f64 1 (*.f64 x x))) -1)"]],"time":12.0048828125,"times":[["x",3.468994140625],["(exp.f64 (neg.f64 (-.f64 1 (*.f64 x x))))",1.7919921875],["(neg.f64 (-.f64 1 (*.f64 x x)))",1.720947265625],["(-.f64 1 (*.f64 x x))",1.829833984375],["(*.f64 x x)",2.01416015625]],"type":"regimes"},{"compiler":[[9,7]],"inputs":[["(pow.f64 (exp.f64 (-.f64 1 (*.f64 x x))) -1)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (exp.f64 (-.f64 1 (*.f64 x x))) -1)","(/.f64 (exp.f64 (*.f64 x x)) (E.f64))"]],"stop":[["done",1]],"time":18.323974609375,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[9,7]],"remove-preprocessing":[[]],"time":9.031982421875,"type":"end"}]
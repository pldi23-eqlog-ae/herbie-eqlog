[{"compiler":[[37,28]],"method":["search"],"sampling":[[12,2.793967723814632e-12,1.8626451492097546e-13,0.9999999999970197],[11,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[10,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[9,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[8,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[7,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[6,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[5,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[4,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[3,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[2,0.0,2.9802322387356077e-12,0.9999999999970197],[1,0.0,2.9802322387356077e-12,0.9999999999970197],[0,0.0,2.9802322387356077e-12,0.9999999999970197]],"time":42.1689453125,"type":"analyze"},{"outcomes":[["body",256,"valid",679.68701171875,8256]],"time":687.133056640625,"type":"sample"},{"compiler":[[14,11]],"inputs":[["0","1","2"],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 cosTheta_i (-.f64 1 cosTheta_i))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 cosTheta_i)))","(*.f64 (sqrt.f64 (/.f64 u2 (-.f64 1 u2))) (sin.f64 (*.f64 314159265359/50000000000 u1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 cosTheta_i (-.f64 1 cosTheta_i))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 cosTheta_i)))","(*.f64 (sqrt.f64 (/.f64 u2 (-.f64 1 u2))) (sin.f64 (*.f64 314159265359/50000000000 u1)))"]],"symmetry":[[]],"time":73.40087890625,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))"]],"time":19.166015625,"type":"simplify"},{"compiler":[[14,11]],"time":0.28515625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","next",0.5196076172213042]],"compiler":[[14,11],[14,11]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.5196076172213042],"time":0.8359375,"type":"prune"},{"compiler":[[39,27]],"locations":[["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))",0.11328125,true],["(/.f64 u1 (-.f64 1 u1))",0.1796875,true],["(sin.f64 (*.f64 314159265359/50000000000 u2))",0.25132753907376804,true],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))",0.33203125,true]],"time":11.071044921875,"type":"localize"},{"count":[[4,28]],"series":[["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))","u1","-inf",0.30712890625],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))","u1","inf",0.759765625],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))","u1","0",0.328125],["(/.f64 u1 (-.f64 1 u1))","u1","-inf",0.176025390625],["(/.f64 u1 (-.f64 1 u1))","u1","inf",0.30615234375],["(/.f64 u1 (-.f64 1 u1))","u1","0",0.200927734375],["(sin.f64 (*.f64 314159265359/50000000000 u2))","u2","-inf",0.140869140625],["(sin.f64 (*.f64 314159265359/50000000000 u2))","u2","inf",0.14306640625],["(sin.f64 (*.f64 314159265359/50000000000 u2))","u2","0",0.244140625],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","-inf",0.323974609375],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","inf",0.788818359375],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","0",0.671142578125],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","-inf",0.531982421875],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","inf",0.7158203125],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","0",0.972900390625]],"time":6.843994140625,"type":"series"},{"count":[[4,171]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(sin.f64 (*.f64 314159265359/50000000000 u2))","(/.f64 u1 (-.f64 1 u1))","(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 0) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1/2) (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 0 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (cbrt.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2))) (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2)) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (neg.f64 u1))) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 0) (sin.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 1/2) (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 (*.f64 314159265359/50000000000 u2))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 1/2 (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (*.f64 0 (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2)) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 (*.f64 314159265359/50000000000 u2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) 0) (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) 1/2) (*.f64 (/.f64 u1 (-.f64 1 u1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 (/.f64 u1 (-.f64 1 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 u1 (-.f64 1 u1))) (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 u1 (-.f64 1 u1))) (*.f64 1/2 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 0 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 -1 u1)) (/.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u1 (/.f64 1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2)) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 u1)) u1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 u1) (/.f64 (cbrt.f64 (*.f64 u1 u1)) (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (sqrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 u1) (/.f64 1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 1 u1))) (/.f64 u1 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 u1 u1)) (-.f64 1 u1)) (cbrt.f64 u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 -1 u1)) (neg.f64 u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (+.f64 -1 u1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2))) (cbrt.f64 (/.f64 1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (cbrt.f64 (-.f64 1 u1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 0) (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 u1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 u1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 u1 (-.f64 1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 u1) (+.f64 -1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (-.f64 1 u1))) u1) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2)) (cbrt.f64 (neg.f64 u1))) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2)) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 1) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 u1)) (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2))) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 u1) (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 u1) (cbrt.f64 (-.f64 1 u1))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 1) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 -1) (+.f64 -1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (-.f64 1 (pow.f64 u1 3))) (/.f64 1 (fma.f64 (+.f64 1 u1) u1 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 u1 (+.f64 -1 u1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 u1 (-.f64 1 u1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 0) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 1/2) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 1/2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 0 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (fabs.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 0) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cbrt.f64 (neg.f64 u1))) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 u1)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 u1) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))))"]],"rules":[["egg-rr",45],["egg-rr",71],["egg-rr",21],["egg-rr",34]],"time":36.130859375,"type":"rewrite"},{"count":[[199,199]],"inputs":[["(*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 7) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 314159265359/50000000000 u2)","(+.f64 (*.f64 314159265359/50000000000 u2) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3)))","(+.f64 (*.f64 314159265359/50000000000 u2) (+.f64 (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3)) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5))))","(+.f64 (*.f64 -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 7)) (+.f64 (*.f64 314159265359/50000000000 u2) (+.f64 (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3)) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5)))))","u1","(+.f64 (pow.f64 u1 2) u1)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","-1","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","-1","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3) (*.f64 314159265359/50000000000 u2)))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))","(fma.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5)))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 7) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","(+.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 (pow.f64 u2 7) -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (*.f64 314159265359/50000000000 u2))) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5)))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 314159265359/50000000000 u2)","(+.f64 (*.f64 314159265359/50000000000 u2) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3)))","(fma.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3) (*.f64 314159265359/50000000000 u2))","(+.f64 (*.f64 314159265359/50000000000 u2) (+.f64 (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3)) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5))))","(fma.f64 314159265359/50000000000 u2 (fma.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5))))","(+.f64 (*.f64 -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (pow.f64 u2 7)) (+.f64 (*.f64 314159265359/50000000000 u2) (+.f64 (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3)) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5)))))","(fma.f64 (pow.f64 u2 7) -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (fma.f64 314159265359/50000000000 u2 (fma.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5)))))","u1","(+.f64 (pow.f64 u1 2) u1)","(fma.f64 u1 u1 u1)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(+.f64 (fma.f64 u1 u1 (pow.f64 u1 3)) u1)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","(+.f64 (+.f64 u1 (pow.f64 u1 3)) (fma.f64 u1 u1 (pow.f64 u1 4)))","-1","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(+.f64 -1 (/.f64 -1 u1))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(-.f64 -1 (+.f64 (pow.f64 u1 -2) (/.f64 1 u1)))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","(-.f64 -1 (+.f64 (pow.f64 u1 -2) (+.f64 (pow.f64 u1 -3) (/.f64 1 u1))))","-1","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(+.f64 -1 (/.f64 -1 u1))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(-.f64 -1 (+.f64 (pow.f64 u1 -2) (/.f64 1 u1)))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","(-.f64 -1 (+.f64 (pow.f64 u1 -2) (+.f64 (pow.f64 u1 -3) (/.f64 1 u1))))"]],"time":92.80908203125,"type":"simplify"},{"compiler":[[3569,2734]],"time":49.14892578125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","next",0.5220975778487077],["(*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","fresh",0.604498896227802],["(*.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5303688965266303],["(*.f64 (pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2) 1/3) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",1.3911776720449591],["(*.f64 (sqrt.f64 (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (cbrt.f64 (-.f64 1 u1)) -2))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5813550973855919],["(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5328588571540339],["(*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","fresh",0.5911589059962441],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 3) 1/3))","fresh",2.9463511402252474],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) 3)","fresh",0.9231442993480814],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))","fresh",0.6700364258319566],["(*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2)) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)))))","fresh",0.6749065062948204],["(*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2))) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5319901367581883],["(*.f64 (pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2) 1/4) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5305738473855918],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 (pow.f64 u2 7) -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (fma.f64 314159265359/50000000000 u2 (fma.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5))))))","fresh",6.52269348146455]],"compiler":[[27,21],[23,18],[16,13],[17,14],[22,18],[24,19],[22,17],[18,15],[17,14],[23,18],[23,19],[22,18],[17,14],[28,22],[27,21],[23,18],[16,13],[17,14],[22,18],[24,19],[22,17],[18,15],[17,14],[23,18],[23,19],[22,18],[17,14],[28,22]],"count":[[200,14]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[199,14],"picked":[1,0]}],"min-error":[0.034403730164287515],"time":56.383056640625,"type":"prune"},{"compiler":[[119,75]],"locations":[["(/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))",0.296875,true],["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))",0.33203125,true],["(*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1)))",0.3359375,true],["(pow.f64 (-.f64 1 u1) 2)",0.45703125,true]],"time":28.714111328125,"type":"localize"},{"count":[[4,44]],"series":[["(/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))","u1","-inf",0.239013671875],["(/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))","u1","inf",0.156982421875],["(/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))","u1","0",0.156982421875],["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","-inf",0.18310546875],["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","inf",0.169921875],["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","0",0.2421875],["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","-inf",0.906982421875],["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","inf",0.72607421875],["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","0",0.28515625],["(*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1)))","u1","-inf",0.5859375],["(*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1)))","u1","inf",0.473876953125],["(*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1)))","u1","0",0.333984375],["(pow.f64 (-.f64 1 u1) 2)","u1","-inf",0.239990234375],["(pow.f64 (-.f64 1 u1) 2)","u1","inf",0.259033203125],["(pow.f64 (-.f64 1 u1) 2)","u1","0",0.30615234375]],"time":5.512939453125,"type":"series"},{"count":[[4,266]],"inputs":[["(pow.f64 (-.f64 1 u1) 2)","(*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1)))","(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 u1) (*.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 u1 (+.f64 -1 u1)) (-.f64 1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 (neg.f64 u1) (*.f64 u1 (+.f64 -1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 u1) (+.f64 1 (*.f64 u1 (+.f64 -1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 1 u1) 2) (*.f64 (pow.f64 (-.f64 1 u1) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 1 u1) 2) 1/2) (*.f64 (pow.f64 (-.f64 1 u1) 2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (-.f64 1 u1) 2) 0) (pow.f64 (-.f64 1 u1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 -1 u1) u1) (*.f64 (+.f64 -1 u1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 -1 u1) -1) (*.f64 (+.f64 -1 u1) u1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (-.f64 1 u1) 2) (*.f64 0 (pow.f64 (-.f64 1 u1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (pow.f64 (-.f64 1 u1) 2)) (*.f64 1/2 (pow.f64 (-.f64 1 u1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (-.f64 1 u1) 2)) (pow.f64 (-.f64 1 u1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 u1) (*.f64 (*.f64 u1 (+.f64 -1 u1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (+.f64 -1 u1) (*.f64 u1 (+.f64 -1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 u1 u1 (+.f64 1 u1))) (-.f64 (/.f64 (pow.f64 u1 3) (fma.f64 u1 u1 (+.f64 1 u1))) (*.f64 u1 (+.f64 -1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 u1 (*.f64 u1 (+.f64 -1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (-.f64 1 u1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)) (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 u1)) (pow.f64 (cbrt.f64 (-.f64 1 u1)) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (-.f64 1 u1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u1) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 u1) (-.f64 1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u1) 2/3) (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 u1) (+.f64 -1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (-.f64 1 u1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (pow.f64 u1 3)) 2) (*.f64 (/.f64 1 (fma.f64 u1 u1 (+.f64 1 u1))) (/.f64 1 (fma.f64 u1 u1 (+.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -1 u1) -1) (*.f64 (+.f64 -1 u1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 u1) (-.f64 1 (pow.f64 u1 3))) (/.f64 1 (fma.f64 u1 u1 (+.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (pow.f64 u1 3)) 2) (/.f64 1 (pow.f64 (fma.f64 u1 u1 (+.f64 1 u1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 u1) (-.f64 1 (pow.f64 u1 3))) (fma.f64 u1 u1 (+.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 1 (pow.f64 u1 3)) 2) (pow.f64 (fma.f64 u1 u1 (+.f64 1 u1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 u1) (+.f64 -1 (pow.f64 u1 3))) (fma.f64 u1 u1 (+.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (-.f64 1 u1) (-.f64 1 (pow.f64 u1 3)))) (fma.f64 u1 u1 (+.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 1 u1) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 u1) (+.f64 -1 (pow.f64 u1 3))) (neg.f64 (fma.f64 u1 u1 (+.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 u1 3)) (+.f64 -1 u1)) (fma.f64 u1 u1 (+.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 u1) (-.f64 1 (pow.f64 u1 3))) 1) (fma.f64 u1 u1 (+.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 (pow.f64 u1 3)) 2) 1) (pow.f64 (fma.f64 u1 u1 (+.f64 1 u1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 u1 3))) (pow.f64 (cbrt.f64 (-.f64 1 u1)) (+.f64 2 3))) (cbrt.f64 (fma.f64 u1 u1 (+.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 u1 3)) (-.f64 1 u1)) (neg.f64 (fma.f64 u1 u1 (+.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 u1) (-.f64 1 (pow.f64 u1 3))) (cbrt.f64 (fma.f64 u1 u1 (+.f64 1 u1)))) (cbrt.f64 (pow.f64 (fma.f64 u1 u1 (+.f64 1 u1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 u1) (-.f64 1 (pow.f64 u1 3))) 1) (fma.f64 u1 u1 (+.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 u1) (-.f64 1 (pow.f64 u1 3))) 1) (*.f64 (fma.f64 u1 u1 (+.f64 1 u1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 (pow.f64 u1 3)) 2) 1) (*.f64 (pow.f64 (fma.f64 u1 u1 (+.f64 1 u1)) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 u1 3)) (+.f64 -1 (pow.f64 u1 3))) (*.f64 (fma.f64 u1 u1 (+.f64 1 u1)) (neg.f64 (fma.f64 u1 u1 (+.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 u1 3)) (-.f64 1 (pow.f64 u1 3))) (*.f64 (neg.f64 (fma.f64 u1 u1 (+.f64 1 u1))) (fma.f64 u1 u1 (+.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (-.f64 1 (pow.f64 u1 3)) 2) (*.f64 (neg.f64 (fma.f64 u1 u1 (+.f64 1 u1))) (neg.f64 (fma.f64 u1 u1 (+.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 1 u1) (-.f64 1 (pow.f64 u1 3)))) (neg.f64 (fma.f64 u1 u1 (+.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (-.f64 1 (pow.f64 u1 3)) 2)) (neg.f64 (pow.f64 (fma.f64 u1 u1 (+.f64 1 u1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 u1) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 u1) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 u1) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 u1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 -1 u1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 u1) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 u1)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 u1) 2/3) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 u1) 2/3) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 u1) 2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 u1) 2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (-.f64 1 u1) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 u1) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 u1)) (pow.f64 (-.f64 1 u1) 2/3) (*.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 u1) (*.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 u1 3)) (/.f64 1 (fma.f64 u1 u1 (+.f64 1 u1))) (*.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 -1 u1) (*.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 u1) 1 (*.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 u1) 2/3) (cbrt.f64 (-.f64 1 u1)) (*.f64 u1 (+.f64 -1 u1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 1/2) (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 0) (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (*.f64 0 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (*.f64 1/2 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 u1 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 u1 4)) (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 u1 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 u1 2/3) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 u1 u1) (-.f64 1 u1))) (cbrt.f64 u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3)) (pow.f64 u1 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 u1) (cbrt.f64 (/.f64 (*.f64 u1 u1) (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 u1 2/3) (cbrt.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u1 (pow.f64 (-.f64 1 u1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1)))) (neg.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 u1 2/3)) (cbrt.f64 (/.f64 u1 (+.f64 -1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (+.f64 -1 u1))) (neg.f64 (pow.f64 u1 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cbrt.f64 (neg.f64 u1))) (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cbrt.f64 (neg.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cbrt.f64 u1)) (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cbrt.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 u1)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 (cbrt.f64 (neg.f64 u1)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 u1) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 (cbrt.f64 u1) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 u1 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 u1 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 u1 (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 u1) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 u1 2/3) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 u1 2/3) (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))))) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 u1)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3)) (pow.f64 u1 2/3))) (cbrt.f64 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 u1 2/3)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1)))) (pow.f64 u1 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1/2) (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 0) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 0 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2/3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 2/3) (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)))) (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (neg.f64 u1))) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))))) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 (/.f64 u1 (-.f64 1 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) 1/2) (*.f64 (/.f64 u1 (-.f64 1 u1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) 0) (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 0 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 u1 (-.f64 1 u1))) (*.f64 1/2 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 u1 (-.f64 1 u1))) (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))) (/.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 -1 u1)) (/.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 u1) (/.f64 1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 u1) (/.f64 (pow.f64 u1 2/3) (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u1 (/.f64 -1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 -1 u1)) u1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)) (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (sqrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 u1 2/3) (/.f64 (cbrt.f64 u1) (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (/.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u1) -1/3) (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3) (cbrt.f64 (/.f64 (/.f64 u1 (-.f64 1 u1)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2))) (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) -1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) -1) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 1 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3)) (pow.f64 (-.f64 1 u1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (/.f64 u1 (+.f64 -1 u1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 0) (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (-.f64 1 u1) 2/3))) (/.f64 (pow.f64 u1 2/3) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 u1) (+.f64 -1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 u1 (-.f64 1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))) (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3) (cbrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (-.f64 1 u1) 2/3))) (pow.f64 u1 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)) u1) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (/.f64 (*.f64 u1 u1) (-.f64 1 u1)))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 u1) -1/3) u1) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2))) (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 (neg.f64 u1))) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))))) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (/.f64 (pow.f64 u1 2/3) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 u1)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3))) (cbrt.f64 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) 1) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3)) 1) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 u1 2/3) (cbrt.f64 (/.f64 (/.f64 u1 (-.f64 1 u1)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 u1 u1) (-.f64 1 u1))) (cbrt.f64 (/.f64 u1 (-.f64 1 u1)))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 u1)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3)) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1)))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) 1) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) -1) (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (-.f64 1 (pow.f64 u1 3))) (/.f64 1 (fma.f64 u1 u1 (+.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 -1) (+.f64 -1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) 1) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 u1 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)))) (*.f64 (cbrt.f64 (-.f64 1 u1)) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 u1 2/3) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 u1 2/3) (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))))) (*.f64 (pow.f64 (-.f64 1 u1) 2/3) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 u1 u1) (-.f64 1 u1))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (*.f64 (cbrt.f64 (-.f64 1 u1)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 u1 u1) (-.f64 1 u1))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))))) (*.f64 (cbrt.f64 (-.f64 1 u1)) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 u1)) (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3)) (*.f64 (cbrt.f64 (+.f64 -1 u1)) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 u1) (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3)) (*.f64 (cbrt.f64 (-.f64 1 u1)) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 u1 2/3)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (/.f64 (*.f64 u1 u1) (-.f64 1 u1)))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1)))) (pow.f64 u1 2/3)) (*.f64 (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))) (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1)))) (cbrt.f64 (/.f64 (*.f64 u1 u1) (-.f64 1 u1)))) (*.f64 (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2))) u1) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))) (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 u1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 u1 (+.f64 -1 u1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 u1 (-.f64 1 u1)))))))"]],"rules":[["egg-rr",115],["egg-rr",33],["egg-rr",47],["egg-rr",71]],"time":46.27099609375,"type":"rewrite"},{"count":[[310,295]],"inputs":[["1","(+.f64 1 (*.f64 -2 u1))","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","(pow.f64 u1 2)","(+.f64 (pow.f64 u1 2) (*.f64 -2 u1))","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","(pow.f64 u1 2)","(+.f64 (pow.f64 u1 2) (*.f64 -2 u1))","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","u1","(+.f64 (*.f64 1/3 (pow.f64 u1 2)) u1)","(+.f64 (*.f64 1/3 (pow.f64 u1 2)) (+.f64 (*.f64 2/9 (pow.f64 u1 3)) u1))","(+.f64 (*.f64 1/3 (pow.f64 u1 2)) (+.f64 (*.f64 2/9 (pow.f64 u1 3)) (+.f64 (*.f64 14/81 (pow.f64 u1 4)) u1)))","(*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))","(+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (cbrt.f64 -1))) (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (+.f64 (cbrt.f64 -1) (*.f64 1/2 (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 3)) (sqrt.f64 (/.f64 1 (cbrt.f64 -1))))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (cbrt.f64 -1))) (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))))","(*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 7) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","u1","(+.f64 (pow.f64 u1 2) u1)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","-1","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","(cbrt.f64 -1)","(+.f64 (cbrt.f64 -1) (/.f64 (cbrt.f64 -1) u1))","(+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1)))","(+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 3)) (+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1))))"]],"method":["egg-herbie"],"outputs":[["1","(E.f64)","(+.f64 1 (*.f64 -2 u1))","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","(E.f64)","(pow.f64 u1 2)","(E.f64)","(+.f64 (pow.f64 u1 2) (*.f64 -2 u1))","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","(E.f64)","(pow.f64 u1 2)","(E.f64)","(+.f64 (pow.f64 u1 2) (*.f64 -2 u1))","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 1 (*.f64 -2 u1)))","(E.f64)","u1","(E.f64)","(+.f64 (*.f64 1/3 (pow.f64 u1 2)) u1)","(E.f64)","(+.f64 (*.f64 1/3 (pow.f64 u1 2)) (+.f64 (*.f64 2/9 (pow.f64 u1 3)) u1))","(E.f64)","(+.f64 (*.f64 1/3 (pow.f64 u1 2)) (+.f64 (*.f64 2/9 (pow.f64 u1 3)) (+.f64 (*.f64 14/81 (pow.f64 u1 4)) u1)))","(E.f64)","(*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(E.f64)","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))","(E.f64)","(+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (cbrt.f64 -1))) (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))))","(E.f64)","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (+.f64 (cbrt.f64 -1) (*.f64 1/2 (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 3)) (sqrt.f64 (/.f64 1 (cbrt.f64 -1))))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (cbrt.f64 -1))) (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))))","(E.f64)","(*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(E.f64)","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(E.f64)","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))","(E.f64)","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 7) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","u1","(E.f64)","(+.f64 (pow.f64 u1 2) u1)","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","(E.f64)","-1","(E.f64)","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(E.f64)","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(E.f64)","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","(E.f64)","(cbrt.f64 -1)","(E.f64)","(+.f64 (cbrt.f64 -1) (/.f64 (cbrt.f64 -1) u1))","(E.f64)","(+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1)))","(E.f64)","(+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 3)) (+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1))))","(E.f64)"]],"time":396.35888671875,"type":"simplify"},{"compiler":[[7370,5533]],"time":90.447998046875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","done",0.5220975778487077],["(*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","fresh",0.604498896227802],["(*.f64 (sqrt.f64 (/.f64 (+.f64 (*.f64 1/3 (pow.f64 u1 2)) (+.f64 (*.f64 2/9 (pow.f64 u1 3)) u1)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",14.482968481847204],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 3) 1/3))","fresh",2.9463511402252474],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))","fresh",0.6573602051372825],["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)) u1) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5592451364593599],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","next",0.5056038574528623],["(*.f64 (sqrt.f64 (/.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5390501169224758],["(*.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5303688965266303],["(*.f64 (sqrt.f64 (/.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",1.103828380460847],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) 3)","fresh",0.9231442993480814],["(*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2)) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)))))","fresh",0.6749065062948204],["(*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","fresh",0.5911589059962441],["(*.f64 (pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2) 1/4) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5305738473855918],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 (pow.f64 u2 7) -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (fma.f64 314159265359/50000000000 u2 (fma.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5))))))","fresh",6.52269348146455]],"compiler":[[27,21],[23,18],[29,24],[18,15],[30,24],[22,18],[24,20],[30,25],[16,13],[24,19],[17,14],[23,19],[22,17],[17,14],[28,22],[23,18],[29,24],[18,15],[30,24],[22,18],[24,20],[30,25],[16,13],[24,19],[17,14],[23,19],[22,17],[17,14],[28,22]],"count":[[309,15]],"kept":[{"done":[0,0],"fresh":[13,8],"new":[295,6],"picked":[1,1]}],"min-error":[0.026591230164287515],"time":101.7490234375,"type":"prune"},{"compiler":[[100,78]],"locations":[["(/.f64 (pow.f64 u1 3) (-.f64 1 u1))",0.2734375,true],["(/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))",0.296875,true],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))",0.33203125,true],["(pow.f64 (-.f64 1 u1) 2)",0.45703125,false]],"time":26.76708984375,"type":"localize"},{"count":[[3,40]],"series":[["(/.f64 (pow.f64 u1 3) (-.f64 1 u1))","u1","-inf",0.17578125],["(/.f64 (pow.f64 u1 3) (-.f64 1 u1))","u1","inf",0.218994140625],["(/.f64 (pow.f64 u1 3) (-.f64 1 u1))","u1","0",0.239990234375],["(/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))","u1","-inf",0.180908203125],["(/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))","u1","inf",0.154052734375],["(/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))","u1","0",0.15380859375],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","-inf",0.18603515625],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","inf",0.1689453125],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","0",0.241943359375],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","-inf",0.3310546875],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","inf",0.2919921875],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","0",0.363037109375]],"time":2.906982421875,"type":"series"},{"count":[[3,193]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))","(/.f64 (pow.f64 u1 3) (-.f64 1 u1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1/2) (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 0) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 0 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2/3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 2/3) (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)))) (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))))) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) 1/2) (*.f64 (/.f64 u1 (-.f64 1 u1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 (/.f64 u1 (-.f64 1 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) 0) (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 u1 (-.f64 1 u1))) (*.f64 1/2 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 0 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 u1 (-.f64 1 u1))) (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))) (neg.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2))) (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) -1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) -1) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 1 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (-.f64 1 u1))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2) (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u1) -1/3) (cbrt.f64 (/.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (sqrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (/.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)) (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u1 (/.f64 1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3)) (pow.f64 (-.f64 1 u1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (/.f64 (/.f64 1 (-.f64 1 u1)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 0) (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (-.f64 1 u1)) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 u1) (/.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))) (cbrt.f64 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) 1) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 u1) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)))) (*.f64 (cbrt.f64 (+.f64 -1 u1)) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 u1 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)))) (*.f64 (cbrt.f64 (-.f64 1 u1)) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2))) u1) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))) (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2))) (neg.f64 u1)) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))) (cbrt.f64 (+.f64 -1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))) (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 u1 (-.f64 1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))))) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 u1) (+.f64 -1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2))) (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)) (neg.f64 u1)) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)) u1) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3)) 1) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) 1) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1)))) (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 u1) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 u1) (cbrt.f64 (pow.f64 (-.f64 1 u1) -2))) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 -1) (+.f64 -1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) 1) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (+.f64 -1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) -1) (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 u1) -1) (-.f64 1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 u1 (*.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (+.f64 -1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (-.f64 1 u1))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (-.f64 1 (pow.f64 u1 3))) (/.f64 1 (fma.f64 u1 u1 (+.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (-.f64 1 u1)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 u1 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 u1 (-.f64 1 u1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 u1 (-.f64 1 u1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 u1 (-.f64 1 u1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) 1/2) (*.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (*.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) 0) (/.f64 (pow.f64 u1 3) (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (*.f64 1/2 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (*.f64 0 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (/.f64 (pow.f64 u1 3) (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (pow.f64 u1 3) (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 -1 u1)) (/.f64 (pow.f64 u1 3) (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 u1 u1) (/.f64 u1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (*.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3) (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 u1 3)) (/.f64 1 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))) (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u1 (/.f64 (*.f64 u1 u1) (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 u1 3) (/.f64 1 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2) (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 1 u1)) (pow.f64 u1 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u1) -1/3) (/.f64 (pow.f64 u1 3) (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (pow.f64 u1 3) (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u1 3) (pow.f64 (-.f64 1 u1) 2/3)) (pow.f64 (-.f64 1 u1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 u1 3)) (+.f64 -1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 u1 3) (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 u1 3) (-.f64 1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 u1) -1/3) (pow.f64 u1 3)) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (*.f64 u1 u1)) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))) u1) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 u1 u1) (/.f64 u1 (cbrt.f64 (+.f64 -1 u1)))) (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 u1 u1) (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 u1 u1) (/.f64 u1 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 u1 u1) (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2) (neg.f64 u1)) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2) u1) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 u1 3) (pow.f64 (-.f64 1 u1) 2/3)) 1) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) 1) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 u1) (*.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3) (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2))) (cbrt.f64 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))) (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 u1) (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2)) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (pow.f64 u1 3)) (cbrt.f64 (-.f64 1 u1))) (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 u1 3) -1) (+.f64 -1 u1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 u1 3) (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) -1) (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) 1) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))) (neg.f64 u1)) (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 u1) (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (pow.f64 u1 3) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1)))) (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 u1 3) (+.f64 -1 u1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 (pow.f64 u1 3))) (/.f64 1 (fma.f64 u1 u1 (+.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 u1 3) (+.f64 -1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) 3))))))"]],"rules":[["egg-rr",68],["egg-rr",94],["egg-rr",31]],"time":39.220947265625,"type":"rewrite"},{"count":[[233,222]],"inputs":[["(*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))","(+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (cbrt.f64 -1))) (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (+.f64 (cbrt.f64 -1) (*.f64 1/2 (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 3)) (sqrt.f64 (/.f64 1 (cbrt.f64 -1))))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (cbrt.f64 -1))) (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))))","(*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 7) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","u1","(+.f64 (pow.f64 u1 2) u1)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","-1","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","(cbrt.f64 -1)","(+.f64 (cbrt.f64 -1) (/.f64 (cbrt.f64 -1) u1))","(+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1)))","(+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 3)) (+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1))))","(pow.f64 u1 3)","(+.f64 (pow.f64 u1 4) (pow.f64 u1 3))","(+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 5) (pow.f64 u1 3)))","(+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 5) (+.f64 (pow.f64 u1 6) (pow.f64 u1 3))))","(*.f64 -1 (pow.f64 u1 2))","(+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2)))","(-.f64 (+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2))) 1)","(-.f64 (+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2))) (+.f64 1 (/.f64 1 u1)))","(*.f64 -1 (pow.f64 u1 2))","(+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2)))","(-.f64 (+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2))) 1)","(-.f64 (+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2))) (+.f64 1 (/.f64 1 u1)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(E.f64)","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))","(E.f64)","(+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (cbrt.f64 -1))) (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))))","(E.f64)","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (+.f64 (cbrt.f64 -1) (*.f64 1/2 (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 3)) (sqrt.f64 (/.f64 1 (cbrt.f64 -1))))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (cbrt.f64 -1))) (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1) (sqrt.f64 (cbrt.f64 -1)))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))))","(E.f64)","(*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(E.f64)","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(E.f64)","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))","(E.f64)","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 7) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","u1","(E.f64)","(+.f64 (pow.f64 u1 2) u1)","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","(E.f64)","-1","(E.f64)","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(E.f64)","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(E.f64)","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","(E.f64)","(cbrt.f64 -1)","(E.f64)","(+.f64 (cbrt.f64 -1) (/.f64 (cbrt.f64 -1) u1))","(E.f64)","(+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1)))","(E.f64)","(+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 3)) (+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1))))","(E.f64)","(pow.f64 u1 3)","(E.f64)","(+.f64 (pow.f64 u1 4) (pow.f64 u1 3))","(E.f64)","(+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 5) (pow.f64 u1 3)))","(E.f64)","(+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 5) (+.f64 (pow.f64 u1 6) (pow.f64 u1 3))))","(E.f64)","(*.f64 -1 (pow.f64 u1 2))","(E.f64)","(+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2)))","(E.f64)","(-.f64 (+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2))) 1)","(E.f64)","(-.f64 (+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2))) (+.f64 1 (/.f64 1 u1)))","(E.f64)","(*.f64 -1 (pow.f64 u1 2))","(E.f64)","(+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2)))","(E.f64)","(-.f64 (+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2))) 1)","(E.f64)","(-.f64 (+.f64 (*.f64 -1 u1) (*.f64 -1 (pow.f64 u1 2))) (+.f64 1 (/.f64 1 u1)))","(E.f64)"]],"time":368.566162109375,"type":"simplify"},{"compiler":[[7356,5838]],"time":97.165771484375,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","done",0.5220975778487077],["(*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","fresh",0.604498896227802],["(*.f64 (sqrt.f64 (/.f64 (+.f64 (*.f64 1/3 (pow.f64 u1 2)) (+.f64 (*.f64 2/9 (pow.f64 u1 3)) u1)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",14.482968481847204],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 3) 1/3))","fresh",2.9463511402252474],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))","fresh",0.6573602051372825],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) 3)","fresh",0.9231442993480814],["(*.f64 (sqrt.f64 (/.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5390501169224758],["(*.f64 (sqrt.f64 (/.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",1.103828380460847],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (-.f64 1 u1))) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5103788278487077],["(*.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5303688965266303],["(*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2)) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)))))","fresh",0.6749065062948204],["(*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","fresh",0.5911589059962441],["(*.f64 (sqrt.f64 (/.f64 u1 (*.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (+.f64 -1 u1))))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5212288574528623],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","next",0.5078888672213042],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 (pow.f64 u2 7) -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (fma.f64 314159265359/50000000000 u2 (fma.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5))))))","fresh",6.52269348146455]],"compiler":[[27,21],[23,18],[29,24],[18,15],[30,24],[17,14],[30,25],[24,19],[26,21],[16,13],[23,19],[22,17],[22,18],[33,26],[28,22],[23,18],[29,24],[18,15],[30,24],[17,14],[30,25],[24,19],[26,21],[16,13],[23,19],[22,17],[22,18],[33,26],[28,22]],"count":[[314,15]],"kept":[{"done":[1,1],"fresh":[13,10],"new":[299,4],"picked":[1,0]}],"min-error":[0.026591230164287515],"time":104.07421875,"type":"prune"},{"compiler":[[172,118]],"locations":[["(*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))))",0.2734375,true],["(/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))",0.296875,true],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))",0.33203125,true],["(pow.f64 (-.f64 1 u1) 2)",0.45703125,false]],"time":54.475830078125,"type":"localize"},{"count":[[3,32]],"series":[["(*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))))","u1","-inf",0.3388671875],["(*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))))","u1","inf",0.295166015625],["(*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))))","u1","0",0.231201171875],["(/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))","u1","-inf",0.243896484375],["(/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))","u1","inf",0.171142578125],["(/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))","u1","0",0.306884765625],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","-inf",0.33203125],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","inf",0.365966796875],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u2","0",7.528076171875],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","-inf",0.576904296875],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","inf",0.4091796875],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","u1","0",26.27099609375]],"time":37.345947265625,"type":"series"},{"count":[[3,142]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))","(*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1/2) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 0) (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 0 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) (*.f64 (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) (*.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2/3) (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2/3) (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)))) (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2))) (*.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2/3) (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (cbrt.f64 (neg.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))))) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 1/2) (*.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 0) (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) (*.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (*.f64 1/2 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) (*.f64 0 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))) (neg.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 2/3) (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) (neg.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 3/2)) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) (sqrt.f64 (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (/.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2/3)) (/.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (*.f64 1 (neg.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) -1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) -1) (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) 1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (pow.f64 (-.f64 1 u1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) -2/3))) (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 0) (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (*.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3) (pow.f64 (-.f64 1 u1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (neg.f64 (pow.f64 (-.f64 1 u1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (/.f64 1 (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 u1) -2/3) (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) -2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (pow.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2/3)) (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 u1) -2/3) (/.f64 (neg.f64 u1) (cbrt.f64 (cbrt.f64 (-.f64 1 u1))))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) -2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))) (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 u1) -2/3) (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 2/3) (cbrt.f64 (neg.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1)))))) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 2/3) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (/.f64 (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) 4) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (-.f64 1 u1))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 u1) (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (neg.f64 (pow.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 u1) -2/3) (/.f64 (neg.f64 u1) (cbrt.f64 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (pow.f64 (-.f64 1 u1) -2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (pow.f64 (-.f64 1 u1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) 1/2) (*.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) 0) (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) (*.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1)))) (*.f64 1/2 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1)))) (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) (*.f64 0 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (pow.f64 u1 3) (cbrt.f64 (+.f64 u1 -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 u1) (/.f64 (pow.f64 (pow.f64 u1 2/3) 4) (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u1 2/3) (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (*.f64 (pow.f64 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))) 2/3) u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (*.f64 (*.f64 u1 u1) (cbrt.f64 (pow.f64 (-.f64 1 u1) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 u1 3) (pow.f64 (-.f64 1 u1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 u1 (pow.f64 u1 2/3)) (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 u1)) (pow.f64 u1 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 u1 u1) (*.f64 (pow.f64 (-.f64 1 u1) -1/3) u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) 2) (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (pow.f64 u1 3) (cbrt.f64 (+.f64 u1 -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 u1 u1) (cbrt.f64 (+.f64 u1 -1))) (neg.f64 u1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 u1) (/.f64 (*.f64 u1 u1) (cbrt.f64 (+.f64 u1 -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 u1) (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (neg.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 u1 3)) (neg.f64 (pow.f64 (-.f64 1 u1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (pow.f64 (-.f64 1 u1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1))) u1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 u1 3)) (cbrt.f64 (+.f64 u1 -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) 2) u1) (cbrt.f64 (cbrt.f64 (-.f64 1 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (pow.f64 u1 3))) (cbrt.f64 (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) (*.f64 u1 u1)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 u1 3) -1) (cbrt.f64 (+.f64 u1 -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (+.f64 u1 -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (cbrt.f64 (-.f64 1 u1))))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (pow.f64 u1 3) 3) (-.f64 1 u1)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (-.f64 1 u1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 u1 (cbrt.f64 (cbrt.f64 (-.f64 1 u1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 u1 3) (cbrt.f64 (+.f64 u1 -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (pow.f64 u1 3) 3) (-.f64 1 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (/.f64 (pow.f64 (pow.f64 u1 3) 3) (-.f64 1 u1)) 1))))))"]],"rules":[["egg-rr",43],["egg-rr",70],["egg-rr",29]],"time":40.593994140625,"type":"rewrite"},{"count":[[174,168]],"inputs":[["(*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (cbrt.f64 -1)) (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (cbrt.f64 -1)) (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (cbrt.f64 -1))))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (cbrt.f64 -1)) (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (+.f64 (cbrt.f64 -1) (*.f64 1/2 (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 3)) (sqrt.f64 (/.f64 1 (cbrt.f64 -1))))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (cbrt.f64 -1))))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))))","(*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 7) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","u1","(+.f64 (pow.f64 u1 2) u1)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","-1","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","(cbrt.f64 -1)","(+.f64 (cbrt.f64 -1) (/.f64 (cbrt.f64 -1) u1))","(+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1)))","(+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 3)) (+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1))))","(pow.f64 u1 3)","(+.f64 (*.f64 1/3 (pow.f64 u1 4)) (pow.f64 u1 3))","(+.f64 (*.f64 1/3 (pow.f64 u1 4)) (+.f64 (*.f64 2/9 (pow.f64 u1 5)) (pow.f64 u1 3)))","(+.f64 (*.f64 1/3 (pow.f64 u1 4)) (+.f64 (*.f64 2/9 (pow.f64 u1 5)) (+.f64 (*.f64 14/81 (pow.f64 u1 6)) (pow.f64 u1 3))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(E.f64)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (cbrt.f64 -1)) (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))","(E.f64)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (cbrt.f64 -1)) (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (cbrt.f64 -1))))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2)))))","(E.f64)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (cbrt.f64 -1)) (/.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) u1))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (+.f64 (cbrt.f64 -1) (*.f64 1/2 (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2))) (pow.f64 u1 3)) (sqrt.f64 (/.f64 1 (cbrt.f64 -1))))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (+.f64 (*.f64 -1 (cbrt.f64 -1)) (pow.f64 (*.f64 -1/2 (sqrt.f64 (cbrt.f64 -1))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (cbrt.f64 -1))))) (*.f64 (sqrt.f64 (cbrt.f64 -1)) (sin.f64 (*.f64 314159265359/50000000000 u2))))))","(E.f64)","(*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(E.f64)","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(E.f64)","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))))","(E.f64)","(+.f64 (*.f64 314159265359/50000000000 (*.f64 u2 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 7) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (+.f64 (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (*.f64 (pow.f64 u2 5) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (*.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (*.f64 (pow.f64 u2 3) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","(*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))","(E.f64)","u1","(E.f64)","(+.f64 (pow.f64 u1 2) u1)","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 3) u1))","(E.f64)","(+.f64 (pow.f64 u1 2) (+.f64 (pow.f64 u1 4) (+.f64 (pow.f64 u1 3) u1)))","(E.f64)","-1","(E.f64)","(neg.f64 (+.f64 1 (/.f64 1 u1)))","(E.f64)","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (/.f64 1 u1))))","(E.f64)","(neg.f64 (+.f64 1 (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 3)) (/.f64 1 u1)))))","(E.f64)","(cbrt.f64 -1)","(E.f64)","(+.f64 (cbrt.f64 -1) (/.f64 (cbrt.f64 -1) u1))","(E.f64)","(+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1)))","(E.f64)","(+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 3)) (+.f64 (cbrt.f64 -1) (+.f64 (/.f64 (cbrt.f64 -1) (pow.f64 u1 2)) (/.f64 (cbrt.f64 -1) u1))))","(E.f64)","(pow.f64 u1 3)","(E.f64)","(+.f64 (*.f64 1/3 (pow.f64 u1 4)) (pow.f64 u1 3))","(E.f64)","(+.f64 (*.f64 1/3 (pow.f64 u1 4)) (+.f64 (*.f64 2/9 (pow.f64 u1 5)) (pow.f64 u1 3)))","(E.f64)","(+.f64 (*.f64 1/3 (pow.f64 u1 4)) (+.f64 (*.f64 2/9 (pow.f64 u1 5)) (+.f64 (*.f64 14/81 (pow.f64 u1 6)) (pow.f64 u1 3))))","(E.f64)"]],"time":392.72705078125,"type":"simplify"},{"compiler":[[7764,6052]],"time":99.857177734375,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","done",0.5220975778487077],["(*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","fresh",0.604498896227802],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) 3)","fresh",0.9231442993480814],["(*.f64 (sqrt.f64 (/.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5390501169224758],["(*.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5303688965266303],["(*.f64 (sqrt.f64 (/.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",1.103828380460847],["(*.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2/3) (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))","fresh",2.658776862536559],["(*.f64 (sqrt.f64 (/.f64 u1 (*.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (+.f64 -1 u1))))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5212288574528623],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))","fresh",0.6394501953688405],["(*.f64 (sqrt.f64 (/.f64 (+.f64 (*.f64 1/3 (pow.f64 u1 2)) (+.f64 (*.f64 2/9 (pow.f64 u1 3)) u1)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",14.482968481847204],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (-.f64 1 u1))) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","fresh",0.5103788278487077],["(*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2)) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)))))","fresh",0.6749065062948204],["(*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","fresh",0.5911589059962441],["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","done",0.5078888672213042],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 (pow.f64 u2 7) -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (fma.f64 314159265359/50000000000 u2 (fma.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5))))))","fresh",6.52269348146455]],"compiler":[[27,21],[23,18],[17,14],[30,25],[16,13],[24,19],[43,35],[22,18],[37,30],[29,24],[26,21],[23,19],[22,17],[33,26],[28,22]],"count":[[260,15]],"kept":[{"done":[1,1],"fresh":[13,10],"new":[245,3],"picked":[1,1]}],"min-error":[0.026591230164287515],"time":74.423828125,"type":"prune"},{"accuracy":[0.5056038574528623],"baseline":[0.5056038574528623],"branch":[["cosTheta_i",0.5056038574528623,1],["u1",0.5056038574528623,1],["u2",0.5056038574528623,1],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))",0.5056038574528623,1],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))",0.5056038574528623,1],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))",0.5056038574528623,1],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))",0.5056038574528623,1],["(/.f64 u1 (-.f64 1 u1))",0.5056038574528623,1],["(/.f64 u1 (-.f64 1 u1))",0.5056038574528623,1],["(sin.f64 (*.f64 314159265359/50000000000 u2))",0.5056038574528623,1],["(*.f64 314159265359/50000000000 u2)",0.5056038574528623,1]],"compiler":[[4,3],[4,3],[4,3],[14,11],[14,11],[9,7],[9,7],[8,6],[8,6],[7,6],[6,5],[608,474]],"count":[[28,1]],"inputs":[["(*.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2/3) (cbrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3)))) (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))) (sin.f64 (*.f64 314159265359/50000000000 u2)))))","(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (-.f64 1 u1) 2/3))))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))","(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (-.f64 1 u1))) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1)) (-.f64 1 u1))) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 u1 (*.f64 (neg.f64 (pow.f64 (-.f64 1 u1) 2/3)) (cbrt.f64 (+.f64 -1 u1))))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 u1 (/.f64 (*.f64 u1 u1) (cbrt.f64 (-.f64 1 u1)))) (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 (+.f64 (*.f64 1/3 (pow.f64 u1 2)) (+.f64 (*.f64 2/9 (pow.f64 u1 3)) u1)) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3)))","(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) -2)) u1) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 (/.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (-.f64 1 u1) 4))))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 (*.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2/3) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (*.f64 u1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (sqrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1)))))","(*.f64 (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2)) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 3/2) 1/3) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (*.f64 (/.f64 u1 (cbrt.f64 (-.f64 1 u1))) (pow.f64 (cbrt.f64 (-.f64 1 u1)) -2))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (cbrt.f64 (/.f64 u1 (-.f64 1 u1))) (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (pow.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 3) 1/3))","(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))) 3)","(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) (cbrt.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))))) (cbrt.f64 u1)) (cbrt.f64 (-.f64 1 u1)))","(*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)) 2)) (*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (cbrt.f64 (sin.f64 (*.f64 314159265359/50000000000 u2)))))","(*.f64 (sqrt.f64 (/.f64 (/.f64 u1 (cbrt.f64 (pow.f64 (-.f64 1 u1) 2))) (cbrt.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (pow.f64 (pow.f64 (/.f64 u1 (-.f64 1 u1)) 2) 1/4) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (fma.f64 (pow.f64 u2 7) -302029322777818351566783844332719832329455959975176141755859165754785028165295919/3937500000000000000000000000000000000000000000000000000000000000000000000000000 (fma.f64 314159265359/50000000000 u2 (fma.f64 -31006276680305942139213528068663279/750000000000000000000000000000000 (pow.f64 u2 3) (*.f64 3060196847853821555298148281676017575122444629042460390799/37500000000000000000000000000000000000000000000000000000 (pow.f64 u2 5))))))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))"]],"link":["."],"name":["Trowbridge-Reitz Sample, near normal, slope_y"],"oracle":[19.692668136991458],"outputs":[["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))"]],"time":111.708984375,"times":[["cosTheta_i",8.572998046875],["u1",8.7138671875],["u2",8.736083984375],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))",9.008056640625],["(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))",9.0869140625],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))",10.7021484375],["(sqrt.f64 (/.f64 u1 (-.f64 1 u1)))",8.714111328125],["(/.f64 u1 (-.f64 1 u1))",8.68994140625],["(/.f64 u1 (-.f64 1 u1))",8.85205078125],["(sin.f64 (*.f64 314159265359/50000000000 u2))",8.899169921875],["(*.f64 314159265359/50000000000 u2)",8.906005859375]],"type":"regimes"},{"compiler":[[24,20]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 u1 3) (-.f64 1 u1))) (cbrt.f64 (pow.f64 (-.f64 1 u1) 2)))) (sin.f64 (*.f64 314159265359/50000000000 u2)))","(*.f64 (sqrt.f64 (/.f64 u1 (-.f64 1 u1))) (sin.f64 (*.f64 314159265359/50000000000 u2)))"]],"stop":[["fuel",1]],"time":22.317138671875,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[24,20]],"remove-preprocessing":[[]],"time":13.34814453125,"type":"end"}]
[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.6887799953110516,0.09170725150033832,0.21951275318861008],[11,0.6595117235556245,0.12097552325576544,0.21951275318861008],[10,0.6321946699172258,0.17951206676661968,0.18829326331615448],[9,0.5775605626404285,0.23414617404341698,0.18829326331615448],[8,0.5307313278317451,0.34341438859701157,0.1258542835712433],[7,0.43707285821437836,0.43707285821437836,0.1258542835712433],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.35595703125,"type":"analyze"},{"outcomes":[["body",256,"invalid",12.579345703125,347],["body",256,"valid",280.19873046875,8256]],"time":300.73388671875,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(*.f64 (*.f64 x y) (-.f64 1 y))","(*.f64 (*.f64 y x) (-.f64 1 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 x y) (-.f64 1 y))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 (*.f64 y x) (-.f64 1 x))","(*.f64 y (*.f64 x (-.f64 1 x)))"]],"symmetry":[[]],"time":57.945068359375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 x y) (-.f64 1 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x y) (-.f64 1 y))","(*.f64 (*.f64 (-.f64 1 y) x) y)"]],"time":20.14208984375,"type":"simplify"},{"compiler":[[16,10]],"time":0.366943359375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (-.f64 1 y) x) y)","next",0.12890625],["(*.f64 (*.f64 x y) (-.f64 1 y))","fresh",0.13671875]],"compiler":[[9,6],[9,6],[9,6],[9,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.12109375],"time":1.18994140625,"type":"prune"},{"compiler":[[20,12]],"locations":[["(*.f64 (-.f64 1 y) x)",0.00390625,true],["(*.f64 (*.f64 (-.f64 1 y) x) y)",0.125,true]],"time":4.833984375,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 (-.f64 1 y) x)","x","-inf",0.2529296875],["(*.f64 (-.f64 1 y) x)","x","inf",0.6220703125],["(*.f64 (-.f64 1 y) x)","x","0",0.14013671875],["(*.f64 (-.f64 1 y) x)","y","-inf",0.155029296875],["(*.f64 (-.f64 1 y) x)","y","inf",0.16796875],["(*.f64 (-.f64 1 y) x)","y","0",0.166015625],["(*.f64 (*.f64 (-.f64 1 y) x) y)","x","-inf",0.341064453125],["(*.f64 (*.f64 (-.f64 1 y) x) y)","x","inf",0.470947265625],["(*.f64 (*.f64 (-.f64 1 y) x) y)","x","0",0.471923828125],["(*.f64 (*.f64 (-.f64 1 y) x) y)","y","-inf",0.5830078125],["(*.f64 (*.f64 (-.f64 1 y) x) y)","y","inf",0.52294921875],["(*.f64 (*.f64 (-.f64 1 y) x) y)","y","0",0.51904296875]],"time":4.55712890625,"type":"series"},{"count":[[2,106]],"inputs":[["(*.f64 (*.f64 (-.f64 1 y) x) y)","(*.f64 (-.f64 1 y) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (*.f64 x y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) (neg.f64 y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 y (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) (*.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 0) (*.f64 (*.f64 (-.f64 1 y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (neg.f64 y) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 y) (*.f64 x y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (neg.f64 (*.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) (*.f64 0 (*.f64 (*.f64 (-.f64 1 y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (-.f64 1 y) x) y)) (*.f64 (*.f64 (-.f64 1 y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 y -1) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (*.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 (pow.f64 (-.f64 1 y) 2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 y) 2/3) (*.f64 x y)) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) y) (cbrt.f64 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 y 3)) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (/.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 y 3)) 1) (/.f64 (*.f64 x y) (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 y) x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 (-.f64 1 y) x))) (pow.f64 (*.f64 (-.f64 1 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) (*.f64 y (cbrt.f64 (*.f64 (-.f64 1 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 (-.f64 1 y) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 (-.f64 1 y) x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y -1) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (/.f64 1 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 y -1) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y -1) (*.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (-.f64 1 y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 x (-.f64 1 (pow.f64 y 3)))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) y) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (+.f64 -1 (pow.f64 y 3))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (*.f64 (pow.f64 (-.f64 1 y) 2/3) (*.f64 x y))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 y 3)) (*.f64 x y)) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 y -1) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 y -1) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 y -1) (*.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 y (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 y) x) (*.f64 (*.f64 (-.f64 1 y) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 y) x) 0) (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 (*.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 y) x) (*.f64 0 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 y) x)) (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 (pow.f64 (-.f64 1 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (-.f64 1 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (-.f64 1 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 y) 2/3) x) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 y 3)) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (/.f64 x (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 y 3)) 1) (/.f64 x (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (/.f64 (-.f64 1 (pow.f64 y 3)) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (pow.f64 (*.f64 (-.f64 1 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) (cbrt.f64 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (-.f64 1 y))) (pow.f64 (-.f64 1 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 y) 2/3) (*.f64 x (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (/.f64 1 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -1 (pow.f64 y 3))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (*.f64 (pow.f64 (-.f64 1 y) 2/3) x)) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 y 3)) x) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 1 (pow.f64 y 3)))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 y -1) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 x y)))))))"]],"rules":[["egg-rr",50],["egg-rr",56]],"time":28.15478515625,"type":"rewrite"},{"count":[[142,115]],"inputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","x","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 -1 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (*.f64 y (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (*.f64 y (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(neg.f64 (*.f64 (*.f64 y x) y))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (*.f64 y (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (*.f64 y (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(neg.f64 (*.f64 (*.f64 y x) y))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (*.f64 y (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (*.f64 y (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 x (*.f64 y (-.f64 1 y)))","x","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 (-.f64 1 y) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 (-.f64 1 y) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 (-.f64 1 y) x)","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)"]],"time":115.522216796875,"type":"simplify"},{"compiler":[[1456,873]],"time":19.06201171875,"type":"eval"},{"alts":[["(*.f64 x (*.f64 y (-.f64 1 y)))","fresh",4.31640625],["(/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (fma.f64 y y (+.f64 1 y)))","fresh",11.828125],["(*.f64 (*.f64 (-.f64 1 y) x) y)","done",0.12890625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)","next",0.6046640137479347],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","fresh",0.6395265625901448]],"compiler":[[9,6],[18,12],[9,6],[12,9],[12,9],[9,6],[18,12],[12,9],[12,9]],"count":[[117,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[115,4],"picked":[1,1]}],"min-error":[0.015625],"time":27.371826171875,"type":"prune"},{"compiler":[[39,25]],"locations":[["(*.f64 (-.f64 1 y) x)",0.00390625,false],["(*.f64 (*.f64 (-.f64 1 y) x) y)",0.125,false],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)",0.5746651856003985,true],["(cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))",10.71812793213229,true]],"time":9.751953125,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)","x","-inf",0.550048828125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)","x","inf",0.48486328125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)","x","0",0.39794921875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)","y","-inf",0.797119140625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)","y","inf",0.487060546875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)","y","0",0.6201171875],["(cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))","x","-inf",0.37109375],["(cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))","x","inf",0.31201171875],["(cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))","x","0",0.275146484375],["(cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))","y","-inf",0.494873046875],["(cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))","y","inf",0.324951171875],["(cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))","y","0",0.43798828125]],"time":5.69921875,"type":"series"},{"count":[[2,103]],"inputs":[["(cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))","(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 0) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (*.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (*.f64 0 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))) (cbrt.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (*.f64 (-.f64 1 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) (cbrt.f64 (*.f64 (pow.f64 (-.f64 1 y) 2/3) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 1 y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3) (cbrt.f64 (*.f64 (-.f64 1 y) x)))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (*.f64 (-.f64 1 y) x)))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 (+.f64 y -1) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y -1) (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (cbrt.f64 (*.f64 x y))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 (+.f64 y -1) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 0) (*.f64 (*.f64 (-.f64 1 y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) (*.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 y (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (*.f64 x y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (-.f64 1 y) x) y)) (*.f64 (*.f64 (-.f64 1 y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) (*.f64 0 (*.f64 (*.f64 (-.f64 1 y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (neg.f64 (*.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (neg.f64 y) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) (neg.f64 y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 y) (*.f64 x y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 y -1) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (*.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 (pow.f64 (-.f64 1 y) 2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 y -1) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 y) 2/3) (*.f64 x y)) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3)) (cbrt.f64 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) y) (cbrt.f64 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))) 4) 2) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y -1) (*.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 y 3)) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (/.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 y) x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3) (cbrt.f64 (*.f64 (-.f64 1 y) x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 (-.f64 1 y) x))) (pow.f64 (*.f64 (-.f64 1 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (-.f64 1 y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) (*.f64 y (cbrt.f64 (*.f64 (-.f64 1 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3) (cbrt.f64 (*.f64 (-.f64 1 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 (-.f64 1 y) x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 (-.f64 1 y) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y -1) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 y 3)) (/.f64 (*.f64 x y) (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (/.f64 1 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 x (-.f64 1 (pow.f64 y 3)))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) y) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (+.f64 -1 (pow.f64 y 3))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 y 3)) (*.f64 x y)) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (*.f64 (pow.f64 (-.f64 1 y) 2/3) (*.f64 x y))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 y -1) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 y -1) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 y -1) (*.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 y (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 3))))))"]],"rules":[["egg-rr",68],["egg-rr",35]],"time":26.22998046875,"type":"rewrite"},{"count":[[103,103]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":27.118896484375,"type":"simplify"},{"compiler":[[3317,2188]],"time":43.43798828125,"type":"eval"},{"alts":[["(/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (fma.f64 y y (+.f64 1 y)))","fresh",11.828125],["(*.f64 x (*.f64 y (-.f64 1 y)))","fresh",4.31640625],["(*.f64 (*.f64 (-.f64 1 y) x) y)","done",0.12890625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)","done",0.6046640137479347],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","next",0.6395265625901448]],"compiler":[[18,12],[9,6],[9,6],[12,9],[12,9],[18,12],[9,6],[12,9]],"count":[[223,5]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[218,1],"picked":[1,1]}],"min-error":[0.015625],"time":65.511962890625,"type":"prune"},{"compiler":[[38,26]],"locations":[["(*.f64 (-.f64 1 y) x)",0.00390625,false],["(cbrt.f64 (*.f64 (-.f64 1 y) x))",0.09765625,true],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)",0.125,true],["(pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3)",0.7342340332848188,true]],"time":10.01416015625,"type":"localize"},{"count":[[3,32]],"series":[["(cbrt.f64 (*.f64 (-.f64 1 y) x))","x","-inf",0.2158203125],["(cbrt.f64 (*.f64 (-.f64 1 y) x))","x","inf",0.1669921875],["(cbrt.f64 (*.f64 (-.f64 1 y) x))","x","0",0.1728515625],["(cbrt.f64 (*.f64 (-.f64 1 y) x))","y","-inf",0.25],["(cbrt.f64 (*.f64 (-.f64 1 y) x))","y","inf",0.1728515625],["(cbrt.f64 (*.f64 (-.f64 1 y) x))","y","0",0.35498046875],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","x","-inf",1.910888671875],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","x","inf",0.3720703125],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","x","0",0.2900390625],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","y","-inf",0.3369140625],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","y","inf",0.30810546875],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","y","0",0.238037109375],["(pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3)","x","-inf",0.385009765625],["(pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3)","x","inf",0.320068359375],["(pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3)","x","0",0.259033203125],["(pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3)","y","-inf",0.43798828125],["(pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3)","y","inf",0.331787109375],["(pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3)","y","0",2.310791015625]],"time":9.06689453125,"type":"series"},{"count":[[3,142]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3)","(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","(cbrt.f64 (*.f64 (-.f64 1 y) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 y) x) 0) (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 y) x) (*.f64 (*.f64 (-.f64 1 y) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 y) x)) (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 y) x) (*.f64 0 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 (*.f64 y x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) (cbrt.f64 (-.f64 1 y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 (cbrt.f64 x) (pow.f64 (*.f64 (-.f64 1 y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 (pow.f64 (-.f64 1 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (-.f64 1 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 (*.f64 (-.f64 1 y) x) 2/3)) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))) 4) 2) (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 y) 2/3) x) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 y 3)) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (/.f64 x (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (/.f64 (-.f64 1 (pow.f64 y 3)) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (pow.f64 (*.f64 (-.f64 1 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) (cbrt.f64 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (-.f64 1 y))) (pow.f64 (-.f64 1 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 y) 2/3) (*.f64 x (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (-.f64 1 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 y 3)) (/.f64 x (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (/.f64 1 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -1 (pow.f64 y 3))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (*.f64 (cbrt.f64 x) (pow.f64 (*.f64 (-.f64 1 y) x) 2/3))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (*.f64 (pow.f64 (-.f64 1 y) 2/3) x)) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 y 3)) x) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 1 (pow.f64 y 3)))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 y) x) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 y) x) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 y -1) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 y x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 0) (*.f64 (*.f64 (-.f64 1 y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) (*.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 y (neg.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) 1) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (-.f64 1 y) x) y)) (*.f64 (*.f64 (-.f64 1 y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) (*.f64 0 (*.f64 (*.f64 (-.f64 1 y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 (neg.f64 (*.f64 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) (neg.f64 y)) (*.f64 (*.f64 y x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 y) (*.f64 y x)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 (*.f64 (-.f64 1 y) x) 2/3)) (cbrt.f64 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 y) x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (*.f64 y (pow.f64 (*.f64 (-.f64 1 y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 (-.f64 1 y) x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 2/3) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 (-.f64 1 y) x))) (pow.f64 (*.f64 (-.f64 1 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) (*.f64 y (cbrt.f64 (*.f64 (-.f64 1 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (-.f64 1 y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 (-.f64 1 y) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 x (-.f64 1 (pow.f64 y 3)))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) (-.f64 1 (pow.f64 y 3))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) y) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 y x)) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) (+.f64 -1 (pow.f64 y 3))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 y 3)) (*.f64 y x)) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 y -1) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 y -1) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 y (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 y x) (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 y) x) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 0) (cbrt.f64 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (*.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (-.f64 1 y) x))) (cbrt.f64 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (*.f64 0 (cbrt.f64 (*.f64 (-.f64 1 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3) (cbrt.f64 (-.f64 1 y)))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (pow.f64 x 2/3) (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 y) (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) (cbrt.f64 (*.f64 (pow.f64 (-.f64 1 y) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) (cbrt.f64 (*.f64 (cbrt.f64 x) (pow.f64 (*.f64 (-.f64 1 y) x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (-.f64 1 y)))) (cbrt.f64 (pow.f64 (-.f64 1 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (-.f64 1 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y -1) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 (pow.f64 y 3)))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (cbrt.f64 x)) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (-.f64 1 (pow.f64 y 3)))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 y) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (-.f64 1 y) x))))))"]],"rules":[["egg-rr",31],["egg-rr",48],["egg-rr",63]],"time":29.901123046875,"type":"rewrite"},{"count":[[174,163]],"inputs":[["(*.f64 (pow.f64 1 1/3) x)","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)))))))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9))))))) (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 x 2))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3))))))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3)))))))) (pow.f64 y 3)))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(pow.f64 x 1/3)","(+.f64 (pow.f64 x 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (pow.f64 y 2)))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3)))))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (pow.f64 y 2))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))))","(fma.f64 (neg.f64 (pow.f64 (pow.f64 x 13) 1/9)) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)))))))))","(+.f64 (fma.f64 (neg.f64 (pow.f64 (pow.f64 x 13) 1/9)) y x) (*.f64 (*.f64 y y) (+.f64 (*.f64 (pow.f64 (pow.f64 x 17) 1/9) (+.f64 -1/9 2/9)) (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (pow.f64 x 14) 1/9) -1/9)))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9))))))) (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 x 2))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3))))))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3)))))))) (pow.f64 y 3)))))","(+.f64 (fma.f64 (neg.f64 (pow.f64 (pow.f64 x 13) 1/9)) y x) (fma.f64 (*.f64 y y) (+.f64 (*.f64 (pow.f64 (pow.f64 x 17) 1/9) (+.f64 -1/9 2/9)) (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (pow.f64 x 14) 1/9) -1/9))) (*.f64 (fma.f64 (*.f64 -1/3 (pow.f64 (pow.f64 x 7) 1/9)) (*.f64 (pow.f64 (pow.f64 x 14) 1/9) -1/9) (fma.f64 2/27 (cbrt.f64 (pow.f64 x 7)) (fma.f64 (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 x 7)) (+.f64 2/9 -1/27))) (*.f64 2/27 (*.f64 x x))) (cbrt.f64 x) (*.f64 -1/3 (*.f64 (cbrt.f64 (pow.f64 x 7)) (+.f64 2/9 -1/27)))))) (pow.f64 y 3))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(neg.f64 (*.f64 (*.f64 y y) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(neg.f64 (*.f64 (*.f64 y y) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (pow.f64 x 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)))","(fma.f64 (*.f64 -1/3 (pow.f64 (pow.f64 x 7) 1/9)) y (cbrt.f64 x))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (pow.f64 y 2)))))","(+.f64 (fma.f64 (*.f64 -1/3 (pow.f64 (pow.f64 x 7) 1/9)) y (cbrt.f64 x)) (*.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 11) 1/9) (*.f64 y y))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3)))))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (pow.f64 y 2))))))","(+.f64 (cbrt.f64 x) (+.f64 (*.f64 -1/3 (+.f64 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) y) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 3)) (*.f64 (cbrt.f64 (pow.f64 x 7)) (+.f64 2/9 -1/27))))) (*.f64 -1/9 (*.f64 (pow.f64 (pow.f64 x 11) 1/9) (*.f64 y y)))))"]],"time":107.9658203125,"type":"simplify"},{"compiler":[[3548,2446]],"time":48.760009765625,"type":"eval"},{"alts":[["(*.f64 (*.f64 y (-.f64 1 y)) x)","fresh",4.31640625],["(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3) y)","next",0.7334178657641821],["(/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 y x)) (fma.f64 y y (+.f64 1 y)))","fresh",11.828125],["(*.f64 (*.f64 (-.f64 1 y) x) y)","done",0.12890625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)","done",0.6046640137479347],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","done",0.6395265625901448]],"compiler":[[9,6],[13,10],[18,12],[9,6],[12,9],[12,9],[9,6],[13,10],[18,12]],"count":[[223,6]],"kept":[{"done":[2,2],"fresh":[2,0],"new":[218,3],"picked":[1,1]}],"min-error":[0.01171875],"time":66.239013671875,"type":"prune"},{"compiler":[[42,27]],"locations":[["(cbrt.f64 x)",0.05859375,true],["(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3) y)",0.125,true],["(*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y)))",0.125,true],["(pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3)",0.7342340332848188,true]],"time":11.088134765625,"type":"localize"},{"count":[[4,32]],"series":[["(cbrt.f64 x)","x","-inf",0.195068359375],["(cbrt.f64 x)","x","inf",0.21484375],["(cbrt.f64 x)","x","0",0.182861328125],["(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3) y)","y","-inf",0.193115234375],["(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3) y)","y","inf",0.166015625],["(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3) y)","y","0",0.153076171875],["(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3) y)","x","-inf",0.18994140625],["(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3) y)","x","inf",0.157958984375],["(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3) y)","x","0",0.1669921875],["(*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y)))","y","-inf",0.171875],["(*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y)))","y","inf",0.1669921875],["(*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y)))","y","0",0.225830078125],["(*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y)))","x","-inf",0.19091796875],["(*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y)))","x","inf",0.194091796875],["(*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y)))","x","0",0.175048828125],["(pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3)","y","-inf",0.34716796875],["(pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3)","y","inf",0.31689453125],["(pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3)","y","0",0.407958984375],["(pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3)","x","-inf",0.3740234375],["(pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3)","x","inf",0.3759765625],["(pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3)","x","0",0.43994140625]],"time":5.27783203125,"type":"series"},{"count":[[4,161]],"inputs":[["(pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3)","(*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y)))","(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3) y)","(cbrt.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 1 y)) 0) (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 1 y)) (*.f64 (*.f64 x (-.f64 1 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 (*.f64 y x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (-.f64 1 y))) (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 1 y)) (*.f64 0 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 (-.f64 1 y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (-.f64 1 y)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)) (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 y -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)) (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (/.f64 (-.f64 1 (pow.f64 y 3)) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 x 2/3) (-.f64 1 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (pow.f64 (*.f64 x (-.f64 1 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (-.f64 1 y))) (pow.f64 (-.f64 1 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 y) 2/3) (*.f64 x (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)) (pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (-.f64 1 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) (cbrt.f64 x))) 3) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (-.f64 1 y)))) 3) (pow.f64 (-.f64 1 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 x)) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (-.f64 1 y) 2/3) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (/.f64 1 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -1 (pow.f64 y 3))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 x)) (cbrt.f64 (-.f64 1 (pow.f64 y 3)))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 y 3)) x) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (*.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 x))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 1 (pow.f64 y 3)))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 x (+.f64 y -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 x 2/3)) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 y x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) 0) (cbrt.f64 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (*.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 x (-.f64 1 y)))) (cbrt.f64 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (*.f64 0 (cbrt.f64 (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) (cbrt.f64 (*.f64 (pow.f64 (-.f64 1 y) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (pow.f64 x 2/3) (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 2/3) (-.f64 1 y))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (-.f64 1 y) 2/3) x)) (cbrt.f64 (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 (-.f64 1 y)))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)) (pow.f64 (*.f64 x (-.f64 1 y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (-.f64 1 y)))) (cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (-.f64 1 y)))) (cbrt.f64 (pow.f64 (-.f64 1 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 y) (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2/3)) (cbrt.f64 (*.f64 x (cbrt.f64 (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (*.f64 (-.f64 1 y) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 x))) (cbrt.f64 (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 (pow.f64 y 3)))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (cbrt.f64 x)) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x (-.f64 1 (pow.f64 y 3)))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (-.f64 1 y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (-.f64 1 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (-.f64 1 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x (-.f64 1 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 x (-.f64 1 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 y (neg.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x (-.f64 1 y)) y) 0) (*.f64 (*.f64 x (-.f64 1 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 1 y)) y) (*.f64 (*.f64 (*.f64 x (-.f64 1 y)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) 1) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 (neg.f64 (*.f64 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 x (-.f64 1 y)) y)) (*.f64 (*.f64 x (-.f64 1 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 1 y)) y) (*.f64 0 (*.f64 (*.f64 x (-.f64 1 y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) (neg.f64 y)) (*.f64 (*.f64 y x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 y) (*.f64 y x)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)) (cbrt.f64 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (*.f64 y (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (-.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 x (-.f64 1 y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 x (-.f64 1 y)) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x (-.f64 1 y)) y)) (pow.f64 (*.f64 (*.f64 x (-.f64 1 y)) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x (-.f64 1 y)) y) 2/3) (cbrt.f64 (*.f64 (*.f64 x (-.f64 1 y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (-.f64 1 y)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 x (-.f64 1 y)))) (pow.f64 (*.f64 x (-.f64 1 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (*.f64 y (cbrt.f64 (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x (-.f64 1 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (-.f64 1 y)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 x (-.f64 1 y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x (-.f64 1 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 y)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) (-.f64 1 (pow.f64 y 3))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 x (-.f64 1 (pow.f64 y 3)))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) y) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) (+.f64 -1 (pow.f64 y 3))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x (-.f64 1 y)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x (-.f64 1 y)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x (-.f64 1 y)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x (-.f64 1 y)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x (-.f64 1 y)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 x (-.f64 1 y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 x (+.f64 y -1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 y (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 y x) (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x (-.f64 1 y)) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) 0) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) (*.f64 0 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 x)))))"]],"rules":[["egg-rr",19],["egg-rr",45],["egg-rr",37],["egg-rr",60]],"time":33.56298828125,"type":"rewrite"},{"count":[[193,182]],"inputs":[["(*.f64 (pow.f64 1 1/3) x)","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)))))))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9))))))) (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 x 2))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3))))))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3)))))))) (pow.f64 y 3)))))","(pow.f64 x 1/3)","(+.f64 (pow.f64 x 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (pow.f64 y 2)))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3)))))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (pow.f64 y 2))))))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) x) (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))))","(fma.f64 (neg.f64 (pow.f64 (pow.f64 x 13) 1/9)) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)))))))))","(+.f64 (fma.f64 (neg.f64 (pow.f64 (pow.f64 x 13) 1/9)) y x) (*.f64 (*.f64 y y) (+.f64 (*.f64 (pow.f64 (pow.f64 x 17) 1/9) (+.f64 -1/9 2/9)) (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (pow.f64 x 14) 1/9) -1/9)))))","(+.f64 (*.f64 (pow.f64 1 1/3) x) (+.f64 (*.f64 y (+.f64 (*.f64 -2/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)) (*.f64 -1/3 (pow.f64 (*.f64 1 (pow.f64 x 13)) 1/9)))) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (*.f64 1 (pow.f64 x 17)) 1/9)) (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9))))))) (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) (+.f64 (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9)) (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 x 14)) 1/9))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 x) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (pow.f64 x 2))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3))))))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3)))))))) (pow.f64 y 3)))))","(+.f64 (fma.f64 (neg.f64 (pow.f64 (pow.f64 x 13) 1/9)) y x) (fma.f64 (fma.f64 -1/3 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) (*.f64 (pow.f64 (pow.f64 x 14) 1/9) -1/9)) (fma.f64 2/27 (cbrt.f64 (pow.f64 x 7)) (fma.f64 (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 x 7)) (+.f64 2/9 -1/27))) (*.f64 2/27 (*.f64 x x))) (cbrt.f64 x) (*.f64 -1/3 (*.f64 (cbrt.f64 (pow.f64 x 7)) (+.f64 2/9 -1/27)))))) (pow.f64 y 3) (*.f64 (*.f64 y y) (+.f64 (*.f64 (pow.f64 (pow.f64 x 17) 1/9) (+.f64 -1/9 2/9)) (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (pow.f64 x 14) 1/9) -1/9))))))","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (pow.f64 x 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)))","(fma.f64 (*.f64 -1/3 (pow.f64 (pow.f64 x 7) 1/9)) y (cbrt.f64 x))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (pow.f64 y 2)))))","(+.f64 (fma.f64 (*.f64 -1/3 (pow.f64 (pow.f64 x 7) 1/9)) y (cbrt.f64 x)) (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 x 11) 1/9)) (*.f64 y y)))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/9) y)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (pow.f64 x 7) 1/3))) (*.f64 -1/27 (pow.f64 (*.f64 1 (pow.f64 x 7)) 1/3)))))) (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 11)) 1/9) (pow.f64 y 2))))))","(+.f64 (cbrt.f64 x) (+.f64 (*.f64 -1/3 (+.f64 (*.f64 (pow.f64 (pow.f64 x 7) 1/9) y) (*.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 y 3)) (*.f64 (cbrt.f64 (pow.f64 x 7)) (+.f64 2/9 -1/27))))) (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 x 11) 1/9)) (*.f64 y y))))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(neg.f64 (*.f64 (*.f64 y y) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(neg.f64 (*.f64 (*.f64 y y) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (+.f64 y (neg.f64 (*.f64 y y))))"]],"time":108.550048828125,"type":"simplify"},{"compiler":[[3018,2084]],"time":40.027099609375,"type":"eval"},{"alts":[["(*.f64 (*.f64 y (-.f64 1 y)) x)","fresh",4.31640625],["(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3) y)","done",0.7334178657641821],["(*.f64 (*.f64 (-.f64 1 y) x) y)","done",0.12890625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)","done",0.6046640137479347],["(/.f64 (*.f64 (*.f64 y x) (-.f64 1 (pow.f64 y 3))) (fma.f64 y y (+.f64 1 y)))","fresh",11.828125],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","done",0.6395265625901448]],"compiler":[[9,6],[13,10],[9,6],[12,9],[18,12],[12,9]],"count":[[188,6]],"kept":[{"done":[3,3],"fresh":[2,1],"new":[182,1],"picked":[1,1]}],"min-error":[0.01171875],"time":47.294921875,"type":"prune"},{"accuracy":[0.12890625],"baseline":[0.12890625],"branch":[["x",0.12890625,1],["y",0.12890625,1],["(*.f64 (*.f64 x y) (-.f64 1 y))",0.12890625,1]],"compiler":[[3,2],[3,2],[9,6],[125,77]],"count":[[11,1]],"inputs":[["(/.f64 (*.f64 (*.f64 y x) (-.f64 1 (pow.f64 y 3))) (fma.f64 y y (+.f64 1 y)))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 (pow.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (-.f64 1 y))) 3) y)","(/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 y x)) (fma.f64 y y (+.f64 1 y)))","(/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (fma.f64 y y (+.f64 1 y)))","(*.f64 x (*.f64 y (-.f64 1 y)))","(/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (fma.f64 y y (+.f64 1 y)))","(pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 y) x) y)) 3)","(*.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) x)) 3) y)","(*.f64 (*.f64 (-.f64 1 y) x) y)","(*.f64 (*.f64 x y) (-.f64 1 y))"]],"link":["."],"name":["Statistics.Distribution.Binomial:$cvariance from math-functions-0.1.5.2"],"oracle":[12.462494140737684],"outputs":[["(*.f64 (*.f64 (-.f64 1 y) x) y)"]],"time":16.096923828125,"times":[["x",4.760986328125],["y",4.4599609375],["(*.f64 (*.f64 x y) (-.f64 1 y))",4.483154296875]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(*.f64 (*.f64 (-.f64 1 y) x) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (-.f64 1 y) x) y)"]],"stop":[["fuel",1]],"time":20.52197265625,"type":"simplify"},{"time":0.01416015625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.875,"type":"end"}]
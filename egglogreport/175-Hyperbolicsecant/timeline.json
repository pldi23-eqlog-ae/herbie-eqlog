[{"compiler":[[10,8]],"method":["search"],"sampling":[[2,0.99951171875,0.0,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":0.220947265625,"type":"analyze"},{"outcomes":[["body",256,"valid",295.094970703125,8256]],"time":302.72900390625,"type":"sample"},{"compiler":[[9,7]],"inputs":[["0"],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"symmetry":[[]],"time":51.39990234375,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"time":17.81005859375,"type":"simplify"},{"compiler":[[9,7]],"time":0.22607421875,"type":"eval"},{"alts":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","next",0.00390625]],"compiler":[[9,7],[9,7]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.73095703125,"type":"prune"},{"compiler":[[24,8]],"locations":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))",0.00390625,true]],"time":5.02197265625,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","-inf",0.7470703125],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","inf",0.5009765625],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","0",0.510009765625]],"time":1.81103515625,"type":"series"},{"count":[[1,73]],"inputs":[["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 0) (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 0 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 1/2)) (/.f64 -2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 0 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (/.f64 -2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2)) (cbrt.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (/.f64 (sqrt.f64 2) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sqrt.f64 8) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (/.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (neg.f64 1/3)) (/.f64 2 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 -1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))) (cbrt.f64 (/.f64 (sqrt.f64 8) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))) (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 2) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (/.f64 (cbrt.f64 4) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 4) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (exp.f64 x)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (exp.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) 2) (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))) (*.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) -2) (*.f64 (exp.f64 x) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (cbrt.f64 4)) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2)) (cbrt.f64 2)) (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2)) (cbrt.f64 -2)) (cbrt.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (neg.f64 1/3)) 2) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (exp.f64 x)) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 8) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (sqrt.f64 2)) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))) (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (/.f64 (sqrt.f64 2) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))) (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 1) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2))) (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -2) (cbrt.f64 (pow.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2))) (cbrt.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 2 -1) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -2 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 1) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 1/2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 x) (*.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 1/2) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 x) (*.f64 (exp.f64 x) (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -2 (/.f64 1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 3))))))"]],"rules":[["egg-rr",73]],"time":23.051025390625,"type":"rewrite"},{"count":[[85,82]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 5/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -61/720 (pow.f64 x 6)) (*.f64 5/24 (pow.f64 x 4)))))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 5/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 5/24 (pow.f64 x 4) (*.f64 (*.f64 -1/2 x) x)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -61/720 (pow.f64 x 6)) (*.f64 5/24 (pow.f64 x 4)))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 1) (fma.f64 -61/720 (pow.f64 x 6) (*.f64 5/24 (pow.f64 x 4))))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"time":61.407958984375,"type":"simplify"},{"compiler":[[1240,528]],"time":11.89599609375,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -2))","next",0]],"compiler":[[20,12],[20,12]],"count":[[83,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[82,1],"picked":[1,0]}],"min-error":[0],"time":17.494140625,"type":"prune"},{"compiler":[[69,21]],"locations":[["(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))",0.00390625,true]],"time":11.07177734375,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","-inf",0.449951171875],["(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","inf",0.462890625],["(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","0",0.279052734375]],"time":1.260009765625,"type":"series"},{"count":[[1,81]],"inputs":[["(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 0) (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (*.f64 0 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 8)) (/.f64 -8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (/.f64 0 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (/.f64 -8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (cbrt.f64 (pow.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2)) (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8 (/.f64 1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 8)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -8 (/.f64 -1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 4 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 8) (/.f64 (sqrt.f64 8) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sqrt.f64 512) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (/.f64 (sqrt.f64 8) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (neg.f64 1/3)) (/.f64 8 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 8) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))) (cbrt.f64 (/.f64 (sqrt.f64 512) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -8)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 8 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))) (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 8) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (sqrt.f64 8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 4 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 512 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 512 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (/.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 512 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (exp.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (exp.f64 x)) (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 4) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (exp.f64 x)) (*.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (exp.f64 x)) (*.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) 8) (*.f64 (exp.f64 x) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) (cbrt.f64 (/.f64 512 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))) (*.f64 (exp.f64 x) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) 2) (*.f64 (exp.f64 x) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) -8) (*.f64 (exp.f64 x) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (neg.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -8 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 512 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) (exp.f64 x)) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 4) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 512) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (sqrt.f64 8)) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (neg.f64 1/3)) 8) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2)) -2) (cbrt.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2)) 2) (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 8 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))) (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 512 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 1) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 8) (/.f64 (sqrt.f64 8) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))) (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (cbrt.f64 (pow.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2))) (cbrt.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (cbrt.f64 (pow.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 2))) (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 8 -1) (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 512 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 1) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -8 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 8) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 4) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 4 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) -8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 4) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 x) (*.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 8) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 x) (*.f64 (exp.f64 x) (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 512 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 8) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -8 (/.f64 1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -8))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) 3))))))"]],"rules":[["egg-rr",81]],"time":23.669189453125,"type":"rewrite"},{"count":[[93,90]],"inputs":[["4","(+.f64 (*.f64 -2 (pow.f64 x 2)) 4)","(+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 4 (*.f64 5/6 (pow.f64 x 4))))","(+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 (*.f64 -61/180 (pow.f64 x 6)) (+.f64 4 (*.f64 5/6 (pow.f64 x 4)))))","(/.f64 8 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 8 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 8 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 8 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))"]],"method":["egg-herbie"],"outputs":[["4","(+.f64 (*.f64 -2 (pow.f64 x 2)) 4)","(fma.f64 -2 (*.f64 x x) 4)","(+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 4 (*.f64 5/6 (pow.f64 x 4))))","(fma.f64 -2 (*.f64 x x) (fma.f64 5/6 (pow.f64 x 4) 4))","(+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 (*.f64 -61/180 (pow.f64 x 6)) (+.f64 4 (*.f64 5/6 (pow.f64 x 4)))))","(fma.f64 -2 (*.f64 x x) (fma.f64 -61/180 (pow.f64 x 6) (fma.f64 5/6 (pow.f64 x 4) 4)))","(/.f64 8 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 8 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 8 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 8 (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"time":60.18896484375,"type":"simplify"},{"compiler":[[2310,916]],"time":18.725830078125,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -2))","done",0]],"compiler":[[20,12]],"count":[[91,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[90,0],"picked":[1,1]}],"min-error":[0],"time":21.380126953125,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))",0,1],["(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))",0,1]],"compiler":[[2,1],[9,7],[7,5],[28,14]],"count":[[2,1]],"inputs":[["(*.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -2))","(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"link":["."],"name":["Hyperbolic secant"],"oracle":[0.00390625],"outputs":[["(*.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -2))"]],"time":6.39892578125,"times":[["x",2.26708984375],["(/.f64 2 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))",1.720947265625],["(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))",1.72705078125]],"type":"regimes"},{"compiler":[[20,12]],"inputs":[["(*.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (cbrt.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))) -2))","(*.f64 (cbrt.f64 (/.f64 8 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))) (pow.f64 (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (neg.f64 2/3)))"]],"stop":[["done",1]],"time":20.841064453125,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[20,12]],"remove-preprocessing":[[]],"time":10.60400390625,"type":"end"}]
[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":24.43603515625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.03515625,1],["body",1024,"valid",10.51904296875,114],["body",512,"valid",5.29150390625,71],["body",2048,"valid",10.96826171875,89],["body",256,"valid",277.43310546875,7982]],"time":312.98095703125,"type":"sample"},{"compiler":[[10,7]],"inputs":[["0","1"],["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))","(+.f64 y (/.f64 (fabs.f64 (-.f64 x y)) 2))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 y (/.f64 (fabs.f64 (-.f64 x y)) 2))","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 y)"]],"symmetry":[[]],"time":66.0771484375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))","(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)"]],"time":20.933837890625,"type":"simplify"},{"compiler":[[17,11]],"time":0.487060546875,"type":"eval"},{"alts":[["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","next",0.06640625]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.06640625],"time":0.969970703125,"type":"prune"},{"compiler":[[19,7]],"locations":[["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)",0.015625,true]],"time":6.0390625,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","y","-inf",0.35400390625],["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","y","inf",0.30908203125],["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","y","0",0.2509765625],["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","x","-inf",0.43603515625],["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","x","inf",0.387939453125],["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","x","0",0.361083984375]],"time":2.196044921875,"type":"series"},{"count":[[1,37]],"inputs":[["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 -1/2 (fabs.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) (pow.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 2/3) (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))) (neg.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (pow.f64 (-.f64 x y) 2) 1/4)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2)) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (*.f64 (pow.f64 (-.f64 x y) 2) 1/4)) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2)) (cbrt.f64 (*.f64 (pow.f64 (-.f64 x y) 2) 1/4)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (cbrt.f64 (-.f64 x y))) (*.f64 (pow.f64 (-.f64 x y) 2/3) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (sqrt.f64 1/2)) (sqrt.f64 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fabs.f64 (-.f64 y x)) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2) 1 x)))))"]],"rules":[["egg-rr",37]],"time":40.52197265625,"type":"rewrite"},{"count":[[61,43]],"inputs":[["(*.f64 1/2 (fabs.f64 (-.f64 x y)))","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 (*.f64 -1 y) x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 (*.f64 -1 y) x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 (*.f64 -1 y) x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 (*.f64 -1 y) x))) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (fabs.f64 (-.f64 x y)))","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 x y))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 (*.f64 -1 y) x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 (*.f64 -1 y) x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 (*.f64 -1 y) x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 (*.f64 -1 y) x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)"]],"time":84.675048828125,"type":"simplify"},{"compiler":[[484,236]],"time":6.8330078125,"type":"eval"},{"alts":[["(fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)","next",0.453125],["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","done",0.06640625],["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","fresh",0.7534015746739147]],"compiler":[[13,10],[9,6],[12,9],[13,10],[12,9]],"count":[[44,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[43,2],"picked":[1,1]}],"min-error":[0.03515625],"time":8.206787109375,"type":"prune"},{"compiler":[[35,19]],"locations":[["(fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)",0.171875,true],["(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))",0.39453125,true]],"time":8.668212890625,"type":"localize"},{"count":[[2,36]],"series":[["(fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)","x","-inf",0.2890625],["(fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)","x","inf",0.321044921875],["(fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)","x","0",0.51123046875],["(fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)","y","-inf",0.3681640625],["(fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)","y","inf",0.367919921875],["(fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)","y","0",1.238037109375],["(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","x","-inf",1.116943359375],["(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","x","inf",0.320068359375],["(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","x","0",0.875],["(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","y","-inf",0.35888671875],["(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","y","inf",0.340087890625],["(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","y","0",1.48291015625]],"time":7.7978515625,"type":"series"},{"count":[[2,62]],"inputs":[["(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) (*.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) 0) (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) (*.f64 0 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 (-.f64 x y))) (*.f64 (pow.f64 (-.f64 y x) 2/3) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 y x) 2/3) (cbrt.f64 1/2)) (cbrt.f64 (fabs.f64 (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) (pow.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) 2/3) (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/2)) (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (fabs.f64 (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) 1/2)) (pow.f64 (-.f64 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 (cbrt.f64 1/2))) (cbrt.f64 (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (fabs.f64 (-.f64 x y))) (cbrt.f64 (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/4)) (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 y x) 2/3) (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fabs.f64 (-.f64 x y)) 3) 1/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fabs.f64 (-.f64 x y)) 3) 1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) (*.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 0) (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) (*.f64 0 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 (-.f64 x y)) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3) (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/4)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fabs.f64 (-.f64 x y)) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) (cbrt.f64 (cbrt.f64 1/4))) (cbrt.f64 (cbrt.f64 1/16)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) (cbrt.f64 (*.f64 (*.f64 (pow.f64 (-.f64 y x) 2) (cbrt.f64 1/4)) 1/4)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) 1/2)) (cbrt.f64 (*.f64 (pow.f64 (-.f64 y x) 2) 1/4)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 x y)) 1/2) 1 x)))))"]],"rules":[["egg-rr",34],["egg-rr",28]],"time":26.35302734375,"type":"rewrite"},{"count":[[98,74]],"inputs":[["(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))","(*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (cbrt.f64 1/2))","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(+.f64 (*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(+.f64 (*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(+.f64 (*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(+.f64 (*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x))))","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","x","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","x","(+.f64 (*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(+.f64 (*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(+.f64 (*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (cbrt.f64 1/2))","(*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x))))","(*.f64 (fabs.f64 (-.f64 y x)) 1/2)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","x","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","x","(+.f64 (*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","(+.f64 (*.f64 (fabs.f64 (+.f64 y (*.f64 -1 x))) (*.f64 (cbrt.f64 1/4) (cbrt.f64 1/2))) x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)"]],"time":121.928955078125,"type":"simplify"},{"compiler":[[982,554]],"time":14.52294921875,"type":"eval"},{"alts":[["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","done",0.06640625],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)","next",0.7390404660627584],["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 3)","fresh",0.7534015746739147]],"compiler":[[9,6],[16,13],[12,9],[16,13],[12,9]],"count":[[77,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[74,2],"picked":[1,0]}],"min-error":[0.015625],"time":13.31201171875,"type":"prune"},{"compiler":[[57,33]],"locations":[["(cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)))",0.11328125,true],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)",0.171875,true],["(*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))",0.39453125,true],["(pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3)",0.7140390137479348,true]],"time":14.484130859375,"type":"localize"},{"count":[[4,96]],"series":[["(cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)))","y","-inf",0.18603515625],["(cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)))","y","inf",0.1640625],["(cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)))","y","0",0.18505859375],["(cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)))","x","-inf",0.23583984375],["(cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)))","x","inf",0.203125],["(cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)))","x","0",0.169189453125],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)","y","-inf",0.406005859375],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)","y","inf",0.365966796875],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)","y","0",0.283935546875],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)","x","-inf",0.3291015625],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)","x","inf",0.306884765625],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)","x","0",0.302001953125],["(*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))","y","-inf",0.31591796875],["(*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))","y","inf",0.154052734375],["(*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))","y","0",0.178955078125],["(*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))","x","-inf",0.16796875],["(*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))","x","inf",0.18603515625],["(*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))","x","0",0.166015625],["(pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3)","y","-inf",1.637939453125],["(pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3)","y","inf",1.70703125],["(pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3)","y","0",1.077880859375],["(pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3)","x","-inf",2.078857421875],["(pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3)","x","inf",2.735107421875],["(pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3)","x","0",1.714111328125]],"time":15.657958984375,"type":"series"},{"count":[[4,141]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3)","(*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))","(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)","(cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 0) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (*.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (*.f64 0 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3) (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (cbrt.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (*.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)))) (cbrt.f64 (fabs.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 1/2)) (cbrt.f64 (fabs.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3) (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)))) (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3) (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)) (fabs.f64 (-.f64 y x)))) (cbrt.f64 (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2)) (pow.f64 (-.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/2)) (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (fabs.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (cbrt.f64 1/2))) (cbrt.f64 (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/2)) (cbrt.f64 (*.f64 (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)) (fabs.f64 (-.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (fabs.f64 (-.f64 y x))) (cbrt.f64 (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/4)) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 3) 1/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 3) 1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 0) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (*.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (*.f64 0 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3) (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (cbrt.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (*.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)))) (cbrt.f64 (fabs.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 1/2)) (cbrt.f64 (fabs.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3) (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)))) (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3) (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)) (fabs.f64 (-.f64 y x)))) (cbrt.f64 (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2)) (pow.f64 (-.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/2)) (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (fabs.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (cbrt.f64 1/2))) (cbrt.f64 (cbrt.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/2)) (cbrt.f64 (*.f64 (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)) (fabs.f64 (-.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (fabs.f64 (-.f64 y x))) (cbrt.f64 (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/4)) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 3) 1/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 3) 1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 0) (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) (*.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) (*.f64 0 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) (pow.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 2/3) (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3) (cbrt.f64 (*.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 1/4)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (cbrt.f64 (*.f64 (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)) 1/4)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 (cbrt.f64 1/4))) (cbrt.f64 (cbrt.f64 1/16)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/4)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2)) (cbrt.f64 (*.f64 (pow.f64 (-.f64 x y) 2) 1/4)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fabs.f64 (-.f64 y x)) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (fabs.f64 (-.f64 y x)) 1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) 0) (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (*.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (*.f64 0 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 1/2))) (cbrt.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/4)) (fabs.f64 (-.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 (-.f64 y x)))) (cbrt.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/2) (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fabs.f64 (-.f64 y x)))) (cbrt.f64 (*.f64 (pow.f64 (-.f64 x y) 2/3) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 (cbrt.f64 1/2)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))) (cbrt.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3) (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (-.f64 x y) 2) (cbrt.f64 1/4)) (fabs.f64 (-.f64 y x))))) (cbrt.f64 (cbrt.f64 (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) (cbrt.f64 (pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 (-.f64 y x))) (cbrt.f64 (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/2)) (cbrt.f64 (fabs.f64 (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) 1/2))) (cbrt.f64 (pow.f64 (-.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))))))"]],"rules":[["egg-rr",28],["egg-rr",35],["egg-rr",39],["egg-rr",39]],"time":36.56494140625,"type":"rewrite"},{"count":[[237,119]],"inputs":[["(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))) x)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))) 1/3)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))) 1/3)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x)))","(*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))","(*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y)))))","(*.f64 1/2 (fabs.f64 (-.f64 x y)))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","x","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x))))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))","(pow.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (+.f64 (*.f64 -1 y) x))) 1/3)","(cbrt.f64 (*.f64 (cbrt.f64 1/2) (fabs.f64 (-.f64 x y))))"]],"time":290.14111328125,"type":"simplify"},{"compiler":[[1954,1217]],"time":28.26904296875,"type":"eval"},{"alts":[["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","done",0.06640625],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)","done",0.7390404660627584],["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","next",0.7534015746739147],["(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) 3) 3) (cbrt.f64 1/4) x)","fresh",1.501170208728099]],"compiler":[[9,6],[16,13],[12,9],[19,16],[12,9],[19,16]],"count":[[122,4]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[119,2],"picked":[1,1]}],"min-error":[0.0078125],"time":21.73388671875,"type":"prune"},{"compiler":[[38,16]],"locations":[["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)",0.015625,true],["(cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))",0.09765625,true],["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)",0.7198602051372827,true]],"time":8.549072265625,"type":"localize"},{"count":[[3,56]],"series":[["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","x","-inf",0.22607421875],["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","x","inf",0.205078125],["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","x","0",0.202880859375],["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","y","-inf",0.1640625],["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","y","inf",0.153076171875],["(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)","y","0",0.171875],["(cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))","x","-inf",0.239013671875],["(cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))","x","inf",0.27001953125],["(cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))","x","0",0.574951171875],["(cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))","y","-inf",0.195068359375],["(cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))","y","inf",0.180908203125],["(cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))","y","0",0.1708984375],["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","x","-inf",0.494873046875],["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","x","inf",0.815185546875],["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","x","0",2.8818359375],["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","y","-inf",4.152099609375],["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","y","inf",1.798095703125],["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","y","0",1.66796875]],"time":14.864990234375,"type":"series"},{"count":[[3,88]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","(cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x))","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 0) (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) (*.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) (*.f64 0 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 (-.f64 x y)) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))) (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 4/3) 2) (cbrt.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3) (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 7/3) (cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3)) (pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fabs.f64 (-.f64 x y))) (*.f64 (pow.f64 (-.f64 y x) 2/3) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) 1/2)) (cbrt.f64 (*.f64 (pow.f64 (-.f64 y x) 2) 1/4)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 x y)) (sqrt.f64 1/2)) (sqrt.f64 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fabs.f64 (-.f64 x y)) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 x y)) 1/2) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 0) (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) (*.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))) (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) (*.f64 0 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))) (cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 0) (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) (*.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) (*.f64 0 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fabs.f64 (-.f64 x y)) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))) (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 4/3) 2) (cbrt.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3) (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 7/3) (cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 2/3)) (pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fabs.f64 (-.f64 x y))) (*.f64 (pow.f64 (-.f64 y x) 2/3) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) 1/2)) (cbrt.f64 (*.f64 (pow.f64 (-.f64 y x) 2) 1/4)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 x y)) (sqrt.f64 1/2)) (sqrt.f64 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fabs.f64 (-.f64 x y)) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (fabs.f64 (-.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fabs.f64 (-.f64 x y)) 1/2) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (fabs.f64 (-.f64 x y)) 1/2))))))"]],"rules":[["egg-rr",35],["egg-rr",18],["egg-rr",35]],"time":31.133056640625,"type":"rewrite"},{"count":[[144,79]],"inputs":[["(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) (pow.f64 1 1/3))","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) (pow.f64 1 1/3))","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) (pow.f64 1 1/3))","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) (pow.f64 1 1/3))","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (fabs.f64 (-.f64 y x))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3)))) x) (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (fabs.f64 (-.f64 y x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (fabs.f64 (-.f64 y x))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/2)) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (*.f64 (cbrt.f64 1/2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3)))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (fabs.f64 (-.f64 y x))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/2)) 1/3))))) (pow.f64 x 2)) (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (fabs.f64 (-.f64 y x))))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (fabs.f64 (-.f64 y x))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/2)) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (*.f64 (cbrt.f64 1/2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3)))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (fabs.f64 (-.f64 y x))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/2)) 1/3))))) (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3))))))) (+.f64 (*.f64 (*.f64 (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))) (cbrt.f64 1/2)))) (*.f64 -4/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 (fabs.f64 (-.f64 y x)))))) (cbrt.f64 1/2)) (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))))) (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2)))))))) (pow.f64 x 3)) (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (fabs.f64 (-.f64 y x)))))))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) 1/3)","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) 1/3)","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) 1/3)","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) 1/3)","(*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (cbrt.f64 1/2))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2)) 1/3) x))) (*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (cbrt.f64 1/2)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 7)) 1/3) (pow.f64 x 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2)) 1/3) x))) (*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (cbrt.f64 1/2))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 1/2) 2)))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 7)) 1/3) (pow.f64 x 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2)) 1/3) x))) (*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (cbrt.f64 1/2)))))","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(*.f64 1/2 (fabs.f64 (-.f64 y x)))","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) (pow.f64 1 1/3))","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 1/2 (*.f64 (pow.f64 1 1/3) (fabs.f64 (-.f64 y x))))","(*.f64 1/2 (fabs.f64 (-.f64 y x)))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3)))) x) (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (fabs.f64 (-.f64 y x)))))","(fma.f64 (*.f64 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 4) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 1/2) 4))) x (*.f64 1/2 (fabs.f64 (-.f64 y x))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (fabs.f64 (-.f64 y x))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/2)) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (*.f64 (cbrt.f64 1/2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3)))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (fabs.f64 (-.f64 y x))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/2)) 1/3))))) (pow.f64 x 2)) (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (fabs.f64 (-.f64 y x))))))","(fma.f64 (*.f64 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 4) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 1/2) 4))) x (fma.f64 (fma.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 (-.f64 y x))) 1/9) (cbrt.f64 (cbrt.f64 (/.f64 1 1/2)))) (fma.f64 (cbrt.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x)))) (*.f64 (*.f64 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -4) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 1/2) -4))) -1/9) (*.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (fabs.f64 (-.f64 y x))) 1/9)) (cbrt.f64 (cbrt.f64 (/.f64 1 1/2)))))) (*.f64 x x) (*.f64 1/2 (fabs.f64 (-.f64 y x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (pow.f64 (cbrt.f64 1/2) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (fabs.f64 (-.f64 y x))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/2)) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (*.f64 (cbrt.f64 1/2) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3)))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (fabs.f64 (-.f64 y x))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/2)) 1/3))))) (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 4)) 1/3))))))) (+.f64 (*.f64 (*.f64 (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))) (cbrt.f64 1/2)))) (*.f64 -4/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 (fabs.f64 (-.f64 y x)))))) (cbrt.f64 1/2)) (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))))) (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2)))))))) (pow.f64 x 3)) (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (fabs.f64 (-.f64 y x)))))))","(fma.f64 x (*.f64 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) 4) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 1/2) 4))) (fma.f64 (fma.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (fabs.f64 (-.f64 y x))) 1/9) (cbrt.f64 (cbrt.f64 (/.f64 1 1/2)))) (fma.f64 (cbrt.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x)))) (*.f64 (*.f64 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -4) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 1/2) -4))) -1/9) (*.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (fabs.f64 (-.f64 y x))) 1/9)) (cbrt.f64 (cbrt.f64 (/.f64 1 1/2)))))) (*.f64 x x) (fma.f64 (fma.f64 (*.f64 1/3 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -2) 1/9)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 1/2) -2)) (*.f64 (*.f64 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -4) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 1/2) -4))) -1/9)) (fma.f64 (fma.f64 -2/3 (/.f64 (*.f64 (cbrt.f64 (/.f64 1 (fabs.f64 (-.f64 y x)))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -2) (*.f64 1/2 1/2))) (+.f64 -2/9 1/27))) (cbrt.f64 1/2)) (/.f64 -4/27 (fabs.f64 (-.f64 y x)))) (cbrt.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x)))) (fma.f64 -1/3 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -2) (*.f64 1/2 1/2))) (+.f64 -2/9 1/27)) (*.f64 -2/27 (cbrt.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -2) (*.f64 1/2 1/2))))))) (pow.f64 x 3) (*.f64 1/2 (fabs.f64 (-.f64 y x))))))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(pow.f64 (+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x) 1/3)","(cbrt.f64 (fma.f64 1/2 (fabs.f64 (-.f64 y x)) x))","(*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (cbrt.f64 1/2))","(cbrt.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2)) 1/3) x))) (*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (cbrt.f64 1/2)))","(fma.f64 1/3 (*.f64 (*.f64 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -2) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 1/2) -2))) x) (cbrt.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x)))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 7)) 1/3) (pow.f64 x 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2)) 1/3) x))) (*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (cbrt.f64 1/2))))","(fma.f64 (*.f64 -1/9 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -7) 1/9)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 1/2) -7)) (*.f64 x x)) (fma.f64 1/3 (*.f64 (*.f64 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -2) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 1/2) -2))) x) (cbrt.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 1/2) 2)))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 7)) 1/3) (pow.f64 x 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (fabs.f64 (-.f64 y x)) 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/2) 2)) 1/3) x))) (*.f64 (pow.f64 (*.f64 1 (fabs.f64 (-.f64 y x))) 1/3) (cbrt.f64 1/2)))))","(fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -2)) (*.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -2) (*.f64 1/2 1/2))) (+.f64 -2/9 1/27)) (pow.f64 x 3))) (pow.f64 (cbrt.f64 1/2) -2)) (fma.f64 (*.f64 -1/9 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -7) 1/9)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 1/2) -7)) (*.f64 x x)) (fma.f64 1/3 (*.f64 (*.f64 (pow.f64 (pow.f64 (fabs.f64 (-.f64 y x)) -2) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 1/2) -2))) x) (cbrt.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x)))))))","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (neg.f64 (+.f64 (*.f64 -1 y) x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(*.f64 1/2 (fabs.f64 (-.f64 y x)))","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (-.f64 y x))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","x","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)","(+.f64 (*.f64 1/2 (fabs.f64 (+.f64 y (*.f64 -1 x)))) x)","(fma.f64 1/2 (fabs.f64 (-.f64 y x)) x)"]],"time":207.747802734375,"type":"simplify"},{"compiler":[[2197,1459]],"time":27.733154296875,"type":"eval"},{"alts":[["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","done",0.06640625],["(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)","done",0.7390404660627584],["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","done",0.7534015746739147],["(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) 3) 3) (cbrt.f64 1/4) x)","fresh",1.501170208728099]],"compiler":[[9,6],[16,13],[12,9],[19,16]],"count":[[83,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[79,0],"picked":[1,1]}],"min-error":[0.0078125],"time":12.89404296875,"type":"prune"},{"accuracy":[0.06640625],"baseline":[0.06640625],"branch":[["x",0.06640625,1],["y",0.06640625,1],["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))",0.06640625,1]],"compiler":[[3,2],[3,2],[10,7],[89,53]],"count":[[8,1]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)))) 3) 3) (cbrt.f64 1/4) x)","(fma.f64 (pow.f64 (cbrt.f64 (*.f64 (fabs.f64 (-.f64 x y)) (cbrt.f64 1/2))) 3) (cbrt.f64 1/4) x)","(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)) 3)","(fma.f64 (*.f64 (fabs.f64 (-.f64 y x)) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)","(pow.f64 (cbrt.f64 (fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)) 3)","(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))"]],"link":["."],"name":["Graphics.Rendering.Chart.Plot.AreaSpots:renderSpotLegend from Chart-1.5.3"],"oracle":[1.6959016661807078],"outputs":[["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)"]],"time":14.768798828125,"times":[["x",4.717041015625],["y",3.927978515625],["(+.f64 x (/.f64 (fabs.f64 (-.f64 y x)) 2))",4.205078125]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (fabs.f64 (-.f64 x y)) 1/2 x)","(fma.f64 (fabs.f64 (-.f64 y x)) 1/2 x)"]],"stop":[["fuel",1]],"time":38.2841796875,"type":"simplify"},{"time":0.015869140625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":8.458984375,"type":"end"}]
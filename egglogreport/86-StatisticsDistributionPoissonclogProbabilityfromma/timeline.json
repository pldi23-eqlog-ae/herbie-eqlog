[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.2866890099496686,0.21647945649260691,0.49683153355772447],[11,0.24573343709971596,0.2613355600901741,0.49293100281010993],[10,0.2106286603711851,0.30424139831393404,0.48512994131488085],[9,0.1404191069141234,0.37445095177099574,0.48512994131488085],[8,0.09361273794274894,0.43685944373282837,0.4695278183244227],[7,0.062408491961832624,0.499267935694661,0.4383235723435064],[6,0.0,0.5616764276564936,0.4383235723435064],[5,0.0,0.6240849196183262,0.37591508038167376],[4,0.0,0.7489019035419915,0.2510980964580085],[3,0.0,0.7489019035419915,0.2510980964580085],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":52.067138671875,"type":"analyze"},{"outcomes":[["body",256,"invalid",4.613037109375,109],["body",256,"valid",402.52490234375,8256]],"time":415.2529296875,"type":"sample"},{"compiler":[[11,7]],"inputs":[["0","1","2"],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","(-.f64 (-.f64 (*.f64 y (log.f64 x)) z) x)","(-.f64 (-.f64 (*.f64 z (log.f64 y)) x) y)","(-.f64 (-.f64 (*.f64 x (log.f64 z)) y) z)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 z y)))","(-.f64 (-.f64 (*.f64 y (log.f64 x)) z) x)","(fma.f64 (log.f64 x) y (neg.f64 (+.f64 z x)))","(-.f64 (-.f64 (*.f64 z (log.f64 y)) x) y)","(fma.f64 (log.f64 y) z (neg.f64 (+.f64 x y)))","(-.f64 (-.f64 (*.f64 x (log.f64 z)) y) z)","(fma.f64 (log.f64 z) x (neg.f64 (+.f64 z y)))"]],"symmetry":[[]],"time":70.201904296875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","(fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))"]],"time":18.13818359375,"type":"simplify"},{"compiler":[[19,10]],"time":0.341796875,"type":"eval"},{"alts":[["(fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))","fresh",0.08984375],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","next",0.0859375]],"compiler":[[11,7],[11,7],[11,7],[11,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.08203125],"time":1.22314453125,"type":"prune"},{"compiler":[[26,7]],"locations":[["(-.f64 (*.f64 x (log.f64 y)) z)",0.0078125,true],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)",0.0078125,true],["(*.f64 x (log.f64 y))",0.27734375,true]],"time":5.532958984375,"type":"localize"},{"count":[[3,96]],"series":[["(-.f64 (*.f64 x (log.f64 y)) z)","z","-inf",0.197021484375],["(-.f64 (*.f64 x (log.f64 y)) z)","z","inf",0.153076171875],["(-.f64 (*.f64 x (log.f64 y)) z)","z","0",0.16796875],["(-.f64 (*.f64 x (log.f64 y)) z)","y","-inf",0.167236328125],["(-.f64 (*.f64 x (log.f64 y)) z)","y","inf",0.162109375],["(-.f64 (*.f64 x (log.f64 y)) z)","y","0",0.154052734375],["(-.f64 (*.f64 x (log.f64 y)) z)","x","-inf",0.156005859375],["(-.f64 (*.f64 x (log.f64 y)) z)","x","inf",0.177001953125],["(-.f64 (*.f64 x (log.f64 y)) z)","x","0",0.166015625],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","z","-inf",0.2119140625],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","z","inf",0.2509765625],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","z","0",1.05517578125],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","y","-inf",0.2158203125],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","y","inf",0.219970703125],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","y","0",0.18798828125],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","x","-inf",0.190185546875],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","x","inf",0.18212890625],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","x","0",0.225830078125],["(*.f64 x (log.f64 y))","y","-inf",6.68212890625],["(*.f64 x (log.f64 y))","y","inf",6.458984375],["(*.f64 x (log.f64 y))","y","0",8.824951171875],["(*.f64 x (log.f64 y))","x","-inf",0.31787109375],["(*.f64 x (log.f64 y))","x","inf",0.3310546875],["(*.f64 x (log.f64 y))","x","0",18.556884765625]],"time":45.737060546875,"type":"series"},{"count":[[3,149]],"inputs":[["(*.f64 x (log.f64 y))","(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","(-.f64 (*.f64 x (log.f64 y)) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (log.f64 y)) 0) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (*.f64 (*.f64 x (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (log.f64 y))) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (*.f64 0 (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (cbrt.f64 (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (log.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (log.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) 0) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) (*.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))) (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) (*.f64 0 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (+.f64 z y)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 y) (*.f64 x (log.f64 y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (+.f64 (*.f64 x (log.f64 y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (-.f64 (*.f64 x (log.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (-.f64 y (*.f64 x (log.f64 y)))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (-.f64 y (*.f64 x (log.f64 y)))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 y (*.f64 x (log.f64 y))) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (*.f64 (neg.f64 (+.f64 z y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (-.f64 y (*.f64 x (log.f64 y)))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) (+.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 y (fma.f64 x (log.f64 y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 y) 0) (-.f64 z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (-.f64 z (*.f64 x (log.f64 y))) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 y) (-.f64 z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 0) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 y) (*.f64 x (log.f64 y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (-.f64 y (*.f64 x (log.f64 y)))) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 x (log.f64 y)) y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (-.f64 z (*.f64 x (log.f64 y))) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 y (fma.f64 x (log.f64 y) (neg.f64 z))))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 2)) (+.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) y)))) (-.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 z))) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 y (fma.f64 x (log.f64 y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y (fma.f64 x (log.f64 y) (neg.f64 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y (fma.f64 x (log.f64 y) (neg.f64 z)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 y (fma.f64 x (log.f64 y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 y (fma.f64 x (log.f64 y) (neg.f64 z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 z))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 2)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 z (*.f64 x (log.f64 y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 z))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (cbrt.f64 (*.f64 x (log.f64 y))) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (neg.f64 x) (log.f64 y)) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 y)) (cbrt.f64 (*.f64 y y)) (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (neg.f64 (cbrt.f64 (*.f64 y y))) (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 1 (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 y)) 1 (neg.f64 (+.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 y (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 y) (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 0) (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) (*.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (log.f64 y) (neg.f64 z))) (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) (*.f64 0 (fma.f64 x (log.f64 y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 z) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x (log.f64 y)) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 z))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z (*.f64 x (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 (neg.f64 x) (log.f64 y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 z (*.f64 x (log.f64 y))))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 z (*.f64 x (log.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (+.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (*.f64 (log.f64 y) (*.f64 x z))))) (-.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 z (*.f64 x (log.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (cbrt.f64 (*.f64 x (log.f64 y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (neg.f64 x) (log.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 z z)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (neg.f64 (cbrt.f64 (*.f64 z z))) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 y)) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 x (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 x (log.f64 y) (neg.f64 z)))))))"]],"rules":[["egg-rr",50],["egg-rr",71],["egg-rr",28]],"time":31.14697265625,"type":"rewrite"},{"count":[[245,169]],"inputs":[["(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 -1 (+.f64 y z))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(*.f64 -1 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(-.f64 (*.f64 (log.f64 y) x) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 (log.f64 y) x) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (+.f64 y z))","(neg.f64 (+.f64 y z))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 (+.f64 y z)))","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 y) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 -1 y)","(neg.f64 y)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 y)) z)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (*.f64 (log.f64 y) x) y)","(fma.f64 (log.f64 y) x (neg.f64 y))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(-.f64 (+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x)) y)","(fma.f64 (log.f64 y) x (neg.f64 (+.f64 y z)))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (log.f64 y) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) z)","(fma.f64 (log.f64 y) x (neg.f64 z))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 z))"]],"time":294.66796875,"type":"simplify"},{"compiler":[[2045,614]],"time":22.23095703125,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)) (neg.f64 (+.f64 z y)))","fresh",16.599941259768443],["(-.f64 (-.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 3) z) y)","fresh",0.2959938965266302],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","done",0.0859375],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","next",0.15072250976844204],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)) z) y)","fresh",0.16310502930532605]],"compiler":[[17,11],[14,10],[11,7],[18,12],[18,12],[17,11],[14,10],[18,12],[18,12]],"count":[[171,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[169,4],"picked":[1,1]}],"min-error":[0.02734375],"time":53.93408203125,"type":"prune"},{"compiler":[[65,27]],"locations":[["(cbrt.f64 (log.f64 y))",0.12109375,true],["(*.f64 x (cbrt.f64 (log.f64 y)))",0.28125,true],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y))))",0.33203125,true],["(pow.f64 (log.f64 y) 2)",0.565448779305326,true]],"time":15.676025390625,"type":"localize"},{"count":[[4,68]],"series":[["(cbrt.f64 (log.f64 y))","y","-inf",0.802001953125],["(cbrt.f64 (log.f64 y))","y","inf",0.796875],["(cbrt.f64 (log.f64 y))","y","0",0.781982421875],["(*.f64 x (cbrt.f64 (log.f64 y)))","y","-inf",1.239013671875],["(*.f64 x (cbrt.f64 (log.f64 y)))","y","inf",1.234130859375],["(*.f64 x (cbrt.f64 (log.f64 y)))","y","0",0.97900390625],["(*.f64 x (cbrt.f64 (log.f64 y)))","x","-inf",0.31201171875],["(*.f64 x (cbrt.f64 (log.f64 y)))","x","inf",0.36181640625],["(*.f64 x (cbrt.f64 (log.f64 y)))","x","0",1.256103515625],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y))))","x","-inf",0.25],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y))))","x","inf",0.283935546875],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y))))","x","0",1.114990234375],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y))))","y","-inf",0.6259765625],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y))))","y","inf",0.3349609375],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y))))","y","0",1.339111328125],["(pow.f64 (log.f64 y) 2)","y","-inf",0.39404296875],["(pow.f64 (log.f64 y) 2)","y","inf",0.366943359375],["(pow.f64 (log.f64 y) 2)","y","0",0.386962890625]],"time":13.10302734375,"type":"series"},{"count":[[4,109]],"inputs":[["(pow.f64 (log.f64 y) 2)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y))))","(*.f64 x (cbrt.f64 (log.f64 y)))","(cbrt.f64 (log.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 y) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (log.f64 y) 5/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 5/3) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (pow.f64 (log.f64 y) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 4/3) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (pow.f64 (pow.f64 (log.f64 y) 4/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 y) 4/3) 4/3) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 y)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) (neg.f64 (pow.f64 (log.f64 y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 y) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 y) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 x (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) (pow.f64 (*.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) (cbrt.f64 (log.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (*.f64 (pow.f64 (log.f64 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (cbrt.f64 (pow.f64 (log.f64 y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) (*.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 (*.f64 (log.f64 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 y) x) 2/3) (cbrt.f64 (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2) (*.f64 x (cbrt.f64 (log.f64 y))))) (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) (*.f64 x (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3) (cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2) (*.f64 x (cbrt.f64 (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) (cbrt.f64 (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) (*.f64 x (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 y))) (neg.f64 (pow.f64 (*.f64 (log.f64 y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (log.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log.f64 y) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (log.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 y) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) (log.f64 y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) x) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 x (cbrt.f64 (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) x)) (neg.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 y) (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (log.f64 y) (pow.f64 x 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 y))))))"]],"rules":[["egg-rr",19],["egg-rr",28],["egg-rr",34],["egg-rr",28]],"time":52.322998046875,"type":"rewrite"},{"count":[[177,118]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (log.f64 y) 2)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 (cbrt.f64 -1) x))","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) x)","(*.f64 (cbrt.f64 (log.f64 y)) x)","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))"]],"time":205.85791015625,"type":"simplify"},{"compiler":[[2070,992]],"time":19.784912109375,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)) (neg.f64 (+.f64 z y)))","fresh",16.599941259768443],["(-.f64 (-.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 3) z) y)","fresh",0.2959938965266302],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3))) z) y)","fresh",0.2985089597679379],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","fresh",0.37346148675793617],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","done",0.15072250976844204],["(-.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y))))) z) y)","fresh",0.3541539304626118],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","fresh",0.25398261722130416],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","done",0.0859375],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)) z) y)","next",0.16310502930532605]],"compiler":[[17,11],[14,10],[21,15],[20,14],[18,12],[26,13],[19,12],[11,7],[18,12],[17,11],[14,10],[21,15],[20,14],[26,13],[19,12],[18,12]],"count":[[123,9]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[118,4],"picked":[1,1]}],"min-error":[0.00390625],"time":31.135009765625,"type":"prune"},{"compiler":[[67,33]],"locations":[["(cbrt.f64 (log.f64 y))",0.12109375,false],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)",0.24609375,true],["(*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x))",0.33203125,true],["(pow.f64 (log.f64 y) 2)",0.565448779305326,false]],"time":18.342041015625,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","x","-inf",0.31787109375],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","x","inf",0.263916015625],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","x","0",1.236083984375],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","y","-inf",1.31103515625],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","y","inf",0.953857421875],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)","y","0",1.318115234375],["(*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x))","x","-inf",0.178955078125],["(*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x))","x","inf",0.160888671875],["(*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x))","x","0",0.14501953125],["(*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x))","y","-inf",0.19482421875],["(*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x))","y","inf",0.174072265625],["(*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x))","y","0",0.2060546875]],"time":6.6240234375,"type":"series"},{"count":[[2,62]],"inputs":[["(*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (*.f64 (pow.f64 (log.f64 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (pow.f64 (log.f64 y) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x)) (cbrt.f64 (*.f64 (*.f64 (pow.f64 (log.f64 y) 4/3) (*.f64 x x)) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 y)) x) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 (cbrt.f64 (log.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (pow.f64 (log.f64 y) 2/3) x)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (log.f64 y) 4/3) (*.f64 x x)) (log.f64 y))) (cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 (*.f64 (log.f64 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 y) x) 2/3) (cbrt.f64 (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 y) (*.f64 (pow.f64 (log.f64 y) 2/3) x))) (pow.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (log.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) (cbrt.f64 (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 2/3) (cbrt.f64 (*.f64 (log.f64 y) (*.f64 (pow.f64 (log.f64 y) 2/3) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 y))) (neg.f64 (pow.f64 (*.f64 (log.f64 y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (log.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log.f64 y) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (log.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 y) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 (log.f64 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (cbrt.f64 (pow.f64 (log.f64 y) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) (*.f64 x (cbrt.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x)) (pow.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 2/3) (cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (*.f64 (log.f64 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4/3)) x) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 y) x) 2/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x)) (neg.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (log.f64 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) (pow.f64 (log.f64 y) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (log.f64 y) 2)))))))"]],"rules":[["egg-rr",28],["egg-rr",34]],"time":44.340087890625,"type":"rewrite"},{"count":[[110,67]],"inputs":[["(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) x)","(*.f64 (pow.f64 (log.f64 y) 2/3) x)"]],"time":145.553955078125,"type":"simplify"},{"compiler":[[2028,1039]],"time":20.85986328125,"type":"eval"},{"alts":[["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3))) z) y)","fresh",0.2985089597679379],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","fresh",0.37346148675793617],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","done",0.15072250976844204],["(-.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y))))) z) y)","fresh",0.3541539304626118],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","next",0.25398261722130416],["(-.f64 (-.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 3) z) y)","fresh",0.2959938965266302],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","done",0.0859375],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)) x)) z) y)","fresh",0.3810502930532606]],"compiler":[[21,15],[20,14],[18,12],[26,13],[19,12],[14,10],[11,7],[20,14],[21,15],[20,14],[26,13],[19,12],[14,10],[20,14]],"count":[[127,8]],"kept":[{"done":[2,2],"fresh":[6,4],"new":[118,2],"picked":[1,0]}],"min-error":[0.00390625],"time":30.718994140625,"type":"prune"},{"compiler":[[70,27]],"locations":[["(cbrt.f64 (log.f64 y))",0.12109375,false],["(*.f64 x (cbrt.f64 (log.f64 y)))",0.28125,false],["(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y))))",0.33203125,true],["(pow.f64 (cbrt.f64 (log.f64 y)) 6)",1.268343675829435,true]],"time":16.065185546875,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y))))","x","-inf",0.173095703125],["(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y))))","x","inf",0.156005859375],["(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y))))","x","0",0.14599609375],["(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y))))","y","-inf",0.18994140625],["(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y))))","y","inf",0.170166015625],["(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y))))","y","0",0.184814453125],["(pow.f64 (cbrt.f64 (log.f64 y)) 6)","y","-inf",0.73583984375],["(pow.f64 (cbrt.f64 (log.f64 y)) 6)","y","inf",0.76904296875],["(pow.f64 (cbrt.f64 (log.f64 y)) 6)","y","0",0.752197265625]],"time":3.40087890625,"type":"series"},{"count":[[2,60]],"inputs":[["(pow.f64 (cbrt.f64 (log.f64 y)) 6)","(*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 y) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (pow.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4/3) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4/3) 4) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 y)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (log.f64 y) (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (pow.f64 (cbrt.f64 (log.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 y) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (log.f64 y) 3) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 y))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 3) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (pow.f64 (*.f64 (log.f64 y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 y) x) 2/3) (cbrt.f64 (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) (*.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3) (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3) (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 x (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (*.f64 (pow.f64 (log.f64 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y))))) (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4/3) (*.f64 x (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 (log.f64 y))) 2/3) (*.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (*.f64 (pow.f64 (log.f64 y) 2/3) x) (cbrt.f64 (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4/3) (*.f64 x (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (pow.f64 (cbrt.f64 (log.f64 y)) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4/3) (*.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (log.f64 y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log.f64 y) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (log.f64 y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 y) x) 3))))))"]],"rules":[["egg-rr",33],["egg-rr",27]],"time":46.3759765625,"type":"rewrite"},{"count":[[96,65]],"inputs":[["(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 y) 2))","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 y) 2))","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 y) 2))","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 y) 2))","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 (/.f64 1 y)) 2))","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 (/.f64 1 y)) 2))","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 (/.f64 1 y)) 2))","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 (/.f64 1 y)) 2))","(*.f64 (pow.f64 1 1/3) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2))","(*.f64 (pow.f64 1 1/3) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2))","(*.f64 (pow.f64 1 1/3) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2))","(*.f64 (pow.f64 1 1/3) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2))","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 y) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 y) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 y) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 y) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 (/.f64 1 y)) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 (/.f64 1 y)) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 (/.f64 1 y)) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 1 1/3) (pow.f64 (log.f64 (/.f64 1 y)) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 1 1/3) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 1 1/3) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 1 1/3) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (pow.f64 1 1/3) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2))","(pow.f64 (log.f64 y) 2)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)"]],"time":115.30712890625,"type":"simplify"},{"compiler":[[2536,1188]],"time":23.8310546875,"type":"eval"},{"alts":[["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","done",0.15072250976844204],["(-.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y))))) z) y)","fresh",0.3541539304626118],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","done",0.25398261722130416],["(-.f64 (-.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 3) z) y)","fresh",0.2959938965266302],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","done",0.0859375],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3))) z) y)","fresh",0.2985089597679379],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)) x)) z) y)","fresh",0.3810502930532606],["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 y) 3) 2) 1/3)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","fresh",0.35945772698949413]],"compiler":[[18,12],[26,13],[19,12],[14,10],[11,7],[21,15],[20,14],[22,16]],"count":[[146,8]],"kept":[{"done":[2,2],"fresh":[5,4],"new":[138,1],"picked":[1,1]}],"min-error":[0.00390625],"time":37.880859375,"type":"prune"},{"accuracy":[0.0859375],"baseline":[0.0859375],"branch":[["x",0.0859375,1],["y",0.0859375,1],["z",0.0859375,1],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)",0.0859375,1]],"compiler":[[4,3],[4,3],[4,3],[11,7],[195,91]],"count":[[13,1]],"inputs":[["(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (log.f64 y) 3) 2) 1/3)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","(-.f64 (-.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) 3) z) y)","(-.f64 (-.f64 (*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)) x)) z) y)","(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3))) z) y)","(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 y) 6) 1/3)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","(-.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y)))) (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (*.f64 x (cbrt.f64 (log.f64 y))))) z) y)","(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","(fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)) (neg.f64 (+.f64 z y)))","(-.f64 (-.f64 (pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 3) z) y)","(-.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y)))) z) y)","(-.f64 (-.f64 (*.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x)) z) y)","(fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))","(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)"]],"link":["."],"name":["Statistics.Distribution.Poisson:$clogProbability from math-functions-0.1.5.2"],"oracle":[16.757237817220805],"outputs":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)"]],"time":24.1689453125,"times":[["x",5.074951171875],["y",5.322998046875],["z",5.255859375],["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)",5.27685546875]],"type":"regimes"},{"compiler":[[11,7]],"inputs":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 (*.f64 x (log.f64 y)) z) y)","(fma.f64 x (log.f64 y) (neg.f64 (+.f64 z y)))"]],"stop":[["fuel",1]],"time":18.30419921875,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[11,7]],"remove-preprocessing":[[]],"time":8.948974609375,"type":"end"}]
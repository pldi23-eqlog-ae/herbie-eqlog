[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.6731702503748238,0.09170725150033832,0.23512249812483788],[11,0.6595117235556245,0.12097552325576544,0.21951275318861008],[10,0.6009751800447702,0.17951206676661968,0.21951275318861008],[9,0.5775605626404285,0.23414617404341698,0.18829326331615448],[8,0.46829234808683395,0.34341438859701157,0.18829326331615448],[7,0.43707285821437836,0.43707285821437836,0.1258542835712433],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.870849609375,"type":"analyze"},{"outcomes":[["body",256,"invalid",6.2080078125,186],["body",256,"valid",275.594970703125,8256]],"time":289.869140625,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(*.f64 (*.f64 (*.f64 x 3) x) y)","(*.f64 (*.f64 (*.f64 y 3) y) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 (*.f64 x 3) x) y)","(*.f64 3 (*.f64 x (*.f64 y x)))","(*.f64 (*.f64 (*.f64 y 3) y) x)","(*.f64 3 (*.f64 y (*.f64 y x)))"]],"symmetry":[[]],"time":74.865966796875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 (*.f64 x 3) x) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (*.f64 x 3) x) y)","(*.f64 3 (*.f64 x (*.f64 x y)))"]],"time":32.64599609375,"type":"simplify"},{"compiler":[[16,10]],"time":0.338134765625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 x 3) x) y)","fresh",8.48386268605504],["(*.f64 3 (*.f64 x (*.f64 x y)))","next",0.24837875976844204]],"compiler":[[9,6],[9,6],[9,6],[9,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.11328125],"time":1.1748046875,"type":"prune"},{"compiler":[[20,7]],"locations":[["(*.f64 x (*.f64 x y))",0.18359375,true],["(*.f64 3 (*.f64 x (*.f64 x y)))",0.24609375,true]],"time":5.003173828125,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 x (*.f64 x y))","y","-inf",0.26611328125],["(*.f64 x (*.f64 x y))","y","inf",0.14111328125],["(*.f64 x (*.f64 x y))","y","0",0.14697265625],["(*.f64 x (*.f64 x y))","x","-inf",0.177978515625],["(*.f64 x (*.f64 x y))","x","inf",0.14599609375],["(*.f64 x (*.f64 x y))","x","0",0.14306640625],["(*.f64 3 (*.f64 x (*.f64 x y)))","y","-inf",0.297119140625],["(*.f64 3 (*.f64 x (*.f64 x y)))","y","inf",0.434814453125],["(*.f64 3 (*.f64 x (*.f64 x y)))","y","0",0.77294921875],["(*.f64 3 (*.f64 x (*.f64 x y)))","x","-inf",0.18994140625],["(*.f64 3 (*.f64 x (*.f64 x y)))","x","inf",0.503173828125],["(*.f64 3 (*.f64 x (*.f64 x y)))","x","0",0.64990234375]],"time":4.010009765625,"type":"series"},{"count":[[2,77]],"inputs":[["(*.f64 3 (*.f64 x (*.f64 x y)))","(*.f64 x (*.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 3 (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x (*.f64 x y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 x (*.f64 x y)))) (pow.f64 (*.f64 3 (*.f64 x (*.f64 x y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 x (*.f64 x y))) 2/3) (cbrt.f64 (*.f64 3 (*.f64 x (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (*.f64 x y))) (*.f64 (pow.f64 (*.f64 x (*.f64 x y)) 2/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 x) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 x) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (*.f64 3 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (*.f64 3 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y 3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x (*.f64 x y)) 2/3) 3) (cbrt.f64 (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 x) (cbrt.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (*.f64 x (*.f64 x y)))) (pow.f64 (*.f64 x (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (*.f64 x y)) 2/3) (cbrt.f64 (*.f64 27 (*.f64 x (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 (*.f64 3 x) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (*.f64 x y)) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (*.f64 x (*.f64 x y)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 x (*.f64 x y)))) (neg.f64 (pow.f64 (*.f64 3 (*.f64 x (*.f64 x y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 x (*.f64 x y))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x (*.f64 x y)) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (*.f64 x (*.f64 x y)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 x (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 x (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (*.f64 x y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x (*.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 3 (*.f64 x (*.f64 x y))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 x (*.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 x (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 x y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3 (*.f64 x (*.f64 x y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x (*.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 x (*.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 3 (*.f64 x (*.f64 x y))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) x) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 x y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (*.f64 x y))) (pow.f64 (*.f64 x (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (*.f64 x y)) 2/3) (cbrt.f64 (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 x x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 x (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 x y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 x (*.f64 x y)))) (neg.f64 (pow.f64 (*.f64 x (*.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (*.f64 x y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (*.f64 x y)) 3))))))"]],"rules":[["egg-rr",32],["egg-rr",45]],"time":38.825927734375,"type":"rewrite"},{"count":[[125,81]],"inputs":[["(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)"]],"time":164.906982421875,"type":"simplify"},{"compiler":[[839,381]],"time":9.967041015625,"type":"eval"},{"alts":[["(*.f64 x (*.f64 (*.f64 3 x) y))","next",0.23828125],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x (*.f64 x y)) (cbrt.f64 3)))","fresh",0.3519325683790942],["(/.f64 (*.f64 x (*.f64 x y)) 1/3)","fresh",0.2936325195368841],["(*.f64 (*.f64 x x) (*.f64 y 3))","fresh",8.509145979000117]],"compiler":[[9,6],[13,10],[9,6],[9,6],[9,6],[13,10],[9,6],[9,6]],"count":[[83,4]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[81,4],"picked":[1,0]}],"min-error":[0.00390625],"time":16.678955078125,"type":"prune"},{"compiler":[[20,12]],"locations":[["(*.f64 x (*.f64 (*.f64 3 x) y))",0.1875,true],["(*.f64 (*.f64 3 x) y)",0.21484375,true]],"time":4.7509765625,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 x (*.f64 (*.f64 3 x) y))","y","-inf",0.14892578125],["(*.f64 x (*.f64 (*.f64 3 x) y))","y","inf",0.175048828125],["(*.f64 x (*.f64 (*.f64 3 x) y))","y","0",0.14306640625],["(*.f64 x (*.f64 (*.f64 3 x) y))","x","-inf",0.15283203125],["(*.f64 x (*.f64 (*.f64 3 x) y))","x","inf",0.177978515625],["(*.f64 x (*.f64 (*.f64 3 x) y))","x","0",0.15087890625],["(*.f64 (*.f64 3 x) y)","y","-inf",0.27001953125],["(*.f64 (*.f64 3 x) y)","y","inf",0.41796875],["(*.f64 (*.f64 3 x) y)","y","0",0.424072265625],["(*.f64 (*.f64 3 x) y)","x","-inf",0.618896484375],["(*.f64 (*.f64 3 x) y)","x","inf",0.35400390625],["(*.f64 (*.f64 3 x) y)","x","0",0.511962890625]],"time":3.68212890625,"type":"series"},{"count":[[2,74]],"inputs":[["(*.f64 (*.f64 3 x) y)","(*.f64 x (*.f64 (*.f64 3 x) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 x)) (*.f64 (pow.f64 (*.f64 3 x) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y 3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 3 x) 2/3) y) (cbrt.f64 (*.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 3 x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) (pow.f64 (*.f64 3 (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) (cbrt.f64 (*.f64 3 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 3 x))) (pow.f64 (*.f64 3 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 x) 2/3) (*.f64 y (cbrt.f64 (*.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 3 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 x y))) (neg.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 x y)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (sqrt.f64 3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 3) (*.f64 x y)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 3 (*.f64 x y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 (*.f64 x y) x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 3 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 (*.f64 x y) x))) (pow.f64 (*.f64 3 (*.f64 (*.f64 x y) x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 (*.f64 x y) x)) 2/3) (cbrt.f64 (*.f64 3 (*.f64 (*.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 x y))) (*.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 3 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) x) (cbrt.f64 (*.f64 3 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 3 (*.f64 x y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) 3) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (*.f64 x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 x x) 3) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 3 (*.f64 x y)))) (pow.f64 (*.f64 3 (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 (*.f64 x y)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 x y)) 2/3) (*.f64 x (cbrt.f64 (*.f64 3 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 (*.f64 x x) 3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 3 (*.f64 x y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 (*.f64 x y) x))) (neg.f64 (pow.f64 (*.f64 3 (*.f64 (*.f64 x y) x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 (*.f64 x y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 (*.f64 x y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 3 (*.f64 (*.f64 x y) x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 (*.f64 x y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 (*.f64 x y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3 (*.f64 (*.f64 x y) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 (*.f64 x y) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 (*.f64 x y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 3 (*.f64 (*.f64 x y) x)) 3))))))"]],"rules":[["egg-rr",37],["egg-rr",37]],"time":38.702880859375,"type":"rewrite"},{"count":[[122,77]],"inputs":[["(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))"]],"time":168.64599609375,"type":"simplify"},{"compiler":[[803,434]],"time":9.93408203125,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 x y) x) 1/3)","next",0.2936325195368841],["(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x (*.f64 x y)) (cbrt.f64 3)))","fresh",0.3519325683790942],["(*.f64 x (*.f64 (*.f64 3 x) y))","done",0.23828125],["(*.f64 (*.f64 x x) (*.f64 y 3))","fresh",8.509145979000117]],"compiler":[[9,6],[13,10],[9,6],[9,6],[9,6],[13,10],[9,6]],"count":[[81,4]],"kept":[{"done":[0,0],"fresh":[3,2],"new":[77,1],"picked":[1,1]}],"min-error":[0.00390625],"time":14.954833984375,"type":"prune"},{"compiler":[[20,7]],"locations":[["(*.f64 (*.f64 x y) x)",0.18359375,true],["(/.f64 (*.f64 (*.f64 x y) x) 1/3)",0.28515625,true]],"time":4.01904296875,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (*.f64 x y) x)","y","-inf",0.149169921875],["(*.f64 (*.f64 x y) x)","y","inf",0.175048828125],["(*.f64 (*.f64 x y) x)","y","0",0.13916015625],["(*.f64 (*.f64 x y) x)","x","-inf",0.14013671875],["(*.f64 (*.f64 x y) x)","x","inf",0.1669921875],["(*.f64 (*.f64 x y) x)","x","0",0.14111328125],["(/.f64 (*.f64 (*.f64 x y) x) 1/3)","y","-inf",0.15478515625],["(/.f64 (*.f64 (*.f64 x y) x) 1/3)","y","inf",0.18408203125],["(/.f64 (*.f64 (*.f64 x y) x) 1/3)","y","0",0.148193359375],["(/.f64 (*.f64 (*.f64 x y) x) 1/3)","x","-inf",0.188232421875],["(/.f64 (*.f64 (*.f64 x y) x) 1/3)","x","inf",0.1640625],["(/.f64 (*.f64 (*.f64 x y) x) 1/3)","x","0",0.18701171875]],"time":2.06201171875,"type":"series"},{"count":[[2,109]],"inputs":[["(/.f64 (*.f64 (*.f64 x y) x) 1/3)","(*.f64 (*.f64 x y) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) (*.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 0) (*.f64 (*.f64 (*.f64 x y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) (*.f64 0 (*.f64 (*.f64 (*.f64 x y) x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (*.f64 x y) x) 3)) (*.f64 (*.f64 (*.f64 x y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 (*.f64 x y) x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x y) x) 3)) (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 2/3) (cbrt.f64 (*.f64 (*.f64 (*.f64 x y) x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (sqrt.f64 3)) (*.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 3)) (*.f64 x (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 x y) x)) (sqrt.f64 3)) (*.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2/3) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x y) x)) (*.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 3)) (*.f64 (*.f64 x y) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 3)) (*.f64 (*.f64 x y) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (*.f64 x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 x y) x) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 x y) x) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (*.f64 (*.f64 x y) x) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (*.f64 (*.f64 x y) x) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) 3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2/3) 3) (cbrt.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 9)) (*.f64 x (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 x y) x) (cbrt.f64 9)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2/3) (sqrt.f64 3)) (*.f64 (cbrt.f64 (*.f64 (*.f64 x y) x)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (*.f64 (*.f64 x y) x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 9)) (*.f64 (*.f64 x y) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (*.f64 (*.f64 x y) x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 x y) x) -3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 x y) x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (*.f64 x y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -3 (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 2/3) (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x)))) (cbrt.f64 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 2/3) (cbrt.f64 (*.f64 (*.f64 x y) x))) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (*.f64 x (cbrt.f64 9))) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 (*.f64 x y) (cbrt.f64 9))) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x))) (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 2/3)) (cbrt.f64 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 x y) x)) (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 2/3)) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (*.f64 x y) x) (cbrt.f64 3)) (cbrt.f64 (cbrt.f64 1/9))) (pow.f64 (cbrt.f64 (cbrt.f64 1/9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (*.f64 x y) x) (sqrt.f64 3)) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (*.f64 x y) x) (sqrt.f64 3)) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (*.f64 x y) x)) (sqrt.f64 1/3)) (neg.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 x y) x) (cbrt.f64 9)) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 x y) x) (neg.f64 (sqrt.f64 1/3))) (neg.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (*.f64 x y) x) (sqrt.f64 3))) (neg.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 x y) x) (sqrt.f64 3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 x y) x) (cbrt.f64 3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x y) x)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (sqrt.f64 3)) (*.f64 x y)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 x y) (cbrt.f64 3)) x) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 x y) (sqrt.f64 3)) x) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (cbrt.f64 3)) (*.f64 x y)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 x y) x)) (sqrt.f64 3)) (pow.f64 (*.f64 (*.f64 x y) x) 2/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x y) x) 3)) (pow.f64 (*.f64 (*.f64 x y) x) 2/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 (*.f64 x y) (sqrt.f64 3))) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (*.f64 x (sqrt.f64 3))) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (*.f64 x y) x) (sqrt.f64 3)) 1) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (*.f64 x y) x) (cbrt.f64 3)) 1) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 x y) x)) (*.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2/3) (sqrt.f64 3))) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (*.f64 x y) x) (cbrt.f64 3)) 1) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (*.f64 x y) x) (sqrt.f64 3)) 1) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (*.f64 x y) x)) (cbrt.f64 1/3)) (neg.f64 (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 x y) x) -1) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (*.f64 x y) x) (cbrt.f64 3))) (neg.f64 (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x y) x) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (*.f64 x y) x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (*.f64 (*.f64 x y) x) -3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) x) (*.f64 (*.f64 (*.f64 x y) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x y) x) 0) (*.f64 (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) x) (*.f64 0 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 x y) x)) (*.f64 (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x y) x)) (pow.f64 (*.f64 (*.f64 x y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2/3) (cbrt.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) x) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 x y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 x y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 x (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) x))) (neg.f64 (pow.f64 (*.f64 (*.f64 x y) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 x y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 x y) x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) x) 3))))))"]],"rules":[["egg-rr",34],["egg-rr",75]],"time":29.35400390625,"type":"rewrite"},{"count":[[157,113]],"inputs":[["(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))","(*.f64 y (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)","(*.f64 y (pow.f64 x 2))","(*.f64 (*.f64 y x) x)"]],"time":165.06005859375,"type":"simplify"},{"compiler":[[1343,650]],"time":15.39892578125,"type":"eval"},{"alts":[["(*.f64 x (*.f64 (*.f64 3 x) y))","done",0.23828125],["(/.f64 (*.f64 x (*.f64 (*.f64 x y) (sqrt.f64 3))) (sqrt.f64 1/3))","fresh",0.25619125976844204],["(*.f64 (*.f64 x 3) (*.f64 x y))","next",0.21550751953688402],["(/.f64 (*.f64 (*.f64 x y) x) 1/3)","done",0.2936325195368841],["(/.f64 (*.f64 (*.f64 (*.f64 x y) (cbrt.f64 3)) x) (cbrt.f64 1/9))","fresh",0.2926750488422101],["(*.f64 (*.f64 x x) (*.f64 y 3))","fresh",8.509145979000117]],"compiler":[[9,6],[13,10],[9,6],[9,6],[13,10],[9,6],[13,10],[9,6],[13,10],[9,6]],"count":[[117,6]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[113,3],"picked":[1,1]}],"min-error":[0],"time":26.652099609375,"type":"prune"},{"compiler":[[18,9]],"locations":[["(*.f64 (*.f64 x 3) (*.f64 x y))",0.21550751953688402,true]],"time":4.035888671875,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (*.f64 x 3) (*.f64 x y))","y","-inf",0.179931640625],["(*.f64 (*.f64 x 3) (*.f64 x y))","y","inf",0.15087890625],["(*.f64 (*.f64 x 3) (*.f64 x y))","y","0",0.14990234375],["(*.f64 (*.f64 x 3) (*.f64 x y))","x","-inf",0.18408203125],["(*.f64 (*.f64 x 3) (*.f64 x y))","x","inf",0.162109375],["(*.f64 (*.f64 x 3) (*.f64 x y))","x","0",0.2099609375]],"time":1.10498046875,"type":"series"},{"count":[[1,39]],"inputs":[["(*.f64 (*.f64 x 3) (*.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 (*.f64 x y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 3)) (*.f64 (pow.f64 (*.f64 x 3) 2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 3 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 3 (*.f64 x y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x 3) 2/3) (*.f64 x y)) (cbrt.f64 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 x 3)) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x y) x) 3)) (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 2/3) (cbrt.f64 (*.f64 (*.f64 (*.f64 x y) x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 (*.f64 x 3))) (pow.f64 (*.f64 x 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 (*.f64 x x)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x 3) (cbrt.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 3 (*.f64 x x)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 3) 2/3) (*.f64 (*.f64 x y) (cbrt.f64 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 (*.f64 x 3) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 (*.f64 x y) x))) (neg.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 (*.f64 x y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (*.f64 x y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 (*.f64 x y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x y) x) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x y) x) 3) 3))))))"]],"rules":[["egg-rr",39]],"time":34.97607421875,"type":"rewrite"},{"count":[[63,41]],"inputs":[["(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 y (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))","(*.f64 3 (*.f64 y (pow.f64 x 2)))","(*.f64 3 (*.f64 (*.f64 y x) x))"]],"time":97.901123046875,"type":"simplify"},{"compiler":[[434,215]],"time":5.36083984375,"type":"eval"},{"alts":[["(*.f64 x (*.f64 (*.f64 3 x) y))","done",0.23828125],["(/.f64 (*.f64 x (*.f64 (*.f64 x y) (sqrt.f64 3))) (sqrt.f64 1/3))","fresh",0.25619125976844204],["(*.f64 (*.f64 x 3) (*.f64 x y))","done",0.21550751953688402],["(/.f64 (*.f64 (*.f64 x y) x) 1/3)","done",0.2936325195368841],["(/.f64 (*.f64 (*.f64 (*.f64 x y) (cbrt.f64 3)) x) (cbrt.f64 1/9))","fresh",0.2926750488422101],["(*.f64 (*.f64 x x) (*.f64 y 3))","fresh",8.509145979000117]],"compiler":[[9,6],[13,10],[9,6],[9,6],[13,10],[9,6]],"count":[[47,6]],"kept":[{"done":[2,2],"fresh":[3,3],"new":[41,0],"picked":[1,1]}],"min-error":[0],"time":7.10205078125,"type":"prune"},{"accuracy":[0.21550751953688402],"baseline":[0.21550751953688402],"branch":[["x",0.21550751953688402,1],["y",0.21550751953688405,1],["(*.f64 (*.f64 (*.f64 x 3) x) y)",0.21550751953688405,1],["(*.f64 (*.f64 x 3) x)",0.21550751953688402,1]],"compiler":[[3,2],[3,2],[9,6],[7,5],[84,46]],"count":[[10,1]],"inputs":[["(/.f64 (*.f64 x (*.f64 (*.f64 x y) (sqrt.f64 3))) (sqrt.f64 1/3))","(*.f64 (*.f64 x 3) (*.f64 x y))","(/.f64 (*.f64 (*.f64 (*.f64 x y) (cbrt.f64 3)) x) (cbrt.f64 1/9))","(/.f64 (*.f64 (*.f64 x y) x) 1/3)","(*.f64 x (*.f64 (*.f64 3 x) y))","(*.f64 (cbrt.f64 9) (*.f64 (*.f64 x (*.f64 x y)) (cbrt.f64 3)))","(/.f64 (*.f64 x (*.f64 x y)) 1/3)","(*.f64 (*.f64 x x) (*.f64 y 3))","(*.f64 3 (*.f64 x (*.f64 x y)))","(*.f64 (*.f64 (*.f64 x 3) x) y)"]],"link":["."],"name":["Diagrams.Segment:$catParam from diagrams-lib-1.3.0.3, A"],"oracle":[8.86763987552675],"outputs":[["(*.f64 (*.f64 x 3) (*.f64 x y))"]],"time":17.9970703125,"times":[["x",4.375],["y",4.35302734375],["(*.f64 (*.f64 (*.f64 x 3) x) y)",3.308837890625],["(*.f64 (*.f64 x 3) x)",4.195068359375]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(*.f64 (*.f64 x 3) (*.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x 3) (*.f64 x y))","(*.f64 (*.f64 (*.f64 x y) x) 3)"]],"stop":[["fuel",1]],"time":36.47900390625,"type":"simplify"},{"time":0.02099609375,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":8.052001953125,"type":"end"}]
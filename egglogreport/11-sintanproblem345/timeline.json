[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.0,0.99951171875,0.00048828125],[11,0.0,0.99951171875,0.00048828125],[10,0.0,0.99951171875,0.00048828125],[9,0.0,0.99951171875,0.00048828125],[8,0.0,0.99951171875,0.00048828125],[7,0.0,0.99951171875,0.00048828125],[6,0.0,0.99951171875,0.00048828125],[5,0.0,0.99951171875,0.00048828125],[4,0.0,0.99951171875,0.00048828125],[3,0.0,0.99951171875,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":217.76806640625,"type":"analyze"},{"outcomes":[["body",4096,"valid",93.821044921875,107],["body",512,"valid",212.04736328125,1484],["body",1024,"valid",919.40869140625,3143],["body",256,"valid",112.93798828125,1472],["body",2048,"valid",2944.35888671875,2050]],"time":4291.118896484375,"type":"sample"},{"compiler":[[10,6]],"inputs":[["0"],["(/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))","(/.f64 (-.f64 (sin.f64 x) x) (-.f64 (tan.f64 x) x))"]],"symmetry":[[]],"time":54.291015625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))","(/.f64 (-.f64 (sin.f64 x) x) (-.f64 (tan.f64 x) x))"]],"time":19.398193359375,"type":"simplify"},{"compiler":[[19,9]],"time":0.305908203125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (sin.f64 x) x) (-.f64 (tan.f64 x) x))","next",30.06091553067967]],"compiler":[[10,6],[10,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[30.06091553067967],"time":0.81103515625,"type":"prune"},{"compiler":[[23,6]],"locations":[["(/.f64 (-.f64 (sin.f64 x) x) (-.f64 (tan.f64 x) x))",0.015625,true],["(tan.f64 x)",0.27476503907376804,true],["(-.f64 (tan.f64 x) x)",1.0314596239921074,true],["(-.f64 (sin.f64 x) x)",1.0406686178732973,true]],"time":6.200927734375,"type":"localize"},{"count":[[4,48]],"series":[["(/.f64 (-.f64 (sin.f64 x) x) (-.f64 (tan.f64 x) x))","x","-inf",0.56494140625],["(/.f64 (-.f64 (sin.f64 x) x) (-.f64 (tan.f64 x) x))","x","inf",0.676025390625],["(/.f64 (-.f64 (sin.f64 x) x) (-.f64 (tan.f64 x) x))","x","0",0.297119140625],["(tan.f64 x)","x","-inf",0.243896484375],["(tan.f64 x)","x","inf",0.262939453125],["(tan.f64 x)","x","0",0.2060546875],["(-.f64 (tan.f64 x) x)","x","-inf",0.368896484375],["(-.f64 (tan.f64 x) x)","x","inf",0.3359375],["(-.f64 (tan.f64 x) x)","x","0",0.35302734375],["(-.f64 (sin.f64 x) x)","x","-inf",0.196044921875],["(-.f64 (sin.f64 x) x)","x","inf",0.31201171875],["(-.f64 (sin.f64 x) x)","x","0",0.37109375]],"time":4.35693359375,"type":"series"},{"count":[[4,191]],"inputs":[["(-.f64 (sin.f64 x) x)","(-.f64 (tan.f64 x) x)","(tan.f64 x)","(/.f64 (-.f64 (sin.f64 x) x) (-.f64 (tan.f64 x) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 x) x) (*.f64 (-.f64 (sin.f64 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sin.f64 x) x) 0) (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sin.f64 x) x) (*.f64 0 (-.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sin.f64 x) x)) (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sin.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sin.f64 x) 0) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 x) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (sin.f64 x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sin.f64 x) x)) (cbrt.f64 (pow.f64 (-.f64 (sin.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (sin.f64 x) x) 2)) (cbrt.f64 (-.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sin.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (sin.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (+.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 (sin.f64 x) x)))) (-.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sin.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sin.f64 x) x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sin.f64 x) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sin.f64 x) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sin.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sin.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sin.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 x (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sin.f64 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cbrt.f64 (sin.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sin.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (neg.f64 (cbrt.f64 (*.f64 x x))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 x (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (*.f64 x x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sin.f64 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) 1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 x) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (sin.f64 x) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (tan.f64 x) x) (*.f64 (-.f64 (tan.f64 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (tan.f64 x) x) 0) (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (tan.f64 x) x) (*.f64 0 (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (tan.f64 x) x)) (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (tan.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (tan.f64 x) 0) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 x) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (tan.f64 x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (tan.f64 x) x)) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (cbrt.f64 (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (tan.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (tan.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (+.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 (tan.f64 x) x)))) (-.f64 (cbrt.f64 (tan.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (tan.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (tan.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (tan.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (tan.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (tan.f64 x) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (tan.f64 x) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 x (tan.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (tan.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (neg.f64 (cbrt.f64 (*.f64 x x))) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 x (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (*.f64 x x)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (tan.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (tan.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (/.f64 1 (cos.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (tan.f64 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 x) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (tan.f64 x) 1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (tan.f64 x) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 x) (*.f64 (tan.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (tan.f64 x) 0) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (tan.f64 x) (*.f64 0 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (tan.f64 x)) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (tan.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 x)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (/.f64 1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 x)) (cbrt.f64 (pow.f64 (tan.f64 x) 2))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 x) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (*.f64 (neg.f64 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (-.f64 x (tan.f64 x))) (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) (*.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 0) (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (-.f64 x (tan.f64 x))) (neg.f64 x)) (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (*.f64 (/.f64 -1 (-.f64 x (tan.f64 x))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) (*.f64 0 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))) (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (*.f64 (/.f64 x (-.f64 x (tan.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (-.f64 x (tan.f64 x))) (/.f64 (sin.f64 x) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 x (tan.f64 x))) (/.f64 (-.f64 x (sin.f64 x)) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 (tan.f64 x) x)) (/.f64 (-.f64 x (sin.f64 x)) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (pow.f64 (-.f64 (tan.f64 x) x) 2)) (/.f64 (*.f64 (-.f64 (tan.f64 x) x) x) (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sin.f64 x) x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (sin.f64 x) x) 2)) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (tan.f64 x) x) (neg.f64 1/3)) (/.f64 (-.f64 (sin.f64 x) x) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 2)) (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (sin.f64 x)) (/.f64 1 (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sin.f64 x) x) (/.f64 -1 (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 x (tan.f64 x))) (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (sin.f64 x) x) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (pow.f64 (-.f64 (tan.f64 x) x) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 x (tan.f64 x))) (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (sin.f64 x) x) 2)) (-.f64 (tan.f64 x) x)) (cbrt.f64 (-.f64 (sin.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 (tan.f64 x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sin.f64 x) (-.f64 (tan.f64 x) x) (neg.f64 (*.f64 (-.f64 (tan.f64 x) x) x))) (/.f64 1 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (sin.f64 x) x) (cbrt.f64 (-.f64 (tan.f64 x) x))) (pow.f64 (cbrt.f64 (-.f64 (tan.f64 x) x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (sin.f64 x) x) (cbrt.f64 (-.f64 (tan.f64 x) x))) (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (tan.f64 x) x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 (tan.f64 x) x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 (tan.f64 x) x)) (*.f64 (-.f64 x (tan.f64 x)) x)) (*.f64 (-.f64 x (tan.f64 x)) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (*.f64 (-.f64 x (tan.f64 x)) (/.f64 x (cbrt.f64 (-.f64 (tan.f64 x) x))))) (*.f64 (-.f64 x (tan.f64 x)) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 x) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (*.f64 (-.f64 (tan.f64 x) x) (/.f64 x (cbrt.f64 (-.f64 (tan.f64 x) x))))) (*.f64 (-.f64 (tan.f64 x) x) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (-.f64 (tan.f64 x) x))) (-.f64 (tan.f64 x) x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (-.f64 (tan.f64 x) x))) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (/.f64 x (cbrt.f64 (-.f64 (tan.f64 x) x))))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (-.f64 (tan.f64 x) x))) (-.f64 x (tan.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (neg.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sin.f64 x) (-.f64 x (tan.f64 x))) (*.f64 (-.f64 (tan.f64 x) x) (neg.f64 x))) (*.f64 (-.f64 (tan.f64 x) x) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (sin.f64 x) (-.f64 (tan.f64 x) x) (neg.f64 (*.f64 (-.f64 (tan.f64 x) x) x)))) (neg.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sin.f64 x) x) (cbrt.f64 (-.f64 (tan.f64 x) x))) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sin.f64 x) (-.f64 (tan.f64 x) x) (neg.f64 (*.f64 (-.f64 (tan.f64 x) x) x))) (pow.f64 (-.f64 (tan.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sin.f64 x) x) (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 (tan.f64 x) x) (neg.f64 1/3)) (-.f64 (sin.f64 x) x)) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))) (cbrt.f64 (pow.f64 (-.f64 (sin.f64 x) x) 2))) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 2)) (cbrt.f64 (-.f64 x (sin.f64 x)))) (cbrt.f64 (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 2)) (cbrt.f64 (-.f64 (sin.f64 x) x))) (cbrt.f64 (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (sin.f64 x) x) (cbrt.f64 (-.f64 (tan.f64 x) x))) 1) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (sin.f64 x) (-.f64 (tan.f64 x) x) (neg.f64 (*.f64 (-.f64 (tan.f64 x) x) x))) 1) (pow.f64 (-.f64 (tan.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sin.f64 x) x) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (cbrt.f64 (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 2))) (cbrt.f64 (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (sin.f64 x) x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 2))) (cbrt.f64 (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (sin.f64 x) x) (cbrt.f64 (-.f64 (tan.f64 x) x))) 1) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (sin.f64 x) x) -1) (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (sin.f64 x) (-.f64 (tan.f64 x) x) (neg.f64 (*.f64 (-.f64 (tan.f64 x) x) x))) (-.f64 (tan.f64 x) x)) (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (sin.f64 x)) (cbrt.f64 (-.f64 (tan.f64 x) x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (-.f64 x (tan.f64 x))) (*.f64 (-.f64 x (tan.f64 x)) (neg.f64 x))) (pow.f64 (-.f64 (tan.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (sin.f64 x) x) (cbrt.f64 (-.f64 (tan.f64 x) x)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 (tan.f64 x) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) 2)) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 (tan.f64 x) x) (neg.f64 1/3)) (/.f64 (sin.f64 x) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (/.f64 -1 (-.f64 x (tan.f64 x))) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))))))"]],"rules":[["egg-rr",73],["egg-rr",28],["egg-rr",45],["egg-rr",45]],"time":36.906005859375,"type":"rewrite"},{"count":[[239,233]],"inputs":[["(*.f64 -1/6 (pow.f64 x 3))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (*.f64 1/120 (pow.f64 x 5)))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) (*.f64 -1/5040 (pow.f64 x 7))))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/362880 (pow.f64 x 9)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) (*.f64 -1/5040 (pow.f64 x 7)))))","(*.f64 -1 x)","(+.f64 (sin.f64 x) (*.f64 -1 x))","(+.f64 (sin.f64 x) (*.f64 -1 x))","(+.f64 (sin.f64 x) (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 (sin.f64 x) (*.f64 -1 x))","(+.f64 (sin.f64 x) (*.f64 -1 x))","(+.f64 (sin.f64 x) (*.f64 -1 x))","(*.f64 1/3 (pow.f64 x 3))","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5)))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5))))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 62/2835 (pow.f64 x 9)) (*.f64 2/15 (pow.f64 x 5)))))","(*.f64 -1 x)","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","-1/2","(-.f64 (*.f64 9/40 (pow.f64 x 2)) 1/2)","(-.f64 (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 -27/2800 (pow.f64 x 4))) 1/2)","(-.f64 (+.f64 (*.f64 9/40 (pow.f64 x 2)) (+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))) 1/2)","1","(-.f64 (+.f64 1 (*.f64 -1 (/.f64 (sin.f64 x) x))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (sin.f64 x) x)) (/.f64 (*.f64 (sin.f64 x) (-.f64 (*.f64 -1 (sin.f64 x)) (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 (cos.f64 x) (pow.f64 x 2))))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","(-.f64 (+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 (*.f64 -1 (sin.f64 x)) (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 x 3))) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (sin.f64 x) x)) (/.f64 (*.f64 (sin.f64 x) (-.f64 (*.f64 -1 (sin.f64 x)) (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 (cos.f64 x) (pow.f64 x 2)))))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","1","(+.f64 1 (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x)))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (*.f64 (cos.f64 x) (pow.f64 x 2)))) (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 x 3)))) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (*.f64 (cos.f64 x) (pow.f64 x 2)))) (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/6 (pow.f64 x 3))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (*.f64 1/120 (pow.f64 x 5)))","(fma.f64 -1/6 (pow.f64 x 3) (*.f64 1/120 (pow.f64 x 5)))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) (*.f64 -1/5040 (pow.f64 x 7))))","(fma.f64 -1/6 (pow.f64 x 3) (fma.f64 1/120 (pow.f64 x 5) (*.f64 -1/5040 (pow.f64 x 7))))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/362880 (pow.f64 x 9)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) (*.f64 -1/5040 (pow.f64 x 7)))))","(fma.f64 (pow.f64 x 3) -1/6 (fma.f64 1/362880 (pow.f64 x 9) (fma.f64 1/120 (pow.f64 x 5) (*.f64 -1/5040 (pow.f64 x 7)))))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (sin.f64 x) (*.f64 -1 x))","(-.f64 (sin.f64 x) x)","(+.f64 (sin.f64 x) (*.f64 -1 x))","(-.f64 (sin.f64 x) x)","(+.f64 (sin.f64 x) (*.f64 -1 x))","(-.f64 (sin.f64 x) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (sin.f64 x) (*.f64 -1 x))","(-.f64 (sin.f64 x) x)","(+.f64 (sin.f64 x) (*.f64 -1 x))","(-.f64 (sin.f64 x) x)","(+.f64 (sin.f64 x) (*.f64 -1 x))","(-.f64 (sin.f64 x) x)","(*.f64 1/3 (pow.f64 x 3))","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5)))","(fma.f64 1/3 (pow.f64 x 3) (*.f64 2/15 (pow.f64 x 5)))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (*.f64 2/15 (pow.f64 x 5))))","(fma.f64 (pow.f64 x 7) 17/315 (fma.f64 1/3 (pow.f64 x 3) (*.f64 2/15 (pow.f64 x 5))))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 62/2835 (pow.f64 x 9)) (*.f64 2/15 (pow.f64 x 5)))))","(fma.f64 (pow.f64 x 7) 17/315 (fma.f64 1/3 (pow.f64 x 3) (fma.f64 62/2835 (pow.f64 x 9) (*.f64 2/15 (pow.f64 x 5)))))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","(-.f64 (tan.f64 x) x)","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","(-.f64 (tan.f64 x) x)","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","(-.f64 (tan.f64 x) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","(-.f64 (tan.f64 x) x)","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","(-.f64 (tan.f64 x) x)","(+.f64 (/.f64 (sin.f64 x) (cos.f64 x)) (*.f64 -1 x))","(-.f64 (tan.f64 x) x)","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(fma.f64 1/3 (pow.f64 x 3) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 (pow.f64 x 3) 1/3 (fma.f64 2/15 (pow.f64 x 5) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 (pow.f64 x 7) 17/315 (fma.f64 (pow.f64 x 3) 1/3 (fma.f64 2/15 (pow.f64 x 5) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","(/.f64 (sin.f64 x) (cos.f64 x))","(tan.f64 x)","-1/2","(-.f64 (*.f64 9/40 (pow.f64 x 2)) 1/2)","(fma.f64 9/40 (*.f64 x x) -1/2)","(-.f64 (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 -27/2800 (pow.f64 x 4))) 1/2)","(fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) -1/2))","(-.f64 (+.f64 (*.f64 9/40 (pow.f64 x 2)) (+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))) 1/2)","(+.f64 (fma.f64 9/40 (*.f64 x x) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1/2)","1","(-.f64 (+.f64 1 (*.f64 -1 (/.f64 (sin.f64 x) x))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","(+.f64 1 (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (sin.f64 x) x)) (/.f64 (*.f64 (sin.f64 x) (-.f64 (*.f64 -1 (sin.f64 x)) (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 (cos.f64 x) (pow.f64 x 2))))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","(+.f64 (+.f64 1 (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) x)) (/.f64 (*.f64 (tan.f64 x) (-.f64 (tan.f64 x) (sin.f64 x))) (*.f64 x x)))","(-.f64 (+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 (*.f64 -1 (sin.f64 x)) (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 x 3))) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (sin.f64 x) x)) (/.f64 (*.f64 (sin.f64 x) (-.f64 (*.f64 -1 (sin.f64 x)) (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))))) (*.f64 (cos.f64 x) (pow.f64 x 2)))))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","(+.f64 (+.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) (pow.f64 x 3)) 1) (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) x)) (/.f64 (*.f64 (tan.f64 x) (-.f64 (tan.f64 x) (sin.f64 x))) (*.f64 x x)))","1","(+.f64 1 (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x)))","(+.f64 1 (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) x))","(+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (*.f64 (cos.f64 x) (pow.f64 x 2)))) (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x))))","(+.f64 (+.f64 1 (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) x)) (/.f64 (*.f64 (tan.f64 x) (-.f64 (tan.f64 x) (sin.f64 x))) (*.f64 x x)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 x 3)))) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 x) (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x)))) (*.f64 (cos.f64 x) (pow.f64 x 2)))) (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x)))))","(+.f64 (+.f64 (fma.f64 (pow.f64 (tan.f64 x) 2) (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) (pow.f64 x 3)) 1) (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) x)) (/.f64 (*.f64 (tan.f64 x) (-.f64 (tan.f64 x) (sin.f64 x))) (*.f64 x x)))"]],"time":161.033203125,"type":"simplify"},{"compiler":[[3766,1261]],"time":29.762939453125,"type":"eval"},{"alts":[["(+.f64 (fma.f64 9/40 (*.f64 x x) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1/2)","fresh",32.74964416877734],["(+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))","next",30.04695242178983]],"compiler":[[18,14],[15,8],[18,14],[15,8]],"count":[[234,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[233,2],"picked":[1,0]}],"min-error":[0],"time":56.89404296875,"type":"prune"},{"compiler":[[41,8]],"locations":[["(tan.f64 x)",0.27476503907376804,false],["(+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))",0.7813053864846551,true],["(-.f64 (tan.f64 x) x)",1.0314596239921074,false],["(-.f64 x (tan.f64 x))",1.0314596239921074,true]],"time":8.5,"type":"localize"},{"count":[[2,24]],"series":[["(+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))","x","-inf",0.587158203125],["(+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))","x","inf",0.784912109375],["(+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))","x","0",0.6220703125],["(-.f64 x (tan.f64 x))","x","-inf",0.2021484375],["(-.f64 x (tan.f64 x))","x","inf",0.198974609375],["(-.f64 x (tan.f64 x))","x","0",0.31494140625]],"time":2.83984375,"type":"series"},{"count":[[2,124]],"inputs":[["(-.f64 x (tan.f64 x))","(+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (tan.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (tan.f64 x)) (*.f64 (-.f64 x (tan.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 x (tan.f64 x)) 0) (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (tan.f64 x)) (*.f64 0 (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 x (tan.f64 x))) (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x 0) (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (tan.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (tan.f64 x) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -1) (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (tan.f64 x) x)) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (cbrt.f64 (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (tan.f64 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2)) (cbrt.f64 (*.f64 x (tan.f64 x))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (*.f64 0 (cbrt.f64 (-.f64 (tan.f64 x) x))))) (cbrt.f64 (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (tan.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (cbrt.f64 (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (tan.f64 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (tan.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (tan.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 x (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (tan.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (tan.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (tan.f64 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 x (tan.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 (tan.f64 x) x) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (tan.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (tan.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 (tan.f64 x) 2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (tan.f64 x))) (cbrt.f64 (pow.f64 (tan.f64 x) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (tan.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 x (tan.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (-.f64 x (tan.f64 x))) (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) (*.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 0) (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) (*.f64 0 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))) (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (-.f64 x (tan.f64 x))) (/.f64 (sin.f64 x) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 (sin.f64 x) x) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (sin.f64 x) x) (-.f64 x (tan.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) 2)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 x (-.f64 x (tan.f64 x))) 2)) (cbrt.f64 (/.f64 (*.f64 x (sin.f64 x)) (neg.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (+.f64 (cbrt.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x))) (cbrt.f64 (/.f64 x (-.f64 x (tan.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 x (-.f64 x (tan.f64 x))) 2)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) 2)) (cbrt.f64 (/.f64 (*.f64 x (sin.f64 x)) (neg.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (+.f64 (cbrt.f64 (/.f64 x (-.f64 x (tan.f64 x)))) (cbrt.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sin.f64 x) (-.f64 x (tan.f64 x)) (*.f64 (-.f64 (tan.f64 x) x) x)) (/.f64 -1 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 2)) (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (fma.f64 (sin.f64 x) (-.f64 x (tan.f64 x)) (*.f64 (-.f64 (tan.f64 x) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 x (tan.f64 x))) (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 (tan.f64 x) x)) (-.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sin.f64 x) (-.f64 (tan.f64 x) x) (*.f64 (-.f64 x (tan.f64 x)) x)) (/.f64 1 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sin.f64 x) x) (/.f64 1 (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (sin.f64 x)) (/.f64 1 (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 2)) (cbrt.f64 (fma.f64 (sin.f64 x) (-.f64 x (tan.f64 x)) (*.f64 (-.f64 (tan.f64 x) x) x)))) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (sin.f64 x) (-.f64 (tan.f64 x) x) (*.f64 (-.f64 x (tan.f64 x)) x)) 1) (pow.f64 (-.f64 (tan.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (sin.f64 x) (-.f64 x (tan.f64 x)) (*.f64 (-.f64 (tan.f64 x) x) x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 2))) (cbrt.f64 (neg.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (-.f64 (tan.f64 x) x))) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (/.f64 x (cbrt.f64 (-.f64 x (tan.f64 x)))))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 (-.f64 x (tan.f64 x)))) (-.f64 (tan.f64 x) x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 (-.f64 x (tan.f64 x)))) (-.f64 x (tan.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (neg.f64 (sin.f64 x)))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sin.f64 x) (-.f64 (tan.f64 x) x) (*.f64 (-.f64 x (tan.f64 x)) x)) (pow.f64 (-.f64 (tan.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sin.f64 x) (-.f64 x (tan.f64 x)) (*.f64 (-.f64 (tan.f64 x) x) x)) (neg.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sin.f64 x) x) (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x (sin.f64 x)) 1) (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sin.f64 x) x) 1) (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 x (cbrt.f64 (-.f64 x (tan.f64 x)))) (/.f64 (sin.f64 x) (cbrt.f64 (-.f64 (tan.f64 x) x)))) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (sin.f64 x) (cbrt.f64 (-.f64 (tan.f64 x) x))) (/.f64 x (cbrt.f64 (-.f64 x (tan.f64 x))))) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (-.f64 (tan.f64 x) x))) (-.f64 (tan.f64 x) x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (neg.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (sin.f64 x) (cbrt.f64 (-.f64 (tan.f64 x) x))) (-.f64 x (tan.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (sin.f64 x)) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (*.f64 (-.f64 x (tan.f64 x)) (/.f64 x (cbrt.f64 (-.f64 x (tan.f64 x)))))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sin.f64 x) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (*.f64 (-.f64 (tan.f64 x) x) (/.f64 x (cbrt.f64 (-.f64 x (tan.f64 x)))))) (*.f64 (-.f64 (tan.f64 x) x) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (*.f64 (-.f64 (tan.f64 x) x) (/.f64 (sin.f64 x) (cbrt.f64 (-.f64 (tan.f64 x) x))))) (*.f64 (-.f64 (tan.f64 x) x) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) x) (*.f64 (-.f64 x (tan.f64 x)) (/.f64 (sin.f64 x) (cbrt.f64 (-.f64 (tan.f64 x) x))))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 (-.f64 x (tan.f64 x)))) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (-.f64 (tan.f64 x) x))))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2)) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (sin.f64 x) x)) (-.f64 x (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 x (sin.f64 x))) (-.f64 (tan.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 (sin.f64 x) x) (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (/.f64 (-.f64 (sin.f64 x) x) (-.f64 x (tan.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 (sin.f64 x) (-.f64 x (tan.f64 x)) (*.f64 (-.f64 (tan.f64 x) x) x)) (pow.f64 (-.f64 (tan.f64 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (-.f64 x (tan.f64 x))) (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x (-.f64 x (tan.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 x (-.f64 x (tan.f64 x))) 2)) (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) 2)) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (/.f64 1 (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 x)) (/.f64 1 (-.f64 x (tan.f64 x))) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 (tan.f64 x) x) (neg.f64 1/3)) (/.f64 (sin.f64 x) (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) 2)) (cbrt.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x))) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 (tan.f64 x) x)) (sin.f64 x) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (sin.f64 x) (-.f64 x (tan.f64 x))) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (-.f64 x (tan.f64 x))) x (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x (-.f64 (tan.f64 x) x)) (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 (-.f64 (tan.f64 x) x)) (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x (-.f64 x (tan.f64 x))) 2)) (cbrt.f64 (/.f64 x (-.f64 x (tan.f64 x)))) (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 x (tan.f64 x)) (neg.f64 1/3)) (/.f64 x (cbrt.f64 (pow.f64 (-.f64 (tan.f64 x) x) 2))) (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) (-.f64 x (tan.f64 x))) (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x (-.f64 x (tan.f64 x))) (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) 1 (/.f64 x (-.f64 x (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (-.f64 x (tan.f64 x))) 1 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)))))))"]],"rules":[["egg-rr",76],["egg-rr",48]],"time":32.38916015625,"type":"rewrite"},{"count":[[148,151]],"inputs":[["(*.f64 -1/3 (pow.f64 x 3))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 -2/15 (pow.f64 x 5)))","(+.f64 (*.f64 -17/315 (pow.f64 x 7)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 -2/15 (pow.f64 x 5))))","(+.f64 (*.f64 -17/315 (pow.f64 x 7)) (+.f64 (*.f64 -62/2835 (pow.f64 x 9)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 -2/15 (pow.f64 x 5)))))","x","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","x","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","-1/2","(-.f64 (*.f64 9/40 (pow.f64 x 2)) 1/2)","(-.f64 (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 -27/2800 (pow.f64 x 4))) 1/2)","(-.f64 (+.f64 (*.f64 9/40 (pow.f64 x 2)) (+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))) 1/2)","1","(-.f64 (+.f64 1 (*.f64 -1 (/.f64 (sin.f64 x) x))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 2) (cos.f64 x))) (pow.f64 x 2))) (+.f64 1 (*.f64 -1 (/.f64 (sin.f64 x) x)))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 2) (cos.f64 x))) (pow.f64 x 2))) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (sin.f64 x) x)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 2))) (pow.f64 x 3)))))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","1","(+.f64 1 (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 2) (cos.f64 x))) (pow.f64 x 2))) (+.f64 1 (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 2) (cos.f64 x))) (pow.f64 x 2))) (+.f64 1 (+.f64 (/.f64 (pow.f64 (sin.f64 x) 3) (*.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 x 3)))) (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/3 (pow.f64 x 3))","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 -2/15 (pow.f64 x 5)))","(fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2/15 (pow.f64 x 5)))","(+.f64 (*.f64 -17/315 (pow.f64 x 7)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 -2/15 (pow.f64 x 5))))","(fma.f64 (pow.f64 x 7) -17/315 (fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2/15 (pow.f64 x 5))))","(+.f64 (*.f64 -17/315 (pow.f64 x 7)) (+.f64 (*.f64 -62/2835 (pow.f64 x 9)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 -2/15 (pow.f64 x 5)))))","(fma.f64 -17/315 (pow.f64 x 7) (fma.f64 (pow.f64 x 9) -62/2835 (fma.f64 -1/3 (pow.f64 x 3) (*.f64 -2/15 (pow.f64 x 5)))))","x","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","(-.f64 x (tan.f64 x))","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","(-.f64 x (tan.f64 x))","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","(-.f64 x (tan.f64 x))","x","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","(-.f64 x (tan.f64 x))","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","(-.f64 x (tan.f64 x))","(+.f64 (*.f64 -1 (/.f64 (sin.f64 x) (cos.f64 x))) x)","(-.f64 x (tan.f64 x))","-1/2","(-.f64 (*.f64 9/40 (pow.f64 x 2)) 1/2)","(fma.f64 9/40 (*.f64 x x) -1/2)","(-.f64 (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 -27/2800 (pow.f64 x 4))) 1/2)","(fma.f64 9/40 (*.f64 x x) (fma.f64 -27/2800 (pow.f64 x 4) -1/2))","(-.f64 (+.f64 (*.f64 9/40 (pow.f64 x 2)) (+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))) 1/2)","(+.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1/2)","1","(-.f64 (+.f64 1 (*.f64 -1 (/.f64 (sin.f64 x) x))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","(+.f64 1 (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) x))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 2) (cos.f64 x))) (pow.f64 x 2))) (+.f64 1 (*.f64 -1 (/.f64 (sin.f64 x) x)))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","(-.f64 (+.f64 1 (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) x)) (/.f64 (-.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (pow.f64 (tan.f64 x) 2)) (*.f64 x x)))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 2) (cos.f64 x))) (pow.f64 x 2))) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (sin.f64 x) x)) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 3))) (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (cos.f64 x) 2))) (pow.f64 x 3)))))) (*.f64 -1 (/.f64 (sin.f64 x) (*.f64 (cos.f64 x) x))))","(+.f64 (-.f64 (-.f64 (-.f64 1 (/.f64 (sin.f64 x) x)) (/.f64 (-.f64 (*.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (tan.f64 x)) (pow.f64 (tan.f64 x) 3)) (pow.f64 x 3))) (/.f64 (-.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (pow.f64 (tan.f64 x) 2)) (*.f64 x x))) (/.f64 (tan.f64 x) x))","1","(+.f64 1 (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x)))","(+.f64 1 (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) x))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 2) (cos.f64 x))) (pow.f64 x 2))) (+.f64 1 (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x))))","(-.f64 (+.f64 1 (/.f64 (-.f64 (tan.f64 x) (sin.f64 x)) x)) (/.f64 (-.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (pow.f64 (tan.f64 x) 2)) (*.f64 x x)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (cos.f64 x) 2))) (/.f64 (pow.f64 (sin.f64 x) 2) (cos.f64 x))) (pow.f64 x 2))) (+.f64 1 (+.f64 (/.f64 (pow.f64 (sin.f64 x) 3) (*.f64 (pow.f64 (cos.f64 x) 3) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 3) (*.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 x 3)))) (*.f64 -1 (/.f64 (-.f64 (sin.f64 x) (/.f64 (sin.f64 x) (cos.f64 x))) x))))))","(-.f64 (-.f64 (-.f64 (-.f64 (pow.f64 (/.f64 (tan.f64 x) x) 3) (*.f64 (pow.f64 (tan.f64 x) 2) (/.f64 (sin.f64 x) (pow.f64 x 3)))) (/.f64 (-.f64 (sin.f64 x) (tan.f64 x)) x)) -1) (/.f64 (-.f64 (*.f64 (sin.f64 x) (tan.f64 x)) (pow.f64 (tan.f64 x) 2)) (*.f64 x x)))"]],"time":89.0419921875,"type":"simplify"},{"compiler":[[5480,1762]],"time":39.23291015625,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1/2)","next",32.74964416877734],["(+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))","done",30.04695242178983]],"compiler":[[18,14],[15,8],[18,14]],"count":[[276,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[274,1],"picked":[1,1]}],"min-error":[0],"time":77.5009765625,"type":"prune"},{"compiler":[[64,46]],"locations":[["(pow.f64 x 4)",0.00390625,true],["(*.f64 27/112000 (pow.f64 x 6))",0.0234375,true],["(fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))",0.0703125,true],["(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))",20.578125000000004,true]],"time":16.9951171875,"type":"localize"},{"count":[[4,24]],"series":[["(pow.f64 x 4)","x","-inf",0.85986328125],["(pow.f64 x 4)","x","inf",0.27294921875],["(pow.f64 x 4)","x","0",0.217041015625],["(*.f64 27/112000 (pow.f64 x 6))","x","-inf",0.141845703125],["(*.f64 27/112000 (pow.f64 x 6))","x","inf",0.219970703125],["(*.f64 27/112000 (pow.f64 x 6))","x","0",0.2919921875],["(fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))","x","-inf",0.223876953125],["(fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))","x","inf",0.22607421875],["(fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))","x","0",0.26904296875],["(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","x","-inf",0.443115234375],["(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","x","inf",0.501953125],["(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","x","0",0.552001953125]],"time":4.368896484375,"type":"series"},{"count":[[4,146]],"inputs":[["(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))","(*.f64 27/112000 (pow.f64 x 6))","(pow.f64 x 4)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 0) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) (*.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) (*.f64 0 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 27/112000 (pow.f64 x 6)) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) (cbrt.f64 (pow.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 2)) (cbrt.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 6) 27/112000 (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 6) (sqrt.f64 27/112000)) (sqrt.f64 27/112000) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 27/112000 (*.f64 x x)) (pow.f64 x 4) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 27/112000) (*.f64 (cbrt.f64 729/12544000000) (pow.f64 x 6)) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 27/112000 (pow.f64 x 6))) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 27/112000 (pow.f64 x 6) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (cbrt.f64 27/112000)) (*.f64 (cbrt.f64 729/12544000000) (pow.f64 x 4)) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 6) (cbrt.f64 27/112000)) (cbrt.f64 729/12544000000) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 27/112000) (*.f64 (pow.f64 x 6) (sqrt.f64 27/112000)) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 729/12544000000) (pow.f64 x 4)) (*.f64 (*.f64 x x) (cbrt.f64 27/112000)) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 (pow.f64 x 4) 27/112000) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -27/2800 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (pow.f64 x 8)) (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -27/2800 (pow.f64 x 4))) (cbrt.f64 (*.f64 729/7840000 (pow.f64 x 8))) (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4) -27/2800 (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -27/2800) (*.f64 (cbrt.f64 729/7840000) (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -27/2800 (*.f64 x x)) (*.f64 x x) (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 27/112000 (pow.f64 x 6)) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 27/112000 (pow.f64 x 6)) 1 (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -27/2800 (pow.f64 x 4)) 1 (*.f64 27/112000 (pow.f64 x 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 9/40 (*.f64 x x) (*.f64 -27/2800 (pow.f64 x 4))) (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) 0) (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) (*.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 9/40) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 9/40 (*.f64 x x) (*.f64 -27/2800 (pow.f64 x 4))) 1) (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))) (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) (*.f64 0 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) (*.f64 (*.f64 x x) 9/40))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 27/112000 (pow.f64 x 6)) (fma.f64 9/40 (*.f64 x x) (*.f64 -27/2800 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (*.f64 x x) 9/40) (*.f64 27/112000 (pow.f64 x 6))) (*.f64 -27/2800 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 27/112000 (pow.f64 x 6)) (*.f64 (*.f64 x x) 9/40)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) 2)) (cbrt.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) (cbrt.f64 (pow.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 2)) (*.f64 (*.f64 x x) 9/40))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 2)) (cbrt.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) (*.f64 (*.f64 x x) 9/40))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) (*.f64 (*.f64 x x) 9/40))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (sqrt.f64 9/40)) (sqrt.f64 9/40) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 9/40 (*.f64 x x) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x 9/40) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (cbrt.f64 9/40)) (cbrt.f64 81/1600) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 (pow.f64 x 4)) 9/40) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/40)) (cbrt.f64 (*.f64 81/1600 (pow.f64 x 4))) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 9/40)) (*.f64 x (sqrt.f64 9/40)) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) (*.f64 (*.f64 x x) 9/40))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))) 1 (*.f64 (*.f64 x x) 9/40))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x x) 9/40) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) 9/40) 1 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 27/112000 (pow.f64 x 6)) 0) (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 27/112000 (pow.f64 x 6)) (*.f64 (*.f64 27/112000 (pow.f64 x 6)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 27/112000 (pow.f64 x 6))) (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 27/112000 (pow.f64 x 6)) (*.f64 0 (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 27/112000) (*.f64 (cbrt.f64 729/12544000000) (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 729/12544000000) (pow.f64 x 6)) (cbrt.f64 27/112000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 27/112000 (pow.f64 x 6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 27/112000)) (*.f64 (cbrt.f64 729/12544000000) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 729/12544000000) (pow.f64 x 4)) (*.f64 (*.f64 x x) (cbrt.f64 27/112000)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 27/112000 (pow.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 6) 27/112000)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 6) (cbrt.f64 27/112000)) (cbrt.f64 729/12544000000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 6) (sqrt.f64 27/112000)) (sqrt.f64 27/112000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27/112000 (*.f64 x x)) (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 (pow.f64 x 4) 27/112000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 27/112000) (*.f64 (pow.f64 x 6) (sqrt.f64 27/112000)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 27/112000 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27/112000 (pow.f64 x 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4) (*.f64 27/112000 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 729/12544000000) (*.f64 (pow.f64 x 6) (cbrt.f64 27/112000)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4) 27/112000) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 27/112000 (pow.f64 x 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 27/112000 (pow.f64 x 6)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 27/112000)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 27/112000)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 27/112000)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 27/112000 (pow.f64 x 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 27/112000 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 27/112000 (pow.f64 x 6)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 4) 0) (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x 4) (*.f64 (pow.f64 x 4) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 x 4)) (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x 4) (*.f64 0 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x x)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 4)) (cbrt.f64 (pow.f64 x 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 8)) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 (pow.f64 x 4)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x 4)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 4)) (*.f64 x x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (*.f64 x x)) 1) (*.f64 (neg.f64 (*.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) x) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 x)) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x 4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x (*.f64 2 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3) (+.f64 1/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3) (+.f64 1 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 6) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x 4)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x x)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 6) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x 4)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x 4)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 x x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 x (*.f64 2 6)))))))"]],"rules":[["egg-rr",35],["egg-rr",30],["egg-rr",40],["egg-rr",41]],"time":33.6611328125,"type":"rewrite"},{"count":[[170,153]],"inputs":[["(*.f64 -27/2800 (pow.f64 x 4))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(*.f64 27/112000 (pow.f64 x 6))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(*.f64 27/112000 (pow.f64 x 6))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(*.f64 9/40 (pow.f64 x 2))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 9/40 (pow.f64 x 2)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))","(*.f64 27/112000 (pow.f64 x 6))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))","(*.f64 27/112000 (pow.f64 x 6))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -27/2800 (pow.f64 x 4))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(*.f64 27/112000 (pow.f64 x 6))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(*.f64 27/112000 (pow.f64 x 6))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(*.f64 9/40 (pow.f64 x 2))","(*.f64 (*.f64 9/40 x) x)","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 9/40 (pow.f64 x 2)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 (*.f64 9/40 x) x))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))","(fma.f64 (pow.f64 x 4) -27/2800 (fma.f64 9/40 (*.f64 x x) (*.f64 27/112000 (pow.f64 x 6))))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))","(fma.f64 (pow.f64 x 4) -27/2800 (fma.f64 9/40 (*.f64 x x) (*.f64 27/112000 (pow.f64 x 6))))","(*.f64 27/112000 (pow.f64 x 6))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))","(fma.f64 (pow.f64 x 4) -27/2800 (fma.f64 9/40 (*.f64 x x) (*.f64 27/112000 (pow.f64 x 6))))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))","(fma.f64 (pow.f64 x 4) -27/2800 (fma.f64 9/40 (*.f64 x x) (*.f64 27/112000 (pow.f64 x 6))))","(*.f64 27/112000 (pow.f64 x 6))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (*.f64 27/112000 (pow.f64 x 6)))","(fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))","(fma.f64 (pow.f64 x 4) -27/2800 (fma.f64 9/40 (*.f64 x x) (*.f64 27/112000 (pow.f64 x 6))))","(+.f64 (*.f64 -27/2800 (pow.f64 x 4)) (+.f64 (*.f64 9/40 (pow.f64 x 2)) (*.f64 27/112000 (pow.f64 x 6))))","(fma.f64 (pow.f64 x 4) -27/2800 (fma.f64 9/40 (*.f64 x x) (*.f64 27/112000 (pow.f64 x 6))))"]],"time":90.19189453125,"type":"simplify"},{"compiler":[[3260,2360]],"time":45.73193359375,"type":"eval"},{"alts":[["(+.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1/2)","done",32.74964416877734],["(+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))","done",30.04695242178983]],"compiler":[[18,14],[15,8]],"count":[[155,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[153,0],"picked":[1,1]}],"min-error":[0],"time":36.1689453125,"type":"prune"},{"accuracy":[0],"baseline":[30.04695242178983],"branch":[["x",0,3],["(/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))",0.2969524217898299,2]],"compiler":[[2,1],[10,6],[67,37]],"count":[[5,3]],"inputs":[["(+.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1/2)","(+.f64 (fma.f64 9/40 (*.f64 x x) (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1/2)","(+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))","(/.f64 (-.f64 (sin.f64 x) x) (-.f64 (tan.f64 x) x))","(/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))"]],"link":["."],"name":["sintan (problem 3.4.5)"],"oracle":[62.806748797684364],"outputs":[["(+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))","(+.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1/2)","(+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))"]],"time":14.568115234375,"times":[["x",9.968017578125],["(/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))",3.2958984375]],"type":"regimes"},{"bstep":[[0.0009976555059424367,3495.7724458261373,15.402099609375],[-32.59303543867799,-0.007599221567222652,16.06787109375]],"compiler":[[12,8],[2,1]],"method":["binary-search","binary-search"],"time":31.56005859375,"type":"bsearch"},{"compiler":[[54,27]],"inputs":[["(if (<=.f64 x -573382743189467/17592186044416) (+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x)))) (if (<=.f64 x 4600873947961837/4611686018427387904) (+.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1/2) (+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x -573382743189467/17592186044416) (+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x)))) (if (<=.f64 x 4600873947961837/4611686018427387904) (+.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1/2) (+.f64 (/.f64 (sin.f64 x) (-.f64 (tan.f64 x) x)) (/.f64 x (-.f64 x (tan.f64 x))))))","(if (<=.f64 x -573382743189467/17592186044416) (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x))) (if (<=.f64 x 4600873947961837/4611686018427387904) (+.f64 (fma.f64 (*.f64 x x) 9/40 (fma.f64 -27/2800 (pow.f64 x 4) (*.f64 27/112000 (pow.f64 x 6)))) -1/2) (/.f64 (-.f64 x (sin.f64 x)) (-.f64 x (tan.f64 x)))))"]],"stop":[["done",1]],"time":27.551025390625,"type":"simplify"},{"time":0.02294921875,"type":"soundness"},{"compiler":[[54,27]],"remove-preprocessing":[[]],"time":17.223876953125,"type":"end"}]
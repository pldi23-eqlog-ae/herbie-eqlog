[{"compiler":[[71,33]],"method":["search"],"sampling":[[12,0.5348775386810303,0.00036585330963134766,0.4647566080093384],[11,0.5348775386810303,0.0007317066192626953,0.46439075469970703],[10,0.5341458320617676,0.0014634132385253906,0.46439075469970703],[9,0.5326824188232422,0.0029268264770507813,0.46439075469970703],[8,0.5326824188232422,0.0058536529541015625,0.46146392822265625],[7,0.5268287658691406,0.011707305908203125,0.46146392822265625],[6,0.5151214599609375,0.02341461181640625,0.46146392822265625],[5,0.5151214599609375,0.0468292236328125,0.43804931640625],[4,0.468292236328125,0.093658447265625,0.43804931640625],[3,0.3746337890625,0.18731689453125,0.43804931640625],[2,0.3746337890625,0.3746337890625,0.250732421875],[1,0.0,0.749267578125,0.250732421875],[0,0.0,0.749267578125,0.250732421875]],"time":2.239990234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.160888671875,2],["body",256,"valid",697.71826171875,8256]],"time":705.137939453125,"type":"sample"},{"compiler":[[68,31]],"inputs":[["0"],["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))","(fabs.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))))"]],"symmetry":[[]],"time":64.218994140625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))"]],"method":["egg-herbie"],"outputs":[["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))","(fabs.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))))"]],"time":30.830078125,"type":"simplify"},{"compiler":[[94,47]],"time":0.80712890625,"type":"eval"},{"alts":[["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))","next",0.12175751953688403],["(fabs.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))))","fresh",0.47494125976844204]],"compiler":[[68,31],[27,20],[68,31],[27,20]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0234375],"time":2.1728515625,"type":"prune"},{"compiler":[[405,117]],"locations":[["(*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))",0.08203125,true],["(*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))))",0.09375,true],["(*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))",0.171875,true],["(sqrt.f64 (PI.f64))",1.0,true]],"time":45.4609375,"type":"localize"},{"count":[[4,36]],"series":[["(*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))","x","-inf",0.15185546875],["(*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))","x","inf",0.171142578125],["(*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))","x","0",0.178955078125],["(*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))))","x","-inf",2.416015625],["(*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))))","x","inf",1.72021484375],["(*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))))","x","0",2.6640625],["(*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))","x","-inf",0.81005859375],["(*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))","x","inf",0.717041015625],["(*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))","x","0",0.759033203125]],"time":9.819091796875,"type":"series"},{"count":[[4,205]],"inputs":[["(sqrt.f64 (PI.f64))","(*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))","(*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))))","(*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -1) (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (PI.f64))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))) (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (PI.f64)) (cbrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (PI.f64))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))) (neg.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (PI.f64))))) (pow.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (PI.f64)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (PI.f64)))) (neg.f64 (pow.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (PI.f64)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))) (fabs.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (PI.f64))) (fabs.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (PI.f64)) 0) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (PI.f64)) (pow.f64 (sqrt.f64 (PI.f64)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (PI.f64))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (PI.f64) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (PI.f64) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (PI.f64))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (PI.f64) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) (PI.f64)) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (PI.f64) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (PI.f64) 3/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (neg.f64 (pow.f64 (PI.f64) 3/2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (PI.f64))))))))","((#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2/3) (*.f64 (cbrt.f64 4/9) (pow.f64 (fabs.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 8 3)) (/.f64 (pow.f64 (fabs.f64 x) 3) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 4 3)) (*.f64 (pow.f64 (fabs.f64 x) 3) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (cbrt.f64 2/3)) (cbrt.f64 (*.f64 4/9 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 4/9 (pow.f64 x 6))) (*.f64 (fabs.f64 x) (cbrt.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) (cbrt.f64 2/3)) (cbrt.f64 4/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/3 (fabs.f64 x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 (fabs.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/3 (*.f64 x x)) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (*.f64 2/3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 2/3 (*.f64 x x)) (cbrt.f64 (fabs.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) (sqrt.f64 2/3)) (sqrt.f64 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2/3) (*.f64 (sqrt.f64 2/3) (pow.f64 (fabs.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -2/3 (pow.f64 (fabs.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (fabs.f64 x) 3) -3) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2/3 (pow.f64 (fabs.f64 x) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 2 (pow.f64 (fabs.f64 x) 3)) (cbrt.f64 1/3)) (cbrt.f64 (/.f64 1 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 2 (pow.f64 (fabs.f64 x) 3)) (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 (fabs.f64 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 1/3 (pow.f64 (fabs.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 x) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (pow.f64 (fabs.f64 x) 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) -2) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 (fabs.f64 x) 3)) (cbrt.f64 1/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 (fabs.f64 x) 3)) (sqrt.f64 1/3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fabs.f64 x) 3) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 2 (pow.f64 (fabs.f64 x) 3)) (cbrt.f64 1/3))) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 2 (pow.f64 (fabs.f64 x) 3)) (sqrt.f64 1/3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (fabs.f64 x) 3)) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) -2) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (pow.f64 (fabs.f64 x) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 (fabs.f64 x) 3) 3) 8/27) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fabs.f64 x) (cbrt.f64 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -2/3 (pow.f64 (fabs.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (fabs.f64 x) 3) 3) 8/27))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (pow.f64 (fabs.f64 x) 5) (+.f64 1/5 (*.f64 (*.f64 x x) 1/21)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)) (sqrt.f64 (PI.f64))) (/.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (+.f64 1/5 (*.f64 (*.f64 x x) 1/21))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64)))) (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (pow.f64 (fabs.f64 x) 5) (+.f64 1/5 (*.f64 (*.f64 x x) 1/21)))) (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (+.f64 1/5 (*.f64 (*.f64 x x) 1/21))) (sqrt.f64 (PI.f64))) (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64)))) (/.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (sqrt.f64 (PI.f64)))) (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64)))) (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)) (sqrt.f64 (PI.f64)))) (/.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64)))) (/.f64 (*.f64 2 (fabs.f64 x)) (sqrt.f64 (PI.f64)))) (/.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) (+.f64 2/3 (*.f64 (*.f64 x x) 1/5))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64)))) (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64)))) (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))) (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64)))) (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 2 (fabs.f64 x)))) (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (pow.f64 (fabs.f64 x) 3) (+.f64 2/3 (*.f64 (*.f64 x x) 1/5)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)) (sqrt.f64 (PI.f64))) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (sqrt.f64 (PI.f64))) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 2 (fabs.f64 x)) (sqrt.f64 (PI.f64))) (+.f64 (/.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) (+.f64 2/3 (*.f64 (*.f64 x x) 1/5))) (sqrt.f64 (PI.f64))) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (+.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (+.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 2 (fabs.f64 x))) (+.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (pow.f64 (fabs.f64 x) 3) (+.f64 2/3 (*.f64 (*.f64 x x) 1/5)))) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (/.f64 (pow.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) 2/3) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))) (/.f64 (pow.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) 2/3) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (pow.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) 2/3) (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))) (pow.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) 2/3) (cbrt.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (cbrt.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (pow.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (PI.f64) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) (neg.f64 1/4)) (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (+.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21)) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (+.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (pow.f64 (PI.f64) (neg.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (pow.f64 (PI.f64) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (pow.f64 (PI.f64) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (neg.f64 (pow.f64 (PI.f64) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (sqrt.f64 (*.f64 (PI.f64) 441))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (sqrt.f64 (*.f64 (PI.f64) 441))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (sqrt.f64 (PI.f64))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (sqrt.f64 (*.f64 441 (PI.f64)))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (sqrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (neg.f64 (sqrt.f64 (*.f64 441 (PI.f64))))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (neg.f64 (sqrt.f64 (*.f64 441 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) 21) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))))) (sqrt.f64 (*.f64 (PI.f64) 441)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (neg.f64 (sqrt.f64 (*.f64 (PI.f64) 441)))) (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)))) (*.f64 (sqrt.f64 (PI.f64)) (neg.f64 (sqrt.f64 (*.f64 (PI.f64) 441)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (*.f64 (PI.f64) 441))) (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (*.f64 (sqrt.f64 (PI.f64)) (sqrt.f64 (*.f64 (PI.f64) 441))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (*.f64 441 (PI.f64)))) (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (*.f64 (sqrt.f64 (PI.f64)) (sqrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (neg.f64 (sqrt.f64 (PI.f64)))) (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) -1/21))) (*.f64 (sqrt.f64 (PI.f64)) (neg.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (neg.f64 (sqrt.f64 (*.f64 441 (PI.f64))))) (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)))) (*.f64 (sqrt.f64 (PI.f64)) (neg.f64 (sqrt.f64 (*.f64 441 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) 21) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))))) (neg.f64 (sqrt.f64 (*.f64 (PI.f64) 441))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (neg.f64 (sqrt.f64 (*.f64 (PI.f64) 441)))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (neg.f64 (sqrt.f64 (*.f64 (PI.f64) 441)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (neg.f64 (sqrt.f64 (PI.f64)))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) -1/21))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) -1/21) (sqrt.f64 (PI.f64))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (*.f64 (neg.f64 (sqrt.f64 (*.f64 (PI.f64) 441))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (*.f64 (neg.f64 (sqrt.f64 (*.f64 (PI.f64) 441))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (neg.f64 (sqrt.f64 (PI.f64)))) (*.f64 (neg.f64 (sqrt.f64 (*.f64 (PI.f64) 441))) (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))))) (*.f64 (neg.f64 (sqrt.f64 (*.f64 (PI.f64) 441))) (neg.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) -1/21) (neg.f64 (sqrt.f64 (PI.f64)))) (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (*.f64 (neg.f64 (sqrt.f64 (*.f64 441 (PI.f64)))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (*.f64 (neg.f64 (sqrt.f64 (*.f64 441 (PI.f64)))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (neg.f64 (sqrt.f64 (PI.f64)))) (*.f64 (neg.f64 (sqrt.f64 (*.f64 441 (PI.f64)))) (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))))) (*.f64 (neg.f64 (sqrt.f64 (*.f64 441 (PI.f64)))) (neg.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (*.f64 441 (PI.f64))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (*.f64 (sqrt.f64 (*.f64 441 (PI.f64))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (neg.f64 (sqrt.f64 (PI.f64)))) (*.f64 (sqrt.f64 (*.f64 441 (PI.f64))) (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))))) (*.f64 (sqrt.f64 (*.f64 441 (PI.f64))) (neg.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (*.f64 (PI.f64) 441)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (*.f64 (sqrt.f64 (*.f64 (PI.f64) 441)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (neg.f64 (sqrt.f64 (PI.f64)))) (*.f64 (sqrt.f64 (*.f64 (PI.f64) 441)) (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))))) (*.f64 (sqrt.f64 (*.f64 (PI.f64) 441)) (neg.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (sqrt.f64 (*.f64 441 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (neg.f64 (sqrt.f64 (PI.f64)))) (*.f64 (sqrt.f64 (PI.f64)) (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))))) (*.f64 (sqrt.f64 (PI.f64)) (neg.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (neg.f64 (sqrt.f64 (PI.f64)))) (*.f64 21 (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))))) (neg.f64 (sqrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (sqrt.f64 (PI.f64))))) (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))) (neg.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))) (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (PI.f64) -1/2)) (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (neg.f64 (pow.f64 (PI.f64) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (neg.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (PI.f64) -1/2) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (pow.f64 (PI.f64) -1/2) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (*.f64 441 (PI.f64)))))))))","((#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (sqrt.f64 1/5)) (*.f64 (pow.f64 x 4) (sqrt.f64 1/5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fabs.f64 x) (cbrt.f64 1/5)) (/.f64 (pow.f64 x 4) (cbrt.f64 25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (*.f64 1/5 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4) (sqrt.f64 1/5)) (*.f64 (fabs.f64 x) (sqrt.f64 1/5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4) (cbrt.f64 1/5)) (/.f64 (fabs.f64 x) (cbrt.f64 25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4) (*.f64 (fabs.f64 x) 1/5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fabs.f64 x) 5)) (sqrt.f64 1/5)) (*.f64 (pow.f64 (pow.f64 (fabs.f64 x) 5) 2/3) (sqrt.f64 1/5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fabs.f64 x) 5)) (*.f64 (pow.f64 (pow.f64 (fabs.f64 x) 5) 2/3) 1/5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) (sqrt.f64 1/5)) (*.f64 (*.f64 x x) (sqrt.f64 1/5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fabs.f64 x) 3) (cbrt.f64 1/5)) (/.f64 (*.f64 x x) (cbrt.f64 25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 x) 3) (*.f64 (*.f64 x x) 1/5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (pow.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) 2/3) (cbrt.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 3)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/5 (cbrt.f64 (pow.f64 (fabs.f64 x) 5))) (pow.f64 (pow.f64 (fabs.f64 x) 5) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/5) (*.f64 (cbrt.f64 1/25) (pow.f64 (fabs.f64 x) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/5) (/.f64 (pow.f64 (fabs.f64 x) 5) (cbrt.f64 25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -1/5 (pow.f64 (fabs.f64 x) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/5 (pow.f64 x 4)) (fabs.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (cbrt.f64 1/5)) (cbrt.f64 1/25))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 1/5 (pow.f64 x 4)) (cbrt.f64 (fabs.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/5 (fabs.f64 x)) (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/5) (*.f64 (sqrt.f64 1/5) (pow.f64 (fabs.f64 x) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/5) (*.f64 (pow.f64 (fabs.f64 x) 5) (sqrt.f64 1/5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/5 (pow.f64 (fabs.f64 x) 5)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (sqrt.f64 1/5)) (sqrt.f64 1/5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (cbrt.f64 1/5)) (cbrt.f64 (/.f64 1 25)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/5 (pow.f64 (fabs.f64 x) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fabs.f64 x) 5) 1/5)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fabs.f64 x) 5)) -1/5)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (cbrt.f64 1/5)) (cbrt.f64 25))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (fabs.f64 x) 5)) -5)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (sqrt.f64 1/5)) (sqrt.f64 5))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fabs.f64 x) 5) 5)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (sqrt.f64 1/5))) (neg.f64 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (fabs.f64 x) 5) (cbrt.f64 1/5))) (neg.f64 (cbrt.f64 25)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/5 (pow.f64 (fabs.f64 x) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) 3))))))"]],"rules":[["egg-rr",44],["egg-rr",87],["egg-rr",40],["egg-rr",34]],"time":57.716064453125,"type":"rewrite"},{"count":[[241,207]],"inputs":[["(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 2/3 (pow.f64 (fabs.f64 x) 3))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (+.f64 (*.f64 1/21 (pow.f64 (fabs.f64 x) 7)) (+.f64 (*.f64 2 (fabs.f64 x)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/21 (pow.f64 (fabs.f64 x) 7) (fma.f64 2 (fabs.f64 x) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))","(*.f64 1/5 (pow.f64 (fabs.f64 x) 5))"]],"time":142.76806640625,"type":"simplify"},{"compiler":[[10831,4790]],"time":75.81689453125,"type":"eval"},{"alts":[["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))","done",0.12175751953688403],["(fabs.f64 (/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (sqrt.f64 (*.f64 441 (PI.f64)))))","next",0.2109375],["(fabs.f64 (/.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (PI.f64)))","fresh",0.33984375],["(fabs.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64)))))))","fresh",0.30859375]],"compiler":[[68,31],[38,27],[35,24],[40,28],[38,27],[35,24],[40,28]],"count":[[209,4]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[207,3],"picked":[1,1]}],"min-error":[0],"time":76.051025390625,"type":"prune"},{"compiler":[[218,124]],"locations":[["(/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))",0.10546875,true],["(/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (sqrt.f64 (*.f64 441 (PI.f64))))",0.19921875,true],["(*.f64 2/3 (*.f64 x x))",0.23046875,true],["(sqrt.f64 (PI.f64))",1.0,false]],"time":45.348876953125,"type":"localize"},{"count":[[3,36]],"series":[["(/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))","x","-inf",0.380859375],["(/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))","x","inf",0.369140625],["(/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))","x","0",0.48388671875],["(/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (sqrt.f64 (*.f64 441 (PI.f64))))","x","-inf",0.879150390625],["(/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (sqrt.f64 (*.f64 441 (PI.f64))))","x","inf",1.10107421875],["(/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (sqrt.f64 (*.f64 441 (PI.f64))))","x","0",0.9169921875],["(*.f64 2/3 (*.f64 x x))","x","-inf",0.166015625],["(*.f64 2/3 (*.f64 x x))","x","inf",0.343017578125],["(*.f64 2/3 (*.f64 x x))","x","0",0.5390625]],"time":5.357177734375,"type":"series"},{"count":[[3,154]],"inputs":[["(*.f64 2/3 (*.f64 x x))","(/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (sqrt.f64 (*.f64 441 (PI.f64))))","(/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2/3 (*.f64 x x)) 1/2) (*.f64 (*.f64 2/3 (*.f64 x x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (*.f64 x x)) (*.f64 (*.f64 2/3 (*.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2/3 (*.f64 x x)) 0) (*.f64 2/3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 2/3 (*.f64 x x))) (*.f64 1/2 (*.f64 2/3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (*.f64 x x)) (*.f64 0 (*.f64 2/3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 2/3 (*.f64 x x))) (*.f64 2/3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 2/3)) (*.f64 x (sqrt.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2/3) x) (*.f64 (sqrt.f64 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2/3 (*.f64 x x))) (cbrt.f64 (*.f64 (pow.f64 x 4) 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 4/9)) (cbrt.f64 (*.f64 2/3 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (sqrt.f64 2/3)) (sqrt.f64 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 2/3)) (cbrt.f64 4/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/3 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2/3) (*.f64 (sqrt.f64 2/3) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2/3) (*.f64 (cbrt.f64 4/9) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 2/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/3 (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 2/3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2/3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2/3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 2/3 x) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 (pow.f64 x 4)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -2/3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2/3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 8/27 (pow.f64 x 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2/3 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/3 (*.f64 x x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2/3 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 2/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2/3) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -2/3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 8/27 (pow.f64 x 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) 1/2) (*.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) (*.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) 0) (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/21 (sqrt.f64 (PI.f64))) (*.f64 (pow.f64 x 6) (fabs.f64 x))) (*.f64 (/.f64 1/21 (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/21 (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (*.f64 (/.f64 1/21 (sqrt.f64 (PI.f64))) (*.f64 (pow.f64 x 6) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64))))) (*.f64 1/2 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) (*.f64 0 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64))))) (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (/.f64 1/21 (sqrt.f64 (PI.f64)))) (*.f64 (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))) (/.f64 1/21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (/.f64 1/21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (*.f64 -21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -21 (sqrt.f64 (PI.f64)))) (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (*.f64 -21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 9261)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 2)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64))))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 2)) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64))))) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 2) (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 2) (*.f64 441 (PI.f64)))) (cbrt.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/21 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 441 (PI.f64)) (neg.f64 1/4)) (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/21 (sqrt.f64 (PI.f64)))) (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 1/21) (pow.f64 (PI.f64) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (/.f64 1/21 (sqrt.f64 (PI.f64))))) (cbrt.f64 (/.f64 1 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64))))) (pow.f64 (*.f64 441 (PI.f64)) (neg.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 2)) (/.f64 1/21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (*.f64 -21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (neg.f64 (/.f64 1/21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/21 (sqrt.f64 (PI.f64))) (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64))))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (/.f64 1/21 (sqrt.f64 (PI.f64))))) (cbrt.f64 (*.f64 441 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/21 (sqrt.f64 (PI.f64)))) (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (cbrt.f64 (*.f64 441 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64)))))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (/.f64 1/21 (sqrt.f64 (PI.f64)))))) (cbrt.f64 (*.f64 441 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 441 (PI.f64)) (neg.f64 1/4)) (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64))))) (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 2))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64))))) (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 2))) (cbrt.f64 (*.f64 441 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64))))) 1) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (/.f64 1/21 (sqrt.f64 (PI.f64))))) 1) (*.f64 (cbrt.f64 (*.f64 441 (PI.f64))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))))) (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 2))) (*.f64 (cbrt.f64 (*.f64 -21 (sqrt.f64 (PI.f64)))) (cbrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (/.f64 1/21 (sqrt.f64 (PI.f64)))))) (neg.f64 (cbrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 441 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (sqrt.f64 (*.f64 441 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (*.f64 -21 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 1/21) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/21 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 1/21)) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 2) (*.f64 441 (PI.f64)))) (cbrt.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))))) (cbrt.f64 (sqrt.f64 (*.f64 441 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 2) (*.f64 441 (PI.f64)))) (cbrt.f64 (neg.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x)))))) (cbrt.f64 (*.f64 -21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 9261)) (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 2))) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 1/21) 1) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) 1/21)) (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (*.f64 -21 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (*.f64 -21 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (*.f64 -21 (sqrt.f64 (PI.f64)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 1/21 (sqrt.f64 (PI.f64)))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) 1/2) (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) 0) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))) (*.f64 1/2 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (*.f64 0 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sqrt.f64 (PI.f64)))) (/.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 6) (sqrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (fabs.f64 x) (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 6) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (fabs.f64 x) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 2)) (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 x) (sqrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (pow.f64 x 6) (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (pow.f64 x 6) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 2) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 2) (PI.f64))) (cbrt.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 x) (/.f64 (pow.f64 x 6) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) (neg.f64 1/4)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 6) (/.f64 (fabs.f64 x) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (/.f64 1 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (sqrt.f64 (PI.f64)))) (pow.f64 (PI.f64) (neg.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 2)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (neg.f64 (pow.f64 (PI.f64) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (pow.f64 (PI.f64) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (pow.f64 x 6) (fabs.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (sqrt.f64 (PI.f64)))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 2))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 x 6) (sqrt.f64 (sqrt.f64 (PI.f64)))) (fabs.f64 x)) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 x) (cbrt.f64 (sqrt.f64 (PI.f64)))) (pow.f64 x 6)) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 x 6) (cbrt.f64 (sqrt.f64 (PI.f64)))) (fabs.f64 x)) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 2))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (sqrt.f64 (PI.f64))))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 (PI.f64))))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fabs.f64 x) (sqrt.f64 (sqrt.f64 (PI.f64)))) (pow.f64 x 6)) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (PI.f64) (neg.f64 1/4)) (*.f64 (pow.f64 x 6) (fabs.f64 x))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (sqrt.f64 (PI.f64)))) 1) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 (PI.f64)))) 1) (*.f64 (cbrt.f64 (PI.f64)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 2))) (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (cbrt.f64 (sqrt.f64 (PI.f64))))) (neg.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (sqrt.f64 (PI.f64))))) (neg.f64 (sqrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 2) (PI.f64))) (cbrt.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)))) (cbrt.f64 (neg.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 2) (PI.f64))) (cbrt.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)))) (cbrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (/.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 x 6)) (fabs.f64 x)) (sqrt.f64 (PI.f64))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) 3))))))"]],"rules":[["egg-rr",59],["egg-rr",62],["egg-rr",33]],"time":47.81298828125,"type":"rewrite"},{"count":[[190,168]],"inputs":[["(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 2/3 (pow.f64 x 2))","(*.f64 (*.f64 2/3 x) x)","(*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 (pow.f64 (fabs.f64 x) 5) 1/5 (*.f64 2 (fabs.f64 x))) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (fma.f64 (pow.f64 (fabs.f64 x) 5) 1/5 (*.f64 2 (fabs.f64 x))) (*.f64 2/3 (pow.f64 (fabs.f64 x) 3))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (fma.f64 (pow.f64 (fabs.f64 x) 5) 1/5 (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 (*.f64 2/3 x) x)))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (fma.f64 (pow.f64 (fabs.f64 x) 5) 1/5 (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 (*.f64 2/3 x) x)))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (*.f64 (*.f64 1/21 (fabs.f64 x)) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 (*.f64 2/3 x) x))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (fma.f64 (pow.f64 (fabs.f64 x) 5) 1/5 (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 (*.f64 2/3 x) x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (fma.f64 (pow.f64 (fabs.f64 x) 5) 1/5 (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 (*.f64 2/3 x) x)))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (*.f64 (*.f64 1/21 (fabs.f64 x)) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 (*.f64 2/3 x) x))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (fma.f64 (pow.f64 (fabs.f64 x) 5) 1/5 (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 (*.f64 2/3 x) x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (fma.f64 (pow.f64 (fabs.f64 x) 5) 1/5 (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 (*.f64 2/3 x) x)))))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))","(*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (fabs.f64 x)) (pow.f64 x 6))"]],"time":147.4990234375,"type":"simplify"},{"compiler":[[9623,5885]],"time":99.044921875,"type":"eval"},{"alts":[["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))","done",0.12175751953688403],["(fabs.f64 (/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (sqrt.f64 (*.f64 441 (PI.f64)))))","done",0.2109375],["(fabs.f64 (/.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (PI.f64)))","fresh",0.33984375],["(fabs.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64)))))))","next",0.30859375]],"compiler":[[68,31],[38,27],[35,24],[40,28],[35,24],[40,28]],"count":[[240,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[236,0],"picked":[1,1]}],"min-error":[0],"time":87.708984375,"type":"prune"},{"compiler":[[228,126]],"locations":[["(/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))",0.140625,true],["(*.f64 2/3 (*.f64 x x))",0.23046875,false],["(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64))))))",0.40462875976844204,true],["(sqrt.f64 (PI.f64))",1.0,false]],"time":63.001953125,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))","x","-inf",0.39208984375],["(/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))","x","inf",0.53515625],["(/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))","x","0",6.22900390625],["(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64))))))","x","-inf",0.823974609375],["(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64))))))","x","inf",0.7529296875],["(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64))))))","x","0",6.22802734375]],"time":15.257080078125,"type":"series"},{"count":[[2,86]],"inputs":[["(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64))))))","(/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) 1/2) (*.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) 0) (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) (*.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))))) (*.f64 1/2 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))))) (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) (*.f64 0 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (pow.f64 (PI.f64) -1/2)) (*.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 1/21) (pow.f64 (PI.f64) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 1/21) (pow.f64 (PI.f64) -1/2)) (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (pow.f64 (PI.f64) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))))) (pow.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) 2/3) (cbrt.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (PI.f64) -1/3) (cbrt.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (sqrt.f64 (PI.f64)))))) (pow.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (sqrt.f64 (PI.f64)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (PI.f64) -1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/3)) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) -2))) (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) -2))) (+.f64 (*.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (PI.f64) -1/3))) (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (*.f64 21 (cbrt.f64 (sqrt.f64 (PI.f64))))) (cbrt.f64 (pow.f64 (PI.f64) -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (PI.f64) -2))) (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (*.f64 21 (cbrt.f64 (sqrt.f64 (PI.f64))))) (cbrt.f64 (pow.f64 (PI.f64) -1/3))) (*.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (PI.f64) -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (PI.f64))) (cbrt.f64 (pow.f64 (PI.f64) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (sqrt.f64 (PI.f64))))) (/.f64 (pow.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (sqrt.f64 (PI.f64)))) 2/3) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) -1/3) (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (pow.f64 (PI.f64) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (PI.f64))) (cbrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (cbrt.f64 (PI.f64)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (*.f64 -1/21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (PI.f64))) (neg.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (PI.f64))))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (PI.f64)))) (/.f64 (*.f64 -1/21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (PI.f64)))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (PI.f64))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64))))) (*.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) (/.f64 (*.f64 -1/21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (PI.f64))))) (neg.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (PI.f64))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (*.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) (/.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 1/21) (cbrt.f64 (PI.f64))))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (PI.f64)))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64))))) (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (*.f64 -1/21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (PI.f64))))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (PI.f64)))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 1/21) (cbrt.f64 (PI.f64))))) (neg.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 -1/21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (PI.f64))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64))))) (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))) (neg.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (PI.f64)))))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 -1/21 (*.f64 (pow.f64 x 6) (fabs.f64 x))) (cbrt.f64 (PI.f64))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (PI.f64))))) (neg.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 1/21) (cbrt.f64 (PI.f64))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64))))) (*.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) (neg.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (PI.f64)))))) (neg.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 1/21) (cbrt.f64 (PI.f64))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (*.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (PI.f64))))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (sqrt.f64 (PI.f64))))) (neg.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))) (cbrt.f64 (PI.f64)))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (fabs.f64 x) (+.f64 (fma.f64 2/3 (*.f64 x x) 2) (*.f64 (pow.f64 x 6) 1/21))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (pow.f64 (PI.f64) -1/3) (*.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 1/21) (pow.f64 (PI.f64) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (PI.f64) -1/3) (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (*.f64 (*.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 1/21) (pow.f64 (PI.f64) -1/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (pow.f64 (fabs.f64 x) 3) 2/3))) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (*.f64 (fabs.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) 1/2) (*.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) 0) (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (*.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (cbrt.f64 (pow.f64 (PI.f64) -1/2))) (*.f64 (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)) (cbrt.f64 (pow.f64 (PI.f64) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)) (cbrt.f64 (pow.f64 (PI.f64) -1/2))) (*.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (cbrt.f64 (pow.f64 (PI.f64) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (pow.f64 (fabs.f64 x) 3) 2/3)) (cbrt.f64 (pow.f64 (PI.f64) -1/2))) (*.f64 (*.f64 (fabs.f64 x) 2) (cbrt.f64 (pow.f64 (PI.f64) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))) (*.f64 1/2 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))) (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (*.f64 0 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64))))) (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))) (/.f64 (pow.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 2/3) (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))) (pow.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) 2/3) (cbrt.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (pow.f64 (PI.f64) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/2)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) -1/3) (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (cbrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (PI.f64))))) (cbrt.f64 (pow.f64 (PI.f64) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))))) (neg.f64 (cbrt.f64 (cbrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (PI.f64))))) (cbrt.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 3) (sqrt.f64 (PI.f64))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (neg.f64 (cbrt.f64 (sqrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 3) (sqrt.f64 (PI.f64))))))))"]],"rules":[["egg-rr",36],["egg-rr",50]],"time":46.094970703125,"type":"rewrite"},{"count":[[110,103]],"inputs":[["(*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x))) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 2/3 (*.f64 x x)))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 2/3 (*.f64 x x)))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 1/21 (*.f64 (pow.f64 x 6) (*.f64 (fabs.f64 x) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 2/3 (*.f64 x x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 2/3 (*.f64 x x)))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 2/3 (*.f64 x x)))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 1/21 (*.f64 (pow.f64 x 6) (*.f64 (fabs.f64 x) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 2/3 (*.f64 x x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 2/3 (*.f64 x x)))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (sqrt.f64 (/.f64 1 (PI.f64))) (+.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 1/21 (pow.f64 x 6)) (*.f64 2/3 (*.f64 x x)))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))))","(*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x))) (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(*.f64 (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(*.f64 (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(*.f64 (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2))))","(*.f64 (*.f64 2/3 (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64))))) (pow.f64 (fabs.f64 x) 3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(*.f64 (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(*.f64 (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(*.f64 (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2))))","(*.f64 (*.f64 2/3 (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64))))) (pow.f64 (fabs.f64 x) 3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(*.f64 (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(*.f64 (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (*.f64 (fabs.f64 x) (pow.f64 x 2)))) (*.f64 (pow.f64 (/.f64 1 (PI.f64)) 1/6) (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))))","(*.f64 (cbrt.f64 (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))"]],"time":122.675048828125,"type":"simplify"},{"compiler":[[8545,5126]],"time":90.7529296875,"type":"eval"},{"alts":[["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))","done",0.12175751953688403],["(fabs.f64 (/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (sqrt.f64 (*.f64 441 (PI.f64)))))","done",0.2109375],["(fabs.f64 (/.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (PI.f64)))","next",0.33984375],["(fabs.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64)))))))","done",0.30859375]],"compiler":[[68,31],[38,27],[35,24],[40,28],[35,24]],"count":[[209,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[205,0],"picked":[1,1]}],"min-error":[0],"time":72.14599609375,"type":"prune"},{"compiler":[[203,113]],"locations":[["(*.f64 2/3 (*.f64 x x))",0.23046875,false],["(*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))",0.30078125,true],["(/.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (PI.f64))",0.30078125,true],["(sqrt.f64 (PI.f64))",1.0,false]],"time":40.10107421875,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))","x","-inf",0.303955078125],["(*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))","x","inf",0.31201171875],["(*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))","x","0",0.260986328125],["(/.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (PI.f64))","x","-inf",0.8388671875],["(/.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (PI.f64))","x","inf",0.671875],["(/.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (PI.f64))","x","0",0.7939453125]],"time":3.337890625,"type":"series"},{"count":[[2,93]],"inputs":[["(/.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (PI.f64))","(*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (PI.f64)) (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (pow.f64 x 6) (*.f64 (fabs.f64 x) 1/21)))) (*.f64 (/.f64 1 (PI.f64)) (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (PI.f64)) (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64)))) (*.f64 (/.f64 1 (PI.f64)) (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (pow.f64 x 6) (*.f64 (fabs.f64 x) 1/21)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) (*.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 1/2) (*.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 0) (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (pow.f64 x 6) (*.f64 (fabs.f64 x) 1/21))) (/.f64 1 (PI.f64))) (*.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) (/.f64 1 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) (/.f64 1 (PI.f64))) (*.f64 (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (pow.f64 x 6) (*.f64 (fabs.f64 x) 1/21))) (/.f64 1 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) (*.f64 0 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64))) (*.f64 1/2 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64))) (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (PI.f64))) (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (cbrt.f64 (PI.f64))) (pow.f64 (cbrt.f64 (PI.f64)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (sqrt.f64 (PI.f64))) (pow.f64 (PI.f64) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 2)) (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) 2)) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (/.f64 -1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))) (sqrt.f64 (PI.f64))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) 2)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (/.f64 1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (PI.f64)) (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) -1/2) (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (PI.f64))) (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (cbrt.f64 (PI.f64))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64))) (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) 2))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))) (sqrt.f64 (PI.f64))) (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) 2))) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) 2)) (sqrt.f64 (PI.f64)))) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (sqrt.f64 (PI.f64))) 1) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (cbrt.f64 (PI.f64))) 1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))) (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) 2))) (*.f64 (cbrt.f64 (neg.f64 (PI.f64))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (cbrt.f64 (PI.f64))) 1) (*.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (cbrt.f64 (PI.f64)))) (neg.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 2)) (cbrt.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 2)) (cbrt.f64 (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 2))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 2))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (sqrt.f64 (PI.f64)))) (neg.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (neg.f64 (PI.f64))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 (fabs.f64 x) (*.f64 (pow.f64 x 6) 1/21) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (PI.f64)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (PI.f64)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (sqrt.f64 (PI.f64))) (*.f64 (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (*.f64 (sqrt.f64 (PI.f64)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)) (sqrt.f64 (PI.f64))) (*.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (PI.f64)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (pow.f64 (fabs.f64 x) 3) 2/3))) (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (fabs.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (sqrt.f64 (PI.f64)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)))) (*.f64 1 (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (sqrt.f64 (PI.f64)))) (*.f64 1 (*.f64 (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) (*.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) 1/2) (*.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) 0) (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (pow.f64 (fabs.f64 x) 3) 2/3)) (sqrt.f64 (PI.f64))) (*.f64 (*.f64 (fabs.f64 x) 2) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (PI.f64)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) 1) (*.f64 (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (sqrt.f64 (PI.f64))) 1) (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)) (sqrt.f64 (PI.f64))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) (*.f64 0 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64)))) (*.f64 1/2 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64)))) (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (PI.f64))) (*.f64 (cbrt.f64 (PI.f64)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 2)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64)))) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 2) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 2) (PI.f64))) (cbrt.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (sqrt.f64 (PI.f64)))) (sqrt.f64 (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (PI.f64)) (cbrt.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))) (cbrt.f64 (pow.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (sqrt.f64 (PI.f64))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (PI.f64)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (sqrt.f64 (PI.f64))) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))) (sqrt.f64 (PI.f64))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (sqrt.f64 (PI.f64)) (*.f64 (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2)) (sqrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (PI.f64)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5)) (*.f64 (sqrt.f64 (PI.f64)) (*.f64 (fabs.f64 x) (fma.f64 2/3 (*.f64 x x) 2))))))))"]],"rules":[["egg-rr",38],["egg-rr",55]],"time":42.701171875,"type":"rewrite"},{"count":[[117,111]],"inputs":[["(*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64)))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))) (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))) (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))) (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))))","(*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))","(*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64))))","(*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x))) (pow.f64 (PI.f64) -1/2))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) (*.f64 1/21 (pow.f64 x 6))))))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) (*.f64 1/21 (pow.f64 x 6))))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (*.f64 1/21 (*.f64 (fabs.f64 x) (pow.f64 x 6))) (pow.f64 (PI.f64) -1/2))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) (*.f64 1/21 (pow.f64 x 6)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) (*.f64 1/21 (pow.f64 x 6))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) (*.f64 1/21 (pow.f64 x 6))))))","(*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64)))))","(*.f64 (*.f64 1/21 (*.f64 (fabs.f64 x) (pow.f64 x 6))) (pow.f64 (PI.f64) -1/2))","(+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64))))))","(*.f64 (pow.f64 (PI.f64) -1/2) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) (*.f64 1/21 (pow.f64 x 6)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) (*.f64 1/21 (pow.f64 x 6))))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (/.f64 1 (PI.f64)))) (+.f64 (*.f64 1/21 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 6)) (sqrt.f64 (/.f64 1 (PI.f64))))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (/.f64 1 (PI.f64)))))))","(*.f64 (pow.f64 (PI.f64) -1/2) (+.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x))) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) (*.f64 1/21 (pow.f64 x 6))))))","(*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64)))","(*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x))) (sqrt.f64 (PI.f64)))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))) (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))))","(*.f64 (sqrt.f64 (PI.f64)) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))) (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))))","(*.f64 (sqrt.f64 (PI.f64)) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))) (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))))","(*.f64 (sqrt.f64 (PI.f64)) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64))))","(*.f64 (sqrt.f64 (*.f64 4/9 (PI.f64))) (pow.f64 (fabs.f64 x) 3))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))","(*.f64 (sqrt.f64 (PI.f64)) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))","(*.f64 (sqrt.f64 (PI.f64)) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))","(*.f64 (sqrt.f64 (PI.f64)) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64))))","(*.f64 (sqrt.f64 (*.f64 4/9 (PI.f64))) (pow.f64 (fabs.f64 x) 3))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))","(*.f64 (sqrt.f64 (PI.f64)) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))","(*.f64 (sqrt.f64 (PI.f64)) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))","(+.f64 (*.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 1/5 (pow.f64 (fabs.f64 x) 5))) (sqrt.f64 (PI.f64))) (*.f64 2/3 (*.f64 (*.f64 (fabs.f64 x) (pow.f64 x 2)) (sqrt.f64 (PI.f64)))))","(*.f64 (sqrt.f64 (PI.f64)) (+.f64 (*.f64 2/3 (pow.f64 (fabs.f64 x) 3)) (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 2 (fabs.f64 x)))))"]],"time":109.4609375,"type":"simplify"},{"compiler":[[8328,4772]],"time":83.7080078125,"type":"eval"},{"alts":[["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))","done",0.12175751953688403],["(fabs.f64 (/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (sqrt.f64 (*.f64 441 (PI.f64)))))","done",0.2109375],["(fabs.f64 (/.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (PI.f64)))","done",0.33984375],["(fabs.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64)))))))","done",0.30859375]],"compiler":[[68,31],[38,27],[35,24],[40,28]],"count":[[217,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[213,0],"picked":[1,1]}],"min-error":[0],"time":65.808837890625,"type":"prune"},{"accuracy":[0.12175751953688403],"baseline":[0.12175751953688403],"branch":[["x",0.12175751953688403,1],["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))",0.12175751953688405,1],["(*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))))",0.12175751953688405,1],["(+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))",0.12175751953688405,1],["(fabs.f64 x)",0.12175751953688405,1]],"compiler":[[2,1],[68,31],[67,30],[62,25],[3,2],[204,111]],"count":[[5,1]],"inputs":[["(fabs.f64 (/.f64 (+.f64 (*.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64))) (*.f64 21 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))))) (sqrt.f64 (*.f64 441 (PI.f64)))))","(fabs.f64 (/.f64 (+.f64 (*.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))) (*.f64 (sqrt.f64 (PI.f64)) (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21))) (PI.f64)))","(fabs.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1)) (+.f64 (/.f64 (fma.f64 1/5 (pow.f64 (fabs.f64 x) 5) (*.f64 (fabs.f64 x) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (cbrt.f64 (sqrt.f64 (PI.f64)))) (/.f64 (/.f64 (*.f64 (pow.f64 x 6) (fabs.f64 x)) 21) (cbrt.f64 (sqrt.f64 (PI.f64)))))))","(fabs.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))))","(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))"]],"link":["."],"name":["Jmat.Real.erfi, branch x less than or equal to 0.5"],"oracle":[0.8193550293053261],"outputs":[["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))"]],"time":25.13818359375,"times":[["x",3.16796875],["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))",3.87109375],["(*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))))",3.9619140625],["(+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))",4.232177734375],["(fabs.f64 x)",3.736083984375]],"type":"regimes"},{"compiler":[[68,31]],"inputs":[["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))"]],"method":["egg-herbie"],"outputs":[["(fabs.f64 (*.f64 (/.f64 1 (sqrt.f64 (PI.f64))) (+.f64 (+.f64 (+.f64 (*.f64 2 (fabs.f64 x)) (*.f64 (/.f64 2 3) (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 5) (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)))) (*.f64 (/.f64 1 21) (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (*.f64 (fabs.f64 x) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x)) (fabs.f64 x))))))","(fabs.f64 (/.f64 (*.f64 (fabs.f64 x) (+.f64 (*.f64 (pow.f64 x 4) (+.f64 1/5 (*.f64 1/21 (*.f64 x x)))) (+.f64 (*.f64 2/3 (*.f64 x x)) 2))) (sqrt.f64 (PI.f64))))"]],"stop":[["done",1]],"time":32.02294921875,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[68,31]],"remove-preprocessing":[[]],"time":15.886962890625,"type":"end"}]
[{"compiler":[[16,11]],"method":["search"],"sampling":[[12,0.0,0.99951171875,0.00048828125],[11,0.0,0.99951171875,0.00048828125],[10,0.0,0.99951171875,0.00048828125],[9,0.0,0.99951171875,0.00048828125],[8,0.0,0.99951171875,0.00048828125],[7,0.0,0.99951171875,0.00048828125],[6,0.0,0.99951171875,0.00048828125],[5,0.0,0.99951171875,0.00048828125],[4,0.0,0.99951171875,0.00048828125],[3,0.0,0.99951171875,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":184.541015625,"type":"analyze"},{"outcomes":[["body",256,"invalid",314.1064453125,8236],["body",4096,"valid",0.64794921875,2],["body",1024,"valid",283.878173828125,2041],["body",512,"valid",94.390625,1036],["body",2048,"valid",859.9423828125,4161],["body",256,"valid",52.63232421875,1016]],"time":1622.391845703125,"type":"sample"},{"compiler":[[15,10]],"inputs":[["0"],["(acos.f64 (/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (-.f64 (*.f64 v v) 1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(acos.f64 (/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (-.f64 (*.f64 v v) 1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))"]],"symmetry":[[]],"time":59.838134765625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(acos.f64 (/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (-.f64 (*.f64 v v) 1)))"]],"method":["egg-herbie"],"outputs":[["(acos.f64 (/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (-.f64 (*.f64 v v) 1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))"]],"time":23.098876953125,"type":"simplify"},{"compiler":[[27,17]],"time":0.523193359375,"type":"eval"},{"alts":[["(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","next",0.32700994032127806]],"compiler":[[13,9],[13,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.32700994032127806],"time":2.5009765625,"type":"prune"},{"compiler":[[41,23]],"locations":[["(/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))",0.0078125,true],["(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))",0.3226264948526374,true]],"time":10.048828125,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))","v","-inf",0.277099609375],["(/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))","v","inf",0.430908203125],["(/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))","v","0",0.378173828125],["(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","v","-inf",0.22314453125],["(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","v","inf",0.266845703125],["(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","v","0",0.27783203125]],"time":1.986083984375,"type":"series"},{"count":[[2,93]],"inputs":[["(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 0) (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (*.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (*.f64 0 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 2/3) (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 v v -1)) (*.f64 -5 (*.f64 v v))) (/.f64 1 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 v v -1)) (*.f64 (/.f64 1 (fma.f64 v v -1)) (*.f64 -5 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 0) (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) (*.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -5 (*.f64 v v)) (/.f64 1 (fma.f64 v v -1))) (/.f64 1 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 v v -1)) (*.f64 (*.f64 -5 (*.f64 v v)) (/.f64 1 (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) (*.f64 0 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 1 (*.f64 v v))) (/.f64 (fma.f64 -5 (*.f64 v v) 1) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3) -1) (/.f64 (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3) (+.f64 v 1)) (/.f64 (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)) (+.f64 v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 v 1)) (/.f64 (+.f64 (*.f64 5 (*.f64 v v)) -1) (+.f64 v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)) (+.f64 v 1)) (/.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3) (+.f64 v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 v 1)) (/.f64 (fma.f64 -5 (*.f64 v v) 1) (+.f64 v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 v v -1) -1/3) (/.f64 (fma.f64 -5 (*.f64 v v) 1) (pow.f64 (fma.f64 v v -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)) -1) (/.f64 (neg.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3)) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)) (cbrt.f64 (-.f64 1 (*.f64 v v)))) (/.f64 (neg.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3)) (pow.f64 (fma.f64 v v -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (*.f64 5 (*.f64 v v)) -1)) 1) (/.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (*.f64 5 (*.f64 v v)) -1)) (cbrt.f64 (fma.f64 v v -1))) (/.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3) (neg.f64 (pow.f64 (fma.f64 v v -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)) (/.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 5 (*.f64 v v)) -1) (/.f64 -1 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (pow.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -5 (*.f64 v v) 1) (/.f64 1 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 v v -1)) (fma.f64 -5 (*.f64 v v) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 2/3) (cbrt.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (pow.f64 (fma.f64 v v -1) 2/3)) (pow.f64 (fma.f64 v v -1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 v v -1)) (+.f64 (*.f64 5 (*.f64 v v)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3) (fma.f64 v v -1)) (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (cbrt.f64 (fma.f64 v v -1))) (pow.f64 (cbrt.f64 (fma.f64 v v -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3) (/.f64 (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3) (cbrt.f64 (fma.f64 v v -1))) (/.f64 (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)) (pow.f64 (fma.f64 v v -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 v v -1) -1/3)) (/.f64 (+.f64 (*.f64 5 (*.f64 v v)) -1) (pow.f64 (fma.f64 v v -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 v v -1)) -2)) (/.f64 (+.f64 (*.f64 5 (*.f64 v v)) -1) (cbrt.f64 (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)) -1) (/.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)) (pow.f64 (fma.f64 v v -1) 2/3)) (/.f64 (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3) (cbrt.f64 (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1)) (fma.f64 v v -1)) (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 v v -1)) -2) (/.f64 (fma.f64 -5 (*.f64 v v) 1) (cbrt.f64 (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) -1) (/.f64 -1 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (+.f64 v 1)) (/.f64 1 (+.f64 v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 v v -1) -1/3)) (/.f64 (fma.f64 -5 (*.f64 v v) 1) (neg.f64 (pow.f64 (fma.f64 v v -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (-.f64 1 (*.f64 v v))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 v v -1)) (+.f64 (*.f64 -125 (pow.f64 v 6)) 1)) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -125 (pow.f64 v 6)) 1) (/.f64 1 (fma.f64 v v -1))) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (+.f64 v 1)) (+.f64 v -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (cbrt.f64 (fma.f64 v v -1))) (cbrt.f64 (pow.f64 (fma.f64 v v -1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 v v -1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 v v -1) -1/3) (+.f64 (*.f64 -125 (pow.f64 v 6)) 1)) (*.f64 (pow.f64 (fma.f64 v v -1) 2/3) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -125 (pow.f64 v 6)) 1) (*.f64 (fma.f64 v v -1) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (+.f64 (*.f64 -125 (pow.f64 v 6)) 1)) (*.f64 (-.f64 1 (*.f64 v v)) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -125 (pow.f64 v 6)) 1) 1) (*.f64 (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v)))) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -125 (pow.f64 v 6)) 1) -1) (*.f64 (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v)))) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -125 (pow.f64 v 6)) 1) (pow.f64 (fma.f64 v v -1) -1/3)) (*.f64 (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v)))) (pow.f64 (fma.f64 v v -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 5 (*.f64 v v)) -1) (-.f64 1 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (cbrt.f64 (fma.f64 v v -1))) (pow.f64 (fma.f64 v v -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 v v -1) -1/3) (fma.f64 -5 (*.f64 v v) 1)) (pow.f64 (fma.f64 v v -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 2/3) (cbrt.f64 (fma.f64 -5 (*.f64 v v) 1))) (cbrt.f64 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 2/3) (cbrt.f64 (+.f64 (*.f64 5 (*.f64 v v)) -1))) (cbrt.f64 (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (pow.f64 (fma.f64 -5 (*.f64 v v) 1) 2/3)) (pow.f64 (fma.f64 v v -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (pow.f64 (fma.f64 v v -1) 2/3)) (cbrt.f64 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (*.f64 5 (*.f64 v v)) -1)) (pow.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 2/3)) (cbrt.f64 (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (cbrt.f64 (fma.f64 v v -1))) 1) (pow.f64 (fma.f64 v v -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) -1) (-.f64 1 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 5 (*.f64 v v)) -1) (cbrt.f64 (fma.f64 v v -1))) (neg.f64 (pow.f64 (fma.f64 v v -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (cbrt.f64 (fma.f64 v v -1))) 1) (pow.f64 (fma.f64 v v -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (cbrt.f64 (fma.f64 v v -1)))) (neg.f64 (pow.f64 (fma.f64 v v -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (-.f64 1 (*.f64 v v))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)) 3))))))"]],"rules":[["egg-rr",76],["egg-rr",17]],"time":29.2509765625,"type":"rewrite"},{"count":[[117,108]],"inputs":[["(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","-1","(-.f64 (*.f64 4 (pow.f64 v 2)) 1)","(-.f64 (+.f64 (*.f64 4 (pow.f64 v 2)) (*.f64 4 (pow.f64 v 4))) 1)","(-.f64 (+.f64 (*.f64 4 (pow.f64 v 2)) (+.f64 (*.f64 4 (pow.f64 v 4)) (*.f64 4 (pow.f64 v 6)))) 1)","-5","(neg.f64 (+.f64 5 (*.f64 4 (/.f64 1 (pow.f64 v 2)))))","(neg.f64 (+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4))))))","(neg.f64 (+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 6))) (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4)))))))","-5","(neg.f64 (+.f64 5 (*.f64 4 (/.f64 1 (pow.f64 v 2)))))","(neg.f64 (+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4))))))","(neg.f64 (+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 6))) (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4)))))))"]],"method":["egg-herbie"],"outputs":[["(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","-1","(-.f64 (*.f64 4 (pow.f64 v 2)) 1)","(fma.f64 4 (*.f64 v v) -1)","(-.f64 (+.f64 (*.f64 4 (pow.f64 v 2)) (*.f64 4 (pow.f64 v 4))) 1)","(fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)","(-.f64 (+.f64 (*.f64 4 (pow.f64 v 2)) (+.f64 (*.f64 4 (pow.f64 v 4)) (*.f64 4 (pow.f64 v 6)))) 1)","(+.f64 (*.f64 4 (+.f64 (fma.f64 v v (pow.f64 v 4)) (pow.f64 v 6))) -1)","-5","(neg.f64 (+.f64 5 (*.f64 4 (/.f64 1 (pow.f64 v 2)))))","(+.f64 -5 (/.f64 -4 (*.f64 v v)))","(neg.f64 (+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4))))))","(+.f64 -5 (*.f64 -4 (+.f64 (pow.f64 v -2) (pow.f64 v -4))))","(neg.f64 (+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 6))) (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4)))))))","(-.f64 -5 (*.f64 4 (+.f64 (+.f64 (pow.f64 v -2) (pow.f64 v -4)) (pow.f64 v -6))))","-5","(neg.f64 (+.f64 5 (*.f64 4 (/.f64 1 (pow.f64 v 2)))))","(+.f64 -5 (/.f64 -4 (*.f64 v v)))","(neg.f64 (+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4))))))","(+.f64 -5 (*.f64 -4 (+.f64 (pow.f64 v -2) (pow.f64 v -4))))","(neg.f64 (+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 6))) (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4)))))))","(-.f64 -5 (*.f64 4 (+.f64 (+.f64 (pow.f64 v -2) (pow.f64 v -4)) (pow.f64 v -6))))"]],"time":77.4130859375,"type":"simplify"},{"compiler":[[2183,1477]],"time":29.10791015625,"type":"eval"},{"alts":[["(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","fresh",0.45074660683079476],["(pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)","next",0.32306127723449507]],"compiler":[[11,8],[17,13],[11,8],[17,13]],"count":[[109,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[108,2],"picked":[1,0]}],"min-error":[0.3186777112061173],"time":19.45703125,"type":"prune"},{"compiler":[[73,45]],"locations":[["(/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))",0.0078125,false],["(pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)",0.0234375,true],["(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))",0.3226264948526374,false],["(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)",0.9974212890737681,true]],"time":19.089111328125,"type":"localize"},{"count":[[2,24]],"series":[["(pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)","v","-inf",1.10986328125],["(pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)","v","inf",1.59619140625],["(pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)","v","0",1.246826171875],["(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","v","-inf",0.62109375],["(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","v","inf",0.60498046875],["(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","v","0",0.751953125]],"time":6.037841796875,"type":"series"},{"count":[[2,45]],"inputs":[["(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 0) (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) (*.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)) (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) (*.f64 0 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) (pow.f64 (pow.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) 4) 2) (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 2) (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (+.f64 2 1/3)) (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 2/3) (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 0) (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (*.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (*.f64 0 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 2/3) (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) (+.f64 2 1/3))) (cbrt.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))))))"]],"rules":[["egg-rr",21],["egg-rr",24]],"time":24.9150390625,"type":"rewrite"},{"count":[[69,47]],"inputs":[["(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1))) 3)","(pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3)","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (pow.f64 v 2) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))"]],"time":79.758056640625,"type":"simplify"},{"compiler":[[3646,2619]],"time":49.888916015625,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) 4) 2)))","fresh",1.8659491329421618],["(pow.f64 (pow.f64 (pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 3) 1/3) 1/3)","fresh",1.2832648311229824],["(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1/3)","next",0.450704200149174]],"compiler":[[34,25],[21,17],[15,12],[34,25],[21,17],[15,12]],"count":[[157,3]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[155,3],"picked":[1,0]}],"min-error":[0.31409030426683665],"time":40.0419921875,"type":"prune"},{"compiler":[[60,43]],"locations":[["(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1/3)",0.0234375,true],["(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))",0.3187202448526374,true],["(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)",0.9912300293053261,true]],"time":18.089111328125,"type":"localize"},{"count":[[3,12]],"series":[["(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1/3)","v","-inf",1.10791015625],["(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1/3)","v","inf",1.090087890625],["(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1/3)","v","0",1.073974609375],["(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","v","-inf",0.156982421875],["(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","v","inf",0.18505859375],["(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","v","0",0.162841796875],["(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","v","-inf",0.635009765625],["(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","v","inf",0.681884765625],["(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","v","0",0.62109375]],"time":5.8359375,"type":"series"},{"count":[[3,64]],"inputs":[["(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1/3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 4/3) 2) (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))) (cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))) (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))) (cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))) (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))"]],"rules":[["egg-rr",21],["egg-rr",21],["egg-rr",22]],"time":64.73193359375,"type":"rewrite"},{"count":[[76,43]],"inputs":[["(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))"]],"method":["egg-herbie"],"outputs":[["(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))"]],"time":75.6630859375,"type":"simplify"},{"compiler":[[844,679]],"time":15.035888671875,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) 4) 2)))","fresh",1.8659491329421618],["(pow.f64 (pow.f64 (pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 3) 1/3) 1/3)","fresh",1.2832648311229824],["(pow.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3) 1/3)","next",0.45069579750807137]],"compiler":[[34,25],[21,17],[32,26],[34,25],[21,17],[32,26]],"count":[[46,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[43,1],"picked":[1,0]}],"min-error":[0.3139971529310774],"time":10.753173828125,"type":"prune"},{"compiler":[[173,132]],"locations":[["(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))",0.9609375,true],["(*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))",0.9765625,true],["(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3)",0.9912300293053261,true],["(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)",1.014667529305326,true]],"time":80.22998046875,"type":"localize"},{"count":[[4,48]],"series":[["(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))","v","-inf",11.5498046875],["(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))","v","inf",11.64892578125],["(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))","v","0",13.405029296875],["(*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))","v","-inf",0.198974609375],["(*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))","v","inf",0.170166015625],["(*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))","v","0",0.205078125],["(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3)","v","-inf",0.5859375],["(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3)","v","inf",0.612060546875],["(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3)","v","0",29.992919921875],["(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)","v","-inf",13.44091796875],["(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)","v","inf",16.439208984375],["(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)","v","0",22.43408203125]],"time":121.10986328125,"type":"series"},{"count":[[4,115]],"inputs":[["(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)","(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3)","(*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 0) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) (*.f64 0 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3)) (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3)) (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 0) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) (*.f64 0 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2)) (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) (cbrt.f64 (pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)) (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (*.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) (+.f64 2 1/3)) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 4)) (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))) 3) (cbrt.f64 (pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))) 3) (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 4)) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) (*.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 0) (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) (*.f64 0 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))) (cbrt.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) (+.f64 2 1/3))) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))) (cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 4)) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 4)) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3)) (cbrt.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) (cbrt.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) (cbrt.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 4))) (cbrt.f64 (*.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) 0) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (*.f64 0 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) (cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3)) (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3))))))"]],"rules":[["egg-rr",19],["egg-rr",35],["egg-rr",37],["egg-rr",24]],"time":47.523193359375,"type":"rewrite"},{"count":[[163,118]],"inputs":[["(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/3)","(cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7))","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3)","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9)"]],"time":155.077880859375,"type":"simplify"},{"compiler":[[3973,3208]],"time":64.580078125,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) 4) 2)))","fresh",1.8659491329421618],["(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3)) 1/3)","fresh",0.4507467258472764],["(pow.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3) 1/3)","fresh",1.9677100764965927],["(pow.f64 (pow.f64 (pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 3) 1/3) 1/3)","fresh",1.2832648311229824],["(pow.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3) 1/3)","done",0.45069579750807137]],"compiler":[[34,25],[47,38],[33,27],[21,17],[32,26]],"count":[[121,5]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[118,2],"picked":[1,1]}],"min-error":[0.30616733152049075],"time":33.90283203125,"type":"prune"},{"accuracy":[0.323061277234495],"baseline":[0.32306127723449507],"branch":[["v",0.323061277234495,1],["(acos.f64 (/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (-.f64 (*.f64 v v) 1)))",0.32306127723449507,1],["(/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (-.f64 (*.f64 v v) 1))",0.32306127723449507,1],["(*.f64 v v)",0.32306127723449507,1]],"compiler":[[2,1],[15,10],[14,9],[4,2],[229,172]],"count":[[10,1]],"inputs":[["(pow.f64 (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3) 2/3) (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3)) 1/3)","(pow.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7) 1/9) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3) 1/3)","(pow.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 7/3)) (cbrt.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 2/3))) 3) 1/3)","(*.f64 (cbrt.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))) 4) 2)))","(pow.f64 (pow.f64 (pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 3) 1/3) 1/3)","(pow.f64 (pow.f64 (acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1)) 3) 1/3)","(acos.f64 (fma.f64 4 (fma.f64 v v (pow.f64 v 4)) -1))","(pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))","(acos.f64 (/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (-.f64 (*.f64 v v) 1)))"]],"link":["."],"name":["Falkner and Boettcher, Appendix B, 1"],"oracle":[1.990205463901115],"outputs":[["(pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)"]],"time":15.31298828125,"times":[["v",4.14208984375],["(acos.f64 (/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (-.f64 (*.f64 v v) 1)))",2.072998046875],["(/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (-.f64 (*.f64 v v) 1))",2.048095703125],["(*.f64 v v)",2.2578125]],"type":"regimes"},{"compiler":[[17,13]],"inputs":[["(pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 (acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1))) 3) 1/3)","(acos.f64 (/.f64 (fma.f64 -5 (*.f64 v v) 1) (fma.f64 v v -1)))"]],"stop":[["fuel",1]],"time":19.257080078125,"type":"simplify"},{"time":0.01904296875,"type":"soundness"},{"compiler":[[17,13]],"remove-preprocessing":[[]],"time":12.5869140625,"type":"end"}]
[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.38810280938764663,0.5421737739184209,0.06972341669393245],[11,0.25353449859494503,0.7059960653182316,0.04046943608682341],[10,0.19502653738072695,0.7645040265324496,0.04046943608682341],[9,0.1404191069141234,0.8425146414847404,0.017066251601136173],[8,0.031204245980916312,0.9673316254084057,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":102.690185546875,"type":"analyze"},{"outcomes":[["body",256,"invalid",36.71484375,933],["body",256,"valid",323.295166015625,8256]],"time":368.6689453125,"type":"sample"},{"compiler":[[10,6]],"inputs":[["0","1","2"],["(/.f64 (*.f64 x (-.f64 y z)) y)","(/.f64 (*.f64 y (-.f64 x z)) x)","(/.f64 (*.f64 z (-.f64 y x)) y)","(/.f64 (*.f64 x (-.f64 z y)) z)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (*.f64 x (-.f64 y z)) y)","(/.f64 (*.f64 y (-.f64 x z)) x)","(/.f64 (*.f64 z (-.f64 y x)) y)","(/.f64 (*.f64 x (-.f64 z y)) z)"]],"symmetry":[[]],"time":69.01806640625,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(/.f64 (*.f64 x (-.f64 y z)) y)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (-.f64 y z)) y)"]],"time":19.033935546875,"type":"simplify"},{"compiler":[[10,6]],"time":0.22900390625,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (-.f64 y z)) y)","next",10.02188919949729]],"compiler":[[10,6],[10,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[10.02188919949729],"time":0.6689453125,"type":"prune"},{"compiler":[[21,6]],"locations":[["(*.f64 x (-.f64 y z))",0.03125,true],["(/.f64 (*.f64 x (-.f64 y z)) y)",9.566817906965685,true]],"time":4.18701171875,"type":"localize"},{"count":[[2,72]],"series":[["(*.f64 x (-.f64 y z))","z","-inf",0.156982421875],["(*.f64 x (-.f64 y z))","z","inf",0.1689453125],["(*.f64 x (-.f64 y z))","z","0",0.15380859375],["(*.f64 x (-.f64 y z))","y","-inf",0.242919921875],["(*.f64 x (-.f64 y z))","y","inf",0.156982421875],["(*.f64 x (-.f64 y z))","y","0",0.18701171875],["(*.f64 x (-.f64 y z))","x","-inf",0.26611328125],["(*.f64 x (-.f64 y z))","x","inf",0.311767578125],["(*.f64 x (-.f64 y z))","x","0",0.14404296875],["(/.f64 (*.f64 x (-.f64 y z)) y)","z","-inf",0.343017578125],["(/.f64 (*.f64 x (-.f64 y z)) y)","z","inf",0.674072265625],["(/.f64 (*.f64 x (-.f64 y z)) y)","z","0",0.35986328125],["(/.f64 (*.f64 x (-.f64 y z)) y)","y","-inf",0.384033203125],["(/.f64 (*.f64 x (-.f64 y z)) y)","y","inf",0.60498046875],["(/.f64 (*.f64 x (-.f64 y z)) y)","y","0",0.409912109375],["(/.f64 (*.f64 x (-.f64 y z)) y)","x","-inf",0.4140625],["(/.f64 (*.f64 x (-.f64 y z)) y)","x","inf",0.4130859375],["(/.f64 (*.f64 x (-.f64 y z)) y)","x","0",0.593017578125]],"time":6.19189453125,"type":"series"},{"count":[[2,98]],"inputs":[["(/.f64 (*.f64 x (-.f64 y z)) y)","(*.f64 x (-.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 0) (/.f64 (*.f64 x (-.f64 y z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (-.f64 y z)) y) (*.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) (*.f64 x y)) (*.f64 (/.f64 1 y) (neg.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x (-.f64 y z)) y)) (/.f64 (*.f64 x (-.f64 y z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (-.f64 y z)) y) (*.f64 0 (/.f64 (*.f64 x (-.f64 y z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) (/.f64 1 y)) (*.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (*.f64 (-.f64 z y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (-.f64 z y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 y z))) (/.f64 (pow.f64 (*.f64 x (-.f64 y z)) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 y z)) y)) (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 2/3) (cbrt.f64 (/.f64 (*.f64 x (-.f64 y z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (-.f64 y z) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y z) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) (/.f64 x (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 y z)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z y) x) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (*.f64 x (-.f64 y z)) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (*.f64 (-.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 y 2/3)) (/.f64 (-.f64 y z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 y z)) (pow.f64 y 2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x (-.f64 y z)) 2/3) y) (cbrt.f64 (*.f64 x (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) (pow.f64 y 2/3)) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (-.f64 z y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x (-.f64 y z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 z y) x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (cbrt.f64 (pow.f64 y 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 z y) x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 y z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) x) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (*.f64 x (-.f64 y z))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 y z)) y)) (pow.f64 (*.f64 x (-.f64 y z)) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 2/3) (cbrt.f64 (*.f64 x (-.f64 y z)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 2/3) (cbrt.f64 (*.f64 (-.f64 z y) x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (-.f64 y z)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (-.f64 y z) (pow.f64 y 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y z) (/.f64 x (pow.f64 y 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y z)) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (-.f64 y z))) (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 z y) x)) (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y z)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 z y) x) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 y z)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (-.f64 z y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 z y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (-.f64 z y) x) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 z y) x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 y) (*.f64 (-.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 y z)) 0) (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 y z)) (*.f64 (*.f64 x (-.f64 y z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (-.f64 y z))) (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 y z)) (*.f64 0 (*.f64 x (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) 1) (*.f64 (neg.f64 (*.f64 z x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 y z))) (pow.f64 (*.f64 x (-.f64 y z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (-.f64 y z)) 2/3) (cbrt.f64 (*.f64 x (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 y z) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (-.f64 y z))) (pow.f64 (-.f64 y z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y z)) (*.f64 (pow.f64 (-.f64 y z) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 y z) 2/3) (*.f64 x (cbrt.f64 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 y z) 2/3) x) (cbrt.f64 (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (-.f64 y z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (-.f64 y z) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 z y) x)) (neg.f64 (pow.f64 (*.f64 x (-.f64 y z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y z)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 z y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (-.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (-.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (-.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (neg.f64 (*.f64 z x)))))))"]],"rules":[["egg-rr",37],["egg-rr",61]],"time":25.816162109375,"type":"rewrite"},{"count":[[170,108]],"inputs":[["(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 (-.f64 y z) x)","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z x)))","(*.f64 (-.f64 y z) x)"]],"time":212.373046875,"type":"simplify"},{"compiler":[[1238,387]],"time":11.748779296875,"type":"eval"},{"alts":[["(*.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))","fresh",10.495068252318989],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","fresh",5.537756451075212],["(*.f64 x (/.f64 (-.f64 y z) y))","next",3.6015625],["(/.f64 (pow.f64 (cbrt.f64 (*.f64 x (-.f64 y z))) 3) y)","fresh",10.528896963245225],["(+.f64 (*.f64 (*.f64 x y) (/.f64 1 y)) (*.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y)))","fresh",10.098392959265732],["(/.f64 (*.f64 x (-.f64 y z)) y)","done",10.02188919949729]],"compiler":[[16,10],[10,6],[10,6],[13,9],[19,13],[10,6],[16,10],[10,6],[10,6],[13,9],[19,13]],"count":[[109,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[108,5],"picked":[1,1]}],"min-error":[0.00390625],"time":19.51123046875,"type":"prune"},{"compiler":[[21,6]],"locations":[["(/.f64 (-.f64 y z) y)",0.0234375,true],["(*.f64 x (/.f64 (-.f64 y z) y))",3.3920789538413483,true]],"time":4.123779296875,"type":"localize"},{"count":[[2,60]],"series":[["(/.f64 (-.f64 y z) y)","z","-inf",0.260009765625],["(/.f64 (-.f64 y z) y)","z","inf",0.260009765625],["(/.f64 (-.f64 y z) y)","z","0",0.2451171875],["(/.f64 (-.f64 y z) y)","y","-inf",0.281005859375],["(/.f64 (-.f64 y z) y)","y","inf",0.244873046875],["(/.f64 (-.f64 y z) y)","y","0",0.281982421875],["(*.f64 x (/.f64 (-.f64 y z) y))","z","-inf",0.162109375],["(*.f64 x (/.f64 (-.f64 y z) y))","z","inf",0.18994140625],["(*.f64 x (/.f64 (-.f64 y z) y))","z","0",0.14697265625],["(*.f64 x (/.f64 (-.f64 y z) y))","y","-inf",0.1650390625],["(*.f64 x (/.f64 (-.f64 y z) y))","y","inf",0.180908203125],["(*.f64 x (/.f64 (-.f64 y z) y))","y","0",0.155029296875],["(*.f64 x (/.f64 (-.f64 y z) y))","x","-inf",0.192138671875],["(*.f64 x (/.f64 (-.f64 y z) y))","x","inf",0.161865234375],["(*.f64 x (/.f64 (-.f64 y z) y))","x","0",0.18603515625]],"time":3.272216796875,"type":"series"},{"count":[[2,202]],"inputs":[["(*.f64 x (/.f64 (-.f64 y z) y))","(/.f64 (-.f64 y z) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (-.f64 y z)) y) (*.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 0) (/.f64 (*.f64 x (-.f64 y z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 x (neg.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (-.f64 y z)) y) (*.f64 0 (/.f64 (*.f64 x (-.f64 y z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x (-.f64 y z)) y)) (/.f64 (*.f64 x (-.f64 y z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 (/.f64 z y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 y z)) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 2)) (cbrt.f64 (/.f64 (*.f64 x (-.f64 y z)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (-.f64 y z) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 (-.f64 y z) y))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 y z)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 y z) y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y z) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y z) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 y z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x (-.f64 y z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x (-.f64 z y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) (cbrt.f64 (*.f64 y y))) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) x) (cbrt.f64 (/.f64 (-.f64 y z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 (-.f64 y z) y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 y z) y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 z y)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) (*.f64 x (cbrt.f64 (/.f64 (-.f64 y z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 z y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 y z)) (neg.f64 y)) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 z y)) y) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 x (-.f64 z y))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 x (-.f64 z y))) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (*.f64 x (-.f64 y z))) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 z y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 y z)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (-.f64 y z)) y) (neg.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (/.f64 (*.f64 x (-.f64 y z)) y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 z y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y z)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 z y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 z y)) (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 x (-.f64 y z))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 y z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 2)) (cbrt.f64 (*.f64 x (-.f64 y z)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (-.f64 y z)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 y (-.f64 y z))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (-.f64 y z) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (-.f64 y z)) y) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (-.f64 y z)) y) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (-.f64 y z))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 y z)) x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) x) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (-.f64 y z) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 (*.f64 x (-.f64 y z)) y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (*.f64 x (-.f64 y z)) y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 z y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) x)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 y z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 z y)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 y z)) y) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 z y)) (neg.f64 y)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 x (-.f64 y z))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (*.f64 x (-.f64 z y))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 y z)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 y z)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (-.f64 y z)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 z y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 x (-.f64 z y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 z y) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x (-.f64 z y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (/.f64 (-.f64 z y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (neg.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y z) y) (*.f64 (/.f64 (-.f64 y z) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 y z) y) 0) (/.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y z) y) (*.f64 0 (/.f64 (-.f64 y z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 y z) y)) (/.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (/.f64 z y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 z y) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 z y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (-.f64 z y) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 y) (/.f64 (-.f64 z y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y z) y)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) (cbrt.f64 (/.f64 (-.f64 y z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y z)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 y z) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z y) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y z) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 z y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z y) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 y z) 2)) y) (cbrt.f64 (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 y z)) (/.f64 1 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (-.f64 y z) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (neg.f64 (/.f64 z y)) 3)) (+.f64 1 (-.f64 (*.f64 (neg.f64 (/.f64 z y)) (neg.f64 (/.f64 z y))) (neg.f64 (/.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (/.f64 z y) 3)) (+.f64 1 (+.f64 (pow.f64 (/.f64 z y) 2) (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (neg.f64 y)) (neg.f64 (*.f64 y z))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 z))) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) y) (*.f64 (neg.f64 y) z)) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 y z)) (cbrt.f64 (*.f64 y y))) (*.f64 (*.f64 y y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y z) (neg.f64 y)) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 z y) y) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 z y)) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 y (-.f64 y z))) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 z y)) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (-.f64 y z)) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y (-.f64 y z))) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z y) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y z) y) (neg.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (/.f64 (-.f64 y z) y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y z) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 y z)) (cbrt.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 y z)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (*.f64 y y)) y) (*.f64 y (/.f64 z (cbrt.f64 y)))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 y 4)) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 z (cbrt.f64 y)))) (cbrt.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (/.f64 z (cbrt.f64 y)))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 y z)) y) (pow.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 y z)) (neg.f64 y)) (neg.f64 (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y z) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 z y) (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 y (-.f64 y z))) (pow.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 (-.f64 y z) (cbrt.f64 y))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 y z)) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (-.f64 y z) (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (*.f64 y (-.f64 y z))) (neg.f64 (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (/.f64 (-.f64 y z) (cbrt.f64 y))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 y z)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (-.f64 y z)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 y z) y)) (cbrt.f64 (pow.f64 (-.f64 y z) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y z) y) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y z) y) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) (cbrt.f64 (-.f64 z y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) (cbrt.f64 (-.f64 y z))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 y z)) 1) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 (-.f64 y z) y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (-.f64 y z) y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y z) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 z y)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 y z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 y z)) 1) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 y z)) (cbrt.f64 (pow.f64 y 4))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z y) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (*.f64 y y)) y) (*.f64 (cbrt.f64 (*.f64 y y)) z)) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y y) (*.f64 (neg.f64 y) (neg.f64 z))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y z) y) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 z y) (neg.f64 y)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (-.f64 z y)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 y z) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y z) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y z) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 y z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 z y) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 z y) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 -1 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (/.f64 1 y)) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 y) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 y)) (cbrt.f64 y) (neg.f64 (/.f64 z y)))))))"]],"rules":[["egg-rr",112],["egg-rr",90]],"time":30.802978515625,"type":"rewrite"},{"count":[[262,211]],"inputs":[["(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 z y))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(*.f64 -1 (/.f64 z y))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(*.f64 -1 (/.f64 z y))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(+.f64 1 (*.f64 -1 (/.f64 z y)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(/.f64 (*.f64 (-.f64 y z) x) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(/.f64 (*.f64 (-.f64 y z) x) y)","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","1","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)","(+.f64 1 (*.f64 -1 (/.f64 z y)))","(/.f64 (-.f64 y z) y)"]],"time":183.476806640625,"type":"simplify"},{"compiler":[[2765,762]],"time":22.363037109375,"type":"eval"},{"alts":[["(*.f64 x (pow.f64 (cbrt.f64 (/.f64 (-.f64 y z) y)) 3))","fresh",3.7572250976844206],["(/.f64 (*.f64 x (-.f64 y z)) y)","done",10.02188919949729],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","next",3.619472509768442],["(*.f64 x (*.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))","fresh",4.240137951663661],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","fresh",5.537756451075212],["(/.f64 (*.f64 (cbrt.f64 (-.f64 y z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) x)) (cbrt.f64 y))","fresh",13.458761946284755]],"compiler":[[13,9],[10,6],[13,10],[16,10],[10,6],[21,13],[13,9],[13,10],[16,10],[10,6],[21,13]],"count":[[217,6]],"kept":[{"done":[1,1],"fresh":[4,1],"new":[211,4],"picked":[1,0]}],"min-error":[0],"time":64.697998046875,"type":"prune"},{"compiler":[[36,21]],"locations":[["(*.f64 (/.f64 1 y) (neg.f64 z))",0.20703125,true],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))",3.3920789538413483,true]],"time":8.2041015625,"type":"localize"},{"count":[[2,60]],"series":[["(*.f64 (/.f64 1 y) (neg.f64 z))","z","-inf",0.2060546875],["(*.f64 (/.f64 1 y) (neg.f64 z))","z","inf",0.3779296875],["(*.f64 (/.f64 1 y) (neg.f64 z))","z","0",0.30322265625],["(*.f64 (/.f64 1 y) (neg.f64 z))","y","-inf",0.14208984375],["(*.f64 (/.f64 1 y) (neg.f64 z))","y","inf",0.298095703125],["(*.f64 (/.f64 1 y) (neg.f64 z))","y","0",0.261962890625],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","z","-inf",0.260986328125],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","z","inf",0.361083984375],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","z","0",0.36181640625],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","y","-inf",0.22705078125],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","y","inf",0.39111328125],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","y","0",0.385009765625],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","x","-inf",0.297119140625],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","x","inf",1.018798828125],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","x","0",0.716064453125]],"time":5.783935546875,"type":"series"},{"count":[[2,122]],"inputs":[["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","(*.f64 (/.f64 1 y) (neg.f64 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x) 0) (fma.f64 (neg.f64 (/.f64 z y)) x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x) (*.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (neg.f64 (/.f64 z y)) x x)) (fma.f64 (neg.f64 (/.f64 z y)) x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x) (*.f64 0 (fma.f64 (neg.f64 (/.f64 z y)) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 (*.f64 x z) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (/.f64 (*.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y z) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (-.f64 y z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 y z) y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 y z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) x) (cbrt.f64 (/.f64 (-.f64 y z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 (-.f64 y z) y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 y z) y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 x) (*.f64 (neg.f64 (/.f64 z y)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 (neg.f64 (/.f64 z y)) (cbrt.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x)) (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x) 2)) (cbrt.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 (-.f64 y z) y))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 (/.f64 z y)) x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) (*.f64 x (cbrt.f64 (/.f64 (-.f64 y z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (pow.f64 (/.f64 z y) 3))) (/.f64 1 (+.f64 (pow.f64 (/.f64 z y) 2) (/.f64 (+.f64 y z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 (/.f64 z y) 3))) (cbrt.f64 (+.f64 (pow.f64 (/.f64 z y) 2) (/.f64 (+.f64 y z) y)))) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (/.f64 z y) 2) (/.f64 (+.f64 y z) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 (/.f64 z y) 3))) (+.f64 (pow.f64 (/.f64 z y) 2) (/.f64 (+.f64 y z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 (-.f64 1 (pow.f64 (/.f64 z y) 3)))) (+.f64 -1 (*.f64 (/.f64 z y) (-.f64 -1 (/.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (-.f64 1 (pow.f64 (/.f64 z y) 3))) x) (+.f64 -1 (*.f64 (/.f64 z y) (-.f64 -1 (/.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 z y) 3))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) x)) (cbrt.f64 (+.f64 (pow.f64 (/.f64 z y) 2) (/.f64 (+.f64 y z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 (/.f64 z y) 3))) 1) (+.f64 (pow.f64 (/.f64 z y) 2) (/.f64 (+.f64 y z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 (/.f64 z y) 3))) 1) (+.f64 (pow.f64 (/.f64 z y) 2) (/.f64 (+.f64 y z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 1 (pow.f64 (/.f64 z y) 3)))) (+.f64 -1 (*.f64 (/.f64 z y) (-.f64 -1 (/.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 (/.f64 z y)) x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (neg.f64 (/.f64 z y)))) (cbrt.f64 (pow.f64 (/.f64 z y) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 z y)) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) (neg.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 (/.f64 z y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x z) y))) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x z) y))) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (neg.f64 (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (/.f64 z y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 z y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 z y) 2)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) (/.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (/.f64 z y)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) -1 (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (/.f64 (*.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 (*.f64 x z) y)) x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) 0) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (/.f64 z y)) 0) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 z y)) (*.f64 (neg.f64 (/.f64 z y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (/.f64 z y))) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 z y)) (*.f64 0 (neg.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 z)) (/.f64 (cbrt.f64 (*.f64 z z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 y)) (*.f64 (cbrt.f64 (pow.f64 y -2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 z y))) (cbrt.f64 (pow.f64 (/.f64 z y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 z) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 z y) 2)) (cbrt.f64 (neg.f64 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 z) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 z)) y) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (cbrt.f64 (pow.f64 y -2)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 z z)) y) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -2)) (/.f64 (neg.f64 z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 y -2)) z) (cbrt.f64 (/.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (/.f64 (cbrt.f64 (neg.f64 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 y -2)) (neg.f64 z)) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (cbrt.f64 z) y)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 z y)) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 z y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 z) y) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (neg.f64 y)) (*.f64 y (neg.f64 z))) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 z y) 2)) (cbrt.f64 (neg.f64 z))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 y)) z) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 z y))) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 z) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (pow.f64 (/.f64 z y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 y -2)) (neg.f64 z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 y -2)) (neg.f64 z))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 y -2)) z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 z) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 z) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 z (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 z) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 y) (*.f64 y z)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (neg.f64 z) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (/.f64 z y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 z y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 z y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 z y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 z y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (pow.f64 (/.f64 z y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (neg.f64 (/.f64 z y)))))))"]],"rules":[["egg-rr",62],["egg-rr",60]],"time":27.509033203125,"type":"rewrite"},{"count":[[182,127]],"inputs":[["(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(*.f64 -1 (/.f64 z y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))"]],"time":180.385009765625,"type":"simplify"},{"compiler":[[1683,686]],"time":17.0439453125,"type":"eval"},{"alts":[["(*.f64 x (+.f64 1 (*.f64 (cbrt.f64 (neg.f64 z)) (/.f64 (cbrt.f64 (*.f64 z z)) y))))","fresh",14.118652798909173],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","next",5.537756451075212],["(/.f64 (*.f64 x (-.f64 y z)) y)","done",10.02188919949729],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","done",3.619472509768442],["(*.f64 x (+.f64 1 (*.f64 (/.f64 (neg.f64 z) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y -2)))))","fresh",17.304873052183332]],"compiler":[[17,12],[10,6],[10,6],[13,10],[17,13],[17,12],[10,6],[17,13]],"count":[[133,5]],"kept":[{"done":[1,1],"fresh":[4,0],"new":[127,3],"picked":[1,1]}],"min-error":[0],"time":35.7041015625,"type":"prune"},{"compiler":[[18,6]],"locations":[["(fma.f64 (neg.f64 z) (/.f64 x y) x)",5.283731023570427,true]],"time":4.27001953125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (neg.f64 z) (/.f64 x y) x)","y","-inf",0.321044921875],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","y","inf",0.314208984375],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","y","0",0.297119140625],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","x","-inf",0.636962890625],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","x","inf",0.515869140625],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","x","0",0.4150390625],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","z","-inf",0.226806640625],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","z","inf",0.2451171875],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","z","0",0.393798828125]],"time":3.475830078125,"type":"series"},{"count":[[1,38]],"inputs":[["(fma.f64 (neg.f64 z) (/.f64 x y) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 (*.f64 z x) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (neg.f64 z) (/.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 z) (/.f64 x y) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (/.f64 (*.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 (*.f64 z x) y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 (*.f64 z x) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (neg.f64 z) (/.f64 x y) x)) (pow.f64 (fma.f64 (neg.f64 z) (/.f64 x y) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (neg.f64 z) (/.f64 x y) x) 2/3) (cbrt.f64 (fma.f64 (neg.f64 z) (/.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 (*.f64 z x) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (*.f64 z x) y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (/.f64 z y)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 z x) y) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (/.f64 (*.f64 z x) y)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (/.f64 (*.f64 z x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 z x) y) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 z x) y))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 z x) y))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (+.f64 (pow.f64 (cbrt.f64 (/.f64 (*.f64 z x) y)) 2) (*.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (*.f64 z x) y))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (*.f64 z x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (neg.f64 z) (/.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 z) (/.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (*.f64 z x) y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 z) (/.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (neg.f64 z) (/.f64 x y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (neg.f64 z) (/.f64 x y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (neg.f64 z) (/.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (*.f64 z x) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (neg.f64 z) (/.f64 x y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) (/.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (*.f64 (pow.f64 z 2/3) (/.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 z x) y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 z x) y) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) (neg.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (cbrt.f64 (/.f64 x y))) (pow.f64 (/.f64 x y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 z x) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 (*.f64 z x) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 (*.f64 z x) y)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (/.f64 (*.f64 z x) y)))))))"]],"rules":[["egg-rr",38]],"time":39.91796875,"type":"rewrite"},{"count":[[74,45]],"inputs":[["x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) 1) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) 1) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) 1) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) 1) x))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) 1) x))","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) 1) x))","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) 1) x))","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 z y) 1) x))","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(fma.f64 x (neg.f64 (/.f64 z y)) x)"]],"time":118.299072265625,"type":"simplify"},{"compiler":[[500,142]],"time":5.14892578125,"type":"eval"},{"alts":[["(*.f64 x (+.f64 1 (*.f64 (cbrt.f64 (neg.f64 z)) (/.f64 (cbrt.f64 (*.f64 z z)) y))))","fresh",14.118652798909173],["(fma.f64 (neg.f64 z) (/.f64 x y) x)","done",5.537756451075212],["(/.f64 (*.f64 x (-.f64 y z)) y)","done",10.02188919949729],["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","done",3.619472509768442],["(*.f64 x (+.f64 1 (*.f64 (/.f64 (neg.f64 z) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y -2)))))","fresh",17.304873052183332]],"compiler":[[17,12],[10,6],[10,6],[13,10],[17,13]],"count":[[50,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[45,0],"picked":[1,1]}],"min-error":[0],"time":7.923095703125,"type":"prune"},{"accuracy":[0.125],"baseline":[3.6015625],"branch":[["x",1.5416627010752117,3],["y",2.0024561950720505,3],["z",1.8211473465791692,2],["(/.f64 (*.f64 x (-.f64 y z)) y)",0.125,5]],"compiler":[[4,3],[4,3],[4,3],[10,6],[149,68]],"count":[[13,5]],"inputs":[["(*.f64 x (+.f64 1 (*.f64 (cbrt.f64 (neg.f64 z)) (/.f64 (cbrt.f64 (*.f64 z z)) y))))","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(*.f64 x (+.f64 1 (*.f64 (/.f64 (neg.f64 z) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y -2)))))","(*.f64 x (pow.f64 (cbrt.f64 (/.f64 (-.f64 y z) y)) 3))","(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","(*.f64 x (*.f64 (/.f64 (-.f64 y z) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))","(/.f64 (*.f64 (cbrt.f64 (-.f64 y z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y z) y) 2)) x)) (cbrt.f64 y))","(*.f64 (/.f64 (*.f64 x (-.f64 y z)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))","(fma.f64 (neg.f64 z) (/.f64 x y) x)","(*.f64 x (/.f64 (-.f64 y z) y))","(/.f64 (pow.f64 (cbrt.f64 (*.f64 x (-.f64 y z))) 3) y)","(+.f64 (*.f64 (*.f64 x y) (/.f64 1 y)) (*.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y)))","(/.f64 (*.f64 x (-.f64 y z)) y)"]],"link":["."],"name":["Diagrams.Backend.Cairo.Internal:setTexture from diagrams-cairo-1.3.0.3"],"oracle":[33.56746291392707],"outputs":[["(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))","(+.f64 (*.f64 (*.f64 x y) (/.f64 1 y)) (*.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y)))","(*.f64 x (/.f64 (-.f64 y z) y))","(/.f64 (*.f64 x (-.f64 y z)) y)","(*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))"]],"time":60.81298828125,"times":[["x",13.983154296875],["y",14.2080078125],["z",9.285888671875],["(/.f64 (*.f64 x (-.f64 y z)) y)",20.56005859375]],"type":"regimes"},{"bstep":[[5.107082205445891e+291,2.7553808457307142e+293,0.02783203125],[3.161401321314294e-30,7.767119254867248e-28,0.032958984375],[-1.3991809301518714e+29,-741732445099251.1,0.07080078125],[{"type":"real","value":"-inf"},-1.9643998516434585e+304,0.033935546875]],"compiler":[[6,5],[10,6]],"method":["left-value","left-value","left-value","left-value"],"time":0.301025390625,"type":"bsearch"},{"compiler":[[93,43]],"inputs":[["(if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) -inf.0) (*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z)))) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) -99999999999999991433150857216) (+.f64 (*.f64 (*.f64 x y) (/.f64 1 y)) (*.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y))) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 7136238463529799/1427247692705959881058285969449495136382746624) (*.f64 x (/.f64 (-.f64 y z) y)) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 10000000000000000132565989783574162680686561089586460035632031477942492726904253214615979418039362499727374638565892090988122974650007025784551738302746731685907395315255274646861058187558214617579496201832662352585538835573636597522107561710941518560028749376834095178551288964115055725510656) (/.f64 (*.f64 x (-.f64 y z)) y) (*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) -inf.0) (*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z)))) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) -99999999999999991433150857216) (+.f64 (*.f64 (*.f64 x y) (/.f64 1 y)) (*.f64 (neg.f64 (*.f64 z x)) (/.f64 1 y))) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 7136238463529799/1427247692705959881058285969449495136382746624) (*.f64 x (/.f64 (-.f64 y z) y)) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 10000000000000000132565989783574162680686561089586460035632031477942492726904253214615979418039362499727374638565892090988122974650007025784551738302746731685907395315255274646861058187558214617579496201832662352585538835573636597522107561710941518560028749376834095178551288964115055725510656) (/.f64 (*.f64 x (-.f64 y z)) y) (*.f64 x (+.f64 1 (*.f64 (/.f64 1 y) (neg.f64 z))))))))","(if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) -inf.0) (/.f64 (*.f64 x (-.f64 y z)) y) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) -99999999999999991433150857216) (/.f64 (*.f64 x (-.f64 y z)) y) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 7136238463529799/1427247692705959881058285969449495136382746624) (/.f64 (*.f64 x (-.f64 y z)) y) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 10000000000000000132565989783574162680686561089586460035632031477942492726904253214615979418039362499727374638565892090988122974650007025784551738302746731685907395315255274646861058187558214617579496201832662352585538835573636597522107561710941518560028749376834095178551288964115055725510656) (/.f64 (*.f64 x (-.f64 y z)) y) (/.f64 (*.f64 x (-.f64 y z)) y)))))"]],"stop":[["fuel",1]],"time":26.972900390625,"type":"simplify"},{"time":0.007080078125,"type":"soundness"},{"compiler":[[93,43]],"remove-preprocessing":[[]],"time":19.117919921875,"type":"end"}]
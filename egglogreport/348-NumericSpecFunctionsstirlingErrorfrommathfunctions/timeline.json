[{"compiler":[[16,11]],"method":["search"],"sampling":[[12,0.2866890099496686,0.21257892574499238,0.500732064305339],[11,0.24573343709971596,0.25353449859494503,0.500732064305339],[10,0.2106286603711851,0.2886392753234759,0.500732064305339],[9,0.1404191069141234,0.3588488287805376,0.500732064305339],[8,0.09361273794274894,0.6552891655992426,0.2510980964580085],[7,0.062408491961832624,0.6864934115801589,0.2510980964580085],[6,0.0,0.7489019035419915,0.2510980964580085],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":61.0419921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",2.164794921875,41],["body",1024,"valid",0.162109375,1],["body",512,"valid",0.205078125,2],["body",256,"valid",446.18603515625,8253]],"time":456.7138671875,"type":"sample"},{"compiler":[[15,10]],"inputs":[["0","1","2"],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","(-.f64 (+.f64 (-.f64 y (*.f64 (+.f64 x 1/2) (log.f64 x))) x) z)","(-.f64 (+.f64 (-.f64 z (*.f64 (+.f64 y 1/2) (log.f64 y))) y) x)","(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 z 1/2) (log.f64 z))) z) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","(-.f64 x (+.f64 z (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 y))))","(-.f64 (+.f64 (-.f64 y (*.f64 (+.f64 x 1/2) (log.f64 x))) x) z)","(-.f64 (-.f64 x z) (fma.f64 (log.f64 x) (+.f64 x 1/2) (neg.f64 y)))","(-.f64 (+.f64 (-.f64 z (*.f64 (+.f64 y 1/2) (log.f64 y))) y) x)","(-.f64 (-.f64 y x) (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 z)))","(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 z 1/2) (log.f64 z))) z) y)","(-.f64 x (+.f64 (fma.f64 (log.f64 z) (+.f64 z 1/2) (neg.f64 z)) y))"]],"symmetry":[[]],"time":79.194091796875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))"]],"time":23.669921875,"type":"simplify"},{"compiler":[[26,15]],"time":0.59814453125,"type":"eval"},{"alts":[["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","next",0.07421875],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","fresh",0.11556625976844202]],"compiler":[[14,9],[15,10],[14,9],[15,10]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.05078125],"time":1.635986328125,"type":"prune"},{"compiler":[[35,15]],"locations":[["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))",0.00390625,true],["(fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))",0.08984375,true]],"time":9.325927734375,"type":"localize"},{"count":[[2,60]],"series":[["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","z","-inf",0.2080078125],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","z","inf",0.178955078125],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","z","0",0.22705078125],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","y","-inf",0.256103515625],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","y","inf",0.258056640625],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","y","0",0.215087890625],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","x","-inf",0.221923828125],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","x","inf",0.23388671875],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","x","0",1.06201171875],["(fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))","z","-inf",0.22998046875],["(fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))","z","inf",0.248046875],["(fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))","z","0",1.93701171875],["(fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))","y","-inf",3.22607421875],["(fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))","y","inf",1.57080078125],["(fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))","y","0",3.7509765625]],"time":14.134033203125,"type":"series"},{"count":[[2,107]],"inputs":[["(fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))","(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 z y) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (fma.f64 (+.f64 y 1/2) (log.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) (neg.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (+.f64 (neg.f64 y) (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) y) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 0) (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) (*.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (*.f64 (neg.f64 (+.f64 y 1/2)) (log.f64 y))) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) (*.f64 0 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 (+.f64 y 1/2)) (log.f64 y)) -1) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) 0) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 0) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 z (-.f64 y (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 2)) (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 y (fma.f64 (+.f64 y 1/2) (log.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 2)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) (+.f64 y 1/2) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y 1/2)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1/2) 2)) (log.f64 y)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 y 1/2) (log.f64 y)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 1 (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 z y)) (cbrt.f64 (pow.f64 (-.f64 z y) 2)) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 z y) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 z y) 1 (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 y z) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 z y) 2)) (cbrt.f64 (-.f64 z y)) (*.f64 (+.f64 y 1/2) (log.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) 0) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 0) (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (*.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))) (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (*.f64 0 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (+.f64 y 1/2)) (log.f64 y)) (+.f64 (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (+.f64 y 1/2)) (log.f64 y)) (*.f64 -1 (-.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) -1) (*.f64 (-.f64 z (+.f64 y x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (+.f64 y 1/2)) (log.f64 y)) (neg.f64 (-.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (neg.f64 (+.f64 y 1/2)) (log.f64 y)) (-.f64 z (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (-.f64 z y)) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) (neg.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x 0) (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z (+.f64 y x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 x) (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z (+.f64 y x))))) (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 2)) (cbrt.f64 (*.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))) (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 2)) (cbrt.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z (+.f64 y x)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z (+.f64 y x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 z y) (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))))"]],"rules":[["egg-rr",59],["egg-rr",48]],"time":31.677978515625,"type":"rewrite"},{"count":[[167,145]],"inputs":[["(+.f64 (*.f64 1/2 (log.f64 y)) z)","(+.f64 (*.f64 1/2 (log.f64 y)) (+.f64 z (*.f64 (-.f64 (log.f64 y) 1) y)))","(+.f64 (*.f64 1/2 (log.f64 y)) (+.f64 z (*.f64 (-.f64 (log.f64 y) 1) y)))","(+.f64 (*.f64 1/2 (log.f64 y)) (+.f64 z (*.f64 (-.f64 (log.f64 y) 1) y)))","(*.f64 y (-.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) 1))","(+.f64 (*.f64 y (-.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) 1)) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(+.f64 (*.f64 y (-.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) 1)) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(+.f64 (*.f64 y (-.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) 1)) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))) z))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))) z))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))) z))","(-.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) y)","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","z","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","z","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(-.f64 y (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 x (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y)))))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 1/2 (log.f64 y)) z)","(fma.f64 1/2 (log.f64 y) z)","(+.f64 (*.f64 1/2 (log.f64 y)) (+.f64 z (*.f64 (-.f64 (log.f64 y) 1) y)))","(fma.f64 1/2 (log.f64 y) (fma.f64 y (+.f64 (log.f64 y) -1) z))","(+.f64 (*.f64 1/2 (log.f64 y)) (+.f64 z (*.f64 (-.f64 (log.f64 y) 1) y)))","(fma.f64 1/2 (log.f64 y) (fma.f64 y (+.f64 (log.f64 y) -1) z))","(+.f64 (*.f64 1/2 (log.f64 y)) (+.f64 z (*.f64 (-.f64 (log.f64 y) 1) y)))","(fma.f64 1/2 (log.f64 y) (fma.f64 y (+.f64 (log.f64 y) -1) z))","(*.f64 y (-.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) 1))","(*.f64 (+.f64 (log.f64 y) -1) y)","(+.f64 (*.f64 y (-.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) 1)) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 -1/2 (neg.f64 (log.f64 y)) z))","(+.f64 (*.f64 y (-.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) 1)) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 -1/2 (neg.f64 (log.f64 y)) z))","(+.f64 (*.f64 y (-.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) 1)) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 -1/2 (neg.f64 (log.f64 y)) z))","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))))","(*.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))) z))","(fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) z))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))) z))","(fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) z))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))) z))","(fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) z))","(-.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) y)","(fma.f64 (+.f64 1/2 y) (log.f64 y) (neg.f64 y))","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","z","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","z","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 y (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 y (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 x (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 x (fma.f64 1/2 (log.f64 y) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(fma.f64 y (-.f64 1 (log.f64 y)) (-.f64 x (fma.f64 1/2 (log.f64 y) z)))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(fma.f64 y (-.f64 1 (log.f64 y)) (-.f64 x (fma.f64 1/2 (log.f64 y) z)))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(fma.f64 y (-.f64 1 (log.f64 y)) (-.f64 x (fma.f64 1/2 (log.f64 y) z)))","(*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y)))))","(*.f64 (-.f64 1 (log.f64 y)) y)","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (fma.f64 y (-.f64 1 (log.f64 y)) x) (fma.f64 -1/2 (neg.f64 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (fma.f64 y (-.f64 1 (log.f64 y)) x) (fma.f64 -1/2 (neg.f64 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (fma.f64 y (-.f64 1 (log.f64 y)) x) (fma.f64 -1/2 (neg.f64 (log.f64 y)) z))","(*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(*.f64 y (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (fma.f64 y (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) x) (fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (fma.f64 y (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) x) (fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (fma.f64 y (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) x) (fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) z))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))"]],"time":199.472900390625,"type":"simplify"},{"compiler":[[2157,1071]],"time":24.43212890625,"type":"eval"},{"alts":[["(-.f64 x (pow.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 3))","fresh",0.5756990235163767],["(-.f64 x (fma.f64 (cbrt.f64 (+.f64 y 1/2)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1/2) 2)) (log.f64 y)) (-.f64 z y)))","fresh",14.099941259768443],["(-.f64 x (fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y)))","fresh",0.21197133791597814],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","done",0.07421875],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","next",0.11556625976844202]],"compiler":[[17,12],[22,16],[21,14],[14,9],[15,10],[17,12],[22,16],[21,14],[15,10]],"count":[[147,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[145,4],"picked":[1,1]}],"min-error":[0.02734375],"time":44.266845703125,"type":"prune"},{"compiler":[[48,25]],"locations":[["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))",0.0078125,true],["(-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z)",0.0078125,true],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)",0.078125,true],["(*.f64 (+.f64 y 1/2) (log.f64 y))",0.171875,true]],"time":11.26611328125,"type":"localize"},{"count":[[4,108]],"series":[["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","y","-inf",0.218994140625],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","y","inf",0.202880859375],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","y","0",0.18212890625],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","x","-inf",0.174072265625],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","x","inf",0.162841796875],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","x","0",0.24609375],["(-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z)","z","-inf",0.1640625],["(-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z)","z","inf",0.18603515625],["(-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z)","z","0",0.179931640625],["(-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z)","y","-inf",0.22607421875],["(-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z)","y","inf",0.19091796875],["(-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z)","y","0",0.18798828125],["(-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z)","x","-inf",0.18798828125],["(-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z)","x","inf",0.1669921875],["(-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z)","x","0",0.200927734375],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","z","-inf",0.19091796875],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","z","inf",0.205078125],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","z","0",0.201904296875],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","y","-inf",0.260009765625],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","y","inf",0.2158203125],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","y","0",0.214111328125],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","x","-inf",0.199951171875],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","x","inf",0.19091796875],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","x","0",0.2119140625],["(*.f64 (+.f64 y 1/2) (log.f64 y))","y","-inf",0.212158203125],["(*.f64 (+.f64 y 1/2) (log.f64 y))","y","inf",0.213134765625],["(*.f64 (+.f64 y 1/2) (log.f64 y))","y","0",0.221923828125]],"time":5.846923828125,"type":"series"},{"count":[[4,224]],"inputs":[["(*.f64 (+.f64 y 1/2) (log.f64 y))","(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","(-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z)","(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (log.f64 y)) (*.f64 1/2 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) y) (*.f64 1/2 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (log.f64 y)) (*.f64 (log.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 1/2 (log.f64 y))) (*.f64 1 (*.f64 y (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 1/2 (log.f64 y))) (*.f64 1 (*.f64 (log.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (log.f64 y) y)) (*.f64 1 (*.f64 1/2 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 y (log.f64 y))) (*.f64 1 (*.f64 1/2 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) (*.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 0) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (log.f64 y)) 1) (*.f64 (*.f64 y (log.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (log.f64 y)) 1) (*.f64 (*.f64 (log.f64 y) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 y) y) 1) (*.f64 (*.f64 1/2 (log.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (log.f64 y)) 1) (*.f64 (*.f64 1/2 (log.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) (*.f64 0 (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 y 1/2) (log.f64 y))) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (+.f64 (pow.f64 y 3) 1/8)) (/.f64 1 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 y 3) 1/8) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))) (/.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 y 3) 1/8) 1) (/.f64 (log.f64 y) (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 y) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))) (/.f64 (+.f64 (pow.f64 y 3) 1/8) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (+.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y 1/2)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1/2) 2)) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y 1/2) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (+.f64 y 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 2)) (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (cbrt.f64 (+.f64 y 1/2))) (cbrt.f64 (pow.f64 (+.f64 y 1/2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (+.f64 (pow.f64 y 3) 1/8)) (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 (pow.f64 y 3) 1/8))) (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (neg.f64 (+.f64 (pow.f64 y 3) 1/8))) (neg.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 y 3) 1/8)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1/2) 2)) (log.f64 y))) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (log.f64 y) (+.f64 (pow.f64 y 3) 1/8)) 1) (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 y 3) 1/8)) (log.f64 y)) (neg.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (log.f64 y) (+.f64 (pow.f64 y 3) 1/8)) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (log.f64 y) (+.f64 (pow.f64 y 3) 1/8)) 1) (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (log.f64 y) (+.f64 (pow.f64 y 3) 1/8))) (neg.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y z) (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) (*.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) 0) (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) (*.f64 (-.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) (*.f64 0 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z)))) (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (-.f64 y (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y x) (fma.f64 (-.f64 -1/2 y) (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) (+.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) (-.f64 x (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y (-.f64 z x)) (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 y (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x))) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 y z) (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 y 1/2) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 y (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 y 0) (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 y (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x))) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (-.f64 y (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x))) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 y (-.f64 z x)) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (+.f64 y x) z) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z)))) (cbrt.f64 (pow.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 2)) (-.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) y)))) (+.f64 (cbrt.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z))) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 y y)) (-.f64 (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 2)) (cbrt.f64 (*.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) y)))) (+.f64 (cbrt.f64 y) (cbrt.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) 2)) (cbrt.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) (-.f64 z y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (-.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z))) (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 2)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) 2)) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (neg.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (neg.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 y) (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) 2)) (cbrt.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) 1 (-.f64 y z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) (*.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 0) (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) (*.f64 0 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z))) (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) (neg.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 z) x) (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) (+.f64 x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (-.f64 z x)) (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (-.f64 z x)) (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 z x) -1) (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (-.f64 z x)) (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 z) 0) (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 z) (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 z) x) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (-.f64 z x)) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x z) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z))) (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 2)) (cbrt.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) x))) (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) 2)) (+.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (*.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) z)))) (-.f64 (cbrt.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) x)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y 1/2) z) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) 2)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (fma.f64 (-.f64 -1/2 y) (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (fma.f64 (-.f64 -1/2 y) (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (fma.f64 (-.f64 -1/2 y) (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (fma.f64 (-.f64 -1/2 y) (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (fma.f64 (-.f64 -1/2 y) (log.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 x (fma.f64 (log.f64 y) (+.f64 y 1/2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) 2)) (cbrt.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) 1 (neg.f64 z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) (*.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) 0) (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) (*.f64 0 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))) (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) (*.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (*.f64 1/2 (log.f64 y))) (*.f64 (log.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (*.f64 (log.f64 y) y)) (*.f64 1/2 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (*.f64 y (log.f64 y))) (*.f64 1/2 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (*.f64 1/2 (log.f64 y))) (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x 0) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 x) (*.f64 (-.f64 -1/2 y) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 2)) (cbrt.f64 (*.f64 (*.f64 x (log.f64 y)) (+.f64 y 1/2))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) 2)) (cbrt.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (neg.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (+.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y))))))))"]],"rules":[["egg-rr",44],["egg-rr",61],["egg-rr",71],["egg-rr",48]],"time":42.60107421875,"type":"rewrite"},{"count":[[332,278]],"inputs":[["(*.f64 1/2 (log.f64 y))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(-.f64 y (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 x (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y)))))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","x","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","x","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(-.f64 x (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(*.f64 y (log.f64 (/.f64 1 y)))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 x (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","x","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","x","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(-.f64 x (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(*.f64 y (log.f64 (/.f64 1 y)))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (log.f64 y))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(*.f64 (+.f64 1/2 y) (log.f64 y))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(*.f64 (+.f64 1/2 y) (log.f64 y))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(*.f64 (+.f64 1/2 y) (log.f64 y))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(*.f64 y (log.f64 y))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(*.f64 (+.f64 1/2 y) (log.f64 y))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(*.f64 (+.f64 1/2 y) (log.f64 y))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(*.f64 (+.f64 1/2 y) (log.f64 y))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) y)","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 1/2 y))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 1/2 y))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(*.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 1/2 y))","(-.f64 y (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 y (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 x (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 x (fma.f64 1/2 (log.f64 y) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(fma.f64 (-.f64 1 (log.f64 y)) y (-.f64 x (fma.f64 1/2 (log.f64 y) z)))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(fma.f64 (-.f64 1 (log.f64 y)) y (-.f64 x (fma.f64 1/2 (log.f64 y) z)))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(fma.f64 (-.f64 1 (log.f64 y)) y (-.f64 x (fma.f64 1/2 (log.f64 y) z)))","(*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y)))))","(*.f64 (-.f64 1 (log.f64 y)) y)","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(fma.f64 (-.f64 1 (log.f64 y)) y (-.f64 x (fma.f64 1/2 (log.f64 y) z)))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(fma.f64 (-.f64 1 (log.f64 y)) y (-.f64 x (fma.f64 1/2 (log.f64 y) z)))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(fma.f64 (-.f64 1 (log.f64 y)) y (-.f64 x (fma.f64 1/2 (log.f64 y) z)))","(*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(*.f64 y (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (fma.f64 y (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) x) (fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (fma.f64 y (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) x) (fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (fma.f64 y (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) x) (fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) z))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(+.f64 y (fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 x y) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(neg.f64 (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","x","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","x","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(+.f64 (*.f64 -1 (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z)) x)","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 x (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 x (fma.f64 1/2 (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(*.f64 y (log.f64 (/.f64 1 y)))","(*.f64 (neg.f64 y) (log.f64 y))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(*.f64 (neg.f64 y) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (fma.f64 (neg.f64 y) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x) (fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (fma.f64 (neg.f64 y) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x) (fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (fma.f64 (neg.f64 y) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x) (fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) z))","(-.f64 x (*.f64 (+.f64 1/2 y) (log.f64 y)))","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 (*.f64 -1 z) x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 x (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y)))","(*.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y))","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","x","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","x","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(-.f64 x (*.f64 1/2 (log.f64 y)))","(+.f64 x (*.f64 -1/2 (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(*.f64 y (log.f64 (/.f64 1 y)))","(*.f64 (neg.f64 y) (log.f64 y))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(fma.f64 (neg.f64 (+.f64 1/2 y)) (log.f64 y) x)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(*.f64 (neg.f64 y) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(+.f64 (fma.f64 (neg.f64 y) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x) (*.f64 -1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(+.f64 (fma.f64 (neg.f64 y) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x) (*.f64 -1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(+.f64 (fma.f64 (neg.f64 y) (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x) (*.f64 -1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))))"]],"time":317.693115234375,"type":"simplify"},{"compiler":[[4515,2428]],"time":53.308837890625,"type":"eval"},{"alts":[["(+.f64 (-.f64 (-.f64 x (pow.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))) 3)) z) y)","fresh",0.29827890629507225],["(+.f64 (-.f64 (-.f64 x (/.f64 (/.f64 (*.f64 (log.f64 y) (+.f64 (pow.f64 y 3) 1/8)) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))) 2))) z) y)","fresh",20.117851269536885],["(-.f64 x (fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y)))","next",0.21197133791597814],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","done",0.07421875],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","done",0.11556625976844202]],"compiler":[[18,13],[37,28],[21,14],[14,9],[15,10],[18,13],[37,28],[21,14]],"count":[[283,5]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[278,2],"picked":[1,1]}],"min-error":[0.0234375],"time":129.366943359375,"type":"prune"},{"compiler":[[69,33]],"locations":[["(cbrt.f64 (log.f64 y))",0.1328125,true],["(*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))",0.18359375,true],["(fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))",0.2109375,true],["(pow.f64 (log.f64 y) 2)",0.584316259768442,true]],"time":18.841064453125,"type":"localize"},{"count":[[4,56]],"series":[["(cbrt.f64 (log.f64 y))","y","-inf",0.81884765625],["(cbrt.f64 (log.f64 y))","y","inf",0.8291015625],["(cbrt.f64 (log.f64 y))","y","0",2.420166015625],["(*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))","y","-inf",0.266845703125],["(*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))","y","inf",0.2509765625],["(*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))","y","0",0.198974609375],["(fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","z","-inf",0.18505859375],["(fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","z","inf",0.204833984375],["(fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","z","0",1.10205078125],["(fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","y","-inf",1.69384765625],["(fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","y","inf",1.483154296875],["(fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","y","0",1.890869140625],["(pow.f64 (log.f64 y) 2)","y","-inf",5.94091796875],["(pow.f64 (log.f64 y) 2)","y","inf",3.597900390625],["(pow.f64 (log.f64 y) 2)","y","0",16.955078125]],"time":38.22998046875,"type":"series"},{"count":[[4,149]],"inputs":[["(pow.f64 (log.f64 y) 2)","(fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","(*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))","(cbrt.f64 (log.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 y) 2) 0) (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 y) 2) (*.f64 (pow.f64 (log.f64 y) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (log.f64 y) 2)) (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 y) 2) (*.f64 0 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (log.f64 y) (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 y)) (neg.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) (+.f64 2/3 1)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (log.f64 y)) 1) (*.f64 (neg.f64 (log.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) (+.f64 2/3 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (pow.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (pow.f64 (log.f64 y) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2/3) (cbrt.f64 (pow.f64 (log.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (pow.f64 (log.f64 y) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4)) (pow.f64 (log.f64 y) 4))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 y) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 0) (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) (*.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) (*.f64 0 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 z y) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (fma.f64 (+.f64 y 1/2) (log.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) (neg.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (+.f64 (neg.f64 y) (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) y) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 0) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 z (-.f64 y (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (-.f64 y z) (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) 0) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 2/3) (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 y (fma.f64 (+.f64 y 1/2) (log.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 y z) (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (pow.f64 (log.f64 y) 2/3) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 z y) 2/3) (cbrt.f64 (-.f64 z y)) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 z y)) (pow.f64 (-.f64 z y) 2/3) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 y z) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) (*.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 2/3) (pow.f64 (log.f64 y) 2/3)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 2)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 4) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (+.f64 y 1/2) (pow.f64 (log.f64 y) 2/3)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 z y) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 z y) 1 (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 1 (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 y 1/2) (log.f64 y)) (-.f64 z y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 y)) y) (cbrt.f64 (*.f64 (log.f64 y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (log.f64 y) 1/8)) (*.f64 (cbrt.f64 (log.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 0) (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (*.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (*.f64 0 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (log.f64 y) 1/8)) 1) (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) y) 1) (*.f64 (cbrt.f64 (*.f64 (log.f64 y) 1/8)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (+.f64 y 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) (pow.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 2/3) (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (+.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y 1/2)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 y 1/2) 2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 y 1/2) 2) (log.f64 y))) (cbrt.f64 (+.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (+.f64 y 1/2)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 y 3) 1/8) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))) (/.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))) (/.f64 (+.f64 (pow.f64 y 3) 1/8) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))) (pow.f64 (+.f64 y 1/2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (+.f64 y 1/2) (cbrt.f64 (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y 1/2) 2/3) (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8)) (/.f64 1 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 3) 1/8) (/.f64 (cbrt.f64 (log.f64 y)) (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8)) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8)) (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 y)) (neg.f64 (+.f64 (pow.f64 y 3) 1/8))) (neg.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 y 3) 1/8)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 y 1/2) 2) (log.f64 y)))) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8)) 1) (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 y 3) 1/8)) (cbrt.f64 (log.f64 y))) (neg.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8)) 1) (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8))) (neg.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 y 1/2) 3) (log.f64 y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 y 1/2) 3) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) 1/2 (*.f64 (cbrt.f64 (log.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (log.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) y (cbrt.f64 (*.f64 (log.f64 y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (cbrt.f64 (log.f64 y)) (cbrt.f64 (*.f64 (log.f64 y) 1/8)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 y)) 0) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (log.f64 y))) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 y)) (*.f64 0 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 y))))))"]],"rules":[["egg-rr",19],["egg-rr",48],["egg-rr",49],["egg-rr",33]],"time":39.259033203125,"type":"rewrite"},{"count":[[205,183]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) z)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1))","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(-.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","z","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","z","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y)","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) 2)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) z)","(fma.f64 1/2 (log.f64 y) z)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1))","(*.f64 (+.f64 (log.f64 y) -1) y)","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))","(*.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) z))","(-.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (neg.f64 y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","z","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","z","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (log.f64 y) (+.f64 1/2 y) (-.f64 z y))","(*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3))","(cbrt.f64 (*.f64 1/8 (log.f64 y)))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 1/2 y))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 1/2 y))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 1/2 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1)))","(*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (neg.f64 y))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(fma.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (neg.f64 y) (cbrt.f64 (*.f64 1/8 (log.f64 y))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(fma.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (neg.f64 y) (cbrt.f64 (*.f64 1/8 (log.f64 y))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(fma.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (neg.f64 y) (cbrt.f64 (*.f64 1/8 (log.f64 y))))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y)","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) y)","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (+.f64 1/2 y))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (+.f64 1/2 y))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (+.f64 1/2 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))"]],"time":179.175048828125,"type":"simplify"},{"compiler":[[3856,2043]],"time":47.7509765625,"type":"eval"},{"alts":[["(-.f64 x (fma.f64 (*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y)))","next",0.3152314453688404],["(-.f64 x (fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y)))","done",0.21197133791597814],["(-.f64 x (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (+.f64 y 1/2) (pow.f64 (log.f64 y) 2/3)) (-.f64 z y)))","fresh",32.28980899652639],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","done",0.07421875],["(-.f64 x (fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (-.f64 z y)))","fresh",0.3323440304623596],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","done",0.11556625976844202]],"compiler":[[24,17],[21,14],[20,13],[14,9],[22,14],[15,10],[24,17],[20,13],[22,14]],"count":[[188,6]],"kept":[{"done":[2,2],"fresh":[2,0],"new":[183,3],"picked":[1,1]}],"min-error":[0],"time":56.7880859375,"type":"prune"},{"compiler":[[89,43]],"locations":[["(*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3))",0.18359375,true],["(fma.f64 (*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))",0.2109375,true],["(pow.f64 (log.f64 y) 2)",0.584316259768442,false],["(pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)",0.6729852051372827,true]],"time":23.423828125,"type":"localize"},{"count":[[3,48]],"series":[["(*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3))","y","-inf",2.9580078125],["(*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3))","y","inf",0.19091796875],["(*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3))","y","0",0.18408203125],["(fma.f64 (*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","z","-inf",0.1650390625],["(fma.f64 (*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","z","inf",0.197021484375],["(fma.f64 (*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","z","0",0.1708984375],["(fma.f64 (*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","y","-inf",0.2509765625],["(fma.f64 (*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","y","inf",0.213134765625],["(fma.f64 (*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","y","0",0.23095703125],["(pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)","y","-inf",8.494873046875],["(pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)","y","inf",16.12109375],["(pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)","y","0",8.4541015625]],"time":37.905029296875,"type":"series"},{"count":[[3,128]],"inputs":[["(pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)","(fma.f64 (*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y))","(*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 y)) 0) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 y)) (*.f64 0 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (log.f64 y))) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 8)) (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (log.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (+.f64 2 1/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (cbrt.f64 (neg.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) (*.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 0) (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) (*.f64 0 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 z y) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (fma.f64 (+.f64 y 1/2) (log.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) (neg.f64 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (+.f64 (neg.f64 y) (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) y) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 0) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 z (-.f64 y (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (-.f64 y z) (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) z) 0) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 2/3) (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 y (fma.f64 (+.f64 y 1/2) (log.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 y z) (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (pow.f64 (log.f64 y) 2/3) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 z y)) (pow.f64 (-.f64 z y) 2/3) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 z y) 2/3) (cbrt.f64 (-.f64 z y)) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 y z) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 2)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log.f64 y) 2/3) (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (+.f64 y 1/2) (pow.f64 (log.f64 y) 2/3)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 y) 4))) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) (*.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 2/3) (pow.f64 (log.f64 y) 2/3)) (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 z y) (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 z y) 1 (*.f64 (+.f64 y 1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) 1 (-.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 y 1/2) (log.f64 y)) (-.f64 z y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (log.f64 y) 1/8)) (*.f64 y (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (cbrt.f64 (log.f64 y))) (cbrt.f64 (*.f64 (log.f64 y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (*.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 0) (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (cbrt.f64 (*.f64 (log.f64 y) 1/8))) (*.f64 1 (*.f64 y (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 y (cbrt.f64 (log.f64 y)))) (*.f64 1 (cbrt.f64 (*.f64 (log.f64 y) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (*.f64 0 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (log.f64 y) 1/8)) 1) (*.f64 (*.f64 y (cbrt.f64 (log.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (cbrt.f64 (log.f64 y))) 1) (*.f64 (cbrt.f64 (*.f64 (log.f64 y) 1/8)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y 1/2)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 y 1/2) 2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (+.f64 y 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (*.f64 (+.f64 y 1/2) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (pow.f64 (log.f64 y) 2/3))) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (+.f64 y 1/2)) (cbrt.f64 (pow.f64 (log.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))) (pow.f64 (+.f64 y 1/2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2/3)) (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (+.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 y 1/2) 2) (log.f64 y))) (cbrt.f64 (+.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y 1/2) 2/3) (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 y 3) 1/8) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))) (/.f64 (cbrt.f64 (log.f64 y)) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))) (/.f64 (+.f64 (pow.f64 y 3) 1/8) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) (pow.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 2/3) (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8)) (/.f64 1 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 3) 1/8) (/.f64 (cbrt.f64 (log.f64 y)) (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8)) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8)) (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8))) (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 y)) (neg.f64 (+.f64 (pow.f64 y 3) 1/8))) (neg.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 y 3) 1/8)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 y 1/2) 2) (log.f64 y)))) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (pow.f64 y 3) 1/8)) (cbrt.f64 (log.f64 y))) (neg.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8)) 1) (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8)) 1) (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 (pow.f64 y 3) 1/8))) (neg.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 y 1/2) 3) (log.f64 y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 y 1/2) 3) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) 1/2 (*.f64 y (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (cbrt.f64 (log.f64 y)) (*.f64 y (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (cbrt.f64 (log.f64 y)) (cbrt.f64 (*.f64 (log.f64 y) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) y (cbrt.f64 (*.f64 (log.f64 y) 1/8)))))))"]],"rules":[["egg-rr",52],["egg-rr",50],["egg-rr",26]],"time":32.449951171875,"type":"rewrite"},{"count":[[176,161]],"inputs":[["(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (log.f64 y) 1/3))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (log.f64 y) 1/3))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (log.f64 y) 1/3))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (log.f64 y) 1/3))","(*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3))","(*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3))","(*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3))","(*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) z)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1))","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(-.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","z","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","z","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y)","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (log.f64 y) 1/3))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (log.f64 y) 1/3))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (log.f64 y) 1/3))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (log.f64 y) 1/3))","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3))","(*.f64 (pow.f64 -1 1/9) (cbrt.f64 (neg.f64 (log.f64 y))))","(*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3))","(*.f64 (pow.f64 -1 1/9) (cbrt.f64 (neg.f64 (log.f64 y))))","(*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3))","(*.f64 (pow.f64 -1 1/9) (cbrt.f64 (neg.f64 (log.f64 y))))","(*.f64 (pow.f64 -1 1/9) (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3))","(*.f64 (pow.f64 -1 1/9) (cbrt.f64 (neg.f64 (log.f64 y))))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3))","(cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3))","(cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3))","(cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3))","(cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) z)","(fma.f64 1/2 (log.f64 y) z)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) (+.f64 z (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (log.f64 y)) 1) y)))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1))","(*.f64 (+.f64 (log.f64 y) -1) y)","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(+.f64 (*.f64 y (-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y)))) 1)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) z))","(fma.f64 y (+.f64 (log.f64 y) -1) (fma.f64 1/2 (log.f64 y) z))","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))","(*.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) z))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 z (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))))))","(fma.f64 1/2 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) (fma.f64 (neg.f64 y) (-.f64 1 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) z))","(-.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) y)","(fma.f64 (+.f64 1/2 y) (log.f64 y) (neg.f64 y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (+.f64 1/2 y) (log.f64 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (+.f64 1/2 y) (log.f64 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (+.f64 1/2 y) (log.f64 y) (-.f64 z y))","z","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (+.f64 1/2 y) (log.f64 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (+.f64 1/2 y) (log.f64 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (+.f64 1/2 y) (log.f64 y) (-.f64 z y))","z","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (+.f64 1/2 y) (log.f64 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (+.f64 1/2 y) (log.f64 y) (-.f64 z y))","(-.f64 (+.f64 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)) z) y)","(fma.f64 (+.f64 1/2 y) (log.f64 y) (-.f64 z y))","(*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3))","(cbrt.f64 (*.f64 1/8 (log.f64 y)))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 1/2 y))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 1/2 y))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (log.f64 y)) 1/3)) (*.f64 (pow.f64 (*.f64 1 (log.f64 y)) 1/3) y))","(*.f64 (cbrt.f64 (log.f64 y)) (+.f64 1/2 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1)))","(*.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (neg.f64 y))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(fma.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (neg.f64 y) (cbrt.f64 (*.f64 1/8 (log.f64 y))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(fma.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (neg.f64 y) (cbrt.f64 (*.f64 1/8 (log.f64 y))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (*.f64 y (cbrt.f64 -1))) (*.f64 1/2 (*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))))","(fma.f64 (cbrt.f64 (neg.f64 (log.f64 y))) (neg.f64 y) (cbrt.f64 (*.f64 1/8 (log.f64 y))))","(*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y)","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) y)","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (+.f64 1/2 y))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (+.f64 1/2 y))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3) y) (*.f64 1/2 (pow.f64 (*.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) 1/3)))","(*.f64 (cbrt.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y))))) (+.f64 1/2 y))"]],"time":145.56005859375,"type":"simplify"},{"compiler":[[4315,2307]],"time":48.916015625,"type":"eval"},{"alts":[["(-.f64 x (fma.f64 (*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y)))","done",0.3152314453688404],["(-.f64 x (fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y)))","done",0.21197133791597814],["(-.f64 x (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (+.f64 y 1/2) (pow.f64 (log.f64 y) 2/3)) (-.f64 z y)))","fresh",32.28980899652639],["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","done",0.07421875],["(-.f64 x (fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (-.f64 z y)))","fresh",0.3323440304623596],["(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","done",0.11556625976844202]],"compiler":[[24,17],[21,14],[20,13],[14,9],[22,14],[15,10]],"count":[[203,6]],"kept":[{"done":[3,3],"fresh":[2,2],"new":[197,0],"picked":[1,1]}],"min-error":[0],"time":60.175048828125,"type":"prune"},{"accuracy":[0.07421875],"baseline":[0.07421875],"branch":[["x",0.07421875,1],["y",0.07421875,1],["z",0.07421875,1],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)",0.07421875,1],["(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)",0.07421875,1]],"compiler":[[4,3],[4,3],[4,3],[15,10],[13,9],[195,107]],"count":[[11,1]],"inputs":[["(-.f64 x (fma.f64 (*.f64 (+.f64 y 1/2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y)))","(-.f64 x (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (+.f64 y 1/2) (pow.f64 (log.f64 y) 2/3)) (-.f64 z y)))","(-.f64 x (fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 6)) (-.f64 z y)))","(+.f64 (-.f64 (-.f64 x (pow.f64 (cbrt.f64 (*.f64 (+.f64 y 1/2) (log.f64 y))) 3)) z) y)","(+.f64 (-.f64 (-.f64 x (/.f64 (/.f64 (*.f64 (log.f64 y) (+.f64 (pow.f64 y 3) 1/8)) (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2))))) (pow.f64 (cbrt.f64 (+.f64 1/4 (*.f64 y (+.f64 y -1/2)))) 2))) z) y)","(-.f64 x (pow.f64 (cbrt.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y))) 3))","(-.f64 x (fma.f64 (cbrt.f64 (+.f64 y 1/2)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1/2) 2)) (log.f64 y)) (-.f64 z y)))","(-.f64 x (fma.f64 (*.f64 (+.f64 y 1/2) (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 z y)))","(+.f64 (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z) y)","(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))","(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)"]],"link":["."],"name":["Numeric.SpecFunctions:stirlingError from math-functions-0.1.5.2"],"oracle":[52.162517626989754],"outputs":[["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))"]],"time":27.905029296875,"times":[["x",4.68212890625],["y",4.84716796875],["z",4.7021484375],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)",4.97119140625],["(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)",5.184814453125]],"type":"regimes"},{"compiler":[[14,9]],"inputs":[["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) (-.f64 z y)))"]],"stop":[["fuel",1]],"time":20.034912109375,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[14,9]],"remove-preprocessing":[[]],"time":9.156982421875,"type":"end"}]
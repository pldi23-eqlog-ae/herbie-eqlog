[{"compiler":[[14,12]],"method":["search"],"sampling":[[12,0.3138115406036377,0.4431428909301758,0.24304556846618652],[11,0.3133234977722168,0.4441189765930176,0.24255752563476563],[10,0.312347412109375,0.4450950622558594,0.24255752563476563],[9,0.3084430694580078,0.44899940490722656,0.24255752563476563],[8,0.3045387268066406,0.45290374755859375,0.24255752563476563],[7,0.29673004150390625,0.4685211181640625,0.23474884033203125],[6,0.2811126708984375,0.499755859375,0.2191314697265625],[5,0.2498779296875,0.562225341796875,0.187896728515625],[4,0.2498779296875,0.62469482421875,0.12542724609375],[3,0.2498779296875,0.7496337890625,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":80.394775390625,"type":"analyze"},{"outcomes":[["body",256,"invalid",3.27294921875,49],["body",512,"valid",174.572509765625,1338],["body",1024,"valid",683.232666015625,2806],["body",256,"valid",215.02001953125,3828],["body",2048,"valid",86.253662109375,284]],"time":1173.30615234375,"type":"sample"},{"compiler":[[13,11]],"inputs":[["0"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))"]],"symmetry":[[]],"time":67.890869140625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))"]],"time":28.025146484375,"type":"simplify"},{"compiler":[[21,16]],"time":0.541015625,"type":"eval"},{"alts":[["(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))","next",0.2578125]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.2578125],"time":0.85302734375,"type":"prune"},{"compiler":[[26,6]],"locations":[["(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))",0.0078125,true],["(/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))",0.2515904398784631,true]],"time":5.2978515625,"type":"localize"},{"count":[[2,24]],"series":[["(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))","x","-inf",0.2890625],["(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))","x","inf",0.322998046875],["(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))","x","0",0.591064453125],["(/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))","x","-inf",0.549072265625],["(/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))","x","inf",0.573974609375],["(/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))","x","0",0.47412109375]],"time":2.908935546875,"type":"series"},{"count":[[2,135]],"inputs":[["(/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))","(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (expm1.f64 x)) (pow.f64 (*.f64 (E.f64) (E.f64)) x)) (*.f64 (/.f64 1 (expm1.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1/2) (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 0) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (/.f64 -1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 0 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (*.f64 1/2 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (*.f64 (cbrt.f64 (/.f64 -1 (expm1.f64 x))) (pow.f64 (pow.f64 (expm1.f64 x) (neg.f64 1/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (*.f64 (cbrt.f64 (/.f64 -1 (expm1.f64 x))) (pow.f64 (cbrt.f64 (expm1.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) (neg.f64 1/3)) (neg.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (/.f64 1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (expm1.f64 x))) (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (expm1.f64 (+.f64 x x))) (/.f64 (cbrt.f64 (pow.f64 (expm1.f64 (+.f64 x x)) 2)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (/.f64 -1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (+.f64 x x)) (/.f64 1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (expm1.f64 x)) (expm1.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (expm1.f64 x) (neg.f64 1/3)) (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (expm1.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (expm1.f64 x) 2))) (pow.f64 (expm1.f64 x) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (expm1.f64 (+.f64 x x)) 2)) (expm1.f64 x)) (cbrt.f64 (expm1.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (expm1.f64 x)) (neg.f64 (expm1.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x))) (pow.f64 (cbrt.f64 (expm1.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 0) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2)) (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (neg.f64 (expm1.f64 x))) (neg.f64 (expm1.f64 x))) (*.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (cbrt.f64 (pow.f64 (expm1.f64 x) 2))) (*.f64 (expm1.f64 x) (pow.f64 (expm1.f64 x) (neg.f64 1/3)))) (*.f64 (expm1.f64 x) (cbrt.f64 (pow.f64 (expm1.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (expm1.f64 x) (neg.f64 1/3)) (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1)) (*.f64 (cbrt.f64 (pow.f64 (expm1.f64 x) 2)) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1) (*.f64 (expm1.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1)) (*.f64 (neg.f64 (expm1.f64 x)) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1) -1) (*.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1)) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1) 1) (*.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1) (pow.f64 (expm1.f64 x) (neg.f64 1/3))) (*.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1)) (cbrt.f64 (pow.f64 (expm1.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x))) (cbrt.f64 (pow.f64 (expm1.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (cbrt.f64 (pow.f64 (expm1.f64 (+.f64 x x)) 2))) (cbrt.f64 (pow.f64 (expm1.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2)) (cbrt.f64 (neg.f64 (expm1.f64 (+.f64 x x))))) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2)) (cbrt.f64 (expm1.f64 (+.f64 x x)))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (expm1.f64 x) (neg.f64 1/3)) (expm1.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (expm1.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (expm1.f64 x)) (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1)) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (pow.f64 (expm1.f64 x) 2))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x))) 1) (cbrt.f64 (pow.f64 (expm1.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2))) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (expm1.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1) (/.f64 1 (expm1.f64 x))) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (cbrt.f64 (expm1.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (expm1.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x))) 1) (cbrt.f64 (pow.f64 (expm1.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (expm1.f64 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (expm1.f64 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 (+.f64 x x)) -1) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (expm1.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (/.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (expm1.f64 x)) (neg.f64 (expm1.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 1 (expm1.f64 x)) (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (*.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1/2) (*.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 0) (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (*.f64 0 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (*.f64 1/2 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (fabs.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 0) (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (cbrt.f64 (neg.f64 (expm1.f64 (+.f64 x x))))) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (cbrt.f64 (expm1.f64 (+.f64 x x)))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (expm1.f64 (+.f64 x x))) (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))))"]],"rules":[["egg-rr",45],["egg-rr",90]],"time":33.293212890625,"type":"rewrite"},{"count":[[159,154]],"inputs":[["2","(+.f64 2 x)","(+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x)))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))"]],"method":["egg-herbie"],"outputs":[["2","(+.f64 2 x)","(+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 2 (fma.f64 1/2 (*.f64 x x) x))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 2 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x)))","(+.f64 (fma.f64 1/6 (pow.f64 x 3) 2) (fma.f64 1/2 (*.f64 x x) x))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(fma.f64 1/2 (/.f64 x (sqrt.f64 2)) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(fma.f64 1/2 (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))"]],"time":99.73681640625,"type":"simplify"},{"compiler":[[2553,888]],"time":25.89306640625,"type":"eval"},{"alts":[["(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","fresh",20.593354473006137],["(sqrt.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6))","fresh",0.2841987793053261],["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))","next",0.25390625]],"compiler":[[55,52],[13,10],[11,8],[55,52],[13,10],[11,8]],"count":[[155,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[154,3],"picked":[1,0]}],"min-error":[0.23564849718699368],"time":48.76806640625,"type":"prune"},{"compiler":[[38,11]],"locations":[["(pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)",0.01171875,true],["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))",0.23989503563729753,true],["(/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))",0.2515904398784631,false]],"time":8.447021484375,"type":"localize"},{"count":[[2,24]],"series":[["(pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)","x","-inf",17.376953125],["(pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)","x","inf",18.77001953125],["(pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)","x","0",0.7470703125],["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))","x","-inf",0.51806640625],["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))","x","inf",0.6611328125],["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))","x","0",0.39208984375]],"time":38.626953125,"type":"series"},{"count":[[2,42]],"inputs":[["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))","(pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) 0) (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))) (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) (*.f64 0 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) 2/3) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 0) (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) (*.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) (*.f64 0 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))) 4) 2) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) (pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 2/3) (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 3))))))"]],"rules":[["egg-rr",23],["egg-rr",19]],"time":26.04296875,"type":"rewrite"},{"count":[[66,62]],"inputs":[["(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 8)","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (sqrt.f64 8))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (+.f64 (*.f64 15/32 (*.f64 (sqrt.f64 8) (pow.f64 x 2))) (sqrt.f64 8)))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (+.f64 (*.f64 15/32 (*.f64 (sqrt.f64 8) (pow.f64 x 2))) (+.f64 (sqrt.f64 8) (*.f64 27/128 (*.f64 (sqrt.f64 8) (pow.f64 x 3))))))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 x (sqrt.f64 8)))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(fma.f64 1/2 (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (fma.f64 1/2 (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)) (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 8))))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 8)","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (sqrt.f64 8))","(fma.f64 3/4 (*.f64 (sqrt.f64 8) x) (sqrt.f64 8))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (+.f64 (*.f64 15/32 (*.f64 (sqrt.f64 8) (pow.f64 x 2))) (sqrt.f64 8)))","(fma.f64 (*.f64 (sqrt.f64 8) x) 3/4 (fma.f64 15/32 (*.f64 (sqrt.f64 8) (*.f64 x x)) (sqrt.f64 8)))","(+.f64 (*.f64 3/4 (*.f64 (sqrt.f64 8) x)) (+.f64 (*.f64 15/32 (*.f64 (sqrt.f64 8) (pow.f64 x 2))) (+.f64 (sqrt.f64 8) (*.f64 27/128 (*.f64 (sqrt.f64 8) (pow.f64 x 3))))))","(fma.f64 (*.f64 (sqrt.f64 8) x) 3/4 (fma.f64 15/32 (*.f64 (sqrt.f64 8) (*.f64 x x)) (fma.f64 (*.f64 27/128 (sqrt.f64 8)) (pow.f64 x 3) (sqrt.f64 8))))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)) 3))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)) 3))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)) 3))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)) 3))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)) 3))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)) 3))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)) 3))","(sqrt.f64 (/.f64 (pow.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) 3) (pow.f64 (-.f64 (exp.f64 x) 1) 3)))","(sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)) 3))"]],"time":89.7060546875,"type":"simplify"},{"compiler":[[2925,1400]],"time":36.216064453125,"type":"eval"},{"alts":[["(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","fresh",20.593354473006137],["(sqrt.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6))","next",0.2841987793053261],["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))","done",0.25390625]],"compiler":[[55,52],[13,10],[11,8],[55,52],[13,10]],"count":[[164,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[161,0],"picked":[1,1]}],"min-error":[0.23564849718699368],"time":51.350830078125,"type":"prune"},{"compiler":[[59,13]],"locations":[["(sqrt.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6))",0.0078125,true],["(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))",0.0078125,false],["(/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))",0.2515904398784631,false],["(pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6)",0.7092526120835178,true]],"time":11.630126953125,"type":"localize"},{"count":[[2,24]],"series":[["(sqrt.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6))","x","-inf",0.177001953125],["(sqrt.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6))","x","inf",0.205078125],["(sqrt.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6))","x","0",0.2099609375],["(pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6)","x","-inf",1.014892578125],["(pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6)","x","inf",0.9931640625],["(pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6)","x","0",1.3310546875]],"time":4.06689453125,"type":"series"},{"count":[[2,143]],"inputs":[["(pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6)","(sqrt.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (expm1.f64 x)) (pow.f64 (*.f64 (E.f64) (E.f64)) x)) (*.f64 (/.f64 1 (expm1.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 0) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1/2) (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (/.f64 -1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 0 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (*.f64 1/2 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 x) -1/3)) (pow.f64 (cbrt.f64 (expm1.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 x) -1/3)) (pow.f64 (pow.f64 (expm1.f64 x) -1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (*.f64 (pow.f64 (expm1.f64 x) -1/3) (neg.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (/.f64 1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (expm1.f64 x))) (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (+.f64 x x)) (/.f64 1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (expm1.f64 x)) (expm1.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (expm1.f64 (+.f64 x x))) (/.f64 (pow.f64 (expm1.f64 (+.f64 x x)) 2/3) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (/.f64 -1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (expm1.f64 x) -1/3) (/.f64 (expm1.f64 (+.f64 x x)) (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)) (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 (+.f64 x x)) (pow.f64 (expm1.f64 x) 2/3)) (pow.f64 (expm1.f64 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (expm1.f64 (+.f64 x x)) 2/3) (expm1.f64 x)) (cbrt.f64 (expm1.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (expm1.f64 x)) (neg.f64 (expm1.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2/3)) 2) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 1) (*.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (*.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x))) (pow.f64 (cbrt.f64 (expm1.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (+.f64 1/3 1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 0) (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2/3) (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (expm1.f64 x)) (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1)) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2/3) (cbrt.f64 (expm1.f64 (+.f64 x x)))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2/3) (cbrt.f64 (neg.f64 (expm1.f64 (+.f64 x x))))) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (expm1.f64 x) -1/3) (expm1.f64 (+.f64 x x))) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (pow.f64 (expm1.f64 (+.f64 x x)) 2/3)) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1) (/.f64 1 (expm1.f64 x))) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 (+.f64 x x)) (pow.f64 (expm1.f64 x) 2/3)) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (expm1.f64 (+.f64 x x))) (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2/3)) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2/3)) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x))) 1) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 (+.f64 x x)) -1) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x))) (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x))) 1) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (cbrt.f64 (expm1.f64 x))) (neg.f64 (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (neg.f64 (expm1.f64 x))) (neg.f64 (expm1.f64 x))) (*.f64 (expm1.f64 x) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (pow.f64 (expm1.f64 x) 2/3)) (*.f64 (expm1.f64 x) (pow.f64 (expm1.f64 x) -1/3))) (*.f64 (expm1.f64 x) (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x)) (expm1.f64 x)) (pow.f64 (expm1.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1) -1) (*.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1)) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1) (pow.f64 (expm1.f64 x) -1/3)) (*.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1)) (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1) 1) (*.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1) (*.f64 (expm1.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (expm1.f64 x) -1/3) (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1)) (*.f64 (pow.f64 (expm1.f64 x) 2/3) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (+.f64 (pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 3) -1)) (*.f64 (neg.f64 (expm1.f64 x)) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (+.f64 x x)) (fma.f64 (exp.f64 x) (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (cbrt.f64 (expm1.f64 x)))) (neg.f64 (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (*.f64 2/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 1/6 6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (expm1.f64 (+.f64 x x))) (/.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (expm1.f64 x)) (neg.f64 (expm1.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 1 (expm1.f64 x)) (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 0) (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (*.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1/2) (*.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (*.f64 0 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (*.f64 1/2 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2/3)) 2) (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (fabs.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (fabs.f64 (pow.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 0) (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (cbrt.f64 (expm1.f64 (+.f64 x x)))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (cbrt.f64 (neg.f64 (expm1.f64 (+.f64 x x))))) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (expm1.f64 (+.f64 x x))) (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (expm1.f64 (+.f64 x x)))) (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (+.f64 1/6 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (+.f64 1/3 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 1/6 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))))))))"]],"rules":[["egg-rr",52],["egg-rr",91]],"time":33.467041015625,"type":"rewrite"},{"count":[[167,164]],"inputs":[["(pow.f64 (sqrt.f64 2) 2)","(+.f64 (*.f64 2 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) x))) (pow.f64 (sqrt.f64 2) 2))","(+.f64 (*.f64 2 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) x))) (+.f64 (*.f64 (+.f64 (pow.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) 2) (*.f64 2 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 7/144 (pow.f64 2 1/3)) (*.f64 1/144 (pow.f64 2 1/3)))) (+.f64 (*.f64 7/288 (sqrt.f64 2)) (*.f64 1/72 (sqrt.f64 2))))))) (pow.f64 x 2)) (pow.f64 (sqrt.f64 2) 2)))","(+.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 1/12 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 7/144 (pow.f64 2 1/3)) (*.f64 1/144 (pow.f64 2 1/3))))) (+.f64 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 19/5184 (pow.f64 2 1/3)) (*.f64 7/1728 (pow.f64 2 1/3)))) (+.f64 (*.f64 7/1728 (sqrt.f64 2)) (*.f64 19/10368 (sqrt.f64 2))))))) (+.f64 (*.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) (+.f64 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 7/144 (pow.f64 2 1/3)) (*.f64 1/144 (pow.f64 2 1/3)))) (+.f64 (*.f64 7/288 (sqrt.f64 2)) (*.f64 1/72 (sqrt.f64 2))))) (*.f64 (+.f64 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 7/144 (pow.f64 2 1/3)) (*.f64 1/144 (pow.f64 2 1/3)))) (+.f64 (*.f64 7/288 (sqrt.f64 2)) (*.f64 1/72 (sqrt.f64 2)))) (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2)))))) (pow.f64 x 3)) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) x))) (+.f64 (*.f64 (+.f64 (pow.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) 2) (*.f64 2 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 7/144 (pow.f64 2 1/3)) (*.f64 1/144 (pow.f64 2 1/3)))) (+.f64 (*.f64 7/288 (sqrt.f64 2)) (*.f64 1/72 (sqrt.f64 2))))))) (pow.f64 x 2)) (pow.f64 (sqrt.f64 2) 2))))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (sqrt.f64 2) 2)","2","(+.f64 (*.f64 2 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) x))) (pow.f64 (sqrt.f64 2) 2))","(fma.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) 1/4) (sqrt.f64 2)) x) 2)","(+.f64 (*.f64 2 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) x))) (+.f64 (*.f64 (+.f64 (pow.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) 2) (*.f64 2 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 7/144 (pow.f64 2 1/3)) (*.f64 1/144 (pow.f64 2 1/3)))) (+.f64 (*.f64 7/288 (sqrt.f64 2)) (*.f64 1/72 (sqrt.f64 2))))))) (pow.f64 x 2)) (pow.f64 (sqrt.f64 2) 2)))","(fma.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) 1/4) (sqrt.f64 2)) x) (fma.f64 (fma.f64 (*.f64 2 (sqrt.f64 2)) (fma.f64 (pow.f64 2 1/6) (*.f64 (cbrt.f64 2) 1/18) (*.f64 (sqrt.f64 2) 11/288)) (*.f64 2 (*.f64 1/4 1/4))) (*.f64 x x) 2))","(+.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 1/12 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 7/144 (pow.f64 2 1/3)) (*.f64 1/144 (pow.f64 2 1/3))))) (+.f64 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 19/5184 (pow.f64 2 1/3)) (*.f64 7/1728 (pow.f64 2 1/3)))) (+.f64 (*.f64 7/1728 (sqrt.f64 2)) (*.f64 19/10368 (sqrt.f64 2))))))) (+.f64 (*.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) (+.f64 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 7/144 (pow.f64 2 1/3)) (*.f64 1/144 (pow.f64 2 1/3)))) (+.f64 (*.f64 7/288 (sqrt.f64 2)) (*.f64 1/72 (sqrt.f64 2))))) (*.f64 (+.f64 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 7/144 (pow.f64 2 1/3)) (*.f64 1/144 (pow.f64 2 1/3)))) (+.f64 (*.f64 7/288 (sqrt.f64 2)) (*.f64 1/72 (sqrt.f64 2)))) (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2)))))) (pow.f64 x 3)) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) x))) (+.f64 (*.f64 (+.f64 (pow.f64 (+.f64 (*.f64 1/6 (sqrt.f64 2)) (*.f64 1/12 (sqrt.f64 2))) 2) (*.f64 2 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (pow.f64 2 1/6) (+.f64 (*.f64 7/144 (pow.f64 2 1/3)) (*.f64 1/144 (pow.f64 2 1/3)))) (+.f64 (*.f64 7/288 (sqrt.f64 2)) (*.f64 1/72 (sqrt.f64 2))))))) (pow.f64 x 2)) (pow.f64 (sqrt.f64 2) 2))))","(fma.f64 (pow.f64 x 3) (fma.f64 2 (*.f64 (sqrt.f64 2) (fma.f64 (*.f64 1/12 (pow.f64 2 1/6)) (*.f64 (cbrt.f64 2) 1/18) (fma.f64 (pow.f64 2 1/6) (*.f64 (cbrt.f64 2) 5/648) (*.f64 (sqrt.f64 2) 61/10368)))) (*.f64 2 (*.f64 (*.f64 (sqrt.f64 2) 1/4) (fma.f64 (pow.f64 2 1/6) (*.f64 (cbrt.f64 2) 1/18) (*.f64 (sqrt.f64 2) 11/288))))) (fma.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) 1/4) (sqrt.f64 2)) x) (fma.f64 (fma.f64 (*.f64 2 (sqrt.f64 2)) (fma.f64 (pow.f64 2 1/6) (*.f64 (cbrt.f64 2) 1/18) (*.f64 (sqrt.f64 2) 11/288)) (*.f64 2 (*.f64 1/4 1/4))) (*.f64 x x) 2)))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1))","(/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x))","(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(fma.f64 1/2 (/.f64 x (sqrt.f64 2)) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(fma.f64 1/2 (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (/.f64 (-.f64 1/2 1/8) 4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (neg.f64 (*.f64 -2 x))) 1) (-.f64 (exp.f64 x) 1)))","(sqrt.f64 (/.f64 (expm1.f64 (*.f64 2 x)) (expm1.f64 x)))"]],"time":93.40087890625,"type":"simplify"},{"compiler":[[6230,2719]],"time":62.091064453125,"type":"eval"},{"alts":[["(sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))))) 6))","next",20.38770107333742],["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))","done",0.25390625]],"compiler":[[37,33],[11,8],[37,33]],"count":[[321,2]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[318,1],"picked":[1,0]}],"min-error":[0.23564849718699368],"time":147.531005859375,"type":"prune"},{"compiler":[[277,230]],"locations":[["(-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4))",1.0,true],["(sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))))) 6))",2.3513900286186162,true],["(+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))",10.507725804868652,true],["(cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2))))))",12.617329347634039,true]],"time":74.10107421875,"type":"localize"},{"count":[[4,36]],"series":[["(sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))))) 6))","x","-inf",0.279052734375],["(sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))))) 6))","x","inf",0.33203125],["(sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))))) 6))","x","0",0.331787109375],["(+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))","x","-inf",0.240234375],["(+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))","x","inf",0.431884765625],["(+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))","x","0",0.424072265625],["(cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2))))))","x","-inf",1.72705078125],["(cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2))))))","x","inf",2.444091796875],["(cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2))))))","x","0",2.0771484375]],"time":8.678955078125,"type":"series"},{"count":[[4,194]],"inputs":[["(cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2))))))","(+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))","(sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))))) 6))","(-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 1/2)) 7/96) (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)) (*.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 1/2)) 7/96))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 1/2)) 7/96) (*.f64 (-.f64 (*.f64 -3/8 (*.f64 x x)) x) (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)) (*.f64 (*.f64 -7/96 (pow.f64 x 3)) (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/2)) (+.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 2)) (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 -1/4) (+.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))) (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/2)) (+.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 1/2)) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 -1/4) (+.f64 (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x) (sqrt.f64 (sqrt.f64 2))) (pow.f64 2 -1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) (cbrt.f64 1/2)) (cbrt.f64 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x) (cbrt.f64 (sqrt.f64 1/2))) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)) 2/3) (-.f64 (*.f64 (pow.f64 (*.f64 (cbrt.f64 7/96) x) 2) (cbrt.f64 1/2)) (*.f64 (cbrt.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2))) (/.f64 x (cbrt.f64 (/.f64 (sqrt.f64 2) 7/96)))))) (+.f64 (cbrt.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2))) (/.f64 x (cbrt.f64 (/.f64 (sqrt.f64 2) 7/96)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 (*.f64 (cbrt.f64 7/96) x) 2) (cbrt.f64 1/2)) (-.f64 (pow.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)) 2/3) (*.f64 (/.f64 x (cbrt.f64 (/.f64 (sqrt.f64 2) 7/96))) (cbrt.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)))))) (+.f64 (/.f64 x (cbrt.f64 (/.f64 (sqrt.f64 2) 7/96))) (cbrt.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) (pow.f64 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) 2/3) (cbrt.f64 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x) (sqrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (sqrt.f64 1/2)) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 1/2)) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 1/2)) (neg.f64 (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) (neg.f64 (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) (cbrt.f64 1/2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x) (cbrt.f64 (sqrt.f64 1/2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 (sqrt.f64 2))) (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2)))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))) (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2)))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2))) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 (sqrt.f64 2)))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2)))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2))) (*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 -7/96 (pow.f64 x 3)))) (*.f64 (sqrt.f64 (sqrt.f64 2)) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))) (cbrt.f64 2)) (*.f64 (sqrt.f64 (sqrt.f64 2)) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 (sqrt.f64 2))))) (*.f64 (sqrt.f64 (sqrt.f64 2)) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 2)) (*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 7/96 (pow.f64 x 3)))) (sqrt.f64 (sqrt.f64 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))) (/.f64 (sqrt.f64 2) 7/96)) (*.f64 (sqrt.f64 (sqrt.f64 2)) (pow.f64 x 3))) (*.f64 (sqrt.f64 (sqrt.f64 2)) (/.f64 (sqrt.f64 2) 7/96)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (*.f64 -3/8 (*.f64 x x)) x) (cbrt.f64 2)) (*.f64 (neg.f64 (sqrt.f64 2)) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 (sqrt.f64 2))))) (*.f64 (neg.f64 (sqrt.f64 2)) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (*.f64 -3/8 (*.f64 x x)) x) (sqrt.f64 (sqrt.f64 2))) (*.f64 (neg.f64 (sqrt.f64 2)) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))))) (*.f64 (neg.f64 (sqrt.f64 2)) (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (*.f64 -3/8 (*.f64 x x)) x) (/.f64 (sqrt.f64 2) 7/96)) (*.f64 (neg.f64 (sqrt.f64 2)) (pow.f64 x 3))) (*.f64 (neg.f64 (sqrt.f64 2)) (/.f64 (sqrt.f64 2) 7/96)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2))) (neg.f64 (sqrt.f64 2))) (*.f64 (cbrt.f64 2) (*.f64 -7/96 (pow.f64 x 3)))) (*.f64 (cbrt.f64 2) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2))) (cbrt.f64 2)) (*.f64 (cbrt.f64 2) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 (sqrt.f64 2))))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2))) (sqrt.f64 (sqrt.f64 2))) (*.f64 (cbrt.f64 2) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))))) (*.f64 (cbrt.f64 2) (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2))) (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (*.f64 7/96 (pow.f64 x 3)))) (*.f64 (cbrt.f64 2) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2))) (/.f64 (sqrt.f64 2) 7/96)) (*.f64 (cbrt.f64 2) (pow.f64 x 3))) (*.f64 (cbrt.f64 2) (/.f64 (sqrt.f64 2) 7/96)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 2)) (*.f64 (sqrt.f64 2) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 (sqrt.f64 2))))) (*.f64 (sqrt.f64 2) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))) (*.f64 (sqrt.f64 2) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))))) (sqrt.f64 (sqrt.f64 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (/.f64 (sqrt.f64 2) 7/96)) (*.f64 (sqrt.f64 2) (pow.f64 x 3))) (*.f64 (sqrt.f64 2) (/.f64 (sqrt.f64 2) 7/96)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -7/96 (pow.f64 x 3)) (cbrt.f64 2)) (*.f64 (neg.f64 (sqrt.f64 2)) (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2))))) (*.f64 (neg.f64 (sqrt.f64 2)) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))) (*.f64 (neg.f64 (sqrt.f64 2)) (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))))) (*.f64 (neg.f64 (sqrt.f64 2)) (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 3) (cbrt.f64 2)) (*.f64 (/.f64 (sqrt.f64 2) 7/96) (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2))))) (*.f64 (/.f64 (sqrt.f64 2) 7/96) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 (sqrt.f64 2))) (*.f64 (/.f64 (sqrt.f64 2) 7/96) (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))))) (*.f64 (/.f64 (sqrt.f64 2) 7/96) (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 2)) (*.f64 (/.f64 (sqrt.f64 2) 7/96) (fma.f64 3/8 (*.f64 x x) x))) (*.f64 (/.f64 (sqrt.f64 2) 7/96) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 3) (neg.f64 (sqrt.f64 2))) (*.f64 (/.f64 (sqrt.f64 2) 7/96) (-.f64 (*.f64 -3/8 (*.f64 x x)) x))) (*.f64 (/.f64 (sqrt.f64 2) 7/96) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))) (cbrt.f64 2)) (*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2))))) (*.f64 (sqrt.f64 (sqrt.f64 2)) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 2)) (*.f64 (sqrt.f64 (sqrt.f64 2)) (fma.f64 3/8 (*.f64 x x) x))) (sqrt.f64 (sqrt.f64 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2))) (*.f64 (sqrt.f64 (sqrt.f64 2)) (-.f64 (*.f64 -3/8 (*.f64 x x)) x))) (*.f64 (sqrt.f64 (sqrt.f64 2)) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 2)) (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2))))) (*.f64 (sqrt.f64 2) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))) (*.f64 (sqrt.f64 2) (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))))) (sqrt.f64 (sqrt.f64 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2)) (*.f64 (cbrt.f64 2) (*.f64 (fma.f64 3/8 (*.f64 x x) x) (cbrt.f64 (sqrt.f64 1/2))))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2))) (*.f64 (cbrt.f64 2) (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))))) (*.f64 (cbrt.f64 2) (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 (sqrt.f64 2))) (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (fma.f64 3/8 (*.f64 x x) x))) (*.f64 (cbrt.f64 2) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (cbrt.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2))) (*.f64 (cbrt.f64 2) (-.f64 (*.f64 -3/8 (*.f64 x x)) x))) (*.f64 (cbrt.f64 2) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x) (sqrt.f64 (sqrt.f64 2)))) (neg.f64 (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) (cbrt.f64 1/2))) (neg.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x) (cbrt.f64 (sqrt.f64 1/2)))) (neg.f64 (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2))) (*.f64 (sqrt.f64 (sqrt.f64 2)) (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2))) (*.f64 (sqrt.f64 (sqrt.f64 2)) (/.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 (sqrt.f64 2))))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (sqrt.f64 1/2)) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 1/2) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2))) (pow.f64 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)) 2/3) (*.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 1/2)) 7/96))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2) (*.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 1/2)) 7/96))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (cbrt.f64 (/.f64 (sqrt.f64 2) 7/96))) (*.f64 (pow.f64 (*.f64 (cbrt.f64 7/96) x) 2) (cbrt.f64 1/2)) (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 1/2) (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)) (*.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 1/2)) 7/96))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 1/2)) 7/96) (*.f64 (fma.f64 3/8 (*.f64 x x) x) (sqrt.f64 1/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2))) (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2/3) (cbrt.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)))) (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2))) (sqrt.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)))) (fabs.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2/3)) (fabs.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)) 0) (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)) (pow.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2/3) 6) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 (*.f64 x x) (+.f64 (*.f64 x 7/96) 3/8)) x))) 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x . 7/96)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/6 -3/32)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -3/32 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 7/96)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 128/1443 (neg.f64 243/15392))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/6 3/32)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 128/1443 243/15392)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 -7/96)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1/6 0) 3/32)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1/6 1/8) -1/32)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -3/32 -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 27/32768 -481/9216) (/.f64 1/216 -481/9216))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 128/1443 1) (/.f64 243/15392 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/36 25/96) (/.f64 9/1024 25/96))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 7/96) (sqrt.f64 7/96))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3367/884736 9216/481)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 7/96) (cbrt.f64 49/9216))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 7/96)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 7/96 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 49/9216) (cbrt.f64 7/96))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 3/32) (sqrt.f64 1/6)) (-.f64 (sqrt.f64 1/6) (sqrt.f64 3/32)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 -7/96)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 175/9216 175/9216) 7/96)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 175/9216 4825/884736) 193/9216)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1/6 -3/32))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (sqrt.f64 3/32) (sqrt.f64 1/6))) (-.f64 (sqrt.f64 3/32) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 -7/96)) (pow.f64 (cbrt.f64 -7/96) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -7/96) (neg.f64 (pow.f64 (cbrt.f64 -7/96) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 1/6)) (neg.f64 (sqrt.f64 3/32))) (-.f64 (neg.f64 (sqrt.f64 1/6)) (neg.f64 (sqrt.f64 3/32))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 1/6) (sqrt.f64 3/32)) (-.f64 (sqrt.f64 1/6) (neg.f64 (sqrt.f64 3/32))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 1/6)) (sqrt.f64 3/32)) (-.f64 (neg.f64 (sqrt.f64 1/6)) (sqrt.f64 3/32)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -3367/884736 (/.f64 1 -481/9216))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 175/9216 (/.f64 1 25/96))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 1/36) (+.f64 (cbrt.f64 9/1024) 1/4)) (-.f64 (cbrt.f64 1/6) (cbrt.f64 3/32)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 7/96 0) 7/96)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 7/96 (pow.f64 7/96 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 175/9216 25/96)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -3367/884736 -481/9216)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 7/96 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 3367/884736 481/9216)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 1 -7/96))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 481/9216 3367/884736))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 1 7/96))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 481/9216 (/.f64 481/9216 7/96))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 68332056247/692533995824480256 (*.f64 481/9216 20294641/782757789696))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 25/96 175/9216))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 -481/9216 -3367/884736))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 3367/884736 (+.f64 9/1024 (-.f64 1/36 (*.f64 -3/32 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 128/1443 3) (pow.f64 243/15392 3)) (+.f64 (*.f64 128/1443 128/1443) (+.f64 (*.f64 243/15392 243/15392) (*.f64 128/1443 243/15392))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 343/884736 (+.f64 0 (+.f64 49/9216 (*.f64 0 -7/96))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 1/216 481/9216) (*.f64 481/9216 27/32768)) (*.f64 481/9216 481/9216))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -7/96 -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 175/9216) (neg.f64 25/96))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 7/96 -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 7/96 0) (pow.f64 7/96 -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 7/96 (pow.f64 7/96 0))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 7/96) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 343/884736 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 7/96 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 7/96) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 -7/96)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 -7/96 0))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 49/9216)))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 343/884736)))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 7/96))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 7/96) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 343/884736) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/6) (cbrt.f64 1/36) -3/32)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1/6 -3/32)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/6) (sqrt.f64 1/6) -3/32)))))"]],"rules":[["egg-rr",70],["egg-rr",27],["egg-rr",84],["egg-rr",13]],"time":68.830078125,"type":"rewrite"},{"count":[[230,241]],"inputs":[["(pow.f64 (sqrt.f64 2) 1/3)","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/9) x)) (pow.f64 (sqrt.f64 2) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 2)) 1/3) (*.f64 (-.f64 (*.f64 3/16 (/.f64 1 (sqrt.f64 2))) (*.f64 1/12 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 19)) 1/9))) (pow.f64 x 2)))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/9) x)) (pow.f64 (sqrt.f64 2) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 2)) 1/3) (*.f64 (-.f64 (*.f64 3/16 (/.f64 1 (sqrt.f64 2))) (*.f64 1/12 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 19)) 1/9))) (pow.f64 x 2)))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/9) x)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 2)) 1/3) (*.f64 (-.f64 (*.f64 7/192 (/.f64 1 (sqrt.f64 2))) (+.f64 (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/3)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 14)) 1/9) (-.f64 (*.f64 3/16 (/.f64 1 (sqrt.f64 2))) (*.f64 1/12 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 19)) 1/9))))))) (pow.f64 x 3)))) (pow.f64 (sqrt.f64 2) 1/3))))","(*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 7/192) x))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 7/192) 2)) 1/3))) (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 7/192) x)))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 7/192) 2)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (-.f64 (*.f64 1/2 (/.f64 1 (sqrt.f64 2))) (*.f64 3/256 (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 7/192)) 1/3) (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9)))) (*.f64 (pow.f64 (cbrt.f64 7/192) 2) x)))) (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 7/192) x))))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 7/192) 2)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (-.f64 (sqrt.f64 2) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 7/192) 5)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 4)) 1/9) (-.f64 (*.f64 1/2 (/.f64 1 (sqrt.f64 2))) (*.f64 3/256 (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 7/192)) 1/3) (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9))))))) (*.f64 1/4096 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 7/192) 2)))))) (*.f64 (pow.f64 (cbrt.f64 7/192) 2) (pow.f64 x 2))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (-.f64 (*.f64 1/2 (/.f64 1 (sqrt.f64 2))) (*.f64 3/256 (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 7/192)) 1/3) (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9)))) (*.f64 (pow.f64 (cbrt.f64 7/192) 2) x)))) (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 7/192) x)))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 -7/192) x)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 -7/192) x))) (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -7/192) 2)) 1/3))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 -7/192) x))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -7/192) 2)) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (+.f64 (*.f64 3/256 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -7/192)) 1/3))) (*.f64 1/2 (/.f64 1 (sqrt.f64 2)))) (*.f64 (pow.f64 (cbrt.f64 -7/192) 2) x))))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 -7/192) x))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -7/192) 2)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (-.f64 (sqrt.f64 2) (+.f64 (*.f64 1/4096 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -7/192) 2)))) (*.f64 -1/8 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -7/192) 5)) 1/3) (+.f64 (*.f64 1/2 (/.f64 1 (sqrt.f64 2))) (*.f64 3/256 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -7/192)) 1/3))))))))) (*.f64 (pow.f64 (cbrt.f64 -7/192) 2) (pow.f64 x 2))))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (+.f64 (*.f64 3/256 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -7/192)) 1/3))) (*.f64 1/2 (/.f64 1 (sqrt.f64 2)))) (*.f64 (pow.f64 (cbrt.f64 -7/192) 2) x)))))))","(/.f64 x (sqrt.f64 2))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2)))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 x (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))))","(*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))","(+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))","(+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 x (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 x (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))))","(*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))","(+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))","(+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 x (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 x (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (sqrt.f64 2) 1/3)","(cbrt.f64 (sqrt.f64 2))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/9) x)) (pow.f64 (sqrt.f64 2) 1/3))","(fma.f64 1/6 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -11 1/9)) x) (cbrt.f64 (sqrt.f64 2)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 2)) 1/3) (*.f64 (-.f64 (*.f64 3/16 (/.f64 1 (sqrt.f64 2))) (*.f64 1/12 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 19)) 1/9))) (pow.f64 x 2)))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/9) x)) (pow.f64 (sqrt.f64 2) 1/3)))","(fma.f64 1/3 (*.f64 (cbrt.f64 1/2) (*.f64 (fma.f64 3/16 (sqrt.f64 1/2) (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -19 1/9)) -1/12)) (*.f64 x x))) (fma.f64 1/6 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -11 1/9)) x) (cbrt.f64 (sqrt.f64 2))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 2)) 1/3) (*.f64 (-.f64 (*.f64 3/16 (/.f64 1 (sqrt.f64 2))) (*.f64 1/12 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 19)) 1/9))) (pow.f64 x 2)))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/9) x)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 2)) 1/3) (*.f64 (-.f64 (*.f64 7/192 (/.f64 1 (sqrt.f64 2))) (+.f64 (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/3)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 14)) 1/9) (-.f64 (*.f64 3/16 (/.f64 1 (sqrt.f64 2))) (*.f64 1/12 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 19)) 1/9))))))) (pow.f64 x 3)))) (pow.f64 (sqrt.f64 2) 1/3))))","(fma.f64 (*.f64 1/3 (cbrt.f64 1/2)) (*.f64 (fma.f64 3/16 (sqrt.f64 1/2) (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -19 1/9)) -1/12)) (*.f64 x x)) (fma.f64 1/6 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -11 1/9)) x) (fma.f64 1/3 (*.f64 (cbrt.f64 1/2) (*.f64 (-.f64 (*.f64 7/192 (sqrt.f64 1/2)) (fma.f64 (*.f64 1/3 (pow.f64 (/.f64 -1 -128) 1/9)) (fma.f64 3/16 (sqrt.f64 1/2) (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -19 1/9)) -1/12)) (*.f64 1/216 (cbrt.f64 (pow.f64 (sqrt.f64 2) -11))))) (pow.f64 x 3))) (cbrt.f64 (sqrt.f64 2)))))","(*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 7/192) x))","(*.f64 (cbrt.f64 (*.f64 7/192 (sqrt.f64 1/2))) x)","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 7/192) 2)) 1/3))) (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 7/192) x)))","(fma.f64 1/16 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -7 1/9)) (cbrt.f64 (pow.f64 (cbrt.f64 7/192) -2))) (*.f64 (cbrt.f64 (*.f64 7/192 (sqrt.f64 1/2))) x))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 7/192) 2)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (-.f64 (*.f64 1/2 (/.f64 1 (sqrt.f64 2))) (*.f64 3/256 (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 7/192)) 1/3) (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9)))) (*.f64 (pow.f64 (cbrt.f64 7/192) 2) x)))) (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 7/192) x))))","(fma.f64 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -7 1/9)) (cbrt.f64 (pow.f64 (cbrt.f64 7/192) -2))) 1/16 (fma.f64 1/3 (*.f64 (cbrt.f64 2) (*.f64 (+.f64 (sqrt.f64 1/8) (*.f64 -3/256 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 1 7/192))) (pow.f64 (sqrt.f64 2) (*.f64 -17 1/9))))) (/.f64 (pow.f64 (cbrt.f64 7/192) -2) x))) (*.f64 (cbrt.f64 (*.f64 7/192 (sqrt.f64 1/2))) x)))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 7/192) 2)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (-.f64 (sqrt.f64 2) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 7/192) 5)) 1/3) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 4)) 1/9) (-.f64 (*.f64 1/2 (/.f64 1 (sqrt.f64 2))) (*.f64 3/256 (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 7/192)) 1/3) (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9))))))) (*.f64 1/4096 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 7/192) 2)))))) (*.f64 (pow.f64 (cbrt.f64 7/192) 2) (pow.f64 x 2))))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (-.f64 (*.f64 1/2 (/.f64 1 (sqrt.f64 2))) (*.f64 3/256 (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 7/192)) 1/3) (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9)))) (*.f64 (pow.f64 (cbrt.f64 7/192) 2) x)))) (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 7/192) x)))))","(+.f64 (*.f64 (*.f64 1/3 (cbrt.f64 2)) (+.f64 (*.f64 (-.f64 (sqrt.f64 2) (fma.f64 1/8 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 7/192) -5)) (*.f64 (pow.f64 1/4 1/9) (+.f64 (sqrt.f64 1/8) (*.f64 -3/256 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 1 7/192))) (pow.f64 (sqrt.f64 2) (*.f64 -17 1/9))))))) (*.f64 (*.f64 1/4096 (cbrt.f64 (pow.f64 (sqrt.f64 2) -7))) (pow.f64 (cbrt.f64 7/192) -2)))) (pow.f64 (*.f64 (cbrt.f64 7/192) x) -2)) (*.f64 (+.f64 (sqrt.f64 1/8) (*.f64 -3/256 (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 1 7/192))) (pow.f64 (sqrt.f64 2) (*.f64 -17 1/9))))) (/.f64 (pow.f64 (cbrt.f64 7/192) -2) x)))) (fma.f64 1/16 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -7 1/9)) (cbrt.f64 (pow.f64 (cbrt.f64 7/192) -2))) (*.f64 (cbrt.f64 (*.f64 7/192 (sqrt.f64 1/2))) x)))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 -7/192) x)))","(neg.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/2)) (*.f64 (cbrt.f64 -7/192) x)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 -7/192) x))) (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -7/192) 2)) 1/3))))","(fma.f64 1/16 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -7 1/9)) (cbrt.f64 (pow.f64 (cbrt.f64 -7/192) -2))) (neg.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/2)) (*.f64 (cbrt.f64 -7/192) x))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 -7/192) x))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -7/192) 2)) 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (+.f64 (*.f64 3/256 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -7/192)) 1/3))) (*.f64 1/2 (/.f64 1 (sqrt.f64 2)))) (*.f64 (pow.f64 (cbrt.f64 -7/192) 2) x))))))","(fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 1/2))) (*.f64 (cbrt.f64 -7/192) x) (fma.f64 1/16 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -7 1/9)) (cbrt.f64 (pow.f64 (cbrt.f64 -7/192) -2))) (*.f64 1/3 (*.f64 (cbrt.f64 2) (*.f64 (fma.f64 3/256 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -17 1/9)) (cbrt.f64 (cbrt.f64 (/.f64 1 -7/192)))) (sqrt.f64 1/8)) (/.f64 (pow.f64 (cbrt.f64 -7/192) -2) x))))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (sqrt.f64 2)) 1/3) (*.f64 (cbrt.f64 -7/192) x))) (+.f64 (*.f64 1/16 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -7/192) 2)) 1/3))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (-.f64 (sqrt.f64 2) (+.f64 (*.f64 1/4096 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 7)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -7/192) 2)))) (*.f64 -1/8 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -7/192) 5)) 1/3) (+.f64 (*.f64 1/2 (/.f64 1 (sqrt.f64 2))) (*.f64 3/256 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -7/192)) 1/3))))))))) (*.f64 (pow.f64 (cbrt.f64 -7/192) 2) (pow.f64 x 2))))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) 1) 1/3) (/.f64 (+.f64 (*.f64 3/256 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sqrt.f64 2) 17)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -7/192)) 1/3))) (*.f64 1/2 (/.f64 1 (sqrt.f64 2)))) (*.f64 (pow.f64 (cbrt.f64 -7/192) 2) x)))))))","(fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 1/2))) (*.f64 (cbrt.f64 -7/192) x) (fma.f64 1/16 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -7 1/9)) (cbrt.f64 (pow.f64 (cbrt.f64 -7/192) -2))) (*.f64 (*.f64 1/3 (cbrt.f64 2)) (+.f64 (*.f64 (fma.f64 3/256 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -17 1/9)) (cbrt.f64 (cbrt.f64 (/.f64 1 -7/192)))) (sqrt.f64 1/8)) (/.f64 (pow.f64 (cbrt.f64 -7/192) -2) x)) (*.f64 (-.f64 (sqrt.f64 2) (fma.f64 1/4096 (*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 2) -7)) (pow.f64 (cbrt.f64 -7/192) -2)) (*.f64 -1/8 (*.f64 (pow.f64 1/4 1/9) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -7/192) -5)) (fma.f64 3/256 (*.f64 (pow.f64 (sqrt.f64 2) (*.f64 -17 1/9)) (cbrt.f64 (cbrt.f64 (/.f64 1 -7/192)))) (sqrt.f64 1/8))))))) (pow.f64 (*.f64 (cbrt.f64 -7/192) x) -2))))))","(/.f64 x (sqrt.f64 2))","(*.f64 x (sqrt.f64 1/2))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2)))","(/.f64 (+.f64 (*.f64 3/8 (*.f64 x x)) x) (sqrt.f64 2))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(fma.f64 3/8 (*.f64 (*.f64 x x) (sqrt.f64 1/2)) (/.f64 (+.f64 (*.f64 7/96 (pow.f64 x 3)) x) (sqrt.f64 2)))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(fma.f64 3/8 (*.f64 (*.f64 x x) (sqrt.f64 1/2)) (/.f64 (+.f64 (*.f64 7/96 (pow.f64 x 3)) x) (sqrt.f64 2)))","(*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))","(*.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 1/2))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))","(/.f64 (+.f64 (*.f64 7/96 (pow.f64 x 3)) (*.f64 3/8 (*.f64 x x))) (sqrt.f64 2))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(fma.f64 3/8 (*.f64 (*.f64 x x) (sqrt.f64 1/2)) (/.f64 (+.f64 (*.f64 7/96 (pow.f64 x 3)) x) (sqrt.f64 2)))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(fma.f64 3/8 (*.f64 (*.f64 x x) (sqrt.f64 1/2)) (/.f64 (+.f64 (*.f64 7/96 (pow.f64 x 3)) x) (sqrt.f64 2)))","(*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))","(*.f64 (*.f64 7/96 (pow.f64 x 3)) (sqrt.f64 1/2))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))","(/.f64 (+.f64 (*.f64 7/96 (pow.f64 x 3)) (*.f64 3/8 (*.f64 x x))) (sqrt.f64 2))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(fma.f64 3/8 (*.f64 (*.f64 x x) (sqrt.f64 1/2)) (/.f64 (+.f64 (*.f64 7/96 (pow.f64 x 3)) x) (sqrt.f64 2)))","(+.f64 (*.f64 3/8 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 7/96 (/.f64 (pow.f64 x 3) (sqrt.f64 2))) (/.f64 x (sqrt.f64 2))))","(fma.f64 3/8 (*.f64 (*.f64 x x) (sqrt.f64 1/2)) (/.f64 (+.f64 (*.f64 7/96 (pow.f64 x 3)) x) (sqrt.f64 2)))","(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))","(fma.f64 1/2 (*.f64 x (sqrt.f64 1/2)) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2)))))","(+.f64 (sqrt.f64 2) (/.f64 (+.f64 (*.f64 1/2 x) (*.f64 3/16 (*.f64 x x))) (sqrt.f64 2)))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 x (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (fma.f64 3/16 (*.f64 (*.f64 x x) (sqrt.f64 1/2)) (/.f64 (+.f64 (*.f64 7/192 (pow.f64 x 3)) (*.f64 1/2 x)) (sqrt.f64 2))))","(*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))","(*.f64 (*.f64 7/192 (pow.f64 x 3)) (sqrt.f64 1/2))","(+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))","(/.f64 (+.f64 (*.f64 7/192 (pow.f64 x 3)) (*.f64 3/16 (*.f64 x x))) (sqrt.f64 2))","(+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 x (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))))","(fma.f64 3/16 (*.f64 (*.f64 x x) (sqrt.f64 1/2)) (/.f64 (+.f64 (*.f64 7/192 (pow.f64 x 3)) (*.f64 1/2 x)) (sqrt.f64 2)))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 x (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (fma.f64 3/16 (*.f64 (*.f64 x x) (sqrt.f64 1/2)) (/.f64 (+.f64 (*.f64 7/192 (pow.f64 x 3)) (*.f64 1/2 x)) (sqrt.f64 2))))","(*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))","(*.f64 (*.f64 7/192 (pow.f64 x 3)) (sqrt.f64 1/2))","(+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))","(/.f64 (+.f64 (*.f64 7/192 (pow.f64 x 3)) (*.f64 3/16 (*.f64 x x))) (sqrt.f64 2))","(+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 x (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2)))))","(fma.f64 3/16 (*.f64 (*.f64 x x) (sqrt.f64 1/2)) (/.f64 (+.f64 (*.f64 7/192 (pow.f64 x 3)) (*.f64 1/2 x)) (sqrt.f64 2)))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 3/16 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 x (sqrt.f64 2))) (*.f64 7/192 (/.f64 (pow.f64 x 3) (sqrt.f64 2))))))","(+.f64 (sqrt.f64 2) (fma.f64 3/16 (*.f64 (*.f64 x x) (sqrt.f64 1/2)) (/.f64 (+.f64 (*.f64 7/192 (pow.f64 x 3)) (*.f64 1/2 x)) (sqrt.f64 2))))"]],"time":165.48291015625,"type":"simplify"},{"compiler":[[8062,6908]],"time":118.449951171875,"type":"eval"},{"alts":[["(sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))))) 6))","done",20.38770107333742],["(sqrt.f64 (pow.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 2)) 1/3) (*.f64 (-.f64 (*.f64 3/16 (/.f64 1 (sqrt.f64 2))) (*.f64 1/12 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 19)) 1/9))) (pow.f64 x 2)))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/9) x)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 2)) 1/3) (*.f64 (-.f64 (*.f64 7/192 (/.f64 1 (sqrt.f64 2))) (+.f64 (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/3)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 14)) 1/9) (-.f64 (*.f64 3/16 (/.f64 1 (sqrt.f64 2))) (*.f64 1/12 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 19)) 1/9))))))) (pow.f64 x 3)))) (pow.f64 (sqrt.f64 2) 1/3)))) 6))","fresh",21.053801779104706],["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))","done",0.25390625]],"compiler":[[37,33],[116,113],[11,8]],"count":[[243,3]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[241,1],"picked":[1,1]}],"min-error":[0.23507251568200668],"time":83.30517578125,"type":"prune"},{"accuracy":[0.25390625],"baseline":[0.25390625],"branch":[["x",0.25390625,1],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))",0.25390625,1],["(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))",0.25390625,1]],"compiler":[[2,1],[13,11],[12,10],[248,218]],"count":[[7,1]],"inputs":[["(sqrt.f64 (pow.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 2)) 1/3) (*.f64 (-.f64 (*.f64 3/16 (/.f64 1 (sqrt.f64 2))) (*.f64 1/12 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 19)) 1/9))) (pow.f64 x 2)))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/9) x)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 2)) 1/3) (*.f64 (-.f64 (*.f64 7/192 (/.f64 1 (sqrt.f64 2))) (+.f64 (*.f64 1/216 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 11)) 1/3)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 14)) 1/9) (-.f64 (*.f64 3/16 (/.f64 1 (sqrt.f64 2))) (*.f64 1/12 (pow.f64 (/.f64 1 (pow.f64 (sqrt.f64 2) 19)) 1/9))))))) (pow.f64 x 3)))) (pow.f64 (sqrt.f64 2) 1/3)))) 6))","(sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 2) (*.f64 1/2 (+.f64 (/.f64 (*.f64 (-.f64 1/6 (*.f64 (-.f64 1/2 1/8) 1/4)) (pow.f64 x 3)) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 (-.f64 1/2 1/8) (*.f64 x x)) x) (sqrt.f64 2)))))) 6))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/6 (*.f64 1/2 (/.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 (sqrt.f64 2) 2)))) (pow.f64 x 3)) (sqrt.f64 2))) (+.f64 (*.f64 1/2 (/.f64 (*.f64 (-.f64 1/2 (pow.f64 (/.f64 1/2 (sqrt.f64 2)) 2)) (pow.f64 x 2)) (sqrt.f64 2))) (*.f64 1/2 (/.f64 x (sqrt.f64 2))))))","(sqrt.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))) 6))","(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))","(sqrt.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)))","(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))"]],"link":["."],"name":["sqrtexp (problem 3.4.4)"],"oracle":[62.78615007573305],"outputs":[["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))"]],"time":12.755859375,"times":[["x",3.617919921875],["(sqrt.f64 (/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1)))",2.050048828125],["(/.f64 (-.f64 (exp.f64 (*.f64 2 x)) 1) (-.f64 (exp.f64 x) 1))",2.171142578125]],"type":"regimes"},{"compiler":[[11,8]],"inputs":[["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))"]],"method":["egg-herbie"],"outputs":[["(cbrt.f64 (pow.f64 (/.f64 (expm1.f64 (+.f64 x x)) (expm1.f64 x)) 3/2))"]],"stop":[["fuel",1]],"time":19.5771484375,"type":"simplify"},{"time":0.018798828125,"type":"soundness"},{"compiler":[[11,8]],"remove-preprocessing":[[]],"time":9.708984375,"type":"end"}]
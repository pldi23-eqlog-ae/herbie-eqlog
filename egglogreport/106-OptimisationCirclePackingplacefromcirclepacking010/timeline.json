[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.4797652819565883,0.41930705536856294,0.10092766267484876],[11,0.40565519775191206,0.499267935694661,0.09507686655342695],[10,0.34324670579007943,0.5694774891517227,0.08727580505819788],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":77.569091796875,"type":"analyze"},{"outcomes":[["body",256,"invalid",44.14599609375,1165],["body",512,"valid",0.091064453125,1],["body",1024,"valid",0.5810546875,2],["body",256,"valid",310.2958984375,8253]],"time":364.0908203125,"type":"sample"},{"compiler":[[10,7]],"inputs":[["0","1","2"],["(*.f64 (+.f64 x y) (-.f64 1 z))","(*.f64 (+.f64 y x) (-.f64 1 z))","(*.f64 (+.f64 z y) (-.f64 1 x))","(*.f64 (+.f64 x z) (-.f64 1 y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (+.f64 x y) (-.f64 1 z))","(*.f64 (+.f64 y x) (-.f64 1 z))","(*.f64 (+.f64 x y) (-.f64 1 z))","(*.f64 (+.f64 z y) (-.f64 1 x))","(*.f64 (+.f64 x z) (-.f64 1 y))"]],"symmetry":[[]],"time":68.774169921875,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 (+.f64 x y) (-.f64 1 z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 x y) (-.f64 1 z))"]],"time":17.5087890625,"type":"simplify"},{"compiler":[[10,7]],"time":0.259033203125,"type":"eval"},{"alts":[["(*.f64 (+.f64 x y) (-.f64 1 z))","next",0.015625]],"compiler":[[10,7],[10,7]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.7431640625,"type":"prune"},{"compiler":[[20,10]],"locations":[["(*.f64 (+.f64 x y) (-.f64 1 z))",0.015625,true]],"time":6.073974609375,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (+.f64 x y) (-.f64 1 z))","z","-inf",0.277099609375],["(*.f64 (+.f64 x y) (-.f64 1 z))","z","inf",0.31884765625],["(*.f64 (+.f64 x y) (-.f64 1 z))","z","0",0.39501953125],["(*.f64 (+.f64 x y) (-.f64 1 z))","y","-inf",0.281982421875],["(*.f64 (+.f64 x y) (-.f64 1 z))","y","inf",0.326904296875],["(*.f64 (+.f64 x y) (-.f64 1 z))","y","0",0.23388671875],["(*.f64 (+.f64 x y) (-.f64 1 z))","x","-inf",0.324951171875],["(*.f64 (+.f64 x y) (-.f64 1 z))","x","inf",0.39404296875],["(*.f64 (+.f64 x y) (-.f64 1 z))","x","0",0.344970703125]],"time":3.016845703125,"type":"series"},{"count":[[1,62]],"inputs":[["(*.f64 (+.f64 x y) (-.f64 1 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) x) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) y) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (+.f64 x (neg.f64 (*.f64 z (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (+.f64 y (neg.f64 (*.f64 z (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 0) (*.f64 (+.f64 x y) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) (*.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x y) (neg.f64 (*.f64 z (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x y) (*.f64 (neg.f64 (*.f64 z (+.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 z) x) 1) (*.f64 (*.f64 (-.f64 1 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 z) y) 1) (*.f64 (*.f64 (-.f64 1 z) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 x y) (-.f64 1 z))) (*.f64 (+.f64 x y) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) (*.f64 0 (*.f64 (+.f64 x y) (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z (+.f64 x y))) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 z -1) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) (-.f64 1 z))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 2)) (cbrt.f64 (*.f64 (+.f64 x y) (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 z)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) (cbrt.f64 (+.f64 x y))) (cbrt.f64 (pow.f64 (+.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 z -1) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 z -1) (+.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (+.f64 x y)) (cbrt.f64 (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (-.f64 1 z)) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (*.f64 (-.f64 1 z) (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) 1) (/.f64 (+.f64 x y) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (/.f64 (+.f64 x y) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (/.f64 (-.f64 1 (pow.f64 z 3)) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (cbrt.f64 (-.f64 1 z))) (cbrt.f64 (pow.f64 (-.f64 1 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x y) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (*.f64 (+.f64 x y) (cbrt.f64 (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (+.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z -1) (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (-.f64 1 (pow.f64 z 3))) (/.f64 1 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (-.f64 1 (pow.f64 z 3))) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (-.f64 1 (pow.f64 z 3))) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) (-.f64 1 (pow.f64 z 3))) 1) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (-.f64 1 (pow.f64 z 3))) 1) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (+.f64 -1 (pow.f64 z 3))) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 z 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (+.f64 x y))) (cbrt.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 z 3)) (+.f64 x y)) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) (-.f64 1 (pow.f64 z 3)))) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) (-.f64 1 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) (-.f64 1 z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) (-.f64 1 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 z -1) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 z -1) (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) (-.f64 1 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) x (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (neg.f64 (*.f64 z (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (cbrt.f64 (+.f64 x y)) (neg.f64 (*.f64 z (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (+.f64 x y)) (neg.f64 (*.f64 z (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x y) (neg.f64 (*.f64 z (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) 1 (neg.f64 (*.f64 z (+.f64 x y))))))))"]],"rules":[["egg-rr",62]],"time":20.85107421875,"type":"rewrite"},{"count":[[98,72]],"inputs":[["(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 y x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) (+.f64 y x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(neg.f64 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(neg.f64 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))"]],"time":126.677978515625,"type":"simplify"},{"compiler":[[930,496]],"time":11.658935546875,"type":"eval"},{"alts":[["(+.f64 (+.f64 x y) (neg.f64 (*.f64 z (+.f64 x y))))","fresh",0.015625],["(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))","next",0.0078125]],"compiler":[[13,7],[13,9],[13,7],[13,9]],"count":[[73,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[72,2],"picked":[1,0]}],"min-error":[0],"time":15.069091796875,"type":"prune"},{"compiler":[[25,15]],"locations":[["(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))",0.00390625,true],["(*.f64 (-.f64 1 z) x)",0.0078125,true]],"time":5.9599609375,"type":"localize"},{"count":[[2,48]],"series":[["(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))","x","-inf",0.192138671875],["(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))","x","inf",0.166015625],["(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))","x","0",0.24609375],["(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))","y","-inf",0.343017578125],["(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))","y","inf",0.232177734375],["(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))","y","0",0.273193359375],["(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))","z","-inf",0.215087890625],["(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))","z","inf",0.266845703125],["(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))","z","0",0.27099609375],["(*.f64 (-.f64 1 z) x)","x","-inf",0.556884765625],["(*.f64 (-.f64 1 z) x)","x","inf",0.2939453125],["(*.f64 (-.f64 1 z) x)","x","0",0.31396484375],["(*.f64 (-.f64 1 z) x)","z","-inf",0.23095703125],["(*.f64 (-.f64 1 z) x)","z","inf",0.223876953125],["(*.f64 (-.f64 1 z) x)","z","0",0.301025390625]],"time":4.301025390625,"type":"series"},{"count":[[2,103]],"inputs":[["(*.f64 (-.f64 1 z) x)","(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) x) (*.f64 (*.f64 (-.f64 1 z) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 z) x) 0) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 (*.f64 z x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) x) (*.f64 0 (*.f64 (-.f64 1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 z) x)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 z -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 z)) (*.f64 (pow.f64 (-.f64 1 z) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 z) 2/3) x) (cbrt.f64 (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (-.f64 1 z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) 1) (/.f64 x (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (/.f64 x (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (/.f64 (-.f64 1 (pow.f64 z 3)) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) (pow.f64 (*.f64 (-.f64 1 z) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 2/3) (cbrt.f64 (*.f64 (-.f64 1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (-.f64 1 z))) (pow.f64 (-.f64 1 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (-.f64 1 z) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 z) 2/3) (*.f64 x (cbrt.f64 (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (+.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (/.f64 1 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 z -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 z -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) 1) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) 1) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -1 (pow.f64 z 3))) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 z 3))) (*.f64 (pow.f64 (-.f64 1 z) 2/3) x)) (cbrt.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 z 3)) x) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 1 (pow.f64 z 3)))) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 z -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 z -1) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 z x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (+.f64 (neg.f64 (*.f64 z x)) (*.f64 (-.f64 1 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) (+.f64 y x)) (*.f64 (*.f64 (-.f64 1 z) (+.f64 y x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 z) (+.f64 y x)) 0) (*.f64 (-.f64 1 z) (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) y) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) (+.f64 y x)) (*.f64 0 (*.f64 (-.f64 1 z) (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 z) (+.f64 y x))) (*.f64 (-.f64 1 z) (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) x) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (-.f64 1 z) y) x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (-.f64 1 z) x) (*.f64 (+.f64 z -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (-.f64 1 z) y) (*.f64 (+.f64 z -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 z) (+.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y x) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 z)) (+.f64 (*.f64 (pow.f64 (-.f64 1 z) 2/3) x) (*.f64 (pow.f64 (-.f64 1 z) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 z)) (+.f64 (*.f64 (pow.f64 (-.f64 1 z) 2/3) y) (*.f64 (pow.f64 (-.f64 1 z) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 y x))) (pow.f64 (*.f64 (-.f64 1 z) (+.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 y x)) 2/3) (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (-.f64 1 z) (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (-.f64 1 z) (+.f64 y x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 z) (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) (+.f64 y x)) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) y) (*.f64 x (-.f64 1 (pow.f64 z 3)))) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (*.f64 (-.f64 1 (pow.f64 z 3)) y)) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (fma.f64 z z (+.f64 1 z))) (*.f64 (fma.f64 z z (+.f64 1 z)) (*.f64 (-.f64 1 (pow.f64 z 3)) y))) (*.f64 (fma.f64 z z (+.f64 1 z)) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) y) (fma.f64 z z (+.f64 1 z))) (*.f64 (fma.f64 z z (+.f64 1 z)) (*.f64 x (-.f64 1 (pow.f64 z 3))))) (*.f64 (fma.f64 z z (+.f64 1 z)) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 z 3)) (+.f64 y x)) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 z) (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 z) (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 z -1) (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (-.f64 1 z) (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 (+.f64 z -1) y) (*.f64 (+.f64 z -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 (+.f64 z -1) x) (*.f64 (+.f64 z -1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (-.f64 1 z) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 z)) (*.f64 (pow.f64 (-.f64 1 z) 2/3) y) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 z) y)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) y) 2)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) x (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 2/3) (cbrt.f64 (*.f64 (-.f64 1 z) x)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (-.f64 1 z))) (pow.f64 (-.f64 1 z) 2/3) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 z)) (*.f64 (pow.f64 (-.f64 1 z) 2/3) x) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) (pow.f64 (*.f64 (-.f64 1 z) x) 2/3) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 1 z)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (+.f64 z -1) x) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) y) 1 (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 z) y) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) x) 1 (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 z) x) (*.f64 (-.f64 1 z) y))))))"]],"rules":[["egg-rr",53],["egg-rr",50]],"time":26.738037109375,"type":"rewrite"},{"count":[[151,116]],"inputs":[["x","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)","(neg.f64 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(neg.f64 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))"]],"time":161.970947265625,"type":"simplify"},{"compiler":[[1698,1051]],"time":22.423095703125,"type":"eval"},{"alts":[["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","fresh",0.0078125],["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","next",0.00390625]],"compiler":[[13,9],[14,9],[13,9],[14,9]],"count":[[118,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[116,2],"picked":[1,0]}],"min-error":[0],"time":30.9189453125,"type":"prune"},{"compiler":[[34,12]],"locations":[["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))",0.00390625,true]],"time":6.830078125,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","x","-inf",0.297119140625],["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","x","inf",0.301025390625],["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","x","0",0.22900390625],["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","y","-inf",0.196044921875],["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","y","inf",0.173828125],["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","y","0",0.26806640625],["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","z","-inf",0.283935546875],["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","z","inf",0.322998046875],["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","z","0",0.3369140625]],"time":2.533935546875,"type":"series"},{"count":[[1,53]],"inputs":[["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 0) (*.f64 (-.f64 1 z) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) (*.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 z) (+.f64 x y))) (*.f64 (-.f64 1 z) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) (*.f64 0 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 1 z)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (-.f64 1 z) (neg.f64 (*.f64 z x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (-.f64 1 z) x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z x)) (fma.f64 y (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 y (-.f64 1 z) (neg.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 y (-.f64 1 z) x) 0) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (-.f64 1 z) x) 1) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (-.f64 1 z) (neg.f64 (*.f64 z x))) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 y (-.f64 1 z) x) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 y (-.f64 1 z) x) 0) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (-.f64 1 z) y) 0) (*.f64 x (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 (*.f64 z x) (*.f64 (-.f64 1 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 x (+.f64 z -1)) (*.f64 (-.f64 1 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (-.f64 1 z)) (*.f64 (+.f64 z -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (-.f64 1 z) y) (*.f64 x (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 z) (+.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 2)) (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 z) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 x (+.f64 z -1)) (*.f64 (+.f64 z -1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 (+.f64 z -1) y) (*.f64 x (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 z x) (fma.f64 y (-.f64 1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) y (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 z) y)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) y) 2)) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 z)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (-.f64 1 z) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 2)) (cbrt.f64 (*.f64 x (-.f64 1 z))) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) x (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (-.f64 1 z))) (cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 2)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 x (+.f64 z -1)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 z) y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (-.f64 1 z)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (-.f64 1 z)) 1 (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) y) 1 (*.f64 x (-.f64 1 z)))))))"]],"rules":[["egg-rr",53]],"time":21.2099609375,"type":"rewrite"},{"count":[[89,68]],"inputs":[["(+.f64 y x)","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(*.f64 (-.f64 (*.f64 -1 y) x) z)","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(*.f64 -1 (*.f64 (-.f64 y (*.f64 -1 x)) z))","(+.f64 y (+.f64 x (*.f64 -1 (*.f64 (-.f64 y (*.f64 -1 x)) z))))","(+.f64 y (+.f64 x (*.f64 -1 (*.f64 (-.f64 y (*.f64 -1 x)) z))))","(+.f64 y (+.f64 x (*.f64 -1 (*.f64 (-.f64 y (*.f64 -1 x)) z))))","(-.f64 x (*.f64 z x))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 y (-.f64 1 z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 y (-.f64 1 z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (-.f64 1 z)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 y x)","(+.f64 x y)","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(*.f64 (-.f64 (*.f64 -1 y) x) z)","(neg.f64 (*.f64 (+.f64 x y) z))","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 (*.f64 (-.f64 (*.f64 -1 y) x) z) (+.f64 y x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(*.f64 -1 (*.f64 (-.f64 y (*.f64 -1 x)) z))","(neg.f64 (*.f64 (+.f64 x y) z))","(+.f64 y (+.f64 x (*.f64 -1 (*.f64 (-.f64 y (*.f64 -1 x)) z))))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 y (+.f64 x (*.f64 -1 (*.f64 (-.f64 y (*.f64 -1 x)) z))))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 y (+.f64 x (*.f64 -1 (*.f64 (-.f64 y (*.f64 -1 x)) z))))","(*.f64 (-.f64 1 z) (+.f64 x y))","(-.f64 x (*.f64 z x))","(*.f64 (-.f64 1 z) x)","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(*.f64 y (-.f64 1 z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(*.f64 y (-.f64 1 z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(-.f64 (+.f64 (*.f64 y (-.f64 1 z)) x) (*.f64 z x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 x y))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 x y))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 x y))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 x y))"]],"time":128.568115234375,"type":"simplify"},{"compiler":[[778,453]],"time":10.2138671875,"type":"eval"},{"alts":[["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","next",0.0078125],["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","done",0.00390625]],"compiler":[[13,9],[14,9],[13,9]],"count":[[70,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[68,0],"picked":[1,1]}],"min-error":[0],"time":14.7080078125,"type":"prune"},{"compiler":[[25,15]],"locations":[["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))",0.0078125,true]],"time":5.97900390625,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","y","-inf",0.233154296875],["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","y","inf",0.22509765625],["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","y","0",0.27099609375],["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","z","-inf",0.296875],["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","z","inf",0.2490234375],["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","z","0",0.311767578125],["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","x","-inf",0.26708984375],["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","x","inf",0.242919921875],["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","x","0",0.31005859375]],"time":2.52392578125,"type":"series"},{"count":[[1,55]],"inputs":[["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (+.f64 (neg.f64 (*.f64 z y)) (*.f64 x (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (+.f64 (neg.f64 (*.f64 z x)) (*.f64 (-.f64 1 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) (*.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 0) (*.f64 (-.f64 1 z) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 1 z)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) (*.f64 0 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 z) (+.f64 x y))) (*.f64 (-.f64 1 z) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x (-.f64 1 z)) y) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (-.f64 1 z) y) x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (-.f64 1 z) y) (*.f64 x (+.f64 z -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (-.f64 1 z)) (*.f64 (+.f64 z -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 2/3) (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 z) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 z) 2/3) (+.f64 (*.f64 y (cbrt.f64 (-.f64 1 z))) (*.f64 x (cbrt.f64 (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 z) 2/3) (+.f64 (*.f64 x (cbrt.f64 (-.f64 1 z))) (*.f64 y (cbrt.f64 (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 z) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) (+.f64 x y)) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (*.f64 y (-.f64 1 (pow.f64 z 3)))) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (-.f64 1 (pow.f64 z 3))) (*.f64 x (-.f64 1 (pow.f64 z 3)))) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (-.f64 1 (pow.f64 z 3))) (fma.f64 z z (+.f64 1 z))) (*.f64 (fma.f64 z z (+.f64 1 z)) (*.f64 x (-.f64 1 (pow.f64 z 3))))) (*.f64 (fma.f64 z z (+.f64 1 z)) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (fma.f64 z z (+.f64 1 z))) (*.f64 (fma.f64 z z (+.f64 1 z)) (*.f64 y (-.f64 1 (pow.f64 z 3))))) (*.f64 (fma.f64 z z (+.f64 1 z)) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 z 3)) (+.f64 x y)) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) (+.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (-.f64 1 z) (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 z -1) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 x (+.f64 z -1)) (*.f64 (+.f64 z -1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 (+.f64 z -1) y) (*.f64 x (+.f64 z -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) (+.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (-.f64 1 z))) (cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 z)) 2)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 1 z)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) x (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (-.f64 1 z))) (pow.f64 (-.f64 1 z) 2/3) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (-.f64 1 z) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (-.f64 1 z)) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (-.f64 1 z) y) 2/3) (cbrt.f64 (*.f64 (-.f64 1 z) y)) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) y (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 z)) (*.f64 (pow.f64 (-.f64 1 z) 2/3) y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 z) y)) (pow.f64 (*.f64 (-.f64 1 z) y) 2/3) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (-.f64 1 z))) (pow.f64 (-.f64 1 z) 2/3) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (+.f64 z -1) y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (-.f64 1 z)) 1 (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (-.f64 1 z)) (*.f64 (-.f64 1 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 z) y) (*.f64 x (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) y) 1 (*.f64 x (-.f64 1 z)))))))"]],"rules":[["egg-rr",55]],"time":22.18310546875,"type":"rewrite"},{"count":[[91,66]],"inputs":[["(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y x)","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)","(neg.f64 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 -1 (*.f64 (+.f64 y x) z))","(neg.f64 (*.f64 (+.f64 y x) z))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 y (+.f64 (*.f64 -1 (*.f64 (+.f64 y x) z)) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 y (-.f64 1 z)) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))","(+.f64 (*.f64 (-.f64 1 z) x) (*.f64 y (-.f64 1 z)))","(*.f64 (-.f64 1 z) (+.f64 y x))"]],"time":125.69189453125,"type":"simplify"},{"compiler":[[884,540]],"time":11.55712890625,"type":"eval"},{"alts":[["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","done",0.0078125],["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","done",0.00390625]],"compiler":[[13,9],[14,9]],"count":[[68,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[66,0],"picked":[1,1]}],"min-error":[0],"time":12.991943359375,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(*.f64 (+.f64 x y) (-.f64 1 z))",0.00390625,1],["(+.f64 x y)",0.00390625,1],["(+.f64 x y)",0.00390625,1],["(-.f64 1 z)",0.00390625,1],["(-.f64 1 z)",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[10,7],[6,4],[6,4],[6,5],[6,5],[51,28]],"count":[[5,1]],"inputs":[["(fma.f64 x (-.f64 1 z) (*.f64 (-.f64 1 z) y))","(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","(+.f64 (+.f64 x y) (neg.f64 (*.f64 z (+.f64 x y))))","(fma.f64 (-.f64 1 z) y (*.f64 (-.f64 1 z) x))","(*.f64 (+.f64 x y) (-.f64 1 z))"]],"link":["."],"name":["Optimisation.CirclePacking:place from circle-packing-0.1.0.4, H"],"oracle":[0.0234375],"outputs":[["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))"]],"time":25.902099609375,"times":[["x",3.421875],["y",3.242919921875],["z",3.02197265625],["(*.f64 (+.f64 x y) (-.f64 1 z))",3.653076171875],["(+.f64 x y)",3.293212890625],["(+.f64 x y)",3.2568359375],["(-.f64 1 z)",2.31201171875],["(-.f64 1 z)",2.33984375]],"type":"regimes"},{"compiler":[[14,9]],"inputs":[["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (-.f64 1 z) y (+.f64 x (neg.f64 (*.f64 z x))))","(*.f64 (-.f64 1 z) (+.f64 x y))"]],"stop":[["done",1]],"time":18.823974609375,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[14,9]],"remove-preprocessing":[[]],"time":9.1259765625,"type":"end"}]
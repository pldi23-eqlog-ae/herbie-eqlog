[{"compiler":[[21,16]],"method":["search"],"sampling":[[12,0.4987797737121582,0.0009760856628417969,0.500244140625],[11,0.4978036880493164,0.0019521713256835938,0.500244140625],[10,0.4958515167236328,0.0039043426513671875,0.500244140625],[9,0.4919471740722656,0.007808685302734375,0.500244140625],[8,0.48413848876953125,0.01561737060546875,0.500244140625],[7,0.4685211181640625,0.0312347412109375,0.500244140625],[6,0.437286376953125,0.062469482421875,0.500244140625],[5,0.37481689453125,0.12493896484375,0.500244140625],[4,0.2498779296875,0.2498779296875,0.500244140625],[3,0.0,0.499755859375,0.500244140625],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":2.2939453125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.3603515625,8],["body",256,"valid",412.2646484375,8256]],"time":420.137939453125,"type":"sample"},{"compiler":[[20,15]],"inputs":[["0"],["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))","(*.f64 (sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16)) (fma.f64 v (neg.f64 v) 1))"]],"symmetry":[[]],"time":56.92919921875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))","(*.f64 (sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16)) (fma.f64 v (neg.f64 v) 1))"]],"time":22.788818359375,"type":"simplify"},{"compiler":[[37,28]],"time":0.55908203125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16)) (fma.f64 v (neg.f64 v) 1))","next",0.0078125]],"compiler":[[18,14],[18,14]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":1.02294921875,"type":"prune"},{"compiler":[[68,49]],"locations":[["(sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16))",0.00390625,true],["(*.f64 (sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16)) (fma.f64 v (neg.f64 v) 1))",0.00390625,true]],"time":16.588134765625,"type":"localize"},{"count":[[2,8]],"series":[["(sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16))","v","-inf",0.47021484375],["(sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16))","v","inf",0.397216796875],["(sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16))","v","0",0.260009765625],["(*.f64 (sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16)) (fma.f64 v (neg.f64 v) 1))","v","-inf",0.531005859375],["(*.f64 (sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16)) (fma.f64 v (neg.f64 v) 1))","v","inf",0.9541015625],["(*.f64 (sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16)) (fma.f64 v (neg.f64 v) 1))","v","0",0.69091796875]],"time":3.423828125,"type":"series"},{"count":[[2,101]],"inputs":[["(*.f64 (sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16)) (fma.f64 v (neg.f64 v) 1))","(sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) 1/2) (*.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) 0) (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (*.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))) (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))) (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (*.f64 0 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (neg.f64 (*.f64 v v))) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (neg.f64 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (neg.f64 (*.f64 v v))) 1) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 v (neg.f64 v) 1)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 v (neg.f64 v) 1) 2)) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 v (neg.f64 v) 1) 2)) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (cbrt.f64 (fma.f64 v (neg.f64 v) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))) (cbrt.f64 (*.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8) (pow.f64 (fma.f64 v (neg.f64 v) 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 v (neg.f64 v) 1) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8) (pow.f64 (fma.f64 v (neg.f64 v) 1) 2))) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (cbrt.f64 (fma.f64 v (neg.f64 v) 1))) (cbrt.f64 (pow.f64 (fma.f64 v (neg.f64 v) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (*.f64 (fma.f64 v (neg.f64 v) 1) (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 v (neg.f64 v) 1) 2)) (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (cbrt.f64 (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (+.f64 (neg.f64 (pow.f64 (*.f64 v v) 3)) 1)) (+.f64 (pow.f64 (neg.f64 (*.f64 v v)) 2) (+.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) (cbrt.f64 (*.f64 -2 (fma.f64 (*.f64 -3 v) v 1)))) (cbrt.f64 -16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 v v) 3)) 1) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (+.f64 (pow.f64 (neg.f64 (*.f64 v v)) 2) (+.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 v v) 3)) 1) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2))) (*.f64 (+.f64 (pow.f64 (neg.f64 (*.f64 v v)) 2) (+.f64 1 (*.f64 v v))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)) (+.f64 (neg.f64 (pow.f64 (*.f64 v v) 3)) 1)) (*.f64 4 (+.f64 (pow.f64 (neg.f64 (*.f64 v v)) 2) (+.f64 1 (*.f64 v v)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2))) (cbrt.f64 16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)) (fma.f64 v (neg.f64 v) 1)) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 v v)) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (neg.f64 (*.f64 v v)) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) 1/2) (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) 0) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (*.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (*.f64 1/2 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (*.f64 0 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) (fabs.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/4 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (pow.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) 0) (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (cbrt.f64 (*.f64 -2 (fma.f64 (*.f64 -3 v) v 1)))) (cbrt.f64 -16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -2 (fma.f64 (*.f64 -3 v) v 1))) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) (cbrt.f64 -16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)) -1) -4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)) -2) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)) (cbrt.f64 16)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2))) -4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2))) (cbrt.f64 16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) (cbrt.f64 16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)) 1) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2)) (cbrt.f64 4)) (cbrt.f64 16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fabs.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 2 2) 1/4)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))))))"]],"rules":[["egg-rr",56],["egg-rr",45]],"time":30.18505859375,"type":"rewrite"},{"count":[[109,114]],"inputs":[["(sqrt.f64 1/8)","(+.f64 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -1 (sqrt.f64 1/8)) (*.f64 -3/2 (sqrt.f64 1/8)))) (sqrt.f64 1/8))","(+.f64 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -1 (sqrt.f64 1/8)) (*.f64 -3/2 (sqrt.f64 1/8)))) (+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 3/2 (sqrt.f64 1/8)) (*.f64 -9/8 (sqrt.f64 1/8)))) (sqrt.f64 1/8)))","(+.f64 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -1 (sqrt.f64 1/8)) (*.f64 -3/2 (sqrt.f64 1/8)))) (+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 3/2 (sqrt.f64 1/8)) (*.f64 -9/8 (sqrt.f64 1/8)))) (+.f64 (*.f64 (pow.f64 v 6) (+.f64 (*.f64 -27/16 (sqrt.f64 1/8)) (*.f64 9/8 (sqrt.f64 1/8)))) (sqrt.f64 1/8))))","(sqrt.f64 1/8)","(+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (sqrt.f64 1/8))","(+.f64 (*.f64 -9/8 (*.f64 (pow.f64 v 4) (sqrt.f64 1/8))) (+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (sqrt.f64 1/8)))","(+.f64 (*.f64 -9/8 (*.f64 (pow.f64 v 4) (sqrt.f64 1/8))) (+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (+.f64 (*.f64 -27/16 (*.f64 (pow.f64 v 6) (sqrt.f64 1/8))) (sqrt.f64 1/8))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 1/8)","(+.f64 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -1 (sqrt.f64 1/8)) (*.f64 -3/2 (sqrt.f64 1/8)))) (sqrt.f64 1/8))","(fma.f64 (*.f64 v v) (*.f64 (sqrt.f64 1/8) -5/2) (sqrt.f64 1/8))","(+.f64 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -1 (sqrt.f64 1/8)) (*.f64 -3/2 (sqrt.f64 1/8)))) (+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 3/2 (sqrt.f64 1/8)) (*.f64 -9/8 (sqrt.f64 1/8)))) (sqrt.f64 1/8)))","(fma.f64 (*.f64 v v) (*.f64 (sqrt.f64 1/8) -5/2) (fma.f64 (pow.f64 v 4) (*.f64 (sqrt.f64 1/8) 3/8) (sqrt.f64 1/8)))","(+.f64 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -1 (sqrt.f64 1/8)) (*.f64 -3/2 (sqrt.f64 1/8)))) (+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 3/2 (sqrt.f64 1/8)) (*.f64 -9/8 (sqrt.f64 1/8)))) (+.f64 (*.f64 (pow.f64 v 6) (+.f64 (*.f64 -27/16 (sqrt.f64 1/8)) (*.f64 9/8 (sqrt.f64 1/8)))) (sqrt.f64 1/8))))","(fma.f64 (*.f64 (sqrt.f64 1/8) -5/2) (*.f64 v v) (fma.f64 (*.f64 (sqrt.f64 1/8) 3/8) (pow.f64 v 4) (fma.f64 (pow.f64 v 6) (*.f64 (sqrt.f64 1/8) -9/16) (sqrt.f64 1/8))))","(sqrt.f64 1/8)","(+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (sqrt.f64 1/8))","(fma.f64 (*.f64 -3/2 (*.f64 v v)) (sqrt.f64 1/8) (sqrt.f64 1/8))","(+.f64 (*.f64 -9/8 (*.f64 (pow.f64 v 4) (sqrt.f64 1/8))) (+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (sqrt.f64 1/8)))","(+.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 -9/8 (pow.f64 v 4)) (*.f64 -3/2 (*.f64 v v)))) (sqrt.f64 1/8))","(+.f64 (*.f64 -9/8 (*.f64 (pow.f64 v 4) (sqrt.f64 1/8))) (+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (+.f64 (*.f64 -27/16 (*.f64 (pow.f64 v 6) (sqrt.f64 1/8))) (sqrt.f64 1/8))))","(+.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 -9/8 (pow.f64 v 4)) (*.f64 -3/2 (*.f64 v v)))) (fma.f64 -27/16 (*.f64 (pow.f64 v 6) (sqrt.f64 1/8)) (sqrt.f64 1/8)))"]],"time":34.56591796875,"type":"simplify"},{"compiler":[[2639,1911]],"time":33.966064453125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16)) (fma.f64 v (neg.f64 v) 1))","done",0.0078125],["(*.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))","next",0.00390625]],"compiler":[[18,14],[27,21],[27,21]],"count":[[115,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[114,1],"picked":[1,1]}],"min-error":[0],"time":28.89306640625,"type":"prune"},{"compiler":[[98,70]],"locations":[["(*.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))",0.00390625,true],["(sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))",0.00390625,true],["(*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))",0.01171875,true]],"time":23.656982421875,"type":"localize"},{"count":[[3,12]],"series":[["(*.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))","v","-inf",1.037109375],["(*.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))","v","inf",0.85009765625],["(*.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))","v","0",26.84912109375],["(sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))","v","-inf",0.217041015625],["(sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))","v","inf",0.197021484375],["(sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))","v","0",0.19189453125],["(*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))","v","-inf",0.30517578125],["(*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))","v","inf",0.5810546875],["(*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))","v","0",0.6259765625]],"time":31.033935546875,"type":"series"},{"count":[[3,140]],"inputs":[["(*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1))","(sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))","(*.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) 1/2) (*.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) 0) (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) (*.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))) (*.f64 1/2 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))) (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) (*.f64 0 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (neg.f64 (*.f64 v v))) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 v v)) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (neg.f64 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (*.f64 (neg.f64 (*.f64 v v)) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (neg.f64 (*.f64 v v)))) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (neg.f64 (*.f64 v v)) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (neg.f64 (*.f64 v v))) 1) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 (*.f64 v v)) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) 1) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))) (pow.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 v (neg.f64 v) 1)) (*.f64 (pow.f64 (fma.f64 v (neg.f64 v) 1) 2/3) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) (fma.f64 v (neg.f64 v) 1))) (pow.f64 (fma.f64 v (neg.f64 v) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) 2/3)) (fma.f64 v (neg.f64 v) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (+.f64 (neg.f64 (pow.f64 (*.f64 v v) 3)) 1)) (+.f64 (pow.f64 (neg.f64 (*.f64 v v)) 2) (+.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1))) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 v v) 3)) 1) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (+.f64 (pow.f64 (neg.f64 (*.f64 v v)) 2) (+.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1))) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1))) (sqrt.f64 1/2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1))) (cbrt.f64 1/2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) (pow.f64 (fma.f64 v (neg.f64 v) 1) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) (pow.f64 (fma.f64 v (neg.f64 v) 1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 v v)) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (neg.f64 (*.f64 v v)) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) 1/2) (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) 0) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (*.f64 1/2 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (*.f64 0 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) -1) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))) (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))) (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))) (fabs.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) (fabs.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (pow.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) 0) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) (+.f64 1/3 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) (+.f64 1/6 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) (*.f64 1/6 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) 1/2) (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) 0) (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (neg.f64 (*.f64 v v))) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (neg.f64 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (neg.f64 (*.f64 v v)))) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (*.f64 (neg.f64 (*.f64 v v)) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))) (*.f64 1/2 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))) (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) (*.f64 0 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 v v)) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (*.f64 (neg.f64 (*.f64 v v)) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (neg.f64 (*.f64 v v))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (neg.f64 (*.f64 v v)) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))))) (pow.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1)))) (*.f64 (pow.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) 2/3) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 v (neg.f64 v) 1) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))) (*.f64 (pow.f64 (fma.f64 v (neg.f64 v) 1) 2/3) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 v (neg.f64 v) 1) 2/3) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (cbrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 -3 v) v 1)) (*.f64 1/2 (fma.f64 v (neg.f64 v) 1))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))) (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8) 2/3)) (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 v (neg.f64 v) 1) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))) (cbrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (+.f64 (neg.f64 (pow.f64 (*.f64 v v) 3)) 1)) (+.f64 (pow.f64 (neg.f64 (*.f64 v v)) 2) (+.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 v v) 3)) 1) (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8))) (+.f64 (pow.f64 (neg.f64 (*.f64 v v)) 2) (+.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1)) 3))))))"]],"rules":[["egg-rr",43],["egg-rr",51],["egg-rr",46]],"time":37.425048828125,"type":"rewrite"},{"count":[[152,161]],"inputs":[["1/2","(+.f64 1/2 (*.f64 -1 (pow.f64 v 2)))","(+.f64 1/2 (+.f64 (*.f64 -1 (pow.f64 v 2)) (*.f64 -1/3 (pow.f64 v 6))))","(+.f64 1/2 (+.f64 (*.f64 -5/6 (pow.f64 v 8)) (+.f64 (*.f64 -1 (pow.f64 v 2)) (*.f64 -1/3 (pow.f64 v 6)))))","(sqrt.f64 1/8)","(+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (sqrt.f64 1/8))","(+.f64 (*.f64 -9/8 (*.f64 (pow.f64 v 4) (sqrt.f64 1/8))) (+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (sqrt.f64 1/8)))","(+.f64 (*.f64 -9/8 (*.f64 (pow.f64 v 4) (sqrt.f64 1/8))) (+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (+.f64 (*.f64 -27/16 (*.f64 (pow.f64 v 6) (sqrt.f64 1/8))) (sqrt.f64 1/8))))","(*.f64 1/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 1/2 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -3/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 -1 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))))))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -3/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 -1 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))))) (*.f64 1/2 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -9/8 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 3/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)))))))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -3/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 -1 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 v 6) (+.f64 (*.f64 9/8 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 -27/16 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))))) (*.f64 1/2 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -9/8 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 3/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))))))))"]],"method":["egg-herbie"],"outputs":[["1/2","(+.f64 1/2 (*.f64 -1 (pow.f64 v 2)))","(-.f64 1/2 (*.f64 v v))","(+.f64 1/2 (+.f64 (*.f64 -1 (pow.f64 v 2)) (*.f64 -1/3 (pow.f64 v 6))))","(+.f64 1/2 (fma.f64 -1/3 (pow.f64 v 6) (neg.f64 (*.f64 v v))))","(+.f64 1/2 (+.f64 (*.f64 -5/6 (pow.f64 v 8)) (+.f64 (*.f64 -1 (pow.f64 v 2)) (*.f64 -1/3 (pow.f64 v 6)))))","(+.f64 1/2 (fma.f64 (pow.f64 v 8) -5/6 (fma.f64 -1/3 (pow.f64 v 6) (neg.f64 (*.f64 v v)))))","(sqrt.f64 1/8)","(+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (sqrt.f64 1/8))","(fma.f64 (*.f64 -3/2 (*.f64 v v)) (sqrt.f64 1/8) (sqrt.f64 1/8))","(+.f64 (*.f64 -9/8 (*.f64 (pow.f64 v 4) (sqrt.f64 1/8))) (+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (sqrt.f64 1/8)))","(+.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 -9/8 (pow.f64 v 4)) (*.f64 -3/2 (*.f64 v v)))) (sqrt.f64 1/8))","(+.f64 (*.f64 -9/8 (*.f64 (pow.f64 v 4) (sqrt.f64 1/8))) (+.f64 (*.f64 -3/2 (*.f64 (pow.f64 v 2) (sqrt.f64 1/8))) (+.f64 (*.f64 -27/16 (*.f64 (pow.f64 v 6) (sqrt.f64 1/8))) (sqrt.f64 1/8))))","(+.f64 (*.f64 (sqrt.f64 1/8) (+.f64 (*.f64 -9/8 (pow.f64 v 4)) (*.f64 -3/2 (*.f64 v v)))) (fma.f64 -27/16 (*.f64 (pow.f64 v 6) (sqrt.f64 1/8)) (sqrt.f64 1/8)))","(*.f64 1/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))","(sqrt.f64 1/8)","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 1/2 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -3/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 -1 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))))))","(fma.f64 (*.f64 1/2 (*.f64 v v)) (*.f64 (cbrt.f64 (sqrt.f64 1/8)) -5/2) (sqrt.f64 1/8))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -3/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 -1 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))))) (*.f64 1/2 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -9/8 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 3/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)))))))","(fma.f64 1/2 (fma.f64 (*.f64 v v) (*.f64 (cbrt.f64 (sqrt.f64 1/8)) -5/2) (*.f64 (pow.f64 v 4) (*.f64 (cbrt.f64 (sqrt.f64 1/8)) 3/8))) (sqrt.f64 1/8))","(+.f64 (*.f64 1/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 v 2) (+.f64 (*.f64 -3/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 -1 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 v 6) (+.f64 (*.f64 9/8 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 -27/16 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))))) (*.f64 1/2 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -9/8 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3)) (*.f64 3/2 (pow.f64 (*.f64 1 (sqrt.f64 1/8)) 1/3))))))))","(+.f64 (sqrt.f64 1/8) (*.f64 1/2 (+.f64 (*.f64 (*.f64 v v) (*.f64 (cbrt.f64 (sqrt.f64 1/8)) -5/2)) (fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/8)) -9/16) (pow.f64 v 6) (*.f64 (pow.f64 v 4) (*.f64 (cbrt.f64 (sqrt.f64 1/8)) 3/8))))))"]],"time":48.260986328125,"type":"simplify"},{"compiler":[[5101,3665]],"time":63.679931640625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16)) (fma.f64 v (neg.f64 v) 1))","done",0.0078125],["(*.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))","done",0.00390625]],"compiler":[[18,14],[27,21]],"count":[[163,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[161,0],"picked":[1,1]}],"min-error":[0],"time":54.658203125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["v",0.00390625,1],["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))",0.00390625,1],["(*.f64 v v)",0.00390625,1]],"compiler":[[2,1],[20,15],[4,2],[63,47]],"count":[[3,1]],"inputs":[["(*.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))","(*.f64 (sqrt.f64 (/.f64 (*.f64 2 (fma.f64 (*.f64 -3 v) v 1)) 16)) (fma.f64 v (neg.f64 v) 1))","(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))"]],"link":["."],"name":["Falkner and Boettcher, Appendix B, 2"],"oracle":[0.01953125],"outputs":[["(*.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))"]],"time":7.700927734375,"times":[["v",2.594970703125],["(*.f64 (*.f64 (/.f64 (sqrt.f64 2) 4) (sqrt.f64 (-.f64 1 (*.f64 3 (*.f64 v v))))) (-.f64 1 (*.f64 v v)))",1.994873046875],["(*.f64 v v)",1.841064453125]],"type":"regimes"},{"compiler":[[27,21]],"inputs":[["(*.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8)) (fma.f64 v (neg.f64 v) 1)) (cbrt.f64 (sqrt.f64 (*.f64 (fma.f64 (*.f64 -3 v) v 1) 1/8))))","(*.f64 (sqrt.f64 (fma.f64 (*.f64 -3 (*.f64 v v)) 1/8 1/8)) (fma.f64 v (neg.f64 v) 1))"]],"stop":[["done",1]],"time":20.23583984375,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[27,21]],"remove-preprocessing":[[]],"time":13.785888671875,"type":"end"}]
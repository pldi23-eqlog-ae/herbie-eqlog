[{"compiler":[[12,9]],"method":["search"],"sampling":[[1,0.49623046875,0.0,0.50376953125],[0,0.0,0.49623046875,0.50376953125]],"time":0.258056640625,"type":"analyze"},{"outcomes":[["body",1024,"valid",292.08740234375,2111],["body",512,"valid",84.672607421875,1043],["body",256,"valid",32.406005859375,752],["body",2048,"valid",1315.107177734375,4350]],"time":1732.76416015625,"type":"sample"},{"compiler":[[5,4]],"inputs":[["0"],["(-.f64 1 (cos.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 1 (cos.f64 x))"]],"symmetry":[[]],"time":72.346923828125,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(-.f64 1 (cos.f64 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (cos.f64 x))"]],"time":38.949951171875,"type":"simplify"},{"compiler":[[5,4]],"time":1.4619140625,"type":"eval"},{"alts":[["(-.f64 1 (cos.f64 x))","next",29.82562376746964]],"compiler":[[5,4],[5,4]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[29.82562376746964],"time":0.67919921875,"type":"prune"},{"compiler":[[9,5]],"locations":[["(-.f64 1 (cos.f64 x))",2.5353186822039313,true]],"time":2.199951171875,"type":"localize"},{"count":[[1,4]],"series":[["(-.f64 1 (cos.f64 x))","x","-inf",0.182861328125],["(-.f64 1 (cos.f64 x))","x","inf",0.219970703125],["(-.f64 1 (cos.f64 x))","x","0",0.365966796875]],"time":0.807861328125,"type":"series"},{"count":[[1,86]],"inputs":[["(-.f64 1 (cos.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)) (/.f64 (pow.f64 (cos.f64 x) 3) (-.f64 -1 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (cos.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (cos.f64 x) 3) (-.f64 -1 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 x))))) (/.f64 1 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (-.f64 1 (cos.f64 x)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (-.f64 1 (cos.f64 x)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (-.f64 1 (cos.f64 x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (-.f64 1 (cos.f64 x)) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (-.f64 1 (cos.f64 x)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 -1 (cos.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (cos.f64 x)) 3) 4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)) (/.f64 (pow.f64 (cos.f64 x) 3) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (cos.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (cos.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) 2)) (/.f64 (*.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (pow.f64 (cos.f64 x) 3)) (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (cos.f64 x) 3) (-.f64 -1 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 x))))) (/.f64 -1 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)) (/.f64 (/.f64 (pow.f64 (cos.f64 x) 3) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)) (/.f64 (/.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 (cos.f64 x)))) (pow.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 (cos.f64 x) -1)) 4)) (cbrt.f64 (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) (pow.f64 (+.f64 (cos.f64 x) -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (cbrt.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1))) (/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) -1/3) (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (/.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2/3) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cos.f64 x)))) (-.f64 1 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2/3) (cbrt.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (/.f64 1 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (/.f64 -1 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (cos.f64 x) -1)) (neg.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (cos.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (cos.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (cbrt.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1))) (pow.f64 (cbrt.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (/.f64 1 (*.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (*.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (pow.f64 (cos.f64 x) 3))) (/.f64 1 (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2/3) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2/3) (*.f64 0 (cbrt.f64 (-.f64 1 (cos.f64 x)))))) (+.f64 0 (cbrt.f64 (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2/3) (-.f64 0 (*.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 0))) (+.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cos.f64 x) 2/3) (-.f64 1 (*.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) 1))) (+.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2/3) (*.f64 0 (cbrt.f64 (+.f64 (cos.f64 x) -1))))) (cbrt.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2/3) (+.f64 0 (*.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 0))) (-.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cos.f64 x) 2/3) (+.f64 1 (*.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) -1))) (-.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (/.f64 (-.f64 1 (cos.f64 x)) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (cbrt.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1))) (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (*.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (-.f64 -1 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (*.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (pow.f64 (cos.f64 x) 3))) (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2/3) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (cbrt.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (*.f64 1 (*.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (*.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (pow.f64 (cos.f64 x) 3))) (*.f64 1 (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)))) 3) (pow.f64 (neg.f64 (cbrt.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (cbrt.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))) (neg.f64 (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) -1) (neg.f64 (*.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (*.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) (pow.f64 (cos.f64 x) 3)))) (neg.f64 (pow.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2/3) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))))) (neg.f64 (cbrt.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2) (+.f64 (pow.f64 (cos.f64 x) 3) -1))) (cbrt.f64 (-.f64 -1 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (cos.f64 x) -1) 2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (cbrt.f64 (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1)) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (fma.f64 (+.f64 1 (cos.f64 x)) (cos.f64 x) 1))) (-.f64 -1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (cos.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 1 (cos.f64 x)))))))"]],"rules":[["egg-rr",86]],"time":44.920166015625,"type":"rewrite"},{"count":[[90,94]],"inputs":[["(*.f64 1/2 (pow.f64 x 2))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/24 (pow.f64 x 4)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (+.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 -1/40320 (pow.f64 x 8)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (pow.f64 x 2))","(*.f64 1/2 (*.f64 x x))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/24 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -1/24 (*.f64 1/2 (*.f64 x x)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (+.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 -1/40320 (pow.f64 x 8)))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 (pow.f64 x 4) -1/24 (fma.f64 (pow.f64 x 8) -1/40320 (*.f64 1/720 (pow.f64 x 6)))))"]],"time":34.052001953125,"type":"simplify"},{"compiler":[[1572,1023]],"time":19.493896484375,"type":"eval"},{"alts":[["(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","next",0.015625]],"compiler":[[16,12],[16,12]],"count":[[95,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[94,1],"picked":[1,0]}],"min-error":[0.015625],"time":17.197998046875,"type":"prune"},{"compiler":[[46,33]],"locations":[["(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))",0.015625,true],["(*.f64 1/720 (pow.f64 x 6))",0.06640625,true],["(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))",0.08984375,true]],"time":11.06298828125,"type":"localize"},{"count":[[3,24]],"series":[["(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","x","-inf",0.194091796875],["(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","x","inf",0.2431640625],["(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","x","0",0.225830078125],["(*.f64 1/720 (pow.f64 x 6))","x","-inf",0.155029296875],["(*.f64 1/720 (pow.f64 x 6))","x","inf",0.192138671875],["(*.f64 1/720 (pow.f64 x 6))","x","0",0.302001953125],["(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","x","-inf",0.508056640625],["(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","x","inf",0.5498046875],["(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","x","0",0.526123046875]],"time":3.01806640625,"type":"series"},{"count":[[3,105]],"inputs":[["(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(*.f64 1/720 (pow.f64 x 6))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) (*.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 0) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) (*.f64 0 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) (pow.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 2/3) (cbrt.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 6) 1/720 (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/720 (*.f64 x x)) (pow.f64 x 4) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/720) (*.f64 (cbrt.f64 1/518400) (pow.f64 x 6)) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 6) (sqrt.f64 1/720)) (sqrt.f64 1/720) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/720 (pow.f64 x 6) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/720)) (*.f64 (cbrt.f64 1/518400) (pow.f64 x 4)) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 x 6) (cbrt.f64 1/720)) (cbrt.f64 1/518400) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/720) (*.f64 (pow.f64 x 6) (sqrt.f64 1/720)) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 1/518400) (pow.f64 x 4)) (*.f64 (*.f64 x x) (cbrt.f64 1/720)) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 (pow.f64 x 4) 1/720) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4) -1/24 (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/24 (*.f64 x x)) (*.f64 x x) (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/24 (pow.f64 x 4/3)) (cbrt.f64 (pow.f64 x 8)) (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 -1/24) (pow.f64 x 4/3)) (cbrt.f64 (*.f64 (pow.f64 x 8) 1/576)) (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/24) (*.f64 (cbrt.f64 1/576) (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 1/720 (pow.f64 x 6))) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/720 (pow.f64 x 6)) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/720 (pow.f64 x 6)) 1 (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/24 (pow.f64 x 4)) 1 (*.f64 1/720 (pow.f64 x 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 (*.f64 1/720 (pow.f64 x 6)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/720 (pow.f64 x 6)) 0) (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 0 (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 1/720 (pow.f64 x 6))) (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/720) (*.f64 (cbrt.f64 1/518400) (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/518400) (pow.f64 x 6)) (cbrt.f64 1/720))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/720)) (*.f64 (cbrt.f64 1/518400) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/518400) (pow.f64 x 4)) (*.f64 (*.f64 x x) (cbrt.f64 1/720)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/720 (pow.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 6) 1/720)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 6) (cbrt.f64 1/720)) (cbrt.f64 1/518400))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 6) (sqrt.f64 1/720)) (sqrt.f64 1/720))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/720 (*.f64 x x)) (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 (pow.f64 x 4) 1/720))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/720) (*.f64 (pow.f64 x 6) (sqrt.f64 1/720)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4) (*.f64 1/720 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/518400) (*.f64 (pow.f64 x 6) (cbrt.f64 1/720)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 4) 1/720) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 1/720 (pow.f64 x 6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/720 (pow.f64 x 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/720 (pow.f64 x 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 x 6) 3) 1/373248000) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/720)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/720 (pow.f64 x 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 x 6) 3) 1/373248000))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 1/2 x) x (*.f64 -1/24 (pow.f64 x 4))) (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) (*.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) 0) (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 x x)) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 1/2 x) x (*.f64 -1/24 (pow.f64 x 4))) 1) (*.f64 1/720 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) (*.f64 0 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))) (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) (*.f64 1/2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/720 (pow.f64 x 6)) (fma.f64 (*.f64 1/2 x) x (*.f64 -1/24 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 1/2 (*.f64 x x)) (*.f64 1/720 (pow.f64 x 6))) (*.f64 -1/24 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/24 (pow.f64 x 4)) (+.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 1/2 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))) (pow.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) 2/3) (cbrt.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) (pow.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 2/3) (*.f64 1/2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 2/3) (cbrt.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) (*.f64 1/2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (pow.f64 x 2/3)) (pow.f64 x 4/3) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 x x)) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/2 (*.f64 x x))) (cbrt.f64 (*.f64 (pow.f64 x 4) 1/4)) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 1/2) x) (*.f64 (sqrt.f64 1/2) x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (*.f64 (sqrt.f64 1/2) (*.f64 x x)) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))) (*.f64 1/2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1/2 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) (*.f64 1/2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))) 1 (*.f64 1/2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/2 (*.f64 x x)) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (*.f64 x x)) 1 (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))))))"]],"rules":[["egg-rr",38],["egg-rr",28],["egg-rr",39]],"time":31.087890625,"type":"rewrite"},{"count":[[129,111]],"inputs":[["(*.f64 -1/24 (pow.f64 x 4))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(*.f64 1/720 (pow.f64 x 6))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(*.f64 1/720 (pow.f64 x 6))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(*.f64 1/2 (pow.f64 x 2))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/24 (pow.f64 x 4)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(*.f64 1/720 (pow.f64 x 6))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(*.f64 1/720 (pow.f64 x 6))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/24 (pow.f64 x 4))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(*.f64 1/720 (pow.f64 x 6))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(*.f64 1/720 (pow.f64 x 6))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(*.f64 1/2 (pow.f64 x 2))","(*.f64 1/2 (*.f64 x x))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/24 (pow.f64 x 4)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/2 (*.f64 x x)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(*.f64 1/720 (pow.f64 x 6))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(*.f64 1/720 (pow.f64 x 6))","(+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6)))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))"]],"time":86.969970703125,"type":"simplify"},{"compiler":[[2133,1531]],"time":30.173095703125,"type":"eval"},{"alts":[["(fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","next",0]],"compiler":[[16,12],[16,12]],"count":[[112,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[111,1],"picked":[1,0]}],"min-error":[0],"time":28.10595703125,"type":"prune"},{"compiler":[[46,35]],"locations":[["(*.f64 1/720 (pow.f64 x 6))",0.06640625,false],["(fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6)))",0.08984375,false]],"time":11.551025390625,"type":"localize"},{"compiler":[[1305,981]],"time":18.97607421875,"type":"eval"},{"alts":[["(fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","done",0]],"compiler":[[16,12]],"count":[[69,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[68,0],"picked":[1,1]}],"min-error":[0],"time":13.56591796875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(-.f64 1 (cos.f64 x))",0,1],["(cos.f64 x)",0,1]],"compiler":[[2,1],[5,4],[3,2],[35,26]],"count":[[3,1]],"inputs":[["(fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(-.f64 1 (cos.f64 x))"]],"link":["."],"name":["ENA, Section 1.4, Mentioned, A"],"oracle":[29.82562376746964],"outputs":[["(fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))"]],"time":6.7431640625,"times":[["x",2.490234375],["(-.f64 1 (cos.f64 x))",1.613037109375],["(cos.f64 x)",1.72705078125]],"type":"regimes"},{"compiler":[[16,12]],"inputs":[["(fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (*.f64 1/2 x) x (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))"]],"stop":[["done",1]],"time":18.448974609375,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[16,12]],"remove-preprocessing":[[]],"time":10.8359375,"type":"end"}]
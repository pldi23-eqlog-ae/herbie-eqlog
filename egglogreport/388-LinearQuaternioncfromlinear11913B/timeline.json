[{"compiler":[[19,10]],"method":["search"],"sampling":[[12,0.397854136256683,0.600681735132639,0.0014641286106780171],[11,0.3276445827996213,0.6708912885897007,0.0014641286106780171],[10,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[9,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":117.452880859375,"type":"analyze"},{"outcomes":[["body",512,"invalid",22.954833984375,299],["body",256,"invalid",75.91796875,1692],["body",1024,"invalid",26.625,240],["body",512,"valid",42.041259765625,535],["body",1024,"valid",101.701904296875,910],["body",2048,"valid",71.643310546875,498],["body",256,"valid",282.34375,6313]],"time":634.85107421875,"type":"sample"},{"compiler":[[18,9]],"inputs":[["0","1","2"],["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))","(+.f64 (-.f64 (-.f64 (*.f64 y x) (*.f64 x z)) (*.f64 x x)) (*.f64 x x))","(+.f64 (-.f64 (-.f64 (*.f64 z y) (*.f64 y x)) (*.f64 y y)) (*.f64 y y))","(+.f64 (-.f64 (-.f64 (*.f64 x z) (*.f64 z y)) (*.f64 z z)) (*.f64 z z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))","(*.f64 y (-.f64 x z))","(+.f64 (-.f64 (-.f64 (*.f64 y x) (*.f64 x z)) (*.f64 x x)) (*.f64 x x))","(*.f64 x (-.f64 y z))","(+.f64 (-.f64 (-.f64 (*.f64 z y) (*.f64 y x)) (*.f64 y y)) (*.f64 y y))","(*.f64 y (-.f64 z x))","(+.f64 (-.f64 (-.f64 (*.f64 x z) (*.f64 z y)) (*.f64 z z)) (*.f64 z z))","(*.f64 z (-.f64 x y))"]],"symmetry":[[]],"time":75.244873046875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))","(*.f64 y (-.f64 x z))"]],"time":19.9501953125,"type":"simplify"},{"compiler":[[23,11]],"time":0.323974609375,"type":"eval"},{"alts":[["(*.f64 y (-.f64 x z))","next",0.00390625]],"compiler":[[8,5],[8,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.763916015625,"type":"prune"},{"compiler":[[14,5]],"locations":[["(*.f64 y (-.f64 x z))",0.00390625,true]],"time":3.02294921875,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 y (-.f64 x z))","z","-inf",0.24609375],["(*.f64 y (-.f64 x z))","z","inf",0.303955078125],["(*.f64 y (-.f64 x z))","z","0",0.256103515625],["(*.f64 y (-.f64 x z))","x","-inf",0.489990234375],["(*.f64 y (-.f64 x z))","x","inf",0.3271484375],["(*.f64 y (-.f64 x z))","x","0",0.268798828125],["(*.f64 y (-.f64 x z))","y","-inf",0.359130859375],["(*.f64 y (-.f64 x z))","y","inf",0.347900390625],["(*.f64 y (-.f64 x z))","y","0",0.47900390625]],"time":3.178955078125,"type":"series"},{"count":[[1,52]],"inputs":[["(*.f64 y (-.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z y)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 y x))) (neg.f64 (neg.f64 (neg.f64 (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 y x) -1)) (neg.f64 (*.f64 (neg.f64 (*.f64 z y)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z y)) (neg.f64 (*.f64 (neg.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z y)) (neg.f64 (*.f64 y (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 x z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (*.f64 y x))) (neg.f64 (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (*.f64 (*.f64 y x) -1)) (*.f64 (neg.f64 (*.f64 z y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 z y)) (*.f64 (neg.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 z y)) (*.f64 y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y x) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (*.f64 (-.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (-.f64 z x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (*.f64 (-.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (*.f64 (-.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (-.f64 x z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (pow.f64 (*.f64 y (-.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2/3) (cbrt.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x z) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (-.f64 x z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 z x) y)) (neg.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 (-.f64 z x) y))))) (cbrt.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (-.f64 x z))) (pow.f64 (-.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x z) 2/3) (*.f64 y (cbrt.f64 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x z)) (*.f64 (pow.f64 (-.f64 x z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 x z) 2/3) y) (cbrt.f64 (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (-.f64 x z)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 z x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (*.f64 (-.f64 z x) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (*.f64 (-.f64 z x) y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (-.f64 z x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (neg.f64 (*.f64 z y)))))))"]],"rules":[["egg-rr",52]],"time":39.0390625,"type":"rewrite"},{"count":[[76,57]],"inputs":[["(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))"]],"time":75.70703125,"type":"simplify"},{"compiler":[[521,178]],"time":5.632080078125,"type":"eval"},{"alts":[["(fma.f64 y x (neg.f64 (*.f64 z y)))","next",0]],"compiler":[[10,6],[10,6]],"count":[[58,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[57,1],"picked":[1,0]}],"min-error":[0],"time":10.3759765625,"type":"prune"},{"compiler":[[20,6]],"time":4.27392578125,"type":"localize"},{"compiler":[[3,3]],"time":0.0859375,"type":"eval"},{"alts":[["(fma.f64 y x (neg.f64 (*.f64 z y)))","done",0]],"compiler":[[10,6]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.462158203125,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["z",0,1],["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))",0,1]],"compiler":[[4,3],[4,3],[4,3],[18,9],[30,14]],"count":[[3,1]],"inputs":[["(fma.f64 y x (neg.f64 (*.f64 z y)))","(*.f64 y (-.f64 x z))","(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))"]],"link":["."],"name":["Linear.Quaternion:$c/ from linear-1.19.1.3, B"],"oracle":[18.75111491369989],"outputs":[["(fma.f64 y x (neg.f64 (*.f64 z y)))"]],"time":11.240966796875,"times":[["x",2.5],["y",3.01318359375],["z",2.52197265625],["(+.f64 (-.f64 (-.f64 (*.f64 x y) (*.f64 y z)) (*.f64 y y)) (*.f64 y y))",2.453857421875]],"type":"regimes"},{"compiler":[[10,6]],"inputs":[["(fma.f64 y x (neg.f64 (*.f64 z y)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y x (neg.f64 (*.f64 z y)))","(*.f64 y (-.f64 x z))"]],"stop":[["done",1]],"time":34.909912109375,"type":"simplify"},{"time":0.01318359375,"type":"soundness"},{"compiler":[[10,6]],"remove-preprocessing":[[]],"time":7.808837890625,"type":"end"}]
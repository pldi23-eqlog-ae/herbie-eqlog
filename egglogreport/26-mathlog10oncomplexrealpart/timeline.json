[{"compiler":[[15,11]],"method":["search"],"sampling":[[12,0.9068286198889837,0.09219505602959543,0.0009763240814208984],[11,0.8770725436042994,0.12195113231427968,0.0009763240814208984],[10,0.8175603910349309,0.18146328488364816,0.0009763240814208984],[9,0.7609750656411052,0.23804861027747393,0.0009763240814208984],[8,0.6478044148534536,0.35121926106512547,0.0009763240814208984],[7,0.546341072767973,0.45268260315060616,0.0009763240814208984],[6,0.34341438859701157,0.6556092873215675,0.0009763240814208984],[5,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":43.47216796875,"type":"analyze"},{"outcomes":[["body",256,"valid",527.626953125,8256]],"time":535.171875,"type":"sample"},{"compiler":[[14,10]],"inputs":[["0","1"],["(/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 10))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) (log.f64 10))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 10))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) (log.f64 10))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))"]],"symmetry":[[]],"time":60.487060546875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 10))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 10))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))"]],"time":19.512939453125,"type":"simplify"},{"compiler":[[21,15]],"time":0.422119140625,"type":"eval"},{"alts":[["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","next",0.5748825195368841]],"compiler":[[9,7],[9,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.5748825195368841],"time":0.869873046875,"type":"prune"},{"compiler":[[21,10]],"locations":[["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))",0.5748825195368841,true]],"time":6.203125,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","im","-inf",0.4599609375],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","im","inf",0.847900390625],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","im","0",0.945068359375],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","re","-inf",0.4638671875],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","re","inf",1.121826171875],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","re","0",1.39404296875]],"time":5.35986328125,"type":"series"},{"count":[[1,58]],"inputs":[["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 0) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) (*.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (log.f64 1/10)) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) -1) (/.f64 1 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) -1) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -1/3) (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 10) -1/3)) (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im)))) (cbrt.f64 (log.f64 10))) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (log.f64 1/10))) (/.f64 (neg.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3)) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) -1) (/.f64 (neg.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3)) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (/.f64 1 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 2/3) (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 10)) (log.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 10)) (cbrt.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 1/10)) (neg.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 10))) (pow.f64 (cbrt.f64 (log.f64 10)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (log.f64 10)) -2)) (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 10)) -2) (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (cbrt.f64 (log.f64 10))) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 10)) (pow.f64 (log.f64 (hypot.f64 re im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 10) 2/3)) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (cbrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) -1) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 10) -1/3)) (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im)))) 1) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 10))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))) (pow.f64 (log.f64 (hypot.f64 re im)) 2/3)) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 10) -1/3) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 2/3) (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im))))) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 2/3) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (cbrt.f64 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im)))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 2/3)) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 10))) 1) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 10))) 1) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) -1) (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (log.f64 10))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 10)))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 3))))))"]],"rules":[["egg-rr",58]],"time":24.740966796875,"type":"rewrite"},{"count":[[82,98]],"inputs":[["(/.f64 (log.f64 im) (log.f64 10))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 10) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(/.f64 (log.f64 re) (log.f64 10))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (/.f64 (log.f64 re) (log.f64 10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (/.f64 (log.f64 re) (log.f64 10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 10) (pow.f64 re 6)))) (/.f64 (log.f64 re) (log.f64 10)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 im) (log.f64 10))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (/.f64 (log.f64 im) (log.f64 10)))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 10) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) 1/2 (fma.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 10) (pow.f64 im 6))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10)))","(/.f64 (log.f64 re) (log.f64 10))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(fma.f64 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) 1/2 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 10))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(+.f64 (/.f64 (log.f64 re) (log.f64 10)) (fma.f64 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) 1/2 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 re 6))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10)))","(/.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 re)))) (log.f64 10))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 re)))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(-.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (*.f64 -1/4 (pow.f64 im 4)) (*.f64 (log.f64 10) (pow.f64 re 4)))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(-.f64 (fma.f64 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) 1/2 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 re 6))))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 10)))","(/.f64 (log.f64 re) (log.f64 10))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (/.f64 (log.f64 re) (log.f64 10)))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (/.f64 (log.f64 re) (log.f64 10))))","(fma.f64 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) 1/2 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 10) (pow.f64 re 6)))) (/.f64 (log.f64 re) (log.f64 10)))))","(fma.f64 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) 1/2 (fma.f64 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) -1/4 (fma.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 10) (pow.f64 re 6))) (/.f64 (log.f64 re) (log.f64 10)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10)))","(/.f64 (log.f64 im) (log.f64 10))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (/.f64 (log.f64 im) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) 1/2 (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 (pow.f64 re 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 im 6))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10)))","(/.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 im)))) (log.f64 10))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (/.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 im)))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(-.f64 (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4)))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))","(-.f64 (fma.f64 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) 1/2 (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 (pow.f64 re 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 im 6))))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (log.f64 10)))"]],"time":88.01220703125,"type":"simplify"},{"compiler":[[1985,1381]],"time":24.4638671875,"type":"eval"},{"alts":[["(neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))","next",0.6276550781475362],["(*.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) -1) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 1/10)))","fresh",15.290466406295074],["(*.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) -1) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 1/10)))","fresh",15.308376416063519],["(/.f64 (*.f64 (pow.f64 (log.f64 10) -1/3) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 10) 2/3))","fresh",0.6866188965266304],["(pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))) 3)","fresh",0.7984316407376812],["(*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))","fresh",0.6856614258319564],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","done",0.5748825195368841]],"compiler":[[10,8],[19,13],[19,13],[16,14],[12,10],[16,14],[9,7],[10,8],[19,13],[19,13],[16,14],[12,10],[16,14]],"count":[[99,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[98,6],"picked":[1,1]}],"min-error":[0.0703125],"time":17.652099609375,"type":"prune"},{"compiler":[[29,14]],"locations":[["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))",0.5748825195368841,true],["(log.f64 1/10)",1.0,true]],"time":8.27685546875,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))","im","-inf",0.30810546875],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))","im","inf",0.412841796875],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))","im","0",0.43798828125],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))","re","-inf",0.2900390625],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))","re","inf",0.56982421875],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))","re","0",0.982177734375]],"time":3.14208984375,"type":"series"},{"count":[[2,89]],"inputs":[["(log.f64 1/10)","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 1/10) 0) (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 1/10) (*.f64 (log.f64 1/10) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log.f64 1/10)) (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 1/10) (*.f64 0 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 1/10) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 10)) (neg.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 1/10)) -1) (/.f64 (pow.f64 (log.f64 1/10) 2/3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 1/10) 2/3) -1) (/.f64 (cbrt.f64 (log.f64 1/10)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (log.f64 1/1000))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (log.f64 1/10) 2/3) (*.f64 0 (cbrt.f64 (log.f64 1/10))))) (+.f64 0 (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (log.f64 1/10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 1/10) 2/3) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (log.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 10) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 10) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 1/10) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 1/10)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 1/10) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (log.f64 1/10))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 0) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) (*.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (log.f64 10)) (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) -1) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) -1) (/.f64 1 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (log.f64 10))) (/.f64 (neg.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3)) (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) -1) (/.f64 (neg.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im)))) (cbrt.f64 (log.f64 1/10))) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (neg.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 1/10) -1/3) (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 1/10) -1/3)) (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 1/10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (/.f64 1 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 2/3) (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 1/10)) (log.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 1/10)) (cbrt.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 1/10) 2/3)) (pow.f64 (log.f64 1/10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 10)) (neg.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (cbrt.f64 (log.f64 1/10)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (cbrt.f64 (log.f64 1/10))) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 1/10)) -2) (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 1/10) 2/3)) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 1/10)) (pow.f64 (log.f64 (hypot.f64 re im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) -1) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (log.f64 1/10)) -2)) (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 1/10) -1/3)) (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im)))) 1) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 1/10))) (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 1/10) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (log.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 1/10))) (pow.f64 (log.f64 1/10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))) (pow.f64 (log.f64 (hypot.f64 re im)) 2/3)) (pow.f64 (log.f64 1/10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 2/3) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 2/3) (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im))))) (cbrt.f64 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 1/10) -1/3) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 1/10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 1/10) 2/3)) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im)))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 2/3)) (cbrt.f64 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 1/10))) 1) (pow.f64 (log.f64 1/10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) -1) (log.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 1/10))) 1) (pow.f64 (log.f64 1/10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (log.f64 1/10))) (neg.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (log.f64 1/10)))) (neg.f64 (pow.f64 (log.f64 1/10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 3))))))"]],"rules":[["egg-rr",58],["egg-rr",31]],"time":28.22900390625,"type":"rewrite"},{"count":[[113,129]],"inputs":[["(/.f64 (log.f64 im) (log.f64 1/10))","(+.f64 (/.f64 (log.f64 im) (log.f64 1/10)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 1/10)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2))))))","(+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 1/10) (pow.f64 im 6)))) (+.f64 (/.f64 (log.f64 im) (log.f64 1/10)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 1/10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 1/10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 1/10))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4))))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 1/10) (pow.f64 re 6)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 1/10))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 1/10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 1/10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 1/10)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 1/10) (pow.f64 re 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 1/10))))))","(/.f64 (log.f64 re) (log.f64 1/10))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (/.f64 (log.f64 re) (log.f64 1/10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4)))) (/.f64 (log.f64 re) (log.f64 1/10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 1/10) (pow.f64 re 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4)))) (/.f64 (log.f64 re) (log.f64 1/10)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 1/10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 1/10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 1/10))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 1/10))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 1/10) (pow.f64 im 6)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 1/10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 1/10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 1/10))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 1/10))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 1/10) (pow.f64 im 6)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 im) (log.f64 1/10))","(+.f64 (/.f64 (log.f64 im) (log.f64 1/10)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))","(fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 1/10)) (/.f64 (log.f64 im) (log.f64 1/10)))","(+.f64 (/.f64 (log.f64 im) (log.f64 1/10)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2))))))","(+.f64 (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 1/10)) (/.f64 (log.f64 im) (log.f64 1/10))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 1/10) (pow.f64 im 4))))","(+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 1/10) (pow.f64 im 6)))) (+.f64 (/.f64 (log.f64 im) (log.f64 1/10)) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))))","(+.f64 (fma.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 1/10) (pow.f64 im 6))) (/.f64 (log.f64 im) (log.f64 1/10))) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 re re) 1/2) (*.f64 (log.f64 1/10) (*.f64 im im)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 1/10)))","(/.f64 (log.f64 re) (log.f64 1/10))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 1/10))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 1/10) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 1/10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 1/10))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 1/10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 1/10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 1/10) (pow.f64 re 6)))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 1/10))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4)))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 1/10) (*.f64 re re))) (fma.f64 1/720 (/.f64 (*.f64 (pow.f64 im 6) 120) (*.f64 (log.f64 1/10) (pow.f64 re 6))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 1/10)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 1/10)))","(/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 1/10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 1/10))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 1/10) (*.f64 re re))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 1/10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 1/10)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 1/10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 1/10)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 1/10) (pow.f64 re 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4)))) (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 1/10))))))","(fma.f64 (/.f64 (*.f64 im im) (*.f64 (log.f64 1/10) (*.f64 re re))) 1/2 (fma.f64 (/.f64 (*.f64 (pow.f64 im 6) 120) (*.f64 (log.f64 1/10) (pow.f64 re 6))) 1/720 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 1/10))))))","(/.f64 (log.f64 re) (log.f64 1/10))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (/.f64 (log.f64 re) (log.f64 1/10)))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 1/10) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 1/10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4)))) (/.f64 (log.f64 re) (log.f64 1/10))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 1/10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 1/10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 1/10) (pow.f64 re 2)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 1/10) (pow.f64 re 6)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4)))) (/.f64 (log.f64 re) (log.f64 1/10)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 1/10) (*.f64 re re))) (fma.f64 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 1/10) (pow.f64 re 6))) 1/6 (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 1/10) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 1/10)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 1/10)))","(/.f64 (log.f64 im) (log.f64 1/10))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 1/10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))","(fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 1/10)) (/.f64 (log.f64 im) (log.f64 1/10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 1/10))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2))))))","(+.f64 (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 1/10)) (/.f64 (log.f64 im) (log.f64 1/10))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 1/10) (pow.f64 im 4))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 1/10))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 1/10) (pow.f64 im 6)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 1/10)) (fma.f64 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4))) -1/4 (fma.f64 1/720 (/.f64 (*.f64 (pow.f64 re 6) 120) (*.f64 (log.f64 1/10) (pow.f64 im 6))) (/.f64 (*.f64 (*.f64 re re) 1/2) (*.f64 (log.f64 1/10) (*.f64 im im))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 1/10)))","(/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 1/10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 1/10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))","(fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 1/10)) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 1/10))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 1/10))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2))))))","(-.f64 (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 re re) 1/2) (*.f64 (log.f64 1/10) (*.f64 im im)))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (log.f64 1/10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 1/10))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4)))) (+.f64 (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 1/10) (pow.f64 im 6)))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 1/10) (pow.f64 im 2)))))))","(-.f64 (fma.f64 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 1/10) (pow.f64 im 4))) -1/4 (fma.f64 1/720 (/.f64 (*.f64 (pow.f64 re 6) 120) (*.f64 (log.f64 1/10) (pow.f64 im 6))) (/.f64 (*.f64 (*.f64 re re) 1/2) (*.f64 (log.f64 1/10) (*.f64 im im))))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (log.f64 1/10)))"]],"time":87.779052734375,"type":"simplify"},{"compiler":[[2453,1725]],"time":31.02392578125,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))) 3)","fresh",0.7984316407376812],["(neg.f64 (/.f64 (*.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 2/3) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (cbrt.f64 (log.f64 1/10))))","fresh",49.37470629884221],["(*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))","next",0.6856614258319564],["(neg.f64 (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 1/10))))","fresh",15.290466406295074],["(neg.f64 (pow.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 3) 1/3))","fresh",49.41119008791598],["(neg.f64 (*.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 1/10)) (cbrt.f64 (log.f64 (hypot.f64 re im)))))","fresh",15.308376416063519],["(neg.f64 (*.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 2/3)))","fresh",49.35384750976844],["(/.f64 (*.f64 (pow.f64 (log.f64 10) -1/3) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 10) 2/3))","fresh",0.6866188965266304],["(neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))","done",0.6276550781475362],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","done",0.5748825195368841]],"compiler":[[12,10],[22,16],[16,14],[18,12],[14,12],[18,12],[21,15],[16,14],[10,8],[9,7],[12,10],[22,16],[16,14],[18,12],[14,12],[18,12],[21,15],[16,14]],"count":[[136,10]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[129,5],"picked":[1,1]}],"min-error":[0.046875],"time":22.5859375,"type":"prune"},{"compiler":[[47,32]],"locations":[["(*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))",0.34212875976844204,true],["(/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3))",0.42578125,true]],"time":20.983154296875,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))","im","-inf",0.240966796875],["(*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))","im","inf",0.215087890625],["(*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))","im","0",0.220947265625],["(*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))","re","-inf",0.217041015625],["(*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))","re","inf",0.245849609375],["(*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))","re","0",0.22314453125],["(/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3))","im","-inf",0.35693359375],["(/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3))","im","inf",0.47607421875],["(/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3))","im","0",0.52099609375],["(/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3))","re","-inf",0.43896484375],["(/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3))","re","inf",0.530029296875],["(/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3))","re","0",0.885986328125]],"time":4.8330078125,"type":"series"},{"count":[[2,142]],"inputs":[["(/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3))","(*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 0) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) (*.f64 0 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 (log.f64 10) 2/3))) (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) -1) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2/3)) (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) -1) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2))) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)))) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (neg.f64 (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -2/3) (log.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 2)) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 10) -2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))) (cbrt.f64 (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3)) (neg.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) -1) (neg.f64 (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3))) (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3)) -2)) (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3)) -2) (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) -1) (/.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 10) 2/3)) (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))) (/.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) -2/3))) (/.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im)))) 1) (/.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im)))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (/.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2/3)) (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 2)) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 2)) (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im))))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im)))) (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 2))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) 1) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) 1) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 (hypot.f64 re im)) -1) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 10) -2/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) 0) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)))) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) (*.f64 0 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)))) (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 10) -1/3) -1) (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) -1) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) 2) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) 1) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) 2) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) (pow.f64 (log.f64 10) 2/3)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) 2) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -1/3))) -1) (/.f64 (cbrt.f64 (pow.f64 (log.f64 10) (*.f64 2 -1/3))) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -1/3))) 1) (/.f64 (cbrt.f64 (pow.f64 (log.f64 10) (*.f64 2 -1/3))) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -1/3))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (/.f64 (cbrt.f64 (pow.f64 (log.f64 10) (*.f64 2 -1/3))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -1/3))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))) (/.f64 (cbrt.f64 (pow.f64 (log.f64 10) (*.f64 2 -1/3))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) -1) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (pow.f64 (log.f64 10) -1/3)) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 10) 2/3)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (pow.f64 (log.f64 10) -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (/.f64 (pow.f64 (log.f64 10) -1/3) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (/.f64 (pow.f64 (log.f64 10) -1/3) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 10) -1/3) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3)))) (/.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) (pow.f64 (log.f64 10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -1/3) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) 2)) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 10) -1/3) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)))) (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (pow.f64 (log.f64 10) -1/3))) (cbrt.f64 (pow.f64 (log.f64 10) (*.f64 2 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 2)) (pow.f64 (log.f64 10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 10) -1/3)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) (*.f64 2 -1/3))) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 2)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) (*.f64 2 -1/3))) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (pow.f64 (log.f64 10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 10) (*.f64 2 -1/3))) (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (pow.f64 (log.f64 10) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 10) -1/3) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))) (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)) (log.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -2/3) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 2)) (*.f64 (pow.f64 (log.f64 10) -1/3) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) -1/3)) (log.f64 (hypot.f64 re im))) (neg.f64 (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) -1) (/.f64 (pow.f64 (log.f64 10) -1/3) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))) (/.f64 (pow.f64 (log.f64 10) -1/3) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 10) -1/3) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (/.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2/3)) (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3)) -2) (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (hypot.f64 re im))) (/.f64 (pow.f64 (log.f64 10) -1/3) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) -1/3)) (log.f64 (hypot.f64 re im))) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) 2)) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) -1) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) 2))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 (pow.f64 (log.f64 10) -1/3) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) -1/3)) (log.f64 (hypot.f64 re im))) 1) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) 1) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 2)) (pow.f64 (log.f64 10) -1/3))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 (hypot.f64 re im)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -2/3)) 2)) (pow.f64 (log.f64 10) -1/3))) (cbrt.f64 (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) 1) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) -1) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) -1/3)) (log.f64 (hypot.f64 re im))) 1) (neg.f64 (pow.f64 (log.f64 10) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 10) -1/3)) (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 10) 2/3))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 10) (+.f64 2/3 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 10) -2/3))) (pow.f64 (log.f64 10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (log.f64 10) -1/3) (*.f64 (log.f64 (hypot.f64 re im)) (neg.f64 (pow.f64 (log.f64 10) -2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (neg.f64 (pow.f64 (log.f64 10) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) (+.f64 -2/3 -1/3))) 3))))))"]],"rules":[["egg-rr",82],["egg-rr",60]],"time":34.1298828125,"type":"rewrite"},{"count":[[190,224]],"inputs":[["(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 im))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 im)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 im)) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 6) (pow.f64 im 6)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 im)) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 re))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 re)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 re))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (pow.f64 re 6)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 re)))))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 re))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 re)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 re)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (pow.f64 re 6)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 re)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 re)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 re)) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 6) (pow.f64 re 6)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 re)) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 im))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 im)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 im)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (pow.f64 im 6)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 im)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 im))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 im)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 im)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4))))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 im)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (pow.f64 im 6)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))))))","(/.f64 (log.f64 im) (log.f64 10))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 10) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(/.f64 (log.f64 re) (log.f64 10))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (/.f64 (log.f64 re) (log.f64 10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (/.f64 (log.f64 re) (log.f64 10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 10) (pow.f64 re 6)))) (/.f64 (log.f64 re) (log.f64 10)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 im))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 im))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 im)))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 re re) (*.f64 im im))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 im)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 im)) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 re re) (*.f64 im im))) (fma.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 im) (/.f64 (*.f64 (*.f64 -1/4 (cbrt.f64 (pow.f64 (log.f64 10) -2))) (pow.f64 re 4)) (pow.f64 im 4))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 6) (pow.f64 im 6)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 im)) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 re re) (*.f64 im im))) (fma.f64 1/6 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (pow.f64 re 6) (pow.f64 im 6))) (fma.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 im) (/.f64 (*.f64 (*.f64 -1/4 (cbrt.f64 (pow.f64 (log.f64 10) -2))) (pow.f64 re 4)) (pow.f64 im 4)))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 re))))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 re)))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 im im) (*.f64 re re))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 re)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 re))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 im im) (*.f64 re re))) (fma.f64 -1/4 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (pow.f64 im 4) (pow.f64 re 4))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 re))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (pow.f64 re 6)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 re)))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 im im) (*.f64 re re))) (fma.f64 1/720 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 (pow.f64 im 6) 120) (pow.f64 re 6))) (fma.f64 -1/4 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (pow.f64 im 4) (pow.f64 re 4))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 re)))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 re))))","(*.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 re)))) (cbrt.f64 (pow.f64 (log.f64 10) -2)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 re)))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 im im) (*.f64 re re))) (*.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 re)))) (cbrt.f64 (pow.f64 (log.f64 10) -2))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 re)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 im im) (*.f64 re re))) (-.f64 (*.f64 -1/4 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (neg.f64 (log.f64 (neg.f64 re))))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (pow.f64 re 6)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 re)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 im im) (*.f64 re re))) (fma.f64 1/720 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 (pow.f64 im 6) 120) (pow.f64 re 6))) (-.f64 (*.f64 -1/4 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (neg.f64 (log.f64 (neg.f64 re)))))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 re))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 re)))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 im im) (*.f64 re re))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 re)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 re)) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 im im) (*.f64 re re))) (fma.f64 -1/4 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (pow.f64 im 4) (pow.f64 re 4))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 re))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 6) (pow.f64 re 6)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 re)) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 im im) (*.f64 re re))) (fma.f64 1/6 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (pow.f64 im 6) (pow.f64 re 6))) (fma.f64 -1/4 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (pow.f64 im 4) (pow.f64 re 4))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 re)))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 im))))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 im))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 im)))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 re re) (*.f64 im im))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 im)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 im)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 re re) (*.f64 im im))) (fma.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 im) (/.f64 (*.f64 (*.f64 -1/4 (cbrt.f64 (pow.f64 (log.f64 10) -2))) (pow.f64 re 4)) (pow.f64 im 4))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (pow.f64 im 6)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 1 im)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 re re) (*.f64 im im))) (fma.f64 1/720 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 (pow.f64 re 6) 120) (pow.f64 im 6))) (fma.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (log.f64 im) (/.f64 (*.f64 (*.f64 -1/4 (cbrt.f64 (pow.f64 (log.f64 10) -2))) (pow.f64 re 4)) (pow.f64 im 4)))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 im))))","(*.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 im)))) (cbrt.f64 (pow.f64 (log.f64 10) -2)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 im)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(-.f64 (*.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 re re) (*.f64 im im)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (neg.f64 (log.f64 (neg.f64 im)))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 im)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4))))))","(-.f64 (fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 re re) (*.f64 im im))) (/.f64 (*.f64 (*.f64 -1/4 (cbrt.f64 (pow.f64 (log.f64 10) -2))) (pow.f64 re 4)) (pow.f64 im 4))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (neg.f64 (log.f64 (neg.f64 im)))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (log.f64 (/.f64 -1 im)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (pow.f64 im 6)))) (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 2)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))))))","(-.f64 (fma.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 re re) (*.f64 im im))) (fma.f64 1/720 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (/.f64 (*.f64 (pow.f64 re 6) 120) (pow.f64 im 6))) (/.f64 (*.f64 (*.f64 -1/4 (cbrt.f64 (pow.f64 (log.f64 10) -2))) (pow.f64 re 4)) (pow.f64 im 4)))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2)) (neg.f64 (log.f64 (neg.f64 im)))))","(/.f64 (log.f64 im) (log.f64 10))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (/.f64 (*.f64 1/2 (*.f64 re re)) (*.f64 (log.f64 10) (*.f64 im im))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 10) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (fma.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 10) (pow.f64 im 6))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10)))","(/.f64 (log.f64 re) (log.f64 10))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 10))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(+.f64 (/.f64 (log.f64 re) (log.f64 10)) (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 re 6))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10)))","(/.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 re)))) (log.f64 10))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(-.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(-.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (*.f64 -1/4 (pow.f64 im 4)) (*.f64 (log.f64 10) (pow.f64 re 4)))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(-.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 re 6))))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 10)))","(/.f64 (log.f64 re) (log.f64 10))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (/.f64 (log.f64 re) (log.f64 10)))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (/.f64 (log.f64 re) (log.f64 10))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 10) (pow.f64 re 6)))) (/.f64 (log.f64 re) (log.f64 10)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (fma.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 10) (pow.f64 re 6))) (/.f64 (log.f64 re) (log.f64 10)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10)))","(/.f64 (log.f64 im) (log.f64 10))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (/.f64 (*.f64 1/2 (*.f64 re re)) (*.f64 (log.f64 10) (*.f64 im im))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 (pow.f64 re 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 im 6))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10)))","(/.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 im)))) (log.f64 10))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(-.f64 (/.f64 (*.f64 1/2 (*.f64 re re)) (*.f64 (log.f64 10) (*.f64 im im))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(-.f64 (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4)))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))","(-.f64 (fma.f64 1/2 (/.f64 (*.f64 re re) (*.f64 (log.f64 10) (*.f64 im im))) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 (pow.f64 re 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 im 6))))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (log.f64 10)))"]],"time":198.97607421875,"type":"simplify"},{"compiler":[[6213,4882]],"time":82.7509765625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))","next",0.31640625],["(neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))","done",0.6276550781475362],["(*.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -1/3))) 1) (/.f64 (cbrt.f64 (pow.f64 (log.f64 10) (*.f64 2 -1/3))) (pow.f64 (log.f64 10) 2/3)))","fresh",0.33041000976844204],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","done",0.5748825195368841]],"compiler":[[16,14],[10,8],[27,25],[9,7],[16,14],[27,25]],"count":[[234,4]],"kept":[{"done":[2,2],"fresh":[7,0],"new":[224,2],"picked":[1,0]}],"min-error":[0],"time":55.744873046875,"type":"prune"},{"compiler":[[47,32]],"locations":[["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))",0.3046875,true],["(*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))",0.38119125976844204,true]],"time":19.93408203125,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))","im","-inf",0.2509765625],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))","im","inf",0.60498046875],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))","im","0",0.339111328125],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))","re","-inf",0.31396484375],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))","re","inf",0.287841796875],["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))","re","0",0.397216796875],["(*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))","im","-inf",0.343017578125],["(*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))","im","inf",0.44287109375],["(*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))","im","0",0.445068359375],["(*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))","re","-inf",0.4130859375],["(*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))","re","inf",0.48583984375],["(*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))","re","0",0.76611328125]],"time":5.35107421875,"type":"series"},{"count":[[2,58]],"inputs":[["(*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))","(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 0) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (*.f64 0 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -1/3) (log.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (pow.f64 (log.f64 10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 2/3) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -1/3))) (cbrt.f64 (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2/3)) (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 10) -1/3)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2/3)) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2/3)) (log.f64 (hypot.f64 re im))) (cbrt.f64 (pow.f64 (log.f64 10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))) (pow.f64 (log.f64 (hypot.f64 re im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))) (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))) 0) (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))) (*.f64 0 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))) (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 10)) (log.f64 (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (/.f64 1 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 10) -2/3) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 10) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -1/3) (*.f64 (pow.f64 (log.f64 10) -2/3) (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) (*.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 2/3) (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 10) -2/3)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -4/3)) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (/.f64 1 (log.f64 10))) (cbrt.f64 (log.f64 (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 10) -4/3)) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))) (cbrt.f64 (pow.f64 (log.f64 10) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 2/3) (pow.f64 (log.f64 10) -2/3)) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)))) (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) 2/3) (*.f64 (pow.f64 (log.f64 10) -2/3) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))) (cbrt.f64 (pow.f64 (log.f64 10) -4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 10) -4/3)) (*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (cbrt.f64 (pow.f64 (log.f64 10) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -2/3) (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))) (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))) 2/3) (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10))) 3))))))"]],"rules":[["egg-rr",32],["egg-rr",26]],"time":29.0849609375,"type":"rewrite"},{"count":[[106,140]],"inputs":[["(*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 im))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 im)) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 im)) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2))))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 6) (pow.f64 im 6)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 im)) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 re))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 re)))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 re))))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (pow.f64 re 6)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 re)))))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 re))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 re)))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 re))))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (pow.f64 re 6)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 re)))))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 re))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 re)) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 re)) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2))))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 re)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 6) (pow.f64 re 6)))))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 im))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 im)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 im)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2))))))","(+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (pow.f64 im 6)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 im)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 im))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 im)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 im)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2))))))","(+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (pow.f64 im 6)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 im)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))))","(/.f64 (log.f64 im) (log.f64 10))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 10) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(/.f64 (log.f64 re) (log.f64 10))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (/.f64 (log.f64 re) (log.f64 10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (/.f64 (log.f64 re) (log.f64 10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 10) (pow.f64 re 6)))) (/.f64 (log.f64 re) (log.f64 10)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 im))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 im))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 im)) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(fma.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 im) (/.f64 (*.f64 (*.f64 1/2 (cbrt.f64 (/.f64 1 (log.f64 10)))) (*.f64 re re)) (*.f64 im im)))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 im)) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2))))))","(fma.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 im) (fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 re 4) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 1/2 (cbrt.f64 (/.f64 1 (log.f64 10)))) (*.f64 re re)) (*.f64 im im))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 6) (pow.f64 im 6)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 im)) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))))","(fma.f64 1/6 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 re 6) (pow.f64 im 6))) (fma.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 im) (fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 re 4) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 1/2 (cbrt.f64 (/.f64 1 (log.f64 10)))) (*.f64 re re)) (*.f64 im im)))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 re))))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 re)))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (/.f64 (*.f64 im im) re) re)) (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 re)))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 re))))))","(fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 im 4) (pow.f64 re 4))) (fma.f64 1/2 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (/.f64 (*.f64 im im) re) re)) (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 re))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (pow.f64 re 6)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 re)))))))","(fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 im 4) (pow.f64 re 4))) (fma.f64 1/2 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (/.f64 (*.f64 im im) re) re)) (fma.f64 1/720 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (*.f64 (pow.f64 im 6) 120) (pow.f64 re 6))) (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 re)))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 re))))","(neg.f64 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (neg.f64 (log.f64 (neg.f64 re)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 re)))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (/.f64 (*.f64 im im) re) re)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (neg.f64 (log.f64 (neg.f64 re))))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 re))))))","(fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 im 4) (pow.f64 re 4))) (fma.f64 1/2 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (/.f64 (*.f64 im im) re) re)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (neg.f64 (log.f64 (neg.f64 re)))))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (pow.f64 re 6)))) (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 re)))))))","(fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 im 4) (pow.f64 re 4))) (fma.f64 1/2 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (/.f64 (*.f64 im im) re) re)) (fma.f64 1/720 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (*.f64 (pow.f64 im 6) 120) (pow.f64 re 6))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (neg.f64 (log.f64 (neg.f64 re))))))))","(*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 re))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 re))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 re)) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))))","(fma.f64 1/2 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (/.f64 (*.f64 im im) re) re)) (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 re)))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 re)) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2))))))","(fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 im 4) (pow.f64 re 4))) (fma.f64 1/2 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (/.f64 (*.f64 im im) re) re)) (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 re))))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 4) (pow.f64 re 4)))) (+.f64 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 re)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 2) (pow.f64 re 2)))) (*.f64 1/6 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 im 6) (pow.f64 re 6)))))))","(fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 im 4) (pow.f64 re 4))) (fma.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 re) (fma.f64 1/2 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (/.f64 (*.f64 im im) re) re)) (*.f64 1/6 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 im 6) (pow.f64 re 6)))))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 im))))","(*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 im))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 im)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(fma.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 im) (/.f64 (*.f64 (*.f64 1/2 (cbrt.f64 (/.f64 1 (log.f64 10)))) (*.f64 re re)) (*.f64 im im)))","(+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 im)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2))))))","(fma.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 im) (fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 re 4) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 1/2 (cbrt.f64 (/.f64 1 (log.f64 10)))) (*.f64 re re)) (*.f64 im im))))","(+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (pow.f64 im 6)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 1 im)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))))","(fma.f64 1/720 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (*.f64 (pow.f64 re 6) 120) (pow.f64 im 6))) (fma.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (log.f64 im) (fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 re 4) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 1/2 (cbrt.f64 (/.f64 1 (log.f64 10)))) (*.f64 re re)) (*.f64 im im)))))","(*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 im))))","(neg.f64 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (neg.f64 (log.f64 (neg.f64 im)))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 im)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))","(-.f64 (/.f64 (*.f64 (*.f64 1/2 (cbrt.f64 (/.f64 1 (log.f64 10)))) (*.f64 re re)) (*.f64 im im)) (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (neg.f64 (log.f64 (neg.f64 im)))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 im)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2))))))","(-.f64 (fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 re 4) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 1/2 (cbrt.f64 (/.f64 1 (log.f64 10)))) (*.f64 re re)) (*.f64 im im))) (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (neg.f64 (log.f64 (neg.f64 im)))))","(+.f64 (*.f64 1/720 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (pow.f64 im 6)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (log.f64 (/.f64 -1 im)))) (+.f64 (*.f64 -1/4 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 4) (pow.f64 im 4)))) (*.f64 1/2 (*.f64 (pow.f64 (/.f64 1 (log.f64 10)) 1/3) (/.f64 (pow.f64 re 2) (pow.f64 im 2)))))))","(fma.f64 1/720 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (*.f64 (pow.f64 re 6) 120) (pow.f64 im 6))) (-.f64 (fma.f64 -1/4 (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (/.f64 (pow.f64 re 4) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 1/2 (cbrt.f64 (/.f64 1 (log.f64 10)))) (*.f64 re re)) (*.f64 im im))) (*.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (neg.f64 (log.f64 (neg.f64 im))))))","(/.f64 (log.f64 im) (log.f64 10))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (/.f64 (*.f64 1/2 (*.f64 re re)) (*.f64 (log.f64 10) (*.f64 im im))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 10)) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 10) (pow.f64 im 6)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 10)) (fma.f64 1/6 (/.f64 (pow.f64 re 6) (*.f64 (log.f64 10) (pow.f64 im 6))) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10)))","(/.f64 (log.f64 re) (log.f64 10))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 10))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(+.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 10))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 re 6)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10)))","(/.f64 (neg.f64 (log.f64 (neg.f64 re))) (neg.f64 (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))))","(-.f64 (/.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))))))","(-.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (*.f64 -1/4 (pow.f64 im 4)) (*.f64 (log.f64 10) (pow.f64 re 4)))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 re)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 90 (pow.f64 im 6)) (*.f64 30 (pow.f64 im 6))) (*.f64 (log.f64 10) (pow.f64 re 6)))))))","(-.f64 (fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (*.f64 (*.f64 (pow.f64 im 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 re 6))))) (/.f64 (neg.f64 (log.f64 (neg.f64 re))) (log.f64 10)))","(/.f64 (log.f64 re) (log.f64 10))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (/.f64 (log.f64 re) (log.f64 10)))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (/.f64 (log.f64 re) (log.f64 10)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (/.f64 (log.f64 re) (log.f64 10))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (/.f64 (log.f64 re) (log.f64 10))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) (*.f64 (log.f64 10) (pow.f64 re 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4)))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 10) (pow.f64 re 6)))) (/.f64 (log.f64 re) (log.f64 10)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) (*.f64 (log.f64 10) (*.f64 re re))) (fma.f64 -1/4 (/.f64 (pow.f64 im 4) (*.f64 (log.f64 10) (pow.f64 re 4))) (fma.f64 1/6 (/.f64 (pow.f64 im 6) (*.f64 (log.f64 10) (pow.f64 re 6))) (/.f64 (log.f64 re) (log.f64 10)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10)))","(/.f64 (log.f64 im) (log.f64 10))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (/.f64 (*.f64 1/2 (*.f64 re re)) (*.f64 (log.f64 10) (*.f64 im im))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 10)) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4)))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))","(+.f64 (/.f64 (log.f64 im) (log.f64 10)) (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 10)) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 (pow.f64 re 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 im 6))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10)))","(/.f64 (neg.f64 (log.f64 (neg.f64 im))) (neg.f64 (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))))","(-.f64 (/.f64 (*.f64 1/2 (*.f64 re re)) (*.f64 (log.f64 10) (*.f64 im im))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))))))","(-.f64 (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 10)) (/.f64 (*.f64 -1/4 (pow.f64 re 4)) (*.f64 (log.f64 10) (pow.f64 im 4)))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (log.f64 10)))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 im)) (log.f64 10))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) (*.f64 (log.f64 10) (pow.f64 im 2)))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4)))) (*.f64 1/720 (/.f64 (+.f64 (*.f64 30 (pow.f64 re 6)) (*.f64 90 (pow.f64 re 6))) (*.f64 (log.f64 10) (pow.f64 im 6)))))))","(-.f64 (fma.f64 1/2 (/.f64 (/.f64 (*.f64 re re) (*.f64 im im)) (log.f64 10)) (fma.f64 -1/4 (/.f64 (pow.f64 re 4) (*.f64 (log.f64 10) (pow.f64 im 4))) (/.f64 (*.f64 (*.f64 (pow.f64 re 6) 120) 1/720) (*.f64 (log.f64 10) (pow.f64 im 6))))) (/.f64 (neg.f64 (log.f64 (neg.f64 im))) (log.f64 10)))"]],"time":189.074951171875,"type":"simplify"},{"compiler":[[3991,3123]],"time":51.52392578125,"type":"eval"},{"alts":[["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))","done",0.31640625],["(neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))","done",0.6276550781475362],["(*.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -1/3))) 1) (/.f64 (cbrt.f64 (pow.f64 (log.f64 10) (*.f64 2 -1/3))) (pow.f64 (log.f64 10) 2/3)))","fresh",0.33041000976844204],["(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","done",0.5748825195368841]],"compiler":[[16,14],[10,8],[27,25],[9,7]],"count":[[144,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[140,0],"picked":[1,1]}],"min-error":[0],"time":22.88818359375,"type":"prune"},{"accuracy":[0.31640625],"baseline":[0.31640625],"branch":[["re",0.31640625,1],["im",0.31640625,1],["(/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 10))",0.31640625,1],["(log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))))",0.31640625,1],["(sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))",0.31640625,1],["(+.f64 (*.f64 re re) (*.f64 im im))",0.31640625,1],["(*.f64 re re)",0.31640625,1],["(*.f64 im im)",0.31640625,1]],"compiler":[[3,2],[3,2],[14,10],[11,7],[10,6],[9,5],[5,3],[5,3],[223,137]],"count":[[15,1]],"inputs":[["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))","(*.f64 (/.f64 (*.f64 (log.f64 (hypot.f64 re im)) (cbrt.f64 (pow.f64 (log.f64 10) -1/3))) 1) (/.f64 (cbrt.f64 (pow.f64 (log.f64 10) (*.f64 2 -1/3))) (pow.f64 (log.f64 10) 2/3)))","(neg.f64 (/.f64 (*.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 2/3) (cbrt.f64 (log.f64 (hypot.f64 re im)))) (cbrt.f64 (log.f64 1/10))))","(neg.f64 (*.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 1/10))))","(neg.f64 (pow.f64 (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 3) 1/3))","(neg.f64 (*.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 1/10)) (cbrt.f64 (log.f64 (hypot.f64 re im)))))","(neg.f64 (*.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10))) (pow.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)) 2/3)))","(neg.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 1/10)))","(*.f64 (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) -1) (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) (log.f64 1/10)))","(*.f64 (/.f64 (cbrt.f64 (log.f64 (hypot.f64 re im))) -1) (/.f64 (pow.f64 (log.f64 (hypot.f64 re im)) 2/3) (log.f64 1/10)))","(/.f64 (*.f64 (pow.f64 (log.f64 10) -1/3) (log.f64 (hypot.f64 re im))) (pow.f64 (log.f64 10) 2/3))","(pow.f64 (cbrt.f64 (/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))) 3)","(*.f64 (/.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) 2/3)) (pow.f64 (log.f64 10) -1/3))","(/.f64 (log.f64 (hypot.f64 re im)) (log.f64 10))","(/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 10))"]],"link":["."],"name":["math.log10 on complex, real part"],"oracle":[64.0],"outputs":[["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))"]],"time":42.5419921875,"times":[["re",5.39599609375],["im",5.405029296875],["(/.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) (log.f64 10))",4.64697265625],["(log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))))",4.4638671875],["(sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))",4.60791015625],["(+.f64 (*.f64 re re) (*.f64 im im))",5.511962890625],["(*.f64 re re)",3.9599609375],["(*.f64 im im)",3.93115234375]],"type":"regimes"},{"compiler":[[16,14]],"inputs":[["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (log.f64 (hypot.f64 re im)) (pow.f64 (log.f64 10) -1/3)) (pow.f64 (log.f64 10) -2/3))","(*.f64 (log.f64 (hypot.f64 re im)) (/.f64 1 (log.f64 10)))"]],"stop":[["fuel",1]],"time":22.553955078125,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[16,14]],"remove-preprocessing":[[]],"time":11.860107421875,"type":"end"}]
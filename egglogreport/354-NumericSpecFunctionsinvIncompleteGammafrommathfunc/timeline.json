[{"compiler":[[17,14]],"method":["search"],"sampling":[[12,0.4331704219803214,0.04585362575016916,0.5209759522695094],[11,0.42146311327815056,0.06048776162788272,0.5180491250939667],[10,0.39804849587380886,0.08975603338330984,0.5121954707428813],[9,0.37463387846946716,0.11707308702170849,0.5082930345088243],[8,0.32780464366078377,0.17170719429850578,0.5004881620407104],[7,0.2809754088521004,0.21853642910718918,0.5004881620407104],[6,0.18731693923473358,0.31219489872455597,0.5004881620407104],[5,0.12487795948982239,0.37463387846946716,0.5004881620407104],[4,0.0,0.49951183795928955,0.5004881620407104],[3,0.0,0.49951183795928955,0.5004881620407104],[2,0.0,0.49951183795928955,0.5004881620407104],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":17.89404296875,"type":"analyze"},{"outcomes":[["body",256,"invalid",8.77734375,180],["body",256,"valid",402.88671875,8256]],"time":419.4560546875,"type":"sample"},{"compiler":[[16,13]],"inputs":[["0","1"],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 y 9))) (/.f64 x (*.f64 3 (sqrt.f64 y))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(+.f64 (+.f64 1 (/.f64 -1/9 x)) (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 y 9))) (/.f64 x (*.f64 3 (sqrt.f64 y))))","(+.f64 (+.f64 1 (/.f64 -1/9 y)) (/.f64 (*.f64 x -1/3) (sqrt.f64 y)))"]],"symmetry":[[]],"time":67.5029296875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))"]],"time":22.781005859375,"type":"simplify"},{"compiler":[[27,20]],"time":1.5009765625,"type":"eval"},{"alts":[["(fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))","fresh",0.26916754138909577],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","next",0.18359375]],"compiler":[[13,10],[16,13],[13,10],[16,13]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0859375],"time":1.4931640625,"type":"prune"},{"compiler":[[48,33]],"locations":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))",0.015625,true],["(/.f64 y (*.f64 3 (sqrt.f64 x)))",0.2421875,true],["(/.f64 1 (*.f64 x 9))",0.27734375,true],["(*.f64 3 (sqrt.f64 x))",0.29296875,true]],"time":11.1298828125,"type":"localize"},{"count":[[4,39]],"series":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","y","-inf",0.203125],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","y","inf",0.22119140625],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","y","0",0.291015625],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","x","-inf",0.339111328125],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","x","inf",0.31787109375],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))","x","0",0.302001953125],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","x","-inf",0.638916015625],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","x","inf",0.333984375],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","x","0",0.427001953125],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","y","-inf",0.2939453125],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","y","inf",0.77001953125],["(/.f64 y (*.f64 3 (sqrt.f64 x)))","y","0",0.77685546875],["(/.f64 1 (*.f64 x 9))","x","-inf",0.26513671875],["(/.f64 1 (*.f64 x 9))","x","inf",0.43408203125],["(/.f64 1 (*.f64 x 9))","x","0",0.301025390625],["(*.f64 3 (sqrt.f64 x))","x","-inf",0.492919921875],["(*.f64 3 (sqrt.f64 x))","x","inf",0.362060546875],["(*.f64 3 (sqrt.f64 x))","x","0",0.593994140625]],"time":7.634033203125,"type":"series"},{"count":[[4,248]],"inputs":[["(*.f64 3 (sqrt.f64 x))","(/.f64 1 (*.f64 x 9))","(/.f64 y (*.f64 3 (sqrt.f64 x)))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) 0) (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) 1/2) (*.f64 (sqrt.f64 (*.f64 x 9)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 x 9)) (*.f64 (sqrt.f64 (*.f64 x 9)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 x 9))) (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 x 9))) (*.f64 1/2 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 x 9)) (*.f64 0 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (sqrt.f64 (*.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (sqrt.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 x) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (sqrt.f64 x))) (cbrt.f64 (*.f64 -9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -3 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) 1) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) -1) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 3)) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 3))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 3))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))) (*.f64 1 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))) (*.f64 -1 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 3)) (sqrt.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 3)) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 3) (neg.f64 (sqrt.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 3) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 (sqrt.f64 (sqrt.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (cbrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 9)) (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 x 9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3/2) 27) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x 9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x 9))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3/2) 27))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (*.f64 (pow.f64 x 3/2) 27) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/9 x) 0) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/9 x) 1/2) (*.f64 (/.f64 1/9 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/9 x) (*.f64 (/.f64 1/9 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1/9 x)) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 1/9 x)) (*.f64 1/2 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/9 x) (*.f64 0 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/9 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 -1/3 (sqrt.f64 x)) (/.f64 -1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 x)) (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/9 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/3 -1/3) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 1/3 (sqrt.f64 x))) 2) (*.f64 (pow.f64 (cbrt.f64 (/.f64 1/3 (sqrt.f64 x))) 2) (pow.f64 (cbrt.f64 (/.f64 1/3 (sqrt.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 -1/3 (sqrt.f64 x))) (cbrt.f64 (/.f64 -1/3 (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (*.f64 -1/3 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 1/3 (sqrt.f64 x))) 2) (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 3 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 x) (cbrt.f64 9)) (/.f64 1 (cbrt.f64 81)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2)) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/9 x)) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/9 (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) -1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/9 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 x) -9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/9 x)) (cbrt.f64 (*.f64 81 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/9 x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (*.f64 3 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1 x) (cbrt.f64 9)) (cbrt.f64 81))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 x) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 -9 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 x 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (*.f64 x 9) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -1/3) (*.f64 9 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -1/2) (sqrt.f64 (*.f64 81 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/3 (sqrt.f64 x)) (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2)) (cbrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1/9 x)) (neg.f64 (cbrt.f64 (*.f64 81 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/9 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 1 (*.f64 3 x))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 1 x) (cbrt.f64 9))) (neg.f64 (cbrt.f64 81)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 9) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x 9)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 9)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x 9) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/9 x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))) 0) (/.f64 y (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))) 1/2) (*.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))) (*.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 y (sqrt.f64 (*.f64 x 9)))) (/.f64 y (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 y (sqrt.f64 (*.f64 x 9)))) (*.f64 1/2 (/.f64 y (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))) (*.f64 0 (/.f64 y (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 y (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -3 (sqrt.f64 x))) (/.f64 y (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 -1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y 27)) (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 y) (sqrt.f64 x)) (cbrt.f64 (/.f64 (*.f64 y y) 27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 (sqrt.f64 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y 1/3) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/3 (sqrt.f64 x))) (*.f64 y (cbrt.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/2) (*.f64 y 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 y (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y 1/3) (cbrt.f64 (sqrt.f64 x))) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y 1/3) (sqrt.f64 (sqrt.f64 x))) (/.f64 1 (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y -1/3) (neg.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 x 9))) (cbrt.f64 (/.f64 y (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y 1/3) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (*.f64 -3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y 1/3) (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y 1/3) (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y -1/3) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (sqrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y 1/3) (cbrt.f64 (sqrt.f64 x)))) (neg.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y 1/3) (sqrt.f64 (sqrt.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (*.f64 -9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y (sqrt.f64 x))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (*.f64 x 9)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (*.f64 x 9)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (*.f64 x 9)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 -1/9 x)) (/.f64 y (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (*.f64 -3 (sqrt.f64 x))) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 y (*.f64 -3 (sqrt.f64 x))) 1) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/9 x) (+.f64 1 (/.f64 y (*.f64 -3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/9 x) (-.f64 1 (/.f64 y (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y -1)) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 0) (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 1/2) (*.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) (*.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y -1)) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) (*.f64 1/2 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) (*.f64 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (*.f64 -3 (sqrt.f64 x))) (*.f64 (+.f64 (/.f64 1/9 x) -1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y -1) -1) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y -1)) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (*.f64 -3 (sqrt.f64 x))) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 -3 (sqrt.f64 x)))) (/.f64 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (neg.f64 y)) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 -3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (*.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) (+.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))) (/.f64 (pow.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) 3) (+.f64 1 (*.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) (+.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x)) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 x))) (/.f64 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 y 1/3)) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 (*.f64 x 9))) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 (*.f64 x 9)))) (/.f64 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) y) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 (/.f64 1/9 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 y (*.f64 -3 (sqrt.f64 x))) (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1))) (/.f64 (pow.f64 (/.f64 1/9 x) 3) (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 y (*.f64 -3 (sqrt.f64 x))) 0) (+.f64 (/.f64 1/9 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (-.f64 (/.f64 (pow.f64 (/.f64 1/9 x) 3) (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (/.f64 y (*.f64 -3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y (*.f64 -3 (sqrt.f64 x))) (+.f64 (/.f64 1/9 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (+.f64 (/.f64 (pow.f64 (/.f64 1/9 x) 3) (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (/.f64 y (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -1/9 x)) (/.f64 y (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 y (*.f64 -3 (sqrt.f64 x))) 1) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y -1)) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (/.f64 y (sqrt.f64 (*.f64 x 9)))) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 (/.f64 1/9 x) -1)))) (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 (/.f64 1/9 x) -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 (*.f64 x 9)) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (neg.f64 y))) (/.f64 1 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (*.f64 -3 (sqrt.f64 x)) (neg.f64 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (neg.f64 y)))) (/.f64 1 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 -3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x) (neg.f64 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 y 1/3)))) (/.f64 1 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 1 (/.f64 -1/9 x)) 2)) (+.f64 (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 x 9))) (cbrt.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 -1/9 x)) (*.f64 y 1/3)) (sqrt.f64 x))))) (-.f64 (cbrt.f64 (+.f64 1 (/.f64 -1/9 x))) (cbrt.f64 (/.f64 y (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 2)) (cbrt.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 (/.f64 1/9 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 (/.f64 1/9 x) -1))) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 (/.f64 1/9 x) -1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) 3)) (/.f64 1 (+.f64 1 (*.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) (+.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x) (neg.f64 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 y 1/3)))) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (*.f64 -3 (sqrt.f64 x)) (neg.f64 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (neg.f64 y)))) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 (*.f64 x 9)) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (neg.f64 y))) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (*.f64 y 1/3) (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (neg.f64 (*.f64 (sqrt.f64 x) (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)))))) (*.f64 (sqrt.f64 x) (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (neg.f64 y) (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (neg.f64 (*.f64 (*.f64 -3 (sqrt.f64 x)) (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)))))) (*.f64 (*.f64 -3 (sqrt.f64 x)) (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 (*.f64 -3 (sqrt.f64 x)) (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3))))) (*.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 (*.f64 x 9)) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (neg.f64 y)))) (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) 3))) (neg.f64 (+.f64 1 (*.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) (+.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (*.f64 -3 (sqrt.f64 x)) (neg.f64 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (neg.f64 y))))) (neg.f64 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 -3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x) (neg.f64 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (*.f64 y 1/3))))) (neg.f64 (*.f64 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) 3)) (+.f64 1 (*.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x)) (+.f64 1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x)))) 3)) (+.f64 1 (-.f64 (*.f64 (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x)))) (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x))))) (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 (/.f64 1/9 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 (/.f64 -1/9 x))) (cbrt.f64 (pow.f64 (+.f64 1 (/.f64 -1/9 x)) 2)) (/.f64 y (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 1 (/.f64 -1/9 x)) (/.f64 y (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (+.f64 (/.f64 -1/9 x) (/.f64 y (*.f64 -3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y (*.f64 -3 (sqrt.f64 x)))) (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 x 9))) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y (sqrt.f64 (*.f64 x 9)))) (neg.f64 (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 x 9)))) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y (*.f64 -3 (sqrt.f64 x))) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (/.f64 -1/9 x)) 1 (/.f64 y (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (/.f64 1 (fma.f64 (/.f64 1/9 x) (+.f64 1 (/.f64 1/9 x)) 1)) (/.f64 y (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 1 (/.f64 -1/9 x)) 2)) (cbrt.f64 (+.f64 1 (/.f64 -1/9 x))) (/.f64 y (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 (/.f64 1/9 x) -1) (/.f64 y (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 y (sqrt.f64 (*.f64 x 9))) (+.f64 1 (/.f64 -1/9 x)))))))"]],"rules":[["egg-rr",92],["egg-rr",48],["egg-rr",59],["egg-rr",49]],"time":45.85107421875,"type":"rewrite"},{"count":[[287,258]],"inputs":[["(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(/.f64 -1/9 x)","1","1","(-.f64 1 (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(/.f64 -1/9 x)","1","1","(-.f64 1 (*.f64 1/9 (/.f64 1 x)))","(/.f64 (+.f64 x -1/9) x)","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 y (neg.f64 (sqrt.f64 (/.f64 1/9 x))) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 y (neg.f64 (sqrt.f64 (/.f64 1/9 x))) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 y (neg.f64 (sqrt.f64 (/.f64 1/9 x))) (/.f64 -1/9 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(neg.f64 (*.f64 (sqrt.f64 (/.f64 1/9 x)) y))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 y (neg.f64 (sqrt.f64 (/.f64 1/9 x))) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 y (neg.f64 (sqrt.f64 (/.f64 1/9 x))) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 y (neg.f64 (sqrt.f64 (/.f64 1/9 x))) (/.f64 -1/9 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(neg.f64 (*.f64 (sqrt.f64 (/.f64 1/9 x)) y))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 y (neg.f64 (sqrt.f64 (/.f64 1/9 x))) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 y (neg.f64 (sqrt.f64 (/.f64 1/9 x))) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 y (neg.f64 (sqrt.f64 (/.f64 1/9 x))) (/.f64 -1/9 x)))"]],"time":146.294921875,"type":"simplify"},{"compiler":[[5020,3683]],"time":63.505126953125,"type":"eval"},{"alts":[["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 (/.f64 y (sqrt.f64 x)) 1/3))","fresh",0.197597509768442],["(-.f64 (-.f64 1 (/.f64 (/.f64 1 (*.f64 3 x)) 3)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.21484375],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","next",0.18359375],["(+.f64 1 (fma.f64 y (neg.f64 (sqrt.f64 (/.f64 1/9 x))) (/.f64 -1/9 x)))","fresh",0.23828125],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (*.f64 x 9))))","fresh",0.20769501953688402],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 (sqrt.f64 3) (sqrt.f64 (*.f64 3 x)))))","fresh",0.24904252930532603]],"compiler":[[16,13],[18,15],[16,13],[14,11],[22,18],[19,16],[16,13],[18,15],[16,13],[14,11],[22,18],[19,16]],"count":[[260,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[258,6],"picked":[1,0]}],"min-error":[0.00390625],"time":98.410888671875,"type":"prune"},{"compiler":[[49,34]],"locations":[["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))",0.015625,true],["(/.f64 y (*.f64 3 (sqrt.f64 x)))",0.2421875,false],["(/.f64 (/.f64 -1 x) -9)",0.2578125,true],["(*.f64 3 (sqrt.f64 x))",0.29296875,false]],"time":11.302001953125,"type":"localize"},{"count":[[2,27]],"series":[["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","y","-inf",0.196044921875],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","y","inf",0.169189453125],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","y","0",0.174072265625],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","x","-inf",0.37890625],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","x","inf",0.192138671875],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","x","0",0.22705078125],["(/.f64 (/.f64 -1 x) -9)","x","-inf",0.147216796875],["(/.f64 (/.f64 -1 x) -9)","x","inf",0.1591796875],["(/.f64 (/.f64 -1 x) -9)","x","0",0.19189453125]],"time":1.97509765625,"type":"series"},{"count":[[2,154]],"inputs":[["(/.f64 (/.f64 -1 x) -9)","(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/9 x) 1/2) (*.f64 (/.f64 1/9 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/9 x) (*.f64 (/.f64 1/9 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/9 x) 0) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 1/9 x)) (*.f64 1/2 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/9 x) (*.f64 0 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1/9 x)) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/9 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -9) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 9) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 (sqrt.f64 x)) (/.f64 -1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 1/3 (sqrt.f64 x))) 2) (cbrt.f64 (pow.f64 (/.f64 -1/9 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 (sqrt.f64 x)) (/.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -1/3)) (*.f64 (cbrt.f64 (pow.f64 x -2)) -1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 x)) (cbrt.f64 (pow.f64 (/.f64 -1/9 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/9) (/.f64 (/.f64 1 x) (cbrt.f64 81)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) -1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/9 (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 -1/9 x) 2)) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/9) (/.f64 (/.f64 -1 x) (cbrt.f64 81)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/9 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/9 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/9 x)) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 -1/9 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (*.f64 -1/3 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/3 -1/3) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 -1/3 (sqrt.f64 x))) (cbrt.f64 (/.f64 -1/3 (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 -1/9 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 1/3 (sqrt.f64 x))) 2) (*.f64 (pow.f64 (cbrt.f64 (/.f64 1/3 (sqrt.f64 x))) 2) (pow.f64 (cbrt.f64 (/.f64 1/3 (sqrt.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 -1 x) (cbrt.f64 -1/9)) (cbrt.f64 (/.f64 1 81)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 x) (cbrt.f64 -1/9)) (cbrt.f64 81))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/9 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 x) -9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 x) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 -9 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/9 x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 9 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (*.f64 9 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 x) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 9 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -1/2) (*.f64 9 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -1/3) (*.f64 9 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 x -1/3)) (*.f64 -9 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 x -1/2)) (*.f64 -9 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/3 (sqrt.f64 x)) (sqrt.f64 (*.f64 9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 -1 x) (cbrt.f64 -1/9))) (neg.f64 (cbrt.f64 81)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 9 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 9 x)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/3 (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1/3 (sqrt.f64 x)) (/.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1/3 (sqrt.f64 x)) (/.f64 -1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/9 x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 1/2) (*.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) (*.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 0) (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) (*.f64 1/2 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) (*.f64 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 -1/9 x)) (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y -1/3) (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 y -1/3) (sqrt.f64 x)) 1) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/9 x) (+.f64 1 (/.f64 (*.f64 y -1/3) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/9 x) (-.f64 1 (/.f64 (*.f64 y 1/3) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) -1)) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) -1)) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y -1/3) (sqrt.f64 x)) (*.f64 (+.f64 -1 (/.f64 1/9 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) -1) -1) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) -1)) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 x))) (/.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 y 1/3)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (*.f64 -3 (sqrt.f64 x))) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 -3 (sqrt.f64 x)))) (/.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (neg.f64 y)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 -3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (*.f64 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)) (+.f64 1 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)))))) (/.f64 (pow.f64 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)) 3) (+.f64 1 (*.f64 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)) (+.f64 1 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 (*.f64 9 x))) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 (*.f64 9 x)))) (/.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) y) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 (*.f64 9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -1/9 x)) (/.f64 (*.f64 y 1/3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (*.f64 y -1/3) (sqrt.f64 x)) 0) (+.f64 -1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (*.f64 y -1/3) (sqrt.f64 x)) (/.f64 1 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))))) (/.f64 (pow.f64 (/.f64 1/9 x) 3) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))) (-.f64 (/.f64 (pow.f64 (/.f64 1/9 x) 3) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))) (/.f64 (*.f64 y -1/3) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))) (+.f64 (/.f64 (pow.f64 (/.f64 1/9 x) 3) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))) (/.f64 (*.f64 y 1/3) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (*.f64 y -1/3) (sqrt.f64 x)) 1) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (/.f64 (*.f64 y 1/3) (sqrt.f64 x))) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y -1/3) (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) -1)) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x))))) (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (*.f64 -3 (sqrt.f64 x)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) y)) (/.f64 1 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 -3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 (*.f64 9 x)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (neg.f64 y))) (/.f64 1 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 (*.f64 9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x) (neg.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 y 1/3)))) (/.f64 1 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 1 (/.f64 -1/9 x)) 2)) (+.f64 (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 9 x))) (cbrt.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 -1/9 x)) (*.f64 y 1/3)) (sqrt.f64 x))))) (-.f64 (cbrt.f64 (+.f64 1 (/.f64 -1/9 x))) (cbrt.f64 (/.f64 (*.f64 y 1/3) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 2)) (cbrt.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x)))) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)) 3)) (/.f64 1 (+.f64 1 (*.f64 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)) (+.f64 1 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x) (neg.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 y 1/3)))) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 (*.f64 9 x)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (neg.f64 y))) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 (*.f64 9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (*.f64 -3 (sqrt.f64 x)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) y)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 (*.f64 -3 (sqrt.f64 x)) (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3))))) (*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (*.f64 y 1/3) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (neg.f64 (*.f64 (sqrt.f64 x) (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)))))) (*.f64 (sqrt.f64 x) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (neg.f64 y) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3))))) (*.f64 (*.f64 -3 (sqrt.f64 x)) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x))) 3)) (+.f64 1 (-.f64 (*.f64 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x))) (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))) (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)) 3)) (+.f64 1 (*.f64 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)) (+.f64 1 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (*.f64 -3 (sqrt.f64 x)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) y))) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 (*.f64 9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 (*.f64 9 x)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (neg.f64 y)))) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 -3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x) (neg.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 y 1/3))))) (neg.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)) 3))) (neg.f64 (+.f64 1 (*.f64 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)) (+.f64 1 (fma.f64 (/.f64 1/3 (sqrt.f64 x)) y (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 y (/.f64 1/3 (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 y -1/3) (sqrt.f64 x))) (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 9 x))) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 y 1/3) (sqrt.f64 x))) (neg.f64 (cbrt.f64 (/.f64 (*.f64 y y) (*.f64 9 x)))) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 y 1/3) (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 (/.f64 -1/9 x))) (cbrt.f64 (pow.f64 (+.f64 1 (/.f64 -1/9 x)) 2)) (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 y -1/3) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 1 (/.f64 -1/9 x)) (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 -1 (/.f64 1/9 x)) (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 1 (/.f64 -1/9 x)) 2)) (cbrt.f64 (+.f64 1 (/.f64 -1/9 x))) (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (/.f64 -1/9 x)) 1 (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (/.f64 1 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))) (/.f64 (*.f64 y -1/3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 y -1/3) (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x))))))))"]],"rules":[["egg-rr",92],["egg-rr",62]],"time":36.48486328125,"type":"rewrite"},{"count":[[181,161]],"inputs":[["(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 -1/9 x)","1","1","(-.f64 1 (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 1/9 x)","(/.f64 -1/9 x)","1","1","(-.f64 1 (*.f64 1/9 (/.f64 1 x)))","(/.f64 (+.f64 -1/9 x) x)","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (*.f64 -1/3 y) (sqrt.f64 (/.f64 1 x)) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (*.f64 -1/3 y) (sqrt.f64 (/.f64 1 x)) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (*.f64 -1/3 y) (sqrt.f64 (/.f64 1 x)) (/.f64 -1/9 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (*.f64 -1/3 y) (sqrt.f64 (/.f64 1 x)) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (*.f64 -1/3 y) (sqrt.f64 (/.f64 1 x)) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (*.f64 -1/3 y) (sqrt.f64 (/.f64 1 x)) (/.f64 -1/9 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (*.f64 -1/3 y) (sqrt.f64 (/.f64 1 x)) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (*.f64 -1/3 y) (sqrt.f64 (/.f64 1 x)) (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (*.f64 -1/3 y) (sqrt.f64 (/.f64 1 x)) (/.f64 -1/9 x)))"]],"time":110.594970703125,"type":"simplify"},{"compiler":[[5057,3694]],"time":69.7841796875,"type":"eval"},{"alts":[["(-.f64 (-.f64 1 (/.f64 (/.f64 1 (*.f64 3 x)) 3)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.21484375],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x))))","fresh",0.197597509768442],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 (sqrt.f64 3) (sqrt.f64 (*.f64 3 x)))))","fresh",0.24904252930532603],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (*.f64 x 9))))","fresh",0.20769501953688402],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","next",0.193691259768442],["(-.f64 (-.f64 1 (/.f64 1/9 x)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.21875]],"compiler":[[18,15],[22,18],[19,16],[22,18],[16,13],[14,11],[18,15],[22,18],[19,16],[22,18],[16,13],[14,11]],"count":[[266,6]],"kept":[{"done":[0,0],"fresh":[5,2],"new":[260,4],"picked":[1,0]}],"min-error":[0.00390625],"time":114.7158203125,"type":"prune"},{"compiler":[[49,31]],"locations":[["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))",0.015625,true],["(/.f64 y (sqrt.f64 x))",0.2421875,true],["(/.f64 (/.f64 -1 x) -9)",0.2578125,false],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))",0.36328125,true]],"time":10.7060546875,"type":"localize"},{"count":[[3,39]],"series":[["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","y","-inf",0.18212890625],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","y","inf",0.166015625],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","y","0",0.18017578125],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","x","-inf",0.19482421875],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","x","inf",0.18603515625],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","x","0",0.200927734375],["(/.f64 y (sqrt.f64 x))","x","-inf",0.343017578125],["(/.f64 y (sqrt.f64 x))","x","inf",0.273193359375],["(/.f64 y (sqrt.f64 x))","x","0",0.26318359375],["(/.f64 y (sqrt.f64 x))","y","-inf",0.27197265625],["(/.f64 y (sqrt.f64 x))","y","inf",0.1630859375],["(/.f64 y (sqrt.f64 x))","y","0",0.153076171875],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","x","-inf",0.261962890625],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","x","inf",0.223876953125],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","x","0",0.22607421875],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","y","-inf",0.173828125],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","y","inf",0.174072265625],["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","y","0",0.2490234375]],"time":4.10107421875,"type":"series"},{"count":[[3,170]],"inputs":[["(*.f64 1/3 (/.f64 y (sqrt.f64 x)))","(/.f64 y (sqrt.f64 x))","(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 0) (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 1/2) (*.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (*.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) (*.f64 1/2 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (*.f64 0 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 (sqrt.f64 x))) (pow.f64 (sqrt.f64 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/9) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (*.f64 (sqrt.f64 1/3) (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 1/9) (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (sqrt.f64 x))) (*.f64 (cbrt.f64 (/.f64 (*.f64 y y) x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/9) x)) (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (sqrt.f64 x)) (cbrt.f64 1/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (sqrt.f64 x)) (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (cbrt.f64 (/.f64 y (sqrt.f64 x)))) (cbrt.f64 (/.f64 (*.f64 y y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 (cbrt.f64 (sqrt.f64 x))) (/.f64 y (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 (sqrt.f64 (sqrt.f64 x))) (/.f64 y (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 y) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (pow.f64 x -1/2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 y) (sqrt.f64 x)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) (neg.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/9) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 (neg.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/3 y) (neg.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/3 (cbrt.f64 (/.f64 y (sqrt.f64 x)))) (neg.f64 (cbrt.f64 (/.f64 (*.f64 y y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/3 y) (cbrt.f64 (sqrt.f64 x))) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 (sqrt.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/3 y) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 y) (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 y) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (/.f64 (sqrt.f64 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (/.f64 (neg.f64 (sqrt.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (sqrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 1/3 y) (cbrt.f64 (sqrt.f64 x)))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (sqrt.f64 x)) 0) (/.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (sqrt.f64 x)) 1/2) (*.f64 (/.f64 y (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (sqrt.f64 x)) (*.f64 (/.f64 y (sqrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 y (sqrt.f64 x))) (/.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 y (sqrt.f64 x))) (*.f64 1/2 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (sqrt.f64 x)) (*.f64 0 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (neg.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sqrt.f64 x))) (/.f64 (neg.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (sqrt.f64 x))) (cbrt.f64 (/.f64 (*.f64 y y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y y) x)) (cbrt.f64 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (neg.f64 (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 y) (sqrt.f64 (sqrt.f64 x))) (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/2) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -1/2)) (/.f64 y (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 x) -1/2) (/.f64 y (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (neg.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (sqrt.f64 x))) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 (sqrt.f64 x))) (pow.f64 (sqrt.f64 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y (cbrt.f64 (sqrt.f64 x)))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y (sqrt.f64 (sqrt.f64 x)))) (neg.f64 (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sqrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sqrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (sqrt.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) 0) (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) 1/2) (*.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) (*.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x)))) (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x)))) (*.f64 1/2 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) (*.f64 0 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 -1/9 x)) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/9 x) (+.f64 1 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/9 x) (-.f64 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) -1)) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) -1)) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) (*.f64 (+.f64 -1 (/.f64 1/9 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) -1) -1) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) -1)) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (*.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)) (+.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)))))) (/.f64 (pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)) 3) (+.f64 1 (*.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)) (+.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 x))) (/.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 1/3 y)) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -1/9 x)) (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 0) (+.f64 -1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) 1) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) (/.f64 1 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))))) (/.f64 (pow.f64 (/.f64 1/9 x) 3) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))) (-.f64 (/.f64 (pow.f64 (/.f64 1/9 x) 3) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) -1)) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))) (+.f64 (/.f64 (pow.f64 (/.f64 1/9 x) 3) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))) (/.f64 (*.f64 1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x)))) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) 2)) (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x))))) (pow.f64 (cbrt.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x) (neg.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 1/3 y)))) (/.f64 1 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 1 (/.f64 -1/9 x)) 2)) (+.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/9) x)) (cbrt.f64 (/.f64 (*.f64 (+.f64 1 (/.f64 -1/9 x)) (*.f64 1/3 y)) (sqrt.f64 x))))) (-.f64 (cbrt.f64 (+.f64 1 (/.f64 -1/9 x))) (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x)))) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)) 3)) (/.f64 1 (+.f64 1 (*.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)) (+.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x) (neg.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 1/3 y)))) (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (*.f64 1/3 y) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (neg.f64 (*.f64 (sqrt.f64 x) (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)))))) (*.f64 (sqrt.f64 x) (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)) 3)) (+.f64 1 (*.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)) (+.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)) 3))) (neg.f64 (+.f64 1 (*.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)) (+.f64 1 (fma.f64 (/.f64 y (sqrt.f64 x)) 1/3 (/.f64 1/9 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (sqrt.f64 x) (neg.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (*.f64 1/3 y))))) (neg.f64 (*.f64 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x))) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) 3)) (+.f64 1 (-.f64 (*.f64 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))) (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 1/3 (/.f64 y (sqrt.f64 x)) (+.f64 -1 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 (/.f64 -1/9 x))) (cbrt.f64 (pow.f64 (+.f64 1 (/.f64 -1/9 x)) 2)) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 -1 (/.f64 1/9 x)) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 1 (/.f64 -1/9 x)) 2)) (cbrt.f64 (+.f64 1 (/.f64 -1/9 x))) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/3 y) (pow.f64 x -1/2) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (neg.f64 y) (sqrt.f64 x)) 1/3 (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 1/3 y) (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/3 (cbrt.f64 (/.f64 y (sqrt.f64 x)))) (cbrt.f64 (/.f64 (*.f64 y y) x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))) (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/9) x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 1/3 y) (sqrt.f64 x))) (neg.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/9) x))) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/3 (/.f64 y (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (/.f64 (neg.f64 y) (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 1 (/.f64 -1/9 x)) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (+.f64 (/.f64 -1/9 x) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (/.f64 -1/9 x)) 1 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 (/.f64 -1/9 x) 3)) (/.f64 1 (+.f64 1 (fma.f64 (pow.f64 x -2) 1/81 (/.f64 1/9 x)))) (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 -1/3 y) (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 (/.f64 y (sqrt.f64 x)) -1/3 (+.f64 1 (/.f64 -1/9 x))))))))"]],"rules":[["egg-rr",86],["egg-rr",36],["egg-rr",48]],"time":39.52197265625,"type":"rewrite"},{"count":[[209,181]],"inputs":[["(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(/.f64 -1/9 x)","1","1","(-.f64 1 (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(*.f64 (sqrt.f64 (/.f64 1/9 x)) y)","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(*.f64 y (sqrt.f64 (/.f64 1 x)))","(/.f64 -1/9 x)","1","1","(-.f64 1 (*.f64 1/9 (/.f64 1 x)))","(/.f64 (+.f64 -1/9 x) x)","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 1/9 x))) y (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 1/9 x))) y (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 1/9 x))) y (/.f64 -1/9 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(neg.f64 (*.f64 (sqrt.f64 (/.f64 1/9 x)) y))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 1/9 x))) y (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 1/9 x))) y (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 1/9 x))) y (/.f64 -1/9 x)))","(*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))","(neg.f64 (*.f64 (sqrt.f64 (/.f64 1/9 x)) y))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 1/9 x))) y (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 1/9 x))) y (/.f64 -1/9 x)))","(-.f64 (+.f64 1 (*.f64 -1/3 (*.f64 y (sqrt.f64 (/.f64 1 x))))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 1 (fma.f64 (neg.f64 (sqrt.f64 (/.f64 1/9 x))) y (/.f64 -1/9 x)))"]],"time":142.720947265625,"type":"simplify"},{"compiler":[[4429,2943]],"time":53.200927734375,"type":"eval"},{"alts":[["(-.f64 (-.f64 1 (/.f64 (/.f64 1 (*.f64 3 x)) 3)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.21484375],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x))))","next",0.197597509768442],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (*.f64 x 9))))","fresh",0.20769501953688402],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","done",0.193691259768442],["(-.f64 (-.f64 1 (/.f64 1/9 x)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.21875],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 y (*.f64 (pow.f64 x -1/2) 1/3)))","fresh",0.22951127930532605]],"compiler":[[18,15],[22,18],[22,18],[16,13],[14,11],[17,14],[18,15],[22,18],[22,18],[14,11],[17,14]],"count":[[249,6]],"kept":[{"done":[0,0],"fresh":[5,4],"new":[243,1],"picked":[1,1]}],"min-error":[0.00390625],"time":94.697021484375,"type":"prune"},{"compiler":[[82,63]],"locations":[["(/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))",0.24609375,true],["(/.f64 (/.f64 -1 x) -9)",0.2578125,false],["(*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x)))",0.3359375,true],["(/.f64 1/9 x)",0.3828125,true]],"time":21.170166015625,"type":"localize"},{"count":[[3,32]],"series":[["(/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))","x","-inf",5.777099609375],["(/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))","x","inf",4.718017578125],["(/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))","x","0",7.461181640625],["(/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))","y","-inf",0.330810546875],["(/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))","y","inf",0.41015625],["(/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))","y","0",7.916015625],["(*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x)))","x","-inf",28.22802734375],["(*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x)))","x","inf",0.472900390625],["(*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x)))","x","0",0.7900390625],["(*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x)))","y","-inf",0.35107421875],["(*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x)))","y","inf",0.671142578125],["(*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x)))","y","0",3.4580078125],["(/.f64 1/9 x)","x","-inf",0.14306640625],["(/.f64 1/9 x)","x","inf",0.156982421875],["(/.f64 1/9 x)","x","0",0.197021484375]],"time":61.333984375,"type":"series"},{"count":[[3,218]],"inputs":[["(/.f64 1/9 x)","(*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x)))","(/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/9 x) 1/2) (*.f64 (/.f64 1/9 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/9 x) 0) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/9 x) (*.f64 (/.f64 1/9 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 1/9 x)) (*.f64 1/2 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 1/9 x)) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/9 x) (*.f64 0 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 x 1/9)) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/9 x) (/.f64 0 (/.f64 x 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 x)) (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (/.f64 -1/9 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 1/9 x))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2/3)) (pow.f64 (/.f64 1/9 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/9 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/9 (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/9) (/.f64 (sqrt.f64 1/9) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/9) (cbrt.f64 x)) (/.f64 (sqrt.f64 1/9) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 x)) (pow.f64 (/.f64 1/9 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1/9 x) 2/3) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/3) (/.f64 1/9 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/9) x) (sqrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) -1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 (pow.f64 x 2/3)) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/9) (pow.f64 x 2/3)) (/.f64 (sqrt.f64 1/9) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/9 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2/3)) (pow.f64 (/.f64 1/9 x) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/729 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 1/81) x) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/9)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2/3)) (pow.f64 (/.f64 1/9 x) 2/3))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1/729 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 x -1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 1/9)) (/.f64 (neg.f64 x) (sqrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (/.f64 x 1/9) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 x) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 1/9)) (/.f64 x (neg.f64 (sqrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 1/9)) (neg.f64 (/.f64 x (sqrt.f64 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 x 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/9 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/9 (pow.f64 x 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/729 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 1/9) (/.f64 x (sqrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/9 x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 x 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 1/9 x) 2/3) (cbrt.f64 -1/9)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) 1/9) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 (cbrt.f64 1/81) (cbrt.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) (cbrt.f64 1/81)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 1/9) (cbrt.f64 x)) (sqrt.f64 1/9)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/9) (/.f64 (sqrt.f64 1/9) (pow.f64 x 2/3))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 1/81) (cbrt.f64 x)) (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/81) (cbrt.f64 (/.f64 1/9 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/729 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1/9 (pow.f64 x 2/3)) 1) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/9) (pow.f64 (/.f64 1/9 x) 2/3)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1/729 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/9 -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1/9 (cbrt.f64 x)) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1/9 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 1/9 (pow.f64 x 2/3)) 1) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/3 (/.f64 (/.f64 x 1/9) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (/.f64 x 1/9) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 1/729 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 1/9 (pow.f64 x 2/3))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x 1/9) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/9 x) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/9 x) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/9 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1/9 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/9 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 x) -1/9))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/9 x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) 1/2) (*.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) 0) (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) (*.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9)))))) (*.f64 1/2 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9)))))) (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) (*.f64 0 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9)))))) (pow.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (cbrt.f64 1/9)) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/9) (neg.f64 y)) (/.f64 1 (neg.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 1/9 x))) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2/3)) y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (*.f64 (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3) (cbrt.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) 2/3) (cbrt.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (cbrt.f64 (/.f64 1/9 x)))) (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 1/9 x) (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))) (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (/.f64 (/.f64 1/9 x) (cbrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (pow.f64 (*.f64 x 9) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (cbrt.f64 (/.f64 -1/9 x)) y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2/3)) (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (cbrt.f64 (/.f64 1/9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1/2)) (*.f64 y (cbrt.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9)))) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3) (cbrt.f64 (*.f64 (/.f64 1/9 x) (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2/3)) y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (cbrt.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 -1/9 x)) y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3) (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 1/9 x) (cbrt.f64 (*.f64 x 9)))) (/.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 1/9)) (/.f64 1 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (/.f64 1 (cbrt.f64 (cbrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 -1/9 x)) y) (/.f64 -1 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (cbrt.f64 1/9)) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/9) (neg.f64 y)) (neg.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 y (cbrt.f64 1/9))) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (cbrt.f64 1/9) (neg.f64 y))) (neg.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/9)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 1/9 x) 2/3)) y) (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (cbrt.f64 1/9)) 1) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 1/9) (neg.f64 y)) 1) (neg.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 x 9))))) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 1/9) (neg.f64 y))) (neg.f64 (neg.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (cbrt.f64 1/9)) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1/9 x)) y) (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 -1/9)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) 2/3) (cbrt.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) -1) (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (*.f64 y (cbrt.f64 1/9)) (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (cbrt.f64 1/9)) (cbrt.f64 (pow.f64 (*.f64 x 9) -1/2))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/9) (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (*.f64 (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3) (cbrt.f64 (/.f64 1/9 x)))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (*.f64 (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3) (cbrt.f64 (/.f64 1/9 x)))) (neg.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (cbrt.f64 (*.f64 x 9))))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x)))) (pow.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) 2/3)) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 -1/9 x)) y) 1) (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) 1) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y (cbrt.f64 1/9)) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 1) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (cbrt.f64 (*.f64 x 9)))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) -1) (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 -1/9 x)) y) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (neg.f64 (cbrt.f64 (cbrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 -1/9 x)) y) 1) (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (cbrt.f64 1/9)) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (cbrt.f64 1/9)) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 1) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) 1) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y (cbrt.f64 1/9)) (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))) (neg.f64 (cbrt.f64 (cbrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9)))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9)))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (pow.f64 y 3) (/.f64 1/9 x)) (sqrt.f64 (*.f64 x 9))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (cbrt.f64 (/.f64 (/.f64 1/9 x) (sqrt.f64 (*.f64 x 9))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (cbrt.f64 (/.f64 -1/9 x)) y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (/.f64 (*.f64 (cbrt.f64 (/.f64 -1/9 x)) y) (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (neg.f64 y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 (/.f64 1/9 x)) (/.f64 (neg.f64 y) (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 y (cbrt.f64 (/.f64 1/9 x))) (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (*.f64 (pow.f64 y 3) (/.f64 1/9 x)) (sqrt.f64 (*.f64 x 9))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 1/2) (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 0) (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (*.f64 1/2 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (*.f64 0 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (neg.f64 y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (/.f64 (neg.f64 y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (neg.f64 y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3) (cbrt.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (/.f64 (pow.f64 y 2/3) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 -1 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (/.f64 (pow.f64 y 2/3) (cbrt.f64 (cbrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (cbrt.f64 (pow.f64 (*.f64 x 9) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) -1/2)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) -1/3) (/.f64 y (cbrt.f64 (cbrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y 2/3) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y 2/3) (cbrt.f64 (cbrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (*.f64 x 9)))) (pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (/.f64 1 (cbrt.f64 (cbrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 x 9))))) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) -1/3) y) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3) (cbrt.f64 y)) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3) (cbrt.f64 (neg.f64 y))) (neg.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (*.f64 x 9)))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3)) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (/.f64 (pow.f64 y 2/3) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (/.f64 (pow.f64 y 2/3) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))) (neg.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) 1) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y -1) (neg.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 y) (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (neg.f64 (cbrt.f64 (cbrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) 1) (cbrt.f64 (cbrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))) (neg.f64 (cbrt.f64 (cbrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 y 3) (sqrt.f64 (*.f64 x 9))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (neg.f64 y) (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) (sqrt.f64 (*.f64 x 9))))))))"]],"rules":[["egg-rr",53],["egg-rr",84],["egg-rr",81]],"time":38.428955078125,"type":"rewrite"},{"count":[[250,222]],"inputs":[["(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (/.f64 (*.f64 (cbrt.f64 1/9) y) (cbrt.f64 3)) (sqrt.f64 (/.f64 1 x)))","(*.f64 (*.f64 y (cbrt.f64 (*.f64 1/9 1/3))) (sqrt.f64 (/.f64 1 x)))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))","(*.f64 (pow.f64 (/.f64 1 x) 1/6) (/.f64 y (cbrt.f64 3)))","(*.f64 y (cbrt.f64 (*.f64 1/3 (sqrt.f64 (/.f64 1 x)))))"]],"time":106.590087890625,"type":"simplify"},{"compiler":[[7165,5755]],"time":94.1669921875,"type":"eval"},{"alts":[["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 1/729 x)) (pow.f64 (cbrt.f64 x) -2)))))","fresh",0.20607377930532603],["(-.f64 (-.f64 1 (/.f64 (/.f64 1 (*.f64 3 x)) 3)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.21484375],["(-.f64 (-.f64 1 (pow.f64 (*.f64 9 x) -1)) (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x))))","fresh",0.201503759768442],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","done",0.193691259768442],["(-.f64 (-.f64 1 (/.f64 1/9 x)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","fresh",0.21875],["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 y (*.f64 (pow.f64 x -1/2) 1/3)))","fresh",0.22951127930532605]],"compiler":[[28,23],[18,15],[22,18],[16,13],[14,11],[17,14]],"count":[[290,6]],"kept":[{"done":[1,1],"fresh":[4,3],"new":[284,2],"picked":[1,0]}],"min-error":[0.00390625],"time":115.908935546875,"type":"prune"},{"accuracy":[0.18359375],"baseline":[0.18359375],"branch":[["x",0.18359375,1],["y",0.18359375,1],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))",0.18359375,1]],"compiler":[[3,2],[3,2],[16,13],[244,187]],"count":[[15,1]],"inputs":[["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 1/729 x)) (pow.f64 (cbrt.f64 x) -2)))))","(-.f64 (-.f64 1 (pow.f64 (*.f64 9 x) -1)) (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x))))","(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 y (*.f64 (pow.f64 x -1/2) 1/3)))","(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (/.f64 1/9 x))))","(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 (sqrt.f64 3) (sqrt.f64 (*.f64 3 x)))))","(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (*.f64 1/3 (/.f64 y (sqrt.f64 x))))","(-.f64 (-.f64 1 (/.f64 1/9 x)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (*.f64 (/.f64 y (sqrt.f64 x)) 1/3))","(-.f64 (-.f64 1 (/.f64 (/.f64 1 (*.f64 3 x)) 3)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(+.f64 1 (fma.f64 y (neg.f64 (sqrt.f64 (/.f64 1/9 x))) (/.f64 -1/9 x)))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 (/.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (*.f64 x 9))))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 (sqrt.f64 3) (sqrt.f64 (*.f64 3 x)))))","(fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))","(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"link":["."],"name":["Numeric.SpecFunctions:invIncompleteGamma from math-functions-0.1.5.2, D"],"oracle":[0.5742951172213043],"outputs":[["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"time":23.195068359375,"times":[["x",5.886962890625],["y",6.679931640625],["(-.f64 (-.f64 1 (/.f64 1 (*.f64 x 9))) (/.f64 y (*.f64 3 (sqrt.f64 x))))",5.72900390625]],"type":"regimes"},{"compiler":[[16,13]],"inputs":[["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (-.f64 1 (/.f64 (/.f64 -1 x) -9)) (/.f64 y (*.f64 3 (sqrt.f64 x))))","(fma.f64 y (/.f64 -1/3 (sqrt.f64 x)) (+.f64 1 (/.f64 -1/9 x)))"]],"stop":[["fuel",1]],"time":27.431884765625,"type":"simplify"},{"time":0.006103515625,"type":"soundness"},{"compiler":[[16,13]],"remove-preprocessing":[[]],"time":11.416015625,"type":"end"}]
[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.76806640625,"type":"analyze"},{"outcomes":[["body",256,"valid",257.77197265625,8256]],"time":265.31103515625,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0","1"],["(/.f64 (+.f64 x y) 10)","(/.f64 (+.f64 y x) 10)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (+.f64 x y) 10)","(*.f64 (+.f64 x y) 1/10)","(/.f64 (+.f64 y x) 10)","(*.f64 (+.f64 x y) 1/10)"]],"symmetry":[[]],"time":57.11083984375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (+.f64 x y) 10)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x y) 10)","(*.f64 (+.f64 x y) 1/10)"]],"time":17.322998046875,"type":"simplify"},{"compiler":[[12,7]],"time":0.31201171875,"type":"eval"},{"alts":[["(*.f64 (+.f64 x y) 1/10)","fresh",0.34375],["(/.f64 (+.f64 x y) 10)","next",0.01171875]],"compiler":[[7,5],[7,5],[7,5],[7,5]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0078125],"time":1.135986328125,"type":"prune"},{"compiler":[[13,6]],"locations":[["(/.f64 (+.f64 x y) 10)",0.01171875,true]],"time":2.836181640625,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (+.f64 x y) 10)","y","-inf",0.265869140625],["(/.f64 (+.f64 x y) 10)","y","inf",0.300048828125],["(/.f64 (+.f64 x y) 10)","y","0",0.222900390625],["(/.f64 (+.f64 x y) 10)","x","-inf",0.30908203125],["(/.f64 (+.f64 x y) 10)","x","inf",0.35107421875],["(/.f64 (+.f64 x y) 10)","x","0",0.39599609375]],"time":1.925048828125,"type":"series"},{"count":[[1,85]],"inputs":[["(/.f64 (+.f64 x y) 10)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 x y) 1/10) 0) (*.f64 (+.f64 x y) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) 1/10) (*.f64 (*.f64 (+.f64 x y) 1/10) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/10 y) (*.f64 1/10 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/10 x) (*.f64 1/10 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 x y) 1/10)) (*.f64 (+.f64 x y) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) 1/10) (*.f64 0 (*.f64 (+.f64 x y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y 1/10) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/10) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 x y) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -10) (*.f64 (+.f64 x y) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 x y) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) -1/10) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) -1) (/.f64 (cbrt.f64 (+.f64 x y)) -10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) (neg.f64 (sqrt.f64 10))) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) -1) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2))) 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 -10)) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/10) (/.f64 (+.f64 x y) (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/10) (/.f64 (+.f64 x y) (neg.f64 (cbrt.f64 100))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (sqrt.f64 10)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (neg.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (sqrt.f64 1/10)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) 1) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) -10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (cbrt.f64 10)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (neg.f64 (cbrt.f64 100))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) 1/10)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 1/10) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/10 (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 1/10) 2)) (cbrt.f64 (*.f64 (+.f64 x y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/10) (*.f64 (+.f64 x y) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) -1/10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x y) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (sqrt.f64 1/10)) (sqrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/10 (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 100)) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (sqrt.f64 1/10)) (*.f64 (cbrt.f64 (+.f64 x y)) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) 1/10) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (cbrt.f64 1/10)) (cbrt.f64 (*.f64 1/10 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) -1) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) -10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) 10) (cbrt.f64 (pow.f64 (+.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 100)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) (neg.f64 (sqrt.f64 10))) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (neg.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) -1) -1/10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))) (neg.f64 (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/10 1/10)) (*.f64 (+.f64 x y) (cbrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/10) (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 100)) (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (/.f64 (cbrt.f64 (+.f64 x y)) 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (cbrt.f64 10)) (/.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (neg.f64 (sqrt.f64 10))) (/.f64 (cbrt.f64 (+.f64 x y)) (neg.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 1/10) 2)) (cbrt.f64 (+.f64 x y))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 1/10) 2)) (cbrt.f64 (neg.f64 (+.f64 x y)))) (cbrt.f64 -10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 1/10) 2))) (cbrt.f64 -10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) (neg.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (sqrt.f64 1/10)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (cbrt.f64 1/10)) (cbrt.f64 (cbrt.f64 100))) (pow.f64 (cbrt.f64 (cbrt.f64 100)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) (sqrt.f64 1/10))) (neg.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (cbrt.f64 1/10)) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (sqrt.f64 1/10)) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) 10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) -10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) 1/10)) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/10) (+.f64 x y)) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (sqrt.f64 1/10)) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 100)) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) (sqrt.f64 1/10)) 1) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) (cbrt.f64 1/10)) 1) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) -1) -10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))) (neg.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 10)) (neg.f64 (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (sqrt.f64 1/10)) 1) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (cbrt.f64 1/10)) 1) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) (cbrt.f64 1/10))) (neg.f64 (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) 1/10) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) 1/10)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) 1/10)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) 1/10)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x y) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 x y) -1/10) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 1/10) 3))))))"]],"rules":[["egg-rr",85]],"time":21.8798828125,"type":"rewrite"},{"count":[[109,88]],"inputs":[["(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))"]],"time":76.429931640625,"type":"simplify"},{"compiler":[[975,602]],"time":13.884033203125,"type":"eval"},{"alts":[["(/.f64 (*.f64 (+.f64 x y) (sqrt.f64 1/10)) (sqrt.f64 10))","fresh",0.31640625],["(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))","next",0.296875],["(*.f64 (+.f64 x y) 1/10)","fresh",0.34375]],"compiler":[[11,9],[13,11],[7,5],[11,9],[13,11],[7,5]],"count":[[90,3]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[88,2],"picked":[1,0]}],"min-error":[0],"time":16.328125,"type":"prune"},{"compiler":[[37,27]],"locations":[["(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))",0.2421875,true],["(/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10)))",0.34765625,true]],"time":9.781005859375,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))","y","-inf",0.339111328125],["(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))","y","inf",0.366943359375],["(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))","y","0",0.381103515625],["(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))","x","-inf",0.3701171875],["(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))","x","inf",0.3740234375],["(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))","x","0",0.470947265625],["(/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10)))","y","-inf",0.366943359375],["(/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10)))","y","inf",0.635986328125],["(/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10)))","y","0",0.38720703125],["(/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10)))","x","-inf",0.383056640625],["(/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10)))","x","inf",0.3759765625],["(/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10)))","x","0",0.638916015625]],"time":5.287841796875,"type":"series"},{"count":[[2,149]],"inputs":[["(/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10)))","(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (pow.f64 10 -1/2)) x) (*.f64 (neg.f64 (pow.f64 10 -1/2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (pow.f64 10 -1/2)) y) (*.f64 (neg.f64 (pow.f64 10 -1/2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) 0) (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) 1/2) (*.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) (*.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (neg.f64 (pow.f64 10 -1/2))) (*.f64 y (neg.f64 (pow.f64 10 -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (neg.f64 (pow.f64 10 -1/2))) (*.f64 x (neg.f64 (pow.f64 10 -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))) (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))) (*.f64 1/2 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) (*.f64 0 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 x y) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (sqrt.f64 10)) (/.f64 (+.f64 x y) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))) (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10)) (cbrt.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (neg.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (neg.f64 (pow.f64 10 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 10 -1/2)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 10 -1/2))) (/.f64 (+.f64 x y) (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 x y) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (sqrt.f64 10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (sqrt.f64 10)) (cbrt.f64 (neg.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 10)) (cbrt.f64 (neg.f64 (pow.f64 10 -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (neg.f64 (sqrt.f64 10))) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (/.f64 1 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (pow.f64 10 -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 10 -1/2) (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (sqrt.f64 10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (neg.f64 (cbrt.f64 (sqrt.f64 10)))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (sqrt.f64 10)))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) -1) (*.f64 (cbrt.f64 10) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (sqrt.f64 10)))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (pow.f64 10 -1/2))) (+.f64 x y)) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10)) (cbrt.f64 (neg.f64 (+.f64 x y)))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10)) (cbrt.f64 (+.f64 x y))) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 10)) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10))) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) 1) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (cbrt.f64 10))) (cbrt.f64 (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) 1) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (sqrt.f64 (sqrt.f64 10))) (neg.f64 (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (sqrt.f64 10))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 (sqrt.f64 10)))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 (sqrt.f64 10))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (neg.f64 (sqrt.f64 (sqrt.f64 10)))) (neg.f64 (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 10)) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (neg.f64 (pow.f64 (+.f64 x y) 3)) (sqrt.f64 1000)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x y) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (neg.f64 (pow.f64 (+.f64 x y) 3)) (sqrt.f64 1000)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)) 0) (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)) 1/2) (*.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)) (*.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) 0) (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10))) (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10))) (*.f64 1/2 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)) (*.f64 0 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))) (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10))) (cbrt.f64 (*.f64 1/10 (/.f64 (pow.f64 (+.f64 x y) 2) 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/10 (/.f64 (pow.f64 (+.f64 x y) 2) 10))) (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 1/10)) (cbrt.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)))) (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10)) (neg.f64 (sqrt.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/10) (/.f64 (+.f64 x y) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/10) (cbrt.f64 (sqrt.f64 10))) (/.f64 (+.f64 x y) (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) (neg.f64 (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (neg.f64 (pow.f64 10 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (sqrt.f64 10)) (sqrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 (sqrt.f64 1/10) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 1/10))) (/.f64 (*.f64 (cbrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 10 -1/2)) (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/10) (sqrt.f64 10)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 10)) (neg.f64 (cbrt.f64 (sqrt.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10)) (*.f64 (neg.f64 (sqrt.f64 1/10)) (cbrt.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10)) (neg.f64 (sqrt.f64 1/10))) (cbrt.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 10)) (/.f64 (sqrt.f64 1/10) (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 10)))) (cbrt.f64 (*.f64 1/10 (/.f64 (pow.f64 (+.f64 x y) 2) 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 1/10))) (*.f64 (sqrt.f64 (sqrt.f64 1/10)) (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 10))) (neg.f64 (cbrt.f64 (*.f64 1/10 (/.f64 (pow.f64 (+.f64 x y) 2) 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (pow.f64 10 -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 1/10)) (neg.f64 (*.f64 (sqrt.f64 (sqrt.f64 1/10)) (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/10)) (neg.f64 (/.f64 (*.f64 (cbrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/10) (cbrt.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)))) (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (/.f64 1 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) (neg.f64 (cbrt.f64 (sqrt.f64 1/10)))) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/10) (*.f64 (/.f64 (neg.f64 (+.f64 x y)) (sqrt.f64 10)) (neg.f64 (cbrt.f64 (sqrt.f64 1/10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (neg.f64 (cbrt.f64 (sqrt.f64 10)))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) -1) (*.f64 (cbrt.f64 10) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (cbrt.f64 (sqrt.f64 10)))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (cbrt.f64 (sqrt.f64 10)))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (neg.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 1/10) (cbrt.f64 (sqrt.f64 10))) (+.f64 x y)) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/10 (/.f64 (pow.f64 (+.f64 x y) 2) 10))) (cbrt.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))))) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (sqrt.f64 10)))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (sqrt.f64 10))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))) (cbrt.f64 (*.f64 1/10 (/.f64 (pow.f64 (+.f64 x y) 2) 10)))) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (cbrt.f64 10))) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) 1) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10)) (neg.f64 (sqrt.f64 1/10)))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) 10)) (neg.f64 (sqrt.f64 1/10)))) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) (neg.f64 (sqrt.f64 1/10))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) (neg.f64 (cbrt.f64 (sqrt.f64 10)))) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (cbrt.f64 10))) (cbrt.f64 (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (cbrt.f64 (sqrt.f64 10))) 1) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 (sqrt.f64 10))) (neg.f64 (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (cbrt.f64 10)) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (cbrt.f64 (sqrt.f64 10))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (neg.f64 (sqrt.f64 (sqrt.f64 10)))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 (sqrt.f64 10))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (neg.f64 (sqrt.f64 (sqrt.f64 10)))) (neg.f64 (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (cbrt.f64 10)) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 x y) (sqrt.f64 10)) (neg.f64 (sqrt.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y))) (sqrt.f64 10)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 (*.f64 (sqrt.f64 1/10) (+.f64 x y)) (sqrt.f64 10)))))))"]],"rules":[["egg-rr",87],["egg-rr",62]],"time":32.315185546875,"type":"rewrite"},{"count":[[197,161]],"inputs":[["(*.f64 -1 (/.f64 y (sqrt.f64 10)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 -1 (/.f64 x (sqrt.f64 10)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 -1 (/.f64 x (sqrt.f64 10)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 -1 (/.f64 x (sqrt.f64 10)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 -1 (/.f64 y (sqrt.f64 10)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 -1 (/.f64 y (sqrt.f64 10)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 y (sqrt.f64 10)))","(*.f64 (neg.f64 y) (sqrt.f64 1/10))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(*.f64 -1 (/.f64 x (sqrt.f64 10)))","(*.f64 (neg.f64 x) (sqrt.f64 1/10))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(*.f64 -1 (/.f64 x (sqrt.f64 10)))","(*.f64 (neg.f64 x) (sqrt.f64 1/10))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(*.f64 -1 (/.f64 x (sqrt.f64 10)))","(*.f64 (neg.f64 x) (sqrt.f64 1/10))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(*.f64 -1 (/.f64 y (sqrt.f64 10)))","(*.f64 (neg.f64 y) (sqrt.f64 1/10))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(*.f64 -1 (/.f64 y (sqrt.f64 10)))","(*.f64 (neg.f64 y) (sqrt.f64 1/10))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 y (sqrt.f64 10))) (*.f64 -1 (/.f64 x (sqrt.f64 10))))","(*.f64 (sqrt.f64 1/10) (neg.f64 (+.f64 x y)))","(/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))","(*.f64 y 1/10)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(*.f64 x 1/10)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(*.f64 x 1/10)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(*.f64 x 1/10)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))","(*.f64 y 1/10)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))","(*.f64 y 1/10)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(*.f64 1/10 (+.f64 x y))"]],"time":162.540771484375,"type":"simplify"},{"compiler":[[2465,1805]],"time":33.774169921875,"type":"eval"},{"alts":[["(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","next",0.3046875],["(*.f64 (+.f64 x y) 1/10)","fresh",0.34375],["(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))","done",0.296875]],"compiler":[[17,15],[7,5],[13,11],[17,15],[7,5]],"count":[[164,3]],"kept":[{"done":[0,0],"fresh":[2,1],"new":[161,1],"picked":[1,1]}],"min-error":[0],"time":38.31982421875,"type":"prune"},{"compiler":[[47,39]],"locations":[["(*.f64 y (sqrt.f64 1/10))",0.1875,true],["(*.f64 (sqrt.f64 1/10) x)",0.21875,true],["(/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))",0.4375,true],["(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))",0.453125,true]],"time":12.712158203125,"type":"localize"},{"count":[[4,0]],"series":[["(*.f64 y (sqrt.f64 1/10))","y","-inf",0.22412109375],["(*.f64 y (sqrt.f64 1/10))","y","inf",0.233154296875],["(*.f64 y (sqrt.f64 1/10))","y","0",0.16015625],["(*.f64 (sqrt.f64 1/10) x)","x","-inf",0.23583984375],["(*.f64 (sqrt.f64 1/10) x)","x","inf",0.302978515625],["(*.f64 (sqrt.f64 1/10) x)","x","0",0.143798828125],["(/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))","y","-inf",0.243896484375],["(/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))","y","inf",0.366943359375],["(/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))","y","0",0.44287109375],["(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","x","-inf",0.31396484375],["(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","x","inf",0.419921875],["(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","x","0",1.364013671875]],"time":4.571044921875,"type":"series"},{"count":[[4,240]],"inputs":[["(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))","(*.f64 (sqrt.f64 1/10) x)","(*.f64 y (sqrt.f64 1/10))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10))) 0) (*.f64 x (sqrt.f64 (/.f64 1/10 10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10))) (*.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10))) 1/2) (*.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))) (*.f64 x (sqrt.f64 (/.f64 1/10 10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10))) (*.f64 0 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))) (*.f64 1/2 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sqrt.f64 10))) (neg.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (/.f64 1 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))) (cbrt.f64 (/.f64 (*.f64 (*.f64 x x) 1/10) 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 x x) 1/10) 10)) (cbrt.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/10)) (neg.f64 (pow.f64 10 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 (sqrt.f64 10))) (/.f64 (sqrt.f64 1/10) (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (sqrt.f64 10))) (/.f64 (sqrt.f64 1/10) (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 (/.f64 1/10 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/10) (sqrt.f64 (sqrt.f64 10))) (/.f64 x (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/10) (cbrt.f64 (sqrt.f64 10))) (/.f64 x (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/10) (/.f64 x (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 1000)))) (/.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/10)) (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/10) x)) (/.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/10)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/10) x) (pow.f64 10 -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 10 -1/2) (*.f64 (sqrt.f64 1/10) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 10) -1/2) (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 10 -1/2)) (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (sqrt.f64 (/.f64 1/10 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 10 -1/2)) (*.f64 (neg.f64 x) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/10) (cbrt.f64 10)) (/.f64 x (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 10)) (sqrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/10)) (sqrt.f64 10)) (cbrt.f64 (*.f64 (sqrt.f64 1/10) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 1/10 10)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 10))) (pow.f64 (sqrt.f64 10) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/10)) (sqrt.f64 (sqrt.f64 10))) (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 1000)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 10)) (/.f64 (sqrt.f64 1/10) (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 10)) (cbrt.f64 (pow.f64 10 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 10))) (pow.f64 10 1/8)) (pow.f64 10 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10))) (neg.f64 (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 10)))) (neg.f64 (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/10)) (neg.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 10))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 10 -1/2)) (*.f64 (sqrt.f64 1/10) x)) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (sqrt.f64 10))) (sqrt.f64 1/10)) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 1000)))) (cbrt.f64 (*.f64 (*.f64 x x) 1/10))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 1/10) (cbrt.f64 (sqrt.f64 10))) x) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (sqrt.f64 (sqrt.f64 10))) (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sqrt.f64 10) -1/2) (*.f64 (sqrt.f64 1/10) x)) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 1/10) (sqrt.f64 (sqrt.f64 10))) x) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 x x) 1/10) 10)) (cbrt.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/10)))) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 x x) 1/10) 10)) (cbrt.f64 (*.f64 (sqrt.f64 1/10) x))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))) (cbrt.f64 (*.f64 (*.f64 x x) 1/10))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (sqrt.f64 1/10) (sqrt.f64 (sqrt.f64 10)))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/10))) (cbrt.f64 (/.f64 (*.f64 (*.f64 x x) 1/10) 10))) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/10) x)) (cbrt.f64 (/.f64 (*.f64 (*.f64 x x) 1/10) 10))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (sqrt.f64 1/10) (cbrt.f64 10))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/10) (/.f64 x (cbrt.f64 10))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 10)) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/10) (/.f64 x (sqrt.f64 (sqrt.f64 10)))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 10))) 1) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 (sqrt.f64 10))) 1) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/10) x)) (/.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/10)) (sqrt.f64 (sqrt.f64 10)))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (cbrt.f64 10))) (cbrt.f64 (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 (sqrt.f64 10))) 1) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 10))) 1) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 10))) (cbrt.f64 (sqrt.f64 (sqrt.f64 10)))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) -1) (neg.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (neg.f64 (sqrt.f64 (sqrt.f64 10)))) (neg.f64 (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/10)) (cbrt.f64 (sqrt.f64 10))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 (sqrt.f64 10)))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (sqrt.f64 (/.f64 1/10 10))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10))) 0) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10))) (*.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10))) 1/2) (*.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10))) (*.f64 0 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))) (*.f64 1/2 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sqrt.f64 10))) (neg.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (/.f64 1 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))) (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/10) 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/10) 10)) (cbrt.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (sqrt.f64 1/10))) (/.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/10)) (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/10) (/.f64 y (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (sqrt.f64 1/10)) (neg.f64 (pow.f64 10 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 1000)))) (/.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/10)) (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 (sqrt.f64 10))) (/.f64 (sqrt.f64 1/10) (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (sqrt.f64 10))) (/.f64 (sqrt.f64 1/10) (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (sqrt.f64 (/.f64 1/10 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/10) (sqrt.f64 (sqrt.f64 10))) (/.f64 y (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/10) (cbrt.f64 (sqrt.f64 10))) (/.f64 y (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (sqrt.f64 1/10)) (pow.f64 10 -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 10 -1/2) (*.f64 y (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 10) -1/2) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 10 -1/2)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (sqrt.f64 (/.f64 1/10 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 10)) (sqrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 10 -1/2)) (*.f64 (neg.f64 y) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/10) (cbrt.f64 10)) (/.f64 y (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/10)) (sqrt.f64 (sqrt.f64 10))) (cbrt.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 1000)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 1/10 10)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (cbrt.f64 10)) (cbrt.f64 (pow.f64 10 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 10)) (/.f64 (sqrt.f64 1/10) (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/10)) (sqrt.f64 10)) (cbrt.f64 (*.f64 y (sqrt.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10))) (pow.f64 (sqrt.f64 10) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10))) (pow.f64 10 1/8)) (pow.f64 10 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 y) (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10))) (neg.f64 (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10)))) (neg.f64 (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (sqrt.f64 1/10)) (neg.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (sqrt.f64 10))) (sqrt.f64 1/10)) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/10) 10)) (cbrt.f64 (*.f64 (neg.f64 y) (sqrt.f64 1/10)))) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/10) 10)) (cbrt.f64 (*.f64 y (sqrt.f64 1/10)))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 10 -1/2)) (*.f64 y (sqrt.f64 1/10))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 1/10) (cbrt.f64 (sqrt.f64 10))) y) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (sqrt.f64 (sqrt.f64 10))) (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sqrt.f64 1/10) (sqrt.f64 (sqrt.f64 10))) y) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))) (cbrt.f64 (*.f64 (*.f64 y y) 1/10))) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sqrt.f64 10) -1/2) (*.f64 y (sqrt.f64 1/10))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 1000)))) (cbrt.f64 (*.f64 (*.f64 y y) 1/10))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (cbrt.f64 (sqrt.f64 10))) 1) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10))) 1) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 (sqrt.f64 1/10) (sqrt.f64 (sqrt.f64 10)))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 y) (sqrt.f64 1/10))) (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/10) 10))) (neg.f64 (cbrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y (sqrt.f64 1/10))) (cbrt.f64 (/.f64 (*.f64 (*.f64 y y) 1/10) 10))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y (sqrt.f64 1/10))) (/.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/10)) (sqrt.f64 (sqrt.f64 10)))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/10) (/.f64 y (cbrt.f64 10))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (cbrt.f64 10)) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 (sqrt.f64 1/10) (cbrt.f64 10))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/10) (/.f64 y (sqrt.f64 (sqrt.f64 10)))) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (cbrt.f64 10))) (cbrt.f64 (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (cbrt.f64 (sqrt.f64 10))) 1) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10))) 1) (sqrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 (sqrt.f64 10))) (cbrt.f64 (sqrt.f64 (sqrt.f64 10)))) (cbrt.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) -1) (neg.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (neg.f64 (sqrt.f64 (sqrt.f64 10)))) (neg.f64 (sqrt.f64 (sqrt.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 y) (sqrt.f64 1/10)) (cbrt.f64 (sqrt.f64 10))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) (cbrt.f64 (sqrt.f64 10)))) (neg.f64 (cbrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (sqrt.f64 (/.f64 1/10 10))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 1/10) x) 0) (*.f64 (sqrt.f64 1/10) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 1/10) x) (*.f64 (*.f64 (sqrt.f64 1/10) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 1/10) x) 1/2) (*.f64 (*.f64 (sqrt.f64 1/10) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 1/10) x)) (*.f64 (sqrt.f64 1/10) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 1/10) x) (*.f64 0 (*.f64 (sqrt.f64 1/10) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 1/10) x)) (*.f64 1/2 (*.f64 (sqrt.f64 1/10) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 1/10)) (*.f64 x (sqrt.f64 (sqrt.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/10)) (*.f64 (cbrt.f64 1/10) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/10) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (sqrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/10) x)) (cbrt.f64 (*.f64 (*.f64 x x) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/10)) (cbrt.f64 (*.f64 (sqrt.f64 1/10) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/10) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 (sqrt.f64 1/10))) (sqrt.f64 (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (sqrt.f64 1/10))) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 1/10) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/10) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/10) x) (cbrt.f64 (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (sqrt.f64 1/10) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/10) (*.f64 x (cbrt.f64 (sqrt.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 1/10)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/10))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 1/10)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/10) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/10) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 1/1000)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 1/10) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/10) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/10) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (sqrt.f64 1/1000)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (sqrt.f64 1/10)) 0) (*.f64 y (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 1/10)) (*.f64 (*.f64 y (sqrt.f64 1/10)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (sqrt.f64 1/10)) 1/2) (*.f64 (*.f64 y (sqrt.f64 1/10)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (sqrt.f64 1/10))) (*.f64 y (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 1/10)) (*.f64 0 (*.f64 y (sqrt.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 1/10))) (*.f64 1/2 (*.f64 y (sqrt.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 y) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 1/10)) (*.f64 y (sqrt.f64 (sqrt.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/10)) (*.f64 (cbrt.f64 1/10) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (sqrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/10) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (sqrt.f64 1/10))) (cbrt.f64 (*.f64 (*.f64 y y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/10)) (cbrt.f64 (*.f64 y (sqrt.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 1/10) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (sqrt.f64 (sqrt.f64 1/10))) (sqrt.f64 (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (sqrt.f64 1/10))) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (sqrt.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 y) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (sqrt.f64 1/10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/10) y) (cbrt.f64 (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 1/10)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/10) (*.f64 y (cbrt.f64 (sqrt.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (sqrt.f64 1/10) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (neg.f64 (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 y) (sqrt.f64 1/10))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 1/10)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (sqrt.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (sqrt.f64 1/10)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (sqrt.f64 1/10)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 1/10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) (sqrt.f64 1/1000)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (sqrt.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 1/10))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 1/10))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 y) (sqrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (sqrt.f64 1/1000)))))))"]],"rules":[["egg-rr",39],["egg-rr",39],["egg-rr",81],["egg-rr",81]],"time":38.906005859375,"type":"rewrite"},{"count":[[240,240]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":28.974853515625,"type":"simplify"},{"compiler":[[4840,4178]],"time":68.197998046875,"type":"eval"},{"alts":[["(+.f64 (*.f64 (*.f64 (sqrt.f64 1/10) x) (pow.f64 10 -1/2)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","fresh",0.3359375],["(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))","next",0.296875],["(+.f64 (/.f64 (*.f64 (pow.f64 (sqrt.f64 10) -1/2) (*.f64 (sqrt.f64 1/10) x)) (sqrt.f64 (sqrt.f64 10))) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","fresh",0.33203125],["(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))","done",0.296875]],"compiler":[[18,16],[16,14],[23,21],[13,11],[18,16],[16,14],[23,21]],"count":[[243,4]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[240,3],"picked":[1,0]}],"min-error":[0],"time":79.078125,"type":"prune"},{"compiler":[[48,41]],"locations":[["(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))",0.01953125,true],["(*.f64 (sqrt.f64 1/10) x)",0.21875,false],["(*.f64 y (sqrt.f64 (/.f64 1/10 10)))",0.296875,true],["(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))",0.453125,false]],"time":12.755859375,"type":"localize"},{"count":[[2,36]],"series":[["(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))","y","-inf",0.39013671875],["(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))","y","inf",0.239990234375],["(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))","y","0",0.355224609375],["(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))","x","-inf",0.176025390625],["(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))","x","inf",0.2021484375],["(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))","x","0",0.251953125],["(*.f64 y (sqrt.f64 (/.f64 1/10 10)))","y","-inf",0.30517578125],["(*.f64 y (sqrt.f64 (/.f64 1/10 10)))","y","inf",0.31396484375],["(*.f64 y (sqrt.f64 (/.f64 1/10 10)))","y","0",0.31396484375]],"time":2.68017578125,"type":"series"},{"count":[[2,95]],"inputs":[["(*.f64 y (sqrt.f64 (/.f64 1/10 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y 1/10) 0) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y 1/10) 1/2) (*.f64 (*.f64 y 1/10) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y 1/10) (*.f64 (*.f64 y 1/10) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y 1/10)) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 y 1/10)) (*.f64 1/2 (*.f64 y 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y 1/10) (*.f64 0 (*.f64 y 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y 1/10)) (cbrt.f64 (*.f64 (*.f64 y y) 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 y y) 1/1000)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/100)) (cbrt.f64 (*.f64 y 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/1000 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/10) (*.f64 (cbrt.f64 1/100) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 1/10)) (cbrt.f64 1/100))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -1/10 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/10) (*.f64 (sqrt.f64 1/10) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/10 y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (cbrt.f64 1/10)) (cbrt.f64 1/10)) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (cbrt.f64 1/10)) 1) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (cbrt.f64 1/10)) (cbrt.f64 -1/10)) (cbrt.f64 -10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) -10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (cbrt.f64 1/10)) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y 10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/10) y) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/10) y) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (cbrt.f64 1/100) y)) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y 1/10) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y 1/10)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y 1/10)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y 1/10)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/10 y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y 1/10) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) 0) (fma.f64 y 1/10 (*.f64 x 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) 1/2) (*.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) (*.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y 1/10 (*.f64 x 1/10))) (fma.f64 y 1/10 (*.f64 x 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 y 1/10 (*.f64 x 1/10))) (*.f64 1/2 (fma.f64 y 1/10 (*.f64 x 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) (*.f64 0 (fma.f64 y 1/10 (*.f64 x 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/10) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y 1/10) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y 1/10) (*.f64 x -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y 1/10 (*.f64 x 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 x -1/10) (*.f64 -1/10 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y 1/10 (*.f64 x 1/10))) (cbrt.f64 (pow.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/100)) (-.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/100)) (cbrt.f64 (*.f64 (*.f64 (*.f64 x 1/10) 1/10) y)))) (+.f64 (cbrt.f64 (*.f64 y 1/10)) (cbrt.f64 (*.f64 x 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/100)) (-.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/100)) (cbrt.f64 (*.f64 (*.f64 (*.f64 x 1/10) 1/10) y)))) (+.f64 (cbrt.f64 (*.f64 x 1/10)) (cbrt.f64 (*.f64 y 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) 2)) (cbrt.f64 (fma.f64 y 1/10 (*.f64 x 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/10) (+.f64 (*.f64 (sqrt.f64 1/10) x) (*.f64 (sqrt.f64 1/10) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/10) (+.f64 (*.f64 (sqrt.f64 1/10) y) (*.f64 (sqrt.f64 1/10) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 1/10 (*.f64 x 1/10))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 1/10 (*.f64 x 1/10))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 1/10 (*.f64 x 1/10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 x -1/10) (*.f64 -1/10 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (+.f64 (*.f64 x -1/10) (*.f64 -1/10 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y 1/10 (*.f64 x 1/10)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 1/10)) (cbrt.f64 (*.f64 (*.f64 x x) 1/100)) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y 1/10)) (cbrt.f64 (*.f64 (*.f64 y y) 1/100)) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 1/10) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y 1/10) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y 1/10) 1 (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -1/10 y) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 1/10)) (cbrt.f64 1/100) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/10) (*.f64 (cbrt.f64 1/100) y) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/100)) (cbrt.f64 (*.f64 y 1/10)) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 y y) 1/1000)) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/1000 y)) (cbrt.f64 (*.f64 y y)) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 10 (neg.f64 1/4)) (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 (sqrt.f64 10))) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/100)) (cbrt.f64 (*.f64 x 1/10)) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/10) x)) (sqrt.f64 (sqrt.f64 10))) (/.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/10)) (sqrt.f64 (sqrt.f64 10))) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 1/10) 1 (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/100) (*.f64 (cbrt.f64 1/10) x) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/10) x)) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/10)) (sqrt.f64 1/10)) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (sqrt.f64 (sqrt.f64 10))) (/.f64 (sqrt.f64 1/10) (sqrt.f64 (sqrt.f64 10))) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 1/10) (sqrt.f64 (sqrt.f64 10))) (/.f64 x (sqrt.f64 (sqrt.f64 10))) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (sqrt.f64 1/10))) (*.f64 (cbrt.f64 1/10) (sqrt.f64 1/10)) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 1/10) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1/10 (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/10 y (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 1/10) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/10) (*.f64 (sqrt.f64 1/10) y) (*.f64 x 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/10 (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/10) (*.f64 (sqrt.f64 1/10) x) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 1/10)) (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 10)) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 x -1/10) (*.f64 y 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (sqrt.f64 1/10)) (neg.f64 (sqrt.f64 1/10)) (*.f64 y 1/10))))))"]],"rules":[["egg-rr",58],["egg-rr",37]],"time":28.469970703125,"type":"rewrite"},{"count":[[131,99]],"inputs":[["(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(*.f64 1/10 y)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(*.f64 1/10 y)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(*.f64 1/10 y)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(*.f64 x (sqrt.f64 (/.f64 1/10 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(*.f64 x (sqrt.f64 (/.f64 1/10 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10))","(*.f64 x (sqrt.f64 (/.f64 1/10 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(*.f64 1/10 y)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(*.f64 1/10 y)","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 1/10 y))","(fma.f64 x (sqrt.f64 (/.f64 1/10 10)) (*.f64 1/10 y))"]],"time":114.405029296875,"type":"simplify"},{"compiler":[[3597,2994]],"time":51.81982421875,"type":"eval"},{"alts":[["(+.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (/.f64 1 10))) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))","fresh",0.27734375],["(fma.f64 (cbrt.f64 1/100) (*.f64 (cbrt.f64 1/10) x) (*.f64 y 1/10))","fresh",0.30078125],["(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))","done",0.296875],["(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 (*.f64 y (cbrt.f64 1/10)) (cbrt.f64 1/100)))","fresh",0.27962875976844204],["(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 y 10))","fresh",0.1484375]],"compiler":[[22,20],[12,10],[13,11],[17,15],[13,11]],"count":[[223,5]],"kept":[{"done":[1,1],"fresh":[2,0],"new":[219,4],"picked":[1,0]}],"min-error":[0],"time":69.60498046875,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["y",0.01171875,1],["(/.f64 (+.f64 x y) 10)",0.01171875,1],["(+.f64 x y)",0.01171875,1]],"compiler":[[3,2],[3,2],[7,5],[5,3],[154,127]],"count":[[12,1]],"inputs":[["(+.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (cbrt.f64 (sqrt.f64 10))) (cbrt.f64 (/.f64 1 10))) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))","(fma.f64 (cbrt.f64 1/100) (*.f64 (cbrt.f64 1/10) x) (*.f64 y 1/10))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 (*.f64 y (cbrt.f64 1/10)) (cbrt.f64 1/100)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 y 10))","(+.f64 (*.f64 (*.f64 (sqrt.f64 1/10) x) (pow.f64 10 -1/2)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (*.f64 y (sqrt.f64 (/.f64 1/10 10))))","(+.f64 (/.f64 (*.f64 (pow.f64 (sqrt.f64 10) -1/2) (*.f64 (sqrt.f64 1/10) x)) (sqrt.f64 (sqrt.f64 10))) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(+.f64 (/.f64 (*.f64 (sqrt.f64 1/10) x) (sqrt.f64 10)) (/.f64 (*.f64 y (sqrt.f64 1/10)) (sqrt.f64 10)))","(/.f64 (*.f64 (+.f64 x y) (sqrt.f64 1/10)) (sqrt.f64 10))","(*.f64 (neg.f64 (sqrt.f64 1/10)) (/.f64 (+.f64 x y) (neg.f64 (sqrt.f64 10))))","(*.f64 (+.f64 x y) 1/10)","(/.f64 (+.f64 x y) 10)"]],"link":["."],"name":["Text.Parsec.Token:makeTokenParser from parsec-3.1.9, A"],"oracle":[0.842128759768442],"outputs":[["(/.f64 (+.f64 x y) 10)"]],"time":22.653076171875,"times":[["x",4.8271484375],["y",4.751953125],["(/.f64 (+.f64 x y) 10)",4.94189453125],["(+.f64 x y)",4.81103515625]],"type":"regimes"},{"compiler":[[7,5]],"inputs":[["(/.f64 (+.f64 x y) 10)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x y) 10)","(*.f64 (+.f64 x y) 1/10)"]],"stop":[["fuel",1]],"time":17.7060546875,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.25,"type":"end"}]
[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.2047778642497633,0.7937580071395587,0.0014641286106780171],[11,0.1911260066331124,0.8074098647562096,0.0014641286106780171],[10,0.16382229139981064,0.8347135799895113,0.0014641286106780171],[9,0.1404191069141234,0.8581167644751986,0.0014641286106780171],[8,0.09361273794274894,0.904923133446573,0.0014641286106780171],[7,0.062408491961832624,0.9361273794274894,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":198.77294921875,"type":"analyze"},{"outcomes":[["body",512,"invalid",0.14501953125,1],["body",512,"valid",211.397705078125,1399],["body",1024,"valid",944.994384765625,3654],["body",2048,"valid",133.074462890625,222],["body",256,"valid",220.357421875,2981]],"time":1518.5888671875,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2"],["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))","(*.f64 a (/.f64 (sin.f64 b) (cos.f64 (+.f64 r b))))","(*.f64 b (/.f64 (sin.f64 r) (cos.f64 (+.f64 a r))))","(*.f64 r (/.f64 (sin.f64 a) (cos.f64 (+.f64 b a))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))","(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","(*.f64 a (/.f64 (sin.f64 b) (cos.f64 (+.f64 r b))))","(/.f64 (*.f64 a (sin.f64 b)) (cos.f64 (+.f64 r b)))","(*.f64 b (/.f64 (sin.f64 r) (cos.f64 (+.f64 a r))))","(/.f64 (*.f64 b (sin.f64 r)) (cos.f64 (+.f64 a r)))","(*.f64 r (/.f64 (sin.f64 a) (cos.f64 (+.f64 b a))))","(/.f64 (*.f64 r (sin.f64 a)) (cos.f64 (+.f64 a b)))"]],"symmetry":[[]],"time":72.47802734375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))","(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))"]],"time":18.7880859375,"type":"simplify"},{"compiler":[[21,10]],"time":1.4609375,"type":"eval"},{"alts":[["(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","next",14.157567491000137],["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))","fresh",14.165379991000137]],"compiler":[[12,8],[12,8],[12,8],[12,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[14.082684971463252],"time":1.364990234375,"type":"prune"},{"compiler":[[28,8]],"locations":[["(sin.f64 b)",0.01953125,true],["(*.f64 r (sin.f64 b))",0.15234375,true],["(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))",0.23046875,true],["(cos.f64 (+.f64 a b))",4.620822046780408,true]],"time":7.22802734375,"type":"localize"},{"count":[[4,80]],"series":[["(sin.f64 b)","b","-inf",0.14990234375],["(sin.f64 b)","b","inf",0.138916015625],["(sin.f64 b)","b","0",0.203125],["(*.f64 r (sin.f64 b))","b","-inf",0.140869140625],["(*.f64 r (sin.f64 b))","b","inf",0.14697265625],["(*.f64 r (sin.f64 b))","b","0",0.31103515625],["(*.f64 r (sin.f64 b))","r","-inf",0.26806640625],["(*.f64 r (sin.f64 b))","r","inf",0.2841796875],["(*.f64 r (sin.f64 b))","r","0",0.1611328125],["(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","a","-inf",0.4189453125],["(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","a","inf",0.650146484375],["(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","a","0",0.7841796875],["(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","b","-inf",0.52880859375],["(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","b","inf",0.81494140625],["(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","b","0",0.7529296875],["(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","r","-inf",0.3359375],["(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","r","inf",0.43994140625],["(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","r","0",1.158935546875],["(cos.f64 (+.f64 a b))","b","-inf",0.197998046875],["(cos.f64 (+.f64 a b))","b","inf",0.165771484375],["(cos.f64 (+.f64 a b))","b","0",0.364990234375],["(cos.f64 (+.f64 a b))","a","-inf",0.18701171875],["(cos.f64 (+.f64 a b))","a","inf",0.199951171875],["(cos.f64 (+.f64 a b))","a","0",0.43994140625]],"time":9.612060546875,"type":"series"},{"count":[[4,145]],"inputs":[["(cos.f64 (+.f64 a b))","(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","(*.f64 r (sin.f64 b))","(sin.f64 b)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (*.f64 (cos.f64 a) (cos.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (+.f64 a b)) 0) (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 a b)) (*.f64 (cos.f64 (+.f64 a b)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 (+.f64 a b))) (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 a b)) (*.f64 0 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (+.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 (+.f64 a b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 a b)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (+.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 (+.f64 a b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 a b))) (-.f64 (cos.f64 (-.f64 a b)) (cos.f64 (+.f64 a b)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 a b))) 2) (*.f64 2 (-.f64 (cos.f64 (-.f64 a b)) (cos.f64 (+.f64 a b))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (+.f64 a b)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (+.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 a) (cos.f64 b) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 a) (cos.f64 b))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 a) (cos.f64 b)) 2)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 a) (cos.f64 b)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (+.f64 a b))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 0) (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) (*.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) (*.f64 0 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (cos.f64 (+.f64 a b)))) (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 b) (/.f64 r (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)) (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 2)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (/.f64 -1 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) (/.f64 r (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 r (cbrt.f64 (cos.f64 (+.f64 a b)))) (/.f64 (sin.f64 b) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 r (sin.f64 b)) (/.f64 1 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (+.f64 a b))) (*.f64 r (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (+.f64 a b)) (neg.f64 1/3)) (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 2)) (cos.f64 (+.f64 a b))) (cbrt.f64 (*.f64 r (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))) r)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cos.f64 (+.f64 a b))) (*.f64 (neg.f64 r) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 r (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))) (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 r (cos.f64 (+.f64 a b))) (sin.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 b) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))) (/.f64 r (cbrt.f64 (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))) (pow.f64 (cos.f64 (+.f64 a b)) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 (+.f64 a b)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 (+.f64 a b)))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 r (cbrt.f64 (cos.f64 (+.f64 a b)))) (sin.f64 b)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)) (cbrt.f64 (*.f64 r (sin.f64 b)))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)) (cbrt.f64 (*.f64 (neg.f64 r) (sin.f64 b)))) (cbrt.f64 (neg.f64 (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 2))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) r) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 a b)) (neg.f64 1/3)) (*.f64 r (sin.f64 b))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 b) (/.f64 r (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 r) (sin.f64 b))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2))) (cbrt.f64 (neg.f64 (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 r (/.f64 (sin.f64 b) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) 1) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) -1) (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) 1) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b))))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 r (sin.f64 b)) 0) (*.f64 r (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 r (sin.f64 b)) (*.f64 (*.f64 r (sin.f64 b)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 r (sin.f64 b))) (*.f64 r (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 r (sin.f64 b)) (*.f64 0 (*.f64 r (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 r) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 b)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) r))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 r) (*.f64 (cbrt.f64 (*.f64 r r)) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 r (sin.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 b) r)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) (cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 2)) (cbrt.f64 (*.f64 r (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 r (cbrt.f64 (sin.f64 b))) (cbrt.f64 (pow.f64 (sin.f64 b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 b) (cbrt.f64 r)) (cbrt.f64 (*.f64 r r)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 r (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 r (sin.f64 b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 r) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 r r)) (*.f64 (sin.f64 b) (cbrt.f64 r)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) r) (cbrt.f64 (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 r (cbrt.f64 (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 r r)) (sin.f64 b)) (cbrt.f64 r))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 r) (sin.f64 b)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 r) (neg.f64 (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 r) (sin.f64 b))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 b)) (neg.f64 r))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 r (sin.f64 b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 r) (sin.f64 b)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 r (sin.f64 b)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 r (sin.f64 b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 r) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 b) 0) (sin.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 b) (*.f64 (sin.f64 b) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 b)) (sin.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 b) (*.f64 0 (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 b)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 b)) (cbrt.f64 (pow.f64 (sin.f64 b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (cbrt.f64 (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 b) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 b)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 b)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 b) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 b)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 b)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 b) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 b)))))"]],"rules":[["egg-rr",21],["egg-rr",34],["egg-rr",58],["egg-rr",32]],"time":33.867919921875,"type":"rewrite"},{"count":[[225,195]],"inputs":[["(cos.f64 b)","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (cos.f64 b))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b))))","(cos.f64 (-.f64 b (*.f64 -1 a)))","(cos.f64 (-.f64 b (*.f64 -1 a)))","(cos.f64 (-.f64 b (*.f64 -1 a)))","(cos.f64 (-.f64 b (*.f64 -1 a)))","(cos.f64 a)","(+.f64 (cos.f64 a) (*.f64 -1 (*.f64 (sin.f64 a) b)))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2)))))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2))))))","(cos.f64 (-.f64 a (*.f64 -1 b)))","(cos.f64 (-.f64 a (*.f64 -1 b)))","(cos.f64 (-.f64 a (*.f64 -1 b)))","(cos.f64 (-.f64 a (*.f64 -1 b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 b r) (cos.f64 a))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 (pow.f64 b 2) r)) (pow.f64 (cos.f64 a) 2)) (/.f64 (*.f64 r b) (cos.f64 a)))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))))))))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (+.f64 (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 a) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (cos.f64 a))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))))) (pow.f64 b 4))))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 a (*.f64 -1 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 a (*.f64 -1 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 a (*.f64 -1 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 a (*.f64 -1 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 3) (+.f64 (/.f64 (*.f64 (sin.f64 b) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))) (cos.f64 b)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))) (*.f64 1/6 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))))))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 b (*.f64 -1 a))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 b (*.f64 -1 a))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 b (*.f64 -1 a))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 b (*.f64 -1 a))))","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 r b)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 b 3) r)) (*.f64 r b))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 b 3) r)) (+.f64 (*.f64 r b) (*.f64 1/120 (*.f64 (pow.f64 b 5) r))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 b 3) r)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 b 7) r)) (+.f64 (*.f64 r b) (*.f64 1/120 (*.f64 (pow.f64 b 5) r)))))","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","b","(+.f64 (*.f64 -1/6 (pow.f64 b 3)) b)","(+.f64 (*.f64 -1/6 (pow.f64 b 3)) (+.f64 (*.f64 1/120 (pow.f64 b 5)) b))","(+.f64 (*.f64 -1/6 (pow.f64 b 3)) (+.f64 (*.f64 1/120 (pow.f64 b 5)) (+.f64 b (*.f64 -1/5040 (pow.f64 b 7)))))"]],"method":["egg-herbie"],"outputs":[["(cos.f64 b)","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (cos.f64 b))","(fma.f64 (sin.f64 (neg.f64 b)) a (cos.f64 b))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b)))","(fma.f64 (sin.f64 (neg.f64 b)) a (*.f64 (cos.f64 b) (+.f64 (*.f64 -1/2 (*.f64 a a)) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b))))","(fma.f64 (sin.f64 (neg.f64 b)) a (fma.f64 1/6 (*.f64 (sin.f64 b) (pow.f64 a 3)) (*.f64 (cos.f64 b) (+.f64 (*.f64 -1/2 (*.f64 a a)) 1))))","(cos.f64 (-.f64 b (*.f64 -1 a)))","(cos.f64 (+.f64 b a))","(cos.f64 (-.f64 b (*.f64 -1 a)))","(cos.f64 (+.f64 b a))","(cos.f64 (-.f64 b (*.f64 -1 a)))","(cos.f64 (+.f64 b a))","(cos.f64 (-.f64 b (*.f64 -1 a)))","(cos.f64 (+.f64 b a))","(cos.f64 a)","(+.f64 (cos.f64 a) (*.f64 -1 (*.f64 (sin.f64 a) b)))","(fma.f64 (sin.f64 (neg.f64 a)) b (cos.f64 a))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2)))))","(+.f64 (fma.f64 (sin.f64 (neg.f64 a)) b (cos.f64 a)) (*.f64 (*.f64 -1/2 (cos.f64 a)) (*.f64 b b)))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2))))))","(+.f64 (fma.f64 (sin.f64 (neg.f64 a)) b (cos.f64 a)) (fma.f64 1/6 (*.f64 (sin.f64 a) (pow.f64 b 3)) (*.f64 (*.f64 -1/2 (cos.f64 a)) (*.f64 b b))))","(cos.f64 (-.f64 a (*.f64 -1 b)))","(cos.f64 (+.f64 b a))","(cos.f64 (-.f64 a (*.f64 -1 b)))","(cos.f64 (+.f64 b a))","(cos.f64 (-.f64 a (*.f64 -1 b)))","(cos.f64 (+.f64 b a))","(cos.f64 (-.f64 a (*.f64 -1 b)))","(cos.f64 (+.f64 b a))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 b r) (cos.f64 a))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 (pow.f64 b 2) r)) (pow.f64 (cos.f64 a) 2)) (/.f64 (*.f64 r b) (cos.f64 a)))","(fma.f64 (*.f64 (sin.f64 a) (*.f64 (*.f64 b b) r)) (pow.f64 (cos.f64 a) (neg.f64 2)) (/.f64 (*.f64 b r) (cos.f64 a)))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))))))))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 (*.f64 b b) r)) (pow.f64 (cos.f64 a) 2)) (fma.f64 (pow.f64 b 3) (+.f64 (*.f64 (/.f64 r (cos.f64 a)) (-.f64 -1/6 -1/2)) (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))) (/.f64 (*.f64 b r) (cos.f64 a))))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (+.f64 (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 a) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (cos.f64 a))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))))) (pow.f64 b 4))))))","(fma.f64 (*.f64 (sin.f64 a) (*.f64 (*.f64 b b) r)) (pow.f64 (cos.f64 a) (neg.f64 2)) (-.f64 (fma.f64 (pow.f64 b 3) (+.f64 (*.f64 (/.f64 r (cos.f64 a)) (-.f64 -1/6 -1/2)) (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))) (/.f64 (*.f64 b r) (cos.f64 a))) (*.f64 (fma.f64 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2)) -1/3 (/.f64 (*.f64 (sin.f64 a) (+.f64 (*.f64 (/.f64 r (cos.f64 a)) (-.f64 -1/6 -1/2)) (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))) (neg.f64 (cos.f64 a)))) (pow.f64 b 4))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 a (*.f64 -1 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 a (*.f64 -1 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 a (*.f64 -1 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 a (*.f64 -1 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) (neg.f64 2)) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) (neg.f64 2)) (fma.f64 (neg.f64 (*.f64 a a)) (fma.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)) (neg.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 b) (cbrt.f64 r)) (cos.f64 b)) 3))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 3) (+.f64 (/.f64 (*.f64 (sin.f64 b) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))) (cos.f64 b)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))) (*.f64 1/6 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))))))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) (neg.f64 2)) (fma.f64 (neg.f64 (pow.f64 a 3)) (fma.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2)) -1/3 (/.f64 (*.f64 (sin.f64 b) (fma.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)) (neg.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 b) (cbrt.f64 r)) (cos.f64 b)) 3)))) (cos.f64 b))) (fma.f64 (neg.f64 (*.f64 a a)) (fma.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)) (neg.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 b) (cbrt.f64 r)) (cos.f64 b)) 3))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 b (*.f64 -1 a))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 b (*.f64 -1 a))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 b (*.f64 -1 a))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (-.f64 b (*.f64 -1 a))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 b a)))","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 r b)","(*.f64 b r)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 b 3) r)) (*.f64 r b))","(*.f64 r (fma.f64 -1/6 (pow.f64 b 3) b))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 b 3) r)) (+.f64 (*.f64 r b) (*.f64 1/120 (*.f64 (pow.f64 b 5) r))))","(fma.f64 -1/6 (*.f64 (pow.f64 b 3) r) (*.f64 r (fma.f64 1/120 (pow.f64 b 5) b)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 b 3) r)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 b 7) r)) (+.f64 (*.f64 r b) (*.f64 1/120 (*.f64 (pow.f64 b 5) r)))))","(+.f64 (*.f64 r (+.f64 (*.f64 -1/6 (pow.f64 b 3)) (*.f64 -1/5040 (pow.f64 b 7)))) (*.f64 r (fma.f64 1/120 (pow.f64 b 5) b)))","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","(*.f64 (sin.f64 b) r)","b","(+.f64 (*.f64 -1/6 (pow.f64 b 3)) b)","(fma.f64 -1/6 (pow.f64 b 3) b)","(+.f64 (*.f64 -1/6 (pow.f64 b 3)) (+.f64 (*.f64 1/120 (pow.f64 b 5)) b))","(fma.f64 (pow.f64 b 3) -1/6 (fma.f64 1/120 (pow.f64 b 5) b))","(+.f64 (*.f64 -1/6 (pow.f64 b 3)) (+.f64 (*.f64 1/120 (pow.f64 b 5)) (+.f64 b (*.f64 -1/5040 (pow.f64 b 7)))))","(fma.f64 (pow.f64 b 3) -1/6 (fma.f64 1/120 (pow.f64 b 5) (fma.f64 (pow.f64 b 7) -1/5040 b)))"]],"time":289.81005859375,"type":"simplify"},{"compiler":[[3506,1187]],"time":29.426025390625,"type":"eval"},{"alts":[["(*.f64 (sin.f64 b) (/.f64 r (cos.f64 (+.f64 a b))))","fresh",14.164422520305463],["(/.f64 (*.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) r) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))","fresh",14.277116367989887],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","next",0.3190613281475361],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cbrt.f64 (*.f64 (cos.f64 a) (cos.f64 b))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 a) (cos.f64 b)) 2)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","fresh",0.4366252562948203],["(/.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 r (cbrt.f64 (sin.f64 b)))) (cos.f64 (+.f64 a b)))","fresh",22.635599515900683],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","fresh",0.3252525879159781],["(pow.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) 3)","fresh",14.479653965674306],["(*.f64 (/.f64 1 (cos.f64 (+.f64 a b))) (*.f64 r (sin.f64 b)))","fresh",14.183953770305418],["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))","fresh",14.165379991000137],["(*.f64 (/.f64 r (cbrt.f64 (cos.f64 (+.f64 a b)))) (/.f64 (sin.f64 b) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))","fresh",14.258542588684515]],"compiler":[[12,8],[21,13],[19,12],[29,17],[19,13],[19,12],[15,11],[14,10],[12,8],[21,13],[12,8],[21,13],[19,12],[29,17],[19,13],[19,12],[15,11],[14,10],[12,8],[21,13]],"count":[[197,10]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[195,10],"picked":[1,0]}],"min-error":[0.09964755861065212],"time":55.0859375,"type":"prune"},{"compiler":[[56,12]],"locations":[["(fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))",0.08719503162065376,true],["(*.f64 r (sin.f64 b))",0.15234375,false],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))",0.22494125976844204,true],["(*.f64 (sin.f64 a) (sin.f64 b))",0.2421875,true]],"time":12.160888671875,"type":"localize"},{"count":[[3,68]],"series":[["(fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))","a","-inf",0.1669921875],["(fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))","a","inf",0.18603515625],["(fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))","a","0",0.169921875],["(fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))","b","-inf",0.16796875],["(fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))","b","inf",0.183837890625],["(fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))","b","0",0.174072265625],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","a","-inf",0.68505859375],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","a","inf",0.839111328125],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","a","0",0.318115234375],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","b","-inf",0.666015625],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","b","inf",0.803955078125],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","b","0",0.3388671875],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","r","-inf",0.364013671875],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","r","inf",0.572021484375],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","r","0",1.34619140625],["(*.f64 (sin.f64 a) (sin.f64 b))","b","-inf",0.291015625],["(*.f64 (sin.f64 a) (sin.f64 b))","b","inf",0.471923828125],["(*.f64 (sin.f64 a) (sin.f64 b))","b","0",0.3369140625],["(*.f64 (sin.f64 a) (sin.f64 b))","a","-inf",0.340087890625],["(*.f64 (sin.f64 a) (sin.f64 b))","a","inf",1.076904296875],["(*.f64 (sin.f64 a) (sin.f64 b))","a","0",0.4130859375]],"time":10.26220703125,"type":"series"},{"count":[[3,203]],"inputs":[["(*.f64 (sin.f64 a) (sin.f64 b))","(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","(fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (-.f64 b a)) 1/2) (neg.f64 (*.f64 (cos.f64 (+.f64 a b)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 (-.f64 b a)) 1/2) (*.f64 (cos.f64 (+.f64 a b)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 0 (*.f64 (cos.f64 (-.f64 b a)) 1/2)) (*.f64 (cos.f64 (+.f64 a b)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 (-.f64 b a)) 1/2) (+.f64 (*.f64 (cos.f64 (+.f64 a b)) 1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2)) (*.f64 0 (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))) (+.f64 0 (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2)) (+.f64 0 (*.f64 (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b))) 0))) (-.f64 (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 a)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 a) 2)) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 a) (sin.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 b) (sin.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2)) (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 a) (cbrt.f64 (sin.f64 b))) (cbrt.f64 (pow.f64 (sin.f64 b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 b) (cbrt.f64 (sin.f64 a))) (cbrt.f64 (pow.f64 (sin.f64 a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 b)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (sin.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 a) 2)) (sin.f64 b)) (cbrt.f64 (sin.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 a) 2)) (*.f64 (sin.f64 b) (cbrt.f64 (sin.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (sin.f64 a)) (cbrt.f64 (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 (sin.f64 a) (cbrt.f64 (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 a)) (neg.f64 (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 b)) (neg.f64 (sin.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 a))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 a) 2)) (neg.f64 (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2))) (cbrt.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (neg.f64 (sin.f64 a)) (cbrt.f64 (sin.f64 b)))) (cbrt.f64 (pow.f64 (sin.f64 b) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 a)) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 a) 2)) (neg.f64 (sin.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sin.f64 a)) (cbrt.f64 (sin.f64 b))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2)) (/.f64 1 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (/.f64 1 -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)) (/.f64 1 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2)) (cbrt.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2)) (cbrt.f64 (cbrt.f64 4))) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2)) (cbrt.f64 2)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2))) (neg.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2)) 1) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)) 1) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2)) 1) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)) 1) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cos.f64 (-.f64 b a)) 2) (*.f64 2 (cos.f64 (+.f64 a b)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (cos.f64 (+.f64 a b)) 1/2) (*.f64 (cos.f64 (-.f64 b a)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 a) (cbrt.f64 (sin.f64 b))) (cbrt.f64 (pow.f64 (sin.f64 b) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2)) (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 a)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 a) 2)) (sin.f64 b)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) 1/2 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 b) (cbrt.f64 (sin.f64 a))) (cbrt.f64 (pow.f64 (sin.f64 a) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 a) (sin.f64 b) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 b) (sin.f64 a) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 b)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (sin.f64 a)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 a) (sin.f64 b)) 0)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 0) (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) (*.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) (*.f64 0 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (cos.f64 (+.f64 a b)))) (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 b) (/.f64 r (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)) (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (/.f64 -1 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 r (cbrt.f64 (cos.f64 (+.f64 a b)))) (/.f64 (sin.f64 b) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) (/.f64 r (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 2)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 r (sin.f64 b)) (/.f64 1 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (+.f64 a b))) (*.f64 r (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (+.f64 a b)) (neg.f64 1/3)) (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 2)) (cos.f64 (+.f64 a b))) (cbrt.f64 (*.f64 r (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 b) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))) (/.f64 r (cbrt.f64 (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 r (cos.f64 (+.f64 a b))) (sin.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))) r)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 r (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))) (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cos.f64 (+.f64 a b))) (*.f64 (neg.f64 r) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))) (pow.f64 (cos.f64 (+.f64 a b)) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 (+.f64 a b)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 (+.f64 a b)))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 r (cbrt.f64 (cos.f64 (+.f64 a b)))) (sin.f64 b)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 2))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)) (cbrt.f64 (*.f64 r (sin.f64 b)))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)) (cbrt.f64 (*.f64 (neg.f64 r) (sin.f64 b)))) (cbrt.f64 (neg.f64 (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) r) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 a b)) (neg.f64 1/3)) (*.f64 r (sin.f64 b))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 b) (/.f64 r (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) 1) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 r) (sin.f64 b))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2))) (cbrt.f64 (neg.f64 (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 r (/.f64 (sin.f64 b) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) 1) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) -1) (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b))))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 b) (cos.f64 a)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (cos.f64 b) (cos.f64 a)) (*.f64 (cos.f64 (-.f64 b a)) 1/2)) (*.f64 (cos.f64 (+.f64 a b)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (neg.f64 (*.f64 (cos.f64 b) (cos.f64 a)))) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (+.f64 a b)) 0) (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 a b)) (*.f64 (cos.f64 (+.f64 a b)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 (cos.f64 b) (cos.f64 a))) -1) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 (+.f64 a b))) (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 a b)) (*.f64 0 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 b) (cos.f64 a)) (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (+.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 (+.f64 a b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 a b)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (+.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 (+.f64 a b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2) (*.f64 2 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2) (*.f64 2 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (cbrt.f64 4)) (*.f64 2 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2)))) (*.f64 2 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) -2) (*.f64 2 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) (*.f64 2 -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (*.f64 2 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)))) (sqrt.f64 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2) (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (+.f64 a b)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (+.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2)) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2))) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 a) (neg.f64 (sin.f64 b)) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 b) (neg.f64 (sin.f64 a)) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (sin.f64 a) (sin.f64 b)) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 a) (sin.f64 b)) -1 (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 a)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 a) 2)) (neg.f64 (sin.f64 b))) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 a)) (sin.f64 b) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2)) (cbrt.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 b)) (sin.f64 a) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (sin.f64 a)) (cbrt.f64 (sin.f64 b))) (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 b)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 b) 2)) (cos.f64 a)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 b) (cbrt.f64 (cos.f64 a))) (cbrt.f64 (pow.f64 (cos.f64 a) 2)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 a) (cos.f64 b) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 b) (cos.f64 a))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 b) (cos.f64 a)) 2)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) 1 (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (*.f64 (cos.f64 b) (cos.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 b) (cos.f64 a)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 b) (cos.f64 a)) 1 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (+.f64 a b))))))"]],"rules":[["egg-rr",58],["egg-rr",58],["egg-rr",87]],"time":37.52880859375,"type":"rewrite"},{"count":[[271,248]],"inputs":[["(*.f64 (sin.f64 b) a)","(+.f64 (*.f64 -1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (*.f64 (sin.f64 b) a))","(+.f64 (*.f64 -1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (+.f64 (*.f64 1/120 (*.f64 (sin.f64 b) (pow.f64 a 5))) (*.f64 (sin.f64 b) a)))","(+.f64 (*.f64 -1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (+.f64 (*.f64 -1/5040 (*.f64 (sin.f64 b) (pow.f64 a 7))) (+.f64 (*.f64 1/120 (*.f64 (sin.f64 b) (pow.f64 a 5))) (*.f64 (sin.f64 b) a))))","(*.f64 (sin.f64 a) b)","(+.f64 (*.f64 -1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (*.f64 (sin.f64 a) b))","(+.f64 (*.f64 -1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (+.f64 (*.f64 (sin.f64 a) b) (*.f64 1/120 (*.f64 (sin.f64 a) (pow.f64 b 5)))))","(+.f64 (*.f64 -1/5040 (*.f64 (sin.f64 a) (pow.f64 b 7))) (+.f64 (*.f64 -1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (+.f64 (*.f64 (sin.f64 a) b) (*.f64 1/120 (*.f64 (sin.f64 a) (pow.f64 b 5))))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 b r) (cos.f64 a))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 (pow.f64 b 2) r)) (pow.f64 (cos.f64 a) 2)) (/.f64 (*.f64 r b) (cos.f64 a)))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))))))))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (+.f64 (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 a) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (cos.f64 a))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))))) (pow.f64 b 4))))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 3) (+.f64 (/.f64 (*.f64 (sin.f64 b) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))) (cos.f64 b)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))) (*.f64 1/6 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))))))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(cos.f64 a)","(+.f64 (cos.f64 a) (*.f64 -1 (*.f64 (sin.f64 a) b)))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2)))))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2))))))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 b)","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (cos.f64 b))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b))))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sin.f64 b) a)","(+.f64 (*.f64 -1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (*.f64 (sin.f64 b) a))","(fma.f64 -1/6 (*.f64 (sin.f64 b) (pow.f64 a 3)) (*.f64 (sin.f64 b) a))","(+.f64 (*.f64 -1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (+.f64 (*.f64 1/120 (*.f64 (sin.f64 b) (pow.f64 a 5))) (*.f64 (sin.f64 b) a)))","(fma.f64 -1/6 (*.f64 (sin.f64 b) (pow.f64 a 3)) (fma.f64 1/120 (*.f64 (sin.f64 b) (pow.f64 a 5)) (*.f64 (sin.f64 b) a)))","(+.f64 (*.f64 -1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (+.f64 (*.f64 -1/5040 (*.f64 (sin.f64 b) (pow.f64 a 7))) (+.f64 (*.f64 1/120 (*.f64 (sin.f64 b) (pow.f64 a 5))) (*.f64 (sin.f64 b) a))))","(fma.f64 (*.f64 -1/6 (sin.f64 b)) (pow.f64 a 3) (fma.f64 -1/5040 (*.f64 (sin.f64 b) (pow.f64 a 7)) (fma.f64 1/120 (*.f64 (sin.f64 b) (pow.f64 a 5)) (*.f64 (sin.f64 b) a))))","(*.f64 (sin.f64 a) b)","(+.f64 (*.f64 -1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (*.f64 (sin.f64 a) b))","(fma.f64 -1/6 (*.f64 (sin.f64 a) (pow.f64 b 3)) (*.f64 (sin.f64 a) b))","(+.f64 (*.f64 -1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (+.f64 (*.f64 (sin.f64 a) b) (*.f64 1/120 (*.f64 (sin.f64 a) (pow.f64 b 5)))))","(fma.f64 -1/6 (*.f64 (sin.f64 a) (pow.f64 b 3)) (fma.f64 (sin.f64 a) b (*.f64 1/120 (*.f64 (sin.f64 a) (pow.f64 b 5)))))","(+.f64 (*.f64 -1/5040 (*.f64 (sin.f64 a) (pow.f64 b 7))) (+.f64 (*.f64 -1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (+.f64 (*.f64 (sin.f64 a) b) (*.f64 1/120 (*.f64 (sin.f64 a) (pow.f64 b 5))))))","(fma.f64 -1/5040 (*.f64 (sin.f64 a) (pow.f64 b 7)) (fma.f64 -1/6 (*.f64 (sin.f64 a) (pow.f64 b 3)) (fma.f64 (sin.f64 a) b (*.f64 1/120 (*.f64 (sin.f64 a) (pow.f64 b 5))))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 b r) (cos.f64 a))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 (pow.f64 b 2) r)) (pow.f64 (cos.f64 a) 2)) (/.f64 (*.f64 r b) (cos.f64 a)))","(fma.f64 (*.f64 (sin.f64 a) (*.f64 (*.f64 b b) r)) (pow.f64 (cos.f64 a) (neg.f64 2)) (/.f64 (*.f64 b r) (cos.f64 a)))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))))))))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 (*.f64 b b) r)) (pow.f64 (cos.f64 a) 2)) (fma.f64 (pow.f64 b 3) (+.f64 (*.f64 (/.f64 r (cos.f64 a)) (-.f64 -1/6 -1/2)) (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))) (/.f64 (*.f64 b r) (cos.f64 a))))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (+.f64 (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 a) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (cos.f64 a))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))))) (pow.f64 b 4))))))","(fma.f64 (*.f64 (sin.f64 a) (*.f64 (*.f64 b b) r)) (pow.f64 (cos.f64 a) (neg.f64 2)) (-.f64 (fma.f64 (pow.f64 b 3) (+.f64 (*.f64 (/.f64 r (cos.f64 a)) (-.f64 -1/6 -1/2)) (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))) (/.f64 (*.f64 b r) (cos.f64 a))) (*.f64 (fma.f64 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2)) -1/3 (/.f64 (*.f64 (sin.f64 a) (+.f64 (*.f64 (/.f64 r (cos.f64 a)) (-.f64 -1/6 -1/2)) (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))) (neg.f64 (cos.f64 a)))) (pow.f64 b 4))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) (neg.f64 2)) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) (neg.f64 2)) (fma.f64 (neg.f64 (*.f64 a a)) (fma.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)) (neg.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 b) (cbrt.f64 r)) (cos.f64 b)) 3))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 3) (+.f64 (/.f64 (*.f64 (sin.f64 b) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))) (cos.f64 b)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))) (*.f64 1/6 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))))))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (fma.f64 (neg.f64 (pow.f64 a 3)) (fma.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2)) -1/3 (/.f64 (*.f64 (sin.f64 b) (fma.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)) (neg.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 b) (cbrt.f64 r)) (cos.f64 b)) 3)))) (cos.f64 b))) (fma.f64 (neg.f64 (*.f64 a a)) (fma.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)) (neg.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 b) (cbrt.f64 r)) (cos.f64 b)) 3))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(cos.f64 a)","(+.f64 (cos.f64 a) (*.f64 -1 (*.f64 (sin.f64 a) b)))","(fma.f64 (neg.f64 (sin.f64 a)) b (cos.f64 a))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2)))))","(+.f64 (cos.f64 a) (fma.f64 (neg.f64 (sin.f64 a)) b (*.f64 (*.f64 -1/2 (cos.f64 a)) (*.f64 b b))))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2))))))","(+.f64 (cos.f64 a) (fma.f64 (neg.f64 (sin.f64 a)) b (fma.f64 1/6 (*.f64 (sin.f64 a) (pow.f64 b 3)) (*.f64 (*.f64 -1/2 (cos.f64 a)) (*.f64 b b)))))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(cos.f64 b)","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (cos.f64 b))","(fma.f64 (neg.f64 (sin.f64 b)) a (cos.f64 b))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b)))","(fma.f64 (neg.f64 (sin.f64 b)) a (*.f64 (cos.f64 b) (+.f64 (*.f64 -1/2 (*.f64 a a)) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b))))","(fma.f64 (neg.f64 (sin.f64 b)) a (fma.f64 1/6 (*.f64 (sin.f64 b) (pow.f64 a 3)) (*.f64 (cos.f64 b) (+.f64 (*.f64 -1/2 (*.f64 a a)) 1))))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","(cos.f64 (+.f64 a b))"]],"time":251.77001953125,"type":"simplify"},{"compiler":[[6439,1997]],"time":46.9501953125,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 r (cbrt.f64 (sin.f64 b))) (cbrt.f64 (pow.f64 (sin.f64 b) 2))) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","fresh",8.839156573066747],["(/.f64 (pow.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) 3) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","fresh",0.7466229125898929],["(*.f64 (*.f64 r (sin.f64 b)) (/.f64 1 (cos.f64 (+.f64 a b))))","fresh",14.183953770305418],["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))","fresh",14.165379991000137],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cbrt.f64 (cos.f64 b)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 b) 2)) (cos.f64 a)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","fresh",0.40507519536884035],["(*.f64 (sin.f64 b) (/.f64 r (cos.f64 (+.f64 a b))))","fresh",14.164422520305463],["(/.f64 (*.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) r) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))","fresh",14.277116367989887],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 (sin.f64 a) (cbrt.f64 (sin.f64 b)))))))","fresh",0.3378400583118236],["(/.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) r) (cbrt.f64 (sin.f64 b))) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","fresh",8.90593289144584],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","next",0.3252525879159781]],"compiler":[[26,17],[22,15],[14,10],[12,8],[26,17],[12,8],[21,13],[26,17],[26,17],[19,12],[26,17],[22,15],[14,10],[12,8],[26,17],[12,8],[21,13],[26,17],[26,17],[19,12]],"count":[[300,10]],"kept":[{"done":[0,0],"fresh":[9,0],"new":[290,10],"picked":[1,0]}],"min-error":[0.04296875],"time":120.053955078125,"type":"prune"},{"compiler":[[55,12]],"locations":[["(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))",0.12566376953688402,true],["(*.f64 r (sin.f64 b))",0.15234375,false],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))",0.22494125976844204,true],["(*.f64 (sin.f64 a) (sin.f64 b))",0.2421875,false]],"time":11.90283203125,"type":"localize"},{"count":[[2,44]],"series":[["(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","b","-inf",0.17919921875],["(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","b","inf",0.1640625],["(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","b","0",0.18701171875],["(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","a","-inf",0.1640625],["(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","a","inf",0.166015625],["(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))","a","0",0.19189453125],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","a","-inf",0.335205078125],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","a","inf",0.441162109375],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","a","0",0.31591796875],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","b","-inf",0.344970703125],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","b","inf",0.53515625],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","b","0",0.314208984375],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","r","-inf",0.283935546875],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","r","inf",0.465087890625],["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","r","0",0.552978515625]],"time":4.89501953125,"type":"series"},{"count":[[2,167]],"inputs":[["(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) (*.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 0) (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) (*.f64 0 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (cos.f64 (+.f64 a b)))) (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)) (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 2)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (/.f64 -1 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 r (cbrt.f64 (cos.f64 (+.f64 a b)))) (/.f64 (sin.f64 b) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) (/.f64 r (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 b) (/.f64 r (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 r (sin.f64 b)) (/.f64 1 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (+.f64 a b))) (*.f64 r (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (+.f64 a b)) (neg.f64 1/3)) (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (fma.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) 2 (neg.f64 (*.f64 2 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2 (neg.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 r (sin.f64 b)) (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (-.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 (+.f64 a b)))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 (+.f64 a b)))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) 1) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) r) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)) (cbrt.f64 (*.f64 r (sin.f64 b)))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2)) (cbrt.f64 (*.f64 (neg.f64 r) (sin.f64 b)))) (cbrt.f64 (neg.f64 (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 (+.f64 a b)) (neg.f64 1/3)) (*.f64 r (sin.f64 b))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (cbrt.f64 (pow.f64 (*.f64 r (sin.f64 b)) 2))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 r (cbrt.f64 (cos.f64 (+.f64 a b)))) (sin.f64 b)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 r (/.f64 (sin.f64 b) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) 1) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 b) (/.f64 r (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 r) (sin.f64 b))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 2))) (cbrt.f64 (neg.f64 (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 r (sin.f64 b)) -1) (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) 1) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 r (sin.f64 b)) (cbrt.f64 (cos.f64 (+.f64 a b))))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (neg.f64 r) (sin.f64 b)) (cos.f64 (+.f64 a b))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (*.f64 (cos.f64 a) (cos.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (cos.f64 (-.f64 b a)) 1/2)) (*.f64 (cos.f64 (+.f64 a b)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 a b)) (*.f64 (cos.f64 (+.f64 a b)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (+.f64 a b)) 0) (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (*.f64 (neg.f64 (*.f64 (cos.f64 a) (cos.f64 b))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 (cos.f64 a) (cos.f64 b))) -1) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 a b)) (*.f64 0 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 (+.f64 a b))) (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (cos.f64 a) (cos.f64 b)) 0) (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (*.f64 (cos.f64 a) (cos.f64 b)))) (*.f64 (sin.f64 a) (sin.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2) 4) (/.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (neg.f64 (*.f64 (cos.f64 a) (cos.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)) (cbrt.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (+.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 (+.f64 a b)))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2 (neg.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))))) (/.f64 1 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 a) (cos.f64 b)) 2)) (+.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2)) (cbrt.f64 (*.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b)))))) (-.f64 (cbrt.f64 (*.f64 (cos.f64 a) (cos.f64 b))) (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (+.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2 (neg.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (-.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (fma.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) 2 (neg.f64 (*.f64 2 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2 (neg.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))))) 1) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 (+.f64 a b))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2 (neg.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))))) 1) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2 (neg.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))))) (cbrt.f64 4)) (cbrt.f64 16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2 (neg.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))))) (cbrt.f64 16)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2 (neg.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))))) -1) -4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2 (neg.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))))) -2) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2 (neg.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b)))) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) 2 (neg.f64 (*.f64 2 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (cbrt.f64 2)) (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))) (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2) (*.f64 2 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (cbrt.f64 2)) 2) (*.f64 (cbrt.f64 4) (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) (*.f64 (cbrt.f64 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) 2) (*.f64 (sqrt.f64 2) (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) (sqrt.f64 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))) 2) (*.f64 -2 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) (*.f64 -2 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (*.f64 2 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)))) (sqrt.f64 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (cbrt.f64 4)) (*.f64 2 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (cbrt.f64 2)))) (*.f64 2 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2) (*.f64 2 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) -2) (*.f64 2 (neg.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))))) (*.f64 2 -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (*.f64 2 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)))) (sqrt.f64 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (cbrt.f64 4)) (*.f64 2 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2)))) (*.f64 2 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) -2) (*.f64 2 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) (*.f64 2 -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (cbrt.f64 2)) (sqrt.f64 2)) (*.f64 (cbrt.f64 4) (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)))) (*.f64 (cbrt.f64 4) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (cbrt.f64 2)) (cbrt.f64 4)) (*.f64 (cbrt.f64 4) (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2)))) (cbrt.f64 16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (cbrt.f64 2)) 2) (*.f64 (cbrt.f64 4) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))))) (*.f64 (cbrt.f64 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (cbrt.f64 2)) -2) (*.f64 (cbrt.f64 4) (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) (*.f64 (cbrt.f64 4) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (cbrt.f64 4)) (*.f64 (sqrt.f64 2) (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2)))) (*.f64 (sqrt.f64 2) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) 2) (*.f64 (sqrt.f64 2) (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))))) (sqrt.f64 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) -2) (*.f64 (sqrt.f64 2) (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) (*.f64 (sqrt.f64 2) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))) (sqrt.f64 2)) (*.f64 -2 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)))) (*.f64 -2 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))) (cbrt.f64 4)) (*.f64 -2 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (cbrt.f64 2)))) (*.f64 -2 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))) 2) (*.f64 -2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))))) (*.f64 -2 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))) -2) (*.f64 -2 (-.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 2 (neg.f64 (*.f64 2 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))))))) -4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (+.f64 a b)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (+.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 a b))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (+.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (cos.f64 (+.f64 a b))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 a) (cos.f64 b) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 a) (cos.f64 b))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 a) (cos.f64 b)) 2)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 a) (cos.f64 b)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (sin.f64 a)) (cbrt.f64 (sin.f64 b))) (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 (cos.f64 a) (cos.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (sin.f64 a) (sin.f64 b)) (*.f64 (cos.f64 a) (cos.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 b) (neg.f64 (sin.f64 a)) (*.f64 (cos.f64 a) (cos.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 a) (neg.f64 (sin.f64 b)) (*.f64 (cos.f64 a) (cos.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (*.f64 (cos.f64 a) (cos.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 a) (sin.f64 b))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2))) (*.f64 (cos.f64 a) (cos.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 a)) (sin.f64 b) (*.f64 (cos.f64 a) (cos.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 a) (sin.f64 b)) 2)) (*.f64 (cos.f64 a) (cos.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 b)) (sin.f64 a) (*.f64 (cos.f64 a) (cos.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 b) (cbrt.f64 (cos.f64 a))) (cbrt.f64 (pow.f64 (cos.f64 a) 2)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 a)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 a) 2)) (cos.f64 b)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) 1/2 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 a) (cos.f64 b)) 2)) (cbrt.f64 (*.f64 (cos.f64 a) (cos.f64 b))) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 a) (cbrt.f64 (cos.f64 b))) (cbrt.f64 (pow.f64 (cos.f64 b) 2)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 a) (cos.f64 b)) 1 (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 b)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 b) 2)) (cos.f64 a)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (cos.f64 (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (cos.f64 a) (cos.f64 b))) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (+.f64 a b))))))"]],"rules":[["egg-rr",111],["egg-rr",56]],"time":36.968017578125,"type":"rewrite"},{"count":[[211,197]],"inputs":[["(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 b r) (cos.f64 a))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 (pow.f64 b 2) r)) (pow.f64 (cos.f64 a) 2)) (/.f64 (*.f64 r b) (cos.f64 a)))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))))))))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (+.f64 (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 a) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (cos.f64 a))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))))) (pow.f64 b 4))))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 3) (+.f64 (/.f64 (*.f64 (sin.f64 b) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))) (cos.f64 b)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))) (*.f64 1/6 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))))))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(cos.f64 b)","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (cos.f64 b))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b))))","(cos.f64 a)","(+.f64 (cos.f64 a) (*.f64 -1 (*.f64 (sin.f64 a) b)))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2)))))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 b r) (cos.f64 a))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 (pow.f64 b 2) r)) (pow.f64 (cos.f64 a) 2)) (/.f64 (*.f64 r b) (cos.f64 a)))","(fma.f64 (*.f64 (sin.f64 a) (*.f64 (*.f64 b b) r)) (pow.f64 (cos.f64 a) (neg.f64 2)) (/.f64 (*.f64 b r) (cos.f64 a)))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))))))))","(fma.f64 (*.f64 (sin.f64 a) (*.f64 (*.f64 b b) r)) (pow.f64 (cos.f64 a) (neg.f64 2)) (fma.f64 (pow.f64 b 3) (+.f64 (*.f64 (/.f64 r (cos.f64 a)) (-.f64 -1/6 -1/2)) (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))) (/.f64 (*.f64 b r) (cos.f64 a))))","(+.f64 (/.f64 (*.f64 (sin.f64 a) (*.f64 r (pow.f64 b 2))) (pow.f64 (cos.f64 a) 2)) (+.f64 (/.f64 (*.f64 r b) (cos.f64 a)) (+.f64 (*.f64 (pow.f64 b 3) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 a) (-.f64 (*.f64 -1/6 (/.f64 r (cos.f64 a))) (+.f64 (*.f64 -1/2 (/.f64 r (cos.f64 a))) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))))) (cos.f64 a))) (+.f64 (*.f64 1/6 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2))))) (pow.f64 b 4))))))","(fma.f64 (*.f64 (sin.f64 a) (*.f64 (*.f64 b b) r)) (pow.f64 (cos.f64 a) (neg.f64 2)) (-.f64 (fma.f64 (pow.f64 b 3) (+.f64 (*.f64 (/.f64 r (cos.f64 a)) (-.f64 -1/6 -1/2)) (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3))) (/.f64 (*.f64 b r) (cos.f64 a))) (*.f64 (fma.f64 (/.f64 (*.f64 (sin.f64 a) r) (pow.f64 (cos.f64 a) 2)) -1/3 (/.f64 (*.f64 (sin.f64 a) (+.f64 (*.f64 (/.f64 r (cos.f64 a)) (-.f64 -1/6 -1/2)) (/.f64 (*.f64 (pow.f64 (sin.f64 a) 2) r) (pow.f64 (cos.f64 a) 3)))) (neg.f64 (cos.f64 a)))) (pow.f64 b 4))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))","(fma.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) (neg.f64 2)) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))","(fma.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) (neg.f64 2)) (fma.f64 (neg.f64 (*.f64 a a)) (fma.f64 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)) -1/2 (neg.f64 (pow.f64 (/.f64 (*.f64 (cbrt.f64 r) (sin.f64 b)) (cos.f64 b)) 3))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 3) (+.f64 (/.f64 (*.f64 (sin.f64 b) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b))))) (cos.f64 b)) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))) (*.f64 1/6 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2))))))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 a 2) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 3) r) (pow.f64 (cos.f64 b) 3))) (*.f64 -1/2 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))","(+.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) (*.f64 a r)) (pow.f64 (cos.f64 b) 2)) (fma.f64 (neg.f64 (pow.f64 a 3)) (fma.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 b) 2) r) (pow.f64 (cos.f64 b) 2)) -1/3 (/.f64 (*.f64 (sin.f64 b) (fma.f64 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)) -1/2 (neg.f64 (pow.f64 (/.f64 (*.f64 (cbrt.f64 r) (sin.f64 b)) (cos.f64 b)) 3)))) (cos.f64 b))) (fma.f64 (neg.f64 (*.f64 a a)) (fma.f64 (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)) -1/2 (neg.f64 (pow.f64 (/.f64 (*.f64 (cbrt.f64 r) (sin.f64 b)) (cos.f64 b)) 3))) (/.f64 (*.f64 (sin.f64 b) r) (cos.f64 b)))))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 (sin.f64 b) r) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (sin.f64 b) r) (cos.f64 (+.f64 a b)))","(cos.f64 b)","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (cos.f64 b))","(fma.f64 (neg.f64 (sin.f64 b)) a (cos.f64 b))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b)))","(fma.f64 (neg.f64 (sin.f64 b)) a (fma.f64 -1/2 (*.f64 (*.f64 a a) (cos.f64 b)) (cos.f64 b)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 b) a)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 b) (pow.f64 a 3))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 a 2) (cos.f64 b))) (cos.f64 b))))","(-.f64 (fma.f64 (*.f64 (sin.f64 b) (pow.f64 a 3)) 1/6 (fma.f64 -1/2 (*.f64 (*.f64 a a) (cos.f64 b)) (cos.f64 b))) (*.f64 (sin.f64 b) a))","(cos.f64 a)","(+.f64 (cos.f64 a) (*.f64 -1 (*.f64 (sin.f64 a) b)))","(fma.f64 (neg.f64 (sin.f64 a)) b (cos.f64 a))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2)))))","(+.f64 (fma.f64 (neg.f64 (sin.f64 a)) b (cos.f64 a)) (*.f64 (*.f64 -1/2 (cos.f64 a)) (*.f64 b b)))","(+.f64 (cos.f64 a) (+.f64 (*.f64 -1 (*.f64 (sin.f64 a) b)) (+.f64 (*.f64 1/6 (*.f64 (sin.f64 a) (pow.f64 b 3))) (*.f64 -1/2 (*.f64 (cos.f64 a) (pow.f64 b 2))))))","(+.f64 (fma.f64 (neg.f64 (sin.f64 a)) b (cos.f64 a)) (fma.f64 1/6 (*.f64 (sin.f64 a) (pow.f64 b 3)) (*.f64 (*.f64 -1/2 (cos.f64 a)) (*.f64 b b))))"]],"time":164.01416015625,"type":"simplify"},{"compiler":[[8071,2400]],"time":54.281005859375,"type":"eval"},{"alts":[["(/.f64 (pow.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) 3) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","fresh",0.7466229125898929],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","next",0.3190613281475361],["(/.f64 (*.f64 r (sin.f64 b)) (/.f64 (-.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)))) 2))","fresh",14.153661241000137],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cbrt.f64 (cos.f64 a)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 a) 2)) (cos.f64 b)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","fresh",0.36328760976818997],["(*.f64 (sin.f64 b) (/.f64 r (cos.f64 (+.f64 a b))))","fresh",14.164422520305463],["(/.f64 (*.f64 r (sin.f64 b)) (/.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (*.f64 2 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)))) (sqrt.f64 8)))","fresh",14.19795753007386],["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))","fresh",14.165379991000137],["(/.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 r (cbrt.f64 (sin.f64 b)))) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","fresh",8.835844085150518],["(/.f64 (*.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) r) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))","fresh",14.277116367989887],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 (sin.f64 a) (cbrt.f64 (sin.f64 b)))))))","fresh",0.3378400583118236]],"compiler":[[22,15],[19,12],[41,27],[26,17],[12,8],[38,24],[12,8],[26,17],[21,13],[26,17],[22,15],[19,12],[41,27],[26,17],[12,8],[38,24],[12,8],[26,17],[21,13],[26,17]],"count":[[350,10]],"kept":[{"done":[0,0],"fresh":[9,4],"new":[340,6],"picked":[1,0]}],"min-error":[0.04296875],"time":151.614990234375,"type":"prune"},{"compiler":[[56,12]],"locations":[["(fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b))))",0.08719503162065376,false],["(*.f64 r (sin.f64 b))",0.15234375,false],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))",0.22494125976844204,false],["(*.f64 (sin.f64 a) (sin.f64 b))",0.2421875,false]],"time":12.6748046875,"type":"localize"},{"compiler":[[6439,1997]],"time":46.42822265625,"type":"eval"},{"alts":[["(/.f64 (pow.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) 3) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","fresh",0.7466229125898929],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","done",0.3190613281475361],["(/.f64 (*.f64 r (sin.f64 b)) (/.f64 (-.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)))) 2))","fresh",14.153661241000137],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cbrt.f64 (cos.f64 a)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 a) 2)) (cos.f64 b)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","fresh",0.36328760976818997],["(*.f64 (sin.f64 b) (/.f64 r (cos.f64 (+.f64 a b))))","fresh",14.164422520305463],["(/.f64 (*.f64 r (sin.f64 b)) (/.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (*.f64 2 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)))) (sqrt.f64 8)))","fresh",14.19795753007386],["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))","fresh",14.165379991000137],["(/.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 r (cbrt.f64 (sin.f64 b)))) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","fresh",8.835844085150518],["(/.f64 (*.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) r) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))","fresh",14.277116367989887],["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 (sin.f64 a) (cbrt.f64 (sin.f64 b)))))))","fresh",0.3378400583118236]],"compiler":[[22,15],[19,12],[41,27],[26,17],[12,8],[38,24],[12,8],[26,17],[21,13],[26,17]],"count":[[300,10]],"kept":[{"done":[0,0],"fresh":[9,9],"new":[290,0],"picked":[1,1]}],"min-error":[0.04296875],"time":113.7158203125,"type":"prune"},{"accuracy":[0.31906132814753607],"baseline":[0.3190613281475361],"branch":[["r",0.31906132814753607,1],["a",0.3190613281475361,1],["b",0.3190613281475362,1],["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))",0.3190613281475362,1],["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))",0.3190613281475362,1],["(/.f64 (sin.f64 b) (cos.f64 (+.f64 a b)))",0.3190613281475362,1],["(/.f64 (sin.f64 b) (cos.f64 (+.f64 a b)))",0.3190613281475362,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[12,8],[10,7],[10,7],[490,136]],"count":[[28,1]],"inputs":[["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","(/.f64 (*.f64 r (sin.f64 b)) (/.f64 (-.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)))) 2))","(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cbrt.f64 (cos.f64 a)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 a) 2)) (cos.f64 b)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","(/.f64 (*.f64 r (sin.f64 b)) (/.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 a b)) (cos.f64 (-.f64 b a))) (sqrt.f64 2)) (*.f64 2 (/.f64 (-.f64 (cos.f64 (-.f64 b a)) (cos.f64 (+.f64 a b))) (sqrt.f64 2)))) (sqrt.f64 8)))","(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))","(/.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 r (cbrt.f64 (sin.f64 b)))) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(/.f64 (*.f64 (*.f64 r (cbrt.f64 (sin.f64 b))) (cbrt.f64 (pow.f64 (sin.f64 b) 2))) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","(/.f64 (pow.f64 (cbrt.f64 (*.f64 r (sin.f64 b))) 3) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","(*.f64 (*.f64 r (sin.f64 b)) (/.f64 1 (cos.f64 (+.f64 a b))))","(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))","(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cbrt.f64 (cos.f64 b)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 b) 2)) (cos.f64 a)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","(*.f64 (sin.f64 b) (/.f64 r (cos.f64 (+.f64 a b))))","(/.f64 (*.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) r) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))","(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 (sin.f64 a) (cbrt.f64 (sin.f64 b)))))))","(/.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) r) (cbrt.f64 (sin.f64 b))) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(*.f64 (sin.f64 b) (/.f64 r (cos.f64 (+.f64 a b))))","(/.f64 (*.f64 (/.f64 (sin.f64 b) (cbrt.f64 (cos.f64 (+.f64 a b)))) r) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2)))","(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cbrt.f64 (*.f64 (cos.f64 a) (cos.f64 b))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 a) (cos.f64 b)) 2)) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","(/.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 b) 2)) (*.f64 r (cbrt.f64 (sin.f64 b)))) (cos.f64 (+.f64 a b)))","(/.f64 (*.f64 r (sin.f64 b)) (-.f64 (*.f64 (cos.f64 a) (cos.f64 b)) (*.f64 (sin.f64 a) (sin.f64 b))))","(pow.f64 (cbrt.f64 (/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))) 3)","(*.f64 (/.f64 1 (cos.f64 (+.f64 a b))) (*.f64 r (sin.f64 b)))","(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))","(*.f64 (/.f64 r (cbrt.f64 (cos.f64 (+.f64 a b)))) (/.f64 (sin.f64 b) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 a b)) 2))))","(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))","(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))"]],"link":["."],"name":["rsin B"],"oracle":[23.016114347351717],"outputs":[["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))"]],"time":64.218017578125,"times":[["r",8.39208984375],["a",8.222900390625],["b",8.15283203125],["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))",7.97314453125],["(*.f64 r (/.f64 (sin.f64 b) (cos.f64 (+.f64 a b))))",7.789794921875],["(/.f64 (sin.f64 b) (cos.f64 (+.f64 a b)))",8.23095703125],["(/.f64 (sin.f64 b) (cos.f64 (+.f64 a b)))",8.4970703125]],"type":"regimes"},{"compiler":[[19,12]],"inputs":[["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 r (sin.f64 b)) (fma.f64 (cos.f64 b) (cos.f64 a) (neg.f64 (*.f64 (sin.f64 a) (sin.f64 b)))))","(/.f64 (*.f64 r (sin.f64 b)) (cos.f64 (+.f64 a b)))"]],"stop":[["fuel",1]],"time":20.31005859375,"type":"simplify"},{"time":0.015869140625,"type":"soundness"},{"compiler":[[19,12]],"remove-preprocessing":[[]],"time":10.373046875,"type":"end"}]
[{"compiler":[[24,18]],"method":["search"],"sampling":[[1,2.938735877055719e-39,0.0,1.0],[0,0.0,2.938735877055719e-39,1.0]],"time":0.18603515625,"type":"analyze"},{"outcomes":[["body",256,"valid",447.47705078125,8256]],"time":455.01904296875,"type":"sample"},{"compiler":[[17,13]],"inputs":[["0","1"],["(+.f64 (-.f64 (*.f64 9 (pow.f64 x 4)) (pow.f64 y 4)) (*.f64 2 (*.f64 y y)))","(+.f64 (-.f64 (*.f64 9 (pow.f64 y 4)) (pow.f64 x 4)) (*.f64 2 (*.f64 x x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (-.f64 (*.f64 9 (pow.f64 x 4)) (pow.f64 y 4)) (*.f64 2 (*.f64 y y)))","(fma.f64 2 (*.f64 y y) (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))))","(+.f64 (-.f64 (*.f64 9 (pow.f64 y 4)) (pow.f64 x 4)) (*.f64 2 (*.f64 x x)))","(fma.f64 2 (*.f64 x x) (fma.f64 9 (pow.f64 y 4) (neg.f64 (pow.f64 x 4))))"]],"symmetry":[[]],"time":61.83203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (-.f64 (*.f64 9 (pow.f64 x 4)) (pow.f64 y 4)) (*.f64 2 (*.f64 y y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (*.f64 9 (pow.f64 x 4)) (pow.f64 y 4)) (*.f64 2 (*.f64 y y)))","(fma.f64 (*.f64 y y) 2 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))))"]],"time":19.52197265625,"type":"simplify"},{"compiler":[[31,22]],"time":0.52197265625,"type":"eval"},{"alts":[["(fma.f64 (*.f64 y y) 2 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))))","next",52.0]],"compiler":[[16,12],[16,12]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[52.0],"time":0.807861328125,"type":"prune"},{"compiler":[[43,29]],"locations":[["(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))",23.000000171982702,true]],"time":13.1171875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","y","-inf",0.39794921875],["(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","y","inf",0.839111328125],["(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","y","0",0.58984375],["(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","x","-inf",0.68017578125],["(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","x","inf",0.52392578125],["(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","x","0",0.8359375]],"time":3.973876953125,"type":"series"},{"count":[[1,58]],"inputs":[["(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 9 (pow.f64 x 4)) (neg.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 y 4)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 9 (pow.f64 x 4)) (pow.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (+.f64 (*.f64 -9 (pow.f64 x 4)) (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 y 4)) (*.f64 -9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 -9 (pow.f64 x 4)) (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 4 (-.f64 4 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 2 (-.f64 2 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (+.f64 (*.f64 -9 (pow.f64 x 4)) (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 4 (+.f64 4 (+.f64 (*.f64 -9 (pow.f64 x 4)) (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (+.f64 (*.f64 -9 (pow.f64 x 4)) (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 2 (+.f64 2 (+.f64 (*.f64 -9 (pow.f64 x 4)) (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 3 (*.f64 x x)) (*.f64 y y)) (-.f64 (*.f64 3 (*.f64 x x)) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 3 (*.f64 x x)) (*.f64 y y)) (+.f64 (*.f64 3 (*.f64 x x)) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))) (pow.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 2/3) (cbrt.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 y 8)) (-.f64 (cbrt.f64 (*.f64 (pow.f64 x 8) 81)) (*.f64 (cbrt.f64 (neg.f64 (pow.f64 y 4))) (cbrt.f64 (*.f64 9 (pow.f64 x 4)))))) (+.f64 (cbrt.f64 (neg.f64 (pow.f64 y 4))) (cbrt.f64 (*.f64 9 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 2/3) (*.f64 0 (cbrt.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))))))) (+.f64 0 (cbrt.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (pow.f64 x 8) 81)) (-.f64 (cbrt.f64 (pow.f64 y 8)) (*.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 (neg.f64 (pow.f64 y 4)))))) (+.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 (neg.f64 (pow.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (pow.f64 x 8) 81)) (+.f64 (cbrt.f64 (pow.f64 y 8)) (*.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 (pow.f64 y 4))))) (-.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 -9 (pow.f64 x 4)) (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -9 (pow.f64 x 4)) (pow.f64 y 4)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 -9 (pow.f64 x 4)) (pow.f64 y 4))) (neg.f64 (pow.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -9 (pow.f64 x 4)) (pow.f64 y 4)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 -9 (pow.f64 x 4)) (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 9 (pow.f64 x 4))) (cbrt.f64 (*.f64 (pow.f64 x 8) 81)) (neg.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (pow.f64 x 8)) (neg.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 (*.f64 x x)) (*.f64 x x) (neg.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 (*.f64 x x)) (*.f64 3 (*.f64 x x)) (neg.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 9) (*.f64 (cbrt.f64 81) (pow.f64 x 4)) (neg.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4) 9 (neg.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 y 4)) (cbrt.f64 (neg.f64 (pow.f64 y 8))) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 3 (pow.f64 x 4)) (neg.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 y 4) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 4) -1 (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 y y)) (*.f64 y y) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) (neg.f64 (*.f64 y y)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (pow.f64 y 4))) (cbrt.f64 (pow.f64 y 8)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 y 8)) (cbrt.f64 (neg.f64 (pow.f64 y 4))) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 9 (pow.f64 x 4)) 1 (neg.f64 (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 y 4)) 1 (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 y 4)) (*.f64 9 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 9 (pow.f64 x 4)) (neg.f64 (pow.f64 y 4)))))))"]],"rules":[["egg-rr",58]],"time":39.736083984375,"type":"rewrite"},{"count":[[82,62]],"inputs":[["(*.f64 -1 (pow.f64 y 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(*.f64 -1 (pow.f64 y 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(*.f64 -1 (pow.f64 y 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (pow.f64 y 4))","(neg.f64 (pow.f64 y 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(*.f64 9 (pow.f64 x 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(*.f64 -1 (pow.f64 y 4))","(neg.f64 (pow.f64 y 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(*.f64 -1 (pow.f64 y 4))","(neg.f64 (pow.f64 y 4))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))","(+.f64 (*.f64 9 (pow.f64 x 4)) (*.f64 -1 (pow.f64 y 4)))","(fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4)))"]],"time":78.537841796875,"type":"simplify"},{"compiler":[[1177,804]],"time":16.251220703125,"type":"eval"},{"alts":[["(fma.f64 (*.f64 y y) 2 (fma.f64 (neg.f64 (*.f64 y y)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))))","next",0]],"compiler":[[20,11],[20,11]],"count":[[63,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[62,1],"picked":[1,0]}],"min-error":[0],"time":4.60400390625,"type":"prune"},{"compiler":[[53,25]],"time":11.849853515625,"type":"localize"},{"compiler":[[2,2]],"time":0.10302734375,"type":"eval"},{"alts":[["(fma.f64 (*.f64 y y) 2 (fma.f64 (neg.f64 (*.f64 y y)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))))","done",0]],"compiler":[[20,11]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.368896484375,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(+.f64 (-.f64 (*.f64 9 (pow.f64 x 4)) (pow.f64 y 4)) (*.f64 2 (*.f64 y y)))",0,1],["(*.f64 9 (pow.f64 x 4))",0,1],["(pow.f64 x 4)",0,1]],"compiler":[[3,2],[3,2],[17,13],[7,6],[5,4],[49,30]],"count":[[3,1]],"inputs":[["(fma.f64 (*.f64 y y) 2 (fma.f64 (neg.f64 (*.f64 y y)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))))","(fma.f64 (*.f64 y y) 2 (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))))","(+.f64 (-.f64 (*.f64 9 (pow.f64 x 4)) (pow.f64 y 4)) (*.f64 2 (*.f64 y y)))"]],"link":["."],"name":["From Rump in a 1983 paper"],"oracle":[52.0],"outputs":[["(fma.f64 (*.f64 y y) 2 (fma.f64 (neg.f64 (*.f64 y y)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))))"]],"time":8.843017578125,"times":[["x",1.472900390625],["y",1.456787109375],["(+.f64 (-.f64 (*.f64 9 (pow.f64 x 4)) (pow.f64 y 4)) (*.f64 2 (*.f64 y y)))",1.72216796875],["(*.f64 9 (pow.f64 x 4))",1.566162109375],["(pow.f64 x 4)",1.546875]],"type":"regimes"},{"compiler":[[20,11]],"inputs":[["(fma.f64 (*.f64 y y) 2 (fma.f64 (neg.f64 (*.f64 y y)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (*.f64 y y) 2 (fma.f64 (neg.f64 (*.f64 y y)) (*.f64 y y) (*.f64 9 (pow.f64 x 4))))","(fma.f64 y (+.f64 y y) (fma.f64 9 (pow.f64 x 4) (neg.f64 (pow.f64 y 4))))"]],"stop":[["done",1]],"time":21.18701171875,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[20,11]],"remove-preprocessing":[[]],"time":10.148193359375,"type":"end"}]
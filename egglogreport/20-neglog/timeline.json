[{"compiler":[[9,8]],"method":["search"],"sampling":[[12,0.2493898868560791,0.0009760856628417969,0.7496340274810791],[11,0.2489018440246582,0.0019521713256835938,0.7491459846496582],[10,0.2479257583618164,0.0039043426513671875,0.7481698989868164],[9,0.2459735870361328,0.007808685302734375,0.7462177276611328],[8,0.24206924438476563,0.01561737060546875,0.7423133850097656],[7,0.23426055908203125,0.0312347412109375,0.7345046997070313],[6,0.2186431884765625,0.062469482421875,0.7188873291015625],[5,0.187408447265625,0.12493896484375,0.687652587890625],[4,0.12493896484375,0.2498779296875,0.62518310546875],[3,0.0,0.499755859375,0.500244140625],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.554931640625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.6201171875,19],["body",256,"valid",339.041015625,8256]],"time":347.24609375,"type":"sample"},{"compiler":[[8,7]],"inputs":[["0"],["(neg.f64 (log.f64 (-.f64 (/.f64 1 x) 1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(neg.f64 (log.f64 (-.f64 (/.f64 1 x) 1)))","(neg.f64 (log.f64 (/.f64 (-.f64 1 x) x)))"]],"symmetry":[[]],"time":55.154052734375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(neg.f64 (log.f64 (-.f64 (/.f64 1 x) 1)))"]],"method":["egg-herbie"],"outputs":[["(neg.f64 (log.f64 (-.f64 (/.f64 1 x) 1)))","(neg.f64 (log.f64 (/.f64 (-.f64 1 x) x)))"]],"time":20.072998046875,"type":"simplify"},{"compiler":[[15,12]],"time":0.385986328125,"type":"eval"},{"alts":[["(neg.f64 (log.f64 (/.f64 (-.f64 1 x) x)))","next",0]],"compiler":[[8,6],[8,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0],"time":0.804931640625,"type":"prune"},{"compiler":[[24,16]],"locations":[["(/.f64 (-.f64 1 x) x)",0.00390625,true]],"time":7.22900390625,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (-.f64 1 x) x)","x","-inf",0.408935546875],["(/.f64 (-.f64 1 x) x)","x","inf",0.387939453125],["(/.f64 (-.f64 1 x) x)","x","0",0.345947265625]],"time":1.18505859375,"type":"series"},{"count":[[1,149]],"inputs":[["(/.f64 (-.f64 1 x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 x) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 x) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1 x) x) 0) (/.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 x) x) (*.f64 (/.f64 (-.f64 1 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 x) (neg.f64 x)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) (*.f64 (/.f64 1 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 1 x) x)) (/.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1 x) x) (*.f64 0 (/.f64 (-.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 x) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (/.f64 1 x) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 1 x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 -1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 x)) (/.f64 (+.f64 -1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1 (fma.f64 x x (+.f64 1 x))) x) (/.f64 (/.f64 (pow.f64 x 3) (fma.f64 x x (+.f64 1 x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 x) (/.f64 (+.f64 -1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1 x) x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) x) 2)) (cbrt.f64 (/.f64 (-.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 x) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 -1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -1 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) x) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (+.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 x)) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 (fma.f64 x x (+.f64 1 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 x)) (cbrt.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) x) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) x) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x -3) -1) (+.f64 (pow.f64 x -2) (-.f64 1 (*.f64 (/.f64 1 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x -3) 1) (+.f64 (pow.f64 x -2) (/.f64 (+.f64 1 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (neg.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 x))) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 x) (*.f64 x (neg.f64 x))) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (cbrt.f64 (*.f64 x x))) (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x x)))) (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 x) (*.f64 (neg.f64 x) x)) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) (cbrt.f64 x)) (neg.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 x)) (cbrt.f64 (*.f64 x x))) (*.f64 (*.f64 x x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (neg.f64 x)) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 x) (cbrt.f64 (*.f64 x x))) (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 x) x) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (*.f64 x x))) (*.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) x) (*.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (neg.f64 x)) (*.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (/.f64 1 x))) (*.f64 (fma.f64 x x (+.f64 1 x)) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) -1) (*.f64 (fma.f64 x x (+.f64 1 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (cbrt.f64 (/.f64 1 x))) (*.f64 (neg.f64 (fma.f64 x x (+.f64 1 x))) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) -1) (*.f64 (neg.f64 (fma.f64 x x (+.f64 1 x))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) 1) (*.f64 (neg.f64 (fma.f64 x x (+.f64 1 x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (*.f64 x x)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (+.f64 -1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 x 3))) (*.f64 x (*.f64 (fma.f64 x x (+.f64 1 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 x (-.f64 1 x))) (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (fma.f64 x x (+.f64 1 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 -1 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 1 x) (cbrt.f64 x))) (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (-.f64 1 (pow.f64 x 3))) (*.f64 (neg.f64 x) (*.f64 (fma.f64 x x (+.f64 1 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (-.f64 1 x)) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (neg.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (fma.f64 x x (+.f64 1 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) x) 2)) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) x) (neg.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) x) 2))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 1 x) x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 x) (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 x)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 x)) (cbrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) x) (*.f64 (cbrt.f64 (*.f64 x x)) x)) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) 1) (*.f64 (fma.f64 x x (+.f64 1 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) (cbrt.f64 x)) x) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 x)) x) (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 x)) (neg.f64 x)) (neg.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) x) (cbrt.f64 (*.f64 x x))) (*.f64 (fma.f64 x x (+.f64 1 x)) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) x) x) (*.f64 (fma.f64 x x (+.f64 1 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) x) (neg.f64 x)) (*.f64 (fma.f64 x x (+.f64 1 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (*.f64 x (neg.f64 (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 x 3)) (*.f64 (neg.f64 x) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (neg.f64 x) (neg.f64 (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (-.f64 1 (pow.f64 x 3)) x)) (*.f64 (fma.f64 x x (+.f64 1 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (-.f64 1 x) (cbrt.f64 x))) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 x (-.f64 1 x))) (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -1 x)) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 1 (pow.f64 x 3)) x)) (*.f64 (cbrt.f64 (*.f64 x x)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 1 x) (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 1 x)) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 (-.f64 1 (pow.f64 x 3)) x)) (*.f64 (neg.f64 x) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (*.f64 x (-.f64 1 x))) (neg.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -1 x)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) x) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 x) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 1 x) x)) (cbrt.f64 (pow.f64 (-.f64 1 x) 2))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) x) 2)) (cbrt.f64 (+.f64 -1 x))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) x) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) x) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (-.f64 1 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 x) (+.f64 -1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 -1 x)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 x)) 1) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) x) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) x)) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) x) 2))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 1 x)) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 1 x) x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 x) (cbrt.f64 x)) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 x) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 x)) (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 x)) 1) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) x) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) 1) (*.f64 (cbrt.f64 (*.f64 x x)) -1)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) 1) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 (*.f64 x x)) x)) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 x) (neg.f64 x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (+.f64 -1 x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) x)) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 x) (cbrt.f64 x))) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 -1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 -1 x) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 x)) (neg.f64 (cbrt.f64 (pow.f64 x -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (pow.f64 x -2)) -1)))))"]],"rules":[["egg-rr",149]],"time":25.738037109375,"type":"rewrite"},{"count":[[161,151]],"inputs":[["(/.f64 1 x)","(-.f64 (/.f64 1 x) 1)","(-.f64 (/.f64 1 x) 1)","(-.f64 (/.f64 1 x) 1)","-1","(-.f64 (/.f64 1 x) 1)","(-.f64 (/.f64 1 x) 1)","(-.f64 (/.f64 1 x) 1)","-1","(-.f64 (/.f64 1 x) 1)","(-.f64 (/.f64 1 x) 1)","(-.f64 (/.f64 1 x) 1)"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 x)","(-.f64 (/.f64 1 x) 1)","(/.f64 (-.f64 1 x) x)","(-.f64 (/.f64 1 x) 1)","(/.f64 (-.f64 1 x) x)","(-.f64 (/.f64 1 x) 1)","(/.f64 (-.f64 1 x) x)","-1","(-.f64 (/.f64 1 x) 1)","(/.f64 (-.f64 1 x) x)","(-.f64 (/.f64 1 x) 1)","(/.f64 (-.f64 1 x) x)","(-.f64 (/.f64 1 x) 1)","(/.f64 (-.f64 1 x) x)","-1","(-.f64 (/.f64 1 x) 1)","(/.f64 (-.f64 1 x) x)","(-.f64 (/.f64 1 x) 1)","(/.f64 (-.f64 1 x) x)","(-.f64 (/.f64 1 x) 1)","(/.f64 (-.f64 1 x) x)"]],"time":49.268798828125,"type":"simplify"},{"compiler":[[2317,1451]],"time":28.125,"type":"eval"},{"alts":[["(neg.f64 (log.f64 (/.f64 (-.f64 1 x) x)))","done",0]],"compiler":[[8,6]],"count":[[152,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[151,0],"picked":[1,1]}],"min-error":[0],"time":41.6171875,"type":"prune"},{"accuracy":[0],"baseline":[0],"branch":[["x",0,1],["(neg.f64 (log.f64 (-.f64 (/.f64 1 x) 1)))",0,1],["(log.f64 (-.f64 (/.f64 1 x) 1))",0,1],["(-.f64 (/.f64 1 x) 1)",0,1],["(/.f64 1 x)",0,1]],"compiler":[[2,1],[8,7],[7,6],[6,5],[4,3],[15,12]],"count":[[2,1]],"inputs":[["(neg.f64 (log.f64 (/.f64 (-.f64 1 x) x)))","(neg.f64 (log.f64 (-.f64 (/.f64 1 x) 1)))"]],"link":["."],"name":["neg log"],"oracle":[0],"outputs":[["(neg.f64 (log.f64 (/.f64 (-.f64 1 x) x)))"]],"time":12.010009765625,"times":[["x",2.18701171875],["(neg.f64 (log.f64 (-.f64 (/.f64 1 x) 1)))",2.35400390625],["(log.f64 (-.f64 (/.f64 1 x) 1))",2.285888671875],["(-.f64 (/.f64 1 x) 1)",2.2900390625],["(/.f64 1 x)",2.241943359375]],"type":"regimes"},{"compiler":[[8,6]],"inputs":[["(neg.f64 (log.f64 (/.f64 (-.f64 1 x) x)))"]],"method":["egg-herbie"],"outputs":[["(neg.f64 (log.f64 (/.f64 (-.f64 1 x) x)))","(log.f64 (/.f64 x (-.f64 1 x)))"]],"stop":[["done",1]],"time":19.1728515625,"type":"simplify"},{"time":0.01416015625,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":8.244873046875,"type":"end"}]
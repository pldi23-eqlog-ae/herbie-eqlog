[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.7921945555135608,0.20682912040501833,0.0009763240814208984],[11,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[10,0.6087800525128841,0.39024362340569496,0.0009763240814208984],[9,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[8,0.31219489872455597,0.6868287771940231,0.0009763240814208984],[7,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[6,0.0,0.9990236759185791,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":49.4228515625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.072021484375,2],["body",256,"valid",309.56103515625,8256]],"time":317.343994140625,"type":"sample"},{"compiler":[[11,7]],"inputs":[["0","1"],["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))","(/.f64 (-.f64 y x) (*.f64 (*.f64 y 2) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))","(/.f64 (-.f64 x y) (*.f64 (+.f64 x x) y))","(/.f64 (-.f64 y x) (*.f64 (*.f64 y 2) x))","(/.f64 (-.f64 y x) (*.f64 (+.f64 x x) y))"]],"symmetry":[[]],"time":59.217041015625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))","(/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))"]],"time":18.988037109375,"type":"simplify"},{"compiler":[[20,11]],"time":0.35986328125,"type":"eval"},{"alts":[["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))","next",14.8175750598401]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[14.8175750598401],"time":1.921142578125,"type":"prune"},{"compiler":[[25,13]],"locations":[["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))",14.239796596750539,true]],"time":5.702880859375,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))","y","-inf",0.44091796875],["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))","y","inf",0.764892578125],["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))","y","0",0.47412109375],["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))","x","-inf",0.551025390625],["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))","x","inf",0.590087890625],["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))","x","0",0.552001953125]],"time":3.467041015625,"type":"series"},{"count":[[1,151]],"inputs":[["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) (*.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 0) (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) (*.f64 0 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 y y)) (/.f64 -1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (+.f64 x x)) (/.f64 1 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 y y)) (*.f64 (/.f64 1 (*.f64 (+.f64 x x) y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (*.f64 (+.f64 x x) y)) (neg.f64 y)) (/.f64 1 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 y x) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -2 (*.f64 x y))) (/.f64 (-.f64 y x) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (+.f64 x x)) (/.f64 x (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (+.f64 x x) y)) (/.f64 (-.f64 y x) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x (*.f64 (+.f64 x x) y)) (pow.f64 (*.f64 (+.f64 x x) y) 2)) (/.f64 (*.f64 (*.f64 (+.f64 x x) y) y) (pow.f64 (*.f64 (+.f64 x x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 y y)) (/.f64 1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (*.f64 (+.f64 x x) y))) (/.f64 (-.f64 x y) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (/.f64 (-.f64 x y) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) (cbrt.f64 (*.f64 (+.f64 x x) y))) (pow.f64 (cbrt.f64 (*.f64 (+.f64 x x) y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) x) (cbrt.f64 y)) (/.f64 1 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2)) (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) (/.f64 1 (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 x y)) (+.f64 x x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 x y)) x) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 x y)) y) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) (/.f64 1 (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 (+.f64 x x) y)) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) x) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 (*.f64 (-.f64 x y) 1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 y x) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) (+.f64 x x)) (/.f64 (cbrt.f64 (-.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) (*.f64 (+.f64 x x) y)) (cbrt.f64 (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) (*.f64 (+.f64 x x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 -2 (*.f64 x y))) (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) y) (/.f64 (cbrt.f64 (-.f64 x y)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) (+.f64 y y)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) (+.f64 y y)) (/.f64 (cbrt.f64 (-.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))) (cbrt.f64 (/.f64 1 (*.f64 (+.f64 x x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (*.f64 (+.f64 x x) y) (neg.f64 (*.f64 (*.f64 (+.f64 x x) y) y))) (/.f64 1 (pow.f64 (*.f64 (+.f64 x x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) (+.f64 x x)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x x)) (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) y) (/.f64 1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) x) (/.f64 1 (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) x) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) y) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (-.f64 y x)) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 x) (-.f64 x y)) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (-.f64 x y)) y) (cbrt.f64 (pow.f64 (-.f64 x y) 2))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (-.f64 x y)) x) (cbrt.f64 (pow.f64 (-.f64 x y) 2))) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y x) (/.f64 1 y)) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) y)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) x) 1) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) y) 1) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x y) (*.f64 (+.f64 x x) y)) (*.f64 (+.f64 x x) y)) (*.f64 (+.f64 x x) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x y) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))) (*.f64 (+.f64 x x) (/.f64 y (cbrt.f64 (*.f64 (+.f64 x x) y))))) (*.f64 (+.f64 x x) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x y) (*.f64 -2 (*.f64 x y))) (*.f64 -2 (*.f64 x y))) (*.f64 (+.f64 x x) (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x y) (+.f64 y y)) (*.f64 (+.f64 x x) (/.f64 y x))) (*.f64 (+.f64 x x) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x y) (+.f64 x x)) (+.f64 x x)) (*.f64 (*.f64 x x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (+.f64 x x)) (*.f64 (+.f64 x x) y)) (*.f64 y y)) (*.f64 (*.f64 (+.f64 x x) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (+.f64 x x)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))) (*.f64 y (/.f64 y (cbrt.f64 (*.f64 (+.f64 x x) y))))) (*.f64 y (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (+.f64 x x)) (*.f64 -2 (*.f64 x y))) (*.f64 y (neg.f64 y))) (*.f64 y (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (+.f64 x x)) (+.f64 y y)) (*.f64 y (/.f64 y x))) (*.f64 y (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))) (*.f64 (*.f64 (+.f64 x x) y) (/.f64 y (cbrt.f64 (*.f64 (+.f64 x x) y))))) (*.f64 (*.f64 (+.f64 x x) y) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x x) y) (*.f64 (*.f64 (+.f64 x x) y) (/.f64 y x))) (*.f64 (*.f64 (+.f64 x x) y) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x y) (*.f64 (*.f64 (+.f64 x x) y) (/.f64 y (+.f64 x x)))) (*.f64 (*.f64 (+.f64 x x) y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (*.f64 -2 (*.f64 x y))) (*.f64 (*.f64 (+.f64 x x) y) (neg.f64 y))) (*.f64 (*.f64 (+.f64 x x) y) (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (*.f64 (+.f64 x x) y)) (*.f64 (*.f64 -2 (*.f64 x y)) y)) (*.f64 (*.f64 -2 (*.f64 x y)) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) y) (*.f64 (*.f64 -2 (*.f64 x y)) (/.f64 y (+.f64 x x)))) (*.f64 (*.f64 -2 (*.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))) (*.f64 (*.f64 -2 (*.f64 x y)) (/.f64 y (cbrt.f64 (*.f64 (+.f64 x x) y))))) (*.f64 (*.f64 -2 (*.f64 x y)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (*.f64 -2 (*.f64 x y))) (*.f64 (*.f64 -2 (*.f64 x y)) (neg.f64 y))) (*.f64 (*.f64 -2 (*.f64 x y)) (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -2 (*.f64 x y)) (*.f64 (*.f64 -2 (*.f64 x y)) (/.f64 y x))) (*.f64 (*.f64 -2 (*.f64 x y)) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (+.f64 x x)) (*.f64 -2 (*.f64 x y))) (*.f64 (*.f64 -2 (*.f64 x y)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x x) y) (*.f64 (+.f64 y y) y)) (*.f64 (+.f64 y y) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (*.f64 (+.f64 y y) (/.f64 y (+.f64 x x)))) (*.f64 (+.f64 y y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) (*.f64 (+.f64 y y) (/.f64 y (cbrt.f64 (*.f64 (+.f64 x x) y))))) (*.f64 (+.f64 y y) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -2 (*.f64 x y)) (*.f64 (+.f64 y y) (neg.f64 y))) (*.f64 (+.f64 y y) (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 y y) (*.f64 (+.f64 y y) (/.f64 y x))) (*.f64 (+.f64 y y) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x x) (+.f64 y y)) (*.f64 (+.f64 y y) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (*.f64 (+.f64 x x) y))) (*.f64 (+.f64 x x) y)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) y)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (*.f64 (+.f64 x x) y))) y) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) (/.f64 y (+.f64 x x)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (*.f64 (+.f64 x x) y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) (/.f64 y (cbrt.f64 (*.f64 (+.f64 x x) y))))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (*.f64 (+.f64 x x) y))) (*.f64 -2 (*.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (*.f64 (+.f64 x x) y))) (+.f64 y y)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) (/.f64 y x))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 (*.f64 (+.f64 x x) y))) (+.f64 x x)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (cbrt.f64 (+.f64 x x))) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) x)) (cbrt.f64 (pow.f64 (-.f64 x y) 2))) (*.f64 (cbrt.f64 y) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 x y) 1/2) 1) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 (+.f64 x x))) 1) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x (*.f64 (+.f64 x x) y) (neg.f64 (*.f64 (*.f64 (+.f64 x x) y) y)))) (neg.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 x y) x)) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 x y) y)) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) (*.f64 -2 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (cbrt.f64 (*.f64 (+.f64 x x) y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x y) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (*.f64 (+.f64 x x) y) (neg.f64 (*.f64 (*.f64 (+.f64 x x) y) y))) (pow.f64 (*.f64 (+.f64 x x) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (+.f64 x x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 (+.f64 x x) y))) (-.f64 x y)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2)) (cbrt.f64 (-.f64 x y))) (cbrt.f64 (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2)) (cbrt.f64 (-.f64 y x))) (cbrt.f64 (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2)) (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) (cbrt.f64 (pow.f64 (-.f64 x y) 2))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 (-.f64 x y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (*.f64 (-.f64 x y) 1/2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 (-.f64 x y) (cbrt.f64 (+.f64 x x)))) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (-.f64 x y)) (+.f64 x x)) (cbrt.f64 (pow.f64 (-.f64 x y) 2))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))) (cbrt.f64 (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2))) (cbrt.f64 (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 y x)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2))) (cbrt.f64 (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) x)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) x) (/.f64 1 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 x y) 1/2) (/.f64 1 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 (+.f64 x x))) (/.f64 1 y)) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) x) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y x) (+.f64 x x)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 (*.f64 (+.f64 x x) y))) 1) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x (*.f64 (+.f64 x x) y) (neg.f64 (*.f64 (*.f64 (+.f64 x x) y) y))) 1) (pow.f64 (*.f64 (+.f64 x x) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) (+.f64 y y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (+.f64 y y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x y) y) (*.f64 (+.f64 x x) (/.f64 y (+.f64 x x)))) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (+.f64 x x)) y) (*.f64 y (/.f64 y (+.f64 x x)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (+.f64 x x)) (+.f64 x x)) y) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (+.f64 x x)) (*.f64 (+.f64 x x) y)) (*.f64 (*.f64 (+.f64 x x) y) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 x y) (cbrt.f64 (*.f64 (+.f64 x x) y)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) x) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 y x) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 y x) (+.f64 x x)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 y x) (*.f64 (+.f64 x x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) (/.f64 x (+.f64 y y)) (/.f64 -1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 x) y) (/.f64 (cbrt.f64 (*.f64 x x)) (+.f64 x x)) (/.f64 -1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (+.f64 x x) y)) (/.f64 -1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (+.f64 y y))) (cbrt.f64 (pow.f64 (/.f64 1 (+.f64 y y)) 2)) (/.f64 -1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (*.f64 (+.f64 x x) y)) (/.f64 -1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 x) x) (/.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y y)) (/.f64 -1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 x) (+.f64 x x)) (/.f64 (cbrt.f64 (*.f64 x x)) y) (/.f64 -1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 (*.f64 (+.f64 x x) y))) (/.f64 x (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))) (/.f64 -1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (+.f64 y y)) (/.f64 -1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (/.f64 x (+.f64 x x)) (/.f64 -1 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x x)) (/.f64 x y) (/.f64 -1 (+.f64 x x)))))))"]],"rules":[["egg-rr",151]],"time":29.653076171875,"type":"rewrite"},{"count":[[175,155]],"inputs":[["(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))"]],"time":83.511962890625,"type":"simplify"},{"compiler":[[2800,973]],"time":21.56201171875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","fresh",7.596035009768442],["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","next",0.015625],["(fma.f64 (/.f64 1 x) (/.f64 x (+.f64 y y)) (/.f64 -1 (+.f64 x x)))","fresh",7.64453125]],"compiler":[[13,8],[9,7],[16,10],[13,8],[9,7],[16,10]],"count":[[156,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[155,3],"picked":[1,0]}],"min-error":[0],"time":38.66796875,"type":"prune"},{"compiler":[[19,13]],"locations":[["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))",0.015625,true]],"time":4.72998046875,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","x","-inf",0.194091796875],["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","x","inf",0.411865234375],["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","x","0",0.346923828125],["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","y","-inf",0.22314453125],["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","y","inf",0.27587890625],["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","y","0",0.43505859375]],"time":1.97314453125,"type":"series"},{"count":[[1,99]],"inputs":[["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/2 y) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/2 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) (*.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) 0) (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) (*.f64 0 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))) (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1/2 x) (/.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/2 y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 -1/2 y) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 -1/2 y) (/.f64 1/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (/.f64 1/4 (*.f64 y y))) (-.f64 (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (cbrt.f64 (/.f64 -1/4 (*.f64 y x))))) (+.f64 (cbrt.f64 (/.f64 1/2 y)) (cbrt.f64 (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (-.f64 (cbrt.f64 (/.f64 1/4 (*.f64 y y))) (cbrt.f64 (/.f64 -1/4 (*.f64 y x))))) (+.f64 (cbrt.f64 (/.f64 -1/2 x)) (cbrt.f64 (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/2 x (*.f64 y -1/2)) (/.f64 1 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) 2)) (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 y x)) (fma.f64 1/2 x (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (+.f64 (/.f64 1 x) (/.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (/.f64 -1 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (+.f64 (/.f64 -1 y) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (/.f64 1 y) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/2 x (*.f64 y 1/2)) (/.f64 1 (neg.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) y) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) (cbrt.f64 (*.f64 y x))) (pow.f64 (cbrt.f64 (*.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) (cbrt.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (*.f64 (*.f64 y y) -1/8)) (*.f64 x (cbrt.f64 (/.f64 1/8 y)))) (*.f64 (cbrt.f64 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 (*.f64 y 2)) x) (*.f64 x (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y 2) (/.f64 x -1/2)) (*.f64 (/.f64 x -1/2) (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (/.f64 x -1/2) (cbrt.f64 (/.f64 1/8 y)))) (*.f64 (/.f64 x -1/2) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 y (*.f64 (/.f64 x -1/2) 1/2)) (*.f64 (/.f64 x -1/2) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 y) (*.f64 (/.f64 x -1/2) -1/2)) (*.f64 (/.f64 x -1/2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (*.f64 y 2)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 x) (cbrt.f64 (/.f64 1/8 y)))) (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 -1/8 x)) y) (*.f64 (cbrt.f64 (*.f64 x x)) 1/2)) (*.f64 (cbrt.f64 (*.f64 x x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 -1/8 x)) (*.f64 y 2)) (cbrt.f64 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 -1/8 x)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 x x)) -1/2)) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 -1/8 x)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (/.f64 1/8 y)))) (*.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 (cbrt.f64 (*.f64 x x))) (*.f64 (neg.f64 y) (cbrt.f64 (/.f64 -1/8 x)))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 (/.f64 x -1/2)) (neg.f64 y)) (*.f64 (neg.f64 y) (/.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 x -1/2) (*.f64 y 2)) (*.f64 (*.f64 y 2) (/.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 y 2) (cbrt.f64 (/.f64 -1/8 x)))) (*.f64 (*.f64 y 2) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (*.f64 (*.f64 y 2) -1/2)) (*.f64 (*.f64 y 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 x) (*.f64 (*.f64 y 2) 1/2)) (*.f64 (*.f64 y 2) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 y)) (cbrt.f64 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (/.f64 -1/8 x)))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 y)) x) (cbrt.f64 (*.f64 (*.f64 y y) -1/8))) (*.f64 (cbrt.f64 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 y)) (/.f64 x -1/2)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 y)) (neg.f64 x)) (*.f64 (cbrt.f64 (*.f64 y y)) 1/2)) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (cbrt.f64 (*.f64 x x))) (*.f64 y (cbrt.f64 (/.f64 -1/8 x)))) (*.f64 y (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (/.f64 x -1/2)) y) (*.f64 y (/.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 x (*.f64 y -1/2)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/2 x (*.f64 y 1/2)) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) 2)) (cbrt.f64 (fma.f64 1/2 x (*.f64 y -1/2)))) (cbrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -1/2 x (*.f64 y 1/2)) 1) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) y) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 1/2 x (*.f64 y -1/2))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) 2))) (cbrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 -1/2 x (*.f64 y 1/2)) y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) (*.f64 y (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 -1/2 x (*.f64 y 1/2)) x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) (neg.f64 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 -1/2 x (*.f64 y 1/2)) (neg.f64 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) y) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) y) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 -1/2 y) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 1/2 x (*.f64 y -1/2)) (neg.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 -1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/2 y)) (cbrt.f64 (/.f64 1/4 (*.f64 y y))) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1/2 x)) (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 1 y) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (/.f64 1 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (/.f64 (sqrt.f64 1/2) y) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) 1/2 (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (/.f64 (cbrt.f64 1/4) y) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1/2 y) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 y)) (cbrt.f64 (/.f64 1/8 (*.f64 y y))) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 1/2) (cbrt.f64 y)) (/.f64 (sqrt.f64 1/2) (cbrt.f64 (*.f64 y y))) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/4 (*.f64 y y))) (cbrt.f64 (/.f64 1/2 y)) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (/.f64 -1 y) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (/.f64 (cbrt.f64 1/4) x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) -1/2 (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (cbrt.f64 (/.f64 -1/2 x)) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1/2 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 -1 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (/.f64 -1/8 (*.f64 x x))) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1/2 y) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 -1/2 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 y) 1 (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1/2 x) 1 (/.f64 1/2 y))))))"]],"rules":[["egg-rr",99]],"time":25.19677734375,"type":"rewrite"},{"count":[[123,102]],"inputs":[["(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))"]],"time":82.944091796875,"type":"simplify"},{"compiler":[[1385,861]],"time":17.635009765625,"type":"eval"},{"alts":[["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","next",7.596035009768442],["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","done",0.015625],["(fma.f64 (/.f64 1 x) (/.f64 x (+.f64 y y)) (/.f64 -1 (+.f64 x x)))","fresh",7.64453125]],"compiler":[[13,8],[9,7],[16,10],[13,8],[16,10]],"count":[[105,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[102,0],"picked":[1,1]}],"min-error":[0],"time":23.677001953125,"type":"prune"},{"compiler":[[32,14]],"locations":[["(*.f64 (/.f64 1 y) (-.f64 x y))",0.1640625,true],["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))",7.068065306330579,true]],"time":6.801025390625,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (/.f64 1 y) (-.f64 x y))","x","-inf",0.262939453125],["(*.f64 (/.f64 1 y) (-.f64 x y))","x","inf",0.224853515625],["(*.f64 (/.f64 1 y) (-.f64 x y))","x","0",0.197998046875],["(*.f64 (/.f64 1 y) (-.f64 x y))","y","-inf",0.25390625],["(*.f64 (/.f64 1 y) (-.f64 x y))","y","inf",0.143798828125],["(*.f64 (/.f64 1 y) (-.f64 x y))","y","0",0.26708984375],["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","x","-inf",0.1669921875],["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","x","inf",0.19189453125],["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","x","0",0.15185546875],["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","y","-inf",0.1669921875],["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","y","inf",0.197998046875],["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","y","0",0.197998046875]],"time":2.56201171875,"type":"series"},{"count":[[2,192]],"inputs":[["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","(*.f64 (/.f64 1 y) (-.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 x) (/.f64 x y)) (*.f64 (/.f64 1/2 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 0) (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) (*.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x y) (/.f64 1/2 x)) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) (*.f64 0 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 x y) (+.f64 x x)) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -2 x)) (/.f64 (/.f64 (-.f64 x y) y) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (*.f64 y (+.f64 x x))) (/.f64 y (*.f64 y (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 y (+.f64 x x))) (/.f64 (/.f64 (-.f64 x y) y) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (-.f64 x y) y) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2)) (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (/.f64 1/2 x))) (/.f64 (-.f64 x y) (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 (-.f64 x y) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 2 y)) (/.f64 (-.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (-.f64 x y) y) 8)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x y) (cbrt.f64 (/.f64 1/2 x))) (/.f64 (/.f64 1 y) (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) (/.f64 (/.f64 1/2 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x y) 1/2) (/.f64 (/.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 x) (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/2 x)) (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (/.f64 (-.f64 x y) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) (+.f64 x x)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 y) x) (*.f64 (-.f64 x y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 y) (cbrt.f64 (*.f64 (*.f64 x x) 4))) (*.f64 (-.f64 x y) (cbrt.f64 (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) x) (/.f64 1 (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1/2 x) y) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) x) (cbrt.f64 (/.f64 (/.f64 (-.f64 x y) y) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) (/.f64 1/2 x)) (cbrt.f64 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (-.f64 x y) y) x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) (cbrt.f64 (*.f64 (*.f64 x x) 4))) (*.f64 (/.f64 1 y) (cbrt.f64 (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (*.f64 (*.f64 x x) 4))) (cbrt.f64 (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x))) (pow.f64 (cbrt.f64 (+.f64 x x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (-.f64 x y) y) 2) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (-.f64 x y) y) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (-.f64 x y) y) (*.f64 -2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/2 x) (/.f64 (-.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y x) y) 2) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 2)) (*.f64 (cbrt.f64 4) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (*.f64 8 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 x)) (*.f64 2 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (-.f64 x y) y) 2) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (-.f64 x y) y) 2) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y x) (cbrt.f64 (/.f64 1/2 x))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y x) 1/2) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x y) (cbrt.f64 (/.f64 1/2 x))) (*.f64 y (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 y)) 1) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 y)) (cbrt.f64 (/.f64 1/2 x))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 y)) 1/2) (*.f64 (cbrt.f64 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 y)) -1) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (/.f64 (-.f64 x y) (cbrt.f64 y))) (*.f64 x (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (-.f64 x y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (-.f64 y x)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (-.f64 x y) (cbrt.f64 y))) (*.f64 (*.f64 -2 x) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/2 x)) (/.f64 (-.f64 x y) (cbrt.f64 y))) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/2 x)) (-.f64 x y)) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/2 x)) (-.f64 y x)) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (-.f64 x y) y) 2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) y) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (+.f64 x x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x))) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) y) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x y) (*.f64 y (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1/2 x) (-.f64 y x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1/2 x) (/.f64 (-.f64 x y) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 x y) (cbrt.f64 (/.f64 1/2 x))) (/.f64 1 y)) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (/.f64 1/2 x))) (-.f64 x y)) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (/.f64 (-.f64 x y) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (*.f64 2 y)) (-.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (-.f64 x y) y) 8)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2)) (cbrt.f64 (/.f64 (-.f64 x y) y))) (cbrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2)) (cbrt.f64 (/.f64 (-.f64 y x) y))) (cbrt.f64 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/2 x)) (/.f64 (-.f64 x y) y)) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 x y) 1/2) (/.f64 1 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2))) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y x) (/.f64 1/2 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 y)) (/.f64 1/2 x)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) (/.f64 1/2 x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y x) (/.f64 -1/2 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x y) (/.f64 (/.f64 1 y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (-.f64 x y) (+.f64 x x))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (-.f64 x y) (+.f64 x x))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 (-.f64 x y) (cbrt.f64 (*.f64 (*.f64 x x) 4)))) (cbrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 x y) (/.f64 (/.f64 1 y) (cbrt.f64 (*.f64 (*.f64 x x) 4)))) (cbrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x))) 1) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (+.f64 x x)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (-.f64 x y) y) 2) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 (-.f64 x y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2))) (cbrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 y x) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 2))) (cbrt.f64 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (*.f64 (*.f64 x x) 4))) (cbrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x))) 1) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y x) y) (cbrt.f64 (+.f64 x x))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (*.f64 8 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) -1) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) (+.f64 x x)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) (+.f64 x x)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) (+.f64 x x)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (-.f64 x y) y) 2) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x y) (/.f64 (*.f64 y (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) (*.f64 (neg.f64 y) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x y) (*.f64 (neg.f64 y) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) (*.f64 y (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) (*.f64 (*.f64 -2 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x y) (*.f64 (*.f64 -2 x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (cbrt.f64 y)) (*.f64 (+.f64 x x) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) (*.f64 (+.f64 x x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x y) (*.f64 (*.f64 y (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x)))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) (neg.f64 (*.f64 y (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 x y) (+.f64 x x))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (-.f64 x y) y) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 y x) (/.f64 (/.f64 1/2 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 y) (/.f64 (-.f64 x y) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (-.f64 x y) y) (*.f64 -2 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1/2 x) (/.f64 (-.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 x y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 x y) y) 0) (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x y) y) (*.f64 (/.f64 (-.f64 x y) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 x y) y)) (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x y) y) (*.f64 0 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x y) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 (/.f64 x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) (cbrt.f64 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 x y)) y) (cbrt.f64 (pow.f64 (-.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (cbrt.f64 (pow.f64 y -2)) (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -2)) (/.f64 (-.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) y) (cbrt.f64 (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 y -2)) (-.f64 x y)) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) (/.f64 (cbrt.f64 (-.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y x) y)) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) (cbrt.f64 (-.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (cbrt.f64 (pow.f64 (-.f64 x y) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 y -2)) (-.f64 x y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 y -2)) (-.f64 x y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x y) (*.f64 y y)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 x y) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) x -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 y) -1)))))"]],"rules":[["egg-rr",56],["egg-rr",136]],"time":31.73095703125,"type":"rewrite"},{"count":[[240,198]],"inputs":[["(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","-1","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","-1","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","-1","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","-1","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","-1","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","-1","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)"]],"time":153.89501953125,"type":"simplify"},{"compiler":[[2764,1076]],"time":25.8740234375,"type":"eval"},{"alts":[["(/.f64 (+.f64 -1 (/.f64 x y)) (+.f64 x x))","next",7.6015625],["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","done",7.596035009768442],["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","done",0.015625]],"compiler":[[11,7],[13,8],[9,7],[11,7]],"count":[[201,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[198,1],"picked":[1,1]}],"min-error":[0],"time":56.51708984375,"type":"prune"},{"compiler":[[25,10]],"locations":[["(+.f64 -1 (/.f64 x y))",0.00390625,true],["(/.f64 (+.f64 -1 (/.f64 x y)) (+.f64 x x))",7.068065306330579,true]],"time":4.9599609375,"type":"localize"},{"count":[[2,48]],"series":[["(+.f64 -1 (/.f64 x y))","y","-inf",0.136962890625],["(+.f64 -1 (/.f64 x y))","y","inf",0.161865234375],["(+.f64 -1 (/.f64 x y))","y","0",0.14111328125],["(+.f64 -1 (/.f64 x y))","x","-inf",0.360107421875],["(+.f64 -1 (/.f64 x y))","x","inf",0.156982421875],["(+.f64 -1 (/.f64 x y))","x","0",0.14208984375],["(/.f64 (+.f64 -1 (/.f64 x y)) (+.f64 x x))","y","-inf",0.416015625],["(/.f64 (+.f64 -1 (/.f64 x y)) (+.f64 x x))","y","inf",0.27001953125],["(/.f64 (+.f64 -1 (/.f64 x y)) (+.f64 x x))","y","0",0.324951171875],["(/.f64 (+.f64 -1 (/.f64 x y)) (+.f64 x x))","x","-inf",0.93505859375],["(/.f64 (+.f64 -1 (/.f64 x y)) (+.f64 x x))","x","inf",0.442138671875],["(/.f64 (+.f64 -1 (/.f64 x y)) (+.f64 x x))","x","0",0.44189453125]],"time":4.072021484375,"type":"series"},{"count":[[2,184]],"inputs":[["(/.f64 (+.f64 -1 (/.f64 x y)) (+.f64 x x))","(+.f64 -1 (/.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) (*.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 0) (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 x) (/.f64 x y)) (*.f64 (/.f64 1/2 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1/2 x) -1) (*.f64 (/.f64 1/2 x) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) (*.f64 0 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x))) (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x y) (/.f64 1/2 x)) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/2 x) (*.f64 (/.f64 x y) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -2 x)) (*.f64 (/.f64 (-.f64 x y) y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 x x)) (*.f64 (/.f64 (-.f64 x y) y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 x y) (+.f64 x x)) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (/.f64 (-.f64 x y) y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 2)) (cbrt.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (-.f64 x y) y) 8)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 x) (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (/.f64 (-.f64 x y) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/2 x)) (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (/.f64 (-.f64 x y) y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) (/.f64 1/2 x)) (cbrt.f64 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 x y) y) (/.f64 -1/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/2 x) (/.f64 (-.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) x) (cbrt.f64 (/.f64 (/.f64 (-.f64 x y) y) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (*.f64 (*.f64 x x) 4))) (cbrt.f64 (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (-.f64 x y) y) x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (/.f64 x y) 2) 1/2) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (/.f64 1 (*.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (/.f64 1/2 x)) (/.f64 1 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x))) (pow.f64 (cbrt.f64 (+.f64 x x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (-.f64 1 (pow.f64 (/.f64 x y) 3))) (*.f64 (*.f64 -2 x) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (+.f64 -1 (pow.f64 (/.f64 x y) 3))) (*.f64 x (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (-.f64 1 (pow.f64 (/.f64 x y) 3))) (*.f64 x (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/2 x)) (+.f64 -1 (pow.f64 (/.f64 x y) 3))) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/2 x)) (-.f64 1 (pow.f64 (/.f64 x y) 3))) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) 1/2) (*.f64 (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) 1) (*.f64 (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) -1) (*.f64 (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) (cbrt.f64 (/.f64 1/2 x))) (*.f64 (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)) (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) 1/2) (*.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) -1) (*.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (cbrt.f64 (/.f64 1/2 x))) (*.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1) (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) 1) (*.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) (neg.f64 (*.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1) (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) y) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) y) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (/.f64 x y) 2) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x))) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (*.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2))) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1/2 x) (-.f64 1 (pow.f64 (/.f64 x y) 3))) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 2)) (cbrt.f64 (/.f64 (-.f64 x y) y))) (cbrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 2)) (cbrt.f64 (/.f64 (-.f64 y x) y))) (cbrt.f64 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (-.f64 x y) y) 8)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (/.f64 (-.f64 x y) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/2 x)) (/.f64 (-.f64 x y) y)) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x))) 1) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (/.f64 (/.f64 x y) 2) 1/2) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (*.f64 (*.f64 x x) 4))) (cbrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) (/.f64 1/2 x))) (cbrt.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) (/.f64 1/2 x)) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (cbrt.f64 (pow.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 2))) (cbrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 y x) y)) (cbrt.f64 (pow.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 2))) (cbrt.f64 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (/.f64 1/2 x)) (cbrt.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (/.f64 (/.f64 x y) 2) 1/2) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (/.f64 (/.f64 x y) 2) 1/2) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (/.f64 (/.f64 x y) 2) 1/2) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 x)) (*.f64 2 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) -1) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 2)) (*.f64 (cbrt.f64 4) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (*.f64 8 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (*.f64 8 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y x) y) 2) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y x) y) (cbrt.f64 (+.f64 x x))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x))) 1) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (/.f64 (*.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1) (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) (*.f64 (*.f64 -2 x) (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) (*.f64 (+.f64 x x) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (*.f64 (*.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1) (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (/.f64 (/.f64 x y) 2) 1/2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (/.f64 1/2 x))) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 (-.f64 x y) y) (cbrt.f64 (/.f64 1/2 x)))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (/.f64 1/2 x)) (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (/.f64 1/2 x)) 1) (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) (/.f64 -1/2 x)) (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (/.f64 1/2 x)) 1) (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 x y) y) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (/.f64 (-.f64 x y) y) (/.f64 -1/2 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 (-.f64 y x) y) (/.f64 -1/2 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 (neg.f64 x) (/.f64 (-.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x y) y) (*.f64 (/.f64 (-.f64 x y) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 x y) y) 0) (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x y) y) (*.f64 0 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 x y) y)) (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (-.f64 (neg.f64 (*.f64 x x)) (/.f64 (-.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x y) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (+.f64 x (/.f64 (-.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (/.f64 (-.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x x) (+.f64 (*.f64 x x) (/.f64 (-.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)) (/.f64 (-.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 x y) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (/.f64 1 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) (cbrt.f64 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)) (+.f64 -1 (pow.f64 (/.f64 x y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y x) y)) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) (/.f64 1 (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (neg.f64 (/.f64 x y))))) (+.f64 -1 (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (-.f64 1 (cbrt.f64 (neg.f64 (/.f64 x y))))) (+.f64 (cbrt.f64 (/.f64 x y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (+.f64 1 (cbrt.f64 (/.f64 x y)))) (-.f64 (cbrt.f64 (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2)) (cbrt.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)))) (cbrt.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2))) (cbrt.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) 1) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 (/.f64 x y) 3) 3)) (/.f64 1 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))) (+.f64 1 (+.f64 (pow.f64 (/.f64 x y) 6) (pow.f64 (/.f64 x y) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (cbrt.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 x y) y) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (/.f64 x y) 3)) (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (neg.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 y)) 1) (*.f64 (cbrt.f64 (*.f64 y y)) -1)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 x) y) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 y) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 y (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (cbrt.f64 (*.f64 y y))) (/.f64 x (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 x) (neg.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 (/.f64 x y) 3) 3)) 1) (*.f64 (+.f64 1 (+.f64 (pow.f64 (/.f64 x y) 6) (pow.f64 (/.f64 x y) 3))) (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x y) 3)) 1) (*.f64 (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (-.f64 1 (pow.f64 (/.f64 x y) 3))) (fma.f64 (/.f64 x y) (/.f64 (+.f64 y x) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 x y) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (/.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 -1 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) x -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 x (cbrt.f64 (pow.f64 y -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) 0 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) 0 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) 0 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 0 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 (-.f64 x y) y))))))"]],"rules":[["egg-rr",81],["egg-rr",103]],"time":32.3349609375,"type":"rewrite"},{"count":[[232,190]],"inputs":[["(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","-1","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","-1","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","-1","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)","(-.f64 (/.f64 x y) 1)"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 1/2 y)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(-.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","-1","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(/.f64 x y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","-1","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","-1","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)","(-.f64 (/.f64 x y) 1)","(/.f64 (-.f64 x y) y)"]],"time":154.161865234375,"type":"simplify"},{"compiler":[[3183,1326]],"time":29.748046875,"type":"eval"},{"alts":[["(/.f64 (+.f64 -1 (/.f64 x y)) (+.f64 x x))","done",7.6015625],["(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","done",7.596035009768442],["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","done",0.015625]],"compiler":[[11,7],[13,8],[9,7]],"count":[[193,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[190,0],"picked":[1,1]}],"min-error":[0],"time":53.048095703125,"type":"prune"},{"accuracy":[0.015625],"baseline":[0.015625],"branch":[["x",0.015625,1],["y",0.015625,1],["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))",0.015625,1]],"compiler":[[3,2],[3,2],[11,7],[52,28]],"count":[[5,1]],"inputs":[["(/.f64 (+.f64 -1 (/.f64 x y)) (+.f64 x x))","(/.f64 (*.f64 (/.f64 1 y) (-.f64 x y)) (+.f64 x x))","(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))","(fma.f64 (/.f64 1 x) (/.f64 x (+.f64 y y)) (/.f64 -1 (+.f64 x x)))","(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))"]],"link":["."],"name":["Linear.Projection:inversePerspective from linear-1.19.1.3, B"],"oracle":[22.37845381960855],"outputs":[["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))"]],"time":10.7939453125,"times":[["x",3.232177734375],["y",3.506103515625],["(/.f64 (-.f64 x y) (*.f64 (*.f64 x 2) y))",2.99609375]],"type":"regimes"},{"compiler":[[9,7]],"inputs":[["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (/.f64 1/2 y) (/.f64 -1/2 x))"]],"stop":[["done",1]],"time":20.160888671875,"type":"simplify"},{"time":0.01318359375,"type":"soundness"},{"compiler":[[9,7]],"remove-preprocessing":[[]],"time":7.95703125,"type":"end"}]
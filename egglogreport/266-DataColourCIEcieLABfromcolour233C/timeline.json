[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.910888671875,"type":"analyze"},{"outcomes":[["body",256,"valid",260.244140625,8256]],"time":267.72412109375,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0","1"],["(+.f64 x (/.f64 y 500))","(+.f64 y (/.f64 x 500))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 x (/.f64 y 500))","(fma.f64 y 1/500 x)","(+.f64 y (/.f64 x 500))","(fma.f64 x 1/500 y)"]],"symmetry":[[]],"time":59.305908203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 x (/.f64 y 500))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 y 500))","(fma.f64 y 1/500 x)"]],"time":17.72900390625,"type":"simplify"},{"compiler":[[11,7]],"time":0.339111328125,"type":"eval"},{"alts":[["(fma.f64 y 1/500 x)","fresh",0.07421875],["(+.f64 x (/.f64 y 500))","next",0.00390625]],"compiler":[[6,4],[7,5],[6,4],[7,5]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0],"time":1.14794921875,"type":"prune"},{"compiler":[[13,8]],"locations":[["(+.f64 x (/.f64 y 500))",0.00390625,true]],"time":3.1640625,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 x (/.f64 y 500))","y","-inf",0.195068359375],["(+.f64 x (/.f64 y 500))","y","inf",0.31884765625],["(+.f64 x (/.f64 y 500))","y","0",0.238037109375],["(+.f64 x (/.f64 y 500))","x","-inf",0.174072265625],["(+.f64 x (/.f64 y 500))","x","inf",0.2890625],["(+.f64 x (/.f64 y 500))","x","0",0.31494140625]],"time":1.60400390625,"type":"series"},{"count":[[1,40]],"inputs":[["(+.f64 x (/.f64 y 500))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y 1/500) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y 1/500 x) 0) (fma.f64 y 1/500 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1/500 x) (*.f64 (fma.f64 y 1/500 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y 1/500 x)) (fma.f64 y 1/500 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1/500 x) (*.f64 0 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 -1/500 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y 1/500 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y 1/500 x)) (cbrt.f64 (pow.f64 (fma.f64 y 1/500 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 1/250000 (*.f64 y y))) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 (*.f64 x y) 1/500)))) (+.f64 (cbrt.f64 (*.f64 y 1/500)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (*.f64 1/250000 (*.f64 y y))) (cbrt.f64 (*.f64 (*.f64 x y) 1/500)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y 1/500))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y 1/500 x) 2)) (cbrt.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y 1/500 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y 1/500 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y 1/500 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y 1/500 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 1/500 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 1/500 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 1/500 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y 1/500 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y 1/500 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y 1/500)) (cbrt.f64 (*.f64 1/250000 (*.f64 y y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1/500 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/250000 (*.f64 y y))) (cbrt.f64 (*.f64 y 1/500)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 y) (sqrt.f64 1/500)) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 1/500)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/500 y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 y y) 1/125000000)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) -1/500 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 -1/500 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/500) (*.f64 y (cbrt.f64 1/250000)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/500) (*.f64 y (sqrt.f64 1/500)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y 1/500) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y 1/500) 1 x)))))"]],"rules":[["egg-rr",40]],"time":19.199951171875,"type":"rewrite"},{"count":[[64,43]],"inputs":[["(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)"]],"time":107.135986328125,"type":"simplify"},{"compiler":[[366,230]],"time":6.5849609375,"type":"eval"},{"alts":[["(fma.f64 y 1/500 x)","next",0.07421875],["(+.f64 x (/.f64 y 500))","done",0.00390625]],"compiler":[[6,4],[7,5],[6,4]],"count":[[45,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[43,1],"picked":[1,1]}],"min-error":[0],"time":6.81005859375,"type":"prune"},{"compiler":[[9,5]],"locations":[["(fma.f64 y 1/500 x)",0.07421875,true]],"time":2.346923828125,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 y 1/500 x)","x","-inf",0.216796875],["(fma.f64 y 1/500 x)","x","inf",0.152099609375],["(fma.f64 y 1/500 x)","x","0",0.3330078125],["(fma.f64 y 1/500 x)","y","-inf",0.284912109375],["(fma.f64 y 1/500 x)","y","inf",0.216064453125],["(fma.f64 y 1/500 x)","y","0",0.2529296875]],"time":1.52294921875,"type":"series"},{"count":[[1,39]],"inputs":[["(fma.f64 y 1/500 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y 1/500) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 1/500 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y 1/500 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 -1/500 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y 1/500) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 -1/500 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y 1/500 x) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y 1/500 x)) 4)) (cbrt.f64 (fma.f64 y 1/500 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y 1/500 x))) (pow.f64 (pow.f64 (fma.f64 y 1/500 x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y 1/500 x)) (pow.f64 (fma.f64 y 1/500 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y 1/500 x) 2/3) (cbrt.f64 (fma.f64 y 1/500 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 -1/500 y) x)) (neg.f64 (pow.f64 (fma.f64 y 1/500 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y 1/500) 2/3) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 y 1/500)) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 y 1/500)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (*.f64 y 1/500) 2/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y 1/500))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y 1/500))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 -1/500 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 -1/500 y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y 1/500 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y 1/500 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y 1/500 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y 1/500 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1/500 y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y 1/500 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 1/500 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y 1/500 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 -1/500 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y 1/500 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1/500 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) 1/500) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 1/500)) (cbrt.f64 1/250000) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y 1/500)) (pow.f64 (*.f64 y 1/500) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 1/500)) (sqrt.f64 1/500) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/500 y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y 1/500) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y 1/500))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y 1/500) 1 x)))))"]],"rules":[["egg-rr",39]],"time":35.656982421875,"type":"rewrite"},{"count":[[63,42]],"inputs":[["x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","x","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)","(+.f64 (*.f64 1/500 y) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(*.f64 1/500 y)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","x","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)","(+.f64 (*.f64 1/500 y) x)","(fma.f64 1/500 y x)"]],"time":107.68701171875,"type":"simplify"},{"compiler":[[350,238]],"time":6.02001953125,"type":"eval"},{"alts":[["(fma.f64 y 1/500 x)","done",0.07421875],["(+.f64 x (/.f64 y 500))","done",0.00390625]],"compiler":[[6,4],[7,5]],"count":[[44,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[42,0],"picked":[1,1]}],"min-error":[0],"time":5.79296875,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["(+.f64 x (/.f64 y 500))",0.00390625,1],["(/.f64 y 500)",0.00390625,1]],"compiler":[[3,2],[3,2],[7,5],[5,4],[15,9]],"count":[[3,1]],"inputs":[["(fma.f64 y 1/500 x)","(fma.f64 y 1/500 x)","(+.f64 x (/.f64 y 500))"]],"link":["."],"name":["Data.Colour.CIE:cieLAB from colour-2.3.3, C"],"oracle":[0.078125],"outputs":[["(+.f64 x (/.f64 y 500))"]],"time":12.300048828125,"times":[["x",2.764892578125],["y",2.739990234375],["(+.f64 x (/.f64 y 500))",2.81689453125],["(/.f64 y 500)",3.34619140625]],"type":"regimes"},{"compiler":[[7,5]],"inputs":[["(+.f64 x (/.f64 y 500))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 y 500))","(fma.f64 y 1/500 x)"]],"stop":[["done",1]],"time":18.02197265625,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.5458984375,"type":"end"}]
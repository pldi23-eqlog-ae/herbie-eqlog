[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.7808685302734375,0.2186431884765625,0.00048828125],[11,0.7808685302734375,0.2186431884765625,0.00048828125],[10,0.7808685302734375,0.2186431884765625,0.00048828125],[9,0.7808685302734375,0.2186431884765625,0.00048828125],[8,0.7808685302734375,0.2186431884765625,0.00048828125],[7,0.7808685302734375,0.2186431884765625,0.00048828125],[6,0.7496337890625,0.2498779296875,0.00048828125],[5,0.7496337890625,0.2498779296875,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":36.076904296875,"type":"analyze"},{"outcomes":[["body",4096,"valid",37.72705078125,122],["body",512,"valid",141.554931640625,1553],["body",1024,"valid",161.70166015625,1095],["body",2048,"valid",668.809326171875,2083],["body",256,"valid",150.552001953125,3403]],"time":1169.194091796875,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0"],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))"]],"symmetry":[[]],"time":52.943115234375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))"]],"time":18.8408203125,"type":"simplify"},{"compiler":[[17,11]],"time":0.359130859375,"type":"eval"},{"alts":[["(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","next",31.278835788268132],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","fresh",31.462158312468016]],"compiler":[[9,7],[9,6],[9,7],[9,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[31.185019682352618],"time":1.266845703125,"type":"prune"},{"compiler":[[21,13]],"locations":[["(pow.f64 x -2)",0.00390625,true],["(cos.f64 x)",0.0390625,true],["(-.f64 1 (cos.f64 x))",1.4801368839066142,true],["(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))",19.79514367743358,true]],"time":7.549072265625,"type":"localize"},{"count":[[4,32]],"series":[["(pow.f64 x -2)","x","-inf",0.572998046875],["(pow.f64 x -2)","x","inf",0.425048828125],["(pow.f64 x -2)","x","0",0.47998046875],["(cos.f64 x)","x","-inf",0.160888671875],["(cos.f64 x)","x","inf",0.14990234375],["(cos.f64 x)","x","0",0.2099609375],["(-.f64 1 (cos.f64 x))","x","-inf",0.139892578125],["(-.f64 1 (cos.f64 x))","x","inf",0.14599609375],["(-.f64 1 (cos.f64 x))","x","0",0.239990234375],["(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","x","-inf",0.347900390625],["(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","x","inf",0.489013671875],["(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","x","0",0.448974609375]],"time":3.9521484375,"type":"series"},{"count":[[4,147]],"inputs":[["(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","(-.f64 1 (cos.f64 x))","(cos.f64 x)","(pow.f64 x -2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) (*.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 0) (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) (*.f64 0 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 (cos.f64 x) -1) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -2) (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -2)) (*.f64 (cbrt.f64 (pow.f64 x -4)) (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) (*.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2/3) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x -4)) (-.f64 1 (cos.f64 x))) (cbrt.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2/3) (pow.f64 x -2)) (cbrt.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x -2) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (/.f64 (pow.f64 x -2) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 1) (/.f64 (pow.f64 x -2) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) (pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 2/3) (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (cbrt.f64 (-.f64 1 (cos.f64 x)))) (pow.f64 (-.f64 1 (cos.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (cos.f64 x)) (cbrt.f64 (pow.f64 x -2))) (cbrt.f64 (pow.f64 x -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -4)) (*.f64 (-.f64 1 (cos.f64 x)) (cbrt.f64 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2/3) (*.f64 (pow.f64 x -2) (cbrt.f64 (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -2)) (+.f64 (cos.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 x) -1) (neg.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (/.f64 1 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 (cos.f64 x) -1) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cos.f64 x) -1) (pow.f64 x -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (+.f64 -1 (pow.f64 (cos.f64 x) 3))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x -2)) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (*.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2/3) (pow.f64 x -2))) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (cos.f64 x) -1) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 (cos.f64 x) -1) (pow.f64 x -2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 (pow.f64 x -4)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -4)) (cbrt.f64 (pow.f64 x -2)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 x -2)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 x -2) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -2) 1 (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (cos.f64 x)) (*.f64 (-.f64 1 (cos.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (cos.f64 x)) 0) (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (cos.f64 x)) (*.f64 0 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (cos.f64 x))) (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 3) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (cos.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (cos.f64 x)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)) (/.f64 (pow.f64 (cos.f64 x) 3) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (cos.f64 x)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (cos.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (cos.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (cos.f64 x) -1))) (pow.f64 (-.f64 1 (cos.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1) 1) (/.f64 (-.f64 1 (cos.f64 x)) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) 2) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cos.f64 x)))) (-.f64 1 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) (pow.f64 (-.f64 1 (cos.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2/3) (cbrt.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (cos.f64 x) 3)) (/.f64 1 (neg.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (/.f64 1 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (cos.f64 x) -1)) (neg.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (cos.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (/.f64 1 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) 1) (*.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (cos.f64 x) 3)) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 1) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1) (*.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1) (pow.f64 (cos.f64 x) 3))) (*.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2/3) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (cos.f64 x) 3)) 1) (neg.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (pow.f64 (-.f64 1 (cos.f64 x)) 2/3)) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (cos.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 1 (cos.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 x) (*.f64 (cos.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) 0) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 x) (*.f64 0 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (*.f64 (pow.f64 x -2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -2) 0) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (*.f64 0 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 x -2)) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 (pow.f64 x -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -4)) (cbrt.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 x -2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 x -2) 3))))))"]],"rules":[["egg-rr",17],["egg-rr",17],["egg-rr",63],["egg-rr",50]],"time":35.82080078125,"type":"rewrite"},{"count":[[179,171]],"inputs":[["1/2","(+.f64 1/2 (*.f64 -1/24 (pow.f64 x 2)))","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (+.f64 (*.f64 -1/40320 (pow.f64 x 6)) (*.f64 1/720 (pow.f64 x 4)))))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(*.f64 1/2 (pow.f64 x 2))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/24 (pow.f64 x 4)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (+.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 -1/40320 (pow.f64 x 8)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["1/2","(+.f64 1/2 (*.f64 -1/24 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/24 1/2)","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 1/2 (fma.f64 1/720 (pow.f64 x 4) (*.f64 -1/24 (*.f64 x x))))","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (+.f64 (*.f64 -1/40320 (pow.f64 x 6)) (*.f64 1/720 (pow.f64 x 4)))))","(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4)))))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","(*.f64 1/2 (pow.f64 x 2))","(*.f64 1/2 (*.f64 x x))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/24 (pow.f64 x 4)))","(fma.f64 (pow.f64 x 4) -1/24 (*.f64 1/2 (*.f64 x x)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (+.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 -1/40320 (pow.f64 x 8)))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (fma.f64 1/720 (pow.f64 x 6) (*.f64 -1/40320 (pow.f64 x 8)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1/24 (*.f64 -1/2 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 1) (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/720 (pow.f64 x 6))))","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)","(/.f64 1 (pow.f64 x 2))","(pow.f64 x -2)"]],"time":100.02099609375,"type":"simplify"},{"compiler":[[2576,1759]],"time":33.701171875,"type":"eval"},{"alts":[["(*.f64 (/.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (pow.f64 (-.f64 1 (cos.f64 x)) 2/3)) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (pow.f64 x -2))","fresh",31.311891432008775],["(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","next",31.302452377513998],["(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 (cbrt.f64 (pow.f64 x -2)) 3))","fresh",31.36311428853673],["(fma.f64 (cbrt.f64 (pow.f64 x -4)) (cbrt.f64 (pow.f64 x -2)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))","fresh",39.47214344254629],["(*.f64 (-.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 3)) (pow.f64 x -2))","fresh",31.43347114851214],["(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4)))))","fresh",32.20377518620566],["(+.f64 (pow.f64 x -2) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))","fresh",31.32615814770573],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","fresh",31.462158312468016],["(*.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 3) (pow.f64 x -2))","fresh",31.379707025513824],["(*.f64 (*.f64 (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) 2) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (pow.f64 x -2))","fresh",31.389570340949888],["(pow.f64 (pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 3) 1/3)","fresh",44.05669102989689]],"compiler":[[29,21],[20,14],[12,10],[17,13],[12,10],[18,14],[12,9],[9,6],[12,10],[33,25],[13,11],[29,21],[20,14],[12,10],[17,13],[12,10],[18,14],[12,9],[9,6],[12,10],[33,25],[13,11]],"count":[[173,11]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[171,10],"picked":[1,0]}],"min-error":[0.12381183407072564],"time":38.389892578125,"type":"prune"},{"compiler":[[61,38]],"locations":[["(pow.f64 (cos.f64 x) 3)",0.36468515629507237,true],["(+.f64 1 (cos.f64 x))",0.42241055626447865,true],["(-.f64 1 (pow.f64 (cos.f64 x) 3))",1.3675734958827122,true],["(*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))",19.802956177433575,true]],"time":15.135986328125,"type":"localize"},{"count":[[4,28]],"series":[["(pow.f64 (cos.f64 x) 3)","x","-inf",0.168212890625],["(pow.f64 (cos.f64 x) 3)","x","inf",0.14306640625],["(pow.f64 (cos.f64 x) 3)","x","0",0.180908203125],["(+.f64 1 (cos.f64 x))","x","-inf",0.203857421875],["(+.f64 1 (cos.f64 x))","x","inf",0.155029296875],["(+.f64 1 (cos.f64 x))","x","0",0.199951171875],["(-.f64 1 (pow.f64 (cos.f64 x) 3))","x","-inf",0.14599609375],["(-.f64 1 (pow.f64 (cos.f64 x) 3))","x","inf",0.150146484375],["(-.f64 1 (pow.f64 (cos.f64 x) 3))","x","0",0.227783203125],["(*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))","x","-inf",0.620849609375],["(*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))","x","inf",0.68701171875],["(*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))","x","0",0.703125]],"time":3.721923828125,"type":"series"},{"count":[[4,204]],"inputs":[["(*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))","(-.f64 1 (pow.f64 (cos.f64 x) 3))","(+.f64 1 (cos.f64 x))","(pow.f64 (cos.f64 x) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (*.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 0) (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (*.f64 0 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (*.f64 (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -2)) (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 -2))) (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (pow.f64 x -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 -2))) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (cbrt.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)) (pow.f64 x -2)) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x -2) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))) (/.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))) (/.f64 (pow.f64 x -2) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) 1) (/.f64 (pow.f64 x -2) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 2)) (cbrt.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (cbrt.f64 (pow.f64 x -2))) (cbrt.f64 (pow.f64 x (*.f64 2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)) (*.f64 (pow.f64 x -2) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x (*.f64 2 -2))) (*.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (cbrt.f64 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -2)) (+.f64 (pow.f64 (cos.f64 x) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (neg.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (/.f64 1 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) 1) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) 1) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (+.f64 -1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (neg.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)) (pow.f64 x -2))) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (pow.f64 x -2)) (neg.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)))) (neg.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (pow.f64 x -2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x (*.f64 2 -2))) (cbrt.f64 (pow.f64 x -2)) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 (pow.f64 x (*.f64 2 -2))) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 x -2)) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 x -2) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -2) 1 (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 0) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 1 (cos.f64 x))) 1) (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 1 (cos.f64 x))) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 0 (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 1 (cos.f64 x))) (*.f64 (neg.f64 (cos.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)) (neg.f64 (/.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (pow.f64 (cos.f64 x) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)) (/.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) 2) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))) (/.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))) (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1) 1) (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 1 (cos.f64 x))) (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (pow.f64 (cos.f64 x) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 x)) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 1 (cos.f64 x)))) (+.f64 (cos.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (/.f64 1 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (/.f64 1 (neg.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1)) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) 3)) (/.f64 1 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (cos.f64 x) 6) 3) (pow.f64 (pow.f64 (cos.f64 x) 3) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) 3)) 1) (*.f64 (+.f64 1 (+.f64 (pow.f64 (pow.f64 (cos.f64 x) 6) 3) (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (neg.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 1 (cos.f64 x))) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (fma.f64 (cos.f64 x) (cos.f64 x) (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) 1) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1) (*.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1) (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (*.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1) (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)))) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2))) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) 1) (neg.f64 (+.f64 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (neg.f64 (pow.f64 (cos.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 (cos.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cos.f64 x) 2) (neg.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 (cos.f64 x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (cos.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (cos.f64 x)) (*.f64 (+.f64 1 (cos.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 1 (cos.f64 x)) 0) (+.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (cos.f64 x)) (*.f64 0 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 1 (cos.f64 x))) (+.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 x) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cos.f64 x) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cos.f64 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 3))) (/.f64 1 (+.f64 -1 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1))) (/.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1))) (/.f64 (+.f64 1 (cos.f64 x)) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1) 1) (/.f64 (+.f64 1 (cos.f64 x)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3))) 2) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) (cbrt.f64 (pow.f64 (+.f64 1 (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (cos.f64 x)))) (+.f64 1 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (-.f64 1 (cbrt.f64 (cos.f64 x)))) (+.f64 (cbrt.f64 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3)) (/.f64 1 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 1 (cos.f64 x)) 2)) (cbrt.f64 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 1 (cos.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1)) (+.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (/.f64 1 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1))) (-.f64 (+.f64 1 (pow.f64 (cos.f64 x) 6)) (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3)) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1))) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) 1) (*.f64 (-.f64 (+.f64 1 (pow.f64 (cos.f64 x) 6)) (pow.f64 (cos.f64 x) 3)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 3))) (+.f64 -1 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3)) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 (cos.f64 x)) 2)) (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3)))) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 3))) 1) (+.f64 -1 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3))) (cbrt.f64 (pow.f64 (+.f64 1 (cos.f64 x)) 2))) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3)) 1) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 (cos.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 (cos.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) 1 1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) 1/2) (*.f64 (cos.f64 x) (*.f64 1/2 (cos.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 3) (*.f64 (pow.f64 (cos.f64 x) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 0) (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 x)) (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 3) (*.f64 0 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cos.f64 x) 3)) (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4)) 2) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (pow.f64 (cos.f64 x) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0)) (cos.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))))))"]],"rules":[["egg-rr",26],["egg-rr",54],["egg-rr",72],["egg-rr",52]],"time":39.635009765625,"type":"rewrite"},{"count":[[232,235]],"inputs":[["3/2","(+.f64 3/2 (*.f64 -7/8 (pow.f64 x 2)))","(+.f64 3/2 (+.f64 (*.f64 -7/8 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 4))))","(+.f64 3/2 (+.f64 (*.f64 -547/13440 (pow.f64 x 6)) (+.f64 (*.f64 -7/8 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 4)))))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(*.f64 3/2 (pow.f64 x 2))","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (*.f64 3/2 (pow.f64 x 2)))","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (+.f64 (*.f64 3/2 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 6))))","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (+.f64 (*.f64 3/2 (pow.f64 x 2)) (+.f64 (*.f64 61/240 (pow.f64 x 6)) (*.f64 -547/13440 (pow.f64 x 8)))))","2","(+.f64 2 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 (cos.f64 x) 1)","(+.f64 (cos.f64 x) 1)","(+.f64 (cos.f64 x) 1)","(+.f64 (cos.f64 x) 1)","1","(+.f64 1 (*.f64 -3/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -3/2 (pow.f64 x 2)) (*.f64 7/8 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -61/240 (pow.f64 x 6)) (+.f64 (*.f64 -3/2 (pow.f64 x 2)) (*.f64 7/8 (pow.f64 x 4)))))"]],"method":["egg-herbie"],"outputs":[["3/2","(+.f64 3/2 (*.f64 -7/8 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -7/8 3/2)","(+.f64 3/2 (+.f64 (*.f64 -7/8 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 4))))","(+.f64 3/2 (fma.f64 (pow.f64 x 4) 61/240 (*.f64 (*.f64 -7/8 x) x)))","(+.f64 3/2 (+.f64 (*.f64 -547/13440 (pow.f64 x 6)) (+.f64 (*.f64 -7/8 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 4)))))","(+.f64 3/2 (fma.f64 -547/13440 (pow.f64 x 6) (fma.f64 (pow.f64 x 4) 61/240 (*.f64 (*.f64 -7/8 x) x))))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 x x))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 x x))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 x x))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 x x))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 x x))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 x x))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 x x))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x 2))","(/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 x x))","(*.f64 3/2 (pow.f64 x 2))","(*.f64 (*.f64 3/2 x) x)","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (*.f64 3/2 (pow.f64 x 2)))","(fma.f64 -7/8 (pow.f64 x 4) (*.f64 (*.f64 3/2 x) x))","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (+.f64 (*.f64 3/2 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 6))))","(fma.f64 (pow.f64 x 4) -7/8 (fma.f64 (pow.f64 x 6) 61/240 (*.f64 (*.f64 3/2 x) x)))","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (+.f64 (*.f64 3/2 (pow.f64 x 2)) (+.f64 (*.f64 61/240 (pow.f64 x 6)) (*.f64 -547/13440 (pow.f64 x 8)))))","(fma.f64 (pow.f64 x 4) -7/8 (fma.f64 3/2 (*.f64 x x) (fma.f64 61/240 (pow.f64 x 6) (*.f64 -547/13440 (pow.f64 x 8)))))","2","(+.f64 2 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/2 2)","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 2 (fma.f64 (pow.f64 x 4) 1/24 (*.f64 (*.f64 -1/2 x) x)))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 2) (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/720 (pow.f64 x 6))))","(+.f64 (cos.f64 x) 1)","(+.f64 (cos.f64 x) 1)","(+.f64 (cos.f64 x) 1)","(+.f64 (cos.f64 x) 1)","1","(+.f64 1 (*.f64 -3/2 (pow.f64 x 2)))","(fma.f64 -3/2 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 -3/2 (pow.f64 x 2)) (*.f64 7/8 (pow.f64 x 4))))","(+.f64 1 (fma.f64 7/8 (pow.f64 x 4) (*.f64 (*.f64 -3/2 x) x)))","(+.f64 1 (+.f64 (*.f64 -61/240 (pow.f64 x 6)) (+.f64 (*.f64 -3/2 (pow.f64 x 2)) (*.f64 7/8 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 (pow.f64 x 6) -61/240 (fma.f64 7/8 (pow.f64 x 4) (*.f64 (*.f64 -3/2 x) x))))"]],"time":93.316162109375,"type":"simplify"},{"compiler":[[6434,4298]],"time":73.621826171875,"type":"eval"},{"alts":[["(/.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 x x)) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.47391016052492],["(/.f64 (*.f64 (pow.f64 x -2) (pow.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 3) 1/3)) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.308490509465507],["(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (+.f64 (*.f64 1/2 (cos.f64 x)) (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (cos.f64 x))))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.27649691292744],["(fma.f64 (cbrt.f64 (pow.f64 x -4)) (cbrt.f64 (pow.f64 x -2)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))","fresh",39.47214344254629],["(*.f64 (-.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 3)) (pow.f64 x -2))","fresh",31.43347114851214],["(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4)))))","fresh",32.20377518620566],["(/.f64 (*.f64 (pow.f64 x -2) (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) 3)) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.383689561563955],["(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (fma.f64 (cos.f64 x) (/.f64 (*.f64 (+.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (/.f64 1 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1))) (-.f64 (+.f64 1 (pow.f64 (cos.f64 x) 6)) (pow.f64 (cos.f64 x) 3))) 1))","fresh",31.29919666973828],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (pow.f64 (-.f64 1 (cos.f64 x)) 2/3)) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (pow.f64 x -2))","fresh",31.311891432008775],["(/.f64 (+.f64 (pow.f64 x -2) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3)))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.3248816324438],["(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","next",31.273321178072397],["(+.f64 (pow.f64 x -2) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))","fresh",31.32615814770573]],"compiler":[[20,13],[24,18],[30,20],[17,13],[12,10],[18,14],[23,17],[47,33],[29,21],[23,16],[28,20],[12,9],[20,13],[24,18],[30,20],[17,13],[12,10],[18,14],[23,17],[47,33],[29,21],[23,16],[28,20],[12,9]],"count":[[246,12]],"kept":[{"done":[0,0],"fresh":[10,5],"new":[235,7],"picked":[1,0]}],"min-error":[0.09235793262133489],"time":65.169189453125,"type":"prune"},{"compiler":[[120,66]],"locations":[["(+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))",0.41369339589549153,true],["(+.f64 1 (cos.f64 x))",0.42241055626447865,false],["(-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))",1.3675734958827122,true],["(*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2)))",19.802956177433575,true]],"time":26.19091796875,"type":"localize"},{"count":[[3,36]],"series":[["(+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))","x","-inf",0.18896484375],["(+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))","x","inf",0.176025390625],["(+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))","x","0",0.18408203125],["(-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))","x","-inf",0.173095703125],["(-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))","x","inf",0.197998046875],["(-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))","x","0",0.170166015625],["(*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2)))","x","-inf",1.26708984375],["(*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2)))","x","inf",0.712890625],["(*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2)))","x","0",0.4580078125]],"time":3.669921875,"type":"series"},{"count":[[3,219]],"inputs":[["(*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2)))","(-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))","(+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (*.f64 1 (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (*.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 0) (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1/2) (*.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (*.f64 (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (*.f64 0 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (*.f64 1/2 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -2)) (*.f64 (cbrt.f64 (pow.f64 x -4)) (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 2)) (cbrt.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (cbrt.f64 (pow.f64 x -2))) (cbrt.f64 (pow.f64 x -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -2)) (+.f64 (pow.f64 (cos.f64 x) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (neg.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))) (pow.f64 (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (+.f64 -1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (pow.f64 x -2)) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)) (pow.f64 x -2))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)))) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)))) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) 1) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) 1) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (pow.f64 x -2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (*.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 x -2)) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 (pow.f64 x -4)) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -4)) (cbrt.f64 (pow.f64 x -2)) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 x -2) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -2) 1 (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 (neg.f64 x) (+.f64 (pow.f64 (cos.f64 x) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 0) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 1/2) (*.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 0 (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (*.f64 1/2 (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))) (neg.f64 (/.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (-.f64 (neg.f64 (*.f64 x x)) (+.f64 (pow.f64 (cos.f64 x) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))) (/.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (+.f64 x (+.f64 (pow.f64 (cos.f64 x) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (pow.f64 (cos.f64 x) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x x) (+.f64 (*.f64 x x) (+.f64 (pow.f64 (cos.f64 x) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 0 (+.f64 (pow.f64 (cos.f64 x) 3) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1))) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 x))) (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (pow.f64 (cos.f64 x) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1)) (neg.f64 (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (/.f64 1 (neg.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) 3)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 6) (pow.f64 (pow.f64 (cos.f64 x) 3) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))) (pow.f64 (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) 2) -4) -4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -4 (*.f64 2 (*.f64 (pow.f64 (cos.f64 x) 3) 2))) -4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))) (*.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))) (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (*.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 2 (cbrt.f64 4)) (*.f64 2 (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (cbrt.f64 2)))) (*.f64 2 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -4 (*.f64 2 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 2))) -4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (-.f64 1 (pow.f64 (cos.f64 x) 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) 1) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2))) (cbrt.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 2 (*.f64 (pow.f64 (cos.f64 x) 3) 2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 2 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) -2) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 2) 2) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -2 (*.f64 (pow.f64 (cos.f64 x) 3) 2)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 4 (*.f64 2 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 2))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 4) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (cbrt.f64 2))) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -2 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 2)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 8) (*.f64 2 (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2)))) (sqrt.f64 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 4 (*.f64 2 (*.f64 (pow.f64 (cos.f64 x) 3) 2))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) 1) (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 6) (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (pow.f64 (cos.f64 x) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 (cos.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 (cos.f64 x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (neg.f64 (pow.f64 (cos.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) 2) 1/2 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) -1/2 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 1 (pow.f64 (cos.f64 x) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (pow.f64 (cos.f64 x) 2)) (neg.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 (+.f64 x x)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (neg.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 1 (pow.f64 (cos.f64 x) 2)) 1/2) (*.f64 1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 0) (+.f64 (cos.f64 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) (*.f64 0 (+.f64 (cos.f64 (+.f64 x x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (cos.f64 (+.f64 x x)) 1)) (+.f64 (cos.f64 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2) (+.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 1 (pow.f64 (cos.f64 x) 2)) 1) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 (+.f64 x x)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (cos.f64 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cos.f64 x) 2)) (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cos.f64 (+.f64 x x)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cos.f64 (+.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 1 (pow.f64 (cos.f64 x) 2)) 1) (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (cos.f64 x) 2) (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (neg.f64 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (cos.f64 x) 2) (/.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (cos.f64 (+.f64 x x)) 3)) (/.f64 1 (+.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (-.f64 1 (cos.f64 (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (-.f64 1 (cbrt.f64 (cos.f64 (+.f64 x x))))) (+.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cbrt.f64 (cos.f64 (+.f64 x x))))) (+.f64 1 (cbrt.f64 (cos.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x x)) 1)) (cbrt.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 2)) (cbrt.f64 (+.f64 (cos.f64 (+.f64 x x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (cos.f64 (+.f64 x x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (cos.f64 (+.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (cos.f64 (+.f64 x x)) 3)) (+.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (-.f64 1 (cos.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (cos.f64 (+.f64 x x)) 3)) 1) (+.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (-.f64 1 (cos.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (cos.f64 (+.f64 x x)) 3)) 1) (+.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (-.f64 1 (cos.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1 (pow.f64 (cos.f64 (+.f64 x x)) 3)) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (-.f64 1 (cos.f64 (+.f64 x x)))))) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (-.f64 1 (cos.f64 (+.f64 x x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 (cos.f64 (+.f64 x x)) 3))) (neg.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (-.f64 1 (cos.f64 (+.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (+.f64 (cos.f64 (+.f64 x x)) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 2 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 (+.f64 x x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 (+.f64 x x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 (+.f64 x x))) 1) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 (+.f64 x x))) 2) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 4 (*.f64 2 (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 (+.f64 x x))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 x x)) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x x)) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x x)) 1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x x)) 1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 x x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x x)) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) (+.f64 2 3)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (pow.f64 (cbrt.f64 (cos.f64 x)) 4) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (cos.f64 x) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 4) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (cos.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 (+.f64 x x))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cos.f64 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cos.f64 (+.f64 x x))) -1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (cos.f64 (+.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2)) (cbrt.f64 (cos.f64 (+.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (cos.f64 x) (sin.f64 x)) (-.f64 (cos.f64 x) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 (+.f64 x x)) 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (cos.f64 x) 2) (pow.f64 (cos.f64 x) 2))))))"]],"rules":[["egg-rr",74],["egg-rr",93],["egg-rr",52]],"time":42.718017578125,"type":"rewrite"},{"count":[[255,250]],"inputs":[["3/2","(+.f64 3/2 (*.f64 -7/8 (pow.f64 x 2)))","(+.f64 3/2 (+.f64 (*.f64 -7/8 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 4))))","(+.f64 3/2 (+.f64 (*.f64 -547/13440 (pow.f64 x 6)) (+.f64 (*.f64 -7/8 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 4)))))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1)))) (pow.f64 x 2))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1)))) (pow.f64 x 2))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1)))) (pow.f64 x 2))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1)))) (pow.f64 x 2))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))))) (pow.f64 x 2))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))))) (pow.f64 x 2))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))))) (pow.f64 x 2))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))))) (pow.f64 x 2))","(*.f64 3/2 (pow.f64 x 2))","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (*.f64 3/2 (pow.f64 x 2)))","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (+.f64 (*.f64 3/2 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 6))))","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (+.f64 (*.f64 3/2 (pow.f64 x 2)) (+.f64 (*.f64 61/240 (pow.f64 x 6)) (*.f64 -547/13440 (pow.f64 x 8)))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x)))))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x)))))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x)))))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x)))))))","2","(+.f64 (*.f64 -2 (pow.f64 x 2)) 2)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 2))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 2 (*.f64 -4/45 (pow.f64 x 6)))))","(+.f64 (cos.f64 (*.f64 2 x)) 1)","(+.f64 (cos.f64 (*.f64 2 x)) 1)","(+.f64 (cos.f64 (*.f64 2 x)) 1)","(+.f64 (cos.f64 (*.f64 2 x)) 1)","(+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))","(+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))","(+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))","(+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))"]],"method":["egg-herbie"],"outputs":[["3/2","(+.f64 3/2 (*.f64 -7/8 (pow.f64 x 2)))","(fma.f64 -7/8 (*.f64 x x) 3/2)","(+.f64 3/2 (+.f64 (*.f64 -7/8 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 4))))","(+.f64 3/2 (fma.f64 (pow.f64 x 4) 61/240 (*.f64 -7/8 (*.f64 x x))))","(+.f64 3/2 (+.f64 (*.f64 -547/13440 (pow.f64 x 6)) (+.f64 (*.f64 -7/8 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 4)))))","(+.f64 3/2 (fma.f64 (pow.f64 x 6) -547/13440 (fma.f64 (pow.f64 x 4) 61/240 (*.f64 -7/8 (*.f64 x x)))))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1)))) (pow.f64 x 2))","(/.f64 (fma.f64 (*.f64 1/2 (cos.f64 x)) (+.f64 1 (cos.f64 (*.f64 2 x))) -1) (neg.f64 (*.f64 x x)))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1)))) (pow.f64 x 2))","(/.f64 (fma.f64 (*.f64 1/2 (cos.f64 x)) (+.f64 1 (cos.f64 (*.f64 2 x))) -1) (neg.f64 (*.f64 x x)))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1)))) (pow.f64 x 2))","(/.f64 (fma.f64 (*.f64 1/2 (cos.f64 x)) (+.f64 1 (cos.f64 (*.f64 2 x))) -1) (neg.f64 (*.f64 x x)))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1)))) (pow.f64 x 2))","(/.f64 (fma.f64 (*.f64 1/2 (cos.f64 x)) (+.f64 1 (cos.f64 (*.f64 2 x))) -1) (neg.f64 (*.f64 x x)))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))))) (pow.f64 x 2))","(/.f64 (fma.f64 (*.f64 1/2 (cos.f64 x)) (+.f64 1 (cos.f64 (*.f64 2 x))) -1) (neg.f64 (*.f64 x x)))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))))) (pow.f64 x 2))","(/.f64 (fma.f64 (*.f64 1/2 (cos.f64 x)) (+.f64 1 (cos.f64 (*.f64 2 x))) -1) (neg.f64 (*.f64 x x)))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))))) (pow.f64 x 2))","(/.f64 (fma.f64 (*.f64 1/2 (cos.f64 x)) (+.f64 1 (cos.f64 (*.f64 2 x))) -1) (neg.f64 (*.f64 x x)))","(/.f64 (-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))))) (pow.f64 x 2))","(/.f64 (fma.f64 (*.f64 1/2 (cos.f64 x)) (+.f64 1 (cos.f64 (*.f64 2 x))) -1) (neg.f64 (*.f64 x x)))","(*.f64 3/2 (pow.f64 x 2))","(*.f64 3/2 (*.f64 x x))","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (*.f64 3/2 (pow.f64 x 2)))","(fma.f64 -7/8 (pow.f64 x 4) (*.f64 3/2 (*.f64 x x)))","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (+.f64 (*.f64 3/2 (pow.f64 x 2)) (*.f64 61/240 (pow.f64 x 6))))","(fma.f64 (pow.f64 x 4) -7/8 (fma.f64 (pow.f64 x 6) 61/240 (*.f64 3/2 (*.f64 x x))))","(+.f64 (*.f64 -7/8 (pow.f64 x 4)) (+.f64 (*.f64 3/2 (pow.f64 x 2)) (+.f64 (*.f64 61/240 (pow.f64 x 6)) (*.f64 -547/13440 (pow.f64 x 8)))))","(fma.f64 (pow.f64 x 4) -7/8 (fma.f64 (*.f64 x x) 3/2 (fma.f64 61/240 (pow.f64 x 6) (*.f64 -547/13440 (pow.f64 x 8)))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1))))","(+.f64 1 (*.f64 -1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (*.f64 2 x))))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1))))","(+.f64 1 (*.f64 -1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (*.f64 2 x))))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1))))","(+.f64 1 (*.f64 -1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (*.f64 2 x))))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (*.f64 2 x)) 1))))","(+.f64 1 (*.f64 -1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (*.f64 2 x))))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x)))))))","(+.f64 1 (*.f64 -1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (*.f64 2 x))))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x)))))))","(+.f64 1 (*.f64 -1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (*.f64 2 x))))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x)))))))","(+.f64 1 (*.f64 -1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (*.f64 2 x))))))","(-.f64 1 (*.f64 1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x)))))))","(+.f64 1 (*.f64 -1/2 (*.f64 (cos.f64 x) (+.f64 1 (cos.f64 (*.f64 2 x))))))","2","(+.f64 (*.f64 -2 (pow.f64 x 2)) 2)","(fma.f64 -2 (*.f64 x x) 2)","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) 2))","(fma.f64 (pow.f64 x 4) 2/3 (fma.f64 -2 (*.f64 x x) 2))","(+.f64 (*.f64 2/3 (pow.f64 x 4)) (+.f64 (*.f64 -2 (pow.f64 x 2)) (+.f64 2 (*.f64 -4/45 (pow.f64 x 6)))))","(fma.f64 2/3 (pow.f64 x 4) (fma.f64 (*.f64 x x) -2 (fma.f64 (pow.f64 x 6) -4/45 2)))","(+.f64 (cos.f64 (*.f64 2 x)) 1)","(+.f64 1 (cos.f64 (*.f64 2 x)))","(+.f64 (cos.f64 (*.f64 2 x)) 1)","(+.f64 1 (cos.f64 (*.f64 2 x)))","(+.f64 (cos.f64 (*.f64 2 x)) 1)","(+.f64 1 (cos.f64 (*.f64 2 x)))","(+.f64 (cos.f64 (*.f64 2 x)) 1)","(+.f64 1 (cos.f64 (*.f64 2 x)))","(+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))","(+.f64 1 (cos.f64 (*.f64 2 x)))","(+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))","(+.f64 1 (cos.f64 (*.f64 2 x)))","(+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))","(+.f64 1 (cos.f64 (*.f64 2 x)))","(+.f64 1 (cos.f64 (neg.f64 (*.f64 -2 x))))","(+.f64 1 (cos.f64 (*.f64 2 x)))"]],"time":115.281982421875,"type":"simplify"},{"compiler":[[9204,5945]],"time":98.781005859375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (/.f64 (/.f64 (+.f64 1 (pow.f64 (cos.f64 (+.f64 x x)) 3)) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (-.f64 1 (cos.f64 (+.f64 x x)))))) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (-.f64 1 (cos.f64 (+.f64 x x))))) 2))) 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.335973398446836],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (pow.f64 (-.f64 1 (cos.f64 x)) 2/3)) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (pow.f64 x -2))","fresh",31.311891432008775],["(/.f64 (*.f64 (pow.f64 x -2) (pow.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 3) 1/3)) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.308490509465507],["(*.f64 (-.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 3)) (pow.f64 x -2))","fresh",31.43347114851214],["(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4)))))","fresh",32.20377518620566],["(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))) (fma.f64 (cos.f64 x) (*.f64 (/.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3))) 2) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1))) 1))","fresh",31.275246185594753],["(/.f64 (/.f64 (fma.f64 (*.f64 1/2 (cos.f64 x)) (+.f64 1 (cos.f64 (*.f64 2 x))) -1) (neg.f64 (*.f64 x x))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.406310604542192],["(/.f64 (*.f64 (pow.f64 x -2) (*.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 x))) (-.f64 1 (cos.f64 x)))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.287271218234725],["(/.f64 (*.f64 (*.f64 (pow.f64 x -2) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.309534936889474],["(/.f64 (*.f64 (pow.f64 x -2) (/.f64 (-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))) (sqrt.f64 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","next",31.06844603043713]],"compiler":[[61,37],[29,21],[24,18],[12,10],[18,14],[52,38],[27,19],[28,18],[31,23],[29,23],[61,37],[29,21],[24,18],[12,10],[18,14],[52,38],[27,19],[28,18],[31,23],[29,23]],"count":[[323,10]],"kept":[{"done":[0,0],"fresh":[11,3],"new":[311,7],"picked":[1,0]}],"min-error":[0.07038800821246123],"time":104.705078125,"type":"prune"},{"compiler":[[118,89]],"locations":[["(+.f64 1 (cos.f64 x))",0.42241055626447865,false],["(/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))",0.740566259768442,true],["(-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2)))",1.5062580473079128,true],["(*.f64 (pow.f64 x -2) (/.f64 (-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))) (sqrt.f64 2)))",19.802956177433575,true]],"time":28.697021484375,"type":"localize"},{"count":[[3,36]],"series":[["(/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))","x","-inf",0.15283203125],["(/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))","x","inf",0.1611328125],["(/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))","x","0",0.26806640625],["(-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2)))","x","-inf",0.162109375],["(-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2)))","x","inf",0.2138671875],["(-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2)))","x","0",0.27001953125],["(*.f64 (pow.f64 x -2) (/.f64 (-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))) (sqrt.f64 2)))","x","-inf",0.93115234375],["(*.f64 (pow.f64 x -2) (/.f64 (-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))) (sqrt.f64 2)))","x","inf",1.06396484375],["(*.f64 (pow.f64 x -2) (/.f64 (-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))) (sqrt.f64 2)))","x","0",0.85595703125]],"time":4.27294921875,"type":"series"},{"count":[[3,158]],"inputs":[["(*.f64 (pow.f64 x -2) (/.f64 (-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))) (sqrt.f64 2)))","(-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2)))","(/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) 1/2) (*.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) (*.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) 0) (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (*.f64 (pow.f64 x -2) (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))) (*.f64 1/2 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) (*.f64 0 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))) (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (*.f64 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (cbrt.f64 (sqrt.f64 1/2))) (/.f64 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2))) (cbrt.f64 -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) 2)) (cbrt.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)) (cbrt.f64 (pow.f64 x -2))) (cbrt.f64 (pow.f64 x (*.f64 2 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (cbrt.f64 (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))) (cbrt.f64 (pow.f64 (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -2)) (*.f64 (cbrt.f64 (pow.f64 x (*.f64 2 -2))) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)) 2)) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x -2) (sqrt.f64 (sqrt.f64 2))) (*.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (sqrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) (*.f64 (sqrt.f64 1/2) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (cbrt.f64 (sqrt.f64 1/2))) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (sqrt.f64 (sqrt.f64 1/2))) (sqrt.f64 (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2)))) (neg.f64 (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2)))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (sqrt.f64 (sqrt.f64 1/2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (cbrt.f64 (sqrt.f64 1/2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (cbrt.f64 (sqrt.f64 1/2)))) (cbrt.f64 -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (pow.f64 x -2) (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (sqrt.f64 (sqrt.f64 1/2)))) (neg.f64 (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2))) (*.f64 (sqrt.f64 1/2) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) 1/2 -1) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (pow.f64 x -2) (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2)))) (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 x -2) (fma.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) 1/2 -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (pow.f64 x -2) (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2)))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (pow.f64 x -2) (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 x -2) (+.f64 1 (*.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) 1/2))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) 1/2) (*.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) (*.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) 0) (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 1/2 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) (*.f64 0 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 2) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (sqrt.f64 2)) -1) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)) (*.f64 (neg.f64 (sqrt.f64 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sqrt.f64 2) 0) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/2 (+.f64 1/2 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2)))) 2) (cbrt.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2)))) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 2) (+.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 1/2)) (*.f64 (cbrt.f64 2) (cos.f64 x)))) (-.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cos.f64 x) (cbrt.f64 (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 2)) (cbrt.f64 2) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 (sqrt.f64 2))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2) (cbrt.f64 (sqrt.f64 2)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 2)) (sqrt.f64 (sqrt.f64 2)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sqrt.f64 2)))) (/.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 1/2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sqrt.f64 2))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 1/2))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (sqrt.f64 2)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 2) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 1/2) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (neg.f64 (sqrt.f64 1/2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2) 1 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (sqrt.f64 2) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)) 1/2) (*.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)) (*.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)) 0) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 1/2)) 1) (*.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) (*.f64 1/2 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)) (*.f64 0 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 1/2)) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sqrt.f64 2))) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (cbrt.f64 (sqrt.f64 1/2))) (*.f64 (pow.f64 (cos.f64 x) 3) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (sqrt.f64 (sqrt.f64 2))) (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 (sqrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (cbrt.f64 (sqrt.f64 1/2))) (cbrt.f64 (/.f64 8 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 (sqrt.f64 1/2))) (/.f64 2 (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sqrt.f64 2))) (/.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 2) (cos.f64 x)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 2) (cos.f64 x)) 2) (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 2) (cos.f64 x)) (sqrt.f64 (sqrt.f64 2))) (*.f64 (pow.f64 (*.f64 (cbrt.f64 2) (cos.f64 x)) 2) (sqrt.f64 (sqrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 1/2)) (*.f64 (cos.f64 x) (cbrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/2)) (/.f64 (pow.f64 (cos.f64 x) 3) (cbrt.f64 (/.f64 2 8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 1/2)) (/.f64 (pow.f64 (cos.f64 x) 3) (*.f64 (sqrt.f64 (sqrt.f64 2)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sqrt.f64 2)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cos.f64 x) 3) (/.f64 (cbrt.f64 (sqrt.f64 2)) 2)) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (/.f64 1 (neg.f64 (sqrt.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cos.f64 x) 3) (*.f64 (sqrt.f64 (sqrt.f64 2)) 1/2)) (sqrt.f64 (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 1/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cos.f64 x) 3) (neg.f64 (sqrt.f64 2))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/2) (*.f64 (pow.f64 (cos.f64 x) 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (neg.f64 (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (cos.f64 x) 3) (*.f64 (sqrt.f64 (sqrt.f64 2)) 1/2)) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (neg.f64 (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (cos.f64 x) 3) (/.f64 (cbrt.f64 (sqrt.f64 2)) 2)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 3) (/.f64 (cbrt.f64 (sqrt.f64 2)) 2))) (cbrt.f64 -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 3) (*.f64 (sqrt.f64 (sqrt.f64 2)) 1/2))) (neg.f64 (sqrt.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 1/2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) (sqrt.f64 8)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sqrt.f64 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sqrt.f64 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) (sqrt.f64 8)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (*.f64 (pow.f64 (pow.f64 (cos.f64 x) 3) 3) (sqrt.f64 8)) 1))))))"]],"rules":[["egg-rr",54],["egg-rr",56],["egg-rr",48]],"time":39.483154296875,"type":"rewrite"},{"count":[[194,187]],"inputs":[["(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 1 (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(-.f64 (+.f64 (*.f64 3 (/.f64 1 (pow.f64 (sqrt.f64 2) 2))) (/.f64 1 (pow.f64 x 2))) (/.f64 2 (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (*.f64 3 (/.f64 1 (pow.f64 (sqrt.f64 2) 2))) (*.f64 -7/4 (/.f64 (pow.f64 x 2) (pow.f64 (sqrt.f64 2) 2))))) (/.f64 2 (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 61/120 (/.f64 (pow.f64 x 4) (pow.f64 (sqrt.f64 2) 2))) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (*.f64 3 (/.f64 1 (pow.f64 (sqrt.f64 2) 2))) (*.f64 -7/4 (/.f64 (pow.f64 x 2) (pow.f64 (sqrt.f64 2) 2)))))) (/.f64 2 (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 x 2))))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 1 (sqrt.f64 2))))","(-.f64 (+.f64 (sqrt.f64 2) (*.f64 3 (/.f64 (pow.f64 x 2) (sqrt.f64 2)))) (*.f64 2 (/.f64 1 (sqrt.f64 2))))","(-.f64 (+.f64 (sqrt.f64 2) (+.f64 (*.f64 -7/4 (/.f64 (pow.f64 x 4) (sqrt.f64 2))) (*.f64 3 (/.f64 (pow.f64 x 2) (sqrt.f64 2))))) (*.f64 2 (/.f64 1 (sqrt.f64 2))))","(-.f64 (+.f64 (sqrt.f64 2) (+.f64 (*.f64 61/120 (/.f64 (pow.f64 x 6) (sqrt.f64 2))) (+.f64 (*.f64 -7/4 (/.f64 (pow.f64 x 4) (sqrt.f64 2))) (*.f64 3 (/.f64 (pow.f64 x 2) (sqrt.f64 2)))))) (*.f64 2 (/.f64 1 (sqrt.f64 2))))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(/.f64 2 (sqrt.f64 2))","(+.f64 (*.f64 2 (/.f64 1 (sqrt.f64 2))) (*.f64 -3 (/.f64 (pow.f64 x 2) (sqrt.f64 2))))","(+.f64 (*.f64 2 (/.f64 1 (sqrt.f64 2))) (+.f64 (*.f64 -3 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 7/4 (/.f64 (pow.f64 x 4) (sqrt.f64 2)))))","(+.f64 (*.f64 2 (/.f64 1 (sqrt.f64 2))) (+.f64 (*.f64 -3 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 -61/120 (/.f64 (pow.f64 x 6) (sqrt.f64 2))) (*.f64 7/4 (/.f64 (pow.f64 x 4) (sqrt.f64 2))))))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 1 (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(*.f64 (-.f64 (/.f64 (sqrt.f64 2) (sqrt.f64 2)) 1) (pow.f64 x -2))","(-.f64 (+.f64 (*.f64 3 (/.f64 1 (pow.f64 (sqrt.f64 2) 2))) (/.f64 1 (pow.f64 x 2))) (/.f64 2 (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 x 2))))","(+.f64 3/2 0)","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (*.f64 3 (/.f64 1 (pow.f64 (sqrt.f64 2) 2))) (*.f64 -7/4 (/.f64 (pow.f64 x 2) (pow.f64 (sqrt.f64 2) 2))))) (/.f64 2 (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 x 2))))","(+.f64 (fma.f64 (*.f64 (*.f64 x x) 1/2) -7/4 3/2) 0)","(-.f64 (+.f64 (*.f64 61/120 (/.f64 (pow.f64 x 4) (pow.f64 (sqrt.f64 2) 2))) (+.f64 (/.f64 1 (pow.f64 x 2)) (+.f64 (*.f64 3 (/.f64 1 (pow.f64 (sqrt.f64 2) 2))) (*.f64 -7/4 (/.f64 (pow.f64 x 2) (pow.f64 (sqrt.f64 2) 2)))))) (/.f64 2 (*.f64 (pow.f64 (sqrt.f64 2) 2) (pow.f64 x 2))))","(fma.f64 (*.f64 (pow.f64 x 4) 1/2) 61/120 (+.f64 (fma.f64 (*.f64 (*.f64 x x) 1/2) -7/4 3/2) 0))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(*.f64 (+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))) (/.f64 (pow.f64 x -2) (sqrt.f64 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(*.f64 (+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))) (/.f64 (pow.f64 x -2) (sqrt.f64 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(*.f64 (+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))) (/.f64 (pow.f64 x -2) (sqrt.f64 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(*.f64 (+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))) (/.f64 (pow.f64 x -2) (sqrt.f64 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(*.f64 (+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))) (/.f64 (pow.f64 x -2) (sqrt.f64 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(*.f64 (+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))) (/.f64 (pow.f64 x -2) (sqrt.f64 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(*.f64 (+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))) (/.f64 (pow.f64 x -2) (sqrt.f64 2)))","(/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2)))","(*.f64 (+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))) (/.f64 (pow.f64 x -2) (sqrt.f64 2)))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 1 (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 -2 (sqrt.f64 2)))","(-.f64 (+.f64 (sqrt.f64 2) (*.f64 3 (/.f64 (pow.f64 x 2) (sqrt.f64 2)))) (*.f64 2 (/.f64 1 (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 (-.f64 (*.f64 3 (*.f64 x x)) 2) (sqrt.f64 2)))","(-.f64 (+.f64 (sqrt.f64 2) (+.f64 (*.f64 -7/4 (/.f64 (pow.f64 x 4) (sqrt.f64 2))) (*.f64 3 (/.f64 (pow.f64 x 2) (sqrt.f64 2))))) (*.f64 2 (/.f64 1 (sqrt.f64 2))))","(+.f64 (+.f64 (sqrt.f64 2) (/.f64 (*.f64 -7/4 (pow.f64 x 4)) (sqrt.f64 2))) (/.f64 (-.f64 (*.f64 3 (*.f64 x x)) 2) (sqrt.f64 2)))","(-.f64 (+.f64 (sqrt.f64 2) (+.f64 (*.f64 61/120 (/.f64 (pow.f64 x 6) (sqrt.f64 2))) (+.f64 (*.f64 -7/4 (/.f64 (pow.f64 x 4) (sqrt.f64 2))) (*.f64 3 (/.f64 (pow.f64 x 2) (sqrt.f64 2)))))) (*.f64 2 (/.f64 1 (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (+.f64 (/.f64 (+.f64 (*.f64 61/120 (pow.f64 x 6)) (*.f64 -7/4 (pow.f64 x 4))) (sqrt.f64 2)) (/.f64 (-.f64 (*.f64 3 (*.f64 x x)) 2) (sqrt.f64 2))))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))","(-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (/.f64 (*.f64 -2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2)))","(/.f64 2 (sqrt.f64 2))","(+.f64 (*.f64 2 (/.f64 1 (sqrt.f64 2))) (*.f64 -3 (/.f64 (pow.f64 x 2) (sqrt.f64 2))))","(/.f64 (+.f64 2 (*.f64 -3 (*.f64 x x))) (sqrt.f64 2))","(+.f64 (*.f64 2 (/.f64 1 (sqrt.f64 2))) (+.f64 (*.f64 -3 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (*.f64 7/4 (/.f64 (pow.f64 x 4) (sqrt.f64 2)))))","(+.f64 (/.f64 (+.f64 2 (*.f64 -3 (*.f64 x x))) (sqrt.f64 2)) (/.f64 (*.f64 7/4 (pow.f64 x 4)) (sqrt.f64 2)))","(+.f64 (*.f64 2 (/.f64 1 (sqrt.f64 2))) (+.f64 (*.f64 -3 (/.f64 (pow.f64 x 2) (sqrt.f64 2))) (+.f64 (*.f64 -61/120 (/.f64 (pow.f64 x 6) (sqrt.f64 2))) (*.f64 7/4 (/.f64 (pow.f64 x 4) (sqrt.f64 2))))))","(+.f64 (/.f64 (+.f64 2 (*.f64 -3 (*.f64 x x))) (sqrt.f64 2)) (/.f64 (+.f64 (*.f64 -61/120 (pow.f64 x 6)) (*.f64 7/4 (pow.f64 x 4))) (sqrt.f64 2)))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(/.f64 (*.f64 2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(/.f64 (*.f64 2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(/.f64 (*.f64 2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(/.f64 (*.f64 2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(/.f64 (*.f64 2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(/.f64 (*.f64 2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(/.f64 (*.f64 2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))","(*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))","(/.f64 (*.f64 2 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))"]],"time":123.31982421875,"type":"simplify"},{"compiler":[[8034,6085]],"time":96.5849609375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))) (fma.f64 (cos.f64 x) (*.f64 (/.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3))) 2) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1))) 1))","fresh",31.275246185594753],["(/.f64 (*.f64 (pow.f64 x -2) (/.f64 (fma.f64 (cbrt.f64 2) (cbrt.f64 (sqrt.f64 2)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))) (sqrt.f64 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.567739727920266],["(*.f64 (/.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (pow.f64 (-.f64 1 (cos.f64 x)) 2/3)) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (pow.f64 x -2))","fresh",31.311891432008775],["(/.f64 (*.f64 (pow.f64 x -2) (pow.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 3) 1/3)) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.308490509465507],["(*.f64 (-.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 3)) (pow.f64 x -2))","fresh",31.43347114851214],["(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4)))))","fresh",32.20377518620566],["(/.f64 (/.f64 (fma.f64 (*.f64 1/2 (cos.f64 x)) (+.f64 1 (cos.f64 (*.f64 2 x))) -1) (neg.f64 (*.f64 x x))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.406310604542192],["(/.f64 (*.f64 (pow.f64 x -2) (*.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 x))) (-.f64 1 (cos.f64 x)))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.287271218234725],["(/.f64 (*.f64 (*.f64 (pow.f64 x -2) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.309534936889474],["(/.f64 (*.f64 (pow.f64 x -2) (/.f64 (fma.f64 (neg.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sqrt.f64 2)))) (/.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 1/2)) (sqrt.f64 2)) (sqrt.f64 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.06193039232339],["(/.f64 (/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","fresh",31.228655633255553]],"compiler":[[52,38],[31,25],[29,21],[24,18],[12,10],[18,14],[27,19],[28,18],[31,23],[34,26],[29,23]],"count":[[258,11]],"kept":[{"done":[0,0],"fresh":[9,8],"new":[248,3],"picked":[1,0]}],"min-error":[0.05826077671461664],"time":60.987060546875,"type":"prune"},{"accuracy":[0.24125982165406845],"baseline":[31.06193039232339],"branch":[["x",0.24125982165406845,3],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))",12.435676944498464,2]],"compiler":[[2,1],[9,6],[709,473]],"count":[[29,3]],"inputs":[["(/.f64 (*.f64 (pow.f64 x -2) (/.f64 (fma.f64 (cbrt.f64 2) (cbrt.f64 (sqrt.f64 2)) (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 3)) (sqrt.f64 2))) (sqrt.f64 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (pow.f64 x -2) (/.f64 (fma.f64 (neg.f64 (*.f64 (cos.f64 x) (cbrt.f64 (sqrt.f64 2)))) (/.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 1/2)) (sqrt.f64 2)) (sqrt.f64 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (/.f64 (-.f64 (sqrt.f64 2) (*.f64 2 (/.f64 (pow.f64 (cos.f64 x) 3) (sqrt.f64 2)))) (*.f64 (sqrt.f64 2) (pow.f64 x 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (/.f64 (/.f64 (+.f64 1 (pow.f64 (cos.f64 (+.f64 x x)) 3)) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (-.f64 1 (cos.f64 (+.f64 x x)))))) (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 (+.f64 x x)) 2) (-.f64 1 (cos.f64 (+.f64 x x))))) 2))) 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (pow.f64 x -2) (pow.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 3) 1/3)) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))) (fma.f64 (cos.f64 x) (*.f64 (/.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3))) 2) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1))) 1))","(/.f64 (/.f64 (fma.f64 (*.f64 1/2 (cos.f64 x)) (+.f64 1 (cos.f64 (*.f64 2 x))) -1) (neg.f64 (*.f64 x x))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (pow.f64 x -2) (*.f64 (+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 2) (cos.f64 x))) (-.f64 1 (cos.f64 x)))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (*.f64 (pow.f64 x -2) (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (pow.f64 x -2) (/.f64 (-.f64 (sqrt.f64 2) (/.f64 (*.f64 (pow.f64 (cos.f64 x) 3) 2) (sqrt.f64 2))) (sqrt.f64 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (/.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (*.f64 x x)) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (pow.f64 x -2) (pow.f64 (pow.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) 3) 1/3)) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (+.f64 (*.f64 1/2 (cos.f64 x)) (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (cos.f64 x))))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (pow.f64 x -2) (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) 3)) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (fma.f64 (cos.f64 x) (/.f64 (*.f64 (+.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 3) 3)) (/.f64 1 (fma.f64 (cos.f64 x) (+.f64 (cos.f64 x) -1) 1))) (-.f64 (+.f64 1 (pow.f64 (cos.f64 x) 6)) (pow.f64 (cos.f64 x) 3))) 1))","(/.f64 (+.f64 (pow.f64 x -2) (*.f64 (pow.f64 x -2) (neg.f64 (pow.f64 (cos.f64 x) 3)))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(*.f64 (/.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (pow.f64 (-.f64 1 (cos.f64 x)) 2/3)) (cbrt.f64 (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (pow.f64 x -2))","(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (pow.f64 (cos.f64 x) 3))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 (cbrt.f64 (pow.f64 x -2)) 3))","(fma.f64 (cbrt.f64 (pow.f64 x -4)) (cbrt.f64 (pow.f64 x -2)) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))","(*.f64 (-.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 3)) (pow.f64 x -2))","(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4)))))","(+.f64 (pow.f64 x -2) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))","(*.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 3) (pow.f64 x -2))","(*.f64 (*.f64 (/.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) 2) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))) (pow.f64 x -2))","(pow.f64 (pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 3) 1/3)","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))"]],"link":["."],"name":["cos2 (problem 3.4.1)"],"oracle":[63.52629432372491],"outputs":[["(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))","(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4)))))","(/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (+.f64 (*.f64 1/2 (cos.f64 x)) (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (cos.f64 x))))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))"]],"time":44.125,"times":[["x",25.158203125],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))",7.344970703125]],"type":"regimes"},{"bstep":[[0.06917246512513657,120070755.44641815,11.659912109375],[-23902.966836370517,-2.233822497709603e-9,11.072021484375]],"compiler":[[11,8],[2,1]],"method":["binary-search","binary-search"],"time":23.02294921875,"type":"bsearch"},{"compiler":[[82,55]],"inputs":[["(if (<=.f64 x -6570397493733373/274877906944) (/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)) (if (<=.f64 x 4984401410589819/72057594037927936) (+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4))))) (/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (+.f64 (*.f64 1/2 (cos.f64 x)) (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (cos.f64 x))))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x -6570397493733373/274877906944) (/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (/.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 (+.f64 x x)) (cos.f64 0))) 2))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1)) (if (<=.f64 x 4984401410589819/72057594037927936) (+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4))))) (/.f64 (*.f64 (pow.f64 x -2) (-.f64 1 (+.f64 (*.f64 1/2 (cos.f64 x)) (*.f64 (*.f64 1/2 (cos.f64 (+.f64 x x))) (cos.f64 x))))) (fma.f64 (cos.f64 x) (+.f64 1 (cos.f64 x)) 1))))","(if (<=.f64 x -6570397493733373/274877906944) (*.f64 (pow.f64 x -2) (-.f64 1 (cos.f64 x))) (if (<=.f64 x 4984401410589819/72057594037927936) (+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4))))) (*.f64 (pow.f64 x -2) (-.f64 1 (cos.f64 x)))))"]],"stop":[["fuel",1]],"time":33.68701171875,"type":"simplify"},{"time":0.027099609375,"type":"soundness"},{"compiler":[[82,55]],"remove-preprocessing":[[]],"time":27.407958984375,"type":"end"}]
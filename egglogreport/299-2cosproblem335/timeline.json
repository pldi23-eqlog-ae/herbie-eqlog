[{"compiler":[[10,7]],"method":["search"],"sampling":[[1,0.9990236759185791,0.0,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":0.18310546875,"type":"analyze"},{"outcomes":[["body",4096,"valid",4.55615234375,4],["body",1024,"valid",845.294921875,3993],["body",512,"valid",169.476806640625,1398],["body",2048,"valid",937.448974609375,2087],["body",256,"valid",47.901123046875,774]],"time":2014.742919921875,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 eps))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 eps))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 eps))"]],"symmetry":[[]],"time":60.823974609375,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"time":19.073974609375,"type":"simplify"},{"compiler":[[9,6]],"time":0.244140625,"type":"eval"},{"alts":[["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","next",39.744630232718805]],"compiler":[[9,6],[9,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[39.744630232718805],"time":0.724853515625,"type":"prune"},{"compiler":[[20,6]],"locations":[["(cos.f64 x)",0.00390625,true],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",1.6375803274760992,true],["(cos.f64 (+.f64 x eps))",4.494593380210006,true]],"time":5.885009765625,"type":"localize"},{"count":[[3,52]],"series":[["(cos.f64 x)","x","-inf",0.1337890625],["(cos.f64 x)","x","inf",0.155029296875],["(cos.f64 x)","x","0",0.216796875],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","eps","-inf",0.197998046875],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","eps","inf",0.47412109375],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","eps","0",0.286865234375],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","x","-inf",0.237060546875],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","x","inf",0.18701171875],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","x","0",0.27099609375],["(cos.f64 (+.f64 x eps))","eps","-inf",0.183837890625],["(cos.f64 (+.f64 x eps))","eps","inf",0.18701171875],["(cos.f64 (+.f64 x eps))","eps","0",0.348876953125],["(cos.f64 (+.f64 x eps))","x","-inf",0.205078125],["(cos.f64 (+.f64 x eps))","x","inf",0.183837890625],["(cos.f64 (+.f64 x eps))","x","0",1.360107421875]],"time":4.822021484375,"type":"series"},{"count":[[3,119]],"inputs":[["(cos.f64 (+.f64 x eps))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 x eps)) (*.f64 (cos.f64 (+.f64 x eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (+.f64 x eps)) 0) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 x eps)) (*.f64 0 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 (+.f64 x eps))) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (*.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (+.f64 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 (+.f64 x eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (+.f64 x eps))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2)) (cbrt.f64 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (+.f64 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 x eps))) (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 x eps))) 2) (*.f64 2 (-.f64 (cos.f64 (-.f64 x eps)) (cos.f64 (+.f64 x eps))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (+.f64 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x eps))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (+.f64 x eps))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) (cos.f64 x) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (+.f64 x eps))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 0) (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps)))) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps))) -1) (*.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps)))) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cos.f64 (+.f64 x eps)) 0) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))) (-.f64 (cbrt.f64 (cos.f64 (+.f64 x eps))) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 2)) (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (*.f64 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)) (sin.f64 (*.f64 eps 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)) (sin.f64 (*.f64 eps 1/2))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))) (sin.f64 (*.f64 eps 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 eps 1/2)) (*.f64 -2 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)) (sin.f64 (/.f64 eps -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))) (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (neg.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)) (sin.f64 (*.f64 eps 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (neg.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)) (sin.f64 (/.f64 eps -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (-.f64 (cos.f64 (*.f64 1/2 (-.f64 (+.f64 (+.f64 x eps) x) eps))) (cos.f64 (/.f64 (*.f64 2 (+.f64 x eps)) 2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 (*.f64 1/2 (-.f64 (+.f64 (+.f64 x eps) x) eps))) (cos.f64 (/.f64 (*.f64 2 (+.f64 x eps)) 2))) -2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (cos.f64 (+.f64 x eps))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 (+.f64 x eps))) (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cos.f64 x) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2)) (cbrt.f64 (cos.f64 (+.f64 x eps))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 (+.f64 x eps)) 1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) (cos.f64 x) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 x) (*.f64 (cos.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) 0) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 x) (*.f64 0 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 x)))))"]],"rules":[["egg-rr",19],["egg-rr",69],["egg-rr",31]],"time":30.240966796875,"type":"rewrite"},{"count":[[171,161]],"inputs":[["(cos.f64 eps)","(+.f64 (cos.f64 eps) (*.f64 -1 (*.f64 x (sin.f64 eps))))","(+.f64 (cos.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 x 2))) (*.f64 -1 (*.f64 x (sin.f64 eps)))))","(+.f64 (cos.f64 eps) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 x 2))) (*.f64 -1 (*.f64 x (sin.f64 eps))))))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 eps x))","(cos.f64 (-.f64 eps (*.f64 -1 x)))","(cos.f64 (-.f64 eps (*.f64 -1 x)))","(cos.f64 (-.f64 eps (*.f64 -1 x)))","(cos.f64 (-.f64 eps (*.f64 -1 x)))","(cos.f64 x)","(+.f64 (cos.f64 x) (*.f64 -1 (*.f64 eps (sin.f64 x))))","(+.f64 (cos.f64 x) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x)))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (cos.f64 x) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 eps x))","(cos.f64 (-.f64 x (*.f64 -1 eps)))","(cos.f64 (-.f64 x (*.f64 -1 eps)))","(cos.f64 (-.f64 x (*.f64 -1 eps)))","(cos.f64 (-.f64 x (*.f64 -1 eps)))","(-.f64 (cos.f64 eps) 1)","(-.f64 (+.f64 (cos.f64 eps) (*.f64 -1 (*.f64 x (sin.f64 eps)))) 1)","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2)))) 1)","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2))))) 1)","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 x))","(*.f64 -1 (*.f64 eps (sin.f64 x)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x)))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 x))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))"]],"method":["egg-herbie"],"outputs":[["(cos.f64 eps)","(+.f64 (cos.f64 eps) (*.f64 -1 (*.f64 x (sin.f64 eps))))","(fma.f64 (neg.f64 x) (sin.f64 eps) (cos.f64 eps))","(+.f64 (cos.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 x 2))) (*.f64 -1 (*.f64 x (sin.f64 eps)))))","(+.f64 (fma.f64 (neg.f64 x) (sin.f64 eps) (cos.f64 eps)) (*.f64 (*.f64 -1/2 (cos.f64 eps)) (*.f64 x x)))","(+.f64 (cos.f64 eps) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 x 2))) (*.f64 -1 (*.f64 x (sin.f64 eps))))))","(+.f64 (cos.f64 eps) (+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 1/6 (pow.f64 x 3)) (neg.f64 x))) (*.f64 (*.f64 -1/2 (cos.f64 eps)) (*.f64 x x))))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 x eps))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 x eps))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 x eps))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 x eps))","(cos.f64 (-.f64 eps (*.f64 -1 x)))","(cos.f64 (+.f64 x eps))","(cos.f64 (-.f64 eps (*.f64 -1 x)))","(cos.f64 (+.f64 x eps))","(cos.f64 (-.f64 eps (*.f64 -1 x)))","(cos.f64 (+.f64 x eps))","(cos.f64 (-.f64 eps (*.f64 -1 x)))","(cos.f64 (+.f64 x eps))","(cos.f64 x)","(+.f64 (cos.f64 x) (*.f64 -1 (*.f64 eps (sin.f64 x))))","(fma.f64 (neg.f64 eps) (sin.f64 x) (cos.f64 x))","(+.f64 (cos.f64 x) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x)))))","(-.f64 (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1/2 (*.f64 eps eps)))) (*.f64 eps (sin.f64 x)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (cos.f64 x) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))))","(fma.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (-.f64 (*.f64 (cos.f64 x) (+.f64 1 (*.f64 -1/2 (*.f64 eps eps)))) (*.f64 eps (sin.f64 x))))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 x eps))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 x eps))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 x eps))","(cos.f64 (+.f64 eps x))","(cos.f64 (+.f64 x eps))","(cos.f64 (-.f64 x (*.f64 -1 eps)))","(cos.f64 (+.f64 x eps))","(cos.f64 (-.f64 x (*.f64 -1 eps)))","(cos.f64 (+.f64 x eps))","(cos.f64 (-.f64 x (*.f64 -1 eps)))","(cos.f64 (+.f64 x eps))","(cos.f64 (-.f64 x (*.f64 -1 eps)))","(cos.f64 (+.f64 x eps))","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (+.f64 (cos.f64 eps) (*.f64 -1 (*.f64 x (sin.f64 eps)))) 1)","(+.f64 (cos.f64 eps) (fma.f64 (neg.f64 x) (sin.f64 eps) -1))","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2)))) 1)","(+.f64 (fma.f64 (fma.f64 (cos.f64 eps) -1/2 1/2) (*.f64 x x) (*.f64 (neg.f64 x) (sin.f64 eps))) (+.f64 (cos.f64 eps) -1))","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2))))) 1)","(+.f64 (+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 1/6 (pow.f64 x 3)) (neg.f64 x))) (*.f64 (fma.f64 (cos.f64 eps) -1/2 1/2) (*.f64 x x))) (+.f64 (cos.f64 eps) -1))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 eps (*.f64 -1 x))) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(*.f64 -1 (*.f64 eps (sin.f64 x)))","(*.f64 (neg.f64 eps) (sin.f64 x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))","(fma.f64 -1/2 (*.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x)))))","(fma.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (fma.f64 -1/2 (*.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))))","(fma.f64 (*.f64 (pow.f64 eps 4) (cos.f64 x)) 1/24 (fma.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (fma.f64 -1/2 (*.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x)))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (cos.f64 (-.f64 x (*.f64 -1 eps))) (cos.f64 x))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 -1/2 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/2 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 (fma.f64 -1/2 (*.f64 x x) 1) (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/720 (pow.f64 x 6))))"]],"time":163.43017578125,"type":"simplify"},{"compiler":[[2235,806]],"time":21.658935546875,"type":"eval"},{"alts":[["(fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","fresh",22.7389015291552],["(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","fresh",22.76996714960123],["(*.f64 (sin.f64 (*.f64 eps 1/2)) (*.f64 -2 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))","fresh",17.1317681222261],["(+.f64 (+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 1/6 (pow.f64 x 3)) (neg.f64 x))) (*.f64 (fma.f64 (cos.f64 eps) -1/2 1/2) (*.f64 x x))) (+.f64 (cos.f64 eps) -1))","fresh",37.71703424001197],["(-.f64 (-.f64 0 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",4.640601868106124],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))","next",4.636357633477935],["(pow.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) 3)","fresh",39.844786237458806],["(fma.f64 (*.f64 (pow.f64 eps 4) (cos.f64 x)) 1/24 (fma.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (fma.f64 -1/2 (*.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x)))))","fresh",34.20972785007899],["(fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","fresh",22.869995962503424],["(fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","fresh",22.867731154483344],["(*.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 2)))","fresh",39.76656214272976],["(*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))) (-.f64 (cbrt.f64 (cos.f64 (+.f64 x eps))) (cbrt.f64 (cos.f64 x))))","fresh",39.84386135893314]],"compiler":[[15,9],[15,9],[17,13],[28,20],[17,13],[17,11],[12,9],[31,20],[22,14],[25,14],[21,11],[34,19],[15,9],[15,9],[17,13],[28,20],[17,13],[17,11],[12,9],[31,20],[22,14],[25,14],[21,11],[34,19]],"count":[[162,12]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[161,12],"picked":[1,0]}],"min-error":[0.22363260216576056],"time":36.891845703125,"type":"prune"},{"compiler":[[49,11]],"locations":[["(*.f64 (cos.f64 x) (cos.f64 eps))",0.078125,true],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))",0.1496062813218253,true],["(*.f64 (sin.f64 x) (sin.f64 eps))",0.1953125,true],["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))",1.5795310227713724,true]],"time":11.22412109375,"type":"localize"},{"count":[[4,76]],"series":[["(*.f64 (cos.f64 x) (cos.f64 eps))","eps","-inf",0.163818359375],["(*.f64 (cos.f64 x) (cos.f64 eps))","eps","inf",0.157958984375],["(*.f64 (cos.f64 x) (cos.f64 eps))","eps","0",0.201904296875],["(*.f64 (cos.f64 x) (cos.f64 eps))","x","-inf",0.595947265625],["(*.f64 (cos.f64 x) (cos.f64 eps))","x","inf",0.149169921875],["(*.f64 (cos.f64 x) (cos.f64 eps))","x","0",0.237060546875],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))","eps","-inf",0.22216796875],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))","eps","inf",0.239013671875],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))","eps","0",0.199951171875],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))","x","-inf",0.257080078125],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))","x","inf",0.238037109375],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))","x","0",0.21484375],["(*.f64 (sin.f64 x) (sin.f64 eps))","eps","-inf",0.288818359375],["(*.f64 (sin.f64 x) (sin.f64 eps))","eps","inf",0.489013671875],["(*.f64 (sin.f64 x) (sin.f64 eps))","eps","0",0.34912109375],["(*.f64 (sin.f64 x) (sin.f64 eps))","x","-inf",0.27197265625],["(*.f64 (sin.f64 x) (sin.f64 eps))","x","inf",0.48388671875],["(*.f64 (sin.f64 x) (sin.f64 eps))","x","0",0.453857421875],["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","eps","-inf",0.347900390625],["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","eps","inf",0.308837890625],["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","eps","0",0.59912109375],["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","x","-inf",0.322998046875],["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","x","inf",0.532958984375],["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","x","0",0.386962890625]],"time":8.052001953125,"type":"series"},{"count":[[4,243]],"inputs":[["(+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))","(*.f64 (sin.f64 x) (sin.f64 eps))","(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(*.f64 (cos.f64 x) (cos.f64 eps))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 0) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 0 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)) (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (+.f64 (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (+.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps)) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (-.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps)) (cbrt.f64 (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (-.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps))))) (+.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps))))) (+.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (*.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (cos.f64 x))))) (-.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (*.f64 (cos.f64 eps) (cbrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (*.f64 (cos.f64 eps) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (-.f64 (*.f64 (cos.f64 eps) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cos.f64 x) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) (cos.f64 x) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 1/2 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 eps) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (neg.f64 (cos.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 0) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) (*.f64 0 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (-.f64 eps x)) 1/2) (neg.f64 (*.f64 (cos.f64 (+.f64 x eps)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 (-.f64 eps x)) 1/2) (*.f64 (cos.f64 (+.f64 x eps)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (/.f64 1 -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (sqrt.f64 2)) (/.f64 1 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (cbrt.f64 2)) (/.f64 1 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps)))) (neg.f64 (sqrt.f64 2))) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) 2)) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps)))) -1) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) 2)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps)))) 2) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps)))) (cbrt.f64 4)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) 2)) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps)))) (sqrt.f64 2)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) 2)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps)))) 1) (/.f64 (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (neg.f64 (sqrt.f64 2))) (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 2)) (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 4)) (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 2)) (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 (neg.f64 (sqrt.f64 2))) (/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 x (-.f64 eps (+.f64 x eps))) 1/2)) (sin.f64 (*.f64 (-.f64 (-.f64 x eps) (+.f64 x eps)) 1/2))) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 (cbrt.f64 2)) (/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 x (-.f64 eps (+.f64 x eps))) 1/2)) (sin.f64 (*.f64 (-.f64 (-.f64 x eps) (+.f64 x eps)) 1/2))) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 -1) (/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 x (-.f64 eps (+.f64 x eps))) 1/2)) (sin.f64 (*.f64 (-.f64 (-.f64 x eps) (+.f64 x eps)) 1/2))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 2) (/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 x (-.f64 eps (+.f64 x eps))) 1/2)) (sin.f64 (*.f64 (-.f64 (-.f64 x eps) (+.f64 x eps)) 1/2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 (cbrt.f64 4)) (/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 x (-.f64 eps (+.f64 x eps))) 1/2)) (sin.f64 (*.f64 (-.f64 (-.f64 x eps) (+.f64 x eps)) 1/2))) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -2 (sqrt.f64 2)) (/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 x (-.f64 eps (+.f64 x eps))) 1/2)) (sin.f64 (*.f64 (-.f64 (-.f64 x eps) (+.f64 x eps)) 1/2))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (/.f64 (*.f64 (sin.f64 (*.f64 (-.f64 x (-.f64 eps (+.f64 x eps))) 1/2)) (sin.f64 (*.f64 (-.f64 (-.f64 x eps) (+.f64 x eps)) 1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (sin.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 eps) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 2)) (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 eps) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 2)) (cbrt.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (sqrt.f64 2)) 1) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (cbrt.f64 2)) 1) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps)))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (cbrt.f64 2)) (cbrt.f64 (cbrt.f64 4))) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (cbrt.f64 2)) (cbrt.f64 2)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (cbrt.f64 2)) 1) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (sqrt.f64 2)) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (sqrt.f64 2)) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (sqrt.f64 2)) 1) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cos.f64 (-.f64 eps x)) 2) (*.f64 2 (cos.f64 (+.f64 x eps)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 (cos.f64 (-.f64 eps x)) (cos.f64 (+.f64 x eps))) (cbrt.f64 2))) (neg.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (cos.f64 (+.f64 x eps)) 1/2) (*.f64 (cos.f64 (-.f64 eps x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 (cos.f64 (-.f64 eps x)) 1/2)) (*.f64 (cos.f64 (+.f64 x eps)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 0) (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) (*.f64 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (+.f64 x eps)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 (+.f64 x eps)) 0) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (*.f64 (neg.f64 (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) 0) (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cos.f64 (+.f64 x eps)) 0) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 eps) (sin.f64 x) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (-.f64 (cos.f64 x) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 0) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))) (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)) (+.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) (sin.f64 eps)) 2)) (cbrt.f64 (*.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (-.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 2)) (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps)))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (cos.f64 x) (cos.f64 (+.f64 x eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cos.f64 x) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)) (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps))) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 (+.f64 x eps)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 0) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (*.f64 0 (*.f64 (cos.f64 x) (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) (neg.f64 (sqrt.f64 2))) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 2)) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) -1) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 2)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) 2) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) (cbrt.f64 4)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 2)) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) (sqrt.f64 2)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 2)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) 1) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (-.f64 0 (*.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) 0))) (+.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 eps) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) (/.f64 1 -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (sqrt.f64 2)) (/.f64 1 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 2)) (/.f64 1 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (neg.f64 (sqrt.f64 2))) (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (neg.f64 (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 2)) (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 4)) (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 2)) (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 eps) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (cbrt.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) 1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 2)) (cbrt.f64 (cbrt.f64 4))) (cbrt.f64 (cbrt.f64 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 2)) (cbrt.f64 2)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (sqrt.f64 2)) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (sqrt.f64 2)) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 2))) (neg.f64 (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 2)) 1) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (sqrt.f64 2)) 1) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 2)) 1) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (sqrt.f64 2)) 1) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 x) (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 3))))))"]],"rules":[["egg-rr",62],["egg-rr",58],["egg-rr",69],["egg-rr",54]],"time":45.259033203125,"type":"rewrite"},{"count":[[319,303]],"inputs":[["(-.f64 (cos.f64 eps) 1)","(-.f64 (+.f64 (cos.f64 eps) (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2))) 1)","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2)) (*.f64 (-.f64 (*.f64 1/24 (cos.f64 eps)) 1/24) (pow.f64 x 4)))) 1)","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 (+.f64 1/720 (*.f64 -1/720 (cos.f64 eps))) (pow.f64 x 6)) (+.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2)) (*.f64 (-.f64 (*.f64 1/24 (cos.f64 eps)) 1/24) (pow.f64 x 4))))) 1)","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x)))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 eps 6) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x)))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 1/40320 (*.f64 (pow.f64 eps 8) (cos.f64 x))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 eps 6) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (sin.f64 eps) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (*.f64 (sin.f64 eps) x))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 x 5) (sin.f64 eps))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (*.f64 (sin.f64 eps) x)))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 x 5) (sin.f64 eps))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 x 7) (sin.f64 eps))) (*.f64 (sin.f64 eps) x))))","(*.f64 eps (sin.f64 x))","(+.f64 (*.f64 eps (sin.f64 x)) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))))","(+.f64 (*.f64 eps (sin.f64 x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (sin.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)))))","(+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 eps 7) (sin.f64 x))) (+.f64 (*.f64 eps (sin.f64 x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (sin.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))))))","(-.f64 (cos.f64 eps) 1)","(-.f64 (+.f64 (cos.f64 eps) (*.f64 -1 (*.f64 x (sin.f64 eps)))) 1)","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2)))) 1)","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2))))) 1)","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(*.f64 -1 (*.f64 eps (sin.f64 x)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x)))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(cos.f64 eps)","(+.f64 (cos.f64 eps) (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 x 2))))","(+.f64 (cos.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 x 2))) (*.f64 1/24 (*.f64 (cos.f64 eps) (pow.f64 x 4)))))","(+.f64 (*.f64 -1/720 (*.f64 (cos.f64 eps) (pow.f64 x 6))) (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 x 2))) (*.f64 1/24 (*.f64 (cos.f64 eps) (pow.f64 x 4))))))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(cos.f64 x)","(+.f64 (cos.f64 x) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (cos.f64 x) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x)))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (cos.f64 x) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 eps 6) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (+.f64 (cos.f64 eps) (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2))) 1)","(+.f64 (cos.f64 eps) (fma.f64 (fma.f64 (cos.f64 eps) -1/2 1/2) (*.f64 x x) -1))","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2)) (*.f64 (-.f64 (*.f64 1/24 (cos.f64 eps)) 1/24) (pow.f64 x 4)))) 1)","(+.f64 (fma.f64 (fma.f64 (cos.f64 eps) -1/2 1/2) (*.f64 x x) (*.f64 (fma.f64 1/24 (cos.f64 eps) -1/24) (pow.f64 x 4))) (+.f64 (cos.f64 eps) -1))","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 (+.f64 1/720 (*.f64 -1/720 (cos.f64 eps))) (pow.f64 x 6)) (+.f64 (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2)) (*.f64 (-.f64 (*.f64 1/24 (cos.f64 eps)) 1/24) (pow.f64 x 4))))) 1)","(+.f64 (fma.f64 (pow.f64 x 6) (fma.f64 (cos.f64 eps) -1/720 1/720) (fma.f64 (fma.f64 (cos.f64 eps) -1/2 1/2) (*.f64 x x) (*.f64 (fma.f64 1/24 (cos.f64 eps) -1/24) (pow.f64 x 4)))) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x)))","(*.f64 (*.f64 -1/2 (*.f64 eps eps)) (cos.f64 x))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))","(*.f64 (cos.f64 x) (+.f64 (*.f64 1/24 (pow.f64 eps 4)) (*.f64 -1/2 (*.f64 eps eps))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 eps 6) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x)))))","(fma.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x)) (*.f64 (cos.f64 x) (+.f64 (*.f64 -1/2 (*.f64 eps eps)) (*.f64 -1/720 (pow.f64 eps 6)))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 1/40320 (*.f64 (pow.f64 eps 8) (cos.f64 x))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 eps 6) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))))","(+.f64 (*.f64 (cos.f64 x) (+.f64 (*.f64 1/24 (pow.f64 eps 4)) (*.f64 1/40320 (pow.f64 eps 8)))) (*.f64 (cos.f64 x) (+.f64 (*.f64 -1/2 (*.f64 eps eps)) (*.f64 -1/720 (pow.f64 eps 6)))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (sin.f64 eps) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (*.f64 (sin.f64 eps) x))","(*.f64 (sin.f64 eps) (+.f64 (*.f64 -1/6 (pow.f64 x 3)) x))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 x 5) (sin.f64 eps))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (*.f64 (sin.f64 eps) x)))","(fma.f64 1/120 (*.f64 (pow.f64 x 5) (sin.f64 eps)) (*.f64 (sin.f64 eps) (+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 x 5) (sin.f64 eps))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 x 7) (sin.f64 eps))) (*.f64 (sin.f64 eps) x))))","(+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 1/120 (pow.f64 x 5)) (*.f64 -1/6 (pow.f64 x 3)))) (*.f64 (sin.f64 eps) (+.f64 (*.f64 -1/5040 (pow.f64 x 7)) x)))","(*.f64 eps (sin.f64 x))","(+.f64 (*.f64 eps (sin.f64 x)) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))))","(*.f64 (sin.f64 x) (+.f64 (*.f64 -1/6 (pow.f64 eps 3)) eps))","(+.f64 (*.f64 eps (sin.f64 x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (sin.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)))))","(fma.f64 eps (sin.f64 x) (*.f64 (sin.f64 x) (+.f64 (*.f64 -1/6 (pow.f64 eps 3)) (*.f64 1/120 (pow.f64 eps 5)))))","(+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 eps 7) (sin.f64 x))) (+.f64 (*.f64 eps (sin.f64 x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 eps 5) (sin.f64 x))) (*.f64 -1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))))))","(+.f64 (*.f64 (sin.f64 x) (+.f64 (*.f64 -1/5040 (pow.f64 eps 7)) eps)) (*.f64 (sin.f64 x) (+.f64 (*.f64 -1/6 (pow.f64 eps 3)) (*.f64 1/120 (pow.f64 eps 5)))))","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (+.f64 (cos.f64 eps) (*.f64 -1 (*.f64 x (sin.f64 eps)))) 1)","(+.f64 (cos.f64 eps) (fma.f64 (neg.f64 x) (sin.f64 eps) -1))","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2)))) 1)","(+.f64 (fma.f64 (neg.f64 x) (sin.f64 eps) (cos.f64 eps)) (fma.f64 (fma.f64 (cos.f64 eps) -1/2 1/2) (*.f64 x x) -1))","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 (+.f64 1/2 (*.f64 -1/2 (cos.f64 eps))) (pow.f64 x 2))))) 1)","(+.f64 (cos.f64 eps) (+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 1/6 (pow.f64 x 3)) (neg.f64 x))) (fma.f64 (fma.f64 (cos.f64 eps) -1/2 1/2) (*.f64 x x) -1)))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(*.f64 -1 (*.f64 eps (sin.f64 x)))","(*.f64 (neg.f64 eps) (sin.f64 x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))","(fma.f64 -1/2 (*.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x)))))","(fma.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (fma.f64 -1/2 (*.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))))","(fma.f64 (*.f64 1/24 (pow.f64 eps 4)) (cos.f64 x) (fma.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (fma.f64 -1/2 (*.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x)))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))","(cos.f64 eps)","(+.f64 (cos.f64 eps) (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 x 2))))","(fma.f64 (*.f64 (cos.f64 eps) (*.f64 x x)) -1/2 (cos.f64 eps))","(+.f64 (cos.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 x 2))) (*.f64 1/24 (*.f64 (cos.f64 eps) (pow.f64 x 4)))))","(+.f64 (fma.f64 (*.f64 (cos.f64 eps) (*.f64 x x)) -1/2 (cos.f64 eps)) (*.f64 1/24 (*.f64 (cos.f64 eps) (pow.f64 x 4))))","(+.f64 (*.f64 -1/720 (*.f64 (cos.f64 eps) (pow.f64 x 6))) (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 x 2))) (*.f64 1/24 (*.f64 (cos.f64 eps) (pow.f64 x 4))))))","(+.f64 (fma.f64 -1/720 (*.f64 (cos.f64 eps) (pow.f64 x 6)) (cos.f64 eps)) (fma.f64 -1/2 (*.f64 (cos.f64 eps) (*.f64 x x)) (*.f64 1/24 (*.f64 (cos.f64 eps) (pow.f64 x 4)))))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(cos.f64 x)","(+.f64 (cos.f64 x) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))","(*.f64 (cos.f64 x) (+.f64 (*.f64 -1/2 (*.f64 eps eps)) 1))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (cos.f64 x) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x)))))","(+.f64 (*.f64 (cos.f64 x) (+.f64 (*.f64 1/24 (pow.f64 eps 4)) (*.f64 -1/2 (*.f64 eps eps)))) (cos.f64 x))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (cos.f64 x) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 eps 6) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))))","(+.f64 (fma.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x)) (cos.f64 x)) (*.f64 (cos.f64 x) (+.f64 (*.f64 -1/2 (*.f64 eps eps)) (*.f64 -1/720 (pow.f64 eps 6)))))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))","(*.f64 (cos.f64 eps) (cos.f64 x))"]],"time":252.744873046875,"type":"simplify"},{"compiler":[[6679,2248]],"time":49.947021484375,"type":"eval"},{"alts":[["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sin.f64 eps))))","fresh",4.693342712454685],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","next",4.636248974658253],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (/.f64 (/.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 2)) (cbrt.f64 (cbrt.f64 4))) (cbrt.f64 (cbrt.f64 16)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",27.180152044303465],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (*.f64 (sin.f64 x) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2))))","fresh",14.025104178403259],["(*.f64 (sin.f64 (*.f64 eps 1/2)) (*.f64 -2 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))","fresh",17.1317681222261],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (*.f64 (sin.f64 eps) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))","fresh",4.707301206289409],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 3) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",4.807376142097736],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",4.666206318099641],["(fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))","fresh",4.69126098024952],["(-.f64 (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps))))) (+.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",4.804294783642835],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) 3))","fresh",4.853722078884023],["(fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","fresh",22.869995962503424],["(fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","fresh",22.867731154483344],["(-.f64 (*.f64 (cos.f64 x) (+.f64 (*.f64 1/24 (pow.f64 eps 4)) (*.f64 -1/2 (*.f64 eps eps)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",34.17723699558554],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (/.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) (cbrt.f64 4)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 2)) (cbrt.f64 2)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",28.198493152509293]],"compiler":[[24,16],[23,15],[32,25],[24,16],[17,13],[24,16],[18,14],[24,16],[27,19],[44,27],[20,14],[22,14],[25,14],[22,16],[41,25],[24,16],[23,15],[32,25],[24,16],[17,13],[24,16],[18,14],[24,16],[27,19],[44,27],[20,14],[22,14],[25,14],[22,16],[41,25]],"count":[[315,15]],"kept":[{"done":[0,0],"fresh":[11,3],"new":[303,12],"picked":[1,0]}],"min-error":[0.08733633479469081],"time":107.653076171875,"type":"prune"},{"compiler":[[77,30]],"locations":[["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))",0.1496062813218253,true],["(*.f64 (sin.f64 x) (sin.f64 eps))",0.1953125,false],["(pow.f64 (cos.f64 eps) 2)",0.2734375,true],["(fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x)))",1.5381320044984168,true]],"time":18.8369140625,"type":"localize"},{"count":[[3,52]],"series":[["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","x","-inf",0.24609375],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","x","inf",0.239013671875],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","x","0",0.279052734375],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","eps","-inf",0.225830078125],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","eps","inf",0.257080078125],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","eps","0",0.251953125],["(pow.f64 (cos.f64 eps) 2)","eps","-inf",0.156982421875],["(pow.f64 (cos.f64 eps) 2)","eps","inf",0.14404296875],["(pow.f64 (cos.f64 eps) 2)","eps","0",0.18798828125],["(fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x)))","x","-inf",0.526123046875],["(fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x)))","x","inf",3.430908203125],["(fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x)))","x","0",0.89306640625],["(fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x)))","eps","-inf",2.43505859375],["(fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x)))","eps","inf",2.666015625],["(fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x)))","eps","0",1.171875]],"time":13.39306640625,"type":"series"},{"count":[[3,172]],"inputs":[["(fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x)))","(pow.f64 (cos.f64 eps) 2)","(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 0) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 0 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2/3) (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (+.f64 -1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) 2/3) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (neg.f64 (cos.f64 x))) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cos.f64 x)) 1 (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (neg.f64 (pow.f64 (cos.f64 x) 2/3)) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (cos.f64 eps)) (cos.f64 x)) (pow.f64 (cos.f64 eps) 2/3) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)))) (pow.f64 (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)) 2/3) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (cos.f64 eps))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2/3)) (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)) (cbrt.f64 (cos.f64 eps)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 eps) (cos.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) -1 (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cos.f64 x) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) (cos.f64 x) (neg.f64 (cos.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 eps eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 0 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 1 (*.f64 1/2 (cos.f64 (+.f64 eps eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 eps) 2) (*.f64 (pow.f64 (cos.f64 eps) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 eps) 2) 0) (pow.f64 (cos.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 eps) 2) (*.f64 0 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cos.f64 eps) 2)) (pow.f64 (cos.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (sin.f64 eps)) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cos.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (sin.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 eps) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 eps)) (pow.f64 (cos.f64 eps) (+.f64 2/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 eps)) (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 eps) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 eps) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (cos.f64 eps))) (*.f64 1 (neg.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 eps) -1) (*.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (cos.f64 eps)) -1) (*.f64 (neg.f64 (cos.f64 eps)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (cos.f64 eps)) 1) (*.f64 (neg.f64 (cos.f64 eps)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sin.f64 eps)) (-.f64 -1 (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sin.f64 eps)) (-.f64 1 (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 eps)) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) (+.f64 2/3 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 4)) (pow.f64 (cos.f64 eps) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 4)) (pow.f64 (cos.f64 eps) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 eps) 2/3) (cbrt.f64 (pow.f64 (cos.f64 eps) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 eps) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 3)) (+.f64 (*.f64 1/2 1/2) (-.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) (*.f64 1/2 (cos.f64 (+.f64 eps eps)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 eps eps)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 eps) 2) 3)) (+.f64 1 (+.f64 (*.f64 (pow.f64 (sin.f64 eps) 2) (pow.f64 (sin.f64 eps) 2)) (pow.f64 (sin.f64 eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 eps)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 2/3) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 2/3) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 eps) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (cos.f64 eps)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (cos.f64 eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (cos.f64 eps) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 (sin.f64 eps) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 eps) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (sin.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (sin.f64 eps) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 (cos.f64 (-.f64 x eps)) 1/2)) (*.f64 (cos.f64 (+.f64 x eps)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) (*.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) 0) (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) (*.f64 0 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))) (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))) (*.f64 (cos.f64 eps) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))) (*.f64 (cos.f64 eps) (cos.f64 x))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (neg.f64 (cos.f64 (+.f64 x eps)))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))) (*.f64 (neg.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (*.f64 (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (-.f64 (cos.f64 x) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))) (neg.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 (sin.f64 eps) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))) (*.f64 (cos.f64 eps) (cos.f64 x))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 0) (*.f64 (sin.f64 eps) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (cos.f64 x)))) (pow.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2/3) (+.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) 2/3) (cbrt.f64 (*.f64 (*.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (sin.f64 eps)) (sin.f64 x))))) (-.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (*.f64 (sin.f64 eps) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))) (pow.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) 2/3) (cbrt.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (cos.f64 x))) (neg.f64 (pow.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (neg.f64 (cos.f64 (+.f64 x eps))) (cos.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2/3) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x)))) (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) 2/3) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 eps) (neg.f64 (sin.f64 x)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 eps) (sin.f64 x))) (neg.f64 (pow.f64 (*.f64 (sin.f64 eps) (sin.f64 x)) 2/3)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 (sin.f64 x)) (cbrt.f64 (sin.f64 eps))) (pow.f64 (sin.f64 eps) 2/3) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2/3) (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1 (neg.f64 (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (cos.f64 eps)) (cos.f64 x)) (pow.f64 (cos.f64 eps) 2/3) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)))) (pow.f64 (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)) 2/3) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (cos.f64 eps))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2/3)) (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x))) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (cos.f64 x))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) 2)) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)) (cbrt.f64 (cos.f64 eps)) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 eps) (cos.f64 x)) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (sin.f64 eps) (sin.f64 x)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) (cos.f64 x) (-.f64 (neg.f64 (cos.f64 x)) (*.f64 (sin.f64 eps) (sin.f64 x))))))))"]],"rules":[["egg-rr",67],["egg-rr",63],["egg-rr",42]],"time":36.550048828125,"type":"rewrite"},{"count":[[224,216]],"inputs":[["(*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/18 (cos.f64 x)) (*.f64 -1/72 (cos.f64 x)))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (+.f64 (*.f64 (pow.f64 eps 6) (+.f64 (*.f64 1/216 (cos.f64 x)) (+.f64 (*.f64 -1/405 (cos.f64 x)) (*.f64 -23/6480 (cos.f64 x))))) (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/18 (cos.f64 x)) (*.f64 -1/72 (cos.f64 x))))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (+.f64 (*.f64 (pow.f64 eps 6) (+.f64 (*.f64 1/216 (cos.f64 x)) (+.f64 (*.f64 -1/405 (cos.f64 x)) (*.f64 -23/6480 (cos.f64 x))))) (+.f64 (*.f64 (pow.f64 eps 8) (+.f64 (*.f64 -1/1701 (cos.f64 x)) (+.f64 (*.f64 23/19440 (cos.f64 x)) (+.f64 (*.f64 1/2430 (cos.f64 x)) (*.f64 -1069/1088640 (cos.f64 x)))))) (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/18 (cos.f64 x)) (*.f64 -1/72 (cos.f64 x)))))))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (cos.f64 eps) (pow.f64 1 1/3)) 1)","(-.f64 (+.f64 (*.f64 (cos.f64 eps) (pow.f64 1 1/3)) (*.f64 (pow.f64 x 2) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/2))) 1)","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 1/24 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/24) (pow.f64 x 4)) (+.f64 (*.f64 (cos.f64 eps) (pow.f64 1 1/3)) (*.f64 (pow.f64 x 2) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/2)))) 1)","(-.f64 (+.f64 (*.f64 (+.f64 1/720 (*.f64 -1/720 (*.f64 (cos.f64 eps) (pow.f64 1 1/3)))) (pow.f64 x 6)) (+.f64 (*.f64 (-.f64 (*.f64 1/24 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/24) (pow.f64 x 4)) (+.f64 (*.f64 (cos.f64 eps) (pow.f64 1 1/3)) (*.f64 (pow.f64 x 2) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/2))))) 1)","(-.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","1","(+.f64 1 (*.f64 -1 (pow.f64 eps 2)))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 eps 2)) (*.f64 1/3 (pow.f64 eps 4))))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 eps 2)) (+.f64 (*.f64 1/3 (pow.f64 eps 4)) (*.f64 -2/45 (pow.f64 eps 6)))))","(*.f64 -1 (*.f64 eps (sin.f64 x)))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (*.f64 -1 (*.f64 eps (sin.f64 x))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (*.f64 -1 (*.f64 eps (sin.f64 x)))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (+.f64 (*.f64 -1 (*.f64 eps (sin.f64 x))) (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/18 (cos.f64 x)) (*.f64 -1/72 (cos.f64 x)))))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (pow.f64 1 1/3) (cos.f64 eps)) 1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (cos.f64 eps)) (*.f64 -1 (*.f64 x (sin.f64 eps)))) 1)","(-.f64 (+.f64 (*.f64 (pow.f64 x 2) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/2)) (+.f64 (*.f64 (pow.f64 1 1/3) (cos.f64 eps)) (*.f64 -1 (*.f64 x (sin.f64 eps))))) 1)","(-.f64 (+.f64 (*.f64 (pow.f64 x 2) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/2)) (+.f64 (*.f64 (pow.f64 1 1/3) (cos.f64 eps)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (*.f64 -1 (*.f64 x (sin.f64 eps)))))) 1)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 eps) (cos.f64 x))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 eps) (cos.f64 x))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 eps) (cos.f64 x))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 eps) (cos.f64 x))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2))","(*.f64 (*.f64 (cos.f64 x) -1/2) (*.f64 eps eps))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/18 (cos.f64 x)) (*.f64 -1/72 (cos.f64 x)))))","(fma.f64 (*.f64 (cos.f64 x) -1/2) (*.f64 eps eps) (*.f64 (pow.f64 eps 4) (*.f64 (cos.f64 x) 1/24)))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (+.f64 (*.f64 (pow.f64 eps 6) (+.f64 (*.f64 1/216 (cos.f64 x)) (+.f64 (*.f64 -1/405 (cos.f64 x)) (*.f64 -23/6480 (cos.f64 x))))) (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/18 (cos.f64 x)) (*.f64 -1/72 (cos.f64 x))))))","(fma.f64 (*.f64 (cos.f64 x) -1/2) (*.f64 eps eps) (fma.f64 (pow.f64 eps 6) (*.f64 (cos.f64 x) (+.f64 1/216 -13/2160)) (*.f64 (pow.f64 eps 4) (*.f64 (cos.f64 x) 1/24))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (+.f64 (*.f64 (pow.f64 eps 6) (+.f64 (*.f64 1/216 (cos.f64 x)) (+.f64 (*.f64 -1/405 (cos.f64 x)) (*.f64 -23/6480 (cos.f64 x))))) (+.f64 (*.f64 (pow.f64 eps 8) (+.f64 (*.f64 -1/1701 (cos.f64 x)) (+.f64 (*.f64 23/19440 (cos.f64 x)) (+.f64 (*.f64 1/2430 (cos.f64 x)) (*.f64 -1069/1088640 (cos.f64 x)))))) (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/18 (cos.f64 x)) (*.f64 -1/72 (cos.f64 x)))))))","(fma.f64 (*.f64 (cos.f64 x) -1/2) (*.f64 eps eps) (fma.f64 (pow.f64 eps 6) (*.f64 (cos.f64 x) (+.f64 1/216 -13/2160)) (fma.f64 (pow.f64 eps 8) (fma.f64 -1/1701 (cos.f64 x) (*.f64 (cos.f64 x) (+.f64 -23/40320 23/19440))) (*.f64 (pow.f64 eps 4) (*.f64 (cos.f64 x) 1/24)))))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (cos.f64 eps) (pow.f64 1 1/3)) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (+.f64 (*.f64 (cos.f64 eps) (pow.f64 1 1/3)) (*.f64 (pow.f64 x 2) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/2))) 1)","(+.f64 (cos.f64 eps) (fma.f64 (fma.f64 -1/2 (cos.f64 eps) 1/2) (*.f64 x x) -1))","(-.f64 (+.f64 (*.f64 (-.f64 (*.f64 1/24 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/24) (pow.f64 x 4)) (+.f64 (*.f64 (cos.f64 eps) (pow.f64 1 1/3)) (*.f64 (pow.f64 x 2) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/2)))) 1)","(+.f64 (*.f64 (fma.f64 1/24 (cos.f64 eps) -1/24) (pow.f64 x 4)) (+.f64 (cos.f64 eps) (fma.f64 (fma.f64 -1/2 (cos.f64 eps) 1/2) (*.f64 x x) -1)))","(-.f64 (+.f64 (*.f64 (+.f64 1/720 (*.f64 -1/720 (*.f64 (cos.f64 eps) (pow.f64 1 1/3)))) (pow.f64 x 6)) (+.f64 (*.f64 (-.f64 (*.f64 1/24 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/24) (pow.f64 x 4)) (+.f64 (*.f64 (cos.f64 eps) (pow.f64 1 1/3)) (*.f64 (pow.f64 x 2) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/2))))) 1)","(+.f64 (fma.f64 (+.f64 1/720 (*.f64 -1/720 (cos.f64 eps))) (pow.f64 x 6) (fma.f64 (fma.f64 1/24 (cos.f64 eps) -1/24) (pow.f64 x 4) (+.f64 (cos.f64 eps) (*.f64 (*.f64 x x) (fma.f64 -1/2 (cos.f64 eps) 1/2))))) -1)","(-.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 eps) (cos.f64 x)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","1","(+.f64 1 (*.f64 -1 (pow.f64 eps 2)))","(-.f64 1 (*.f64 eps eps))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 eps 2)) (*.f64 1/3 (pow.f64 eps 4))))","(+.f64 (-.f64 1 (*.f64 eps eps)) (*.f64 1/3 (pow.f64 eps 4)))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 eps 2)) (+.f64 (*.f64 1/3 (pow.f64 eps 4)) (*.f64 -2/45 (pow.f64 eps 6)))))","(+.f64 (-.f64 1 (*.f64 eps eps)) (fma.f64 1/3 (pow.f64 eps 4) (*.f64 -2/45 (pow.f64 eps 6))))","(*.f64 -1 (*.f64 eps (sin.f64 x)))","(*.f64 (neg.f64 eps) (sin.f64 x))","(+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (*.f64 -1 (*.f64 eps (sin.f64 x))))","(fma.f64 (*.f64 (cos.f64 x) -1/2) (*.f64 eps eps) (*.f64 (neg.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (*.f64 -1 (*.f64 eps (sin.f64 x)))))","(fma.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (fma.f64 (*.f64 (cos.f64 x) -1/2) (*.f64 eps eps) (*.f64 (neg.f64 eps) (sin.f64 x))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (cos.f64 x)) (*.f64 -1/6 (cos.f64 x))) (pow.f64 eps 2)) (+.f64 (*.f64 -1 (*.f64 eps (sin.f64 x))) (*.f64 (pow.f64 eps 4) (+.f64 (*.f64 1/18 (cos.f64 x)) (*.f64 -1/72 (cos.f64 x)))))))","(fma.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (fma.f64 (*.f64 (cos.f64 x) -1/2) (*.f64 eps eps) (-.f64 (*.f64 (pow.f64 eps 4) (*.f64 (cos.f64 x) 1/24)) (*.f64 eps (sin.f64 x)))))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 x) (cos.f64 eps))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (pow.f64 1 1/3) (cos.f64 eps)) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (cos.f64 eps)) (*.f64 -1 (*.f64 x (sin.f64 eps)))) 1)","(+.f64 (cos.f64 eps) (fma.f64 (neg.f64 x) (sin.f64 eps) -1))","(-.f64 (+.f64 (*.f64 (pow.f64 x 2) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/2)) (+.f64 (*.f64 (pow.f64 1 1/3) (cos.f64 eps)) (*.f64 -1 (*.f64 x (sin.f64 eps))))) 1)","(+.f64 (fma.f64 (*.f64 x x) (fma.f64 -1/2 (cos.f64 eps) 1/2) (-.f64 (cos.f64 eps) (*.f64 x (sin.f64 eps)))) -1)","(-.f64 (+.f64 (*.f64 (pow.f64 x 2) (+.f64 (*.f64 -1/2 (*.f64 (cos.f64 eps) (pow.f64 1 1/3))) 1/2)) (+.f64 (*.f64 (pow.f64 1 1/3) (cos.f64 eps)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (*.f64 -1 (*.f64 x (sin.f64 eps)))))) 1)","(+.f64 (+.f64 (cos.f64 eps) (*.f64 (sin.f64 eps) (+.f64 (*.f64 1/6 (pow.f64 x 3)) (neg.f64 x)))) (fma.f64 (fma.f64 -1/2 (cos.f64 eps) 1/2) (*.f64 x x) -1))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 eps) (cos.f64 x))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 eps) (cos.f64 x))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 eps) (cos.f64 x))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (cos.f64 eps) (cos.f64 x))) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))","(-.f64 (*.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (pow.f64 1 1/3)) (+.f64 (cos.f64 x) (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (cos.f64 (+.f64 eps x)) (cos.f64 x))"]],"time":182.248046875,"type":"simplify"},{"compiler":[[7326,2861]],"time":61.7138671875,"type":"eval"},{"alts":[["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","next",4.610550851747626],["(-.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 3) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",4.807376142097736],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (/.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (cbrt.f64 2)) (cbrt.f64 4))) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",4.623361443336427],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (*.f64 (sin.f64 x) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2))))","fresh",14.025104178403259],["(*.f64 (sin.f64 (*.f64 eps 1/2)) (*.f64 -2 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))","fresh",17.1317681222261],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (*.f64 (sin.f64 eps) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))","fresh",4.707301206289409],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) 3))","fresh",4.82967415079024],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",4.666206318099641],["(-.f64 (fma.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)))) (pow.f64 (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)) 2/3) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",44.32005435182746],["(fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","fresh",22.869995962503424],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sin.f64 eps))))","fresh",4.6932554815220495],["(fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))","fresh",4.69126098024952],["(-.f64 (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps))))) (+.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",4.804294783642835],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (/.f64 (+.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 3)) (+.f64 (*.f64 1/2 1/2) (-.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) (*.f64 1/2 (cos.f64 (+.f64 eps eps)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 eps eps)))))))) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",4.620261642076535],["(fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","fresh",22.867731154483344],["(-.f64 (*.f64 (cos.f64 x) (+.f64 (*.f64 1/24 (pow.f64 eps 4)) (*.f64 -1/2 (*.f64 eps eps)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",34.17723699558554]],"compiler":[[15,11],[18,14],[32,24],[24,16],[17,13],[24,16],[26,18],[24,16],[32,20],[22,14],[30,20],[27,19],[44,27],[58,38],[25,14],[22,16],[15,11],[18,14],[32,24],[24,16],[17,13],[24,16],[26,18],[24,16],[32,20],[22,14],[30,20],[27,19],[44,27],[58,38],[25,14],[22,16]],"count":[[314,16]],"kept":[{"done":[0,0],"fresh":[14,10],"new":[299,6],"picked":[1,0]}],"min-error":[0.06793873993272953],"time":112.299072265625,"type":"prune"},{"compiler":[[40,17]],"locations":[["(cos.f64 eps)",0.03515625,true],["(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))",0.09375,true],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))",0.18903248993272953,true],["(+.f64 (cos.f64 eps) -1)",1.512352696542723,true]],"time":11.744873046875,"type":"localize"},{"count":[[4,64]],"series":[["(cos.f64 eps)","eps","-inf",0.153076171875],["(cos.f64 eps)","eps","inf",0.135986328125],["(cos.f64 eps)","eps","0",0.162109375],["(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","eps","-inf",0.163818359375],["(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","eps","inf",0.14990234375],["(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","eps","0",0.22900390625],["(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","x","-inf",0.14892578125],["(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","x","inf",0.156005859375],["(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","x","0",0.2919921875],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","eps","-inf",0.509033203125],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","eps","inf",0.511962890625],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","eps","0",0.261962890625],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","x","-inf",0.44091796875],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","x","inf",0.541015625],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","x","0",0.3359375],["(+.f64 (cos.f64 eps) -1)","eps","-inf",0.163818359375],["(+.f64 (cos.f64 eps) -1)","eps","inf",0.169921875],["(+.f64 (cos.f64 eps) -1)","eps","0",0.398193359375]],"time":5.168212890625,"type":"series"},{"count":[[4,205]],"inputs":[["(+.f64 (cos.f64 eps) -1)","(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(cos.f64 eps)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 eps) -1) (*.f64 (+.f64 (cos.f64 eps) -1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (cos.f64 eps) -1) 0) (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 eps) -1) (*.f64 0 (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (cos.f64 eps) -1)) (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 eps) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (cos.f64 eps) -1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cos.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cos.f64 eps) -1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (cos.f64 eps) 3) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) (/.f64 1 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (cos.f64 eps)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))) (/.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1)) 1) (/.f64 (pow.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1)) 2) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))) (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))) (/.f64 (+.f64 (cos.f64 eps) -1) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))) 1) (/.f64 (+.f64 (cos.f64 eps) -1) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (cos.f64 eps) -1)) (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cbrt.f64 (neg.f64 (cos.f64 eps))))) (+.f64 -1 (cbrt.f64 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (-.f64 1 (cbrt.f64 (neg.f64 (cos.f64 eps))))) (+.f64 (cbrt.f64 (cos.f64 eps)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (+.f64 1 (cbrt.f64 (cos.f64 eps)))) (-.f64 (cbrt.f64 (cos.f64 eps)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)) (cbrt.f64 (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1) (/.f64 1 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 eps) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 eps)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) (+.f64 (pow.f64 (cos.f64 eps) 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)) 1) (/.f64 1 (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2)) (-.f64 -1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (cos.f64 eps) 3) 3) -1) (/.f64 1 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))) (+.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3)) (pow.f64 (cos.f64 eps) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1) (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (cos.f64 eps) 3) 3) -1) 1) (*.f64 (+.f64 (+.f64 1 (pow.f64 (cos.f64 eps) 3)) (pow.f64 (cos.f64 eps) 6)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)) 1) (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2)) (-.f64 -1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)) (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1))) (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)) 1) 1) (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2)) (-.f64 -1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1)) (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2))) (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 eps) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1) 1) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cos.f64 eps) -1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cos.f64 eps) -1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (cos.f64 eps) -1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (cos.f64 eps) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1) (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2)) (-.f64 -1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 1 (cos.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 1 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (cos.f64 eps)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 eps)) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1 (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1 (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cos.f64 eps) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cbrt.f64 (cos.f64 eps)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (+.f64 (cos.f64 eps) -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (*.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 0) (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (*.f64 0 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))) (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (cos.f64 eps))) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 x)) (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (neg.f64 (cos.f64 x))) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (+.f64 (neg.f64 (cos.f64 x)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (cos.f64 eps))) 1) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 (sin.f64 x) (sin.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (cos.f64 eps))) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))) (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 2)) (cbrt.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 x) (cbrt.f64 (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cos.f64 eps) -1)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 (cos.f64 eps) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)) (cos.f64 x)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)) (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 x) (cbrt.f64 (neg.f64 (sin.f64 eps)))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (neg.f64 (sin.f64 eps))) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sin.f64 eps)) (sin.f64 x) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))) (pow.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps)))) 2) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (cos.f64 eps) -1) (cos.f64 x) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) 1 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 0) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) (*.f64 0 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)) (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (cos.f64 eps) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)) (cos.f64 x)) (cbrt.f64 (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 x) (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))) (/.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1) (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))) (/.f64 (cos.f64 x) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1) 1) (/.f64 (cos.f64 x) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (cbrt.f64 (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)) (*.f64 (cos.f64 x) (cbrt.f64 (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (*.f64 (+.f64 (cos.f64 eps) -1) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cos.f64 eps) -1)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (*.f64 (cos.f64 eps) (cbrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (*.f64 (cos.f64 eps) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 x) (+.f64 (pow.f64 (cos.f64 eps) 3) -1)) (/.f64 1 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 eps) -1) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 x) (+.f64 (pow.f64 (cos.f64 eps) 3) -1)) (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))) (pow.f64 (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)) 1)) (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2)) (-.f64 -1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)) 1) (cos.f64 x)) (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2)) (-.f64 -1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 (cos.f64 eps) 3) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)) (cos.f64 x))) (cbrt.f64 (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cos.f64 x) (+.f64 (pow.f64 (cos.f64 eps) 3) -1))) (+.f64 (neg.f64 (pow.f64 (cos.f64 eps) 2)) (-.f64 -1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 x) (+.f64 (pow.f64 (cos.f64 eps) 3) -1)) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cos.f64 x) (+.f64 (pow.f64 (cos.f64 eps) 3) -1)) 1) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 x) (+.f64 (pow.f64 (cos.f64 eps) 3) -1)) 1) (fma.f64 (cos.f64 eps) (cos.f64 eps) (+.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 (cos.f64 eps)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 eps) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) (cos.f64 x) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (cos.f64 x) (cos.f64 eps)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cos.f64 x) (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cos.f64 x)) 1 (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) -1 (*.f64 (cos.f64 x) (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 eps) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (cos.f64 eps)) 0) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 eps) (*.f64 (cos.f64 eps) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 eps) 0) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (cos.f64 eps))) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 eps) (*.f64 0 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 eps)) (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cos.f64 eps) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 eps)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 (cos.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (cos.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cos.f64 eps))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 eps))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (-.f64 0 (*.f64 (cbrt.f64 (cos.f64 eps)) 0))) (+.f64 (cbrt.f64 (cos.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (+.f64 0 (*.f64 (cbrt.f64 (cos.f64 eps)) 0))) (-.f64 (cbrt.f64 (cos.f64 eps)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 eps)) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cbrt.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 eps)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 eps) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 eps) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 eps)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 eps)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 eps)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 eps) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 eps) 3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (cos.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cbrt.f64 (cos.f64 eps)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 eps)) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cos.f64 eps) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 eps) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 eps)))))"]],"rules":[["egg-rr",37],["egg-rr",62],["egg-rr",46],["egg-rr",60]],"time":38.72998046875,"type":"rewrite"},{"count":[[269,250]],"inputs":[["(*.f64 -1/2 (pow.f64 eps 2))","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (*.f64 -1/2 (pow.f64 eps 2)))","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) (*.f64 -1/720 (pow.f64 eps 6))))","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) (+.f64 (*.f64 -1/720 (pow.f64 eps 6)) (*.f64 1/40320 (pow.f64 eps 8)))))","(-.f64 (cos.f64 eps) 1)","(-.f64 (cos.f64 eps) 1)","(-.f64 (cos.f64 eps) 1)","(-.f64 (cos.f64 eps) 1)","(-.f64 (cos.f64 eps) 1)","(-.f64 (cos.f64 eps) 1)","(-.f64 (cos.f64 eps) 1)","(-.f64 (cos.f64 eps) 1)","(-.f64 (cos.f64 eps) 1)","(-.f64 (+.f64 (cos.f64 eps) (*.f64 -1 (*.f64 x (sin.f64 eps)))) 1)","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 -1/2 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 2))))) 1)","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 -1/2 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 2)))))) 1)","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(*.f64 -1 (*.f64 eps (sin.f64 x)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x)))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(-.f64 (cos.f64 eps) 1)","(-.f64 (+.f64 (cos.f64 eps) (*.f64 -1/2 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 2)))) 1)","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 2))) (*.f64 1/24 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 4))))) 1)","(-.f64 (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 6))) (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 2))) (*.f64 1/24 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 4)))))) 1)","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x)))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 eps 6) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x)))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 1/40320 (*.f64 (pow.f64 eps 8) (cos.f64 x))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 eps 6) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","1","(+.f64 (*.f64 -1/2 (pow.f64 eps 2)) 1)","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) 1))","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) (+.f64 1 (*.f64 -1/720 (pow.f64 eps 6)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 (pow.f64 eps 2))","(*.f64 -1/2 (*.f64 eps eps))","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (*.f64 -1/2 (pow.f64 eps 2)))","(fma.f64 1/24 (pow.f64 eps 4) (*.f64 -1/2 (*.f64 eps eps)))","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) (*.f64 -1/720 (pow.f64 eps 6))))","(fma.f64 (pow.f64 eps 4) 1/24 (fma.f64 (pow.f64 eps 6) -1/720 (*.f64 -1/2 (*.f64 eps eps))))","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) (+.f64 (*.f64 -1/720 (pow.f64 eps 6)) (*.f64 1/40320 (pow.f64 eps 8)))))","(fma.f64 (pow.f64 eps 4) 1/24 (fma.f64 (*.f64 eps eps) -1/2 (fma.f64 -1/720 (pow.f64 eps 6) (*.f64 1/40320 (pow.f64 eps 8)))))","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (+.f64 (cos.f64 eps) (*.f64 -1 (*.f64 x (sin.f64 eps)))) 1)","(+.f64 (cos.f64 eps) (fma.f64 (neg.f64 x) (sin.f64 eps) -1))","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 -1/2 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 2))))) 1)","(+.f64 (fma.f64 (neg.f64 x) (sin.f64 eps) (cos.f64 eps)) (fma.f64 (*.f64 -1/2 (+.f64 (cos.f64 eps) -1)) (*.f64 x x) -1))","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 x 3) (sin.f64 eps))) (+.f64 (*.f64 -1 (*.f64 x (sin.f64 eps))) (*.f64 -1/2 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 2)))))) 1)","(+.f64 (cos.f64 eps) (+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 1/6 (pow.f64 x 3)) (neg.f64 x))) (fma.f64 (*.f64 -1/2 (+.f64 (cos.f64 eps) -1)) (*.f64 x x) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(*.f64 -1 (*.f64 eps (sin.f64 x)))","(*.f64 (neg.f64 eps) (sin.f64 x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))","(fma.f64 -1/2 (*.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x)))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x)))))","(fma.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (fma.f64 -1/2 (*.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))) (*.f64 -1 (*.f64 eps (sin.f64 x))))))","(fma.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x)) (fma.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (fma.f64 -1/2 (*.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x)))))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(+.f64 (*.f64 -1 (*.f64 (sin.f64 x) (sin.f64 eps))) (*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1)))","(fma.f64 (neg.f64 (sin.f64 x)) (sin.f64 eps) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(-.f64 (cos.f64 eps) 1)","(+.f64 (cos.f64 eps) -1)","(-.f64 (+.f64 (cos.f64 eps) (*.f64 -1/2 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 2)))) 1)","(+.f64 (cos.f64 eps) (fma.f64 (*.f64 -1/2 (+.f64 (cos.f64 eps) -1)) (*.f64 x x) -1))","(-.f64 (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 2))) (*.f64 1/24 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 4))))) 1)","(+.f64 (fma.f64 -1/2 (*.f64 (+.f64 (cos.f64 eps) -1) (*.f64 x x)) (*.f64 1/24 (*.f64 (+.f64 (cos.f64 eps) -1) (pow.f64 x 4)))) (+.f64 (cos.f64 eps) -1))","(-.f64 (+.f64 (*.f64 -1/720 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 6))) (+.f64 (cos.f64 eps) (+.f64 (*.f64 -1/2 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 2))) (*.f64 1/24 (*.f64 (-.f64 (cos.f64 eps) 1) (pow.f64 x 4)))))) 1)","(+.f64 (+.f64 (fma.f64 -1/720 (*.f64 (+.f64 (cos.f64 eps) -1) (pow.f64 x 6)) (cos.f64 eps)) (fma.f64 -1/2 (*.f64 (+.f64 (cos.f64 eps) -1) (*.f64 x x)) (*.f64 1/24 (*.f64 (+.f64 (cos.f64 eps) -1) (pow.f64 x 4))))) -1)","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x)))","(*.f64 (*.f64 -1/2 (*.f64 eps eps)) (cos.f64 x))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))","(*.f64 (cos.f64 x) (fma.f64 1/24 (pow.f64 eps 4) (*.f64 -1/2 (*.f64 eps eps))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 eps 6) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x)))))","(fma.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x)) (*.f64 (cos.f64 x) (fma.f64 (pow.f64 eps 6) -1/720 (*.f64 -1/2 (*.f64 eps eps)))))","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 eps 4) (cos.f64 x))) (+.f64 (*.f64 1/40320 (*.f64 (pow.f64 eps 8) (cos.f64 x))) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 eps 6) (cos.f64 x))) (*.f64 -1/2 (*.f64 (pow.f64 eps 2) (cos.f64 x))))))","(+.f64 (*.f64 (cos.f64 x) (fma.f64 -1/720 (pow.f64 eps 6) (*.f64 1/40320 (pow.f64 eps 8)))) (*.f64 (cos.f64 x) (fma.f64 1/24 (pow.f64 eps 4) (*.f64 -1/2 (*.f64 eps eps)))))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","(*.f64 (cos.f64 x) (-.f64 (cos.f64 eps) 1))","(*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))","1","(+.f64 (*.f64 -1/2 (pow.f64 eps 2)) 1)","(fma.f64 -1/2 (*.f64 eps eps) 1)","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) 1))","(fma.f64 (pow.f64 eps 4) 1/24 (fma.f64 -1/2 (*.f64 eps eps) 1))","(+.f64 (*.f64 1/24 (pow.f64 eps 4)) (+.f64 (*.f64 -1/2 (pow.f64 eps 2)) (+.f64 1 (*.f64 -1/720 (pow.f64 eps 6)))))","(fma.f64 1/24 (pow.f64 eps 4) (fma.f64 -1/2 (*.f64 eps eps) (fma.f64 (pow.f64 eps 6) -1/720 1)))"]],"time":199.44091796875,"type":"simplify"},{"compiler":[[5124,2209]],"time":49.0419921875,"type":"eval"},{"alts":[["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (/.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (cbrt.f64 2)) (cbrt.f64 4))) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",4.623361443336427],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (*.f64 (sin.f64 x) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2))))","fresh",14.025104178403259],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (fma.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cbrt.f64 (cos.f64 eps)) -1)))","fresh",4.60448541101287],["(*.f64 (sin.f64 (*.f64 eps 1/2)) (*.f64 -2 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))","fresh",17.1317681222261],["(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (*.f64 (sin.f64 eps) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))","fresh",4.707301206289409],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) 3))","fresh",4.82967415079024],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (+.f64 1 (cbrt.f64 (cos.f64 eps)))) (-.f64 (cbrt.f64 (cos.f64 eps)) 1))))","fresh",4.801404508041274],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (fma.f64 1/24 (pow.f64 eps 4) (*.f64 -1/2 (*.f64 eps eps)))))","fresh",34.17723699558554],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 3))","fresh",4.79426758136823],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sin.f64 eps))))","fresh",4.6932554815220495],["(fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cos.f64 eps) -1)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))","fresh",4.633702992245309],["(fma.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))","fresh",4.621517714743877],["(-.f64 (fma.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)))) (pow.f64 (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)) 2/3) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",44.32005435182746],["(fma.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))","fresh",4.603906842029403],["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (/.f64 (+.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 3)) (+.f64 (*.f64 1/2 1/2) (-.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) (*.f64 1/2 (cos.f64 (+.f64 eps eps)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 eps eps)))))))) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","fresh",4.620261642076535],["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (fma.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (neg.f64 (cos.f64 x))))","fresh",4.609686604861618],["(fma.f64 (cbrt.f64 (+.f64 (cos.f64 eps) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)) (cos.f64 x)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))","fresh",4.66781513632706]],"compiler":[[32,24],[24,16],[21,15],[17,13],[24,16],[26,18],[28,19],[21,15],[18,14],[30,20],[22,16],[22,16],[32,20],[15,11],[58,38],[23,15],[24,18]],"count":[[266,17]],"kept":[{"done":[0,0],"fresh":[15,8],"new":[250,9],"picked":[1,0]}],"min-error":[0.05697250976844202],"time":89.3740234375,"type":"prune"},{"accuracy":[0.42325164656317327],"baseline":[4.603906842029403],"branch":[["x",0.42325164656317327,3],["eps",0.4283264636023125,3],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",4.603906842029403,1],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",4.603906842029403,1]],"compiler":[[3,2],[3,2],[9,6],[9,6],[895,352]],"count":[[40,3]],"inputs":[["(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (fma.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cbrt.f64 (cos.f64 eps)) -1)))","(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (+.f64 1 (cbrt.f64 (cos.f64 eps)))) (-.f64 (cbrt.f64 (cos.f64 eps)) 1))))","(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (fma.f64 1/24 (pow.f64 eps 4) (*.f64 -1/2 (*.f64 eps eps)))))","(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 3))","(fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cos.f64 eps) -1)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))","(fma.f64 (*.f64 (+.f64 (cos.f64 eps) -1) (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))","(fma.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))","(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (fma.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (neg.f64 (cos.f64 x))))","(fma.f64 (cbrt.f64 (+.f64 (cos.f64 eps) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 eps) -1) 2)) (cos.f64 x)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))","(fma.f64 (sin.f64 x) (neg.f64 (sin.f64 eps)) (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)))","(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (/.f64 (/.f64 (+.f64 (cos.f64 (+.f64 eps eps)) (cos.f64 0)) (cbrt.f64 2)) (cbrt.f64 4))) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) 3))","(-.f64 (fma.f64 (cbrt.f64 (*.f64 (cos.f64 eps) (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)))) (pow.f64 (*.f64 (pow.f64 (cos.f64 eps) 2/3) (cos.f64 x)) 2/3) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sin.f64 eps))))","(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (/.f64 (+.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 3)) (+.f64 (*.f64 1/2 1/2) (-.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) (*.f64 1/2 (cos.f64 (+.f64 eps eps)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 eps eps)))))))) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (cbrt.f64 (sin.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sin.f64 eps))))","(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 eps) 2)) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (/.f64 (/.f64 (/.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) (cbrt.f64 2)) (cbrt.f64 (cbrt.f64 4))) (cbrt.f64 (cbrt.f64 16)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (*.f64 (sin.f64 x) (cbrt.f64 (sin.f64 eps))) (cbrt.f64 (pow.f64 (sin.f64 eps) 2))))","(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (*.f64 (sin.f64 eps) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))","(-.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) 3) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 eps))) (cbrt.f64 (pow.f64 (cos.f64 eps) 2)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1)) 2)) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))","(-.f64 (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps))))) (+.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 x) (sin.f64 eps))) 3))","(-.f64 (*.f64 (cos.f64 x) (+.f64 (*.f64 1/24 (pow.f64 eps 4)) (*.f64 -1/2 (*.f64 eps eps)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (/.f64 (cbrt.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x)))) (cbrt.f64 4)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 (cos.f64 (+.f64 x eps)) (cos.f64 (-.f64 eps x))) 2)) (cbrt.f64 2)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(fma.f64 (cos.f64 x) (cos.f64 eps) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","(-.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x)))","(*.f64 (sin.f64 (*.f64 eps 1/2)) (*.f64 -2 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))","(+.f64 (+.f64 (*.f64 (sin.f64 eps) (+.f64 (*.f64 1/6 (pow.f64 x 3)) (neg.f64 x))) (*.f64 (fma.f64 (cos.f64 eps) -1/2 1/2) (*.f64 x x))) (+.f64 (cos.f64 eps) -1))","(-.f64 (-.f64 0 (*.f64 (cos.f64 x) (-.f64 1 (cos.f64 eps)))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(-.f64 (+.f64 (neg.f64 (cos.f64 x)) (*.f64 (cos.f64 x) (cos.f64 eps))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(pow.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) 3)","(fma.f64 (*.f64 (pow.f64 eps 4) (cos.f64 x)) 1/24 (fma.f64 1/6 (*.f64 (pow.f64 eps 3) (sin.f64 x)) (fma.f64 -1/2 (*.f64 (*.f64 eps eps) (cos.f64 x)) (*.f64 (neg.f64 eps) (sin.f64 x)))))","(fma.f64 (cbrt.f64 (cos.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cos.f64 eps)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","(fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 eps))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 eps)) 2)) (neg.f64 (fma.f64 (sin.f64 x) (sin.f64 eps) (cos.f64 x))))","(*.f64 (cbrt.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))) (cbrt.f64 (pow.f64 (-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x)) 2)))","(*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 (+.f64 x eps)) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (*.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))))) (-.f64 (cbrt.f64 (cos.f64 (+.f64 x eps))) (cbrt.f64 (cos.f64 x))))","(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))"]],"link":["."],"name":["2cos (problem 3.3.5)"],"oracle":[57.554351740433],"outputs":[["(-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (/.f64 (+.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 3)) (+.f64 (*.f64 1/2 1/2) (-.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) (*.f64 1/2 (cos.f64 (+.f64 eps eps)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 eps eps)))))))) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps)))","(*.f64 (sin.f64 (*.f64 eps 1/2)) (*.f64 -2 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2))))","(fma.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))"]],"time":88.4130859375,"times":[["x",30.56201171875],["eps",29.37109375],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",7.590087890625],["(-.f64 (cos.f64 (+.f64 x eps)) (cos.f64 x))",7.89111328125]],"type":"regimes"},{"bstep":[[2.386200410518542e-73,1.8119005085575892e-71,40.384033203125],[-1.7433029154870626e-13,-8.61507267644426e-16,42.02001953125]],"compiler":[[11,8],[3,2]],"method":["binary-search","binary-search"],"time":82.7578125,"type":"bsearch"},{"compiler":[[94,59]],"inputs":[["(if (<=.f64 x -6905934334989991/39614081257132168796771975168) (-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (/.f64 (+.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 3)) (+.f64 (*.f64 1/2 1/2) (-.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) (*.f64 1/2 (cos.f64 (+.f64 eps eps)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 eps eps)))))))) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps))) (if (<=.f64 x 3797481314820617/15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792) (*.f64 (sin.f64 (*.f64 eps 1/2)) (*.f64 -2 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x -6905934334989991/39614081257132168796771975168) (-.f64 (fma.f64 (cbrt.f64 (cos.f64 eps)) (*.f64 (cbrt.f64 (/.f64 (+.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) 3)) (+.f64 (*.f64 1/2 1/2) (-.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 eps eps))) (*.f64 1/2 (cos.f64 (+.f64 eps eps)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 eps eps)))))))) (cos.f64 x)) (neg.f64 (cos.f64 x))) (*.f64 (sin.f64 x) (sin.f64 eps))) (if (<=.f64 x 3797481314820617/15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792) (*.f64 (sin.f64 (*.f64 eps 1/2)) (*.f64 -2 (sin.f64 (*.f64 (+.f64 (+.f64 x eps) x) 1/2)))) (fma.f64 (cos.f64 x) (+.f64 (cos.f64 eps) -1) (neg.f64 (*.f64 (sin.f64 x) (sin.f64 eps))))))","(if (<=.f64 x -6905934334989991/39614081257132168796771975168) (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps))) (if (<=.f64 x 3797481314820617/15914343565113172548972231940698266883214596825515126958094847260581103904401068017057792) (*.f64 (*.f64 (sin.f64 (*.f64 eps 1/2)) (sin.f64 (*.f64 (+.f64 (+.f64 x x) eps) 1/2))) -2) (+.f64 (neg.f64 (cos.f64 x)) (cos.f64 (+.f64 x eps)))))"]],"stop":[["fuel",1]],"time":37.3701171875,"type":"simplify"},{"time":0.0068359375,"type":"soundness"},{"compiler":[[94,59]],"remove-preprocessing":[[]],"time":27.737060546875,"type":"end"}]
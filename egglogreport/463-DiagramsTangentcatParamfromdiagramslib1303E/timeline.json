[{"compiler":[[11,9]],"method":["search"],"sampling":[[12,0.7486577033996582,0.0009760856628417969,0.2503662109375],[11,0.7476816177368164,0.0019521713256835938,0.2503662109375],[10,0.7457294464111328,0.0039043426513671875,0.2503662109375],[9,0.7418251037597656,0.007808685302734375,0.2503662109375],[8,0.7340164184570313,0.01561737060546875,0.2503662109375],[7,0.7183990478515625,0.0312347412109375,0.2503662109375],[6,0.687164306640625,0.062469482421875,0.2503662109375],[5,0.62469482421875,0.12493896484375,0.2503662109375],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.487060546875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.38916015625,12],["body",512,"valid",14.3115234375,249],["body",1024,"valid",38.87548828125,462],["body",256,"valid",240.3798828125,7545]],"time":302.304931640625,"type":"sample"},{"compiler":[[10,8]],"inputs":[["0"],["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)","(*.f64 (*.f64 3 (fma.f64 -3 x 2)) x)"]],"symmetry":[[]],"time":50.7861328125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)","(*.f64 (*.f64 3 (fma.f64 -3 x 2)) x)"]],"time":17.535888671875,"type":"simplify"},{"compiler":[[18,14]],"time":0.39794921875,"type":"eval"},{"alts":[["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)","fresh",0.29134750976844204],["(*.f64 (*.f64 3 (fma.f64 -3 x 2)) x)","next",0.2890625]],"compiler":[[10,8],[9,7],[10,8],[9,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.27734375],"time":1.279052734375,"type":"prune"},{"compiler":[[23,18]],"locations":[["(fma.f64 -3 x 2)",0.04296875,true],["(*.f64 3 (fma.f64 -3 x 2))",0.1015625,true],["(*.f64 (*.f64 3 (fma.f64 -3 x 2)) x)",0.109375,true]],"time":5.720947265625,"type":"localize"},{"count":[[3,36]],"series":[["(fma.f64 -3 x 2)","x","-inf",0.1611328125],["(fma.f64 -3 x 2)","x","inf",0.14404296875],["(fma.f64 -3 x 2)","x","0",0.14599609375],["(*.f64 3 (fma.f64 -3 x 2))","x","-inf",0.217041015625],["(*.f64 3 (fma.f64 -3 x 2))","x","inf",0.178955078125],["(*.f64 3 (fma.f64 -3 x 2))","x","0",0.23095703125],["(*.f64 (*.f64 3 (fma.f64 -3 x 2)) x)","x","-inf",0.61083984375],["(*.f64 (*.f64 3 (fma.f64 -3 x 2)) x)","x","inf",0.554931640625],["(*.f64 (*.f64 3 (fma.f64 -3 x 2)) x)","x","0",0.570068359375]],"time":2.924072265625,"type":"series"},{"count":[[3,158]],"inputs":[["(*.f64 (*.f64 3 (fma.f64 -3 x 2)) x)","(*.f64 3 (fma.f64 -3 x 2))","(fma.f64 -3 x 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 3 (*.f64 -3 x))) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 (*.f64 -3 x)) x) (*.f64 6 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 6) (*.f64 x (*.f64 3 (*.f64 -3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 6 x) (*.f64 (*.f64 3 (*.f64 -3 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 3) (*.f64 -3 x)) (*.f64 2 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -3 x) (*.f64 x 3)) (*.f64 2 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 x 3)) (*.f64 (*.f64 x 3) (*.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (*.f64 x 3)) (*.f64 (*.f64 -3 x) (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 -3 x) (fma.f64 -3 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 -3 x) 3 6) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 (*.f64 -3 x) 3 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 -3 x) 3 6)) (*.f64 (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 (*.f64 -3 x) 3 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (fma.f64 (*.f64 -3 x) 3 6)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 2/3) x) (cbrt.f64 (fma.f64 (*.f64 -3 x) 3 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x)) (pow.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x) 2/3) (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (fma.f64 (*.f64 -3 x) 3 6))) (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 2/3) (*.f64 x (cbrt.f64 (fma.f64 (*.f64 -3 x) 3 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 (*.f64 -3 x) 3 6) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 -3 x) (fma.f64 -3 x 2))) (neg.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 (fma.f64 -3 x 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3) (fma.f64 -3 x 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -3 x 2) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 (fma.f64 -3 x 2) x)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (sqrt.f64 3) (*.f64 (fma.f64 -3 x 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 3) (*.f64 (fma.f64 -3 x 2) x)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 (fma.f64 -3 x 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -3 x 2) x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x 3) (+.f64 (pow.f64 (*.f64 -3 x) 3) 8)) (/.f64 1 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (*.f64 -3 x) (fma.f64 -3 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 -3 x) (fma.f64 -3 x 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x 3) (+.f64 (pow.f64 (*.f64 -3 x) 3) 8)) (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -3 x) (fma.f64 -3 x 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -3 x 2) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x 3) (+.f64 (pow.f64 (*.f64 -3 x) 3) 8))) (neg.f64 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 -3 x) (fma.f64 -3 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 (*.f64 -3 x) 3 6) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 -3 x)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 6 (*.f64 3 (*.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 3 (*.f64 -3 x)) -1)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 3 (*.f64 -3 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 -3 x) 3 6) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (*.f64 -3 x) 3 6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 3 (*.f64 -3 x)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (+.f64 (*.f64 3 (*.f64 -3 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 3 (*.f64 3 (*.f64 -3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 3 (*.f64 -3 x)) 9) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (fma.f64 -3 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 3 (*.f64 -3 x)) 3) -3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -3 x 2)) (*.f64 (pow.f64 (fma.f64 -3 x 2) 2/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 -3 x 2) 2/3) 3) (cbrt.f64 (fma.f64 -3 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 -3 x) 3 6)) (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 2/3) (cbrt.f64 (fma.f64 (*.f64 -3 x) 3 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (fma.f64 -3 x 2))) (pow.f64 (fma.f64 -3 x 2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -3 x 2) 2/3) (cbrt.f64 (*.f64 27 (fma.f64 -3 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -3 x 2) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (fma.f64 -3 x 2) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (fma.f64 -3 x 2))) (neg.f64 (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 -3 x)) 3) 216) (/.f64 1 (-.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 -3 x)) 2) 36) (*.f64 (*.f64 3 (*.f64 -3 x)) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (fma.f64 -3 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (fma.f64 -3 x 2)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -3 x 2) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (fma.f64 -3 x 2) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (fma.f64 -3 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (fma.f64 -3 x 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (fma.f64 -3 x 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -3 x 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 -3 x) 3 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 -3 x) 3 6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 -3 x) 3 6) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (+.f64 (pow.f64 (*.f64 -3 x) 3) 8)) (/.f64 1 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (+.f64 (pow.f64 (*.f64 -3 x) 3) 8)) (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 -3 x)) 3) 216) (+.f64 36 (-.f64 (pow.f64 (*.f64 3 (*.f64 -3 x)) 2) (*.f64 6 (*.f64 3 (*.f64 -3 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 (*.f64 3 (*.f64 -3 x)) 3) 3) 27) (+.f64 (*.f64 (+.f64 (*.f64 3 (*.f64 -3 x)) 3) (+.f64 (*.f64 3 (*.f64 -3 x)) 3)) (-.f64 9 (*.f64 (+.f64 (*.f64 3 (*.f64 -3 x)) 3) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 -3 x)) 3) 216)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 -3 x)) 2) 36) (*.f64 (*.f64 3 (*.f64 -3 x)) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 -3 x) 3 6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (fma.f64 -3 x 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -3 x 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 -3 x)) 3) 216) (-.f64 (+.f64 (pow.f64 (*.f64 3 (*.f64 -3 x)) 2) 36) (*.f64 (*.f64 3 (*.f64 -3 x)) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 3 (+.f64 (pow.f64 (*.f64 -3 x) 3) 8))) (neg.f64 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 -3 x) 3 6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (fma.f64 -3 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -3 x) 3 6)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 -3 x) 6)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -3 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 2 (*.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3 x 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 -3 x 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 -3 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 (*.f64 -3 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 (*.f64 -3 x) 1) 3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 (*.f64 -3 x) 1) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 -3 x 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -3 x) -2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 -3 x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 -3 x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (+.f64 (*.f64 -3 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 2 (+.f64 (*.f64 -3 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 x 3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 2 (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -2 (*.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 1 (*.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 -1 (*.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -3 x 2)) (pow.f64 (fma.f64 -3 x 2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -3 x 2) 2/3) (cbrt.f64 (fma.f64 -3 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 x 3) -2)) (neg.f64 (pow.f64 (fma.f64 -3 x 2) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 -3 x) 3) 8) (/.f64 1 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 -3 x) 2/3) (-.f64 (cbrt.f64 4) (*.f64 (cbrt.f64 (*.f64 -3 x)) (cbrt.f64 2)))) (+.f64 (cbrt.f64 (*.f64 -3 x)) (cbrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 4) (-.f64 (pow.f64 (*.f64 -3 x) 2/3) (*.f64 (cbrt.f64 2) (cbrt.f64 (*.f64 -3 x))))) (+.f64 (cbrt.f64 2) (cbrt.f64 (*.f64 -3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 x 3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 x 3) -2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -3 x 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -3 x 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -3 x 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -8 (neg.f64 (pow.f64 (*.f64 -3 x) 3))) (/.f64 1 (neg.f64 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -3 x) 3) 8) (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (+.f64 (*.f64 -3 x) 1) 3)) (+.f64 1 (-.f64 (*.f64 (+.f64 (*.f64 -3 x) 1) (+.f64 (*.f64 -3 x) 1)) (+.f64 (*.f64 -3 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 (*.f64 -3 x) 1) 3) 1) (+.f64 (*.f64 (+.f64 (*.f64 -3 x) 1) (+.f64 (*.f64 -3 x) 1)) (-.f64 1 (+.f64 (*.f64 -3 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 -8 (neg.f64 (pow.f64 (*.f64 -3 x) 3)))) (neg.f64 (neg.f64 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -8 (neg.f64 (pow.f64 (*.f64 -3 x) 3))) (neg.f64 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -3 x 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x 3) -2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 -8 (neg.f64 (pow.f64 (*.f64 -3 x) 3)))) (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 -3 x 2) 2) (+.f64 (pow.f64 (*.f64 -3 x) 3) 8))) (cbrt.f64 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -3 x 2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -3 x 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -3 x 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 x 3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (pow.f64 (*.f64 -3 x) 3) 8) (neg.f64 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -3 x 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2) (cbrt.f64 4) (*.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 2)) (neg.f64 (sqrt.f64 2)) (*.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2) (sqrt.f64 2) (*.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 4) (cbrt.f64 2) (*.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -3 x 2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -2 (*.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -3) (*.f64 (cbrt.f64 9) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -27 x)) (pow.f64 x 2/3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -3 2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -3 x)) (pow.f64 (*.f64 -3 x) 2/3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 2 (*.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1 (*.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -3 x) 1 2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -3 x) 2)))))"]],"rules":[["egg-rr",60],["egg-rr",50],["egg-rr",48]],"time":48.004150390625,"type":"rewrite"},{"count":[[194,170]],"inputs":[["(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","6","(+.f64 (*.f64 -9 x) 6)","(+.f64 (*.f64 -9 x) 6)","(+.f64 (*.f64 -9 x) 6)","(*.f64 -9 x)","(+.f64 6 (*.f64 -9 x))","(+.f64 6 (*.f64 -9 x))","(+.f64 6 (*.f64 -9 x))","(*.f64 -9 x)","(+.f64 6 (*.f64 -9 x))","(+.f64 6 (*.f64 -9 x))","(+.f64 6 (*.f64 -9 x))","2","(+.f64 (*.f64 -3 x) 2)","(+.f64 (*.f64 -3 x) 2)","(+.f64 (*.f64 -3 x) 2)","(*.f64 -3 x)","(+.f64 2 (*.f64 -3 x))","(+.f64 2 (*.f64 -3 x))","(+.f64 2 (*.f64 -3 x))","(*.f64 -3 x)","(+.f64 2 (*.f64 -3 x))","(+.f64 2 (*.f64 -3 x))","(+.f64 2 (*.f64 -3 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (fma.f64 -9 x 6))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (fma.f64 -9 x 6))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (fma.f64 -9 x 6))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (fma.f64 -9 x 6))","6","(+.f64 (*.f64 -9 x) 6)","(fma.f64 -9 x 6)","(+.f64 (*.f64 -9 x) 6)","(fma.f64 -9 x 6)","(+.f64 (*.f64 -9 x) 6)","(fma.f64 -9 x 6)","(*.f64 -9 x)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","(*.f64 -9 x)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","(+.f64 6 (*.f64 -9 x))","(fma.f64 -9 x 6)","2","(+.f64 (*.f64 -3 x) 2)","(fma.f64 -3 x 2)","(+.f64 (*.f64 -3 x) 2)","(fma.f64 -3 x 2)","(+.f64 (*.f64 -3 x) 2)","(fma.f64 -3 x 2)","(*.f64 -3 x)","(+.f64 2 (*.f64 -3 x))","(fma.f64 -3 x 2)","(+.f64 2 (*.f64 -3 x))","(fma.f64 -3 x 2)","(+.f64 2 (*.f64 -3 x))","(fma.f64 -3 x 2)","(*.f64 -3 x)","(+.f64 2 (*.f64 -3 x))","(fma.f64 -3 x 2)","(+.f64 2 (*.f64 -3 x))","(fma.f64 -3 x 2)","(+.f64 2 (*.f64 -3 x))","(fma.f64 -3 x 2)"]],"time":120.3330078125,"type":"simplify"},{"compiler":[[2256,1833]],"time":34.018798828125,"type":"eval"},{"alts":[["(/.f64 (*.f64 (fma.f64 -3 x 2) x) 1/3)","fresh",0.38119125976844204],["(*.f64 (*.f64 x 3) (fma.f64 -3 x 2))","fresh",0.24609375],["(*.f64 (+.f64 6 (*.f64 -9 x)) x)","next",0.21875],["(*.f64 (*.f64 (*.f64 (cbrt.f64 9) (fma.f64 -3 x 2)) (cbrt.f64 3)) x)","fresh",0.2936325195368841],["(*.f64 (*.f64 x (cbrt.f64 (fma.f64 (*.f64 -3 x) 3 6))) (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 2/3))","fresh",10.373179870838788],["(*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 2/3) x) (cbrt.f64 (fma.f64 (*.f64 -3 x) 3 6)))","fresh",10.386970640327487]],"compiler":[[9,7],[9,7],[8,6],[13,11],[19,16],[19,16],[9,7],[9,7],[8,6],[13,11],[19,16],[19,16]],"count":[[172,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[170,6],"picked":[1,0]}],"min-error":[0],"time":43.194091796875,"type":"prune"},{"compiler":[[19,14]],"locations":[["(*.f64 (+.f64 6 (*.f64 -9 x)) x)",0.109375,true]],"time":4.408935546875,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (+.f64 6 (*.f64 -9 x)) x)","x","-inf",0.579833984375],["(*.f64 (+.f64 6 (*.f64 -9 x)) x)","x","inf",0.343017578125],["(*.f64 (+.f64 6 (*.f64 -9 x)) x)","x","0",0.320068359375]],"time":1.2890625,"type":"series"},{"count":[[1,46]],"inputs":[["(*.f64 (+.f64 6 (*.f64 -9 x)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -9 x) x) (*.f64 6 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 6 x) (*.f64 (*.f64 -9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -9 x 6) x) (*.f64 (*.f64 (fma.f64 -9 x 6) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -9 x 6) x) 0) (*.f64 (fma.f64 -9 x 6) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -9 x 6) x) (*.f64 0 (*.f64 (fma.f64 -9 x 6) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fma.f64 -9 x 6) x)) (*.f64 (fma.f64 -9 x 6) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 -9 x) x) 1) (*.f64 (*.f64 6 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 6 x) 1) (*.f64 (*.f64 (*.f64 -9 x) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -9 x 6) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 -9 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -9 x 6)) (*.f64 (pow.f64 (fma.f64 -9 x 6) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 -9 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (fma.f64 -9 x 6)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 -9 x 6) 2/3) x) (cbrt.f64 (fma.f64 -9 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36))) (/.f64 (fma.f64 (pow.f64 x 3) -729 216) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (pow.f64 x 3) -729 216) (cbrt.f64 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36))) (/.f64 x (pow.f64 (cbrt.f64 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (pow.f64 x 3) -729 216) 1) (/.f64 x (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 -9 x 6) x)) (pow.f64 (*.f64 (fma.f64 -9 x 6) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fma.f64 -9 x 6) x) 2/3) (cbrt.f64 (*.f64 (fma.f64 -9 x 6) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (fma.f64 -9 x 6))) (pow.f64 (fma.f64 -9 x 6) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -9 x 6) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -9 x 6) 2/3) (*.f64 x (cbrt.f64 (fma.f64 -9 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 -9 x 6) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (fma.f64 (pow.f64 x 3) -729 216)) (/.f64 1 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (fma.f64 -9 x 6) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (fma.f64 -9 x 6) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 -9 x 6) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -9 x 6) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 x 3) -729 216)) (cbrt.f64 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36))) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 (pow.f64 x 3) -729 216)) (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 (fma.f64 (pow.f64 x 3) -729 216))) (neg.f64 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (fma.f64 (pow.f64 x 3) -729 216)) x) (neg.f64 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (pow.f64 x 3) -729 216)) (*.f64 (pow.f64 (fma.f64 -9 x 6) 2/3) x)) (cbrt.f64 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (fma.f64 (pow.f64 x 3) -729 216)) 1) (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 x 3) -729 216)) 1) (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (fma.f64 (pow.f64 x 3) -729 216))) (neg.f64 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -9 x 6) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 -9 x 6) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 -9 x 6) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 -9 x 6) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (fma.f64 -9 x 6) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 -9 x 6) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -9 x) x (*.f64 6 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 -9 x) (*.f64 6 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 6 (*.f64 (*.f64 -9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 6 x (*.f64 (*.f64 -9 x) x))))))"]],"rules":[["egg-rr",46]],"time":21.9150390625,"type":"rewrite"},{"count":[[58,51]],"inputs":[["(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))"]],"time":48.912841796875,"type":"simplify"},{"compiler":[[677,515]],"time":10.64404296875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (fma.f64 -3 x 2) x) 1/3)","fresh",0.38119125976844204],["(*.f64 (*.f64 x 3) (fma.f64 -3 x 2))","fresh",0.24609375],["(*.f64 (*.f64 x (fma.f64 (pow.f64 x 3) -729 216)) (/.f64 1 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)))","fresh",9.360702539073767],["(*.f64 (*.f64 (*.f64 (cbrt.f64 9) (fma.f64 -3 x 2)) (cbrt.f64 3)) x)","fresh",0.2936325195368841],["(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))","next",0.140625]],"compiler":[[9,7],[9,7],[21,17],[13,11],[9,6],[9,7],[9,7],[21,17],[13,11],[9,6]],"count":[[57,5]],"kept":[{"done":[0,0],"fresh":[5,3],"new":[51,2],"picked":[1,0]}],"min-error":[0],"time":9.822021484375,"type":"prune"},{"compiler":[[20,13]],"locations":[["(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))",0.06640625,true],["(*.f64 (*.f64 -9 x) x)",0.18359375,true]],"time":4.76513671875,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))","x","-inf",0.216064453125],["(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))","x","inf",0.18603515625],["(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))","x","0",0.258056640625],["(*.f64 (*.f64 -9 x) x)","x","-inf",0.14892578125],["(*.f64 (*.f64 -9 x) x)","x","inf",0.320068359375],["(*.f64 (*.f64 -9 x) x)","x","0",0.377197265625]],"time":1.577880859375,"type":"series"},{"count":[[2,82]],"inputs":[["(*.f64 (*.f64 -9 x) x)","(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -9 (*.f64 x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -9 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 -9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -9 x)) (*.f64 (pow.f64 (*.f64 -9 x) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 -9 x) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 -9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 -9 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 -9 x) 2/3) x) (cbrt.f64 (*.f64 -9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 -9 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -9 (*.f64 x x))) (*.f64 (cbrt.f64 81) (pow.f64 x 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 81) (pow.f64 x 4/3)) (cbrt.f64 (*.f64 -9 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 -9 x))) (pow.f64 (*.f64 -9 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 -9 x) 2/3) (*.f64 x (cbrt.f64 (*.f64 -9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 (*.f64 x x))) (*.f64 (cbrt.f64 81) (neg.f64 (pow.f64 x 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -9) (*.f64 (cbrt.f64 81) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -9 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) -9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 81) (*.f64 x x)) (cbrt.f64 -9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 9 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -9 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -9 (*.f64 x x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x x) (/.f64 1 -9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -9 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 9 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -729 (pow.f64 x 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -9 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -9 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 -729 (pow.f64 x 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 6) (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -9 (*.f64 x x)) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (+.f64 6 (*.f64 -9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 6 (*.f64 -9 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x 6) (*.f64 9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -9 (*.f64 x x)) (*.f64 -6 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 -6 (*.f64 9 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 6 (*.f64 -9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 6 (*.f64 -9 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (+.f64 (*.f64 (pow.f64 x 2/3) (*.f64 -9 x)) (*.f64 (pow.f64 x 2/3) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 6 (*.f64 -9 x)))) (pow.f64 (*.f64 x (+.f64 6 (*.f64 -9 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (+.f64 6 (*.f64 -9 x))) 2/3) (cbrt.f64 (*.f64 x (+.f64 6 (*.f64 -9 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 -6 (*.f64 9 x)) x)) (neg.f64 (pow.f64 (*.f64 x (+.f64 6 (*.f64 -9 x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 36 (*.f64 x x))) (-.f64 (*.f64 (cbrt.f64 81) (pow.f64 x 4/3)) (*.f64 (cbrt.f64 (*.f64 x 6)) (cbrt.f64 (*.f64 -9 (*.f64 x x)))))) (+.f64 (cbrt.f64 (*.f64 x 6)) (cbrt.f64 (*.f64 -9 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (cbrt.f64 81) (pow.f64 x 4/3)) (-.f64 (cbrt.f64 (*.f64 36 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 -9 (*.f64 x x))) (cbrt.f64 (*.f64 x 6))))) (+.f64 (cbrt.f64 (*.f64 -9 (*.f64 x x))) (cbrt.f64 (*.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 -6 (*.f64 9 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -6 (*.f64 9 x)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 6 (*.f64 -9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 6 (*.f64 -9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (+.f64 6 (*.f64 -9 x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 6 (*.f64 -9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -6 (*.f64 9 x)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 6 (*.f64 -9 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 6 (*.f64 -9 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 6 (*.f64 -9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 -6 (*.f64 9 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 6 (*.f64 -9 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 6)) (sqrt.f64 6) (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 6)) (cbrt.f64 (*.f64 36 (*.f64 x x))) (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 6)) (cbrt.f64 36) (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 6) (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 81) (pow.f64 x 4/3)) (cbrt.f64 (*.f64 -9 (*.f64 x x))) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 -9 x))) (pow.f64 (*.f64 -9 x) 2/3) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) -9 (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -9 (*.f64 x x) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -9 x) x (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 -9 x)) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -9 x)) (*.f64 (pow.f64 (*.f64 -9 x) 2/3) x) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -9 (*.f64 x x))) (*.f64 (cbrt.f64 81) (pow.f64 x 4/3)) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 -9 x) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 -9 x) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -9) (*.f64 (cbrt.f64 81) (*.f64 x x)) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 6 (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 6 x (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 9 (*.f64 x x)) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 6) (*.f64 -9 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -9 (*.f64 x x)) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -9 (*.f64 x x)) 1 (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 6) 1 (*.f64 -9 (*.f64 x x)))))))"]],"rules":[["egg-rr",49],["egg-rr",33]],"time":41.955078125,"type":"rewrite"},{"count":[[106,85]],"inputs":[["(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (pow.f64 x 2))","(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))"]],"time":79.18701171875,"type":"simplify"},{"compiler":[[985,663]],"time":13.946044921875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (fma.f64 -3 x 2) x) 1/3)","fresh",0.38119125976844204],["(*.f64 (*.f64 x 3) (fma.f64 -3 x 2))","next",0.24609375],["(*.f64 (*.f64 x (fma.f64 (pow.f64 x 3) -729 216)) (/.f64 1 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)))","fresh",9.360702539073767],["(*.f64 (*.f64 (*.f64 (cbrt.f64 9) (fma.f64 -3 x 2)) (cbrt.f64 3)) x)","fresh",0.2936325195368841],["(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))","done",0.140625]],"compiler":[[9,7],[9,7],[21,17],[13,11],[9,6],[9,7],[9,7],[21,17],[13,11]],"count":[[90,5]],"kept":[{"done":[0,0],"fresh":[4,4],"new":[85,0],"picked":[1,1]}],"min-error":[0],"time":17.011962890625,"type":"prune"},{"compiler":[[20,15]],"locations":[["(fma.f64 -3 x 2)",0.04296875,false],["(*.f64 (*.f64 x 3) (fma.f64 -3 x 2))",0.171875,true]],"time":5.033935546875,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (*.f64 x 3) (fma.f64 -3 x 2))","x","-inf",0.181884765625],["(*.f64 (*.f64 x 3) (fma.f64 -3 x 2))","x","inf",0.1640625],["(*.f64 (*.f64 x 3) (fma.f64 -3 x 2))","x","0",0.181884765625]],"time":0.569091796875,"type":"series"},{"count":[[1,48]],"inputs":[["(*.f64 (*.f64 x 3) (fma.f64 -3 x 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 3 (*.f64 -3 x))) (*.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 (*.f64 -3 x)) x) (*.f64 6 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 6) (*.f64 x (*.f64 3 (*.f64 -3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 6 x) (*.f64 (*.f64 3 (*.f64 -3 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 (*.f64 x 3) (*.f64 -3 x)))) (*.f64 (*.f64 x 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 (*.f64 x 3) (*.f64 -3 x)) -1)) (neg.f64 (/.f64 (*.f64 (*.f64 x 3) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 3) (*.f64 -3 x)) (*.f64 (*.f64 x 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 3) 2) (*.f64 (*.f64 x 3) (*.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (fma.f64 -3 x 2) (*.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 (*.f64 -3 x) 3 6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 -3 x) 3 6) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x 3) (cbrt.f64 (fma.f64 -3 x 2))) (pow.f64 (fma.f64 -3 x 2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 (*.f64 -3 x) 3 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -3 x 2)) (*.f64 (pow.f64 (fma.f64 -3 x 2) 2/3) (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 -3 x 2) 2/3) (*.f64 x 3)) (cbrt.f64 (fma.f64 -3 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (fma.f64 (*.f64 -3 x) 3 6)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -3 x 2) 2/3) (*.f64 (*.f64 x 3) (cbrt.f64 (fma.f64 -3 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6))) (pow.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)) 2/3) (cbrt.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -3 x 2) (cbrt.f64 (*.f64 x 3))) (pow.f64 (*.f64 x 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 3) 2/3) (*.f64 (fma.f64 -3 x 2) (cbrt.f64 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 -3 x 2) (*.f64 -3 x))) (neg.f64 (pow.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 3)) (*.f64 (pow.f64 (*.f64 x 3) 2/3) (fma.f64 -3 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x 3) 2/3) (fma.f64 -3 x 2)) (cbrt.f64 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3) (fma.f64 -3 x 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -3 x 2) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (fma.f64 -3 x 2) (*.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -3 x 2) (*.f64 -3 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -3 x 2) x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 (fma.f64 -3 x 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x 3) (+.f64 (pow.f64 (*.f64 -3 x) 3) 8)) (/.f64 1 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x 3) (+.f64 (pow.f64 (*.f64 -3 x) 3) 8)) (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -3 x 2) (*.f64 -3 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -3 x 2) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x 3) (+.f64 (pow.f64 (*.f64 -3 x) 3) 8))) (neg.f64 (+.f64 4 (*.f64 (*.f64 -3 x) (fma.f64 x -3 -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 -3 x 2) (*.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (fma.f64 (*.f64 -3 x) 3 6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -3 x) (*.f64 x 3) (*.f64 (*.f64 x 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 3) (*.f64 -3 x) (*.f64 (*.f64 x 3) 2))))))"]],"rules":[["egg-rr",48]],"time":37.0908203125,"type":"rewrite"},{"count":[[60,53]],"inputs":[["(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 -9 (pow.f64 x 2))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 6 x)","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(*.f64 -9 (pow.f64 x 2))","(*.f64 -9 (*.f64 x x))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))","(+.f64 (*.f64 6 x) (*.f64 -9 (pow.f64 x 2)))","(*.f64 x (+.f64 6 (*.f64 -9 x)))"]],"time":49.06201171875,"type":"simplify"},{"compiler":[[1526,1234]],"time":23.864990234375,"type":"eval"},{"alts":[["(*.f64 (*.f64 x (fma.f64 (pow.f64 x 3) -729 216)) (/.f64 1 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)))","fresh",9.360702539073767],["(*.f64 3 (*.f64 (fma.f64 -3 x 2) x))","fresh",0.26953125],["(/.f64 (*.f64 (fma.f64 -3 x 2) x) 1/3)","fresh",0.38119125976844204],["(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))","done",0.140625],["(*.f64 (*.f64 x 3) (fma.f64 (cbrt.f64 -3) (*.f64 (cbrt.f64 9) x) 2))","fresh",0.2731437988422101]],"compiler":[[21,17],[9,7],[9,7],[9,6],[13,11]],"count":[[120,5]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[115,2],"picked":[1,0]}],"min-error":[0],"time":23.24609375,"type":"prune"},{"accuracy":[0.140625],"baseline":[0.140625],"branch":[["x",0.140625,1],["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)",0.140625,1]],"compiler":[[2,1],[10,8],[137,108]],"count":[[12,1]],"inputs":[["(*.f64 3 (*.f64 (fma.f64 -3 x 2) x))","(*.f64 (*.f64 x 3) (fma.f64 (cbrt.f64 -3) (*.f64 (cbrt.f64 9) x) 2))","(*.f64 (*.f64 x (fma.f64 (pow.f64 x 3) -729 216)) (/.f64 1 (fma.f64 (*.f64 -9 x) (fma.f64 -9 x -6) 36)))","(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))","(/.f64 (*.f64 (fma.f64 -3 x 2) x) 1/3)","(*.f64 (*.f64 x 3) (fma.f64 -3 x 2))","(*.f64 (+.f64 6 (*.f64 -9 x)) x)","(*.f64 (*.f64 (*.f64 (cbrt.f64 9) (fma.f64 -3 x 2)) (cbrt.f64 3)) x)","(*.f64 (*.f64 x (cbrt.f64 (fma.f64 (*.f64 -3 x) 3 6))) (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 2/3))","(*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 -3 x) 3 6) 2/3) x) (cbrt.f64 (fma.f64 (*.f64 -3 x) 3 6)))","(*.f64 (*.f64 3 (fma.f64 -3 x 2)) x)","(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)"]],"link":["."],"name":["Diagrams.Tangent:$catParam from diagrams-lib-1.3.0.3, E"],"oracle":[16.079000188882063],"outputs":[["(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))"]],"time":12.327880859375,"times":[["x",4.60302734375],["(*.f64 (*.f64 3 (-.f64 2 (*.f64 x 3))) x)",4.967041015625]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x 6 (*.f64 (*.f64 -9 x) x))","(*.f64 x (+.f64 6 (*.f64 -9 x)))"]],"stop":[["fuel",1]],"time":35.60400390625,"type":"simplify"},{"time":0.01416015625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":8.462890625,"type":"end"}]
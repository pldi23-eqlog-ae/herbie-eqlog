[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.7496337890625,0.0009760856628417969,0.2493901252746582],[11,0.7496337890625,0.0019521713256835938,0.2484140396118164],[10,0.7496337890625,0.0039043426513671875,0.2464618682861328],[9,0.7496337890625,0.007808685302734375,0.24255752563476563],[8,0.7496337890625,0.01561737060546875,0.23474884033203125],[7,0.7496337890625,0.0312347412109375,0.2191314697265625],[6,0.7496337890625,0.062469482421875,0.187896728515625],[5,0.7496337890625,0.12493896484375,0.12542724609375],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.326171875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.142822265625,5],["body",256,"valid",247.609130859375,8256]],"time":255.2548828125,"type":"sample"},{"compiler":[[8,6]],"inputs":[["0"],["(/.f64 (-.f64 (*.f64 x x) 3) 6)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","(fma.f64 x (*.f64 x 1/6) -1/2)"]],"symmetry":[[]],"time":52.60302734375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 (*.f64 x x) 3) 6)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (*.f64 x x) 3) 6)","(fma.f64 x (*.f64 x 1/6) -1/2)"]],"time":19.359130859375,"type":"simplify"},{"compiler":[[14,10]],"time":0.35791015625,"type":"eval"},{"alts":[["(fma.f64 x (*.f64 x 1/6) -1/2)","next",0.127285009768442],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","fresh",0.33203125]],"compiler":[[7,5],[8,6],[7,5],[8,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.03515625],"time":2.31005859375,"type":"prune"},{"compiler":[[13,9]],"locations":[["(fma.f64 x (*.f64 x 1/6) -1/2)",0.0703125,true],["(*.f64 x 1/6)",0.3046875,true]],"time":3.35400390625,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 x (*.f64 x 1/6) -1/2)","x","-inf",0.531982421875],["(fma.f64 x (*.f64 x 1/6) -1/2)","x","inf",0.347900390625],["(fma.f64 x (*.f64 x 1/6) -1/2)","x","0",0.31005859375],["(*.f64 x 1/6)","x","-inf",0.4091796875],["(*.f64 x 1/6)","x","inf",0.35107421875],["(*.f64 x 1/6)","x","0",0.31787109375]],"time":2.350830078125,"type":"series"},{"count":[[2,76]],"inputs":[["(*.f64 x 1/6)","(fma.f64 x (*.f64 x 1/6) -1/2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/6) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 1/6)) (cbrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) (*.f64 x (cbrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) 1/6) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 1/6)) (pow.f64 (*.f64 x 1/6) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 1/6) 2/3) (cbrt.f64 (*.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/216 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 1/216 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/6 x)) (neg.f64 (pow.f64 (*.f64 x 1/6) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 1/6)) (sqrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/6) (*.f64 x (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/6) (*.f64 (cbrt.f64 1/36) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/36) x) (cbrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/6 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/6) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 1 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/6 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x 1/6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x 1/6) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 1/6) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/2 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (*.f64 x 1/6) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 x x) 1/6) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1/2 (*.f64 (*.f64 -1/6 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 (*.f64 -1/6 x) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2/3) (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 (*.f64 -1/6 x) x) 1/2)) (neg.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3) -1/8) (/.f64 1 (+.f64 1/4 (*.f64 (*.f64 (*.f64 x x) 1/6) (fma.f64 x (*.f64 x 1/6) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 2)) (-.f64 (cbrt.f64 1/4) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 -1/2)))) (+.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 1/4) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 2)) (*.f64 (cbrt.f64 -1/2) (cbrt.f64 (*.f64 (*.f64 x x) 1/6))))) (+.f64 (cbrt.f64 -1/2) (cbrt.f64 (*.f64 (*.f64 x x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 (*.f64 -1/6 x) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (*.f64 -1/6 x) x) 1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (*.f64 x 1/6) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3)) 1/8) (/.f64 1 (neg.f64 (+.f64 1/4 (*.f64 (*.f64 (*.f64 x x) 1/6) (fma.f64 x (*.f64 x 1/6) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3) -1/8) (+.f64 1/4 (*.f64 (*.f64 (*.f64 x x) 1/6) (fma.f64 x (*.f64 x 1/6) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3)) 1/8)) (+.f64 1/4 (*.f64 (*.f64 (*.f64 x x) 1/6) (fma.f64 x (*.f64 x 1/6) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3)) 1/8) (neg.f64 (+.f64 1/4 (*.f64 (*.f64 (*.f64 x x) 1/6) (fma.f64 x (*.f64 x 1/6) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 -1/6 x) x) 1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (neg.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3)) 1/8)) (neg.f64 (neg.f64 (+.f64 1/4 (*.f64 (*.f64 (*.f64 x x) 1/6) (fma.f64 x (*.f64 x 1/6) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2) (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3) -1/8))) (cbrt.f64 (+.f64 1/4 (*.f64 (*.f64 (*.f64 x x) 1/6) (fma.f64 x (*.f64 x 1/6) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 (*.f64 -1/6 x) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3) -1/8) (neg.f64 (+.f64 1/4 (*.f64 (*.f64 (*.f64 x x) 1/6) (fma.f64 x (*.f64 x 1/6) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (cbrt.f64 -1/2) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (cbrt.f64 1/4) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x 1/6) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1/2 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 1/6) x -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1/6 -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 2)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 x 1/6)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 x 1/6))) (pow.f64 (*.f64 x 1/6) 2/3) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) 1/6) 1 -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1/2 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 1 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x x) 1/6) -1/2)))))"]],"rules":[["egg-rr",45],["egg-rr",31]],"time":40.47119140625,"type":"rewrite"},{"count":[[100,81]],"inputs":[["(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)"]],"time":77.2099609375,"type":"simplify"},{"compiler":[[921,666]],"time":15.27099609375,"type":"eval"},{"alts":[["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)","next",0.0703125],["(fma.f64 x (*.f64 x 1/6) -1/2)","done",0.127285009768442],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","fresh",0.33203125],["(fma.f64 x (*.f64 (*.f64 x (sqrt.f64 1/6)) (sqrt.f64 1/6)) -1/2)","fresh",0.11556625976844201]],"compiler":[[9,7],[7,5],[8,6],[11,9],[9,7],[8,6],[11,9]],"count":[[83,4]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[81,2],"picked":[1,1]}],"min-error":[0.0078125],"time":16.509033203125,"type":"prune"},{"compiler":[[21,17]],"locations":[["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)",0.0703125,true]],"time":5.166015625,"type":"localize"},{"count":[[1,12]],"series":[["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)","x","-inf",0.152099609375],["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)","x","inf",0.158203125],["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)","x","0",0.209228515625]],"time":0.560791015625,"type":"series"},{"count":[[1,44]],"inputs":[["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 0) (fma.f64 x (*.f64 x 1/6) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 x 1/6) -1/2) (*.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (*.f64 x 1/6) -1/2)) (fma.f64 x (*.f64 x 1/6) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 x 1/6) -1/2) (*.f64 0 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 1/6) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/2 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3) -1/8) (/.f64 1 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 2) 1/4) (/.f64 (*.f64 (*.f64 x x) -1/2) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) (cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2)) (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (*.f64 x 1/6) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3) -1/8) (+.f64 1/4 (-.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 2) (/.f64 (*.f64 (*.f64 x x) -1/2) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x x) 2) -6) (*.f64 6 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 (*.f64 x x)) 2) 6) (*.f64 -6 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 6 (*.f64 2 (neg.f64 (*.f64 x x)))) (*.f64 2 -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -6 (*.f64 2 (*.f64 x x))) (*.f64 2 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3) -1/8) 1) (*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 2) 1/4) (/.f64 (*.f64 (*.f64 x x) -1/2) 6)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3) -1/8)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 2) 1/4) (/.f64 (*.f64 (*.f64 x x) -1/2) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3) -1/8) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 2) 1/4) (/.f64 (*.f64 (*.f64 x x) -1/2) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 3) -1/8) 1) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 2) 1/4) (/.f64 (*.f64 (*.f64 x x) -1/2) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x 1/6) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) 1/6) 1 -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (cbrt.f64 1/4) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (cbrt.f64 -1/2) (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 1 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1/2 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1/2 (*.f64 (*.f64 x x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 1/6) x -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (*.f64 x 1/6))) (cbrt.f64 (*.f64 1/36 (*.f64 x x))) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 x x) 1/6) 2)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 x x) 1/6) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 x 1/6)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1/6 -1/2)))))"]],"rules":[["egg-rr",44]],"time":20.526123046875,"type":"rewrite"},{"count":[[56,49]],"inputs":[["-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)"]],"method":["egg-herbie"],"outputs":[["-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)"]],"time":46.623046875,"type":"simplify"},{"compiler":[[588,414]],"time":9.0888671875,"type":"eval"},{"alts":[["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)","done",0.0703125],["(fma.f64 x (*.f64 x 1/6) -1/2)","done",0.127285009768442],["(fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 x 1/6)) -1/2)","fresh",0.4420700195368841],["(fma.f64 (*.f64 x (cbrt.f64 (*.f64 x 1/6))) (cbrt.f64 (*.f64 1/36 (*.f64 x x))) -1/2)","fresh",0.4248237793053261],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","next",0.33203125]],"compiler":[[9,7],[7,5],[13,9],[15,11],[8,6],[13,9],[15,11],[8,6]],"count":[[53,5]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[49,2],"picked":[1,1]}],"min-error":[0],"time":9.696044921875,"type":"prune"},{"compiler":[[19,10]],"locations":[["(-.f64 (*.f64 x x) 3)",0.00390625,true],["(/.f64 (-.f64 (*.f64 x x) 3) 6)",0.29198514072195336,true]],"time":3.930908203125,"type":"localize"},{"count":[[2,24]],"series":[["(-.f64 (*.f64 x x) 3)","x","-inf",0.169189453125],["(-.f64 (*.f64 x x) 3)","x","inf",0.14794921875],["(-.f64 (*.f64 x x) 3)","x","0",0.177978515625],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","x","-inf",0.156982421875],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","x","inf",0.364990234375],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","x","0",0.364013671875]],"time":1.4501953125,"type":"series"},{"count":[[2,219]],"inputs":[["(/.f64 (-.f64 (*.f64 x x) 3) 6)","(-.f64 (*.f64 x x) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x 1/6)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/2 (*.f64 x (*.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 -3) (*.f64 x (*.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x 1/6)) (*.f64 1/6 -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 x 1/6) -1/2) (*.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 0) (fma.f64 x (*.f64 x 1/6) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 x 1/6) -1/2) (*.f64 0 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (*.f64 x 1/6) -1/2)) (fma.f64 x (*.f64 x 1/6) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x 1/6)) (*.f64 -1/2 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (*.f64 x 1/6)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (fma.f64 x x -3) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (pow.f64 x 6) 1/216) (+.f64 (/.f64 (pow.f64 x 4) 36) (*.f64 1/2 (fma.f64 x (*.f64 x 1/6) 1/2)))) (/.f64 1/8 (+.f64 (/.f64 (pow.f64 x 4) 36) (*.f64 1/2 (fma.f64 x (*.f64 x 1/6) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (pow.f64 x 6) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) 6) (/.f64 (/.f64 27 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 6) (*.f64 (fma.f64 x x -3) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 x x) 6) 36) (/.f64 18 36))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 x 6) (*.f64 6 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))) (/.f64 27 (*.f64 6 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1/2 (/.f64 (*.f64 x x) -6))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 -6) (*.f64 (fma.f64 x x -3) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x -3)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/6) (*.f64 (fma.f64 x x -3) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/6) (/.f64 (fma.f64 x x -3) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 x (sqrt.f64 1/6)) (sqrt.f64 1/2)) (-.f64 (*.f64 x (sqrt.f64 1/6)) (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (pow.f64 x 6) 1/216) 1/8) (/.f64 1 (+.f64 (/.f64 (pow.f64 x 4) 36) (*.f64 1/2 (fma.f64 x (*.f64 x 1/6) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) (cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2)) (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 3 (*.f64 x x)) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 x x -3) (sqrt.f64 216))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2)) (sqrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (*.f64 x 1/6) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (fma.f64 x x -3) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2)) 1/6) (cbrt.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2)) (sqrt.f64 1/6)) (cbrt.f64 (/.f64 (fma.f64 x x -3) (sqrt.f64 216))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x x -3) (cbrt.f64 36)) (cbrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x x -3) (sqrt.f64 1/6)) (sqrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/6 (-.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x x -3) -1/6) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x x -3) (cbrt.f64 1/6)) (cbrt.f64 (/.f64 1 36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 6) -27) (/.f64 1 (*.f64 6 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 x x) 6 (neg.f64 18)) (/.f64 1 36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 x 6) -27) 1/6) (/.f64 1 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 x 6) 1/216) 1/8) (+.f64 (/.f64 (pow.f64 x 4) 36) (*.f64 1/2 (fma.f64 x (*.f64 x 1/6) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2)) (cbrt.f64 (-.f64 3 (*.f64 x x)))) (cbrt.f64 -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 (pow.f64 x 6) 1/216) 1/8) 1) (+.f64 (/.f64 (pow.f64 x 4) 36) (*.f64 1/2 (fma.f64 x (*.f64 x 1/6) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 3 (*.f64 x x))) (cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2))) (cbrt.f64 -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x -3) -1) -6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x x -3) (sqrt.f64 1/6)) (sqrt.f64 (sqrt.f64 6))) (sqrt.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x x -3) (cbrt.f64 1/6)) (cbrt.f64 (cbrt.f64 36))) (pow.f64 (cbrt.f64 (cbrt.f64 36)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (pow.f64 x 6) -27) 1/6) (cbrt.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))) (pow.f64 (cbrt.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 (*.f64 x x)) (sqrt.f64 6)) (neg.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x 6) 1/216) (pow.f64 -1/2 3)) (+.f64 (/.f64 (pow.f64 x 4) 36) (-.f64 (*.f64 -1/2 -1/2) (*.f64 (*.f64 x (*.f64 x 1/6)) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) (cbrt.f64 36)) (*.f64 (cbrt.f64 36) (cbrt.f64 (/.f64 27 6)))) (*.f64 (cbrt.f64 36) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) 6) (*.f64 (cbrt.f64 36) 3)) (*.f64 (cbrt.f64 36) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) 2) (cbrt.f64 36)) (*.f64 (cbrt.f64 36) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) -6) (*.f64 (cbrt.f64 36) -3)) (*.f64 (cbrt.f64 36) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (cbrt.f64 1/6)) (sqrt.f64 6)) (*.f64 (cbrt.f64 36) (sqrt.f64 (/.f64 9 6)))) (*.f64 (cbrt.f64 36) (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (*.f64 x x)) (cbrt.f64 36)) (*.f64 -6 (cbrt.f64 (/.f64 27 6)))) (*.f64 -6 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (*.f64 x x)) 6) (*.f64 -6 3)) (*.f64 -6 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (*.f64 x x)) 2) -6) (*.f64 -6 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (*.f64 x x)) (sqrt.f64 6)) (*.f64 -6 (sqrt.f64 (/.f64 9 6)))) (*.f64 -6 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) (cbrt.f64 36)) (*.f64 6 (cbrt.f64 (/.f64 27 6)))) (*.f64 6 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) (sqrt.f64 6)) (*.f64 6 (sqrt.f64 (/.f64 9 6)))) (sqrt.f64 216))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) 2) 6) (*.f64 6 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) -6) (*.f64 6 -3)) (*.f64 6 -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (cbrt.f64 36)) (*.f64 (sqrt.f64 6) (cbrt.f64 (/.f64 27 6)))) (*.f64 (sqrt.f64 6) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) 6) (*.f64 (sqrt.f64 6) 3)) (sqrt.f64 216))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) 2) (sqrt.f64 6)) (*.f64 (sqrt.f64 6) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) -6) (*.f64 (sqrt.f64 6) -3)) (*.f64 (sqrt.f64 6) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 (pow.f64 x 6) 1/216) 1/8) 1) (*.f64 (+.f64 (/.f64 (pow.f64 x 4) 36) (*.f64 1/2 (fma.f64 x (*.f64 x 1/6) 1/2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 6) -27) (cbrt.f64 1/6)) (*.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 6) -27) -1) (*.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 6) -27) (sqrt.f64 1/6)) (*.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)) (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 6)) (cbrt.f64 1/6)) (*.f64 (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 6)) 1) (*.f64 (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 6)) -1) (*.f64 (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 6)) (sqrt.f64 1/6)) (*.f64 (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/6) (+.f64 (pow.f64 x 6) -27)) (*.f64 (sqrt.f64 6) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/6) (-.f64 27 (pow.f64 x 6))) (*.f64 (sqrt.f64 6) (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/6) (+.f64 (pow.f64 x 6) -27)) (*.f64 (cbrt.f64 36) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/6) (-.f64 27 (pow.f64 x 6))) (*.f64 (cbrt.f64 36) (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x 6) 1/216) 1/8)) (neg.f64 (+.f64 (/.f64 (pow.f64 x 4) 36) (*.f64 1/2 (fma.f64 x (*.f64 x 1/6) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 3 (*.f64 x x)) -6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 x x -3) (sqrt.f64 1/6))) (neg.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (*.f64 x x) 6 (neg.f64 18))) (neg.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 6) -27) 1/6) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -3) (sqrt.f64 1/6)) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -3) (cbrt.f64 1/6)) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x x) 6 (neg.f64 18)) 36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) -27) (*.f64 6 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -3) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2)) (cbrt.f64 (fma.f64 x x -3))) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/6) (fma.f64 x x -3)) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/6) (fma.f64 x x -3)) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2))) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 x x -3) (sqrt.f64 216))) (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2))) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 (pow.f64 x 6) -27) 1/6) 1) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 x x -3) (cbrt.f64 1/6)) 1) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 x x) 6 (neg.f64 18)) 1) 36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 x x -3) (sqrt.f64 1/6)) 1) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x x -3)) (cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2))) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x x -3)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2)) (sqrt.f64 1/6))) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 6)) -1/6) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x -3) (cbrt.f64 36)) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x -3) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x -3) (neg.f64 (sqrt.f64 6))) (neg.f64 (sqrt.f64 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x x -3) (sqrt.f64 1/6)) (cbrt.f64 (sqrt.f64 6))) (cbrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x x -3) (sqrt.f64 1/6)) 1) (sqrt.f64 6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x x -3) (cbrt.f64 1/6)) 1) (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 (pow.f64 x 6) -27) 1/6) 1) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 x x) 6 (neg.f64 18)) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 (*.f64 x x)) (cbrt.f64 6)) (neg.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) -27) (/.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 6)) (*.f64 -6 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 6)) (*.f64 6 (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (*.f64 x x)) -6) (*.f64 -6 -3)) 36)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x x) (sqrt.f64 1/6)) (sqrt.f64 6)) (*.f64 (sqrt.f64 6) (sqrt.f64 (/.f64 9 6)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) -27) (*.f64 (*.f64 6 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 6)) 1) (*.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)) -6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 6)) -1) (*.f64 6 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) -27) (*.f64 -6 (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 x x -3) (cbrt.f64 1/6))) (neg.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 6)) (neg.f64 (*.f64 6 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/6 (-.f64 27 (pow.f64 x 6))) (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 6)) 1/6) (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 6) -27)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2)) 1/6)) (cbrt.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 x 6) -27) 1/6)) (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 x x -3) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (*.f64 x 1/6))) (cbrt.f64 (/.f64 (pow.f64 x 4) 36)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x 1/6) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 1/6)) (*.f64 x (sqrt.f64 1/6)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1/6 -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/6) (*.f64 (*.f64 x x) (sqrt.f64 1/6)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/6) (/.f64 (*.f64 x x) (cbrt.f64 36)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 (pow.f64 x 4)) 1/6) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 1/6)) (/.f64 x (cbrt.f64 36)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 1/6)) (*.f64 (cbrt.f64 (pow.f64 x 4)) (sqrt.f64 1/6)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (*.f64 x 1/6)) -1/2)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) -3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x -3) (*.f64 (fma.f64 x x -3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x -3) 0) (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x -3) (*.f64 0 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x x -3)) (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 x 6) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) (neg.f64 (/.f64 27 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x x) 0) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -3 (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (pow.f64 x 6) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) 1) (/.f64 (/.f64 27 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 x 6) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) (/.f64 27 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x -3)) (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2)) (cbrt.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (sqrt.f64 3)) (-.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 3 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (sqrt.f64 3)) (+.f64 x (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 3 (*.f64 x x))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x (sqrt.f64 3))) (-.f64 (sqrt.f64 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (sqrt.f64 3)) (-.f64 x (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 x) (neg.f64 (sqrt.f64 3))) (-.f64 (neg.f64 x) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 x) (sqrt.f64 3)) (-.f64 (neg.f64 x) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 6) -27) (/.f64 1 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 27 (pow.f64 x 6)) (/.f64 1 (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 x 4)) (+.f64 (cbrt.f64 9) (cbrt.f64 (*.f64 (*.f64 x x) 3)))) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) (+.f64 (pow.f64 x 6) -27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) -27) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 x 6) 3) 19683) (/.f64 1 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))) (+.f64 (pow.f64 (*.f64 x x) 6) (*.f64 27 (+.f64 (pow.f64 x 6) 27))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 3 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x -3) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 x 6) -27) (cbrt.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)))) (pow.f64 (cbrt.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) -27) (+.f64 9 (-.f64 (pow.f64 x 4) (*.f64 (*.f64 x x) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 x 6) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) (*.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)) 27)) (*.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4)) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (pow.f64 x 6) 3) 19683) 1) (*.f64 (+.f64 (pow.f64 (*.f64 x x) 6) (*.f64 27 (+.f64 (pow.f64 x 6) 27))) (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 6)) 1) (*.f64 (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 6)) (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2)) (cbrt.f64 (+.f64 (pow.f64 x 6) -27))) (cbrt.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 6)) 1) (neg.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 6) -27)) (cbrt.f64 (pow.f64 (fma.f64 x x -3) 2))) (cbrt.f64 (fma.f64 3 (fma.f64 x x 3) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x -3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x -3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x -3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x -3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 3 (*.f64 x x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 3 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x -3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (pow.f64 x 4)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) x) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (neg.f64 x) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (cbrt.f64 (*.f64 x x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -3) (cbrt.f64 9) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 3)) (sqrt.f64 3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) (neg.f64 (sqrt.f64 3)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) (neg.f64 (cbrt.f64 9)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -3 1 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 x x -3))))))"]],"rules":[["egg-rr",74],["egg-rr",145]],"time":34.155029296875,"type":"rewrite"},{"count":[[243,228]],"inputs":[["-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","-3","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)","(pow.f64 x 2)","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)","(pow.f64 x 2)","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)"]],"method":["egg-herbie"],"outputs":[["-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","-3","(-.f64 (pow.f64 x 2) 3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(fma.f64 x x -3)","(pow.f64 x 2)","(*.f64 x x)","(-.f64 (pow.f64 x 2) 3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(fma.f64 x x -3)","(pow.f64 x 2)","(*.f64 x x)","(-.f64 (pow.f64 x 2) 3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(fma.f64 x x -3)"]],"time":83.052001953125,"type":"simplify"},{"compiler":[[3227,2474]],"time":50.740966796875,"type":"eval"},{"alts":[["(fma.f64 (*.f64 x (cbrt.f64 1/6)) (/.f64 x (cbrt.f64 36)) -1/2)","next",0.08984375],["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)","done",0.0703125],["(fma.f64 (cbrt.f64 1/6) (/.f64 (*.f64 x x) (cbrt.f64 36)) -1/2)","fresh",0.3515625]],"compiler":[[11,9],[9,7],[11,9],[11,9],[11,9]],"count":[[233,3]],"kept":[{"done":[2,1],"fresh":[2,0],"new":[228,2],"picked":[1,0]}],"min-error":[0],"time":84.02001953125,"type":"prune"},{"compiler":[[27,22]],"locations":[["(fma.f64 (*.f64 x (cbrt.f64 1/6)) (/.f64 x (cbrt.f64 36)) -1/2)",0.08203125,true],["(/.f64 x (cbrt.f64 36))",0.12109375,true],["(*.f64 x (cbrt.f64 1/6))",0.12109375,true]],"time":8.641845703125,"type":"localize"},{"count":[[3,24]],"series":[["(fma.f64 (*.f64 x (cbrt.f64 1/6)) (/.f64 x (cbrt.f64 36)) -1/2)","x","-inf",0.327880859375],["(fma.f64 (*.f64 x (cbrt.f64 1/6)) (/.f64 x (cbrt.f64 36)) -1/2)","x","inf",0.233154296875],["(fma.f64 (*.f64 x (cbrt.f64 1/6)) (/.f64 x (cbrt.f64 36)) -1/2)","x","0",0.3310546875],["(/.f64 x (cbrt.f64 36))","x","-inf",0.363037109375],["(/.f64 x (cbrt.f64 36))","x","inf",0.5419921875],["(/.f64 x (cbrt.f64 36))","x","0",1.14990234375],["(*.f64 x (cbrt.f64 1/6))","x","-inf",0.285888671875],["(*.f64 x (cbrt.f64 1/6))","x","inf",0.734130859375],["(*.f64 x (cbrt.f64 1/6))","x","0",1.429931640625]],"time":5.51416015625,"type":"series"},{"count":[[3,115]],"inputs":[["(*.f64 x (cbrt.f64 1/6))","(/.f64 x (cbrt.f64 36))","(fma.f64 (*.f64 x (cbrt.f64 1/6)) (/.f64 x (cbrt.f64 36)) -1/2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) 0) (*.f64 x (cbrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 (*.f64 x (cbrt.f64 1/6)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (cbrt.f64 1/6))) (*.f64 x (cbrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 0 (*.f64 x (cbrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 1/6))) (pow.f64 (*.f64 x (cbrt.f64 1/6)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 1/6)) 2/3) (cbrt.f64 (*.f64 x (cbrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cbrt.f64 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/6) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/6 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/6)) (*.f64 (cbrt.f64 (cbrt.f64 1/36)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cbrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (cbrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (cbrt.f64 1/6))) (cbrt.f64 (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/6)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 1/6 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/36)) (*.f64 x (cbrt.f64 (cbrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (cbrt.f64 1/6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/36)) x) (cbrt.f64 (cbrt.f64 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) 1/6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 1/6))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 1/6))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 1/6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (cbrt.f64 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) 1/6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (cbrt.f64 1/36)) 0) (*.f64 x (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 1/36)) (*.f64 (*.f64 x (cbrt.f64 1/36)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (cbrt.f64 1/36))) (*.f64 x (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 1/36)) (*.f64 0 (*.f64 x (cbrt.f64 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 x (cbrt.f64 -36)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 -36)) (/.f64 x (cbrt.f64 -36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 x (cbrt.f64 -36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 1/36))) (pow.f64 (*.f64 x (cbrt.f64 1/36)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (cbrt.f64 1/36)) 2/3) (cbrt.f64 (*.f64 x (cbrt.f64 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/36)) (/.f64 x (cbrt.f64 (cbrt.f64 1296))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 1/36)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cbrt.f64 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/36) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 -36)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 1/36)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (cbrt.f64 1296))) (cbrt.f64 (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/36)) x) (/.f64 1 (cbrt.f64 (cbrt.f64 1296))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (sqrt.f64 36))) (cbrt.f64 (sqrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/36)) x) (cbrt.f64 (cbrt.f64 (cbrt.f64 1296)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 1296)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (cbrt.f64 36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (cbrt.f64 -36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/36)) x) (cbrt.f64 (cbrt.f64 1296)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 1/36)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 x (cbrt.f64 1/36)) 2/3) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (cbrt.f64 -36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 x (cbrt.f64 1/36)) 2/3) (cbrt.f64 x)) (cbrt.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (cbrt.f64 1/36))) (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 1296)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (*.f64 x (cbrt.f64 1/36)) 2/3)) (cbrt.f64 (cbrt.f64 -36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (pow.f64 (*.f64 x (cbrt.f64 1/36)) 2/3)) (cbrt.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/36)) x) 1) (cbrt.f64 (cbrt.f64 1296)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (cbrt.f64 1296))) (cbrt.f64 (cbrt.f64 36)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x -1) (cbrt.f64 -36))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/36)) x) 1) (cbrt.f64 (cbrt.f64 1296)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 (cbrt.f64 36))) (neg.f64 (cbrt.f64 (cbrt.f64 1296))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/36)) x)) (neg.f64 (cbrt.f64 (cbrt.f64 1296))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) 1/36) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 1/36))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 1/36))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 1/36))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 1/36)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (cbrt.f64 -36)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x (cbrt.f64 -36)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) 1/36))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2) 0) (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2) (*.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2)) (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2) (*.f64 0 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/2 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) 3) 1/36) -1/8) (/.f64 1 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)) 2) 1/4) (*.f64 -1/2 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2)) (pow.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2) 2/3) (cbrt.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) 3) 1/36) -1/8) (+.f64 1/4 (-.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)) 2) (*.f64 -1/2 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) 3) 1/36) -1/8) 1) (*.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)) 2) 1/4) (*.f64 -1/2 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) 3) 1/36) -1/8)) (neg.f64 (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)) 2) 1/4) (*.f64 -1/2 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) 3) 1/36) -1/8) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)) 2) 1/4) (*.f64 -1/2 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) 3) 1/36) -1/8) 1) (-.f64 (+.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)) 2) 1/4) (*.f64 -1/2 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 1/6)) (*.f64 x (cbrt.f64 1/36)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) (cbrt.f64 (*.f64 x (cbrt.f64 1/36)))) (pow.f64 (*.f64 x (cbrt.f64 1/36)) 2/3) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 1/36)) (*.f64 x (cbrt.f64 1/6)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)) 2)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (cbrt.f64 1/6))) (*.f64 (pow.f64 (*.f64 x (cbrt.f64 1/6)) 2/3) (*.f64 x (cbrt.f64 1/36))) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/6) (*.f64 (*.f64 x (cbrt.f64 1/36)) x) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 (*.f64 x (cbrt.f64 1/36)) (cbrt.f64 1/6)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (cbrt.f64 1/4) (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1/2 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (cbrt.f64 -1/2) (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 1 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1/2 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (*.f64 x (cbrt.f64 1/6)) x) (cbrt.f64 1/36)) 1 -1/2)))))"]],"rules":[["egg-rr",41],["egg-rr",46],["egg-rr",28]],"time":29.394775390625,"type":"rewrite"},{"count":[[139,120]],"inputs":[["(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","-1/2","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(/.f64 (*.f64 (pow.f64 x 2) (cbrt.f64 1/6)) (cbrt.f64 36))","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(/.f64 (*.f64 (pow.f64 x 2) (cbrt.f64 1/6)) (cbrt.f64 36))","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","(*.f64 (cbrt.f64 1/6) x)","-1/2","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(/.f64 (*.f64 (pow.f64 x 2) (cbrt.f64 1/6)) (cbrt.f64 36))","(*.f64 (*.f64 x x) 1/6)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(/.f64 (*.f64 (pow.f64 x 2) (cbrt.f64 1/6)) (cbrt.f64 36))","(*.f64 (*.f64 x x) 1/6)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(-.f64 (/.f64 (*.f64 (cbrt.f64 1/6) (pow.f64 x 2)) (cbrt.f64 36)) 1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)"]],"time":83.4912109375,"type":"simplify"},{"compiler":[[1865,1546]],"time":29.94287109375,"type":"eval"},{"alts":[["(fma.f64 (*.f64 x (cbrt.f64 1/6)) (/.f64 x (cbrt.f64 36)) -1/2)","done",0.08984375],["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)","done",0.0703125],["(fma.f64 (cbrt.f64 1/6) (/.f64 (*.f64 x x) (cbrt.f64 36)) -1/2)","fresh",0.3515625]],"compiler":[[11,9],[9,7],[11,9]],"count":[[123,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[120,0],"picked":[1,1]}],"min-error":[0],"time":29.381103515625,"type":"prune"},{"accuracy":[0.0703125],"baseline":[0.0703125],"branch":[["x",0.0703125,1],["(/.f64 (-.f64 (*.f64 x x) 3) 6)",0.0703125,1],["(-.f64 (*.f64 x x) 3)",0.0703125,1],["(*.f64 x x)",0.0703125,1],["(*.f64 x x)",0.0703125,1]],"compiler":[[2,1],[8,6],[6,4],[4,2],[4,2],[78,55]],"count":[[8,1]],"inputs":[["(fma.f64 (*.f64 x (cbrt.f64 1/6)) (/.f64 x (cbrt.f64 36)) -1/2)","(fma.f64 (cbrt.f64 1/6) (/.f64 (*.f64 x x) (cbrt.f64 36)) -1/2)","(fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 x 1/6)) -1/2)","(fma.f64 (*.f64 x (cbrt.f64 (*.f64 x 1/6))) (cbrt.f64 (*.f64 1/36 (*.f64 x x))) -1/2)","(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)","(fma.f64 x (*.f64 (*.f64 x (sqrt.f64 1/6)) (sqrt.f64 1/6)) -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(/.f64 (-.f64 (*.f64 x x) 3) 6)"]],"link":["."],"name":["Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, H"],"oracle":[0.5723038086106522],"outputs":[["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)"]],"time":15.73388671875,"times":[["x",3.7109375],["(/.f64 (-.f64 (*.f64 x x) 3) 6)",2.803955078125],["(-.f64 (*.f64 x x) 3)",2.06201171875],["(*.f64 x x)",2.59716796875],["(*.f64 x x)",2.643798828125]],"type":"regimes"},{"compiler":[[9,7]],"inputs":[["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (/.f64 x (/.f64 1 1/6)) -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)"]],"stop":[["fuel",1]],"time":18.56396484375,"type":"simplify"},{"time":0.01904296875,"type":"soundness"},{"compiler":[[9,7]],"remove-preprocessing":[[]],"time":8.700927734375,"type":"end"}]
[{"compiler":[[15,9]],"method":["search"],"sampling":[[12,0.5733780198993372,0.42515785148998475,0.0014641286106780171],[11,0.4914668741994319,0.5070689971898901,0.0014641286106780171],[10,0.4212573207423702,0.5772785506469518,0.0014641286106780171],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":87.202880859375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.514404296875,13],["body",512,"valid",10.723388671875,151],["body",1024,"valid",22.435791015625,218],["body",2048,"valid",11.976806640625,88],["body",256,"valid",320.271728515625,7799]],"time":375.4189453125,"type":"sample"},{"compiler":[[14,8]],"inputs":[["0","1","2"],["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 x y) y) x) z) x)","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 y x) x) y) z) y)","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 z y) y) z) x) z)","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 x z) z) x) y) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 x y) y) x) z) x)","(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 x z))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 y x) x) y) z) y)","(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z y))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 z y) y) z) x) z)","(+.f64 (*.f64 (+.f64 z y) 2) (+.f64 x z))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 x z) z) x) y) x)","(+.f64 (*.f64 (+.f64 x z) 2) (+.f64 x y))"]],"symmetry":[[]],"time":74.132080078125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 x y) y) x) z) x)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 x y) y) x) z) x)","(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))"]],"time":20.18212890625,"type":"simplify"},{"compiler":[[23,12]],"time":0.326904296875,"type":"eval"},{"alts":[["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))","next",0.0234375]],"compiler":[[12,8],[12,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0234375],"time":0.85498046875,"type":"prune"},{"compiler":[[27,11]],"locations":[["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))",0.0078125,true]],"time":5.35400390625,"type":"localize"},{"count":[[1,36]],"series":[["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))","z","-inf",0.218994140625],["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))","z","inf",0.2529296875],["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))","z","0",0.268798828125],["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))","y","-inf",0.36181640625],["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))","y","inf",0.326171875],["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))","y","0",0.2841796875],["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))","x","-inf",0.326171875],["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))","x","inf",0.389892578125],["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))","x","0",0.4150390625]],"time":2.97607421875,"type":"series"},{"count":[[1,63]],"inputs":[["(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 z x) (*.f64 (+.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2 (+.f64 x y) x) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (fma.f64 2 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 z x) (+.f64 y y)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 z x) (+.f64 x x)) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (+.f64 (+.f64 y y) (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y y) (+.f64 (+.f64 x x) (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x)) 0) (fma.f64 (+.f64 x y) 2 (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x)) (*.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2 (+.f64 x y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 2 (+.f64 x y) x) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (+.f64 x y) 2 (+.f64 z x))) (fma.f64 (+.f64 x y) 2 (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x)) (*.f64 0 (fma.f64 (+.f64 x y) 2 (+.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 2 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 (fma.f64 2 (+.f64 x y) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x))) (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 2) 2)) (-.f64 (cbrt.f64 (pow.f64 (+.f64 z x) 2)) (cbrt.f64 (*.f64 2 (*.f64 (+.f64 x y) (+.f64 z x)))))) (+.f64 (cbrt.f64 (*.f64 (+.f64 x y) 2)) (cbrt.f64 (+.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 z x) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 2) 2)) (cbrt.f64 (*.f64 2 (*.f64 (+.f64 x y) (+.f64 z x)))))) (+.f64 (cbrt.f64 (+.f64 z x)) (cbrt.f64 (*.f64 (+.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x)) 2)) (cbrt.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 x y) 2 (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 x y) 2 (+.f64 z x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x y) 2)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 2) 2)) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 z x)) (cbrt.f64 (pow.f64 (+.f64 z x) 2)) (*.f64 (+.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x y) 2 (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (+.f64 x y) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (fma.f64 2 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (fma.f64 2 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (fma.f64 2 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 2 (+.f64 x y) z)) (cbrt.f64 (pow.f64 (fma.f64 2 (+.f64 x y) z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (+.f64 z x)) (*.f64 (+.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 z x) 2)) (cbrt.f64 (+.f64 z x)) (*.f64 (+.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 z z)) (fma.f64 2 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 z) (fma.f64 2 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 z) (fma.f64 2 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 2) 2)) (cbrt.f64 (*.f64 (+.f64 x y) 2)) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (+.f64 x y)) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) 2) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x y) (cbrt.f64 2)) (cbrt.f64 4) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x y) (sqrt.f64 2)) (sqrt.f64 2) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (+.f64 x y) -2) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2) (*.f64 (+.f64 x y) (sqrt.f64 2)) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 8 (+.f64 x y))) (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x y) 2) (+.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 z x) (*.f64 (+.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (fma.f64 2 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (fma.f64 2 (+.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 2 (+.f64 x y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 2 (+.f64 x y) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z x) 1 (*.f64 (+.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 z (fma.f64 2 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z 1 (fma.f64 2 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x y) 2) 1 (+.f64 z x))))))"]],"rules":[["egg-rr",63]],"time":21.654052734375,"type":"rewrite"},{"count":[[99,79]],"inputs":[["(+.f64 (*.f64 2 y) z)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 2 x) (+.f64 z x))","(+.f64 (*.f64 2 y) (+.f64 (*.f64 2 x) (+.f64 z x)))","(+.f64 (*.f64 2 y) (+.f64 (*.f64 2 x) (+.f64 z x)))","(+.f64 (*.f64 2 y) (+.f64 (*.f64 2 x) (+.f64 z x)))","(*.f64 2 y)","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(*.f64 2 y)","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(+.f64 (*.f64 2 (+.f64 y x)) x)","(+.f64 z (+.f64 (*.f64 2 (+.f64 y x)) x))","(+.f64 z (+.f64 (*.f64 2 (+.f64 y x)) x))","(+.f64 z (+.f64 (*.f64 2 (+.f64 y x)) x))","z","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))","z","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 2 y) z)","(fma.f64 2 y z)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 2 x) (+.f64 z x))","(fma.f64 2 x (+.f64 z x))","(+.f64 (*.f64 2 y) (+.f64 (*.f64 2 x) (+.f64 z x)))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 (*.f64 2 y) (+.f64 (*.f64 2 x) (+.f64 z x)))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 (*.f64 2 y) (+.f64 (*.f64 2 x) (+.f64 z x)))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(*.f64 2 y)","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(*.f64 2 y)","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 2 y) (+.f64 z x)))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 (*.f64 2 (+.f64 y x)) x)","(fma.f64 2 (+.f64 y x) x)","(+.f64 z (+.f64 (*.f64 2 (+.f64 y x)) x))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 z (+.f64 (*.f64 2 (+.f64 y x)) x))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 z (+.f64 (*.f64 2 (+.f64 y x)) x))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","z","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","z","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))","(fma.f64 2 (+.f64 y x) (+.f64 z x))","(+.f64 (*.f64 2 (+.f64 y x)) (+.f64 z x))","(fma.f64 2 (+.f64 y x) (+.f64 z x))"]],"time":123.949951171875,"type":"simplify"},{"compiler":[[918,396]],"time":11.281982421875,"type":"eval"},{"alts":[["(fma.f64 3 x (fma.f64 2 y z))","next",0]],"compiler":[[10,7],[10,7]],"count":[[80,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[79,1],"picked":[1,0]}],"min-error":[0],"time":16.27294921875,"type":"prune"},{"compiler":[[19,11]],"locations":[["(fma.f64 3 x (fma.f64 2 y z))",0.015625,true]],"time":5.260009765625,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 3 x (fma.f64 2 y z))","z","-inf",0.216064453125],["(fma.f64 3 x (fma.f64 2 y z))","z","inf",0.18603515625],["(fma.f64 3 x (fma.f64 2 y z))","z","0",0.23095703125],["(fma.f64 3 x (fma.f64 2 y z))","y","-inf",0.510986328125],["(fma.f64 3 x (fma.f64 2 y z))","y","inf",0.22900390625],["(fma.f64 3 x (fma.f64 2 y z))","y","0",0.31201171875],["(fma.f64 3 x (fma.f64 2 y z))","x","-inf",0.305908203125],["(fma.f64 3 x (fma.f64 2 y z))","x","inf",0.243896484375],["(fma.f64 3 x (fma.f64 2 y z))","x","0",0.343017578125]],"time":2.700927734375,"type":"series"},{"count":[[1,45]],"inputs":[["(fma.f64 3 x (fma.f64 2 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 3 x (+.f64 y y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 x) (fma.f64 2 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 2 y z) (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (fma.f64 3 x (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 3 x) z) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y y) (+.f64 (*.f64 3 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (fma.f64 3 x (+.f64 y y)) -1)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (fma.f64 3 x (+.f64 y y)))) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 3 (fma.f64 2 y z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x 3 (fma.f64 2 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 3 x (+.f64 y y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 3 x) (-.f64 (*.f64 -2 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 2 y z) (*.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 3 x) z) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 -3 x) (fma.f64 2 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 3 (fma.f64 2 y z))) (pow.f64 (fma.f64 x 3 (fma.f64 2 y z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x 3 (fma.f64 2 y z)) 2/3) (cbrt.f64 (fma.f64 x 3 (fma.f64 2 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 -3 x) (fma.f64 2 y z))) (neg.f64 (pow.f64 (fma.f64 x 3 (fma.f64 2 y z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 2 y z) 2/3) (-.f64 (pow.f64 (*.f64 3 x) 2/3) (*.f64 (cbrt.f64 (fma.f64 2 y z)) (cbrt.f64 (*.f64 3 x))))) (+.f64 (cbrt.f64 (fma.f64 2 y z)) (cbrt.f64 (*.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 3 x) 2/3) (-.f64 (pow.f64 (fma.f64 2 y z) 2/3) (*.f64 (cbrt.f64 (*.f64 3 x)) (cbrt.f64 (fma.f64 2 y z))))) (+.f64 (cbrt.f64 (*.f64 3 x)) (cbrt.f64 (fma.f64 2 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 -3 x) (fma.f64 2 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 -3 x) (fma.f64 2 y z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 3 (fma.f64 2 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 3 (fma.f64 2 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x 3 (fma.f64 2 y z)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x 3 (fma.f64 2 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -3 x) (fma.f64 2 y z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 3 (fma.f64 2 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 3 (fma.f64 2 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 3 (fma.f64 2 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 -3 x) (fma.f64 2 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 3 (fma.f64 2 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 2 y z)) (pow.f64 (fma.f64 2 y z) 2/3) (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 2 y z) 2/3) (cbrt.f64 (fma.f64 2 y z)) (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) x) (fma.f64 2 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 27 x)) (pow.f64 x 2/3) (fma.f64 2 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) (*.f64 (sqrt.f64 3) x) (fma.f64 2 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 3 x)) (pow.f64 (*.f64 3 x) 2/3) (fma.f64 2 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 x (fma.f64 2 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 (*.f64 -2 y) z) (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 3 (fma.f64 2 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 2 y z) 1 (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 2 y z) (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 3 x) 1 (fma.f64 2 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 3 x) (fma.f64 2 y z))))))"]],"rules":[["egg-rr",45]],"time":35.197021484375,"type":"rewrite"},{"count":[[81,56]],"inputs":[["(+.f64 (*.f64 2 y) z)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) z)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(*.f64 2 y)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(*.f64 2 y)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (*.f64 2 y))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","z","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","z","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 2 y) z)","(fma.f64 2 y z)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) z)","(fma.f64 3 x z)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(*.f64 2 y)","(+.f64 y y)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(*.f64 2 y)","(+.f64 y y)","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (*.f64 2 y))","(fma.f64 3 x (+.f64 y y))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","z","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","z","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 3 x) (+.f64 (*.f64 2 y) z))","(fma.f64 3 x (fma.f64 2 y z))"]],"time":112.5361328125,"type":"simplify"},{"compiler":[[566,368]],"time":9.385986328125,"type":"eval"},{"alts":[["(fma.f64 3 x (fma.f64 2 y z))","done",0]],"compiler":[[10,7]],"count":[[57,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[56,0],"picked":[1,1]}],"min-error":[0],"time":9.160888671875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["z",0,1],["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 x y) y) x) z) x)",0,1]],"compiler":[[4,3],[4,3],[4,3],[14,8],[30,16]],"count":[[3,1]],"inputs":[["(fma.f64 3 x (fma.f64 2 y z))","(+.f64 (*.f64 (+.f64 x y) 2) (+.f64 z x))","(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 x y) y) x) z) x)"]],"link":["."],"name":["Graphics.Rendering.Plot.Render.Plot.Legend:renderLegendInside from plot-0.2.3.4"],"oracle":[0.0234375],"outputs":[["(fma.f64 3 x (fma.f64 2 y z))"]],"time":11.115966796875,"times":[["x",2.52001953125],["y",2.5439453125],["z",2.52099609375],["(+.f64 (+.f64 (+.f64 (+.f64 (+.f64 x y) y) x) z) x)",2.763916015625]],"type":"regimes"},{"compiler":[[10,7]],"inputs":[["(fma.f64 3 x (fma.f64 2 y z))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 3 x (fma.f64 2 y z))","(fma.f64 x 3 (fma.f64 2 y z))"]],"stop":[["done",1]],"time":33.47216796875,"type":"simplify"},{"time":0.015869140625,"type":"soundness"},{"compiler":[[10,7]],"remove-preprocessing":[[]],"time":8.568115234375,"type":"end"}]
[{"compiler":[[26,20]],"method":["search"],"sampling":[[12,0.0,0.7478054148384244,0.25219458516157556],[11,0.0,0.7478054148384244,0.25219458516157556],[10,0.0,0.7478054148384244,0.25219458516157556],[9,0.0,0.7478054148384244,0.25219458516157556],[8,0.0,0.7478054148384244,0.25219458516157556],[7,0.0,0.9970738864512326,0.002926113548767373],[6,0.0,0.9970738864512326,0.002926113548767373],[5,0.0,0.9970738864512326,0.002926113548767373],[4,0.0,0.9970738864512326,0.002926113548767373],[3,0.0,0.9970738864512326,0.002926113548767373],[2,0.0,0.9970738864512326,0.002926113548767373],[1,0.0,0.9970738864512326,0.002926113548767373],[0,0.0,0.9970738864512326,0.002926113548767373]],"time":220.5009765625,"type":"analyze"},{"outcomes":[["body",256,"invalid",472.310302734375,5794],["body",4096,"valid",0.91796875,1],["body",512,"valid",122.421142578125,733],["body",1024,"valid",433.958984375,1641],["body",2048,"valid",341.471435546875,795],["body",256,"valid",435.218017578125,5086]],"time":1820.845947265625,"type":"sample"},{"compiler":[[25,19]],"inputs":[["0","1","2","3","4","5"],["(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 y)) (cos.f64 (-.f64 x (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 z)) (cos.f64 (-.f64 y (/.f64 (*.f64 x t) 3)))) (/.f64 a (*.f64 b 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 t)) (cos.f64 (-.f64 y (/.f64 (*.f64 z x) 3)))) (/.f64 a (*.f64 b 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 a)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 x (*.f64 b 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 b)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 x 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 z (/.f64 (*.f64 y t) 3)))) (/.f64 a (*.f64 b 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 t (/.f64 (*.f64 z y) 3)))) (/.f64 a (*.f64 b 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 a (/.f64 (*.f64 z t) 3)))) (/.f64 y (*.f64 b 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 b (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 y 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 t z) 3)))) (/.f64 a (*.f64 b 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 a t) 3)))) (/.f64 z (*.f64 b 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 b t) 3)))) (/.f64 a (*.f64 z 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z a) 3)))) (/.f64 t (*.f64 b 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z b) 3)))) (/.f64 a (*.f64 t 3)))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 b (*.f64 a 3)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3","4","5"],["(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))","(fma.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (fma.f64 (*.f64 z t) 1/3 (neg.f64 y))) (neg.f64 (/.f64 a (*.f64 b 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 y)) (cos.f64 (-.f64 x (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))","(fma.f64 (*.f64 2 (sqrt.f64 y)) (cos.f64 (fma.f64 (*.f64 z t) 1/3 (neg.f64 x))) (neg.f64 (/.f64 a (*.f64 b 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 z)) (cos.f64 (-.f64 y (/.f64 (*.f64 x t) 3)))) (/.f64 a (*.f64 b 3)))","(fma.f64 (*.f64 2 (sqrt.f64 z)) (cos.f64 (fma.f64 (*.f64 x t) 1/3 (neg.f64 y))) (neg.f64 (/.f64 a (*.f64 b 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 t)) (cos.f64 (-.f64 y (/.f64 (*.f64 z x) 3)))) (/.f64 a (*.f64 b 3)))","(fma.f64 (*.f64 2 (sqrt.f64 t)) (cos.f64 (fma.f64 (*.f64 z x) 1/3 (neg.f64 y))) (neg.f64 (/.f64 a (*.f64 b 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 a)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 x (*.f64 b 3)))","(fma.f64 (*.f64 2 (sqrt.f64 a)) (cos.f64 (fma.f64 (*.f64 z t) 1/3 (neg.f64 y))) (neg.f64 (/.f64 x (*.f64 b 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 b)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 x 3)))","(fma.f64 (*.f64 2 (sqrt.f64 b)) (cos.f64 (fma.f64 (*.f64 z t) 1/3 (neg.f64 y))) (neg.f64 (/.f64 a (*.f64 x 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 z (/.f64 (*.f64 y t) 3)))) (/.f64 a (*.f64 b 3)))","(fma.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (fma.f64 (*.f64 y t) 1/3 (neg.f64 z))) (neg.f64 (/.f64 a (*.f64 b 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 t (/.f64 (*.f64 z y) 3)))) (/.f64 a (*.f64 b 3)))","(fma.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (fma.f64 (*.f64 z y) 1/3 (neg.f64 t))) (neg.f64 (/.f64 a (*.f64 b 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 a (/.f64 (*.f64 z t) 3)))) (/.f64 y (*.f64 b 3)))","(fma.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (fma.f64 (*.f64 z t) 1/3 (neg.f64 a))) (neg.f64 (/.f64 y (*.f64 b 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 b (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 y 3)))","(fma.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (fma.f64 (*.f64 z t) 1/3 (neg.f64 b))) (neg.f64 (/.f64 a (*.f64 y 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 t z) 3)))) (/.f64 a (*.f64 b 3)))","(fma.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (fma.f64 (*.f64 z t) 1/3 (neg.f64 y))) (neg.f64 (/.f64 a (*.f64 b 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 a t) 3)))) (/.f64 z (*.f64 b 3)))","(fma.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (fma.f64 (*.f64 a t) 1/3 (neg.f64 y))) (neg.f64 (/.f64 z (*.f64 b 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 b t) 3)))) (/.f64 a (*.f64 z 3)))","(fma.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (fma.f64 (*.f64 b t) 1/3 (neg.f64 y))) (neg.f64 (/.f64 a (*.f64 z 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z a) 3)))) (/.f64 t (*.f64 b 3)))","(fma.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (fma.f64 (*.f64 z a) 1/3 (neg.f64 y))) (neg.f64 (/.f64 t (*.f64 b 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z b) 3)))) (/.f64 a (*.f64 t 3)))","(fma.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (fma.f64 (*.f64 z b) 1/3 (neg.f64 y))) (neg.f64 (/.f64 a (*.f64 t 3))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 b (*.f64 a 3)))","(fma.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (fma.f64 (*.f64 z t) 1/3 (neg.f64 y))) (neg.f64 (/.f64 b (*.f64 a 3))))"]],"symmetry":[[]],"time":111.531005859375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))"]],"time":26.882080078125,"type":"simplify"},{"compiler":[[42,29]],"time":0.72900390625,"type":"eval"},{"alts":[["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","next",21.350939204168807],["(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))","fresh",21.645893871756734]],"compiler":[[23,17],[25,19],[23,17],[25,19]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[21.15071532872626],"time":3.059814453125,"type":"prune"},{"compiler":[[69,38]],"locations":[["(fma.f64 (*.f64 z t) -1/3 y)",0.15234375,true],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))",0.296875,true],["(/.f64 -1/3 b)",0.39453125,true],["(cos.f64 (fma.f64 (*.f64 z t) -1/3 y))",25.571595399301756,true]],"time":24.1201171875,"type":"localize"},{"count":[[4,108]],"series":[["(fma.f64 (*.f64 z t) -1/3 y)","y","-inf",0.22998046875],["(fma.f64 (*.f64 z t) -1/3 y)","y","inf",0.248779296875],["(fma.f64 (*.f64 z t) -1/3 y)","y","0",0.23291015625],["(fma.f64 (*.f64 z t) -1/3 y)","t","-inf",0.278076171875],["(fma.f64 (*.f64 z t) -1/3 y)","t","inf",0.290771484375],["(fma.f64 (*.f64 z t) -1/3 y)","t","0",0.263916015625],["(fma.f64 (*.f64 z t) -1/3 y)","z","-inf",0.298095703125],["(fma.f64 (*.f64 z t) -1/3 y)","z","inf",0.294189453125],["(fma.f64 (*.f64 z t) -1/3 y)","z","0",0.261962890625],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","y","-inf",0.43994140625],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","y","inf",0.47802734375],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","y","0",0.598876953125],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","t","-inf",0.912109375],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","t","inf",0.474853515625],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","t","0",0.39599609375],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","z","-inf",0.447021484375],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","z","inf",0.55810546875],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","z","0",0.48291015625],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","x","-inf",0.617919921875],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","x","inf",0.486083984375],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","x","0",1.35302734375],["(/.f64 -1/3 b)","b","-inf",0.264892578125],["(/.f64 -1/3 b)","b","inf",0.260986328125],["(/.f64 -1/3 b)","b","0",0.31005859375],["(cos.f64 (fma.f64 (*.f64 z t) -1/3 y))","y","-inf",0.181884765625],["(cos.f64 (fma.f64 (*.f64 z t) -1/3 y))","y","inf",0.198974609375],["(cos.f64 (fma.f64 (*.f64 z t) -1/3 y))","y","0",0.47705078125],["(cos.f64 (fma.f64 (*.f64 z t) -1/3 y))","t","-inf",0.196044921875],["(cos.f64 (fma.f64 (*.f64 z t) -1/3 y))","t","inf",0.214111328125],["(cos.f64 (fma.f64 (*.f64 z t) -1/3 y))","t","0",0.466064453125],["(cos.f64 (fma.f64 (*.f64 z t) -1/3 y))","z","-inf",0.22119140625],["(cos.f64 (fma.f64 (*.f64 z t) -1/3 y))","z","inf",0.200927734375],["(cos.f64 (fma.f64 (*.f64 z t) -1/3 y))","z","0",0.671142578125]],"time":13.7890625,"type":"series"},{"count":[[4,155]],"inputs":[["(cos.f64 (fma.f64 (*.f64 z t) -1/3 y))","(/.f64 -1/3 b)","(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))","(fma.f64 (*.f64 z t) -1/3 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 0) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 1/2) (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) (*.f64 1/2 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (*.f64 0 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 (*.f64 z t) -1/3)) (cos.f64 y)) (*.f64 (neg.f64 (sin.f64 (*.f64 (*.f64 z t) -1/3))) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 (*.f64 z t) -1/3)) (cos.f64 y)) (neg.f64 (*.f64 (sin.f64 (*.f64 (*.f64 z t) -1/3)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 (*.f64 (*.f64 z t) -1/3)) (cos.f64 y)) (*.f64 (sin.f64 (*.f64 (*.f64 z t) -1/3)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)) (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (sin.f64 (*.f64 (*.f64 z t) -1/3)) (sin.f64 y)) (*.f64 (cos.f64 (*.f64 (*.f64 z t) -1/3)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 (*.f64 (*.f64 z t) -1/3)) (cos.f64 y) (neg.f64 (*.f64 (sin.f64 (*.f64 (*.f64 z t) -1/3)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1/3 b) 0) (/.f64 -1/3 b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1/3 b) 1/2) (*.f64 (/.f64 -1/3 b) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/3 b) (*.f64 (/.f64 -1/3 b) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 -1/3 b)) (/.f64 -1/3 b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 -1/3 b)) (*.f64 1/2 (/.f64 -1/3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/3 b) (*.f64 0 (/.f64 -1/3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1/3 b))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 b)) (/.f64 1/3 b))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1/3 b) (/.f64 0 (/.f64 b -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (/.f64 b -1/3)) (/.f64 1/3 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/3) (/.f64 (cbrt.f64 1/9) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1/3 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/3 b)) (cbrt.f64 (/.f64 1/9 (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 (*.f64 b b))) (cbrt.f64 (/.f64 -1/3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 1 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 b) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b -1/3) (cbrt.f64 (/.f64 -1/27 (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 -1 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1/3 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/3 b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 1/9) b) (cbrt.f64 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 b) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/27 (*.f64 b b))) (pow.f64 b -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 b) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/27 b)) (pow.f64 (cbrt.f64 b) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 -1/27 b)) (pow.f64 (cbrt.f64 (cbrt.f64 b)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 b)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 b 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (/.f64 b -1/3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 b) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 b -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1/27 b)) (cbrt.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/3 b)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/3 (neg.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 b -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/9 (*.f64 b b))) (cbrt.f64 -1/3)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/9 (*.f64 b b))) (cbrt.f64 1/3)) (cbrt.f64 (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1/3 b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1/3 b)) (cbrt.f64 1/9)) (cbrt.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 b -1/3) -1/3) (cbrt.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/3) (cbrt.f64 (/.f64 1/9 (*.f64 b b)))) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/3) (cbrt.f64 (/.f64 1/9 (*.f64 b b)))) (cbrt.f64 (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 b) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1/27 b)) 1) (cbrt.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1/27 (*.f64 b b))) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1/3 -1) (neg.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 -1/27 b)) 1) (cbrt.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/3 (cbrt.f64 b)) (neg.f64 (cbrt.f64 (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (/.f64 b -1/3) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 3 (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 -1/27 b))) (neg.f64 (cbrt.f64 (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 b -1/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1/3 b)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1/3 b)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1/3 b)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -1/3 b) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1/3 b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1/3 b))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1/3 b) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1/3 (/.f64 1 b)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 b) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -1/3 b) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 0) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 1/2) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))) (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2) (*.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2) (*.f64 x 4))) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cbrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)) (sqrt.f64 (*.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) (cbrt.f64 (sqrt.f64 (*.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)) (sqrt.f64 (*.f64 x 4))) (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (sqrt.f64 (*.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (sqrt.f64 (sqrt.f64 (*.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (cbrt.f64 (sqrt.f64 (*.f64 x 4)))) (cbrt.f64 (*.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (sqrt.f64 (sqrt.f64 (*.f64 x 4)))) (sqrt.f64 (sqrt.f64 (*.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))) (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 4)) (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (cbrt.f64 (sqrt.f64 (*.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 z t) -1/3 y) 0) (fma.f64 (*.f64 z t) -1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (*.f64 z t) -1/3 y) 1/2) (*.f64 (fma.f64 (*.f64 z t) -1/3 y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z t) -1/3 y) (*.f64 (fma.f64 (*.f64 z t) -1/3 y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (*.f64 z t) -1/3 y)) (fma.f64 (*.f64 z t) -1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (*.f64 z t) -1/3 y)) (*.f64 1/2 (fma.f64 (*.f64 z t) -1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 z t) -1/3 y) (*.f64 0 (fma.f64 (*.f64 z t) -1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z t) -1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (*.f64 z t) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (*.f64 z t) -1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (*.f64 z t) -1/3 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 z t) -1/3 y)) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 z t) -1/3 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 z t) -1/3 y) 2)) (cbrt.f64 (fma.f64 (*.f64 z t) -1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 z t) -1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 z t) -1/3 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 z t) -1/3 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 z t) -1/3 y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 z t) -1/3 y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 z t) -1/3 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 z t) -1/3 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 z t) -1/3 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (*.f64 z t) -1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 z t) -1/3 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z t) -1/3 y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 y) (*.f64 (*.f64 z t) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (*.f64 (*.f64 z t) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (*.f64 (*.f64 z t) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 z t) -1/3)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 z t) -1/3) 2)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/3 (*.f64 z t) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z t)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 z t) 2)) -1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z t) (cbrt.f64 -1/3)) (cbrt.f64 1/9) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 t -1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (*.f64 z -1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (*.f64 (*.f64 z t) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (*.f64 (*.f64 z t) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 z t) -1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z t) -1/3) 1 y)))))"]],"rules":[["egg-rr",36],["egg-rr",32],["egg-rr",61],["egg-rr",26]],"time":34.760986328125,"type":"rewrite"},{"count":[[263,194]],"inputs":[["(cos.f64 y)","(+.f64 (cos.f64 y) (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y)))))","(+.f64 (*.f64 -1/18 (*.f64 (pow.f64 t 2) (*.f64 (cos.f64 y) (pow.f64 z 2)))) (+.f64 (cos.f64 y) (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y))))))","(+.f64 (*.f64 -1/162 (*.f64 (pow.f64 t 3) (*.f64 (pow.f64 z 3) (sin.f64 y)))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 t 2) (*.f64 (cos.f64 y) (pow.f64 z 2)))) (+.f64 (cos.f64 y) (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y)))))))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 y)","(+.f64 (cos.f64 y) (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y)))))","(+.f64 (cos.f64 y) (+.f64 (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y)))) (*.f64 -1/18 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))))))","(+.f64 (*.f64 -1/162 (*.f64 (pow.f64 t 3) (*.f64 (pow.f64 z 3) (sin.f64 y)))) (+.f64 (cos.f64 y) (+.f64 (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y)))) (*.f64 -1/18 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y)))))))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (*.f64 -1/3 (*.f64 t z)))","(+.f64 (*.f64 -1 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z))))) (cos.f64 (*.f64 -1/3 (*.f64 t z))))","(+.f64 (*.f64 -1 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z))))) (+.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (*.f64 -1/2 (*.f64 (pow.f64 y 2) (cos.f64 (*.f64 -1/3 (*.f64 t z)))))))","(+.f64 (*.f64 -1 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z))))) (+.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) (sin.f64 (*.f64 -1/3 (*.f64 t z))))) (*.f64 -1/2 (*.f64 (pow.f64 y 2) (cos.f64 (*.f64 -1/3 (*.f64 t z))))))))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x)))))","(+.f64 (*.f64 -1/81 (*.f64 (*.f64 (pow.f64 t 3) (*.f64 (pow.f64 z 3) (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x))))))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x)))))","(+.f64 (*.f64 -1/81 (*.f64 (*.f64 (pow.f64 t 3) (*.f64 (pow.f64 z 3) (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x))))))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (sqrt.f64 x)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (sqrt.f64 x))) (*.f64 -2 (*.f64 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z)))) (sqrt.f64 x))))","(+.f64 (*.f64 -1 (*.f64 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (pow.f64 y 2)) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (sqrt.f64 x))) (*.f64 -2 (*.f64 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z)))) (sqrt.f64 x)))))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (pow.f64 y 3) (sin.f64 (*.f64 -1/3 (*.f64 t z)))) (sqrt.f64 x))) (+.f64 (*.f64 -1 (*.f64 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (pow.f64 y 2)) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (sqrt.f64 x))) (*.f64 -2 (*.f64 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z)))) (sqrt.f64 x))))))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","y","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(*.f64 -1/3 (*.f64 t z))","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(*.f64 -1/3 (*.f64 t z))","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","y","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(*.f64 -1/3 (*.f64 t z))","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(*.f64 -1/3 (*.f64 t z))","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(*.f64 -1/3 (*.f64 t z))","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","y","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","y","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)"]],"method":["egg-herbie"],"outputs":[["(cos.f64 y)","(+.f64 (cos.f64 y) (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y)))))","(fma.f64 1/3 (*.f64 (*.f64 t z) (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1/18 (*.f64 (pow.f64 t 2) (*.f64 (cos.f64 y) (pow.f64 z 2)))) (+.f64 (cos.f64 y) (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y))))))","(fma.f64 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y)) -1/18 (fma.f64 1/3 (*.f64 (*.f64 t z) (sin.f64 y)) (cos.f64 y)))","(+.f64 (*.f64 -1/162 (*.f64 (pow.f64 t 3) (*.f64 (pow.f64 z 3) (sin.f64 y)))) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 t 2) (*.f64 (cos.f64 y) (pow.f64 z 2)))) (+.f64 (cos.f64 y) (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y)))))))","(fma.f64 -1/162 (*.f64 (pow.f64 (*.f64 t z) 3) (sin.f64 y)) (fma.f64 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y)) -1/18 (fma.f64 1/3 (*.f64 (*.f64 t z) (sin.f64 y)) (cos.f64 y))))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 y)","(+.f64 (cos.f64 y) (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y)))))","(fma.f64 1/3 (*.f64 (*.f64 t z) (sin.f64 y)) (cos.f64 y))","(+.f64 (cos.f64 y) (+.f64 (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y)))) (*.f64 -1/18 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))))))","(fma.f64 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y)) -1/18 (fma.f64 1/3 (*.f64 (*.f64 t z) (sin.f64 y)) (cos.f64 y)))","(+.f64 (*.f64 -1/162 (*.f64 (pow.f64 t 3) (*.f64 (pow.f64 z 3) (sin.f64 y)))) (+.f64 (cos.f64 y) (+.f64 (*.f64 1/3 (*.f64 t (*.f64 z (sin.f64 y)))) (*.f64 -1/18 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y)))))))","(fma.f64 -1/162 (*.f64 (pow.f64 (*.f64 t z) 3) (sin.f64 y)) (fma.f64 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y)) -1/18 (fma.f64 1/3 (*.f64 (*.f64 t z) (sin.f64 y)) (cos.f64 y))))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (*.f64 -1/3 (*.f64 t z)))","(cos.f64 (*.f64 (*.f64 -1/3 t) z))","(+.f64 (*.f64 -1 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z))))) (cos.f64 (*.f64 -1/3 (*.f64 t z))))","(fma.f64 (neg.f64 y) (sin.f64 (*.f64 (*.f64 -1/3 t) z)) (cos.f64 (*.f64 (*.f64 -1/3 t) z)))","(+.f64 (*.f64 -1 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z))))) (+.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (*.f64 -1/2 (*.f64 (pow.f64 y 2) (cos.f64 (*.f64 -1/3 (*.f64 t z)))))))","(fma.f64 (neg.f64 y) (sin.f64 (*.f64 (*.f64 -1/3 t) z)) (*.f64 (cos.f64 (*.f64 (*.f64 -1/3 t) z)) (+.f64 (*.f64 -1/2 (*.f64 y y)) 1)))","(+.f64 (*.f64 -1 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z))))) (+.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) (sin.f64 (*.f64 -1/3 (*.f64 t z))))) (*.f64 -1/2 (*.f64 (pow.f64 y 2) (cos.f64 (*.f64 -1/3 (*.f64 t z))))))))","(+.f64 (fma.f64 (neg.f64 y) (sin.f64 (*.f64 (*.f64 -1/3 t) z)) (*.f64 (cos.f64 (*.f64 (*.f64 -1/3 t) z)) (+.f64 (*.f64 -1/2 (*.f64 y y)) 1))) (*.f64 1/6 (*.f64 (pow.f64 y 3) (sin.f64 (*.f64 (*.f64 -1/3 t) z)))))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(cos.f64 (fma.f64 (*.f64 t z) -1/3 y))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t z) (sin.f64 y))) (*.f64 2 (cos.f64 y))))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x)))))","(fma.f64 2/3 (*.f64 (*.f64 (*.f64 t z) (sin.f64 y)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y))) (*.f64 2 (cos.f64 y)))))","(+.f64 (*.f64 -1/81 (*.f64 (*.f64 (pow.f64 t 3) (*.f64 (pow.f64 z 3) (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x))))))","(+.f64 (*.f64 (sqrt.f64 x) (+.f64 (*.f64 (*.f64 (pow.f64 (*.f64 t z) 3) (sin.f64 y)) -1/81) (*.f64 2/3 (*.f64 (*.f64 t z) (sin.f64 y))))) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y))) (*.f64 2 (cos.f64 y)))))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t z) (sin.f64 y))) (*.f64 2 (cos.f64 y))))","(+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x)))))","(fma.f64 2/3 (*.f64 (*.f64 (*.f64 t z) (sin.f64 y)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y))) (*.f64 2 (cos.f64 y)))))","(+.f64 (*.f64 -1/81 (*.f64 (*.f64 (pow.f64 t 3) (*.f64 (pow.f64 z 3) (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x))))))","(+.f64 (*.f64 (sqrt.f64 x) (+.f64 (*.f64 (*.f64 (pow.f64 (*.f64 t z) 3) (sin.f64 y)) -1/81) (*.f64 2/3 (*.f64 (*.f64 t z) (sin.f64 y))))) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y))) (*.f64 2 (cos.f64 y)))))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (*.f64 (*.f64 -1/3 t) z)) (sqrt.f64 x)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (sqrt.f64 x))) (*.f64 -2 (*.f64 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z)))) (sqrt.f64 x))))","(*.f64 (sqrt.f64 x) (+.f64 (*.f64 2 (cos.f64 (*.f64 (*.f64 -1/3 t) z))) (*.f64 -2 (*.f64 y (sin.f64 (*.f64 (*.f64 -1/3 t) z))))))","(+.f64 (*.f64 -1 (*.f64 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (pow.f64 y 2)) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (sqrt.f64 x))) (*.f64 -2 (*.f64 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z)))) (sqrt.f64 x)))))","(fma.f64 (neg.f64 (*.f64 (*.f64 y y) (cos.f64 (*.f64 (*.f64 -1/3 t) z)))) (sqrt.f64 x) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 2 (cos.f64 (*.f64 (*.f64 -1/3 t) z))) (*.f64 -2 (*.f64 y (sin.f64 (*.f64 (*.f64 -1/3 t) z)))))))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (pow.f64 y 3) (sin.f64 (*.f64 -1/3 (*.f64 t z)))) (sqrt.f64 x))) (+.f64 (*.f64 -1 (*.f64 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (pow.f64 y 2)) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 (*.f64 -1/3 (*.f64 t z))) (sqrt.f64 x))) (*.f64 -2 (*.f64 (*.f64 y (sin.f64 (*.f64 -1/3 (*.f64 t z)))) (sqrt.f64 x))))))","(+.f64 (*.f64 (sqrt.f64 x) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 y 3) (sin.f64 (*.f64 (*.f64 -1/3 t) z)))) (neg.f64 (*.f64 (*.f64 y y) (cos.f64 (*.f64 (*.f64 -1/3 t) z)))))) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 2 (cos.f64 (*.f64 (*.f64 -1/3 t) z))) (*.f64 -2 (*.f64 y (sin.f64 (*.f64 (*.f64 -1/3 t) z)))))))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 (fma.f64 (*.f64 t z) -1/3 y)) (sqrt.f64 x)))","y","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(*.f64 -1/3 (*.f64 t z))","(*.f64 (*.f64 -1/3 t) z)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(*.f64 -1/3 (*.f64 t z))","(*.f64 (*.f64 -1/3 t) z)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","y","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(*.f64 -1/3 (*.f64 t z))","(*.f64 (*.f64 -1/3 t) z)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(*.f64 -1/3 (*.f64 t z))","(*.f64 (*.f64 -1/3 t) z)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(*.f64 -1/3 (*.f64 t z))","(*.f64 (*.f64 -1/3 t) z)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","y","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","y","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)","(+.f64 (*.f64 -1/3 (*.f64 t z)) y)","(fma.f64 (*.f64 t z) -1/3 y)"]],"time":318.9228515625,"type":"simplify"},{"compiler":[[4713,2883]],"time":54.75,"type":"eval"},{"alts":[["(fma.f64 a (*.f64 (cbrt.f64 (/.f64 1/9 (*.f64 b b))) (cbrt.f64 (/.f64 -1/3 b))) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","fresh",33.19700452674274],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (sqrt.f64 (sqrt.f64 (*.f64 x 4))))))","fresh",21.469454243242577],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (*.f64 (*.f64 -1/3 t) z))))","fresh",31.384090206785473],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 (*.f64 z t) (cbrt.f64 -1/3)) (cbrt.f64 1/9) y))))","fresh",21.44581938840214],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)) (sqrt.f64 (*.f64 x 4))) (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))","fresh",21.39619296393725],["(fma.f64 a (/.f64 -1/3 b) (pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 3) 1/3))","fresh",42.44011004150442],["(fma.f64 a (/.f64 (/.f64 -1 b) 3) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","fresh",21.348654194365178],["(fma.f64 a (/.f64 -1/3 b) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x))))))","fresh",33.93690072188897],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))","fresh",21.39619296393725],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (fma.f64 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y)) -1/18 (fma.f64 1/3 (*.f64 (*.f64 t z) (sin.f64 y)) (cos.f64 y)))))","fresh",29.4054663902641],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (*.f64 x 4)) (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (cbrt.f64 (sqrt.f64 (*.f64 x 4))))))","fresh",21.43134921393725],["(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))","fresh",21.645893871756734],["(fma.f64 a (/.f64 -1/3 b) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))))","fresh",24.98070649512753],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (-.f64 (*.f64 (cos.f64 (*.f64 (*.f64 z t) -1/3)) (cos.f64 y)) (*.f64 (sin.f64 (*.f64 (*.f64 z t) -1/3)) (sin.f64 y)))))","fresh",21.305180090952703],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 z t) -1/3 y)) 3))))","fresh",27.822471323667187],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 t (*.f64 z -1/3) y))))","fresh",21.42403265020133],["(fma.f64 a (*.f64 (cbrt.f64 (/.f64 -1/27 b)) (pow.f64 (cbrt.f64 b) -2)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","fresh",21.455156782316383],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cbrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))","fresh",21.41444462542933],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","next",18.54635343579708],["(fma.f64 a (*.f64 (pow.f64 b -1/3) (cbrt.f64 (/.f64 -1/27 (*.f64 b b)))) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","fresh",50.81496556325207],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 z t) -1/3 y) 3) 1/3))))","fresh",50.12199964541705]],"compiler":[[31,23],[30,23],[22,17],[27,21],[35,25],[27,21],[25,19],[46,31],[35,25],[36,24],[29,22],[25,19],[30,21],[35,25],[26,20],[23,17],[29,22],[29,22],[18,14],[30,22],[27,21],[31,23],[30,23],[22,17],[27,21],[35,25],[27,21],[25,19],[46,31],[35,25],[36,24],[29,22],[25,19],[30,21],[35,25],[26,20],[23,17],[29,22],[29,22],[18,14],[30,22],[27,21]],"count":[[196,21]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[194,20],"picked":[1,0]}],"min-error":[16.806185155147624],"time":67.553955078125,"type":"prune"},{"compiler":[[43,20]],"locations":[["(cos.f64 y)",0.02734375,true],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))",0.09765625,true],["(*.f64 (cos.f64 y) (sqrt.f64 x))",0.15625,true],["(/.f64 -1/3 b)",0.39453125,false]],"time":9.781982421875,"type":"localize"},{"count":[[3,45]],"series":[["(cos.f64 y)","y","-inf",0.135009765625],["(cos.f64 y)","y","inf",0.155029296875],["(cos.f64 y)","y","0",0.183837890625],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","x","-inf",0.451904296875],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","x","inf",0.3759765625],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","x","0",0.323974609375],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","y","-inf",0.35205078125],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","y","inf",1.909912109375],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","y","0",0.3701171875],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","b","-inf",0.26611328125],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","b","inf",0.262939453125],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","b","0",0.403076171875],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","a","-inf",0.321044921875],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","a","inf",0.302978515625],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","a","0",0.68701171875],["(*.f64 (cos.f64 y) (sqrt.f64 x))","x","-inf",0.4560546875],["(*.f64 (cos.f64 y) (sqrt.f64 x))","x","inf",0.321044921875],["(*.f64 (cos.f64 y) (sqrt.f64 x))","x","0",0.402099609375],["(*.f64 (cos.f64 y) (sqrt.f64 x))","y","-inf",0.268798828125],["(*.f64 (cos.f64 y) (sqrt.f64 x))","y","inf",0.316162109375],["(*.f64 (cos.f64 y) (sqrt.f64 x))","y","0",0.41796875]],"time":8.951171875,"type":"series"},{"count":[[3,102]],"inputs":[["(*.f64 (cos.f64 y) (sqrt.f64 x))","(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","(cos.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 0) (*.f64 (cos.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) (*.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 1/2) (*.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 (cos.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) (*.f64 0 (*.f64 (cos.f64 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 1/2 (*.f64 (cos.f64 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 x) (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (cos.f64 y)) (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (sqrt.f64 x) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (sqrt.f64 x)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 2) x)) (cbrt.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 (cos.f64 y) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cos.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cos.f64 y) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 0) (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1/2) (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 a -1/3) b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (*.f64 0 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (*.f64 1/2 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 2)) (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 8 (*.f64 (cos.f64 y) (sqrt.f64 x)))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 2) x)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 2 (cos.f64 y)) (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 2 (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) (sqrt.f64 2)) (sqrt.f64 2) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 2 (cos.f64 y))) (sqrt.f64 (sqrt.f64 x)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (*.f64 (cos.f64 y) (sqrt.f64 x))) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))) (cbrt.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 y) 2) x) 8)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2) (*.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) (sqrt.f64 2)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) (cbrt.f64 2)) (cbrt.f64 4) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 y) (sqrt.f64 (*.f64 x 4)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (cbrt.f64 (/.f64 -1/3 b))) (cbrt.f64 (/.f64 1/9 (*.f64 b b))) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 a -1/3) b)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 a -1/3) b) 2)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a -1/3) (/.f64 1 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 (*.f64 a a)) (/.f64 -1/3 b)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1/3 b) a (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 1 (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 a -1/3) b) 1 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 a -1/3) b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) 0) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) (*.f64 (cos.f64 y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) 1/2) (*.f64 (cos.f64 y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 y)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) (*.f64 0 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 y)) (*.f64 1/2 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))))"]],"rules":[["egg-rr",21],["egg-rr",49],["egg-rr",32]],"time":29.467041015625,"type":"rewrite"},{"count":[[147,129]],"inputs":[["(sqrt.f64 x)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (sqrt.f64 x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (sqrt.f64 x)))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) (sqrt.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (sqrt.f64 x))))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 -1/3 (/.f64 a b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 -1/3 (/.f64 a b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 -1/3 (/.f64 a b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 2 (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/12 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (+.f64 (*.f64 2 (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))))","(+.f64 (*.f64 -1/360 (*.f64 (pow.f64 y 6) (sqrt.f64 x))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/12 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (+.f64 (*.f64 2 (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 -1/3 (/.f64 a b))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 x)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (sqrt.f64 x))","(*.f64 (sqrt.f64 x) (fma.f64 -1/2 (*.f64 y y) 1))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (sqrt.f64 x)))","(+.f64 (*.f64 (sqrt.f64 x) (fma.f64 (pow.f64 y 4) 1/24 (*.f64 (*.f64 -1/2 y) y))) (sqrt.f64 x))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) (sqrt.f64 x))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (sqrt.f64 x))))","(fma.f64 -1/720 (*.f64 (pow.f64 y 6) (sqrt.f64 x)) (+.f64 (*.f64 (sqrt.f64 x) (fma.f64 (pow.f64 y 4) 1/24 (*.f64 (*.f64 -1/2 y) y))) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 2 (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))","(+.f64 (*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (*.f64 y y)) 2)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/12 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (+.f64 (*.f64 2 (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))))","(+.f64 (*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (*.f64 y y)) (*.f64 1/12 (pow.f64 y 4)))) (fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b)))","(+.f64 (*.f64 -1/360 (*.f64 (pow.f64 y 6) (sqrt.f64 x))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/12 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (+.f64 (*.f64 2 (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))))","(+.f64 (*.f64 (sqrt.f64 x) (+.f64 (*.f64 -1/360 (pow.f64 y 6)) (neg.f64 (*.f64 y y)))) (+.f64 (*.f64 (sqrt.f64 x) (+.f64 (*.f64 1/12 (pow.f64 y 4)) 2)) (/.f64 (*.f64 -1/3 a) b)))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(fma.f64 -1/2 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 (pow.f64 y 4) 1/24 (*.f64 (*.f64 -1/2 y) y)))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/720 (pow.f64 y 6) 1) (fma.f64 (pow.f64 y 4) 1/24 (*.f64 (*.f64 -1/2 y) y)))"]],"time":135.10986328125,"type":"simplify"},{"compiler":[[3286,1812]],"time":38.443115234375,"type":"eval"},{"alts":[["(fma.f64 (*.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) (cbrt.f64 2)) (cbrt.f64 4) (/.f64 (*.f64 a -1/3) b))","fresh",18.6572686615272],["(+.f64 (*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (*.f64 y y)) 2)) (/.f64 (*.f64 -1/3 a) b))","fresh",37.54821163714942],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (*.f64 (*.f64 -1/3 t) z))))","fresh",31.384090206785473],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 (*.f64 z t) (cbrt.f64 -1/3)) (cbrt.f64 1/9) y))))","fresh",21.44581938840214],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)) (sqrt.f64 (*.f64 x 4))) (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))","fresh",21.39619296393725],["(fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b))","fresh",28.493263563571215],["(fma.f64 a (/.f64 -1/3 b) (pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 3) 1/3))","fresh",42.44011004150442],["(fma.f64 (*.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 2 (cos.f64 y))) (sqrt.f64 (sqrt.f64 x)) (/.f64 (*.f64 a -1/3) b))","fresh",18.633167391990302],["(fma.f64 a (/.f64 -1/3 b) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x))))))","fresh",33.93690072188897],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (fma.f64 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y)) -1/18 (fma.f64 1/3 (*.f64 (*.f64 t z) (sin.f64 y)) (cos.f64 y)))))","fresh",29.4054663902641],["(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","fresh",42.49652600441786],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (pow.f64 (pow.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 3) 1/3)))","fresh",37.9242489736872],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (*.f64 x 4)) (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (cbrt.f64 (sqrt.f64 (*.f64 x 4))))))","fresh",21.43134921393725],["(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))","fresh",21.645893871756734],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))) 3)))","fresh",18.722947494305355],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (sqrt.f64 x) (cbrt.f64 (cos.f64 y))))))","fresh",18.591607195565523],["(fma.f64 a (/.f64 -1/3 b) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))))","fresh",24.98070649512753],["(fma.f64 (*.f64 (*.f64 2 (cos.f64 y)) (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (/.f64 (*.f64 a -1/3) b))","fresh",18.58217345533396],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 z t) -1/3 y) 3) 1/3))))","fresh",50.12199964541705],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (-.f64 (*.f64 (cos.f64 (*.f64 (*.f64 z t) -1/3)) (cos.f64 y)) (*.f64 (sin.f64 (*.f64 (*.f64 z t) -1/3)) (sin.f64 y)))))","fresh",21.305180090952703],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 z t) -1/3 y)) 3))))","fresh",27.822471323667187],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","next",18.56197843579709],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 t (*.f64 z -1/3) y))))","fresh",21.42403265020133],["(/.f64 (*.f64 -1/3 a) b)","fresh",38.19572720814174],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cbrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))","fresh",21.41444462542933],["(fma.f64 a (*.f64 (cbrt.f64 (/.f64 -1/27 b)) (pow.f64 (cbrt.f64 b) -2)) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","fresh",18.656762273713014],["(fma.f64 a (*.f64 (pow.f64 b -1/3) (cbrt.f64 (/.f64 -1/27 (*.f64 b b)))) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","fresh",50.81496556325207]],"compiler":[[22,18],[21,16],[22,17],[27,21],[35,25],[15,12],[27,21],[23,16],[46,31],[36,24],[13,11],[22,18],[29,22],[25,19],[21,17],[25,19],[30,21],[22,17],[27,21],[35,25],[26,20],[29,22],[23,17],[11,9],[29,22],[24,19],[30,22],[22,18],[21,16],[22,17],[27,21],[35,25],[15,12],[27,21],[23,16],[46,31],[36,24],[13,11],[22,18],[29,22],[25,19],[21,17],[25,19],[30,21],[22,17],[27,21],[35,25],[26,20],[29,22],[23,17],[11,9],[29,22],[24,19],[30,22]],"count":[[211,27]],"kept":[{"done":[0,0],"fresh":[20,15],"new":[190,12],"picked":[1,0]}],"min-error":[16.588783892675064],"time":71.821044921875,"type":"prune"},{"compiler":[[95,60]],"locations":[["(/.f64 (*.f64 a -1/3) b)",0.15625,true],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))",0.22265625,true],["(pow.f64 (cos.f64 y) 2)",0.23046875,true],["(*.f64 a -1/3)",0.2890625,true]],"time":23.016845703125,"type":"localize"},{"count":[[4,79]],"series":[["(/.f64 (*.f64 a -1/3) b)","b","-inf",0.205810546875],["(/.f64 (*.f64 a -1/3) b)","b","inf",0.277099609375],["(/.f64 (*.f64 a -1/3) b)","b","0",0.256103515625],["(/.f64 (*.f64 a -1/3) b)","a","-inf",0.223876953125],["(/.f64 (*.f64 a -1/3) b)","a","inf",0.283935546875],["(/.f64 (*.f64 a -1/3) b)","a","0",0.300048828125],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","b","-inf",0.279052734375],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","b","inf",0.794189453125],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","b","0",2.077880859375],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","a","-inf",0.303955078125],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","a","inf",0.384033203125],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","a","0",4.511962890625],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","y","-inf",2.60595703125],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","y","inf",21.678955078125],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","y","0",1.9111328125],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","x","-inf",0.868896484375],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","x","inf",1.200927734375],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","x","0",1.22314453125],["(pow.f64 (cos.f64 y) 2)","y","-inf",0.318115234375],["(pow.f64 (cos.f64 y) 2)","y","inf",0.304931640625],["(pow.f64 (cos.f64 y) 2)","y","0",0.283935546875],["(*.f64 a -1/3)","a","-inf",0.30908203125],["(*.f64 a -1/3)","a","inf",0.26220703125],["(*.f64 a -1/3)","a","0",0.285888671875]],"time":41.5380859375,"type":"series"},{"count":[[4,231]],"inputs":[["(*.f64 a -1/3)","(pow.f64 (cos.f64 y) 2)","(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","(/.f64 (*.f64 a -1/3) b)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 a -1/3) 1/2) (*.f64 (*.f64 a -1/3) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 a -1/3) 0) (*.f64 a -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a -1/3) (*.f64 (*.f64 a -1/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 a -1/3)) (*.f64 1/2 (*.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 a -1/3)) (*.f64 a -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a -1/3) (*.f64 0 (*.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 1/3 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (*.f64 (pow.f64 a 2/3) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/3) (*.f64 (cbrt.f64 1/9) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a -1/3)) (pow.f64 (*.f64 a -1/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a -1/3) 2/3) (cbrt.f64 (*.f64 a -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/3 (cbrt.f64 a)) (pow.f64 a 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a (cbrt.f64 -1/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 a)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 a -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 1/3 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 1/3 a))) (pow.f64 (cbrt.f64 (*.f64 1/3 a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (neg.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 a) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/3) (cbrt.f64 a)) (neg.f64 (pow.f64 (*.f64 a -1/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/3 a)) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 a)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a -1/3)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a -1/3))) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 a -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 a) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 a -1/3) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 a -1/3) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 a) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 a -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a -1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a -1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a -1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a -1/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1/3 a))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 a -1/3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 0 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 y) 2) 1/2) (*.f64 (pow.f64 (cos.f64 y) 2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 y) 2) 0) (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (pow.f64 (cos.f64 y) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (pow.f64 (cos.f64 y) 2)) (*.f64 1/2 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cos.f64 y) 2)) (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 y) 2) (*.f64 0 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (sin.f64 y)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (+.f64 y y))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 1 (*.f64 1/2 (cos.f64 (+.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 y y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4)) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (pow.f64 (cos.f64 y) 2/3) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 y)) (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) (cbrt.f64 (pow.f64 (cos.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) -1) (*.f64 (cos.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (cos.f64 y)) -1) (*.f64 (neg.f64 (cos.f64 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (cos.f64 y)) 1) (*.f64 (neg.f64 (cos.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (cos.f64 y))) (*.f64 1 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (sin.f64 y)) (-.f64 -1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (sin.f64 y)) (-.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 2/3) (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 1 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/8 (pow.f64 (*.f64 1/2 (cos.f64 (+.f64 y y))) 3)) (+.f64 1/4 (-.f64 (*.f64 (*.f64 1/2 (cos.f64 (+.f64 y y))) (*.f64 1/2 (cos.f64 (+.f64 y y)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (+.f64 y y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (sin.f64 y) 2) 3)) (+.f64 1 (+.f64 (*.f64 (pow.f64 (sin.f64 y) 2) (pow.f64 (sin.f64 y) 2)) (*.f64 1 (pow.f64 (sin.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (cos.f64 (+.f64 y y)) (cos.f64 0)) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2/3) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2/3) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (cos.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (cos.f64 y) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 (sin.f64 y) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 1/2)) (neg.f64 (sqrt.f64 1/2)) (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (pow.f64 (cbrt.f64 1/2) 2) (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (neg.f64 (cbrt.f64 1/4)) (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 1 (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1/2 (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1/2 (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (*.f64 1/2 (cos.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (neg.f64 (pow.f64 (sin.f64 y) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1/2) (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 0) (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (*.f64 1/2 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (*.f64 0 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 a -1/3) b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (/.f64 a (*.f64 b 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 2/3) (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 4)) (*.f64 (cbrt.f64 x) (pow.f64 (cos.f64 y) 2/3)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) 4) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 1 (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/3 a) (/.f64 -1 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 a -1/3) b)) (pow.f64 (/.f64 (*.f64 a -1/3) b) 2/3) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 (*.f64 a -1/3) b) 2/3) (cbrt.f64 (/.f64 (*.f64 a -1/3) b)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a -1/3) (/.f64 1 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 a (*.f64 b 3)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 a -1/3) b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 b -1/3) (/.f64 a (*.f64 (pow.f64 b 2/3) -3)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 a -1/3)) (/.f64 (pow.f64 (*.f64 a -1/3) 2/3) b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 a b) -1/3 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1/27 b)) (/.f64 a (pow.f64 b 2/3)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 a (cbrt.f64 b)) (/.f64 -1/3 (pow.f64 b 2/3)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/3 (/.f64 a b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 a -1/3) b) 1 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 b) (*.f64 a -1/3) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (/.f64 (*.f64 a -1/3) b))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 a -1/3) b) 1/2) (*.f64 (/.f64 (*.f64 a -1/3) b) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 a -1/3) b) 0) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 a -1/3) b) (*.f64 (/.f64 (*.f64 a -1/3) b) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (*.f64 a -1/3) b)) (*.f64 1/2 (/.f64 (*.f64 a -1/3) b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 a -1/3) b)) (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 a -1/3) b) (*.f64 0 (/.f64 (*.f64 a -1/3) b)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 a (*.f64 b 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 b)) (/.f64 a (*.f64 b 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 a -1/3) b)) (pow.f64 (/.f64 (*.f64 a -1/3) b) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b)) (pow.f64 (cbrt.f64 b) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 a -1/3) b)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (*.f64 a -1/3) b))) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 a -1/3) b) 2/3) (cbrt.f64 (/.f64 (*.f64 a -1/3) b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 a -1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 a -1/3) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 a) (/.f64 -1 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (/.f64 -1/3 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 a (cbrt.f64 b)) (/.f64 -1/3 (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1/27 b)) (/.f64 a (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a -1/3)) (/.f64 (pow.f64 (*.f64 a -1/3) 2/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a -1/3) (/.f64 1 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 b) (*.f64 a -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b -1/3) (/.f64 a (*.f64 (pow.f64 b 2/3) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 a (*.f64 b 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 a b) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 a (neg.f64 b)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 a) (/.f64 1 (*.f64 b 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b)) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 a -1/3) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 b -1/3) (*.f64 a -1/3)) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1/27 b)) a) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 a -1/3) b) 2/3) (cbrt.f64 a)) (cbrt.f64 (*.f64 b -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 a (cbrt.f64 b)) -1/3) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 a -1/3) b)) (pow.f64 (*.f64 a -1/3) 2/3)) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b)) 1) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 a) (pow.f64 (/.f64 (*.f64 a -1/3) b) 2/3)) (cbrt.f64 (*.f64 b -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b)) 1) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b)) (cbrt.f64 (pow.f64 b 2/3))) (pow.f64 (cbrt.f64 (pow.f64 b 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 a) (cbrt.f64 b)) (neg.f64 (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 a) (cbrt.f64 (neg.f64 b))) (pow.f64 (cbrt.f64 (neg.f64 b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 a (cbrt.f64 -3)) (/.f64 b (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 a b) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 a (cbrt.f64 (*.f64 b -3))) (cbrt.f64 (/.f64 (*.f64 b b) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 a (cbrt.f64 b)) (*.f64 (pow.f64 b 2/3) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b)) 1) (*.f64 (pow.f64 b 2/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/3 a)) (pow.f64 (*.f64 a -1/3) 2/3)) (*.f64 (cbrt.f64 (neg.f64 b)) (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 a) (pow.f64 (*.f64 a -1/3) 2/3)) (*.f64 (cbrt.f64 (*.f64 b -3)) (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b))) (neg.f64 (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 a -1/3) b)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 a (*.f64 b -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 a) (neg.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 a) (*.f64 b 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 a -1/3) b) 2/3) (cbrt.f64 (*.f64 1/3 a))) (cbrt.f64 (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 a -1/3) b) 2/3) (cbrt.f64 (*.f64 a -1/3))) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 a b) -1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 a (*.f64 (pow.f64 b 2/3) -3)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/3 (/.f64 a (pow.f64 b 2/3))) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 a (/.f64 -1/3 (pow.f64 b 2/3))) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/3 a)) (pow.f64 (/.f64 (*.f64 a -1/3) b) 2/3)) (cbrt.f64 (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 a -1/3)) (pow.f64 (/.f64 (*.f64 a -1/3) b) 2/3)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 a b)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 a -1/3) -1) (neg.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 a (cbrt.f64 (*.f64 b -3))) (pow.f64 (cbrt.f64 (*.f64 b -3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 a) (*.f64 (*.f64 b 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 a) (*.f64 3 b))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 a -1/3) b) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 a -1/3) b)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 a -1/3) b)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 a -1/3) b)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 a -1/3) b) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 a (*.f64 b 3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 a (*.f64 b 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 a -1/3) b) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 a -1/3) b) 3))))))"]],"rules":[["egg-rr",74],["egg-rr",48],["egg-rr",72],["egg-rr",37]],"time":41.870849609375,"type":"rewrite"},{"count":[[310,251]],"inputs":[["(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/18 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))))","(+.f64 (*.f64 (pow.f64 y 6) (+.f64 (*.f64 1/216 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (+.f64 (*.f64 -23/6480 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/3 (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (-.f64 (*.f64 -2/45 x) (*.f64 -1/27 x)))) (sqrt.f64 (/.f64 1 x))))))) (+.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/18 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 -1/3 (/.f64 a b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 -1/3 (/.f64 a b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 -1/3 (/.f64 a b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","(*.f64 -1/3 a)","1","(+.f64 (*.f64 -1 (pow.f64 y 2)) 1)","(-.f64 1 (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (*.f64 1/3 (pow.f64 y 4))))","(-.f64 (fma.f64 (pow.f64 y 4) 1/3 1) (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -2/45 (pow.f64 y 6)) (*.f64 1/3 (pow.f64 y 4)))))","(+.f64 (-.f64 1 (*.f64 y y)) (fma.f64 -2/45 (pow.f64 y 6) (*.f64 1/3 (pow.f64 y 4))))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))","(fma.f64 (*.f64 y y) (*.f64 (sqrt.f64 x) (+.f64 -1/3 -2/3)) (fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b)))","(+.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/18 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))))","(fma.f64 (*.f64 (sqrt.f64 x) (+.f64 1/9 -1/36)) (pow.f64 y 4) (fma.f64 (*.f64 y y) (*.f64 (sqrt.f64 x) (+.f64 -1/3 -2/3)) (fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b))))","(+.f64 (*.f64 (pow.f64 y 6) (+.f64 (*.f64 1/216 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (+.f64 (*.f64 -23/6480 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/3 (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (-.f64 (*.f64 -2/45 x) (*.f64 -1/27 x)))) (sqrt.f64 (/.f64 1 x))))))) (+.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/18 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))))","(fma.f64 (pow.f64 y 6) (+.f64 (*.f64 (sqrt.f64 x) (+.f64 1/108 -23/3240)) (*.f64 1/3 (*.f64 (*.f64 2 (*.f64 x -1/135)) (sqrt.f64 (/.f64 1 x))))) (fma.f64 (*.f64 (sqrt.f64 x) (+.f64 1/9 -1/36)) (pow.f64 y 4) (fma.f64 (*.f64 y y) (*.f64 (sqrt.f64 x) (+.f64 -1/3 -2/3)) (fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b)))))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 (sqrt.f64 x) (*.f64 2 (cos.f64 y)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)"]],"time":231.418212890625,"type":"simplify"},{"compiler":[[6671,4484]],"time":75.704833984375,"type":"eval"},{"alts":[["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (*.f64 (*.f64 -1/3 t) z))))","fresh",31.384090206785473],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 (*.f64 z t) (cbrt.f64 -1/3)) (cbrt.f64 1/9) y))))","fresh",21.44581938840214],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)) (sqrt.f64 (*.f64 x 4))) (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))","fresh",21.39619296393725],["(fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b))","fresh",28.493263563571215],["(fma.f64 a (/.f64 -1/3 b) (pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 3) 1/3))","fresh",42.44011004150442],["(fma.f64 a (/.f64 -1/3 b) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x))))))","fresh",33.93690072188897],["(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","fresh",42.49652600441786],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (pow.f64 (pow.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 3) 1/3)))","fresh",37.9242489736872],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (fma.f64 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y)) -1/18 (fma.f64 1/3 (*.f64 (*.f64 t z) (sin.f64 y)) (cos.f64 y)))))","fresh",29.4054663902641],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (*.f64 x 4)) (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (cbrt.f64 (sqrt.f64 (*.f64 x 4))))))","fresh",21.43134921393725],["(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))","fresh",21.645893871756734],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))) 3)))","fresh",18.722947494305355],["(fma.f64 a (/.f64 -1/3 b) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))))","fresh",24.98070649512753],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (-.f64 1 (*.f64 y y)) x))) (/.f64 (*.f64 a -1/3) b))","fresh",36.7939860342468],["(fma.f64 a (*.f64 (pow.f64 b -1/3) (cbrt.f64 (/.f64 -1/27 (*.f64 b b)))) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","fresh",50.81496556325207],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 (*.f64 -1/3 (cbrt.f64 a)) (pow.f64 a 2/3)) b))","fresh",41.21847267974835],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 1 x))) (/.f64 (*.f64 a -1/3) b))","fresh",26.735597628279248],["(fma.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (/.f64 (*.f64 a -1/3) b))","fresh",33.57656241467984],["(*.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))) 2) 3))","fresh",19.27099711576418],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 z t) -1/3 y) 3) 1/3))))","fresh",50.12199964541705],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (-.f64 (*.f64 (cos.f64 (*.f64 (*.f64 z t) -1/3)) (cos.f64 y)) (*.f64 (sin.f64 (*.f64 (*.f64 z t) -1/3)) (sin.f64 y)))))","fresh",21.305180090952703],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 z t) -1/3 y)) 3))))","fresh",27.822471323667187],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 t (*.f64 z -1/3) y))))","fresh",21.42403265020133],["(/.f64 (*.f64 -1/3 a) b)","fresh",38.19572720814174],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cbrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))","fresh",21.41444462542933],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","next",18.53072843579709]],"compiler":[[22,17],[27,21],[35,25],[15,12],[27,21],[46,31],[13,11],[22,18],[36,24],[29,22],[25,19],[21,17],[30,21],[30,23],[30,22],[34,26],[26,21],[41,31],[38,29],[27,21],[35,25],[26,20],[23,17],[11,9],[29,22],[29,22],[22,17],[27,21],[35,25],[15,12],[27,21],[46,31],[13,11],[22,18],[36,24],[29,22],[25,19],[21,17],[30,21],[30,23],[30,22],[34,26],[26,21],[41,31],[38,29],[27,21],[35,25],[26,20],[23,17],[11,9],[29,22],[29,22]],"count":[[278,26]],"kept":[{"done":[0,0],"fresh":[26,19],"new":[251,7],"picked":[1,0]}],"min-error":[16.542555061604883],"time":105.2451171875,"type":"prune"},{"compiler":[[95,60]],"locations":[["(/.f64 (/.f64 a -3) b)",0.15625,true],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))",0.15625,true],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))",0.22265625,true],["(pow.f64 (cos.f64 y) 2)",0.23046875,false]],"time":23.048828125,"type":"localize"},{"count":[[3,75]],"series":[["(/.f64 (/.f64 a -3) b)","b","-inf",0.13916015625],["(/.f64 (/.f64 a -3) b)","b","inf",0.158935546875],["(/.f64 (/.f64 a -3) b)","b","0",0.153076171875],["(/.f64 (/.f64 a -3) b)","a","-inf",0.1640625],["(/.f64 (/.f64 a -3) b)","a","inf",0.157958984375],["(/.f64 (/.f64 a -3) b)","a","0",0.14208984375],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))","y","-inf",0.15087890625],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))","y","inf",0.171142578125],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))","y","0",0.205078125],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))","x","-inf",0.434814453125],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))","x","inf",0.2900390625],["(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))","x","0",0.2890625],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","b","-inf",0.20703125],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","b","inf",0.18994140625],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","b","0",0.197998046875],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","a","-inf",0.19091796875],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","a","inf",0.194091796875],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","a","0",0.205078125],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","y","-inf",0.197021484375],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","y","inf",0.213134765625],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","y","0",0.320068359375],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","x","-inf",0.267822265625],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","x","inf",0.2900390625],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","x","0",0.31884765625]],"time":5.586181640625,"type":"series"},{"count":[[3,182]],"inputs":[["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","(*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))","(/.f64 (/.f64 a -3) b)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 0) (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1/2) (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (*.f64 1/2 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (*.f64 0 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (/.f64 a (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 a (*.f64 -3 b)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (/.f64 (*.f64 a 1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 2/3) (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (neg.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3) (/.f64 a (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 1 (/.f64 a (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a 1/3) (/.f64 -1 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 b -1/3) (/.f64 (*.f64 a -1/3) (pow.f64 b 2/3)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 a -1/3)) (/.f64 (pow.f64 (*.f64 a -1/3) 2/3) b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 a (*.f64 -3 b)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 a (cbrt.f64 b)) (/.f64 -1/3 (pow.f64 b 2/3)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 a (*.f64 -3 b)) 1 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 a 1/3) b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 a (*.f64 -3 b))) (pow.f64 (/.f64 a (*.f64 -3 b)) 2/3) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 b) (*.f64 a -1/3) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a -1/3) (/.f64 1 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 a (*.f64 -3 b)) 2/3) (cbrt.f64 (/.f64 a (*.f64 -3 b))) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 a (*.f64 -3 b))) (/.f64 (pow.f64 (*.f64 a -1/3) 2/3) (pow.f64 b 2/3)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (/.f64 a (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) 4) (/.f64 a (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (/.f64 a (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 4)) (*.f64 (pow.f64 (cos.f64 y) 2/3) (cbrt.f64 x)) (/.f64 a (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (/.f64 a (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (/.f64 a (*.f64 -3 b)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 0) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 1/2) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (*.f64 (pow.f64 (cos.f64 y) 2/3) (sqrt.f64 (*.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cbrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) (sqrt.f64 (*.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cbrt.f64 (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (sqrt.f64 (sqrt.f64 (*.f64 x 4)))) (sqrt.f64 (sqrt.f64 (*.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 y) (cbrt.f64 (sqrt.f64 (*.f64 x 4)))) (cbrt.f64 (*.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 4))) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 4)) (*.f64 (pow.f64 (cos.f64 y) 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 a (*.f64 -3 b)) 0) (/.f64 a (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 a (*.f64 -3 b)) 1/2) (*.f64 (/.f64 a (*.f64 -3 b)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 a (*.f64 -3 b)) (*.f64 (/.f64 a (*.f64 -3 b)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 a (*.f64 -3 b))) (/.f64 a (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 a (*.f64 -3 b))) (*.f64 1/2 (/.f64 a (*.f64 -3 b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 a (*.f64 -3 b)) (*.f64 0 (/.f64 a (*.f64 -3 b))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 a 1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 b)) (/.f64 (*.f64 a 1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 a (*.f64 -3 b))) (pow.f64 (/.f64 a (*.f64 -3 b)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 a (*.f64 -3 b)) 2/3) (cbrt.f64 (/.f64 a (*.f64 -3 b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a -1/3)) (/.f64 (pow.f64 (*.f64 a -1/3) 2/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a 1/3) (/.f64 -1 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (/.f64 -1/3 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 a (cbrt.f64 b)) (/.f64 -1/3 (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 a (*.f64 -3 b))) (/.f64 (pow.f64 (*.f64 a -1/3) 2/3) (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 a -1/3) (/.f64 1 b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 b) (*.f64 a -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 b -1/3) (/.f64 (*.f64 a -1/3) (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 a (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 a (*.f64 -3 b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 a 1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 a b) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 a b) 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (/.f64 a b)) -3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 a (/.f64 1 (*.f64 -3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b)) (pow.f64 (cbrt.f64 b) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 a) (/.f64 1 (*.f64 3 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 a b)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 a (*.f64 -3 b))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 a (*.f64 -3 b)))) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b))) (neg.f64 (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 a (*.f64 -3 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (/.f64 a b))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 a -1/3) b)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 a 1/3) (neg.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b)) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 a (*.f64 b -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 a) (*.f64 3 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 a b) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 a b)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 b -1/3) (*.f64 a -1/3)) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 a (cbrt.f64 b)) -1/3) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 a b)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (neg.f64 (/.f64 a b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 b) (neg.f64 a)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 b) a) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 b) (*.f64 a (cbrt.f64 -1/3))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 b) (*.f64 (neg.f64 a) (sqrt.f64 1/3))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 a (*.f64 -3 b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 a (*.f64 -3 b)) 2/3) (cbrt.f64 (*.f64 a 1/3))) (cbrt.f64 (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 a (*.f64 -3 b)) 2/3) (cbrt.f64 (*.f64 a -1/3))) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 a (*.f64 -3 b))) (pow.f64 (*.f64 a -1/3) 2/3)) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 a 1/3)) (/.f64 (pow.f64 (*.f64 a -1/3) 2/3) (pow.f64 b 2/3))) (cbrt.f64 (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 a 1/3)) (pow.f64 (/.f64 a (*.f64 -3 b)) 2/3)) (cbrt.f64 (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 a -1/3)) (/.f64 (pow.f64 (*.f64 a -1/3) 2/3) (pow.f64 b 2/3))) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 a -1/3)) (pow.f64 (/.f64 a (*.f64 -3 b)) 2/3)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 a) (/.f64 -1 b)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 a (/.f64 -1 b)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 a -1/3) (pow.f64 b 2/3)) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 a b) 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b)) 1) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 a b)) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 a 1/3) b) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 a (/.f64 -1/3 (pow.f64 b 2/3))) (cbrt.f64 b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 a) (/.f64 (pow.f64 (*.f64 a -1/3) 2/3) b)) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 a)) (/.f64 (pow.f64 (*.f64 a -1/3) 2/3) b)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 a (cbrt.f64 -1/3)) (/.f64 1 b)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 a) (sqrt.f64 1/3)) (/.f64 1 b)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b)) (cbrt.f64 (pow.f64 b 2/3))) (pow.f64 (cbrt.f64 (pow.f64 b 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 a -1/3) (cbrt.f64 b)) 1) (pow.f64 b 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 a b) -1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 a b) 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 a b) (cbrt.f64 9)) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 a b) (cbrt.f64 -3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 a b)) (neg.f64 (sqrt.f64 3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 a b)) -1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 a b)) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 a b)) (cbrt.f64 9)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 a b)) (cbrt.f64 -3)) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 a b)) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 a b)) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 a b)) (neg.f64 (cbrt.f64 -3))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 a 1/3) (cbrt.f64 b)) (neg.f64 (pow.f64 b 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 a 1/3) (cbrt.f64 (neg.f64 b))) (pow.f64 (cbrt.f64 (neg.f64 b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 a) (/.f64 (neg.f64 b) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 a (/.f64 (*.f64 b -3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 a) (/.f64 b 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 a) (neg.f64 (*.f64 b -3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 a (*.f64 -3 b))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 a (*.f64 -3 b))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 a (*.f64 -3 b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 a (*.f64 -3 b)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 a (*.f64 -3 b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 a 1/3) b))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 a 1/3) b) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 a 1/3) (/.f64 1 b)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 a (*.f64 -3 b)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 b) (*.f64 a 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 a (*.f64 -3 b)) 3))))))"]],"rules":[["egg-rr",98],["egg-rr",37],["egg-rr",47]],"time":36.808837890625,"type":"rewrite"},{"count":[[257,204]],"inputs":[["(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/18 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))))","(+.f64 (*.f64 (pow.f64 y 6) (+.f64 (*.f64 1/216 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (+.f64 (*.f64 -23/6480 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/3 (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (-.f64 (*.f64 -2/45 x) (*.f64 -1/27 x)))) (sqrt.f64 (/.f64 1 x))))))) (+.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/18 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 -1/3 (/.f64 a b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 -1/3 (/.f64 a b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 -1/3 (/.f64 a b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(*.f64 2 (sqrt.f64 x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (*.f64 2 (sqrt.f64 x)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/12 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (*.f64 2 (sqrt.f64 x))))","(+.f64 (*.f64 -1/360 (*.f64 (pow.f64 y 6) (sqrt.f64 x))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/12 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (*.f64 2 (sqrt.f64 x)))))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))","(*.f64 -1/3 (/.f64 a b))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))","(fma.f64 (*.f64 y y) (*.f64 (sqrt.f64 x) (+.f64 -2/3 -1/3)) (fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b)))","(+.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/18 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b)))))","(fma.f64 (pow.f64 y 4) (*.f64 (sqrt.f64 x) (+.f64 1/9 -1/36)) (fma.f64 (*.f64 y y) (*.f64 (sqrt.f64 x) (+.f64 -2/3 -1/3)) (fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b))))","(+.f64 (*.f64 (pow.f64 y 6) (+.f64 (*.f64 1/216 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (+.f64 (*.f64 -23/6480 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/3 (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (-.f64 (*.f64 -2/45 x) (*.f64 -1/27 x)))) (sqrt.f64 (/.f64 1 x))))))) (+.f64 (*.f64 (+.f64 (*.f64 -1/72 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 1/18 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/6 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x))))) (+.f64 (*.f64 (*.f64 (cbrt.f64 2) (cbrt.f64 4)) (sqrt.f64 x)) (*.f64 -1/3 (/.f64 a b))))))","(fma.f64 (pow.f64 y 6) (+.f64 (*.f64 (sqrt.f64 x) (+.f64 1/108 -23/3240)) (*.f64 1/3 (*.f64 (*.f64 2 (*.f64 x -1/135)) (sqrt.f64 (/.f64 1 x))))) (fma.f64 (pow.f64 y 4) (*.f64 (sqrt.f64 x) (+.f64 1/9 -1/36)) (fma.f64 (*.f64 y y) (*.f64 (sqrt.f64 x) (+.f64 -2/3 -1/3)) (fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b)))))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 (*.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 4) (cos.f64 y))) (sqrt.f64 x))) (*.f64 -1/3 (/.f64 a b)))","(fma.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)) (/.f64 (*.f64 -1/3 a) b))","(*.f64 2 (sqrt.f64 x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (*.f64 2 (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (*.f64 y y)) 2))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/12 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (*.f64 2 (sqrt.f64 x))))","(fma.f64 (neg.f64 (*.f64 y y)) (sqrt.f64 x) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 1/12 (pow.f64 y 4)) 2)))","(+.f64 (*.f64 -1/360 (*.f64 (pow.f64 y 6) (sqrt.f64 x))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (sqrt.f64 x))) (+.f64 (*.f64 1/12 (*.f64 (pow.f64 y 4) (sqrt.f64 x))) (*.f64 2 (sqrt.f64 x)))))","(+.f64 (*.f64 (sqrt.f64 x) (+.f64 (*.f64 -1/360 (pow.f64 y 6)) (neg.f64 (*.f64 y y)))) (*.f64 (sqrt.f64 x) (+.f64 (*.f64 1/12 (pow.f64 y 4)) 2)))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)","(*.f64 -1/3 (/.f64 a b))","(/.f64 (*.f64 -1/3 a) b)"]],"time":221.400146484375,"type":"simplify"},{"compiler":[[7669,5135]],"time":86.926025390625,"type":"eval"},{"alts":[["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (*.f64 (*.f64 -1/3 t) z))))","fresh",31.384090206785473],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 (*.f64 z t) (cbrt.f64 -1/3)) (cbrt.f64 1/9) y))))","fresh",21.44581938840214],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (*.f64 y y)) 2))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","fresh",36.14877690383536],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)) (sqrt.f64 (*.f64 x 4))) (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))","fresh",21.39619296393725],["(fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b))","fresh",28.493263563571215],["(fma.f64 a (/.f64 -1/3 b) (pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 3) 1/3))","fresh",42.44011004150442],["(fma.f64 a (/.f64 -1/3 b) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x))))))","fresh",33.93690072188897],["(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","fresh",42.49652600441786],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 1 x))) (/.f64 (/.f64 a -3) b))","fresh",26.704347628279248],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (pow.f64 (pow.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 3) 1/3)))","fresh",37.9242489736872],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (fma.f64 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y)) -1/18 (fma.f64 1/3 (*.f64 (*.f64 t z) (sin.f64 y)) (cos.f64 y)))))","fresh",29.4054663902641],["(fma.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 3))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","fresh",27.11909261252558],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (*.f64 x 4)) (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (cbrt.f64 (sqrt.f64 (*.f64 x 4))))))","fresh",21.43134921393725],["(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))","fresh",21.645893871756734],["(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))) 3)))","fresh",18.722947494305355],["(fma.f64 a (/.f64 -1/3 b) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))))","fresh",24.98070649512753],["(fma.f64 a (*.f64 (pow.f64 b -1/3) (cbrt.f64 (/.f64 -1/27 (*.f64 b b)))) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","fresh",50.81496556325207],["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 (*.f64 -1/3 (cbrt.f64 a)) (pow.f64 a 2/3)) b))","fresh",41.21847267974835],["(fma.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (/.f64 (*.f64 a -1/3) b))","fresh",33.57656241467984],["(*.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))) 2) 3))","fresh",19.27099711576418],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 z t) -1/3 y) 3) 1/3))))","fresh",50.12199964541705],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (-.f64 (*.f64 (cos.f64 (*.f64 (*.f64 z t) -1/3)) (cos.f64 y)) (*.f64 (sin.f64 (*.f64 (*.f64 z t) -1/3)) (sin.f64 y)))))","fresh",21.305180090952703],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 z t) -1/3 y)) 3))))","fresh",27.822471323667187],["(fma.f64 (cbrt.f64 (*.f64 2 (sqrt.f64 x))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","fresh",28.377968712976383],["(/.f64 (*.f64 -1/3 a) b)","fresh",38.19572720814174],["(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cbrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))","fresh",21.41444462542933]],"compiler":[[22,17],[27,21],[31,24],[35,25],[15,12],[27,21],[46,31],[13,11],[26,21],[22,18],[36,24],[32,25],[29,22],[25,19],[21,17],[30,21],[30,22],[34,26],[41,31],[38,29],[27,21],[35,25],[26,20],[26,21],[11,9],[29,22]],"count":[[309,26]],"kept":[{"done":[0,0],"fresh":[25,22],"new":[283,4],"picked":[1,0]}],"min-error":[16.522524784550537],"time":108.0,"type":"prune"},{"accuracy":[18.530728435797087],"baseline":[18.53072843579709],"branch":[["x",18.53072843579709,1],["y",18.530728435797098,1],["z",18.53072843579709,1],["t",18.53072843579711,1],["a",18.53072843579711,1],["b",18.5307284357971,1],["(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))",18.530728435797105,1],["(*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3))))",18.530728435797105,1],["(*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3))))",18.530728435797105,1],["(*.f64 2 (sqrt.f64 x))",18.53072843579709,1],["(*.f64 2 (sqrt.f64 x))",18.53072843579709,1],["(sqrt.f64 x)",18.53072843579709,1],["(sqrt.f64 x)",18.53072843579709,1],["(cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))",18.530728435797105,1],["(cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))",18.530728435797105,1],["(-.f64 y (/.f64 (*.f64 z t) 3))",18.5307284357971,1],["(-.f64 y (/.f64 (*.f64 z t) 3))",18.5307284357971,1],["(/.f64 (*.f64 z t) 3)",18.530728435797098,1],["(*.f64 z t)",18.530728435797098,1],["(/.f64 a (*.f64 b 3))",18.530728435797087,1],["(/.f64 a (*.f64 b 3))",18.530728435797087,1],["(*.f64 b 3)",18.5307284357971,1],["(*.f64 b 3)",18.5307284357971,1]],"compiler":[[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[25,19],[19,15],[19,15],[10,9],[10,9],[8,7],[8,7],[14,11],[14,11],[13,10],[13,10],[11,9],[9,7],[11,9],[11,9],[9,8],[9,8],[948,582]],"count":[[45,1]],"inputs":[["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (*.f64 y y)) 2))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 1 x))) (/.f64 (/.f64 a -3) b))","(fma.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 3))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","(fma.f64 (cbrt.f64 (*.f64 2 (sqrt.f64 x))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","(*.f64 (*.f64 2 (cos.f64 y)) (sqrt.f64 x))","(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (-.f64 1 (*.f64 y y)) x))) (/.f64 (*.f64 a -1/3) b))","(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 (*.f64 -1/3 (cbrt.f64 a)) (pow.f64 a 2/3)) b))","(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 1 x))) (/.f64 (*.f64 a -1/3) b))","(fma.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)) 2/3)) (/.f64 (*.f64 a -1/3) b))","(*.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))))) 2) 3))","(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","(fma.f64 (*.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) (cbrt.f64 2)) (cbrt.f64 4) (/.f64 (*.f64 a -1/3) b))","(+.f64 (*.f64 (sqrt.f64 x) (+.f64 (neg.f64 (*.f64 y y)) 2)) (/.f64 (*.f64 -1/3 a) b))","(fma.f64 2 (sqrt.f64 x) (/.f64 (*.f64 -1/3 a) b))","(fma.f64 (*.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 2 (cos.f64 y))) (sqrt.f64 (sqrt.f64 x)) (/.f64 (*.f64 a -1/3) b))","(*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))","(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (pow.f64 (pow.f64 (*.f64 (cos.f64 y) (sqrt.f64 x)) 3) 1/3)))","(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) (sqrt.f64 x))) 3)))","(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (sqrt.f64 x) (cbrt.f64 (cos.f64 y))))))","(fma.f64 (*.f64 (*.f64 2 (cos.f64 y)) (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (/.f64 (*.f64 a -1/3) b))","(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (*.f64 a -1/3) b))","(/.f64 (*.f64 -1/3 a) b)","(fma.f64 a (*.f64 (cbrt.f64 (/.f64 -1/27 b)) (pow.f64 (cbrt.f64 b) -2)) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","(fma.f64 a (*.f64 (cbrt.f64 (/.f64 1/9 (*.f64 b b))) (cbrt.f64 (/.f64 -1/3 b))) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (sqrt.f64 (sqrt.f64 (*.f64 x 4))))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (*.f64 (*.f64 -1/3 t) z))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 (*.f64 z t) (cbrt.f64 -1/3)) (cbrt.f64 1/9) y))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)) (sqrt.f64 (*.f64 x 4))) (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))","(fma.f64 a (/.f64 -1/3 b) (pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))) 3) 1/3))","(fma.f64 a (/.f64 (/.f64 -1 b) 3) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","(fma.f64 a (/.f64 -1/3 b) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (+.f64 (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (*.f64 (pow.f64 t 2) (*.f64 (pow.f64 z 2) (cos.f64 y))) (sqrt.f64 x))))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) 2)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cbrt.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (fma.f64 (*.f64 (pow.f64 (*.f64 t z) 2) (cos.f64 y)) -1/18 (fma.f64 1/3 (*.f64 (*.f64 t z) (sin.f64 y)) (cos.f64 y)))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (*.f64 x 4)) (*.f64 (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)) (cbrt.f64 (sqrt.f64 (*.f64 x 4))))))","(fma.f64 a (/.f64 -1/3 b) (+.f64 (*.f64 2/3 (*.f64 (*.f64 t (*.f64 z (sin.f64 y))) (sqrt.f64 x))) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x)))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (-.f64 (*.f64 (cos.f64 (*.f64 (*.f64 z t) -1/3)) (cos.f64 y)) (*.f64 (sin.f64 (*.f64 (*.f64 z t) -1/3)) (sin.f64 y)))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (pow.f64 (cbrt.f64 (fma.f64 (*.f64 z t) -1/3 y)) 3))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 t (*.f64 z -1/3) y))))","(fma.f64 a (*.f64 (cbrt.f64 (/.f64 -1/27 b)) (pow.f64 (cbrt.f64 b) -2)) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 4))) (*.f64 (cbrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y)))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 2 (*.f64 (cos.f64 y) (sqrt.f64 x))))","(fma.f64 a (*.f64 (pow.f64 b -1/3) (cbrt.f64 (/.f64 -1/27 (*.f64 b b)))) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (pow.f64 (pow.f64 (fma.f64 (*.f64 z t) -1/3 y) 3) 1/3))))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 (fma.f64 (*.f64 z t) -1/3 y))))","(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))"]],"link":["."],"name":["Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, K"],"oracle":[63.97758279866598],"outputs":[["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))"]],"time":294.287841796875,"times":[["x",11.875],["y",11.967041015625],["z",12.033935546875],["t",12.4150390625],["a",12.125],["b",11.971923828125],["(-.f64 (*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))) (/.f64 a (*.f64 b 3)))",12.9501953125],["(*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3))))",12.295166015625],["(*.f64 (*.f64 2 (sqrt.f64 x)) (cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3))))",12.43798828125],["(*.f64 2 (sqrt.f64 x))",11.946044921875],["(*.f64 2 (sqrt.f64 x))",12.194091796875],["(sqrt.f64 x)",11.878173828125],["(sqrt.f64 x)",12.046142578125],["(cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))",11.427978515625],["(cos.f64 (-.f64 y (/.f64 (*.f64 z t) 3)))",11.714111328125],["(-.f64 y (/.f64 (*.f64 z t) 3))",11.662841796875],["(-.f64 y (/.f64 (*.f64 z t) 3))",11.52001953125],["(/.f64 (*.f64 z t) 3)",10.412841796875],["(*.f64 z t)",10.201171875],["(/.f64 a (*.f64 b 3))",11.133056640625],["(/.f64 a (*.f64 b 3))",11.14892578125],["(*.f64 b 3)",11.97607421875],["(*.f64 b 3)",12.512939453125]],"type":"regimes"},{"compiler":[[29,22]],"inputs":[["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y))) (cbrt.f64 (*.f64 4 (*.f64 (pow.f64 (cos.f64 y) 2) x))) (/.f64 (/.f64 a -3) b))","(fma.f64 a (/.f64 -1/3 b) (*.f64 (sqrt.f64 (*.f64 x 4)) (cos.f64 y)))"]],"stop":[["fuel",1]],"time":22.192138671875,"type":"simplify"},{"time":0.016845703125,"type":"soundness"},{"compiler":[[29,22]],"remove-preprocessing":[[]],"time":13.111083984375,"type":"end"}]
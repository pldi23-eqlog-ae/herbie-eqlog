[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.2493898868560791,0.0009760856628417969,0.7496340274810791],[11,0.2489018440246582,0.0019521713256835938,0.7491459846496582],[10,0.2479257583618164,0.0039043426513671875,0.7481698989868164],[9,0.2459735870361328,0.007808685302734375,0.7462177276611328],[8,0.24206924438476563,0.01561737060546875,0.7423133850097656],[7,0.23426055908203125,0.0312347412109375,0.7345046997070313],[6,0.2186431884765625,0.062469482421875,0.7188873291015625],[5,0.187408447265625,0.12493896484375,0.687652587890625],[4,0.12493896484375,0.2498779296875,0.62518310546875],[3,0.0,0.499755859375,0.500244140625],[2,0.0,0.499755859375,0.500244140625],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.553955078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.673583984375,19],["body",256,"valid",324.634521484375,8256]],"time":333.402099609375,"type":"sample"},{"compiler":[[8,6]],"inputs":[["0"],["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))","(sqrt.f64 (*.f64 (+.f64 x -1) x))"]],"symmetry":[[]],"time":54.178955078125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))","(sqrt.f64 (*.f64 (+.f64 x -1) x))"]],"time":18.97802734375,"type":"simplify"},{"compiler":[[14,10]],"time":0.348876953125,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 (+.f64 x -1) x))","fresh",34.00390625],["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))","next",0.46875]],"compiler":[[7,5],[8,6],[7,5],[8,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.234375],"time":1.213134765625,"type":"prune"},{"compiler":[[19,12]],"locations":[["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))",0.46875,true]],"time":5.02783203125,"type":"localize"},{"count":[[1,4]],"series":[["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))","x","-inf",0.444091796875],["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))","x","inf",0.360107421875],["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))","x","0",0.72900390625]],"time":1.585205078125,"type":"series"},{"count":[[1,53]],"inputs":[["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) (*.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) 1/2) (*.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) 0) (sqrt.f64 (*.f64 (+.f64 x -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) (*.f64 0 (sqrt.f64 (*.f64 (+.f64 x -1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 (+.f64 x -1) x))) (*.f64 1/2 (sqrt.f64 (*.f64 (+.f64 x -1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 (+.f64 x -1) x))) (sqrt.f64 (*.f64 (+.f64 x -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))) (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)))) (*.f64 -1 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))) (cbrt.f64 (*.f64 (+.f64 x -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x -1) x)) (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 x) (cbrt.f64 (sqrt.f64 (+.f64 x -1)))) (cbrt.f64 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (sqrt.f64 (+.f64 x -1)) x)) (sqrt.f64 (sqrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (+.f64 x -1)) (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 x -1) (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (+.f64 x -1))) (*.f64 (cbrt.f64 (+.f64 x -1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (+.f64 x -1))) (sqrt.f64 (*.f64 (sqrt.f64 (+.f64 x -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 x)) (sqrt.f64 (*.f64 (+.f64 x -1) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 (+.f64 x -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 x -1))) (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1)) (*.f64 (sqrt.f64 x) (cbrt.f64 (sqrt.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (+.f64 x -1)) (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (sqrt.f64 (+.f64 x -1)) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (+.f64 x -1)))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 (+.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 x -1))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x))) (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 x -1))))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 x -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))) -1) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (+.f64 x -1))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))) (*.f64 (sqrt.f64 (sqrt.f64 (+.f64 x -1))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 x -1)))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 x -1)))) (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 x -1)))) (sqrt.f64 (sqrt.f64 x))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (+.f64 x -1)))) (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) (pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) 0) (sqrt.f64 (*.f64 (+.f64 x -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sqrt.f64 x) (cbrt.f64 (sqrt.f64 (+.f64 x -1)))) (cbrt.f64 (+.f64 (pow.f64 x 3) -1))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x -1) x) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) x) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (+.f64 x -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) x) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 (+.f64 x -1) x)))))))"]],"rules":[["egg-rr",53]],"time":22.173828125,"type":"rewrite"},{"count":[[57,60]],"inputs":[["x","(-.f64 x 1/2)","(-.f64 x (+.f64 1/2 (*.f64 1/8 (/.f64 1 x))))","(-.f64 x (+.f64 1/2 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 2))) (*.f64 1/8 (/.f64 1 x)))))"]],"method":["egg-herbie"],"outputs":[["x","(-.f64 x 1/2)","(+.f64 x -1/2)","(-.f64 x (+.f64 1/2 (*.f64 1/8 (/.f64 1 x))))","(+.f64 (+.f64 x -1/2) (/.f64 -1/8 x))","(-.f64 x (+.f64 1/2 (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 2))) (*.f64 1/8 (/.f64 1 x)))))","(-.f64 (+.f64 x -1/2) (/.f64 (+.f64 (/.f64 1/16 x) 1/8) x))"]],"time":37.03515625,"type":"simplify"},{"compiler":[[732,507]],"time":9.77099609375,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))","done",0.46875],["(+.f64 (+.f64 x -1/2) (/.f64 -1/8 x))","next",0.23496757853726058]],"compiler":[[8,6],[8,6],[8,6]],"count":[[62,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[60,1],"picked":[1,1]}],"min-error":[0],"time":9.223876953125,"type":"prune"},{"compiler":[[17,12]],"time":4.219970703125,"type":"localize"},{"compiler":[[1,1]],"time":0.109130859375,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))","done",0.46875],["(+.f64 (+.f64 x -1/2) (/.f64 -1/8 x))","done",0.23496757853726058]],"compiler":[[8,6],[8,6]],"count":[[2,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.68603515625,"type":"prune"},{"accuracy":[0.23496757853726058],"baseline":[0.23496757853726058],"branch":[["x",0.23496757853726058,1],["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))",0.23496757853726058,1]],"compiler":[[2,1],[8,6],[21,15]],"count":[[3,1]],"inputs":[["(+.f64 (+.f64 x -1/2) (/.f64 -1/8 x))","(sqrt.f64 (*.f64 (+.f64 x -1) x))","(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))"]],"link":["."],"name":["sqrt times"],"oracle":[34.47324882853726],"outputs":[["(+.f64 (+.f64 x -1/2) (/.f64 -1/8 x))"]],"time":6.970947265625,"times":[["x",2.721923828125],["(*.f64 (sqrt.f64 (-.f64 x 1)) (sqrt.f64 x))",3.583984375]],"type":"regimes"},{"compiler":[[8,6]],"inputs":[["(+.f64 (+.f64 x -1/2) (/.f64 -1/8 x))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 x -1/2) (/.f64 -1/8 x))"]],"stop":[["done",1]],"time":20.091064453125,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":8.202880859375,"type":"end"}]
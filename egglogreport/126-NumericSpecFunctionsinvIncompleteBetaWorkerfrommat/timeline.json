[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.4302435948047787,0.06292678427416831,0.506829620921053],[11,0.41560945892706513,0.09463407867588103,0.48975646239705384],[10,0.3941460596397519,0.12292674137279391,0.4829271989874542],[9,0.36682900600135326,0.18341450300067663,0.4497564909979701],[8,0.32780464366078377,0.23414617404341698,0.43804918229579926],[7,0.2809754088521004,0.34341438859701157,0.37561020255088806],[6,0.18731693923473358,0.43707285821437836,0.37561020255088806],[5,0.12487795948982239,0.6243897974491119,0.2507322430610657],[4,0.0,0.7492677569389343,0.2507322430610657],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":20.007080078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",15.789794921875,438],["body",512,"valid",0.06787109375,1],["body",256,"valid",315.222412109375,8255]],"time":339.02294921875,"type":"sample"},{"compiler":[[10,7]],"inputs":[["0","1"],["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))","(+.f64 (-.f64 1 y) (*.f64 x (sqrt.f64 y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(+.f64 (-.f64 1 y) (*.f64 x (sqrt.f64 y)))","(fma.f64 x (sqrt.f64 y) (-.f64 1 y))"]],"symmetry":[[]],"time":63.118896484375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))"]],"time":22.13818359375,"type":"simplify"},{"compiler":[[17,10]],"time":0.33984375,"type":"eval"},{"alts":[["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","next",0.12109375]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.12109375],"time":0.839111328125,"type":"prune"},{"compiler":[[17,9]],"locations":[["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))",0.12109375,true]],"time":4.327880859375,"type":"localize"},{"count":[[1,15]],"series":[["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","x","-inf",0.43701171875],["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","x","inf",0.406005859375],["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","x","0",0.451904296875],["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","y","-inf",0.339111328125],["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","y","inf",0.373046875],["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","y","0",0.527099609375]],"time":2.614013671875,"type":"series"},{"count":[[1,54]],"inputs":[["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 1/2) (*.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) (*.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 0) (fma.f64 y (sqrt.f64 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) (*.f64 1/2 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) (*.f64 0 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) (fma.f64 y (sqrt.f64 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (sqrt.f64 x) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (fma.f64 y (sqrt.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (sqrt.f64 x) 1) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y (sqrt.f64 x)) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 (neg.f64 x) (*.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y (sqrt.f64 x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 y (sqrt.f64 x)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (sqrt.f64 x)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y (sqrt.f64 x)) (/.f64 1 (fma.f64 x (+.f64 1 x) 1))) (/.f64 (pow.f64 x 3) (fma.f64 x (+.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 0) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 x (*.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (+.f64 x -1) (*.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 y (sqrt.f64 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 x (+.f64 1 x) 1)) (-.f64 (/.f64 (pow.f64 x 3) (fma.f64 x (+.f64 1 x) 1)) (*.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) (cbrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 2)) (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 x (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 x -1) (*.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (sqrt.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 x)) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (sqrt.f64 x)) (-.f64 1 (sqrt.f64 x)) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 x -1) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 -1 (sqrt.f64 x)) (-.f64 -1 (sqrt.f64 x)) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (cbrt.f64 (-.f64 1 x)) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (sqrt.f64 x))) (cbrt.f64 (*.f64 (*.f64 y y) x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) y (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) 1 (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (fma.f64 x (+.f64 1 x) 1)) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) 1 (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (sqrt.f64 x)) (-.f64 1 x))))))"]],"rules":[["egg-rr",54]],"time":21.281982421875,"type":"rewrite"},{"count":[[69,60]],"inputs":[["(-.f64 1 x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","1","(*.f64 -1 x)","(*.f64 -1 x)"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","1","(*.f64 -1 x)","(neg.f64 x)","(*.f64 -1 x)","(neg.f64 x)"]],"time":59.93310546875,"type":"simplify"},{"compiler":[[655,339]],"time":8.657958984375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) 3)","fresh",0.5385514649057246],["(fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 x)) (-.f64 1 x))","fresh",13.31640625],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","next",0.127285009768442],["(fma.f64 (*.f64 y (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)) (-.f64 1 x))","fresh",0.2354088379159781],["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","done",0.12109375]],"compiler":[[12,9],[15,10],[13,9],[14,8],[9,6],[12,9],[15,10],[13,9],[14,8]],"count":[[61,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[60,4],"picked":[1,1]}],"min-error":[0.03125],"time":13.235107421875,"type":"prune"},{"compiler":[[31,12]],"locations":[["(cbrt.f64 x)",0.0390625,true],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))",0.11328125,true],["(cbrt.f64 (sqrt.f64 x))",0.11328125,true],["(*.f64 y (cbrt.f64 (sqrt.f64 x)))",0.23828125,true]],"time":7.44091796875,"type":"localize"},{"count":[[4,46]],"series":[["(cbrt.f64 x)","x","-inf",0.371826171875],["(cbrt.f64 x)","x","inf",0.263916015625],["(cbrt.f64 x)","x","0",0.299072265625],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","x","-inf",0.513916015625],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","x","inf",0.299072265625],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","x","0",0.3330078125],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","y","-inf",0.23681640625],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","y","inf",0.244140625],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","y","0",0.76513671875],["(cbrt.f64 (sqrt.f64 x))","x","-inf",0.297119140625],["(cbrt.f64 (sqrt.f64 x))","x","inf",0.198974609375],["(cbrt.f64 (sqrt.f64 x))","x","0",4.1318359375],["(*.f64 y (cbrt.f64 (sqrt.f64 x)))","x","-inf",1.864990234375],["(*.f64 y (cbrt.f64 (sqrt.f64 x)))","x","inf",6.456787109375],["(*.f64 y (cbrt.f64 (sqrt.f64 x)))","x","0",6.6220703125],["(*.f64 y (cbrt.f64 (sqrt.f64 x)))","y","-inf",0.2978515625],["(*.f64 y (cbrt.f64 (sqrt.f64 x)))","y","inf",0.364013671875],["(*.f64 y (cbrt.f64 (sqrt.f64 x)))","y","0",21.991943359375]],"time":45.798095703125,"type":"series"},{"count":[[4,154]],"inputs":[["(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(cbrt.f64 (sqrt.f64 x))","(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","(cbrt.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (*.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) 0) (*.f64 y (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) 1/2) (*.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (*.f64 0 (*.f64 y (cbrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) (*.f64 y (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) (*.f64 1/2 (*.f64 y (cbrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x))) (*.f64 (cbrt.f64 (cbrt.f64 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) y) (cbrt.f64 (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) (pow.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) 2/3) (cbrt.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 x)))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (sqrt.f64 x))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 (cbrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) (sqrt.f64 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 (sqrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 x)) 0) (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 x)) 1/2) (*.f64 (cbrt.f64 (sqrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 0 (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (sqrt.f64 x))) (*.f64 1/2 (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 x))) (cbrt.f64 (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (cbrt.f64 (sqrt.f64 (sqrt.f64 x)))) (*.f64 -1 (cbrt.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 x))) -1) (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 x))) 1) (*.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 x)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) (/.f64 1/6 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) (*.f64 2 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) (*.f64 1/2 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (sqrt.f64 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) (*.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 0) (fma.f64 y (sqrt.f64 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 1/2) (*.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) (*.f64 0 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) (fma.f64 y (sqrt.f64 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) (*.f64 1/2 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (sqrt.f64 x) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (fma.f64 y (sqrt.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (sqrt.f64 x) 1) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y (sqrt.f64 x)) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 (neg.f64 x) (*.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y (sqrt.f64 x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 y (sqrt.f64 x)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (sqrt.f64 x)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 0) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y (sqrt.f64 x)) (/.f64 1 (fma.f64 x (+.f64 1 x) 1))) (/.f64 (pow.f64 x 3) (fma.f64 x (+.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 x (*.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (+.f64 x -1) (*.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 y (sqrt.f64 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 x (+.f64 1 x) 1)) (-.f64 (/.f64 (pow.f64 x 3) (fma.f64 x (+.f64 1 x) 1)) (*.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) (pow.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 2/3) (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 x (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 x -1) (*.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 x) 2/3) (cbrt.f64 (-.f64 1 x)) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (sqrt.f64 x)) (-.f64 1 (sqrt.f64 x)) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 x -1) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 -1 (sqrt.f64 x)) (-.f64 -1 (sqrt.f64 x)) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 x)) (pow.f64 (-.f64 1 x) 2/3) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (sqrt.f64 x))) (cbrt.f64 (*.f64 (*.f64 y y) x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) (cbrt.f64 (*.f64 (*.f64 (*.f64 y y) (cbrt.f64 x)) x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 y (cbrt.f64 (sqrt.f64 x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (sqrt.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) 1 (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) 1 (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (fma.f64 x (+.f64 1 x) 1)) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (sqrt.f64 x)) (-.f64 1 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) 0) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 x) 1/2) (*.f64 (cbrt.f64 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) (*.f64 0 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 x)) (*.f64 1/2 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (neg.f64 (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 (*.f64 (cbrt.f64 x) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (sqrt.f64 x))) (cbrt.f64 (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x (*.f64 2 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x (/.f64 2/3 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) (*.f64 2/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x (*.f64 1/6 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x (*.f64 1/2 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 2 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 x)))))"]],"rules":[["egg-rr",37],["egg-rr",55],["egg-rr",32],["egg-rr",30]],"time":33.684814453125,"type":"rewrite"},{"count":[[200,162]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(-.f64 1 x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","1","(+.f64 1 (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 1 (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 1 (*.f64 -1 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(*.f64 (pow.f64 (*.f64 1 x) 1/6) y)","(*.f64 y (cbrt.f64 (sqrt.f64 x)))","(pow.f64 x 1/6)","(cbrt.f64 (sqrt.f64 x))","(pow.f64 x 1/6)","(cbrt.f64 (sqrt.f64 x))","(pow.f64 x 1/6)","(cbrt.f64 (sqrt.f64 x))","(pow.f64 x 1/6)","(cbrt.f64 (sqrt.f64 x))","(pow.f64 x 1/6)","(cbrt.f64 (sqrt.f64 x))","(pow.f64 x 1/6)","(cbrt.f64 (sqrt.f64 x))","(pow.f64 x 1/6)","(cbrt.f64 (sqrt.f64 x))","(pow.f64 x 1/6)","(cbrt.f64 (sqrt.f64 x))","(-.f64 1 x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","1","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)"]],"time":149.4150390625,"type":"simplify"},{"compiler":[[2238,969]],"time":27.166015625,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 x)) (-.f64 1 x))","fresh",13.31640625],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 (sqrt.f64 x)))) (-.f64 1 x))","fresh",0.19310385745286215],["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) 3)","fresh",0.5385514649057246],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","done",0.127285009768442],["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))","next",0.12890625],["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","done",0.12109375],["(fma.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) (cbrt.f64 (*.f64 (*.f64 (*.f64 y y) (cbrt.f64 x)) x)) (-.f64 1 x))","fresh",18.30078125]],"compiler":[[15,10],[19,11],[12,9],[13,9],[13,9],[9,6],[21,14],[15,10],[19,11],[12,9],[13,9],[21,14]],"count":[[167,7]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[162,3],"picked":[1,1]}],"min-error":[0.00390625],"time":50.51611328125,"type":"prune"},{"compiler":[[30,12]],"locations":[["(cbrt.f64 x)",0.0390625,false],["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))",0.109375,true],["(cbrt.f64 (sqrt.f64 x))",0.11328125,false],["(*.f64 y (cbrt.f64 x))",0.23046875,true]],"time":7.3828125,"type":"localize"},{"count":[[2,30]],"series":[["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))","y","-inf",0.283203125],["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))","y","inf",0.22998046875],["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))","y","0",1.30810546875],["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))","x","-inf",0.410888671875],["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))","x","inf",0.399169921875],["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))","x","0",0.258056640625],["(*.f64 y (cbrt.f64 x))","x","-inf",0.430908203125],["(*.f64 y (cbrt.f64 x))","x","inf",0.31591796875],["(*.f64 y (cbrt.f64 x))","x","0",0.3310546875],["(*.f64 y (cbrt.f64 x))","y","-inf",0.31982421875],["(*.f64 y (cbrt.f64 x))","y","inf",0.320068359375],["(*.f64 y (cbrt.f64 x))","y","0",1.60009765625]],"time":6.363037109375,"type":"series"},{"count":[[2,85]],"inputs":[["(*.f64 y (cbrt.f64 x))","(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (cbrt.f64 x)) 0) (*.f64 y (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (cbrt.f64 x)) 1/2) (*.f64 (*.f64 y (cbrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (cbrt.f64 x)) (*.f64 (*.f64 y (cbrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (cbrt.f64 x))) (*.f64 y (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 y (cbrt.f64 x))) (*.f64 1/2 (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (cbrt.f64 x)) (*.f64 0 (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (cbrt.f64 (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 y y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y (cbrt.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y y) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/3)) y) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (*.f64 y (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) 0) (fma.f64 (sqrt.f64 x) y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) 1/2) (*.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) (*.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) y) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))) (fma.f64 (sqrt.f64 x) y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))) (*.f64 1/2 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) (*.f64 0 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 x) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) y 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (fma.f64 (sqrt.f64 x) y 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 x) y 1) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (sqrt.f64 x) y) (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 (neg.f64 x) (*.f64 (sqrt.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 (sqrt.f64 x) y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 (sqrt.f64 x) y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sqrt.f64 x) y) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (sqrt.f64 x) y) 0) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (sqrt.f64 x) y) (/.f64 1 (fma.f64 x (+.f64 1 x) 1))) (/.f64 (pow.f64 x 3) (fma.f64 x (+.f64 1 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 x (*.f64 (sqrt.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (+.f64 x -1) (*.f64 (sqrt.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (sqrt.f64 x) y 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 x (+.f64 1 x) 1)) (-.f64 (/.f64 (pow.f64 x 3) (fma.f64 x (+.f64 1 x) 1)) (*.f64 (sqrt.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))) (pow.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) 2/3) (cbrt.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 x (fma.f64 (sqrt.f64 x) y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 x -1) (*.f64 (sqrt.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 x) y (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x))) (*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 x)) y) (cbrt.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) y)) (cbrt.f64 (*.f64 x (*.f64 y y))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) y (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (*.f64 y (cbrt.f64 x)))) (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 x)) (pow.f64 (-.f64 1 x) 2/3) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (sqrt.f64 x)) (-.f64 1 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 -1 (sqrt.f64 x)) (-.f64 -1 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (-.f64 1 x) 2/3) (cbrt.f64 (-.f64 1 x)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 x -1) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 x) y) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 x) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (fma.f64 x (+.f64 1 x) 1)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) 1 (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) y) 1 (-.f64 1 x))))))"]],"rules":[["egg-rr",55],["egg-rr",30]],"time":25.261962890625,"type":"rewrite"},{"count":[[115,94]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","1","(+.f64 1 (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 1 (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","1","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 1 (*.f64 -1 x))","(-.f64 1 x)","(-.f64 1 x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))"]],"time":102.408203125,"type":"simplify"},{"compiler":[[2240,987]],"time":25.2109375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) 3)","fresh",0.5385514649057246],["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 y y) x))) (-.f64 1 x))","fresh",17.069355029305328],["(fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 x)) (-.f64 1 x))","fresh",13.31640625],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","done",0.127285009768442],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x))) (*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x))) (-.f64 1 x))","next",0.1738663086106521],["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))","done",0.12890625],["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","done",0.12109375],["(fma.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) (cbrt.f64 (*.f64 (*.f64 (*.f64 y y) (cbrt.f64 x)) x)) (-.f64 1 x))","fresh",18.30078125]],"compiler":[[12,9],[18,12],[15,10],[13,9],[18,12],[13,9],[9,6],[21,14],[12,9],[18,12],[15,10],[18,12],[21,14]],"count":[[170,8]],"kept":[{"done":[2,2],"fresh":[4,3],"new":[163,2],"picked":[1,1]}],"min-error":[0],"time":55.89501953125,"type":"prune"},{"compiler":[[50,15]],"locations":[["(cbrt.f64 (cbrt.f64 x))",0.13671875,true],["(cbrt.f64 (cbrt.f64 (sqrt.f64 x)))",0.15625,true],["(*.f64 y (cbrt.f64 x))",0.23046875,false],["(*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x)))",0.265625,true]],"time":10.52001953125,"type":"localize"},{"count":[[3,44]],"series":[["(cbrt.f64 (cbrt.f64 x))","x","-inf",1.18994140625],["(cbrt.f64 (cbrt.f64 x))","x","inf",0.315185546875],["(cbrt.f64 (cbrt.f64 x))","x","0",0.36181640625],["(cbrt.f64 (cbrt.f64 (sqrt.f64 x)))","x","-inf",20.8720703125],["(cbrt.f64 (cbrt.f64 (sqrt.f64 x)))","x","inf",0.31591796875],["(cbrt.f64 (cbrt.f64 (sqrt.f64 x)))","x","0",0.33203125],["(*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x)))","y","-inf",0.33203125],["(*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x)))","y","inf",0.298095703125],["(*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x)))","y","0",18.816162109375],["(*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x)))","x","-inf",7.35791015625],["(*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x)))","x","inf",4.944091796875],["(*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x)))","x","0",5.385986328125]],"time":60.7529296875,"type":"series"},{"count":[[3,87]],"inputs":[["(*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x)))","(cbrt.f64 (cbrt.f64 (sqrt.f64 x)))","(cbrt.f64 (cbrt.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (pow.f64 x 4/9)) 1/2) (*.f64 (*.f64 y (pow.f64 x 4/9)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (pow.f64 x 4/9)) 0) (*.f64 y (pow.f64 x 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (pow.f64 x 4/9)) (*.f64 (*.f64 y (pow.f64 x 4/9)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 y (pow.f64 x 4/9))) (*.f64 1/2 (*.f64 y (pow.f64 x 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (pow.f64 x 4/9))) (*.f64 y (pow.f64 x 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (pow.f64 x 4/9)) (*.f64 0 (*.f64 y (pow.f64 x 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/27) (*.f64 (cbrt.f64 (pow.f64 x 2/9)) (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/9)) (*.f64 y (cbrt.f64 x))) (pow.f64 x 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (pow.f64 x 4/9))) (pow.f64 (*.f64 y (pow.f64 x 4/9)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (pow.f64 x 4/9)) 2/3) (cbrt.f64 (*.f64 y (pow.f64 x 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 x) (*.f64 y (cbrt.f64 x)))) (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y (cbrt.f64 x)) (pow.f64 x 1/27)) (cbrt.f64 (pow.f64 x 2/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) y) (cbrt.f64 (cbrt.f64 x))) (pow.f64 x 2/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (pow.f64 x 4/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 4/9) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/9)) (*.f64 (*.f64 y (cbrt.f64 x)) (pow.f64 x 1/27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 x) (*.f64 y (cbrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/9) (*.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) y) (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) y) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (cbrt.f64 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 y (pow.f64 x 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y (pow.f64 x 4/9))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (pow.f64 x 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 x 4/9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (pow.f64 x 4/9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (pow.f64 x 4/9)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (pow.f64 x 4/9))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (pow.f64 x 4/9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 y (pow.f64 x 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (pow.f64 x 4/9)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 1/18) 1/2) (*.f64 (pow.f64 x 1/18) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x 1/18) 0) (pow.f64 x 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x 1/18) (*.f64 (pow.f64 x 1/18) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (pow.f64 x 1/18)) (*.f64 1/2 (pow.f64 x 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 x 1/18)) (pow.f64 x 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x 1/18) (*.f64 0 (pow.f64 x 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 1/18)) (pow.f64 x 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/27) (cbrt.f64 (pow.f64 x 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 1/12)) (cbrt.f64 (pow.f64 x 1/12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (sqrt.f64 x)) 1/9) (pow.f64 (sqrt.f64 (sqrt.f64 x)) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 x 1/18))) (cbrt.f64 (cbrt.f64 (pow.f64 x 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 x 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x 1/18)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 x 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/18) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x 1/18) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/18)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x 1/18)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/18) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 x)) 2/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 x 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (cbrt.f64 (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) 1/2) (*.f64 (cbrt.f64 (cbrt.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) 0) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (cbrt.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (cbrt.f64 x))) (*.f64 1/2 (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 0 (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x 1/18)) (neg.f64 (pow.f64 x 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/18) (pow.f64 x 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/9)) (pow.f64 x 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 1/18)) (cbrt.f64 (pow.f64 x 5/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/27) (cbrt.f64 (pow.f64 x 2/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 5/18)) (cbrt.f64 (pow.f64 x 1/18)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 1/27)) (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 x) 8/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) 2/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x x) 1/18)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 x)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x 1/18)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/27) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/18) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (cbrt.f64 x))))))"]],"rules":[["egg-rr",29],["egg-rr",24],["egg-rr",34]],"time":33.428955078125,"type":"rewrite"},{"count":[[131,92]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 x 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 x 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 x 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 x 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(*.f64 (pow.f64 (*.f64 -1 x) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(*.f64 (pow.f64 (*.f64 -1 x) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(*.f64 (pow.f64 (*.f64 -1 x) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(*.f64 (pow.f64 (*.f64 -1 x) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 x 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 x 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 x 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 x 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 4)) 1/9) y)","(*.f64 (pow.f64 (pow.f64 x 4) 1/9) y)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/18)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(pow.f64 x 1/9)","(*.f64 (pow.f64 (*.f64 -1 x) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(neg.f64 (pow.f64 (neg.f64 x) 1/9))","(*.f64 (pow.f64 (*.f64 -1 x) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(neg.f64 (pow.f64 (neg.f64 x) 1/9))","(*.f64 (pow.f64 (*.f64 -1 x) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(neg.f64 (pow.f64 (neg.f64 x) 1/9))","(*.f64 (pow.f64 (*.f64 -1 x) 1/9) (pow.f64 (*.f64 1 (cbrt.f64 -1)) 1/3))","(neg.f64 (pow.f64 (neg.f64 x) 1/9))"]],"time":132.635009765625,"type":"simplify"},{"compiler":[[2410,1007]],"time":23.300048828125,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) 3)","fresh",0.5385514649057246],["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 y y) x))) (-.f64 1 x))","fresh",17.069355029305328],["(fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 x)) (-.f64 1 x))","fresh",13.31640625],["(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","done",0.127285009768442],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x))) (*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x))) (-.f64 1 x))","done",0.1738663086106521],["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))","done",0.12890625],["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","done",0.12109375],["(fma.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) (cbrt.f64 (*.f64 (*.f64 (*.f64 y y) (cbrt.f64 x)) x)) (-.f64 1 x))","fresh",18.30078125]],"compiler":[[12,9],[18,12],[15,10],[13,9],[18,12],[13,9],[9,6],[21,14]],"count":[[131,8]],"kept":[{"done":[3,3],"fresh":[4,4],"new":[123,0],"picked":[1,1]}],"min-error":[0],"time":29.882080078125,"type":"prune"},{"accuracy":[0.12109375],"baseline":[0.12109375],"branch":[["x",0.12109375,1],["y",0.12109375,1],["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))",0.12109375,1]],"compiler":[[3,2],[3,2],[10,7],[142,62]],"count":[[11,1]],"inputs":[["(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 y y) x))) (-.f64 1 x))","(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 x))) (*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x))) (-.f64 1 x))","(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (sqrt.f64 x)) (cbrt.f64 (sqrt.f64 (sqrt.f64 x)))) (-.f64 1 x))","(fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 y (cbrt.f64 x)) (-.f64 1 x))","(fma.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x)))) (cbrt.f64 (*.f64 (*.f64 (*.f64 y y) (cbrt.f64 x)) x)) (-.f64 1 x))","(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) (-.f64 1 x))) 3)","(fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 x)) (-.f64 1 x))","(fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (-.f64 1 x))","(fma.f64 (*.f64 y (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)) (-.f64 1 x))","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))"]],"link":["."],"name":["Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, E"],"oracle":[18.584098925831963],"outputs":[["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))"]],"time":17.906005859375,"times":[["x",4.7900390625],["y",4.677978515625],["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))",5.9580078125]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y (sqrt.f64 x) (-.f64 1 x))"]],"stop":[["fuel",1]],"time":18.10791015625,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":8.420166015625,"type":"end"}]
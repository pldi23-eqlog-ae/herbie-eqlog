[{"compiler":[[18,13]],"method":["search"],"sampling":[[12,0.03508763572426887,0.2300189453035404,0.7348934189721907],[11,0.023391757149512582,0.24171482387829668,0.7348934189721907],[10,0.0,0.280701085794151,0.719298914205849],[9,0.0,0.3118900953268344,0.6881099046731656],[8,0.0,0.3118900953268344,0.6881099046731656],[7,0.0,0.3118900953268344,0.6881099046731656],[6,0.0,0.8109142478497695,0.1890857521502305],[5,0.0,0.8732922669151364,0.1267077330848636],[4,0.0,0.8732922669151364,0.1267077330848636],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":72.39990234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",41.589599609375,533],["body",1024,"valid",227.05126953125,680],["body",512,"valid",151.092529296875,910],["body",2048,"valid",13.48876953125,27],["body",256,"valid",511.140625,6639]],"time":953.72119140625,"type":"sample"},{"compiler":[[17,12]],"inputs":[["0","1","2","3"],["(-.f64 (+.f64 (*.f64 x (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 y (log.f64 x)) (*.f64 z (log.f64 (-.f64 1 x)))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 y)) (*.f64 x (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 t (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) x)","(-.f64 (+.f64 (*.f64 x (log.f64 z)) (*.f64 y (log.f64 (-.f64 1 z)))) t)","(-.f64 (+.f64 (*.f64 x (log.f64 t)) (*.f64 z (log.f64 (-.f64 1 t)))) y)","(-.f64 (+.f64 (*.f64 x (log.f64 y)) (*.f64 t (log.f64 (-.f64 1 y)))) z)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(-.f64 (+.f64 (*.f64 x (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 x (log.f64 y) (*.f64 z (log1p.f64 (neg.f64 y)))) t)","(-.f64 (+.f64 (*.f64 y (log.f64 x)) (*.f64 z (log.f64 (-.f64 1 x)))) t)","(-.f64 (fma.f64 y (log.f64 x) (*.f64 z (log1p.f64 (neg.f64 x)))) t)","(-.f64 (+.f64 (*.f64 z (log.f64 y)) (*.f64 x (log.f64 (-.f64 1 y)))) t)","(-.f64 (fma.f64 z (log.f64 y) (*.f64 x (log1p.f64 (neg.f64 y)))) t)","(-.f64 (+.f64 (*.f64 t (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) x)","(-.f64 (fma.f64 t (log.f64 y) (*.f64 z (log1p.f64 (neg.f64 y)))) x)","(-.f64 (+.f64 (*.f64 x (log.f64 z)) (*.f64 y (log.f64 (-.f64 1 z)))) t)","(-.f64 (fma.f64 x (log.f64 z) (*.f64 y (log1p.f64 (neg.f64 z)))) t)","(-.f64 (+.f64 (*.f64 x (log.f64 t)) (*.f64 z (log.f64 (-.f64 1 t)))) y)","(-.f64 (fma.f64 x (log.f64 t) (*.f64 z (log1p.f64 (neg.f64 t)))) y)","(-.f64 (+.f64 (*.f64 x (log.f64 y)) (*.f64 t (log.f64 (-.f64 1 y)))) z)","(-.f64 (fma.f64 x (log.f64 y) (*.f64 t (log1p.f64 (neg.f64 y)))) z)"]],"symmetry":[[]],"time":75.546875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (+.f64 (*.f64 x (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) t)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 (*.f64 x (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))"]],"time":20.0029296875,"type":"simplify"},{"compiler":[[28,17]],"time":0.463134765625,"type":"eval"},{"alts":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","next",0.0859375]],"compiler":[[15,10],[15,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0859375],"time":0.993896484375,"type":"prune"},{"compiler":[[34,10]],"locations":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))",0.00390625,true],["(fma.f64 x (log.f64 y) (neg.f64 t))",0.1171875,true]],"time":8.35302734375,"type":"localize"},{"count":[[2,84]],"series":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","t","-inf",0.193115234375],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","t","inf",0.182861328125],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","t","0",1.109130859375],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","x","-inf",0.17919921875],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","x","inf",0.198974609375],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","x","0",1.119140625],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","y","-inf",0.409912109375],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","y","inf",0.426025390625],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","y","0",0.329833984375],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","z","-inf",0.322998046875],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","z","inf",0.291015625],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","z","0",4.47509765625],["(fma.f64 x (log.f64 y) (neg.f64 t))","t","-inf",0.196044921875],["(fma.f64 x (log.f64 y) (neg.f64 t))","t","inf",0.230224609375],["(fma.f64 x (log.f64 y) (neg.f64 t))","t","0",1.087158203125],["(fma.f64 x (log.f64 y) (neg.f64 t))","y","-inf",10.767822265625],["(fma.f64 x (log.f64 y) (neg.f64 t))","y","inf",4.4619140625],["(fma.f64 x (log.f64 y) (neg.f64 t))","y","0",13.148193359375],["(fma.f64 x (log.f64 y) (neg.f64 t))","x","-inf",0.319091796875],["(fma.f64 x (log.f64 y) (neg.f64 t))","x","inf",0.322998046875],["(fma.f64 x (log.f64 y) (neg.f64 t))","x","0",3.401123046875]],"time":43.509033203125,"type":"series"},{"count":[[2,98]],"inputs":[["(fma.f64 x (log.f64 y) (neg.f64 t))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 t) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (-.f64 t (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 t) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (-.f64 t (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) (neg.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 t 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (*.f64 (cbrt.f64 (neg.f64 t)) (cbrt.f64 (*.f64 x (log.f64 y)))))) (+.f64 (cbrt.f64 (neg.f64 t)) (cbrt.f64 (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3) (*.f64 0 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (+.f64 0 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (-.f64 (pow.f64 t 2/3) (*.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 (neg.f64 t))))) (+.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (+.f64 (pow.f64 t 2/3) (*.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 t)))) (-.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 t (*.f64 x (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 t (*.f64 x (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (pow.f64 (log.f64 y) 2/3) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (log.f64 y)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (neg.f64 (pow.f64 t 2/3)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 t (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t -1 (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 t)) (pow.f64 t 2/3) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 t 2/3) (cbrt.f64 (neg.f64 t)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 t) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 t) 1 (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 y)) 1 (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (neg.f64 t))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (log1p.f64 (neg.f64 y))) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (-.f64 (*.f64 z (log1p.f64 (neg.f64 y))) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 t) (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 z (log1p.f64 (neg.f64 y))) t) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y))))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y))) -1)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) (-.f64 t (*.f64 z (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 z (log1p.f64 (neg.f64 y))) (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) (*.f64 (neg.f64 z) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 z (log1p.f64 (neg.f64 y))) t) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) (/.f64 (-.f64 t (*.f64 z (log1p.f64 (neg.f64 y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (-.f64 t (*.f64 x (log.f64 y))) (*.f64 z (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 t (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))) (pow.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 2/3) (cbrt.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))))) (neg.f64 (pow.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)) (-.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3) (*.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (+.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)) (*.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))))) (+.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 t (*.f64 z (log1p.f64 (neg.f64 y)))) (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 t (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 (neg.f64 y)) z (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (log1p.f64 (neg.f64 y)))) (pow.f64 (log1p.f64 (neg.f64 y)) 2/3) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (log1p.f64 (neg.f64 y))) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 t (*.f64 x (log.f64 y))) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (log1p.f64 (neg.f64 y))) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 1 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (neg.f64 t)) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1 (*.f64 z (log1p.f64 (neg.f64 y))))))))"]],"rules":[["egg-rr",51],["egg-rr",47]],"time":47.64599609375,"type":"rewrite"},{"count":[[182,137]],"inputs":[["(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) t)","(-.f64 (*.f64 (log.f64 y) x) t)","(-.f64 (*.f64 (log.f64 y) x) t)","(-.f64 (*.f64 (log.f64 y) x) t)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(*.f64 z (log.f64 (-.f64 1 y)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (*.f64 (log.f64 y) x) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (log.f64 y) x)) t)","(-.f64 (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (log.f64 y) x))) t)","(-.f64 (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1/3 (*.f64 (pow.f64 y 3) z))))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))) t)","(-.f64 (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) t)","(-.f64 (+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))) t)","(-.f64 (+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1/3 (/.f64 z (pow.f64 y 3))) (+.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))))) t)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z))) t)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (*.f64 -1 (/.f64 z y)))) t)","(-.f64 (+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (*.f64 -1 (/.f64 z y))))) t)","(-.f64 (+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 -1/3 (/.f64 z (pow.f64 y 3))))))) t)","(-.f64 (*.f64 z (log.f64 (-.f64 1 y))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (log.f64 y) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (log.f64 y) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (log.f64 y) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (log.f64 y) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (log.f64 y) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (*.f64 (log.f64 y) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 y) z (fma.f64 (log.f64 y) x (neg.f64 t)))","(-.f64 (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (log.f64 y) x))) t)","(+.f64 (*.f64 z (+.f64 (*.f64 -1/2 (*.f64 y y)) (neg.f64 y))) (fma.f64 (log.f64 y) x (neg.f64 t)))","(-.f64 (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 (log.f64 y) x) (*.f64 -1/3 (*.f64 (pow.f64 y 3) z))))) t)","(-.f64 (+.f64 (*.f64 z (+.f64 (*.f64 -1/2 (*.f64 y y)) (neg.f64 y))) (fma.f64 (log.f64 y) x (*.f64 (*.f64 -1/3 (pow.f64 y 3)) z))) t)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))) t)","(-.f64 (fma.f64 z (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) x)) t)","(-.f64 (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))) t)","(-.f64 (-.f64 (fma.f64 z (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) x)) (/.f64 z y)) t)","(-.f64 (+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))))) t)","(-.f64 (fma.f64 -1/2 (/.f64 z (*.f64 y y)) (-.f64 (fma.f64 z (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) x)) (/.f64 z y))) t)","(-.f64 (+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1/3 (/.f64 z (pow.f64 y 3))) (+.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))))) t)","(-.f64 (fma.f64 -1/2 (/.f64 z (*.f64 y y)) (-.f64 (fma.f64 (/.f64 z (pow.f64 y 3)) -1/3 (fma.f64 z (+.f64 (log.f64 -1) (log.f64 y)) (*.f64 (log.f64 y) x))) (/.f64 z y))) t)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z))) t)","(-.f64 (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (*.f64 (neg.f64 z) (neg.f64 (log.f64 (neg.f64 y))))) t)","(-.f64 (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (*.f64 -1 (/.f64 z y)))) t)","(-.f64 (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 (fma.f64 (neg.f64 (log.f64 (neg.f64 y))) z (/.f64 z y)))) t)","(-.f64 (+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (*.f64 -1 (/.f64 z y))))) t)","(-.f64 (fma.f64 -1/2 (/.f64 z (*.f64 y y)) (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 (fma.f64 (neg.f64 (log.f64 (neg.f64 y))) z (/.f64 z y))))) t)","(-.f64 (+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 -1/3 (/.f64 z (pow.f64 y 3))))))) t)","(-.f64 (+.f64 (fma.f64 -1/2 (/.f64 z (*.f64 y y)) (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 (fma.f64 (neg.f64 (log.f64 (neg.f64 y))) z (/.f64 z y))))) (/.f64 (*.f64 -1/3 z) (pow.f64 y 3))) t)","(-.f64 (*.f64 z (log.f64 (-.f64 1 y))) t)","(fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(*.f64 (log.f64 y) x)","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))) t)","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y))))","(fma.f64 (log.f64 y) x (*.f64 z (log1p.f64 (neg.f64 y))))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(+.f64 (*.f64 -1 t) (+.f64 (*.f64 (log.f64 y) x) (*.f64 z (log.f64 (-.f64 1 y)))))","(fma.f64 x (log.f64 y) (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))"]],"time":263.56103515625,"type":"simplify"},{"compiler":[[2304,728]],"time":19.22900390625,"type":"eval"},{"alts":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","next",0.6623002930532609],["(fma.f64 z (log1p.f64 (neg.f64 y)) (-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))))","fresh",7.434540941927152],["(fma.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)) (fma.f64 x (log.f64 y) (neg.f64 t)))","fresh",3.8451599556138847]],"compiler":[[18,13],[19,14],[25,15],[18,13],[19,14],[25,15]],"count":[[138,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[137,3],"picked":[1,0]}],"min-error":[0.04296875],"time":33.156982421875,"type":"prune"},{"compiler":[[54,16]],"locations":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))",0.00390625,true],["(cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))",0.09375,true],["(fma.f64 x (log.f64 y) (neg.f64 t))",0.1171875,false],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)",0.7736666016639131,true]],"time":11.739990234375,"type":"localize"},{"count":[[3,76]],"series":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","t","-inf",0.276123046875],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","t","inf",0.303955078125],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","t","0",0.77783203125],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","x","-inf",0.291015625],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","x","inf",0.321044921875],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","x","0",0.842041015625],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","y","-inf",0.2958984375],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","y","inf",0.301025390625],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","y","0",0.240966796875],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","z","-inf",0.2060546875],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","z","inf",0.195068359375],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","z","0",0.5791015625],["(cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))","t","-inf",0.261962890625],["(cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))","t","inf",0.240966796875],["(cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))","t","0",0.42822265625],["(cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))","y","-inf",0.205078125],["(cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))","y","inf",0.180908203125],["(cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))","y","0",0.177001953125],["(cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))","x","-inf",0.239990234375],["(cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))","x","inf",0.27294921875],["(cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))","x","0",0.56591796875],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)","t","-inf",0.466796875],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)","t","inf",0.541015625],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)","t","0",2.010009765625],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)","y","-inf",1.507080078125],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)","y","inf",2.156005859375],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)","y","0",1.56396484375],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)","x","-inf",0.466064453125],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)","x","inf",1.031982421875],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)","x","0",3.0419921875]],"time":20.574951171875,"type":"series"},{"count":[[3,100]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)","(cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 0) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) (*.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (log.f64 y) (neg.f64 t))) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) (*.f64 0 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 t) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 7/3) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 t)) (pow.f64 t 2/3) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (neg.f64 (pow.f64 t 2/3)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 t 2/3) (cbrt.f64 (neg.f64 t)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (log.f64 y)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (pow.f64 (log.f64 y) 2/3) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 y)) 1 (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t -1 (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 t) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 t) 1 (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 t (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (neg.f64 t))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 0) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (*.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (*.f64 0 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 0) (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) (*.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (log1p.f64 (neg.f64 y))) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))) (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) (*.f64 0 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 t) (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 z (log1p.f64 (neg.f64 y))) (neg.f64 t)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y))) 0) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (+.f64 (neg.f64 t) (*.f64 z (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y))) 1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) (-.f64 t (*.f64 z (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 (log1p.f64 (neg.f64 y)) z (*.f64 x (log.f64 y))) 0) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))) (pow.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 2/3) (cbrt.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 (neg.f64 y)) z (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) (log1p.f64 (neg.f64 y))) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (log1p.f64 (neg.f64 y)))) (pow.f64 (log1p.f64 (neg.f64 y)) 2/3) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 7/3) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3)) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2/3) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 1 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (log1p.f64 (neg.f64 y))) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (log.f64 y) (neg.f64 t)) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1 (*.f64 z (log1p.f64 (neg.f64 y))))))))"]],"rules":[["egg-rr",41],["egg-rr",18],["egg-rr",41]],"time":31.299072265625,"type":"rewrite"},{"count":[[176,184]],"inputs":[["(*.f64 -1 (*.f64 (pow.f64 1 1/3) t))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t)))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (cbrt.f64 -1))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (log.f64 y))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (*.f64 (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (log.f64 y) 3) t))) (*.f64 -2/3 (*.f64 (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (cbrt.f64 -1)) (pow.f64 (/.f64 1 t) 1/3)))) (cbrt.f64 -1))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2)))))))))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (cbrt.f64 -1))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t)))))","(*.f64 (-.f64 (*.f64 (log.f64 y) x) t) (pow.f64 1 1/3))","(*.f64 (-.f64 (*.f64 (log.f64 y) x) t) (pow.f64 1 1/3))","(*.f64 (-.f64 (*.f64 (log.f64 y) x) t) (pow.f64 1 1/3))","(*.f64 (-.f64 (*.f64 (log.f64 y) x) t) (pow.f64 1 1/3))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t))","(*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3))","(*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3))","(*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3))","(*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))))) (pow.f64 t 2)) (+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))))","(+.f64 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))))) (pow.f64 t 2)) (+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (+.f64 (*.f64 (pow.f64 t 3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 (*.f64 (log.f64 y) x)))) (*.f64 -2/3 (*.f64 (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)))) (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/3))))) (+.f64 (*.f64 -1/3 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (pow.f64 1 1/3))) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/9) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9))))))))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))))","(*.f64 (pow.f64 (*.f64 1 t) 1/3) (cbrt.f64 -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (cbrt.f64 -1)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x)))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x)))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2)))))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x)))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))))) (*.f64 -1/3 (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3))))))","(pow.f64 (-.f64 (*.f64 (log.f64 y) x) t) 1/3)","(pow.f64 (-.f64 (*.f64 (log.f64 y) x) t) 1/3)","(pow.f64 (-.f64 (*.f64 (log.f64 y) x) t) 1/3)","(pow.f64 (-.f64 (*.f64 (log.f64 y) x) t) 1/3)","(pow.f64 (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t) 1/3)","(pow.f64 (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t) 1/3)","(pow.f64 (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t) 1/3)","(pow.f64 (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) 1/3)","(pow.f64 (*.f64 (log.f64 y) x) 1/3)","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/9) t)) (pow.f64 (*.f64 (log.f64 y) x) 1/3))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/9) t)) (+.f64 (pow.f64 (*.f64 (log.f64 y) x) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 7) (pow.f64 x 7))) 1/9) (pow.f64 t 2)))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/9) t)) (+.f64 (pow.f64 (*.f64 (log.f64 y) x) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)))) (pow.f64 t 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 7) (pow.f64 x 7))) 1/9) (pow.f64 t 2))))))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(*.f64 z (log.f64 (-.f64 1 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(*.f64 z (log.f64 (-.f64 1 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 y 3) z)) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))))","(+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)) (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))))","(+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))))","(+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))))))","(+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1/3 (/.f64 z (pow.f64 y 3))) (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))))))","(+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3)) (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)))","(+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (*.f64 -1 (/.f64 z y))))","(+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (*.f64 -1 (/.f64 z y)))))","(+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 -1/3 (/.f64 z (pow.f64 y 3)))))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t)))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (cbrt.f64 -1))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t)))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (log.f64 y) 3) t))) (*.f64 -2/3 (*.f64 (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (cbrt.f64 -1)) (pow.f64 (/.f64 1 t) 1/3)))) (cbrt.f64 -1)) (pow.f64 (*.f64 1 t) 1/3)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (log.f64 y))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2)))))))))) (pow.f64 x 3)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (cbrt.f64 -1))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t))))))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log.f64 (-.f64 1 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))))","(+.f64 (*.f64 (pow.f64 t 2) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9))))) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))))","(+.f64 (*.f64 (pow.f64 t 2) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9))))) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/9) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 (*.f64 (log.f64 y) x)))) (*.f64 -2/3 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/3))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/3 (*.f64 (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)))) (pow.f64 1 1/3)))))) (pow.f64 t 3)) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))))))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log.f64 (-.f64 1 y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (pow.f64 1 1/3) t))","(neg.f64 t)","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t)))","(fma.f64 (*.f64 (pow.f64 (pow.f64 t 4) 1/9) (log.f64 y)) x (neg.f64 t))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (cbrt.f64 -1))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t))))","(fma.f64 (*.f64 (pow.f64 (pow.f64 t 4) 1/9) (log.f64 y)) x (fma.f64 (fma.f64 (cbrt.f64 t) (neg.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 t -4) 1/9) (pow.f64 (log.f64 y) 2)) -1/9)) (*.f64 (*.f64 (pow.f64 (/.f64 1 t) 1/9) (neg.f64 (pow.f64 (log.f64 y) 2))) 1/9)) (*.f64 x x) (neg.f64 t)))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (log.f64 y))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (*.f64 (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (log.f64 y) 3) t))) (*.f64 -2/3 (*.f64 (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (cbrt.f64 -1)) (pow.f64 (/.f64 1 t) 1/3)))) (cbrt.f64 -1))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2)))))))))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (cbrt.f64 -1))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t)))))","(fma.f64 (*.f64 (pow.f64 (pow.f64 t 4) 1/9) (log.f64 y)) x (fma.f64 (fma.f64 (neg.f64 (fma.f64 2/27 (/.f64 (pow.f64 (log.f64 y) 3) t) (*.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 t)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 t -2)) (pow.f64 (log.f64 y) 3)) (+.f64 -2/9 1/27))))))) (cbrt.f64 t) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 t -2) 1/9) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 t -4) 1/9) (pow.f64 (log.f64 y) 2)) -1/9) (log.f64 y))) (fma.f64 -2/27 (*.f64 (cbrt.f64 (pow.f64 t -2)) (pow.f64 (log.f64 y) 3)) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 t -2)) (pow.f64 (log.f64 y) 3)) (+.f64 -2/9 1/27)))))) (pow.f64 x 3) (fma.f64 (fma.f64 (cbrt.f64 t) (neg.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 t -4) 1/9) (pow.f64 (log.f64 y) 2)) -1/9)) (*.f64 (*.f64 (pow.f64 (/.f64 1 t) 1/9) (neg.f64 (pow.f64 (log.f64 y) 2))) 1/9)) (*.f64 x x) (neg.f64 t))))","(*.f64 (-.f64 (*.f64 (log.f64 y) x) t) (pow.f64 1 1/3))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (-.f64 (*.f64 (log.f64 y) x) t) (pow.f64 1 1/3))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (-.f64 (*.f64 (log.f64 y) x) t) (pow.f64 1 1/3))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (-.f64 (*.f64 (log.f64 y) x) t) (pow.f64 1 1/3))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t))","(*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t))","(*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t))","(*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3))","(fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(fma.f64 t (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) 4) 1/9) -1) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))))) (pow.f64 t 2)) (+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))))","(fma.f64 (fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -4) 1/9) -1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9) 1/9)) (*.f64 t t) (fma.f64 t (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) 4) 1/9) -1) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))))) (pow.f64 t 2)) (+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (+.f64 (*.f64 (pow.f64 t 3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 (*.f64 (log.f64 y) x)))) (*.f64 -2/3 (*.f64 (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)))) (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/3))))) (+.f64 (*.f64 -1/3 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (pow.f64 1 1/3))) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/9) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9))))))))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))))","(fma.f64 (fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -4) 1/9) -1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9) 1/9)) (*.f64 t t) (fma.f64 t (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) 4) 1/9) -1) (fma.f64 (fma.f64 2/27 (cbrt.f64 (pow.f64 (*.f64 (log.f64 y) x) -2)) (fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (+.f64 (/.f64 2/27 (*.f64 (log.f64 y) x)) (*.f64 (*.f64 -2/3 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 y) x) -2)) (+.f64 2/9 -1/27))) (cbrt.f64 (/.f64 1 (*.f64 (log.f64 y) x))))) (*.f64 -1/3 (+.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 y) x) -2)) (+.f64 2/9 -1/27)) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -2) 1/9) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -4) 1/9) -1/9)))))) (pow.f64 t 3) (*.f64 (log.f64 y) x))))","(*.f64 (pow.f64 (*.f64 1 t) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 t))","(+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (cbrt.f64 -1)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x)))))","(+.f64 (cbrt.f64 (neg.f64 t)) (*.f64 1/3 (*.f64 (pow.f64 (pow.f64 t -2) 1/9) (*.f64 (log.f64 y) x))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x)))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2)))))))","(+.f64 (cbrt.f64 (neg.f64 t)) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 t -2) 1/9) (*.f64 (log.f64 y) x)) (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 t -7) 1/9)) (neg.f64 (pow.f64 (*.f64 (log.f64 y) x) 2)))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (log.f64 y) x)))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))))) (*.f64 -1/3 (*.f64 (/.f64 (*.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3))))))","(+.f64 (cbrt.f64 (neg.f64 t)) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 t -2) 1/9) (*.f64 (log.f64 y) x)) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 t -7) 1/9) (neg.f64 (pow.f64 (*.f64 (log.f64 y) x) 2))) (*.f64 -1/3 (*.f64 (*.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 t -2)) (pow.f64 (log.f64 y) 3)) (+.f64 -2/9 1/27)) (pow.f64 x 3)) (cbrt.f64 (pow.f64 t -2)))))))","(pow.f64 (-.f64 (*.f64 (log.f64 y) x) t) 1/3)","(cbrt.f64 (fma.f64 (log.f64 y) x (neg.f64 t)))","(pow.f64 (-.f64 (*.f64 (log.f64 y) x) t) 1/3)","(cbrt.f64 (fma.f64 (log.f64 y) x (neg.f64 t)))","(pow.f64 (-.f64 (*.f64 (log.f64 y) x) t) 1/3)","(cbrt.f64 (fma.f64 (log.f64 y) x (neg.f64 t)))","(pow.f64 (-.f64 (*.f64 (log.f64 y) x) t) 1/3)","(cbrt.f64 (fma.f64 (log.f64 y) x (neg.f64 t)))","(pow.f64 (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t) 1/3)","(cbrt.f64 (fma.f64 (log.f64 y) x (neg.f64 t)))","(pow.f64 (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t) 1/3)","(cbrt.f64 (fma.f64 (log.f64 y) x (neg.f64 t)))","(pow.f64 (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t) 1/3)","(cbrt.f64 (fma.f64 (log.f64 y) x (neg.f64 t)))","(pow.f64 (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t) 1/3)","(cbrt.f64 (fma.f64 (log.f64 y) x (neg.f64 t)))","(pow.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) 1/3)","(cbrt.f64 (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t)))","(pow.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) 1/3)","(cbrt.f64 (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t)))","(pow.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) 1/3)","(cbrt.f64 (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t)))","(pow.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) 1/3)","(cbrt.f64 (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t)))","(pow.f64 (*.f64 (log.f64 y) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/9) t)) (pow.f64 (*.f64 (log.f64 y) x) 1/3))","(fma.f64 -1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -2) 1/9) t) (cbrt.f64 (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/9) t)) (+.f64 (pow.f64 (*.f64 (log.f64 y) x) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 7) (pow.f64 x 7))) 1/9) (pow.f64 t 2)))))","(+.f64 (fma.f64 -1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -2) 1/9) t) (cbrt.f64 (*.f64 (log.f64 y) x))) (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -7) 1/9)) (*.f64 t t)))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/9) t)) (+.f64 (pow.f64 (*.f64 (log.f64 y) x) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)))) (pow.f64 t 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 7) (pow.f64 x 7))) 1/9) (pow.f64 t 2))))))","(+.f64 (fma.f64 -1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -2) 1/9) t) (cbrt.f64 (*.f64 (log.f64 y) x))) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 y) x) -2)) (+.f64 2/9 -1/27)) (*.f64 (pow.f64 t 3) (cbrt.f64 (pow.f64 (*.f64 (log.f64 y) x) -2)))) (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -7) 1/9)) (*.f64 t t))))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (log.f64 y) x (neg.f64 t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (log.f64 y) x (neg.f64 t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (log.f64 y) x (neg.f64 t)))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (log.f64 y) x (neg.f64 t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (log.f64 y) x (neg.f64 t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (log.f64 y) x (neg.f64 t)))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (log.f64 y) x (neg.f64 t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (log.f64 y) x (neg.f64 t)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (log.f64 y) x (neg.f64 t)))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))","(-.f64 (fma.f64 (log.f64 y) x (neg.f64 t)) (*.f64 y z))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t))))","(+.f64 (*.f64 z (+.f64 (*.f64 -1/2 (*.f64 y y)) (neg.f64 y))) (fma.f64 (log.f64 y) x (neg.f64 t)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 y 3) z)) (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (log.f64 y) x) t)))))","(+.f64 (*.f64 z (+.f64 (*.f64 -1/2 (*.f64 y y)) (neg.f64 y))) (fma.f64 -1/3 (*.f64 (pow.f64 y 3) z) (fma.f64 (log.f64 y) x (neg.f64 t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)) (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))))","(+.f64 (fma.f64 (log.f64 y) x (neg.f64 t)) (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))))","(+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))))","(+.f64 (-.f64 (fma.f64 (log.f64 y) x (neg.f64 t)) (/.f64 z y)) (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))))","(+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))))))","(fma.f64 -1/2 (/.f64 z (*.f64 y y)) (+.f64 (-.f64 (fma.f64 (log.f64 y) x (neg.f64 t)) (/.f64 z y)) (*.f64 z (+.f64 (log.f64 -1) (log.f64 y)))))","(+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1/3 (/.f64 z (pow.f64 y 3))) (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))))))","(fma.f64 -1/2 (/.f64 z (*.f64 y y)) (+.f64 (-.f64 (fma.f64 (log.f64 y) x (neg.f64 t)) (/.f64 z y)) (fma.f64 -1/3 (/.f64 z (pow.f64 y 3)) (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))))))","(+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3)) (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)))","(-.f64 (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t)) (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z))","(+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (*.f64 -1 (/.f64 z y))))","(-.f64 (-.f64 (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t)) (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z)) (/.f64 z y))","(+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (*.f64 -1 (/.f64 z y)))))","(fma.f64 -1/2 (/.f64 z (*.f64 y y)) (-.f64 (-.f64 (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t)) (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z)) (/.f64 z y)))","(+.f64 (*.f64 -1/2 (/.f64 z (pow.f64 y 2))) (+.f64 (*.f64 (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t) (pow.f64 1 1/3)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 y)) z)) (+.f64 (*.f64 -1 (/.f64 z y)) (*.f64 -1/3 (/.f64 z (pow.f64 y 3)))))))","(fma.f64 -1/2 (/.f64 z (*.f64 y y)) (+.f64 (-.f64 (fma.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 y)))) x (neg.f64 t)) (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z)) (-.f64 (/.f64 (*.f64 -1/3 z) (pow.f64 y 3)) (/.f64 z y))))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t))))","(fma.f64 (*.f64 (pow.f64 (pow.f64 t 4) 1/9) (log.f64 y)) x (fma.f64 z (log1p.f64 (neg.f64 y)) (neg.f64 t)))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (cbrt.f64 -1))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t)))))","(fma.f64 (*.f64 (pow.f64 (pow.f64 t 4) 1/9) (log.f64 y)) x (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (fma.f64 (cbrt.f64 t) (neg.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 t -4) 1/9) (pow.f64 (log.f64 y) 2)) -1/9)) (*.f64 (*.f64 (pow.f64 (/.f64 1 t) 1/9) (neg.f64 (pow.f64 (log.f64 y) 2))) 1/9)) (*.f64 x x) (neg.f64 t))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y)))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (log.f64 y))))) x) (+.f64 (*.f64 (+.f64 (*.f64 (*.f64 (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (log.f64 y) 3) t))) (*.f64 -2/3 (*.f64 (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (cbrt.f64 -1)) (pow.f64 (/.f64 1 t) 1/3)))) (cbrt.f64 -1)) (pow.f64 (*.f64 1 t) 1/3)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (log.f64 y))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 t 2)) 1/3) (/.f64 (pow.f64 (log.f64 y) 3) (pow.f64 (cbrt.f64 -1) 2)))))))))) (pow.f64 x 3)) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 t) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 t 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (log.f64 y) 2))))) (cbrt.f64 -1))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) t) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (log.f64 y) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) t))))))","(fma.f64 (*.f64 (pow.f64 (pow.f64 t 4) 1/9) (log.f64 y)) x (fma.f64 (fma.f64 (neg.f64 (fma.f64 2/27 (/.f64 (pow.f64 (log.f64 y) 3) t) (*.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 t)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 t -2)) (pow.f64 (log.f64 y) 3)) (+.f64 -2/9 1/27))))))) (cbrt.f64 t) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 t -2) 1/9) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 t -4) 1/9) (pow.f64 (log.f64 y) 2)) -1/9) (log.f64 y))) (fma.f64 -2/27 (*.f64 (cbrt.f64 (pow.f64 t -2)) (pow.f64 (log.f64 y) 3)) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 t -2)) (pow.f64 (log.f64 y) 3)) (+.f64 -2/9 1/27)))))) (pow.f64 x 3) (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (fma.f64 (cbrt.f64 t) (neg.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 t -4) 1/9) (pow.f64 (log.f64 y) 2)) -1/9)) (*.f64 (*.f64 (pow.f64 (/.f64 1 t) 1/9) (neg.f64 (pow.f64 (log.f64 y) 2))) 1/9)) (*.f64 x x) (neg.f64 t)))))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 t (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) 4) 1/9) -1) (*.f64 (log.f64 y) x)))","(+.f64 (*.f64 (pow.f64 t 2) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9))))) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x)))))","(fma.f64 (*.f64 t t) (fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -4) 1/9) -1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9) 1/9)) (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 t (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) 4) 1/9) -1) (*.f64 (log.f64 y) x))))","(+.f64 (*.f64 (pow.f64 t 2) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9)) (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9))))) (+.f64 (*.f64 z (log.f64 (-.f64 1 y))) (+.f64 (*.f64 t (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)))) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/9) (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9)) (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 4) (pow.f64 x 4))) 1/9))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 y) x)) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 (*.f64 (log.f64 y) x)))) (*.f64 -2/3 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/3))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/3 (*.f64 (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 x 2))) 1/3)))) (pow.f64 1 1/3)))))) (pow.f64 t 3)) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 y) x))))))","(fma.f64 (*.f64 t t) (fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -4) 1/9) -1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 y) x)) 1/9) 1/9)) (fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 t (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) 4) 1/9) -1) (fma.f64 (fma.f64 2/27 (cbrt.f64 (pow.f64 (*.f64 (log.f64 y) x) -2)) (fma.f64 (cbrt.f64 (*.f64 (log.f64 y) x)) (+.f64 (/.f64 2/27 (*.f64 (log.f64 y) x)) (*.f64 (*.f64 -2/3 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 y) x) -2)) (+.f64 2/9 -1/27))) (cbrt.f64 (/.f64 1 (*.f64 (log.f64 y) x))))) (*.f64 -1/3 (+.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 y) x) -2)) (+.f64 2/9 -1/27)) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -2) 1/9) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 y) x) -4) 1/9) -1/9)))))) (pow.f64 t 3) (*.f64 (log.f64 y) x)))))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))","(*.f64 z (log.f64 (-.f64 1 y)))","(*.f64 z (log1p.f64 (neg.f64 y)))"]],"time":342.751953125,"type":"simplify"},{"compiler":[[7328,3948]],"time":73.096923828125,"type":"eval"},{"alts":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","done",0.6623002930532609],["(fma.f64 z (log1p.f64 (neg.f64 y)) (-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))))","fresh",7.434540941927152],["(fma.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)) (fma.f64 x (log.f64 y) (neg.f64 t)))","next",3.8451599556138847]],"compiler":[[18,13],[19,14],[25,15],[19,14],[25,15]],"count":[[242,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[239,0],"picked":[1,1]}],"min-error":[0.04296875],"time":64.906982421875,"type":"prune"},{"compiler":[[71,21]],"locations":[["(fma.f64 x (log.f64 y) (neg.f64 t))",0.1171875,false],["(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)",0.24123002930532605,true],["(cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))",15.517850958817794,true],["(cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2))",28.98406018284431,true]],"time":14.486083984375,"type":"localize"},{"count":[[3,40]],"series":[["(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","y","-inf",0.461181640625],["(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","y","inf",0.537109375],["(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","y","0",0.35595703125],["(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","z","-inf",0.428955078125],["(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","z","inf",0.419921875],["(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","z","0",19.64892578125],["(cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))","y","-inf",2.02001953125],["(cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))","y","inf",1.359130859375],["(cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))","y","0",0.572998046875],["(cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))","z","-inf",0.41015625],["(cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))","z","inf",0.22412109375],["(cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))","z","0",0.225830078125],["(cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2))","y","-inf",1.5390625],["(cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2))","y","inf",1.962158203125],["(cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2))","y","0",0.730224609375],["(cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2))","z","-inf",0.30908203125],["(cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2))","z","inf",0.381103515625],["(cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2))","z","0",1.053955078125]],"time":33.01611328125,"type":"series"},{"count":[[3,97]],"inputs":[["(cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2))","(cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 5/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 5/3)) (cbrt.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (cbrt.f64 (*.f64 (*.f64 z (log1p.f64 (neg.f64 y))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 z (log1p.f64 (neg.f64 y))) (log1p.f64 (neg.f64 y)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (pow.f64 (log1p.f64 (neg.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 4/3)) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 z (log1p.f64 (neg.f64 y))) z)) (cbrt.f64 (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 (*.f64 (*.f64 z (log1p.f64 (neg.f64 y))) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2/3) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 z (log1p.f64 (neg.f64 y))))) (cbrt.f64 (neg.f64 (*.f64 z (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 4/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))) (+.f64 5 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (*.f64 z (log1p.f64 (neg.f64 y))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (*.f64 z (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (cbrt.f64 (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))))) (cbrt.f64 (pow.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log1p.f64 (neg.f64 y)))) (cbrt.f64 (*.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log1p.f64 (neg.f64 y)) (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (*.f64 (pow.f64 z 2/3) (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (cbrt.f64 (log1p.f64 (neg.f64 y))))) (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 z (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 z (log1p.f64 (neg.f64 y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (*.f64 z (log1p.f64 (neg.f64 y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 z (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (log1p.f64 (neg.f64 y))) (*.f64 z (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3) (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 4/3) (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z (log1p.f64 (neg.f64 y))) z) (log1p.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z (log1p.f64 (neg.f64 y))) (log1p.f64 (neg.f64 y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 (*.f64 z (log1p.f64 (neg.f64 y))) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 5/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 y)) (*.f64 (*.f64 z (log1p.f64 (neg.f64 y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)) (pow.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 4/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 4/3) 4/3) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 5/3) (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log1p.f64 (neg.f64 y)) (cbrt.f64 z)) 2) (pow.f64 (pow.f64 z 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2/3) (pow.f64 (*.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2/3) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (pow.f64 (*.f64 (pow.f64 z 2/3) (log1p.f64 (neg.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (pow.f64 (*.f64 (cbrt.f64 (log1p.f64 (neg.f64 y))) (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z z) (pow.f64 (log1p.f64 (neg.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (neg.f64 (*.f64 z (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (cbrt.f64 (log1p.f64 (neg.f64 y)))) 2) (pow.f64 (pow.f64 (log1p.f64 (neg.f64 y)) 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (+.f64 5 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 6))))))"]],"rules":[["egg-rr",39],["egg-rr",25],["egg-rr",33]],"time":50.970947265625,"type":"rewrite"},{"count":[[137,154]],"inputs":[["(pow.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/3)","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 5))) 1/9) (/.f64 1 y))) (pow.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/3))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 5))) 1/9) (/.f64 1 y))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 4))) 1/3) (/.f64 (-.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))) (pow.f64 z 2)) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 34) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 16))) 1/9))) (pow.f64 y 2)))) (pow.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/3)))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 5))) 1/9) (/.f64 1 y))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 4))) 1/3) (/.f64 (-.f64 (*.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))) (pow.f64 z 2)) (+.f64 (*.f64 -8/27 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 5))) 1/3)) (*.f64 -4/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 8)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/9) (-.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))) (pow.f64 z 2)) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 34) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 16))) 1/9))))))) (pow.f64 y 3)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 4))) 1/3) (/.f64 (-.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))) (pow.f64 z 2)) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 34) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 16))) 1/9))) (pow.f64 y 2)))) (pow.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/3))))","(pow.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) 1/3)","(+.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) 1/3) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 5) (pow.f64 z 14))) 1/9) (/.f64 1 y))))","(+.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) 1/3) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 z 2) (+.f64 1 (log.f64 (/.f64 -1 y)))) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 16) (pow.f64 z 34))) 1/9))) (pow.f64 y 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 4) (pow.f64 z 4))) 1/3))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 5) (pow.f64 z 14))) 1/9) (/.f64 1 y)))))","(+.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) 1/3) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 z 2) (+.f64 1 (log.f64 (/.f64 -1 y)))) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 16) (pow.f64 z 34))) 1/9))) (pow.f64 y 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 4) (pow.f64 z 4))) 1/3))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 5) (pow.f64 z 14))) 1/9) (/.f64 1 y))) (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 (-.f64 (*.f64 -2/3 (log.f64 (/.f64 -1 y))) 1) (pow.f64 z 2)) (+.f64 (*.f64 -4/3 (*.f64 (-.f64 (*.f64 (pow.f64 z 2) (+.f64 1 (log.f64 (/.f64 -1 y)))) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 16) (pow.f64 z 34))) 1/9))) (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 8)) (log.f64 (/.f64 -1 y))) 1/9))) (*.f64 -8/27 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 5) (pow.f64 z 14))) 1/3)))) (pow.f64 y 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 4) (pow.f64 z 4))) 1/3))))))","(pow.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/3)","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/9) (/.f64 1 y))) (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/3))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/9) (/.f64 1 y))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2))) 1/3) (/.f64 (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 17)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/9))) (pow.f64 y 2)))) (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/3 z) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 5)) 1/9) (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 17)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/3)))) (pow.f64 y 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2))) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/9) (/.f64 1 y))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2))) 1/3) (/.f64 (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 17)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/9))) (pow.f64 y 2)))) (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/3))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 y)) z)) 1/3) (cbrt.f64 -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 y)) z)) 1/3) (cbrt.f64 -1)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 7)) (pow.f64 (log.f64 (/.f64 -1 y)) 2)) 1/9) (*.f64 (/.f64 1 y) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 y)) z)) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 7)) (pow.f64 (log.f64 (/.f64 -1 y)) 2)) 1/9) (*.f64 (/.f64 1 y) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2))) 1/3) (/.f64 (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 17)) (log.f64 (/.f64 -1 y))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 y 2) (pow.f64 (cbrt.f64 -1) 2)))))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2))) 1/3) (/.f64 (-.f64 (*.f64 1/3 z) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) (pow.f64 (log.f64 (/.f64 -1 y)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 17)) (log.f64 (/.f64 -1 y))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 (log.f64 (/.f64 -1 y)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) (pow.f64 (log.f64 (/.f64 -1 y)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 17)) (log.f64 (/.f64 -1 y))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))) (*.f64 (pow.f64 y 3) (pow.f64 (cbrt.f64 -1) 2))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 y)) z)) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 7)) (pow.f64 (log.f64 (/.f64 -1 y)) 2)) 1/9) (*.f64 (/.f64 1 y) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2))) 1/3) (/.f64 (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 17)) (log.f64 (/.f64 -1 y))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 y 2) (pow.f64 (cbrt.f64 -1) 2))))))))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(*.f64 (pow.f64 y 2) (pow.f64 z 2))","(+.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 2)) (*.f64 (pow.f64 y 2) (pow.f64 z 2)))","(+.f64 (*.f64 (+.f64 (*.f64 1/4 (pow.f64 z 2)) (*.f64 2/3 (pow.f64 z 2))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 2)) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (pow.f64 z 2)) (*.f64 1/2 (pow.f64 z 2))) (pow.f64 y 5)) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (pow.f64 z 2)) (*.f64 2/3 (pow.f64 z 2))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 2)) (*.f64 (pow.f64 y 2) (pow.f64 z 2)))))","(*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2))","(+.f64 (*.f64 -2 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) y)) (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)))","(+.f64 (*.f64 -2 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) y)) (+.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (pow.f64 y 2))) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))","(+.f64 (*.f64 -2 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) y)) (+.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (pow.f64 y 2))) (+.f64 (*.f64 -2/3 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (pow.f64 y 3))) (+.f64 (/.f64 (pow.f64 z 2) (pow.f64 y 3)) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))))","(*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2))","(+.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) (*.f64 2 (/.f64 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)) y)))","(+.f64 (/.f64 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) (+.f64 (*.f64 2 (/.f64 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)) y)) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))","(+.f64 (/.f64 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) (+.f64 (*.f64 2 (/.f64 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)) y)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 -2/3 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)))) (pow.f64 y 3))) (/.f64 (pow.f64 z 2) (pow.f64 y 2))))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/3)","(cbrt.f64 (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) 2))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 5))) 1/9) (/.f64 1 y))) (pow.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/3))","(fma.f64 -2/3 (/.f64 (pow.f64 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) 5)) 1/9) y) (cbrt.f64 (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) 2)))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 5))) 1/9) (/.f64 1 y))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 4))) 1/3) (/.f64 (-.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))) (pow.f64 z 2)) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 34) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 16))) 1/9))) (pow.f64 y 2)))) (pow.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/3)))","(fma.f64 -2/3 (/.f64 (pow.f64 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) 5)) 1/9) y) (fma.f64 1/3 (/.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) (neg.f64 4))) (fma.f64 (-.f64 (-.f64 (log.f64 -1) (log.f64 y)) -1) (*.f64 z z) (*.f64 (pow.f64 (*.f64 (pow.f64 z 34) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) 16)) 1/9) -4/3))) y) y) (cbrt.f64 (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) 2))))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 5))) 1/9) (/.f64 1 y))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 4))) 1/3) (/.f64 (-.f64 (*.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))) (pow.f64 z 2)) (+.f64 (*.f64 -8/27 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 5))) 1/3)) (*.f64 -4/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 8)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/9) (-.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))) (pow.f64 z 2)) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 34) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 16))) 1/9))))))) (pow.f64 y 3)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 4))) 1/3) (/.f64 (-.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))))) (pow.f64 z 2)) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 34) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 16))) 1/9))) (pow.f64 y 2)))) (pow.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/3))))","(+.f64 (*.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) (neg.f64 4)))) (+.f64 (/.f64 (-.f64 (*.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (log.f64 -1) (log.f64 y)))) (*.f64 z z)) (fma.f64 -8/27 (cbrt.f64 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) 5))) (*.f64 (*.f64 -4/3 (pow.f64 (/.f64 (pow.f64 z 8) (+.f64 (log.f64 -1) (log.f64 y))) 1/9)) (fma.f64 (-.f64 (-.f64 (log.f64 -1) (log.f64 y)) -1) (*.f64 z z) (*.f64 (pow.f64 (*.f64 (pow.f64 z 34) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) 16)) 1/9) -4/3))))) (pow.f64 y 3)) (*.f64 (fma.f64 (-.f64 (-.f64 (log.f64 -1) (log.f64 y)) -1) (*.f64 z z) (*.f64 (pow.f64 (*.f64 (pow.f64 z 34) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) 16)) 1/9) -4/3)) (pow.f64 y -2)))) (fma.f64 -2/3 (/.f64 (pow.f64 (*.f64 (pow.f64 z 14) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) 5)) 1/9) y) (cbrt.f64 (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) 2))))","(pow.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) 1/3)","(cbrt.f64 (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) 2))","(+.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) 1/3) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 5) (pow.f64 z 14))) 1/9) (/.f64 1 y))))","(+.f64 (cbrt.f64 (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) 2)) (/.f64 (*.f64 2/3 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) 5) (pow.f64 z 14)) 1/9)) y))","(+.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) 1/3) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 z 2) (+.f64 1 (log.f64 (/.f64 -1 y)))) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 16) (pow.f64 z 34))) 1/9))) (pow.f64 y 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 4) (pow.f64 z 4))) 1/3))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 5) (pow.f64 z 14))) 1/9) (/.f64 1 y)))))","(+.f64 (cbrt.f64 (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) 2)) (fma.f64 1/3 (/.f64 (/.f64 (*.f64 (fma.f64 (*.f64 z z) (+.f64 1 (neg.f64 (log.f64 (neg.f64 y)))) (*.f64 -4/3 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) 16) (pow.f64 z 34)) 1/9))) (cbrt.f64 (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) (neg.f64 4)))) y) y) (/.f64 (*.f64 2/3 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) 5) (pow.f64 z 14)) 1/9)) y)))","(+.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) 1/3) (+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 (pow.f64 z 2) (+.f64 1 (log.f64 (/.f64 -1 y)))) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 16) (pow.f64 z 34))) 1/9))) (pow.f64 y 2)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 4) (pow.f64 z 4))) 1/3))) (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 5) (pow.f64 z 14))) 1/9) (/.f64 1 y))) (*.f64 -1/3 (*.f64 (/.f64 (-.f64 (*.f64 (-.f64 (*.f64 -2/3 (log.f64 (/.f64 -1 y))) 1) (pow.f64 z 2)) (+.f64 (*.f64 -4/3 (*.f64 (-.f64 (*.f64 (pow.f64 z 2) (+.f64 1 (log.f64 (/.f64 -1 y)))) (*.f64 4/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 16) (pow.f64 z 34))) 1/9))) (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 8)) (log.f64 (/.f64 -1 y))) 1/9))) (*.f64 -8/27 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 5) (pow.f64 z 14))) 1/3)))) (pow.f64 y 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 4) (pow.f64 z 4))) 1/3))))))","(+.f64 (cbrt.f64 (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) 2)) (fma.f64 1/3 (/.f64 (/.f64 (*.f64 (fma.f64 (*.f64 z z) (+.f64 1 (neg.f64 (log.f64 (neg.f64 y)))) (*.f64 -4/3 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) 16) (pow.f64 z 34)) 1/9))) (cbrt.f64 (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) (neg.f64 4)))) y) y) (fma.f64 2/3 (/.f64 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) 5) (pow.f64 z 14)) 1/9) y) (/.f64 (*.f64 -1/3 (*.f64 (-.f64 (*.f64 (fma.f64 -2/3 (neg.f64 (log.f64 (neg.f64 y))) -1) (*.f64 z z)) (fma.f64 -4/3 (*.f64 (fma.f64 (*.f64 z z) (+.f64 1 (neg.f64 (log.f64 (neg.f64 y)))) (*.f64 -4/3 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) 16) (pow.f64 z 34)) 1/9))) (pow.f64 (/.f64 (pow.f64 z 8) (neg.f64 (log.f64 (neg.f64 y)))) 1/9)) (*.f64 -8/27 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) 5) (pow.f64 z 14)))))) (cbrt.f64 (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) (neg.f64 4))))) (pow.f64 y 3)))))","(pow.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/3)","(cbrt.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/9) (/.f64 1 y))) (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/3))","(fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 z 7) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) -2)) 1/9) y) (cbrt.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y)))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/9) (/.f64 1 y))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2))) 1/3) (/.f64 (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 17)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/9))) (pow.f64 y 2)))) (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/3)))","(fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 z 7) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) -2)) 1/9) y) (fma.f64 1/3 (/.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) -2)) (fma.f64 -1/2 z (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 z 17) (+.f64 (log.f64 -1) (log.f64 y))) 1/9)))) y) y) (cbrt.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (-.f64 (*.f64 -1/3 z) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 4)) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 5)) 1/9) (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 17)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/3)))) (pow.f64 y 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2))) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) 1/9) (/.f64 1 y))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2))) 1/3) (/.f64 (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 17)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/9))) (pow.f64 y 2)))) (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) 1/3))))","(fma.f64 1/3 (/.f64 (*.f64 (-.f64 (*.f64 -1/3 z) (fma.f64 -2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 z 4) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) -5)) 1/9) (fma.f64 -1/2 z (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 z 17) (+.f64 (log.f64 -1) (log.f64 y))) 1/9)))) (*.f64 -1/27 (cbrt.f64 (*.f64 (pow.f64 z 7) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) -2)))))) (cbrt.f64 (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) -2))) (pow.f64 y 3)) (fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 z 7) (pow.f64 (+.f64 (log.f64 -1) (log.f64 y)) -2)) 1/9) y) (fma.f64 1/3 (/.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) -2)) (fma.f64 -1/2 z (*.f64 -1/3 (pow.f64 (/.f64 (pow.f64 z 17) (+.f64 (log.f64 -1) (log.f64 y))) 1/9)))) y) y) (cbrt.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y)))))))","(*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 y)) z)) 1/3) (cbrt.f64 -1))","(neg.f64 (cbrt.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 y)) z)) 1/3) (cbrt.f64 -1)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 7)) (pow.f64 (log.f64 (/.f64 -1 y)) 2)) 1/9) (*.f64 (/.f64 1 y) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))))","(+.f64 (neg.f64 (cbrt.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z))) (/.f64 (*.f64 -1/3 (pow.f64 (*.f64 (pow.f64 z 7) (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) -2)) 1/9)) y))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 y)) z)) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 7)) (pow.f64 (log.f64 (/.f64 -1 y)) 2)) 1/9) (*.f64 (/.f64 1 y) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2))) 1/3) (/.f64 (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 17)) (log.f64 (/.f64 -1 y))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 y 2) (pow.f64 (cbrt.f64 -1) 2)))))))","(+.f64 (neg.f64 (cbrt.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z))) (fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 z 7) (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) -2)) 1/9) y) (/.f64 (/.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) -2)) (fma.f64 -1/2 z (*.f64 (pow.f64 (/.f64 (pow.f64 z 17) (neg.f64 (log.f64 (neg.f64 y)))) 1/9) 1/3))) y) y) 3)))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2))) 1/3) (/.f64 (-.f64 (*.f64 1/3 z) (+.f64 (*.f64 4/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) (pow.f64 (log.f64 (/.f64 -1 y)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 17)) (log.f64 (/.f64 -1 y))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))))) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (pow.f64 z 7)) (pow.f64 (log.f64 (/.f64 -1 y)) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) (pow.f64 (log.f64 (/.f64 -1 y)) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 17)) (log.f64 (/.f64 -1 y))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))))))))) (*.f64 (pow.f64 y 3) (pow.f64 (cbrt.f64 -1) 2))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 -1 y)) z)) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 7)) (pow.f64 (log.f64 (/.f64 -1 y)) 2)) 1/9) (*.f64 (/.f64 1 y) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2))) 1/3) (/.f64 (-.f64 (*.f64 -1/2 z) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 17)) (log.f64 (/.f64 -1 y))) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3)))) (*.f64 (pow.f64 y 2) (pow.f64 (cbrt.f64 -1) 2))))))))","(fma.f64 -1/3 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) -2)) (-.f64 (*.f64 1/3 z) (fma.f64 4/9 (*.f64 (pow.f64 (*.f64 (pow.f64 z 4) (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) -5)) 1/9) (neg.f64 (fma.f64 -1/2 z (*.f64 (pow.f64 (/.f64 (pow.f64 z 17) (neg.f64 (log.f64 (neg.f64 y)))) 1/9) 1/3)))) (fma.f64 1/27 (cbrt.f64 (*.f64 (pow.f64 z 7) (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) -2))) (*.f64 (*.f64 2/9 (pow.f64 (*.f64 (pow.f64 z 4) (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) -5)) 1/9)) (neg.f64 (fma.f64 -1/2 z (*.f64 (pow.f64 (/.f64 (pow.f64 z 17) (neg.f64 (log.f64 (neg.f64 y)))) 1/9) 1/3)))))))) (pow.f64 y 3)) (+.f64 (neg.f64 (cbrt.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z))) (fma.f64 -1/3 (/.f64 (pow.f64 (*.f64 (pow.f64 z 7) (pow.f64 (neg.f64 (log.f64 (neg.f64 y))) -2)) 1/9) y) (/.f64 (/.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) -2)) (fma.f64 -1/2 z (*.f64 (pow.f64 (/.f64 (pow.f64 z 17) (neg.f64 (log.f64 (neg.f64 y)))) 1/9) 1/3))) y) y) 3))))","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 z 2) (pow.f64 (log.f64 (-.f64 1 y)) 2))","(pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)","(*.f64 (pow.f64 y 2) (pow.f64 z 2))","(pow.f64 (*.f64 y z) 2)","(+.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 2)) (*.f64 (pow.f64 y 2) (pow.f64 z 2)))","(*.f64 (*.f64 z z) (*.f64 (*.f64 y y) (+.f64 1 y)))","(+.f64 (*.f64 (+.f64 (*.f64 1/4 (pow.f64 z 2)) (*.f64 2/3 (pow.f64 z 2))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 2)) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))","(fma.f64 (*.f64 (*.f64 z z) 11/12) (pow.f64 y 4) (*.f64 (*.f64 z z) (*.f64 (*.f64 y y) (+.f64 1 y))))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (pow.f64 z 2)) (*.f64 1/2 (pow.f64 z 2))) (pow.f64 y 5)) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (pow.f64 z 2)) (*.f64 2/3 (pow.f64 z 2))) (pow.f64 y 4)) (+.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 2)) (*.f64 (pow.f64 y 2) (pow.f64 z 2)))))","(fma.f64 (*.f64 (*.f64 z z) 5/6) (pow.f64 y 5) (fma.f64 (*.f64 (*.f64 z z) 11/12) (pow.f64 y 4) (*.f64 (*.f64 z z) (*.f64 (*.f64 y y) (+.f64 1 y)))))","(*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2))","(pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) 2)","(+.f64 (*.f64 -2 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) y)) (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)))","(fma.f64 -2 (/.f64 (*.f64 (*.f64 z z) (+.f64 (log.f64 -1) (log.f64 y))) y) (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) 2))","(+.f64 (*.f64 -2 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) y)) (+.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (pow.f64 y 2))) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))","(+.f64 (fma.f64 -2 (/.f64 (*.f64 (*.f64 z z) (+.f64 (log.f64 -1) (log.f64 y))) y) (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) 2)) (*.f64 (*.f64 (-.f64 (-.f64 (log.f64 -1) (log.f64 y)) -1) (*.f64 z z)) (pow.f64 y -2)))","(+.f64 (*.f64 -2 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) y)) (+.f64 (*.f64 (pow.f64 z 2) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y)))) 2)) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (pow.f64 y 2))) (+.f64 (*.f64 -2/3 (/.f64 (*.f64 (pow.f64 z 2) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 y))))) (pow.f64 y 3))) (+.f64 (/.f64 (pow.f64 z 2) (pow.f64 y 3)) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))))","(+.f64 (fma.f64 -2 (/.f64 (*.f64 (*.f64 z z) (+.f64 (log.f64 -1) (log.f64 y))) y) (pow.f64 (*.f64 z (+.f64 (log.f64 -1) (log.f64 y))) 2)) (+.f64 (/.f64 (+.f64 (*.f64 -2/3 (*.f64 (*.f64 z z) (+.f64 (log.f64 -1) (log.f64 y)))) (*.f64 z z)) (pow.f64 y 3)) (*.f64 (*.f64 (-.f64 (-.f64 (log.f64 -1) (log.f64 y)) -1) (*.f64 z z)) (pow.f64 y -2))))","(*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2))","(pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) 2)","(+.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) (*.f64 2 (/.f64 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)) y)))","(+.f64 (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) 2) (/.f64 (*.f64 2 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) (*.f64 z z))) y))","(+.f64 (/.f64 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) (+.f64 (*.f64 2 (/.f64 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)) y)) (/.f64 (pow.f64 z 2) (pow.f64 y 2)))))","(+.f64 (fma.f64 2 (/.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) (*.f64 z z)) y) (/.f64 (*.f64 z z) (*.f64 y y))) (+.f64 (/.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) (*.f64 z z)) y) y) (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) 2)))","(+.f64 (/.f64 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)) (pow.f64 y 2)) (+.f64 (*.f64 (pow.f64 (log.f64 (/.f64 -1 y)) 2) (pow.f64 z 2)) (+.f64 (*.f64 2 (/.f64 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)) y)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (pow.f64 z 2)) (*.f64 -2/3 (*.f64 (log.f64 (/.f64 -1 y)) (pow.f64 z 2)))) (pow.f64 y 3))) (/.f64 (pow.f64 z 2) (pow.f64 y 2))))))","(+.f64 (+.f64 (/.f64 (/.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) (*.f64 z z)) y) y) (pow.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) z) 2)) (fma.f64 2 (/.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) (*.f64 z z)) y) (-.f64 (/.f64 (*.f64 z z) (*.f64 y y)) (/.f64 (*.f64 (fma.f64 -2/3 (neg.f64 (log.f64 (neg.f64 y))) -1) (*.f64 z z)) (pow.f64 y 3)))))"]],"time":206.224853515625,"type":"simplify"},{"compiler":[[7804,3524]],"time":64.690185546875,"type":"eval"},{"alts":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","done",0.6623002930532609],["(fma.f64 z (log1p.f64 (neg.f64 y)) (-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))))","next",7.434540941927152],["(fma.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)) (fma.f64 x (log.f64 y) (neg.f64 t)))","done",3.8451599556138847]],"compiler":[[18,13],[19,14],[25,15],[19,14]],"count":[[212,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[209,0],"picked":[1,1]}],"min-error":[0.04296875],"time":48.431884765625,"type":"prune"},{"compiler":[[59,21]],"locations":[["(+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))",0.00390625,true],["(-.f64 t (*.f64 x (log.f64 y)))",0.00390625,true],["(*.f64 x (log.f64 y))",0.25390625,true],["(-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))",2.364088415971102,true]],"time":11.511962890625,"type":"localize"},{"count":[[4,132]],"series":[["(+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))","y","-inf",0.22509765625],["(+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))","y","inf",0.182861328125],["(+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))","y","0",0.19287109375],["(+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))","x","-inf",0.161865234375],["(+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))","x","inf",0.194091796875],["(+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))","x","0",0.175048828125],["(+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))","t","-inf",0.156005859375],["(+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))","t","inf",0.18310546875],["(+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))","t","0",0.177978515625],["(-.f64 t (*.f64 x (log.f64 y)))","y","-inf",0.2109375],["(-.f64 t (*.f64 x (log.f64 y)))","y","inf",0.18408203125],["(-.f64 t (*.f64 x (log.f64 y)))","y","0",1.15380859375],["(-.f64 t (*.f64 x (log.f64 y)))","x","-inf",0.16796875],["(-.f64 t (*.f64 x (log.f64 y)))","x","inf",0.161865234375],["(-.f64 t (*.f64 x (log.f64 y)))","x","0",0.18408203125],["(-.f64 t (*.f64 x (log.f64 y)))","t","-inf",0.156982421875],["(-.f64 t (*.f64 x (log.f64 y)))","t","inf",0.177978515625],["(-.f64 t (*.f64 x (log.f64 y)))","t","0",0.1728515625],["(*.f64 x (log.f64 y))","y","-inf",0.16015625],["(*.f64 x (log.f64 y))","y","inf",0.177001953125],["(*.f64 x (log.f64 y))","y","0",0.14501953125],["(*.f64 x (log.f64 y))","x","-inf",0.214111328125],["(*.f64 x (log.f64 y))","x","inf",0.21484375],["(*.f64 x (log.f64 y))","x","0",7.869140625],["(-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))","y","-inf",0.31103515625],["(-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))","y","inf",0.2939453125],["(-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))","y","0",0.268798828125],["(-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))","x","-inf",0.22900390625],["(-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))","x","inf",0.291015625],["(-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))","x","0",0.2490234375],["(-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))","t","-inf",0.1728515625],["(-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))","t","inf",0.181884765625],["(-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))","t","0",0.322998046875]],"time":15.696044921875,"type":"series"},{"count":[[4,343]],"inputs":[["(-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y)))))","(*.f64 x (log.f64 y))","(-.f64 t (*.f64 x (log.f64 y)))","(+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (-.f64 (fma.f64 (log.f64 y) x -3) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 (*.f64 x (log.f64 y))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -3 (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 3 t) (fma.f64 (log.f64 y) x -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (+.f64 3 t)) (+.f64 (*.f64 x (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 0) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) (*.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -3 (*.f64 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (log.f64 y) (neg.f64 t))) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) (*.f64 0 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 t) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 t) (*.f64 (cbrt.f64 (*.f64 (neg.f64 x) (log.f64 y))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 t) (*.f64 (neg.f64 (*.f64 (neg.f64 x) (cbrt.f64 (log.f64 y)))) (cbrt.f64 (pow.f64 (log.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 t) (*.f64 (neg.f64 x) (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 t) (*.f64 (neg.f64 (log.f64 y)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 27 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (neg.f64 (/.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (neg.f64 t) 0) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 t) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 27 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (/.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 0 (/.f64 27 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (/.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 0 (*.f64 x (log.f64 y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 0 (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 27 (-.f64 27 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 3 t) (+.f64 (*.f64 (neg.f64 x) (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) -3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (*.f64 (neg.f64 x) (log.f64 y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -3 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (-.f64 t (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 27 (+.f64 27 (-.f64 t (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 t (fma.f64 (log.f64 y) x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 t (*.f64 x (log.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2))) (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)) (/.f64 1 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27) (/.f64 1 (neg.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (/.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)) (pow.f64 (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3))) 1) (/.f64 (pow.f64 (cbrt.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3))) 2) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))) (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (/.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) (pow.f64 (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))) 1) (/.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (*.f64 0 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (+.f64 0 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (*.f64 0 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y))))))) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (+.f64 (cbrt.f64 (*.f64 t t)) (cbrt.f64 (*.f64 (*.f64 t (log.f64 y)) x)))) (-.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 9) (+.f64 (cbrt.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 2)) (cbrt.f64 (*.f64 3 (-.f64 t (fma.f64 (log.f64 y) x -3)))))) (-.f64 (cbrt.f64 3) (cbrt.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27) (neg.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 19683 (pow.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 3)) (/.f64 1 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (+.f64 (+.f64 729 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 6)) (pow.f64 (*.f64 3 (-.f64 t (fma.f64 (log.f64 y) x -3))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27) 1) (neg.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)) (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (pow.f64 (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)) (+.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 2) (-.f64 9 (*.f64 3 (-.f64 (fma.f64 (log.f64 y) x -3) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t))) 3) 27) (+.f64 (*.f64 (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t))) (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t)))) (+.f64 9 (*.f64 (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 0 (neg.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (*.f64 27 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27))) (*.f64 27 (neg.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 19683 (pow.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 3)) 1) (*.f64 (+.f64 (+.f64 729 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 6)) (pow.f64 (*.f64 3 (-.f64 t (fma.f64 (log.f64 y) x -3))) 3)) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)) 1) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 0 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (*.f64 27 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)))) (*.f64 27 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (*.f64 27 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27))) (*.f64 27 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 27 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (*.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))) (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3))) (*.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (cbrt.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)))) (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2))) (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) (sqrt.f64 3) (-.f64 (fma.f64 (log.f64 y) x -3) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) (cbrt.f64 9) (-.f64 (fma.f64 (log.f64 y) x -3) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 y) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) x (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t)))) (pow.f64 (cbrt.f64 (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t)))) 2) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (neg.f64 x) (log.f64 y)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (cbrt.f64 (*.f64 x (log.f64 y))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 9) (cbrt.f64 3) (-.f64 (fma.f64 (log.f64 y) x -3) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -3 (-.f64 (fma.f64 (log.f64 y) x -3) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 (sqrt.f64 3)) (-.f64 (fma.f64 (log.f64 y) x -3) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 3 (-.f64 (fma.f64 (log.f64 y) x -3) t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 y)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 9) 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 3)) 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 y)) 1 (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 1 (-.f64 (fma.f64 (log.f64 y) x -3) t))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (log.f64 y)) 0) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (*.f64 (*.f64 x (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (log.f64 y))) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 y)) (*.f64 0 (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (cbrt.f64 (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 y))) (cbrt.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (log.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 x (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (log.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (log.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (log.f64 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 t (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (log.f64 y)) t)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 0 t) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 3 t) (+.f64 (*.f64 (neg.f64 x) (log.f64 y)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 t (+.f64 (+.f64 (*.f64 (neg.f64 x) (log.f64 y)) 3) -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (+.f64 -3 (-.f64 t (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (log.f64 y)) (+.f64 t 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (+.f64 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 t (+.f64 (*.f64 (neg.f64 x) (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 3 t) (-.f64 (*.f64 (neg.f64 x) (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 t (-.f64 (+.f64 (*.f64 (neg.f64 x) (log.f64 y)) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (-.f64 -3 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (log.f64 y)) (-.f64 t 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (-.f64 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 t (-.f64 (*.f64 (neg.f64 x) (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (-.f64 t (*.f64 x (log.f64 y))) 27) 27)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (/.f64 27 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (/.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (neg.f64 t)) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (*.f64 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 3 t) (neg.f64 (+.f64 (*.f64 x (log.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 t (*.f64 x (log.f64 y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -3 (-.f64 t (fma.f64 (log.f64 y) x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (+.f64 -3 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 -3 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (-.f64 t (*.f64 x (log.f64 y))) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 3 t) (+.f64 (*.f64 x (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (-.f64 t (*.f64 x (log.f64 y))) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (-.f64 t (*.f64 x (log.f64 y))) 27) 27)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 0 (+.f64 3 t)) (+.f64 (*.f64 x (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 t (-.f64 (fma.f64 (log.f64 y) x -3) -3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 3 t) (-.f64 (*.f64 x (log.f64 y)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (-.f64 t (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 27 (-.f64 27 (-.f64 t (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 3 t) (-.f64 (+.f64 (*.f64 x (log.f64 y)) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 t (-.f64 (*.f64 x (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (neg.f64 x) (log.f64 y)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -3 (-.f64 (fma.f64 (log.f64 y) x -3) t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 t (+.f64 (fma.f64 (log.f64 y) x -3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 27 (+.f64 27 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 3 t) (+.f64 (+.f64 (*.f64 x (log.f64 y)) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 t (+.f64 (*.f64 x (log.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (/.f64 27 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 t (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 t (*.f64 x (log.f64 y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 0 t) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 t 0) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 3 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 0 (neg.f64 t)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 t (*.f64 x (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2))) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)) (neg.f64 (/.f64 1 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (*.f64 0 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y))))))) (+.f64 0 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (-.f64 0 (*.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) 0))) (+.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (*.f64 0 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (-.f64 0 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 2)) (+.f64 (cbrt.f64 9) (cbrt.f64 (*.f64 3 (-.f64 t (fma.f64 (log.f64 y) x -3)))))) (-.f64 (cbrt.f64 (-.f64 t (fma.f64 (log.f64 y) x -3))) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (+.f64 0 (*.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) 0))) (-.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 t t)) (+.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 y)) 2)) (cbrt.f64 (*.f64 (*.f64 t (log.f64 y)) x)))) (-.f64 (cbrt.f64 t) (cbrt.f64 (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27) (/.f64 1 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)) (neg.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 t (*.f64 x (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 27 (pow.f64 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)) 3)) (+.f64 9 (-.f64 (*.f64 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3))) (*.f64 3 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27) 27) (*.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))) 0)) (*.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))) 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (neg.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (*.f64 27 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27))) (*.f64 27 (neg.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27) 27) (*.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))) 0)) (*.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))) 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27) 1) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) (pow.f64 -3 3)) (+.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 2) (-.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 0 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (*.f64 27 (-.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 27))) (*.f64 27 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (*.f64 27 (+.f64 27 (pow.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) 3)))) (*.f64 27 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 t (*.f64 x (log.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 t (*.f64 x (log.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (*.f64 x (log.f64 y)) 3) (+.f64 3 t)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 t (*.f64 x (log.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (cbrt.f64 (*.f64 t t)) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 t (fma.f64 (log.f64 y) x -3))) (cbrt.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 2)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 2)) (cbrt.f64 (-.f64 t (fma.f64 (log.f64 y) x -3))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 27 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)) (/.f64 1 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3))))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 (fma.f64 (log.f64 y) x -3) t) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 3 t)) (cbrt.f64 (pow.f64 (+.f64 3 t) 2)) (neg.f64 (+.f64 (*.f64 x (log.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 t t)) (cbrt.f64 t) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 t) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 t (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 t (fma.f64 (log.f64 y) x -3)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 9) 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 (sqrt.f64 3)) 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) 0 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 1 -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 3 t) (neg.f64 (+.f64 (*.f64 x (log.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 t (*.f64 x (log.f64 y))) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 t (*.f64 x (log.f64 y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (fma.f64 x (log.f64 y) (neg.f64 t)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t 1 (*.f64 (neg.f64 x) (log.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 t (*.f64 x (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 3 t) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 t (+.f64 (*.f64 (neg.f64 x) (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (log.f64 y)) (+.f64 3 t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (neg.f64 x) (log.f64 y)) 3) t)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 t (fma.f64 (log.f64 y) x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 6 (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 t (-.f64 3 (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 3 (/.f64 27 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (/.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 3 (*.f64 x (log.f64 y))) t)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 3 0) (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 3 (neg.f64 t)) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 0) (-.f64 t (fma.f64 (log.f64 y) x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 t (*.f64 (+.f64 (*.f64 (neg.f64 x) (log.f64 y)) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 t (fma.f64 (log.f64 y) x -3))) (-.f64 t (fma.f64 (log.f64 y) x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (*.f64 0 (-.f64 t (fma.f64 (log.f64 y) x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 t (neg.f64 (fma.f64 (log.f64 y) x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 3 t) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 t (fma.f64 (log.f64 y) x -3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 6 t) (+.f64 (*.f64 x (log.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 3 t) 0) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 3 t) (-.f64 (+.f64 (*.f64 x (log.f64 y)) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (fma.f64 (log.f64 y) x -3) t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 3 (*.f64 x (log.f64 y))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 3 0) (fma.f64 x (log.f64 y) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 3 (neg.f64 t)) (*.f64 x (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 t (fma.f64 (log.f64 y) x -3))) (cbrt.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 27 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)) (/.f64 1 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 27) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)) (/.f64 1 (+.f64 (neg.f64 9) (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))) (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))))) (/.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (cbrt.f64 (pow.f64 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))) 1) (/.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))))) (/.f64 (-.f64 27 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)) (cbrt.f64 (pow.f64 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 27 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3))) 1) (/.f64 (cbrt.f64 (pow.f64 (-.f64 27 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)) 2)) (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 9) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (cbrt.f64 (*.f64 -3 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (+.f64 (cbrt.f64 3) (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (-.f64 (cbrt.f64 9) (cbrt.f64 (*.f64 -3 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (+.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 9) (+.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) (*.f64 (cbrt.f64 3) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))) (-.f64 (cbrt.f64 3) (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 2)) (cbrt.f64 (-.f64 t (fma.f64 (log.f64 y) x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (fma.f64 (log.f64 y) x -3) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 t (fma.f64 (log.f64 y) x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3))))) (-.f64 27 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)) (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 27) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)) (+.f64 (neg.f64 9) (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 2)) (cbrt.f64 (-.f64 27 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)))) (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (+.f64 (neg.f64 27) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3))) (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 27) (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)) 1) (+.f64 (neg.f64 9) (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (+.f64 3 (fma.f64 x (log.f64 y) (neg.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 19683 (pow.f64 (pow.f64 (-.f64 t (*.f64 x (log.f64 y))) 3) 3)) (/.f64 1 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))))) (-.f64 (+.f64 729 (pow.f64 (-.f64 t (*.f64 x (log.f64 y))) 6)) (pow.f64 (*.f64 -3 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 27 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3))) (cbrt.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 2))) (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 27 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)) (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))))) (cbrt.f64 (pow.f64 (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 27 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 3)) 1) (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 19683 (pow.f64 (pow.f64 (-.f64 t (*.f64 x (log.f64 y))) 3) 3)) 1) (*.f64 (-.f64 (+.f64 729 (pow.f64 (-.f64 t (*.f64 x (log.f64 y))) 6)) (pow.f64 (*.f64 -3 (fma.f64 x (log.f64 y) (neg.f64 t))) 3)) (+.f64 9 (*.f64 (-.f64 t (*.f64 x (log.f64 y))) (-.f64 t (+.f64 (*.f64 x (log.f64 y)) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 t (fma.f64 (log.f64 y) x -3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 t (fma.f64 (log.f64 y) x -3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 t (fma.f64 (log.f64 y) x -3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 (log.f64 y) x -3) t))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) (sqrt.f64 3) (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) (cbrt.f64 9) (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 t (*.f64 x (log.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 3 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 t (*.f64 x (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 3 t) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 3 t)) (cbrt.f64 (pow.f64 (+.f64 3 t) 2)) (*.f64 (neg.f64 x) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 9) (cbrt.f64 3) (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 1 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -3 (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 (sqrt.f64 3)) (-.f64 t (*.f64 x (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 t t)) (cbrt.f64 t) (neg.f64 (fma.f64 (log.f64 y) x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 t) (cbrt.f64 (*.f64 t t)) (neg.f64 (fma.f64 (log.f64 y) x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 t) (neg.f64 (fma.f64 (log.f64 y) x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 t (neg.f64 (fma.f64 (log.f64 y) x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t 1 (neg.f64 (fma.f64 (log.f64 y) x -3)))))))"]],"rules":[["egg-rr",83],["egg-rr",120],["egg-rr",28],["egg-rr",112]],"time":52.51904296875,"type":"rewrite"},{"count":[[475,366]],"inputs":[["(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(*.f64 -1 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(-.f64 (*.f64 (log.f64 y) x) t)","(-.f64 (*.f64 (log.f64 y) x) t)","(-.f64 (*.f64 (log.f64 y) x) t)","(-.f64 (*.f64 (log.f64 y) x) t)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 -1 (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","t","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","t","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","t","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(*.f64 -1 (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(*.f64 -1 (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(-.f64 t (*.f64 (log.f64 y) x))","(-.f64 t (*.f64 (log.f64 y) x))","(-.f64 t (*.f64 (log.f64 y) x))","(-.f64 t (*.f64 (log.f64 y) x))","(-.f64 t (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 t (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 t (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 t (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 t (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(-.f64 t (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(-.f64 t (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(-.f64 t (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(-.f64 3 (*.f64 (log.f64 y) x))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","t","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","t","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(+.f64 3 t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(*.f64 -1 (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(*.f64 -1 (*.f64 (log.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 (+.f64 3 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 (+.f64 3 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 (+.f64 3 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 (+.f64 3 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 (+.f64 3 t) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(-.f64 (+.f64 3 t) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(-.f64 (+.f64 3 t) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(-.f64 (+.f64 3 t) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 -1 t)","(neg.f64 t)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (log.f64 y) x)","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(+.f64 (*.f64 -1 t) (*.f64 (log.f64 y) x))","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (log.f64 y) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (log.f64 y) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (log.f64 y) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (log.f64 y) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x) t)","(fma.f64 (log.f64 y) x (neg.f64 t))","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x))","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x)","(*.f64 (log.f64 y) x)","(*.f64 -1 (*.f64 (log.f64 y) x))","(*.f64 (neg.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","t","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","t","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","t","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(*.f64 -1 (*.f64 (log.f64 y) x))","(*.f64 (neg.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(*.f64 -1 (*.f64 (log.f64 y) x))","(*.f64 (neg.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) t)","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 (log.f64 y) x))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 (log.f64 y) x))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 (log.f64 y) x))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 (log.f64 y) x))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 t (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(fma.f64 (neg.f64 (log.f64 y)) x t)","(-.f64 3 (*.f64 (log.f64 y) x))","(neg.f64 (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","t","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","t","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(+.f64 3 t)","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(*.f64 -1 (*.f64 (log.f64 y) x))","(*.f64 (neg.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(*.f64 -1 (*.f64 (log.f64 y) x))","(*.f64 (neg.f64 x) (log.f64 y))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(+.f64 (*.f64 -1 (*.f64 (log.f64 y) x)) (+.f64 3 t))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (log.f64 y) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 -1 (*.f64 (log.f64 (/.f64 1 y)) x)))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))","(-.f64 (+.f64 3 t) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) x))","(-.f64 t (fma.f64 (log.f64 y) x -3))"]],"time":413.8310546875,"type":"simplify"},{"compiler":[[8656,3934]],"time":84.873046875,"type":"eval"},{"alts":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (neg.f64 t)))","fresh",0.1989250488422101],["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (*.f64 (log.f64 y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (neg.f64 t)))","fresh",17.19214680192871],["(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","done",0.6623002930532609],["(fma.f64 z (log1p.f64 (neg.f64 y)) (-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))))","done",7.434540941927152],["(fma.f64 z (log1p.f64 (neg.f64 y)) (*.f64 (/.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))) (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (/.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) (pow.f64 (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) 2))))","fresh",28.24712758791598],["(fma.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)) (fma.f64 x (log.f64 y) (neg.f64 t)))","done",3.8451599556138847]],"compiler":[[22,15],[21,14],[18,13],[19,14],[76,41],[25,15]],"count":[[369,6]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[366,3],"picked":[1,1]}],"min-error":[0.00390625],"time":182.073974609375,"type":"prune"},{"accuracy":[0.0859375],"baseline":[0.0859375],"branch":[["x",0.0859375,1],["y",0.0859375,1],["z",0.0859375,1],["t",0.0859375,1],["(-.f64 (+.f64 (*.f64 x (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) t)",0.0859375,1],["(+.f64 (*.f64 x (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y))))",0.0859375,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[17,12],[15,11],[185,78]],"count":[[8,1]],"inputs":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (cbrt.f64 (log.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) x) (neg.f64 t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 (*.f64 (log.f64 y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (neg.f64 t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (*.f64 (/.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))) (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t))))))) (/.f64 (fma.f64 x (log.f64 y) (neg.f64 t)) (pow.f64 (cbrt.f64 (+.f64 9 (*.f64 (-.f64 t (fma.f64 (log.f64 y) x -3)) (-.f64 6 (fma.f64 x (log.f64 y) (neg.f64 t)))))) 2))))","(fma.f64 z (log1p.f64 (neg.f64 y)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 y) (neg.f64 t))) 3))","(fma.f64 z (log1p.f64 (neg.f64 y)) (-.f64 3 (+.f64 3 (-.f64 t (*.f64 x (log.f64 y))))))","(fma.f64 (cbrt.f64 (*.f64 z (log1p.f64 (neg.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 z (log1p.f64 (neg.f64 y))) 2)) (fma.f64 x (log.f64 y) (neg.f64 t)))","(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))","(-.f64 (+.f64 (*.f64 x (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) t)"]],"link":["."],"name":["Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, B"],"oracle":[43.97389287017413],"outputs":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))"]],"time":26.171875,"times":[["x",3.7041015625],["y",3.870849609375],["z",3.72900390625],["t",3.7998046875],["(-.f64 (+.f64 (*.f64 x (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y)))) t)",3.89794921875],["(+.f64 (*.f64 x (log.f64 y)) (*.f64 z (log.f64 (-.f64 1 y))))",3.97900390625]],"type":"regimes"},{"compiler":[[15,10]],"inputs":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 z (log1p.f64 (neg.f64 y)) (fma.f64 x (log.f64 y) (neg.f64 t)))"]],"stop":[["fuel",1]],"time":39.134033203125,"type":"simplify"},{"time":0.01806640625,"type":"soundness"},{"compiler":[[15,10]],"remove-preprocessing":[[]],"time":9.447021484375,"type":"end"}]
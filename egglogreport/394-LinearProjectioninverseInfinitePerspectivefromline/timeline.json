[{"compiler":[[14,9]],"method":["search"],"sampling":[[12,0.17153955242975893,0.7992183692750132,0.029242078295227847],[11,0.12475603813073377,0.8576977621487947,0.017546199720471556],[10,0.09356702859805033,0.9044812764478198,0.0019516949541298345],[9,0.062378019065366885,0.9356702859805033,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":140.26318359375,"type":"analyze"},{"outcomes":[["body",256,"invalid",109.3818359375,2446],["body",256,"valid",373.89697265625,8256]],"time":493.386962890625,"type":"sample"},{"compiler":[[13,8]],"inputs":[["0","1","2","3"],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 z x)) t)","(*.f64 (-.f64 (*.f64 z y) (*.f64 x y)) t)","(*.f64 (-.f64 (*.f64 t y) (*.f64 z y)) x)","(*.f64 (-.f64 (*.f64 x z) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 x t) (*.f64 z t)) y)","(*.f64 (-.f64 (*.f64 x y) (*.f64 t y)) z)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","(*.f64 (*.f64 t (-.f64 x z)) y)","(*.f64 (-.f64 (*.f64 y x) (*.f64 z x)) t)","(*.f64 (*.f64 x t) (-.f64 y z))","(*.f64 (-.f64 (*.f64 z y) (*.f64 x y)) t)","(*.f64 (*.f64 t y) (-.f64 z x))","(*.f64 (-.f64 (*.f64 t y) (*.f64 z y)) x)","(*.f64 y (*.f64 (-.f64 t z) x))","(*.f64 (-.f64 (*.f64 x z) (*.f64 y z)) t)","(*.f64 z (*.f64 (-.f64 x y) t))","(*.f64 (-.f64 (*.f64 x t) (*.f64 z t)) y)","(*.f64 (*.f64 t (-.f64 x z)) y)","(*.f64 (-.f64 (*.f64 x y) (*.f64 t y)) z)","(*.f64 (*.f64 z y) (-.f64 x t))"]],"symmetry":[[]],"time":82.89501953125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","(*.f64 y (*.f64 (-.f64 x z) t))"]],"time":17.3837890625,"type":"simplify"},{"compiler":[[20,11]],"time":0.326171875,"type":"eval"},{"alts":[["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","next",5.929623376229602],["(*.f64 y (*.f64 (-.f64 x z) t))","fresh",10.610067588958605]],"compiler":[[13,8],[11,7],[13,8],[11,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.1171875],"time":1.212890625,"type":"prune"},{"compiler":[[30,8]],"locations":[["(-.f64 (*.f64 x y) (*.f64 z y))",0.9570250574906175,true],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)",5.648298008808047,true]],"time":5.39501953125,"type":"localize"},{"count":[[2,84]],"series":[["(-.f64 (*.f64 x y) (*.f64 z y))","z","-inf",0.15283203125],["(-.f64 (*.f64 x y) (*.f64 z y))","z","inf",0.18310546875],["(-.f64 (*.f64 x y) (*.f64 z y))","z","0",0.190185546875],["(-.f64 (*.f64 x y) (*.f64 z y))","y","-inf",0.1650390625],["(-.f64 (*.f64 x y) (*.f64 z y))","y","inf",0.169921875],["(-.f64 (*.f64 x y) (*.f64 z y))","y","0",0.14892578125],["(-.f64 (*.f64 x y) (*.f64 z y))","x","-inf",0.183837890625],["(-.f64 (*.f64 x y) (*.f64 z y))","x","inf",0.157958984375],["(-.f64 (*.f64 x y) (*.f64 z y))","x","0",0.171875],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","t","-inf",0.866943359375],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","t","inf",0.3779296875],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","t","0",0.488037109375],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","z","-inf",0.3310546875],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","z","inf",0.321044921875],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","z","0",0.364013671875],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","y","-inf",0.8359375],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","y","inf",0.6259765625],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","y","0",0.77001953125],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","x","-inf",0.35888671875],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","x","inf",0.43505859375],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","x","0",0.56298828125]],"time":8.114013671875,"type":"series"},{"count":[[2,108]],"inputs":[["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","(-.f64 (*.f64 x y) (*.f64 z y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t y) x) (*.f64 (*.f64 t y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (*.f64 (-.f64 x z) t)) 0) (*.f64 y (*.f64 (-.f64 x z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 (-.f64 x z) t)) (*.f64 (*.f64 y (*.f64 (-.f64 x z) t)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t (*.f64 x y)) 1) (*.f64 (neg.f64 (*.f64 (*.f64 z y) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 t y)) (*.f64 (neg.f64 z) (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (*.f64 (-.f64 x z) t))) (*.f64 y (*.f64 (-.f64 x z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 (-.f64 x z) t)) (*.f64 0 (*.f64 y (*.f64 (-.f64 x z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t (*.f64 x y)) (neg.f64 (*.f64 (*.f64 z y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 z y) t)) (*.f64 t (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 x z)) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 t) (*.f64 (cbrt.f64 (*.f64 t t)) (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t y) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (*.f64 t y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)) t) (cbrt.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y (-.f64 z x)) t) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 t t)) (*.f64 y (-.f64 x z))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 t) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 z x)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 (-.f64 x z) t))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 (-.f64 x z) t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 (-.f64 x z) t)) 2)) (cbrt.f64 (*.f64 y (*.f64 (-.f64 x z) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t (cbrt.f64 (*.f64 y (-.f64 x z)))) (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y (-.f64 x z)) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (-.f64 x z) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (*.f64 (-.f64 x z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (*.f64 (-.f64 x z) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t t)) (*.f64 (*.f64 y (-.f64 x z)) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x z) t) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)) (*.f64 t (cbrt.f64 (*.f64 y (-.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 (-.f64 x z) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 (-.f64 x z) t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 (-.f64 x z) t))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 (-.f64 x z) t))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 (-.f64 x z) t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 (-.f64 x z) t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (*.f64 y (-.f64 z x)) t) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 t y) (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 (-.f64 x z) t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t (*.f64 x y) (neg.f64 (*.f64 (*.f64 z y) t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) t (neg.f64 (*.f64 (*.f64 z y) t)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (-.f64 x z)) 0) (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 x z)) (*.f64 (*.f64 y (-.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (-.f64 x z))) (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 x z)) (*.f64 0 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 z y)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x y) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x y) 0) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 x z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 z x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (-.f64 (*.f64 (cbrt.f64 (*.f64 y y)) x) (*.f64 (cbrt.f64 (*.f64 y y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (*.f64 x y)) (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (*.f64 x (cbrt.f64 y)) (*.f64 (neg.f64 z) (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (*.f64 (neg.f64 z) (cbrt.f64 y)) (*.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (-.f64 (*.f64 x (cbrt.f64 y)) (*.f64 z (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 y (-.f64 z x)))) (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (+.f64 (cbrt.f64 (pow.f64 (*.f64 z y) 2)) (cbrt.f64 (*.f64 (*.f64 (*.f64 x y) y) z)))) (-.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)) (cbrt.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 y (-.f64 z x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (neg.f64 y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 z y))) (cbrt.f64 (pow.f64 (*.f64 z y) 2)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) y (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z y)) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 z y) 2))) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) x) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) y) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x y)) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (cbrt.f64 (*.f64 x y)) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 z y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 z y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 y (-.f64 x z)))))))"]],"rules":[["egg-rr",64],["egg-rr",44]],"time":24.680908203125,"type":"rewrite"},{"count":[[192,123]],"inputs":[["(*.f64 -1 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y (*.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) t)))","(*.f64 -1 (*.f64 y (*.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) t)))","(*.f64 -1 (*.f64 y (*.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) t)))","(*.f64 -1 (*.f64 y (*.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) t)))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 x) (*.f64 -1 z))))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 x) (*.f64 -1 z))))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 x) (*.f64 -1 z))))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 x) (*.f64 -1 z))))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y (*.f64 t z)))","(neg.f64 (*.f64 (*.f64 y t) z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t x))","(*.f64 (*.f64 y t) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t x))","(*.f64 (*.f64 y t) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y (*.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) t)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y (*.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) t)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y (*.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) t)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y (*.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) t)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t x))","(*.f64 (*.f64 y t) x)","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(neg.f64 (*.f64 (*.f64 y t) z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(neg.f64 (*.f64 (*.f64 y t) z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 (-.f64 (*.f64 y x) (*.f64 y z)) t)","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 x) (*.f64 -1 z))))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 x) (*.f64 -1 z))))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 x) (*.f64 -1 z))))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 -1 x) (*.f64 -1 z))))","(*.f64 y (-.f64 x z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y x))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 x z))"]],"time":251.217041015625,"type":"simplify"},{"compiler":[[1440,421]],"time":13.662109375,"type":"eval"},{"alts":[["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","done",5.929623376229602],["(*.f64 (*.f64 t y) (-.f64 x z))","next",7.5629276002317125],["(*.f64 (cbrt.f64 t) (*.f64 (cbrt.f64 (*.f64 t t)) (*.f64 y (-.f64 x z))))","fresh",27.347568959103143],["(*.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)) t))","fresh",23.82428135803964],["(*.f64 y (*.f64 (-.f64 x z) t))","fresh",10.610067588958605],["(*.f64 (*.f64 (*.f64 y (-.f64 x z)) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))","fresh",27.328037709103143],["(pow.f64 (cbrt.f64 (*.f64 y (*.f64 (-.f64 x z) t))) 3)","fresh",10.96826778432745]],"compiler":[[13,8],[11,7],[17,11],[21,12],[11,7],[17,11],[14,10],[11,7],[17,11],[21,12],[11,7],[17,11],[14,10]],"count":[[125,7]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[123,6],"picked":[1,1]}],"min-error":[0.015625],"time":31.740966796875,"type":"prune"},{"compiler":[[21,7]],"locations":[["(*.f64 (*.f64 t y) (-.f64 x z))",7.375685942269115,true]],"time":4.381103515625,"type":"localize"},{"count":[[1,48]],"series":[["(*.f64 (*.f64 t y) (-.f64 x z))","z","-inf",0.303955078125],["(*.f64 (*.f64 t y) (-.f64 x z))","z","inf",0.3779296875],["(*.f64 (*.f64 t y) (-.f64 x z))","z","0",0.344970703125],["(*.f64 (*.f64 t y) (-.f64 x z))","x","-inf",0.406005859375],["(*.f64 (*.f64 t y) (-.f64 x z))","x","inf",0.416015625],["(*.f64 (*.f64 t y) (-.f64 x z))","x","0",0.343994140625],["(*.f64 (*.f64 t y) (-.f64 x z))","y","-inf",0.26513671875],["(*.f64 (*.f64 t y) (-.f64 x z))","y","inf",0.333984375],["(*.f64 (*.f64 t y) (-.f64 x z))","y","0",1.111083984375],["(*.f64 (*.f64 t y) (-.f64 x z))","t","-inf",0.3310546875],["(*.f64 (*.f64 t y) (-.f64 x z))","t","inf",0.466064453125],["(*.f64 (*.f64 t y) (-.f64 x z))","t","0",0.537109375]],"time":5.3779296875,"type":"series"},{"count":[[1,45]],"inputs":[["(*.f64 (*.f64 t y) (-.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 0) (*.f64 (*.f64 t y) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t y) (-.f64 x z)) (*.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t (*.f64 y x)) (*.f64 t (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 t y) (-.f64 x z))) (*.f64 (*.f64 t y) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t y) (-.f64 x z)) (*.f64 0 (*.f64 (*.f64 t y) (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) t) (*.f64 (neg.f64 (*.f64 z y)) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 t y) x) 1) (*.f64 (neg.f64 (*.f64 z (*.f64 t y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t y) x) (neg.f64 (*.f64 z (*.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z (*.f64 t y))) (*.f64 (*.f64 t y) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 z x) (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t y) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (*.f64 t y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 x z)) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x z) t) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x z) (cbrt.f64 (*.f64 t y))) (pow.f64 (*.f64 t y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 t) (*.f64 (pow.f64 t 2/3) (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (-.f64 x z) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t y)) (*.f64 (pow.f64 (*.f64 t y) 2/3) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x z)) (*.f64 (pow.f64 (-.f64 x z) 2/3) (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 t 2/3) (*.f64 y (-.f64 x z))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 t y) 2/3) (-.f64 x z)) (cbrt.f64 (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 x z) 2/3) (*.f64 t y)) (cbrt.f64 (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 t y) 2/3) (*.f64 (-.f64 x z) (cbrt.f64 (*.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 t y)) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) (neg.f64 (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3) (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 t y) (cbrt.f64 (-.f64 x z))) (pow.f64 (-.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x z) 2/3) (*.f64 (*.f64 t y) (cbrt.f64 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 z x) (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z x) (*.f64 t y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 t y) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 z x) (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 z x) (*.f64 t y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 t (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t y) x (neg.f64 (*.f64 z (*.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 t y) (neg.f64 (*.f64 z (*.f64 t y))))))))"]],"rules":[["egg-rr",45]],"time":22.47607421875,"type":"rewrite"},{"count":[[93,51]],"inputs":[["(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(neg.f64 (*.f64 (*.f64 y t) z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(neg.f64 (*.f64 (*.f64 y t) z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(neg.f64 (*.f64 (*.f64 y t) z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t (-.f64 x z)))"]],"time":141.4609375,"type":"simplify"},{"compiler":[[567,149]],"time":4.9208984375,"type":"eval"},{"alts":[["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","done",5.929623376229602],["(*.f64 (*.f64 t y) (-.f64 x z))","done",7.5629276002317125],["(*.f64 y (*.f64 t (-.f64 x z)))","fresh",10.610067588958605],["(*.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)) t))","fresh",23.82428135803964],["(*.f64 (*.f64 (*.f64 y (-.f64 x z)) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))","fresh",27.328037709103143],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","next",7.8960690553689945]],"compiler":[[13,8],[11,7],[11,7],[21,12],[17,11],[14,10],[11,7],[21,12],[17,11],[14,10]],"count":[[58,6]],"kept":[{"done":[1,1],"fresh":[5,2],"new":[51,2],"picked":[1,1]}],"min-error":[0.01171875],"time":11.358154296875,"type":"prune"},{"compiler":[[40,11]],"locations":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)",0.5834351562950725,true],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))",6.777448281271356,true],["(*.f64 (*.f64 t y) (-.f64 x z))",7.375685942269115,false]],"time":7.29296875,"type":"localize"},{"count":[[2,16]],"series":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","z","-inf",0.427001953125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","z","inf",0.5078125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","z","0",2.231201171875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","x","-inf",0.555908203125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","x","inf",0.510009765625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","x","0",2.558837890625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","y","-inf",0.52294921875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","y","inf",0.484130859375],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","y","0",0.368896484375],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","t","-inf",0.81201171875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","t","inf",2.10205078125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","t","0",0.559814453125],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","z","-inf",0.31103515625],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","z","inf",0.291015625],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","z","0",1.054931640625],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","x","-inf",0.386962890625],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","x","inf",0.348876953125],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","x","0",1.377197265625],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","y","-inf",0.376953125],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","y","inf",0.316162109375],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","y","0",0.281005859375],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","t","-inf",0.462158203125],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","t","inf",0.367919921875],["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","t","0",0.432861328125]],"time":18.02783203125,"type":"series"},{"count":[[2,91]],"inputs":[["(cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))","(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 0) (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) (*.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))) (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) (*.f64 0 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t y)) (cbrt.f64 (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x z)) (cbrt.f64 (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 t) (cbrt.f64 (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 t)) (cbrt.f64 (*.f64 (pow.f64 t 2/3) (*.f64 y (-.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (-.f64 x z) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 x z) (cbrt.f64 (*.f64 t y)))) (cbrt.f64 (pow.f64 (*.f64 t y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 x z))) (cbrt.f64 (*.f64 (pow.f64 (-.f64 x z) 2/3) (*.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3)) (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 t y))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 t y) 2/3) (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 t y))) (cbrt.f64 (*.f64 (cbrt.f64 (-.f64 x z)) (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 t y) (cbrt.f64 (-.f64 x z)))) (cbrt.f64 (pow.f64 (-.f64 x z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3) (cbrt.f64 (*.f64 t y)))) (cbrt.f64 (cbrt.f64 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 (-.f64 z x) (*.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 z x) (*.f64 t y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 x z) t)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 (-.f64 z x) (*.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 0) (*.f64 (*.f64 t y) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t y) (-.f64 x z)) (*.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t (*.f64 y x)) (*.f64 t (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 t y) (-.f64 x z))) (*.f64 (*.f64 t y) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t y) (-.f64 x z)) (*.f64 0 (*.f64 (*.f64 t y) (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) t) (*.f64 (neg.f64 (*.f64 z y)) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t y) x) (neg.f64 (*.f64 z (*.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 t y) x) 1) (*.f64 (neg.f64 (*.f64 z (*.f64 t y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z (*.f64 t y))) (*.f64 (*.f64 t y) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 z x) (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t y) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (*.f64 t y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 x z)) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 t) (*.f64 (pow.f64 t 2/3) (*.f64 y (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3) (cbrt.f64 (*.f64 t y))) (cbrt.f64 (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x z) t) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x z)) (*.f64 (pow.f64 (-.f64 x z) 2/3) (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t y)) (*.f64 (cbrt.f64 (-.f64 x z)) (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3)) (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t y)) (*.f64 (pow.f64 (*.f64 t y) 2/3) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (-.f64 x z) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 z x) (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 x z) 2/3) (*.f64 t y)) (cbrt.f64 (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x z)) (*.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3) (cbrt.f64 (*.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (-.f64 x z)) (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3)) (cbrt.f64 (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3)) (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 t 2/3) (*.f64 y (-.f64 x z))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z x) (*.f64 t y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 t y) 2/3) (-.f64 x z)) (cbrt.f64 (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 t y)) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) (neg.f64 (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (*.f64 (-.f64 z x) (*.f64 t y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3) (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 t y) (cbrt.f64 (-.f64 x z))) (pow.f64 (-.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x z) (cbrt.f64 (*.f64 t y))) (pow.f64 (*.f64 t y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 t y) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x z) 2/3) (*.f64 (*.f64 t y) (cbrt.f64 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 t y) 2/3) (*.f64 (-.f64 x z) (cbrt.f64 (*.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 z x) (*.f64 t y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 y (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 z x) (*.f64 t y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 t (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 t y) (-.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 t y) x (neg.f64 (*.f64 z (*.f64 t y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 t y) (neg.f64 (*.f64 z (*.f64 t y))))))))"]],"rules":[["egg-rr",58],["egg-rr",33]],"time":25.045166015625,"type":"rewrite"},{"count":[[107,123]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (cbrt.f64 -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (cbrt.f64 -1)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 11) (pow.f64 t 11))) (pow.f64 z 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2))))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 t 2) (pow.f64 z 2)))) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 11) (pow.f64 t 11))) (pow.f64 z 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2)))))))","(pow.f64 (*.f64 y (*.f64 t x)) 1/3)","(+.f64 (pow.f64 (*.f64 y (*.f64 t x)) 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/9) z)))","(+.f64 (pow.f64 (*.f64 y (*.f64 t x)) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/9) z)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 11) (pow.f64 t 11))) (pow.f64 x 7)) 1/9) (pow.f64 z 2)))))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 t 2) (pow.f64 x 2)))) 1/3) (*.f64 (pow.f64 z 3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 x 2)) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/3)))))) (+.f64 (pow.f64 (*.f64 y (*.f64 t x)) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/9) z)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 11) (pow.f64 t 11))) (pow.f64 x 7)) 1/9) (pow.f64 z 2))))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t z)))))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 17) (pow.f64 t 17))) z) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 17) (pow.f64 t 17))) z) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t z))))))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 17) (pow.f64 t 17))) z) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 17) (pow.f64 t 17))) z) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 t 2)) z))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 y (*.f64 t z))) 1/3) (/.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))))) (cbrt.f64 -1))))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))))))))) (pow.f64 x 3)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t z)))))))","(*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 z (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)))) (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t x))))","(+.f64 (*.f64 z (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)))) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 17) (pow.f64 t 17))) x) 1/9)) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t x))) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9)))) (*.f64 -1/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 17) (pow.f64 t 17))) x) 1/9)))) (pow.f64 z 2)) (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t x)))))","(+.f64 (*.f64 z (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)))) (+.f64 (*.f64 (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 x 2)) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/9) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 x 2)) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/3))))) (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t x))) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 t 2)) x))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 y (*.f64 t x))) 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 x 2)) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/3)))))))))) (pow.f64 z 3)) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 17) (pow.f64 t 17))) x) 1/9)) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t x))) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9)))) (*.f64 -1/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 17) (pow.f64 t 17))) x) 1/9)))) (pow.f64 z 2)) (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t x))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 (*.f64 (*.f64 y t) z)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (cbrt.f64 -1)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))))","(fma.f64 (*.f64 1/3 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 z -2)) 1/9)) x (cbrt.f64 (neg.f64 (*.f64 (*.f64 y t) z))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 11) (pow.f64 t 11))) (pow.f64 z 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2))))))","(+.f64 (fma.f64 (*.f64 1/3 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 z -2)) 1/9)) x (cbrt.f64 (neg.f64 (*.f64 (*.f64 y t) z)))) (*.f64 (*.f64 -1/9 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 11) (pow.f64 z -7)) 1/9)) (neg.f64 (*.f64 x x))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) x))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 t 2) (pow.f64 z 2)))) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 11) (pow.f64 t 11))) (pow.f64 z 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (pow.f64 x 2)))))))","(+.f64 (fma.f64 (*.f64 1/3 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 z -2)) 1/9)) x (cbrt.f64 (neg.f64 (*.f64 (*.f64 y t) z)))) (fma.f64 -1/3 (*.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 z -2))) (+.f64 1/27 -2/9)) (pow.f64 x 3)) (cbrt.f64 (/.f64 (pow.f64 y -2) (pow.f64 (*.f64 t z) 2)))) (*.f64 (*.f64 -1/9 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 11) (pow.f64 z -7)) 1/9)) (neg.f64 (*.f64 x x)))))","(pow.f64 (*.f64 y (*.f64 t x)) 1/3)","(cbrt.f64 (*.f64 (*.f64 y t) x))","(+.f64 (pow.f64 (*.f64 y (*.f64 t x)) 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/9) z)))","(fma.f64 (*.f64 -1/3 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 x -2)) 1/9)) z (cbrt.f64 (*.f64 (*.f64 y t) x)))","(+.f64 (pow.f64 (*.f64 y (*.f64 t x)) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/9) z)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 11) (pow.f64 t 11))) (pow.f64 x 7)) 1/9) (pow.f64 z 2)))))","(+.f64 (fma.f64 (*.f64 -1/3 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 x -2)) 1/9)) z (cbrt.f64 (*.f64 (*.f64 y t) x))) (*.f64 (*.f64 -1/9 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 11) (pow.f64 x -7)) 1/9)) (*.f64 z z)))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 t 2) (pow.f64 x 2)))) 1/3) (*.f64 (pow.f64 z 3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 x 2)) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/3)))))) (+.f64 (pow.f64 (*.f64 y (*.f64 t x)) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/9) z)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 11) (pow.f64 t 11))) (pow.f64 x 7)) 1/9) (pow.f64 z 2))))))","(fma.f64 -1/3 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (*.f64 y t) x) 2) -1)) (*.f64 (pow.f64 z 3) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 x -2))) (+.f64 -1/27 2/9)))) (+.f64 (fma.f64 (*.f64 -1/3 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 x -2)) 1/9)) z (cbrt.f64 (*.f64 (*.f64 y t) x))) (*.f64 (*.f64 -1/9 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 11) (pow.f64 x -7)) 1/9)) (*.f64 z z))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t z))))","(neg.f64 (*.f64 (*.f64 y t) z))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t z)))))","(fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 y 13) (pow.f64 t 13)) (pow.f64 z 4)) 1/9) x (neg.f64 (*.f64 (*.f64 y t) z)))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 17) (pow.f64 t 17))) z) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 17) (pow.f64 t 17))) z) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t z))))))","(fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 y 13) (pow.f64 t 13)) (pow.f64 z 4)) 1/9) x (fma.f64 (fma.f64 2/9 (neg.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 y t) 17) z) 1/9)) (fma.f64 (cbrt.f64 (*.f64 (*.f64 y t) z)) (neg.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 14) (pow.f64 z -4)) 1/9) -1/9)) (*.f64 -1/9 (neg.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 y t) 17) z) 1/9))))) (*.f64 x x) (neg.f64 (*.f64 (*.f64 y t) z))))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 z 4)))) 1/9) (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))) x) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 17) (pow.f64 t 17))) z) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (*.f64 (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3)))) (cbrt.f64 -1))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 17) (pow.f64 t 17))) z) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3))))) (pow.f64 x 2)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 1 4) (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 z 4)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3))))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t z))) 1/3) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 t 2)) z))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 y (*.f64 t z))) 1/3) (/.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))))) (cbrt.f64 -1))))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 z 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))))))))) (pow.f64 x 3)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t z)))))))","(fma.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 y 13) (pow.f64 t 13)) (pow.f64 z 4)) 1/9) x (fma.f64 (*.f64 x x) (fma.f64 2/9 (neg.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 y t) 17) z) 1/9)) (fma.f64 (cbrt.f64 (*.f64 (*.f64 y t) z)) (neg.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 14) (pow.f64 z -4)) 1/9) -1/9)) (*.f64 -1/9 (neg.f64 (pow.f64 (/.f64 (pow.f64 (*.f64 y t) 17) z) 1/9))))) (fma.f64 (pow.f64 x 3) (fma.f64 1/3 (*.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 14) (pow.f64 z -4)) 1/9) -1/9) (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 z -2)) 1/9)) (fma.f64 (cbrt.f64 (*.f64 (*.f64 y t) z)) (neg.f64 (fma.f64 (*.f64 -2/3 (cbrt.f64 (/.f64 (/.f64 1 (*.f64 y t)) z))) (neg.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 z -2))) (+.f64 1/27 -2/9))) (/.f64 (*.f64 2/27 (pow.f64 (*.f64 y t) 2)) z))) (fma.f64 -1/3 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 z -2))) (+.f64 1/27 -2/9)) (*.f64 -2/27 (cbrt.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 z -2))))))) (neg.f64 (*.f64 (*.f64 y t) z)))))","(*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t x)))","(*.f64 (*.f64 y t) x)","(+.f64 (*.f64 z (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)))) (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t x))))","(fma.f64 z (*.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 y 13) (pow.f64 t 13)) (pow.f64 x 4)) 1/9) -1) (*.f64 (*.f64 y t) x))","(+.f64 (*.f64 z (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)))) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 17) (pow.f64 t 17))) x) 1/9)) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t x))) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9)))) (*.f64 -1/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 17) (pow.f64 t 17))) x) 1/9)))) (pow.f64 z 2)) (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t x)))))","(fma.f64 z (*.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 y 13) (pow.f64 t 13)) (pow.f64 x 4)) 1/9) -1) (fma.f64 (fma.f64 2/9 (pow.f64 (/.f64 (pow.f64 (*.f64 y t) 17) x) 1/9) (fma.f64 (cbrt.f64 (*.f64 (*.f64 y t) x)) (*.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 14) (pow.f64 x -4)) 1/9) -1/9) (*.f64 -1/9 (pow.f64 (/.f64 (pow.f64 (*.f64 y t) 17) x) 1/9)))) (*.f64 z z) (*.f64 (*.f64 y t) x)))","(+.f64 (*.f64 z (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 13) (*.f64 (pow.f64 t 13) (pow.f64 x 4)))) 1/9)))) (+.f64 (*.f64 (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 x 2)) 1/3))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/9) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9))))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 x 2)) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/3))))) (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t x))) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 t 2)) x))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 y (*.f64 t x))) 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 (*.f64 (pow.f64 y 7) (pow.f64 t 7)) (pow.f64 x 2)) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 t 7))) (pow.f64 x 2)) 1/3)))))))))) (pow.f64 z 3)) (+.f64 (*.f64 (+.f64 (*.f64 2/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 17) (pow.f64 t 17))) x) 1/9)) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y (*.f64 t x))) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 14) (pow.f64 t 14))) (pow.f64 x 4)) 1/9)))) (*.f64 -1/9 (pow.f64 (/.f64 (*.f64 1 (*.f64 (pow.f64 y 17) (pow.f64 t 17))) x) 1/9)))) (pow.f64 z 2)) (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 t x))))))","(fma.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (pow.f64 y 13) (pow.f64 t 13)) (pow.f64 x 4)) 1/9) -1) z (fma.f64 (pow.f64 z 3) (fma.f64 2/27 (cbrt.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 x -2))) (+.f64 (*.f64 -1/3 (+.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 x -2)) 1/9) (*.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 14) (pow.f64 x -4)) 1/9) -1/9)) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 x -2))) (+.f64 -1/27 2/9)))) (*.f64 (cbrt.f64 (*.f64 (*.f64 y t) x)) (fma.f64 (*.f64 -2/3 (cbrt.f64 (/.f64 1 (*.f64 (*.f64 y t) x)))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 y t) 7) (pow.f64 x -2))) (+.f64 -1/27 2/9)) (/.f64 (*.f64 2/27 (pow.f64 (*.f64 y t) 2)) x))))) (fma.f64 (fma.f64 2/9 (pow.f64 (/.f64 (pow.f64 (*.f64 y t) 17) x) 1/9) (fma.f64 (cbrt.f64 (*.f64 (*.f64 y t) x)) (*.f64 (pow.f64 (*.f64 (pow.f64 (*.f64 y t) 14) (pow.f64 x -4)) 1/9) -1/9) (*.f64 -1/9 (pow.f64 (/.f64 (pow.f64 (*.f64 y t) 17) x) 1/9)))) (*.f64 z z) (*.f64 (*.f64 y t) x))))"]],"time":85.954833984375,"type":"simplify"},{"compiler":[[4590,2535]],"time":49.64013671875,"type":"eval"},{"alts":[["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","done",5.929623376229602],["(*.f64 (*.f64 t y) (-.f64 x z))","done",7.5629276002317125],["(*.f64 y (*.f64 t (-.f64 x z)))","next",10.610067588958605],["(*.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)) t))","fresh",23.82428135803964],["(*.f64 (*.f64 (*.f64 y (-.f64 x z)) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))","fresh",27.328037709103143],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","done",7.8960690553689945]],"compiler":[[13,8],[11,7],[11,7],[21,12],[17,11],[14,10],[11,7],[21,12],[17,11]],"count":[[180,6]],"kept":[{"done":[2,2],"fresh":[3,3],"new":[174,0],"picked":[1,1]}],"min-error":[0.01171875],"time":39.093994140625,"type":"prune"},{"compiler":[[23,7]],"locations":[["(*.f64 t (-.f64 x z))",0.015625,true],["(*.f64 y (*.f64 t (-.f64 x z)))",10.00487521366988,true]],"time":4.4609375,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 t (-.f64 x z))","z","-inf",0.15185546875],["(*.f64 t (-.f64 x z))","z","inf",0.177001953125],["(*.f64 t (-.f64 x z))","z","0",0.1572265625],["(*.f64 t (-.f64 x z))","x","-inf",0.33203125],["(*.f64 t (-.f64 x z))","x","inf",0.15283203125],["(*.f64 t (-.f64 x z))","x","0",0.2080078125],["(*.f64 t (-.f64 x z))","t","-inf",0.268798828125],["(*.f64 t (-.f64 x z))","t","inf",0.323974609375],["(*.f64 t (-.f64 x z))","t","0",0.141845703125],["(*.f64 y (*.f64 t (-.f64 x z)))","z","-inf",0.194091796875],["(*.f64 y (*.f64 t (-.f64 x z)))","z","inf",0.16796875],["(*.f64 y (*.f64 t (-.f64 x z)))","z","0",0.18701171875],["(*.f64 y (*.f64 t (-.f64 x z)))","x","-inf",0.1708984375],["(*.f64 y (*.f64 t (-.f64 x z)))","x","inf",0.281005859375],["(*.f64 y (*.f64 t (-.f64 x z)))","x","0",0.1630859375],["(*.f64 y (*.f64 t (-.f64 x z)))","t","-inf",0.1611328125],["(*.f64 y (*.f64 t (-.f64 x z)))","t","inf",0.190185546875],["(*.f64 y (*.f64 t (-.f64 x z)))","t","0",0.151123046875],["(*.f64 y (*.f64 t (-.f64 x z)))","y","-inf",0.16015625],["(*.f64 y (*.f64 t (-.f64 x z)))","y","inf",0.196044921875],["(*.f64 y (*.f64 t (-.f64 x z)))","y","0",0.18603515625]],"time":4.341064453125,"type":"series"},{"count":[[2,79]],"inputs":[["(*.f64 y (*.f64 t (-.f64 x z)))","(*.f64 t (-.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 t x)) (*.f64 y (neg.f64 (*.f64 z t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (*.f64 t (-.f64 x z))) 0) (*.f64 y (*.f64 t (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 t (-.f64 x z))) (*.f64 (*.f64 y (*.f64 t (-.f64 x z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 y t) x) 1) (*.f64 (neg.f64 (*.f64 z (*.f64 y t))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t x) y) (*.f64 (neg.f64 (*.f64 z t)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (*.f64 t (-.f64 x z)))) (*.f64 y (*.f64 t (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 t (-.f64 x z))) (*.f64 0 (*.f64 y (*.f64 t (-.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z (*.f64 y t))) (*.f64 (*.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y t) x) (neg.f64 (*.f64 z (*.f64 y t))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 z x) (*.f64 y t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 t (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t (-.f64 x z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y t) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (*.f64 y t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 t (-.f64 x z)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 x z)) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 t (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t (-.f64 x z))) (*.f64 (pow.f64 (*.f64 t (-.f64 x z)) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 t (-.f64 x z)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 t (-.f64 x z))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 t (-.f64 x z)) 2/3) y) (cbrt.f64 (*.f64 t (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y t)) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 t (-.f64 x z)))) (pow.f64 (*.f64 y (*.f64 t (-.f64 x z))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (*.f64 t (-.f64 x z))) 2/3) (cbrt.f64 (*.f64 y (*.f64 t (-.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 t (-.f64 x z)))) (pow.f64 (*.f64 t (-.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y t) (cbrt.f64 (-.f64 x z))) (pow.f64 (-.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 t (-.f64 x z)) 2/3) (*.f64 y (cbrt.f64 (*.f64 t (-.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x z) 2/3) (*.f64 (*.f64 y t) (cbrt.f64 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 z x) (*.f64 y t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (*.f64 t (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (*.f64 t (-.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z x) (*.f64 y t)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 t (-.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 t (-.f64 x z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 t (-.f64 x z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 t (-.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 z x) (*.f64 y t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 z x) t) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 z x) (*.f64 y t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 y (*.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 t (-.f64 x z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 y t) (neg.f64 (*.f64 z (*.f64 y t))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y t) x (neg.f64 (*.f64 z (*.f64 y t))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t (-.f64 x z)) 0) (*.f64 t (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t (-.f64 x z)) (*.f64 (*.f64 t (-.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t x) 1) (*.f64 (neg.f64 (*.f64 z t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 t (-.f64 x z))) (*.f64 t (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t (-.f64 x z)) (*.f64 0 (*.f64 t (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t x) (neg.f64 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z t)) (*.f64 t x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x z) (cbrt.f64 t)) (pow.f64 t 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x z)) (*.f64 (pow.f64 (-.f64 x z) 2/3) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 t) (*.f64 (pow.f64 t 2/3) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 t 2/3) (-.f64 x z)) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 x z) 2/3) t) (cbrt.f64 (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 t 2/3) (*.f64 (-.f64 x z) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 t) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t (-.f64 x z))) (pow.f64 (*.f64 t (-.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 t (-.f64 x z)) 2/3) (cbrt.f64 (*.f64 t (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t (cbrt.f64 (-.f64 x z))) (pow.f64 (-.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 x z) 2/3) (*.f64 t (cbrt.f64 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z x) t) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 t (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 t (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 t (-.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 t (-.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 t (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 z x) t) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 t (-.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 t x (neg.f64 (*.f64 z t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x t (neg.f64 (*.f64 z t)))))))"]],"rules":[["egg-rr",35],["egg-rr",44]],"time":26.18701171875,"type":"rewrite"},{"count":[[127,88]],"inputs":[["(*.f64 -1 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 -1 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 -1 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 -1 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y (*.f64 t z)))","(neg.f64 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 (*.f64 y t) (-.f64 x z))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 (*.f64 y t) (-.f64 x z))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 (*.f64 y t) (-.f64 x z))","(*.f64 y (*.f64 t x))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y (*.f64 t z))) (*.f64 y (*.f64 t x)))","(*.f64 (*.f64 y t) (-.f64 x z))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(neg.f64 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 (*.f64 y t) (-.f64 x z))","(*.f64 -1 (*.f64 y (*.f64 t z)))","(neg.f64 (*.f64 y (*.f64 t z)))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 (*.f64 y t) (-.f64 x z))","(+.f64 (*.f64 y (*.f64 t x)) (*.f64 -1 (*.f64 y (*.f64 t z))))","(*.f64 (*.f64 y t) (-.f64 x z))","(*.f64 -1 (*.f64 t z))","(neg.f64 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(*.f64 t x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(*.f64 t x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(*.f64 t x)","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(*.f64 -1 (*.f64 t z))","(neg.f64 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(*.f64 -1 (*.f64 t z))","(neg.f64 (*.f64 t z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 t z)) (*.f64 t x))","(*.f64 t (-.f64 x z))"]],"time":145.803955078125,"type":"simplify"},{"compiler":[[975,273]],"time":8.962890625,"type":"eval"},{"alts":[["(*.f64 y (pow.f64 (cbrt.f64 (*.f64 t (-.f64 x z))) 3))","fresh",10.975786583169656],["(*.f64 (*.f64 t y) (-.f64 x z))","done",7.5629276002317125],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","done",5.929623376229602],["(*.f64 y (*.f64 t (-.f64 x z)))","done",10.610067588958605],["(pow.f64 (cbrt.f64 (*.f64 y (*.f64 t (-.f64 x z)))) 3)","fresh",10.96826778432745],["(*.f64 (*.f64 (*.f64 y (-.f64 x z)) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))","fresh",27.328037709103143],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","done",7.8960690553689945]],"compiler":[[14,10],[11,7],[13,8],[11,7],[14,10],[17,11],[14,10]],"count":[[94,7]],"kept":[{"done":[3,3],"fresh":[2,1],"new":[88,2],"picked":[1,1]}],"min-error":[0.01171875],"time":18.149169921875,"type":"prune"},{"accuracy":[0.6874358762296017],"baseline":[5.929623376229602],"branch":[["x",4.237118520102648,2],["y",1.1835296262296016,3],["z",3.5721299514897136,2],["t",1.637347215188207,3],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)",0.6952483762296017,3],["(-.f64 (*.f64 x y) (*.f64 z y))",0.6874358762296017,3]],"compiler":[[5,4],[5,4],[5,4],[5,4],[13,8],[11,7],[124,42]],"count":[[12,3]],"inputs":[["(*.f64 y (pow.f64 (cbrt.f64 (*.f64 t (-.f64 x z))) 3))","(pow.f64 (cbrt.f64 (*.f64 y (*.f64 t (-.f64 x z)))) 3)","(*.f64 y (*.f64 t (-.f64 x z)))","(pow.f64 (cbrt.f64 (*.f64 (*.f64 t y) (-.f64 x z))) 3)","(*.f64 (*.f64 t y) (-.f64 x z))","(*.f64 (cbrt.f64 t) (*.f64 (cbrt.f64 (*.f64 t t)) (*.f64 y (-.f64 x z))))","(*.f64 (cbrt.f64 (*.f64 y (-.f64 x z))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 x z)) 2)) t))","(*.f64 y (*.f64 (-.f64 x z) t))","(*.f64 (*.f64 (*.f64 y (-.f64 x z)) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))","(pow.f64 (cbrt.f64 (*.f64 y (*.f64 (-.f64 x z) t))) 3)","(*.f64 y (*.f64 (-.f64 x z) t))","(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)"]],"link":["."],"name":["Linear.Projection:inverseInfinitePerspective from linear-1.19.1.3"],"oracle":[43.90229291374231],"outputs":[["(*.f64 (*.f64 t y) (-.f64 x z))","(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)","(*.f64 (*.f64 t y) (-.f64 x z))"]],"time":77.630859375,"times":[["x",9.349853515625],["y",13.700927734375],["z",13.782958984375],["t",13.427001953125],["(*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t)",12.1640625],["(-.f64 (*.f64 x y) (*.f64 z y))",12.801025390625]],"type":"regimes"},{"bstep":[[8.701672292116007e+192,2.458646122841658e+194,0.056884765625],[{"type":"real","value":"-inf"},-6.667242305656367e+290,0.037109375]],"compiler":[[9,7],[11,7]],"method":["left-value","left-value"],"time":0.203125,"type":"bsearch"},{"compiler":[[47,17]],"inputs":[["(if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z y)) -inf.0) (*.f64 (*.f64 t y) (-.f64 x z)) (if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z y)) 10000000000000000662275133196073022890814778906781692175574718614061870706920546714670378554471083956139627305190456203824330868103505742897540916997511012040520808812168041334151877325366493184) (*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t) (*.f64 (*.f64 t y) (-.f64 x z))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z y)) -inf.0) (*.f64 (*.f64 t y) (-.f64 x z)) (if (<=.f64 (-.f64 (*.f64 x y) (*.f64 z y)) 10000000000000000662275133196073022890814778906781692175574718614061870706920546714670378554471083956139627305190456203824330868103505742897540916997511012040520808812168041334151877325366493184) (*.f64 (-.f64 (*.f64 x y) (*.f64 z y)) t) (*.f64 (*.f64 t y) (-.f64 x z))))","(if (<=.f64 (*.f64 y (-.f64 x z)) -inf.0) (*.f64 (*.f64 (-.f64 x z) t) y) (if (<=.f64 (*.f64 y (-.f64 x z)) 10000000000000000662275133196073022890814778906781692175574718614061870706920546714670378554471083956139627305190456203824330868103505742897540916997511012040520808812168041334151877325366493184) (*.f64 (*.f64 (-.f64 x z) t) y) (*.f64 (*.f64 (-.f64 x z) t) y)))"]],"stop":[["fuel",1]],"time":20.100830078125,"type":"simplify"},{"time":0.007080078125,"type":"soundness"},{"compiler":[[47,17]],"remove-preprocessing":[[]],"time":11.921142578125,"type":"end"}]
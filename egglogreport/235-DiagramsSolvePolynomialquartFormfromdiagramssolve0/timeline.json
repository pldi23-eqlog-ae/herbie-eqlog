[{"compiler":[[10,8]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":24.18212890625,"type":"analyze"},{"outcomes":[["body",1024,"valid",18.51318359375,216],["body",512,"valid",7.753662109375,132],["body",2048,"valid",21.83349609375,197],["body",256,"valid",261.296630859375,7711]],"time":318.4599609375,"type":"sample"},{"compiler":[[9,7]],"inputs":[["0","1"],["(-.f64 x (*.f64 (/.f64 3 8) y))","(-.f64 y (*.f64 (/.f64 3 8) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 x (*.f64 (/.f64 3 8) y))","(fma.f64 -3/8 y x)","(-.f64 y (*.f64 (/.f64 3 8) x))","(fma.f64 -3/8 x y)"]],"symmetry":[[]],"time":60.572021484375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 x (*.f64 (/.f64 3 8) y))"]],"method":["egg-herbie"],"outputs":[["(-.f64 x (*.f64 (/.f64 3 8) y))","(fma.f64 -3/8 y x)"]],"time":19.742919921875,"type":"simplify"},{"compiler":[[13,9]],"time":0.323974609375,"type":"eval"},{"alts":[["(fma.f64 -3/8 y x)","next",0]],"compiler":[[6,4],[6,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0],"time":0.8271484375,"type":"prune"},{"compiler":[[9,5]],"locations":[["(fma.f64 -3/8 y x)",0.09375,true]],"time":2.3349609375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 -3/8 y x)","x","-inf",0.2109375],["(fma.f64 -3/8 y x)","x","inf",0.223876953125],["(fma.f64 -3/8 y x)","x","0",0.22607421875],["(fma.f64 -3/8 y x)","y","-inf",0.3798828125],["(fma.f64 -3/8 y x)","y","inf",0.35595703125],["(fma.f64 -3/8 y x)","y","0",0.2939453125]],"time":1.765869140625,"type":"series"},{"count":[[1,38]],"inputs":[["(fma.f64 -3/8 y x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -3/8 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 -3/8 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 -3/8 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -3/8 y x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 3/8 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -3/8 y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 3/8 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 -3/8 y x))) (pow.f64 (pow.f64 (fma.f64 -3/8 y x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -3/8 y x) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 -3/8 y x)) 4)) (cbrt.f64 (fma.f64 -3/8 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -3/8 y x)) (pow.f64 (fma.f64 -3/8 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -3/8 y x) 2/3) (cbrt.f64 (fma.f64 -3/8 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 3/8 y) x)) (neg.f64 (pow.f64 (fma.f64 -3/8 y x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 -3/8 y) 2/3) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 -3/8 y)) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 -3/8 y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (*.f64 -3/8 y) 2/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 -3/8 y))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 -3/8 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 3/8 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 3/8 y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -3/8 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -3/8 y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -3/8 y x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -3/8 y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 3/8 y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -3/8 y x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -3/8 y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -3/8 y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 3/8 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -3/8 y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -3/8 y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -27/512 y)) (pow.f64 y 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -3/8 y)) (pow.f64 (*.f64 -3/8 y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -3/8) (*.f64 (cbrt.f64 9/64) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -3/8 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 -3/8 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 -3/8 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 -3/8 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -3/8 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 -3/8 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 -3/8 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -3/8 y) 1 x)))))"]],"rules":[["egg-rr",38]],"time":34.38916015625,"type":"rewrite"},{"count":[[62,40]],"inputs":[["x","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)","(*.f64 -3/8 y)","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)","(*.f64 -3/8 y)","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)","(*.f64 -3/8 y)","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)","x","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)","x","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)","(+.f64 (*.f64 -3/8 y) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(*.f64 -3/8 y)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(*.f64 -3/8 y)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(*.f64 -3/8 y)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","x","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","x","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)","(+.f64 (*.f64 -3/8 y) x)","(fma.f64 -3/8 y x)"]],"time":106.303955078125,"type":"simplify"},{"compiler":[[337,229]],"time":6.371826171875,"type":"eval"},{"alts":[["(fma.f64 -3/8 y x)","done",0]],"compiler":[[6,4]],"count":[[41,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[40,0],"picked":[1,1]}],"min-error":[0],"time":5.158203125,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(-.f64 x (*.f64 (/.f64 3 8) y))",0,1],["(*.f64 (/.f64 3 8) y)",0,1]],"compiler":[[3,2],[3,2],[9,7],[7,6],[13,9]],"count":[[2,1]],"inputs":[["(fma.f64 -3/8 y x)","(-.f64 x (*.f64 (/.f64 3 8) y))"]],"link":["."],"name":["Diagrams.Solve.Polynomial:quartForm  from diagrams-solve-0.1, A"],"oracle":[0.09765625],"outputs":[["(fma.f64 -3/8 y x)"]],"time":9.9658203125,"times":[["x",2.281005859375],["y",2.406982421875],["(-.f64 x (*.f64 (/.f64 3 8) y))",2.3740234375],["(*.f64 (/.f64 3 8) y)",2.367919921875]],"type":"regimes"},{"compiler":[[6,4]],"inputs":[["(fma.f64 -3/8 y x)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 -3/8 y x)"]],"stop":[["done",1]],"time":33.237060546875,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[6,4]],"remove-preprocessing":[[]],"time":7.5791015625,"type":"end"}]
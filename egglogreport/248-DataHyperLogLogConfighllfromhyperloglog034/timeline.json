[{"compiler":[[8,5]],"method":["search"],"sampling":[[12,0.6887799953110516,0.09170725150033832,0.21951275318861008],[11,0.6595117235556245,0.12097552325576544,0.21951275318861008],[10,0.6321946699172258,0.17951206676661968,0.18829326331615448],[9,0.5775605626404285,0.23414617404341698,0.18829326331615448],[8,0.5307313278317451,0.34341438859701157,0.1258542835712433],[7,0.43707285821437836,0.43707285821437836,0.1258542835712433],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.0810546875,"type":"analyze"},{"outcomes":[["body",256,"invalid",10.27587890625,347],["body",256,"valid",251.68994140625,8256]],"time":269.701904296875,"type":"sample"},{"compiler":[[7,4]],"inputs":[["0","1"],["(*.f64 (*.f64 x y) y)","(*.f64 (*.f64 y x) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 x y) y)","(*.f64 (*.f64 y x) x)","(*.f64 (*.f64 x y) x)"]],"symmetry":[[]],"time":71.615966796875,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 (*.f64 x y) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x y) y)"]],"time":31.0869140625,"type":"simplify"},{"compiler":[[7,4]],"time":0.18115234375,"type":"eval"},{"alts":[["(*.f64 (*.f64 x y) y)","next",0.21484375]],"compiler":[[7,4],[7,4]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.21484375],"time":0.654052734375,"type":"prune"},{"compiler":[[12,4]],"locations":[["(*.f64 (*.f64 x y) y)",0.21484375,true]],"time":2.724853515625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (*.f64 x y) y)","y","-inf",0.177001953125],["(*.f64 (*.f64 x y) y)","y","inf",0.5048828125],["(*.f64 (*.f64 x y) y)","y","0",0.4189453125],["(*.f64 (*.f64 x y) y)","x","-inf",0.31005859375],["(*.f64 (*.f64 x y) y)","x","inf",0.406982421875],["(*.f64 (*.f64 x y) y)","x","0",0.617919921875]],"time":2.510009765625,"type":"series"},{"count":[[1,32]],"inputs":[["(*.f64 (*.f64 x y) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (*.f64 y (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) y) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 y (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) (pow.f64 (*.f64 (*.f64 x y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3) (cbrt.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) y))) (neg.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 x y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 x y) y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) y) 3))))))"]],"rules":[["egg-rr",32]],"time":32.130126953125,"type":"rewrite"},{"count":[[56,33]],"inputs":[["(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)"]],"time":95.014892578125,"type":"simplify"},{"compiler":[[292,98]],"time":3.18408203125,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)","next",0.5242540039794927],["(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))","fresh",2.6797312635495874],["(*.f64 (pow.f64 y 2) x)","fresh",8.629064688552472],["(*.f64 (*.f64 x y) y)","done",0.21484375]],"compiler":[[10,7],[11,7],[7,5],[7,4],[10,7],[11,7],[7,5]],"count":[[34,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[33,3],"picked":[1,1]}],"min-error":[0.0625],"time":6.0888671875,"type":"prune"},{"compiler":[[27,8]],"locations":[["(*.f64 (*.f64 x y) y)",0.21484375,false],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)",0.4919701660635144,true],["(cbrt.f64 (*.f64 (*.f64 x y) y))",19.52169860391451,true]],"time":5.149169921875,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)","y","-inf",0.39501953125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)","y","inf",0.47314453125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)","y","0",0.39404296875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)","x","-inf",0.781005859375],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)","x","inf",0.530029296875],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)","x","0",0.83203125],["(cbrt.f64 (*.f64 (*.f64 x y) y))","y","-inf",0.260986328125],["(cbrt.f64 (*.f64 (*.f64 x y) y))","y","inf",0.302978515625],["(cbrt.f64 (*.f64 (*.f64 x y) y))","y","0",0.296875],["(cbrt.f64 (*.f64 (*.f64 x y) y))","x","-inf",0.450927734375],["(cbrt.f64 (*.f64 (*.f64 x y) y))","x","inf",0.31103515625],["(cbrt.f64 (*.f64 (*.f64 x y) y))","x","0",0.446044921875]],"time":5.60498046875,"type":"series"},{"count":[[2,71]],"inputs":[["(cbrt.f64 (*.f64 (*.f64 x y) y))","(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 x y) y))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (*.f64 x y)))) (cbrt.f64 (pow.f64 (*.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)))) (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3) (cbrt.f64 (*.f64 x y)))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 (*.f64 x y) y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x y) (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 x y) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x y) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 x y) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (*.f64 y (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 (*.f64 x y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 x y) y))) (pow.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3) (cbrt.f64 (*.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 (*.f64 x y) y) 2/3)) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (*.f64 (*.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) y) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) (pow.f64 (*.f64 (*.f64 x y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3) (cbrt.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 7/3) (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 y (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3)) (pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 x y) y))) (neg.f64 (pow.f64 (*.f64 (*.f64 x y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 x y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 x y) y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) y) 3))))))"]],"rules":[["egg-rr",40],["egg-rr",31]],"time":43.171875,"type":"rewrite"},{"count":[[71,71]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":26.56494140625,"type":"simplify"},{"compiler":[[1201,477]],"time":13.4521484375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)","done",0.5242540039794927],["(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))","fresh",2.6797312635495874],["(*.f64 (*.f64 y y) x)","fresh",8.629064688552472],["(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)","next",0.6762467649049685],["(*.f64 (*.f64 x y) y)","done",0.21484375]],"compiler":[[10,7],[11,7],[7,4],[11,8],[7,4],[11,7],[7,4],[11,8]],"count":[[108,5]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[104,2],"picked":[1,1]}],"min-error":[0.05859375],"time":20.280029296875,"type":"prune"},{"compiler":[[30,9]],"locations":[["(cbrt.f64 y)",0.0859375,true],["(*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y)))",0.33822250976844204,true],["(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)",0.4919701660635144,true],["(cbrt.f64 (*.f64 x y))",10.72984668213229,true]],"time":5.906005859375,"type":"localize"},{"count":[[4,0]],"series":[["(cbrt.f64 y)","y","-inf",0.211181640625],["(cbrt.f64 y)","y","inf",0.197998046875],["(cbrt.f64 y)","y","0",0.197021484375],["(*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y)))","x","-inf",0.18994140625],["(*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y)))","x","inf",0.18701171875],["(*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y)))","x","0",0.172119140625],["(*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y)))","y","-inf",0.4970703125],["(*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y)))","y","inf",0.1669921875],["(*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y)))","y","0",0.191162109375],["(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)","x","-inf",0.325927734375],["(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)","x","inf",0.321044921875],["(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)","x","0",0.322021484375],["(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)","y","-inf",0.93310546875],["(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)","y","inf",0.328857421875],["(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)","y","0",0.344970703125],["(cbrt.f64 (*.f64 x y))","y","-inf",0.330078125],["(cbrt.f64 (*.f64 x y))","y","inf",0.197021484375],["(cbrt.f64 (*.f64 x y))","y","0",0.22119140625],["(cbrt.f64 (*.f64 x y))","x","-inf",0.215087890625],["(cbrt.f64 (*.f64 x y))","x","inf",0.227783203125],["(cbrt.f64 (*.f64 x y))","x","0",0.2822265625]],"time":6.284912109375,"type":"series"},{"count":[[4,114]],"inputs":[["(cbrt.f64 (*.f64 x y))","(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)","(*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y)))","(cbrt.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (pow.f64 (*.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (*.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 (*.f64 (pow.f64 y 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y)))) (cbrt.f64 (pow.f64 (pow.f64 (*.f64 x y) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (cbrt.f64 y) (pow.f64 (*.f64 x y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 (pow.f64 x 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 x y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 y (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) (cbrt.f64 y)) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) (cbrt.f64 (*.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x y)))) (pow.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) 4/3) (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 x y))) (pow.f64 (*.f64 y (*.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) (cbrt.f64 (*.f64 y (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x y))) 7/3) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3)) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x y))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 y (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 y (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (*.f64 x y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 y (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 x y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 y (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 y (*.f64 x y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) y)) (cbrt.f64 (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x y))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x y)))) (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 (*.f64 x y)))) (cbrt.f64 (pow.f64 (*.f64 x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x y) (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2/3)) (cbrt.f64 (*.f64 y (cbrt.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (*.f64 (*.f64 x y) (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x y))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x y))))) (cbrt.f64 (pow.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x y))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) (cbrt.f64 (*.f64 x y)))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) (cbrt.f64 y))) (cbrt.f64 (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 (*.f64 (pow.f64 (*.f64 y (*.f64 x y)) 2/3) (cbrt.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y (*.f64 x y))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 y (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 y (*.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 x y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (*.f64 y (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 y (*.f64 x y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 (pow.f64 y 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 y 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 y)))))"]],"rules":[["egg-rr",18],["egg-rr",35],["egg-rr",35],["egg-rr",26]],"time":51.875,"type":"rewrite"},{"count":[[114,114]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"time":26.931884765625,"type":"simplify"},{"compiler":[[1374,562]],"time":14.43115234375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)","done",0.5242540039794927],["(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))","next",2.6797312635495874],["(*.f64 (*.f64 y y) x)","fresh",8.629064688552472],["(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)","done",0.6762467649049685],["(*.f64 (*.f64 x y) y)","done",0.21484375]],"compiler":[[10,7],[11,7],[7,4],[11,8],[7,4],[11,7],[7,4]],"count":[[119,5]],"kept":[{"done":[2,2],"fresh":[2,1],"new":[114,1],"picked":[1,1]}],"min-error":[0.05859375],"time":23.77001953125,"type":"prune"},{"compiler":[[26,10]],"locations":[["(cbrt.f64 x)",0.05859375,true],["(*.f64 y (cbrt.f64 x))",0.19921875,true],["(pow.f64 (*.f64 y (cbrt.f64 x)) 2)",0.3232612793053261,true],["(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))",2.2726094984268497,true]],"time":5.496826171875,"type":"localize"},{"count":[[4,48]],"series":[["(cbrt.f64 x)","x","-inf",0.22705078125],["(cbrt.f64 x)","x","inf",0.179931640625],["(cbrt.f64 x)","x","0",0.18505859375],["(*.f64 y (cbrt.f64 x))","x","-inf",0.327880859375],["(*.f64 y (cbrt.f64 x))","x","inf",0.258056640625],["(*.f64 y (cbrt.f64 x))","x","0",0.27001953125],["(*.f64 y (cbrt.f64 x))","y","-inf",0.159912109375],["(*.f64 y (cbrt.f64 x))","y","inf",0.1669921875],["(*.f64 y (cbrt.f64 x))","y","0",0.15283203125],["(pow.f64 (*.f64 y (cbrt.f64 x)) 2)","x","-inf",0.589111328125],["(pow.f64 (*.f64 y (cbrt.f64 x)) 2)","x","inf",0.393798828125],["(pow.f64 (*.f64 y (cbrt.f64 x)) 2)","x","0",0.465087890625],["(pow.f64 (*.f64 y (cbrt.f64 x)) 2)","y","-inf",0.432861328125],["(pow.f64 (*.f64 y (cbrt.f64 x)) 2)","y","inf",0.47509765625],["(pow.f64 (*.f64 y (cbrt.f64 x)) 2)","y","0",1.3740234375],["(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))","x","-inf",2.294921875],["(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))","x","inf",0.39208984375],["(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))","x","0",0.385009765625],["(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))","y","-inf",0.196044921875],["(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))","y","inf",0.364013671875],["(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))","y","0",0.30810546875]],"time":9.828125,"type":"series"},{"count":[[4,113]],"inputs":[["(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))","(pow.f64 (*.f64 y (cbrt.f64 x)) 2)","(*.f64 y (cbrt.f64 x))","(cbrt.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (*.f64 y (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 x))) (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 4/3) (cbrt.f64 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 4/3) (cbrt.f64 (pow.f64 x 2/3))) (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x))) 2) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3)) (pow.f64 (*.f64 y (cbrt.f64 x)) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 4/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 4/3) (cbrt.f64 x)) (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 4/3) (*.f64 (cbrt.f64 x) (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 x)))) (neg.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 4/3) (cbrt.f64 (pow.f64 x 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (*.f64 y (cbrt.f64 x))) (*.f64 y (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 x)) (*.f64 (cbrt.f64 x) (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2)) (cbrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2)) (cbrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 6) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 6) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 y (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (*.f64 y (cbrt.f64 x))) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y (cbrt.f64 x)) y) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) (pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (cbrt.f64 x) (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (*.f64 y (cbrt.f64 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) 5) (cbrt.f64 (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (pow.f64 (pow.f64 y 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (pow.f64 (*.f64 y (cbrt.f64 x)) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 4/3) (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (pow.f64 (cbrt.f64 (*.f64 (*.f64 y y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/3)) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (cbrt.f64 x)) (*.f64 (neg.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 (cbrt.f64 x))) 2) (pow.f64 (cbrt.f64 x) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3)) (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 x)) (*.f64 y (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 y (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) x) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (cbrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (neg.f64 y) (cbrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (cbrt.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 y y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y y) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x 2/3)) y) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3) (cbrt.f64 (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (*.f64 y (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (cbrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (cbrt.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 y) (cbrt.f64 x))) (neg.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (cbrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (cbrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 (pow.f64 x 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 x)))))"]],"rules":[["egg-rr",19],["egg-rr",28],["egg-rr",36],["egg-rr",30]],"time":50.320068359375,"type":"rewrite"},{"count":[[161,118]],"inputs":[["(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (pow.f64 y 2))","(pow.f64 (*.f64 (cbrt.f64 x) y) 2)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)","(*.f64 (pow.f64 (*.f64 1 x) 1/3) y)","(*.f64 (cbrt.f64 x) y)"]],"time":172.4658203125,"type":"simplify"},{"compiler":[[1720,770]],"time":19.16015625,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)","done",0.5242540039794927],["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 y 3) x)) 2) (cbrt.f64 x))","fresh",20.989109866913942],["(*.f64 (*.f64 y (*.f64 (cbrt.f64 x) (*.f64 y (cbrt.f64 x)))) (cbrt.f64 x))","fresh",2.644638661234512],["(*.f64 (*.f64 y y) x)","fresh",8.629064688552472],["(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)","done",0.6762467649049685],["(*.f64 (*.f64 x y) y)","done",0.21484375],["(*.f64 (cbrt.f64 (cbrt.f64 x)) (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x))) 2))","fresh",1.1762809121884814]],"compiler":[[10,7],[13,10],[14,7],[7,4],[11,8],[7,4],[16,9]],"count":[[142,7]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[137,3],"picked":[1,0]}],"min-error":[0.0234375],"time":29.61083984375,"type":"prune"},{"accuracy":[0.21484375],"baseline":[0.21484375],"branch":[["x",0.21484375,1],["y",0.21484375,1],["(*.f64 (*.f64 x y) y)",0.21484375,1]],"compiler":[[3,2],[3,2],[7,4],[85,37]],"count":[[10,1]],"inputs":[["(*.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 y 3) x)) 2) (cbrt.f64 x))","(*.f64 (*.f64 y (*.f64 (cbrt.f64 x) (*.f64 y (cbrt.f64 x)))) (cbrt.f64 x))","(*.f64 (cbrt.f64 (cbrt.f64 x)) (pow.f64 (*.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 y (cbrt.f64 x))) 2))","(*.f64 (*.f64 y y) x)","(*.f64 (*.f64 y y) x)","(pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 x y))) 3)","(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) y)) 3)","(*.f64 (pow.f64 (*.f64 y (cbrt.f64 x)) 2) (cbrt.f64 x))","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)"]],"link":["."],"name":["Data.HyperLogLog.Config:hll from hyperloglog-0.3.4"],"oracle":[21.278127798533596],"outputs":[["(*.f64 (*.f64 x y) y)"]],"time":13.826171875,"times":[["x",4.27197265625],["y",4.36181640625],["(*.f64 (*.f64 x y) y)",3.552001953125]],"type":"regimes"},{"compiler":[[7,4]],"inputs":[["(*.f64 (*.f64 x y) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x y) y)"]],"stop":[["fuel",1]],"time":31.31103515625,"type":"simplify"},{"time":0.0029296875,"type":"soundness"},{"compiler":[[7,4]],"remove-preprocessing":[[]],"time":6.876953125,"type":"end"}]
[{"compiler":[[26,15]],"method":["search"],"sampling":[[12,0.027434536605142057,0.006767185695935041,0.9657982776989229],[11,0.025605567498132586,0.009510639356449246,0.9648837931454182],[10,0.02414239221252501,0.013168577570468187,0.9626890302170068],[9,0.02048445399850607,0.019021278712898493,0.9604942672885954],[8,0.017558103427290916,0.026337155140936375,0.9561047414317727],[7,0.011705402284860611,0.03511620685458183,0.9531783908605576],[6,0.011705402284860611,0.046821609139442444,0.941472988575697],[5,0.0,0.07023241370916367,0.9297675862908363],[4,0.0,0.09364321827888489,0.9063567817211151],[3,0.0,0.09364321827888489,0.9063567817211151],[2,0.0,0.18728643655776978,0.8127135634422302],[1,0.0,0.37457287311553955,0.6254271268844604],[0,0.0,0.37457287311553955,0.6254271268844604]],"time":7.536865234375,"type":"analyze"},{"outcomes":[["body",256,"invalid",44.86962890625,836],["body",256,"valid",424.092529296875,8256]],"time":477.72314453125,"type":"sample"},{"compiler":[[15,8]],"inputs":[["0","1"],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 b b) (*.f64 a a)) (*.f64 b b))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 b b) (*.f64 a a)) (*.f64 b b))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 a b) 2) -1)))"]],"symmetry":[[]],"time":68.19482421875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))"]],"time":20.9970703125,"type":"simplify"},{"compiler":[[24,15]],"time":0.43798828125,"type":"eval"},{"alts":[["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","next",0.00390625],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","fresh",13.7578125]],"compiler":[[11,9],[15,8],[11,9],[15,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0],"time":1.325927734375,"type":"prune"},{"compiler":[[38,22]],"locations":[["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))",0.00390625,true],["(pow.f64 (/.f64 b a) 2)",0.4131050293053261,true]],"time":7.9130859375,"type":"localize"},{"count":[[2,48]],"series":[["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","a","-inf",0.26513671875],["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","a","inf",0.27001953125],["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","a","0",0.197021484375],["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","b","-inf",0.288818359375],["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","b","inf",0.6259765625],["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","b","0",0.31494140625],["(pow.f64 (/.f64 b a) 2)","a","-inf",0.51708984375],["(pow.f64 (/.f64 b a) 2)","a","inf",0.4248046875],["(pow.f64 (/.f64 b a) 2)","a","0",0.632080078125],["(pow.f64 (/.f64 b a) 2)","b","-inf",0.52587890625],["(pow.f64 (/.f64 b a) 2)","b","inf",0.656005859375],["(pow.f64 (/.f64 b a) 2)","b","0",0.715087890625]],"time":5.633056640625,"type":"series"},{"count":[[2,136]],"inputs":[["(pow.f64 (/.f64 b a) 2)","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 b a) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (/.f64 b a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 b a) 2)) 0) (pow.f64 (/.f64 b a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 b a) 2) 0) (pow.f64 (/.f64 b a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 b a) 2) (*.f64 (pow.f64 (/.f64 b a) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (/.f64 b a) 2) 1/2) (*.f64 (pow.f64 (/.f64 b a) 2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (pow.f64 (/.f64 b a) 2))) (pow.f64 (/.f64 b a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (/.f64 b a) 2)) (pow.f64 (/.f64 b a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 b a) 2) (*.f64 0 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (pow.f64 (/.f64 b a) 2)) (*.f64 1/2 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (/.f64 b a) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 2)) (cbrt.f64 (pow.f64 (/.f64 b a) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b b) (pow.f64 a -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 b a) (/.f64 b a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 b a)) (neg.f64 (/.f64 b a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 4)) (cbrt.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 b b) a) (/.f64 1 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 b a)) (pow.f64 (cbrt.f64 (/.f64 b a)) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 b (/.f64 (/.f64 b a) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (/.f64 b a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 b a) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 b a) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 a) (/.f64 (*.f64 b b) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 b a)) (+.f64 2 3)) (cbrt.f64 (/.f64 b a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a -2) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 b a) a) b)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 (pow.f64 (/.f64 b a) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (pow.f64 (/.f64 b a) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 2))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (/.f64 b a) 2))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 a -2)) (*.f64 (*.f64 b (cbrt.f64 (pow.f64 a -2))) (*.f64 b (cbrt.f64 (pow.f64 a -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 b b)) (*.f64 (/.f64 (cbrt.f64 (*.f64 b b)) a) (/.f64 (cbrt.f64 (*.f64 b b)) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 b b) (*.f64 (/.f64 -1 a) (/.f64 -1 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (/.f64 b a)) 1) (*.f64 (neg.f64 (/.f64 b a)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 b a) 0) (-.f64 (/.f64 b a) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (/.f64 b a)) 0) (-.f64 (neg.f64 (/.f64 b a)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 b b) a)) (/.f64 -1 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 b b)) (/.f64 1 (neg.f64 (*.f64 a a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 4)) (-.f64 0 (*.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 2)) 0))) (+.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 4)) (+.f64 0 (*.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 2)) 0))) (-.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 b b) a)) (neg.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 b b) a) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 b b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 b b)) (neg.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 b a) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 b a) (/.f64 b (cbrt.f64 a))) (cbrt.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 b b) a) 1) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 b b) a) (cbrt.f64 (/.f64 1 a))) (cbrt.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 b b) a) -1) (neg.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 b b)) 1) (neg.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 (*.f64 b b) a)) 1) (neg.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 b (cbrt.f64 a)) (/.f64 b a)) (cbrt.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 b)) (pow.f64 (cbrt.f64 (/.f64 b a)) (+.f64 2 3))) (cbrt.f64 (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 b) (pow.f64 (cbrt.f64 (/.f64 b a)) (+.f64 2 3))) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 b b) a)) (cbrt.f64 (neg.f64 a))) (cbrt.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 b b) a)) -1) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 b b) a)) 1) (neg.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 b b) a)) (cbrt.f64 a)) (neg.f64 (cbrt.f64 (*.f64 a a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 b b) a) (cbrt.f64 (*.f64 a a))) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 b b) a) 1) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 b b) a) -1) (neg.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 b b) a) (cbrt.f64 a)) (cbrt.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 b (/.f64 b (cbrt.f64 a))) (*.f64 a (cbrt.f64 (*.f64 a a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 b (cbrt.f64 a)) b) (*.f64 (cbrt.f64 (*.f64 a a)) a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 b (cbrt.f64 a)) (neg.f64 b)) (*.f64 (cbrt.f64 (*.f64 a a)) (neg.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 b (cbrt.f64 a)) (/.f64 b (cbrt.f64 a))) (*.f64 (cbrt.f64 (*.f64 a a)) (cbrt.f64 (*.f64 a a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 b) (/.f64 b (cbrt.f64 a))) (*.f64 (neg.f64 a) (cbrt.f64 (*.f64 a a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 b b)) 1) (*.f64 (neg.f64 (*.f64 a a)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 b b) a))) a)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 b a) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 b a) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 b a) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 b a)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 b a) 3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 b a) 3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 b a)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 b a) 6))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 b a) 6)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 b b) a) (/.f64 1 a) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (/.f64 b a) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 b a)) (pow.f64 (cbrt.f64 (/.f64 b a)) (+.f64 2 3)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b b) (pow.f64 a -2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 4)) (cbrt.f64 (pow.f64 (/.f64 b a) 2)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 b a)) (neg.f64 (/.f64 b a)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 b a) 2)) (cbrt.f64 (pow.f64 (/.f64 b a) 4)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 b a) (/.f64 b a) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b (/.f64 (/.f64 b a) a) 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 b a) 2) 1 0)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (/.f64 b a) 2) 0)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 0) (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 1/2) (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (*.f64 0 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (*.f64 1/2 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (cbrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) (fabs.f64 (cbrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 0) (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (pow.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))))"]],"rules":[["egg-rr",41],["egg-rr",95]],"time":28.81201171875,"type":"rewrite"},{"count":[[184,139]],"inputs":[["(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(/.f64 (pow.f64 b 2) (pow.f64 a 2))","(pow.f64 (/.f64 b a) 2)","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))","(sqrt.f64 (fabs.f64 (-.f64 (pow.f64 (/.f64 b a) 2) 1)))","(sqrt.f64 (fabs.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))"]],"time":146.781005859375,"type":"simplify"},{"compiler":[[2116,1349]],"time":27.5390625,"type":"eval"},{"alts":[["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","done",0.00390625],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","next",13.7578125]],"compiler":[[11,9],[15,8],[15,8]],"count":[[141,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[139,0],"picked":[1,1]}],"min-error":[0],"time":41.265869140625,"type":"prune"},{"compiler":[[53,8]],"locations":[["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))",0.00390625,true],["(-.f64 (*.f64 a a) (*.f64 b b))",0.0078125,true],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))",13.346186928032143,true]],"time":6.552001953125,"type":"localize"},{"count":[[3,72]],"series":[["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","b","-inf",0.2080078125],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","b","inf",0.295166015625],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","b","0",0.22509765625],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","a","-inf",0.18505859375],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","a","inf",0.301025390625],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","a","0",0.27294921875],["(-.f64 (*.f64 a a) (*.f64 b b))","b","-inf",0.16796875],["(-.f64 (*.f64 a a) (*.f64 b b))","b","inf",0.150146484375],["(-.f64 (*.f64 a a) (*.f64 b b))","b","0",0.168212890625],["(-.f64 (*.f64 a a) (*.f64 b b))","a","-inf",0.1650390625],["(-.f64 (*.f64 a a) (*.f64 b b))","a","inf",0.183837890625],["(-.f64 (*.f64 a a) (*.f64 b b))","a","0",0.179931640625],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","b","-inf",0.169921875],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","b","inf",0.419921875],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","b","0",0.44091796875],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","a","-inf",0.166015625],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","a","inf",0.37890625],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","a","0",0.507080078125]],"time":4.81591796875,"type":"series"},{"count":[[3,240]],"inputs":[["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (+.f64 1/2 (neg.f64 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (-.f64 1/2 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1/2) (*.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 0) (-.f64 1 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) (*.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (*.f64 1/2 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (-.f64 1 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) (*.f64 0 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (/.f64 b a) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (neg.f64 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 a -2) (neg.f64 (*.f64 b b))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (pow.f64 a -2) (neg.f64 (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (pow.f64 (/.f64 b a) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 a 4) (pow.f64 a 4)) (/.f64 (pow.f64 (*.f64 a b) 2) (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (*.f64 a a))) (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 a a)) (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 (/.f64 b a) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (/.f64 b a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 a b) (/.f64 (-.f64 a b) (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 a b))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 2)) (pow.f64 a -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 a b) (-.f64 b a)) (neg.f64 (pow.f64 a -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 a b) a) (/.f64 (-.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 a b) (cbrt.f64 (pow.f64 a -2))) (/.f64 (-.f64 a b) (cbrt.f64 (pow.f64 a 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 a b))) a) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 2)) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 2) (pow.f64 a 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (pow.f64 a -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a -2) (*.f64 (+.f64 a b) (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2)) (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 a (/.f64 (*.f64 b b) a)) (/.f64 1 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 a) (-.f64 a (/.f64 (*.f64 b b) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 a -2)) (/.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (cbrt.f64 (pow.f64 a 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 2)) (pow.f64 a -2)) (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 a b) (*.f64 a a)) (+.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 a b) (cbrt.f64 (pow.f64 a 4))) (*.f64 (+.f64 a b) (cbrt.f64 (pow.f64 a -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 a -2)) (*.f64 (+.f64 a b) (-.f64 b a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 2) (pow.f64 a 4))) (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 2)) a) (/.f64 (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 a b))) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 a b) a) (/.f64 (+.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (cbrt.f64 (pow.f64 a 4))) (cbrt.f64 (pow.f64 a -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (/.f64 b a)) (/.f64 (-.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (/.f64 b a)) (-.f64 -1 (/.f64 b a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (*.f64 b b) a) a) (/.f64 -1 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (cbrt.f64 (pow.f64 a -2))) (/.f64 1 (cbrt.f64 (pow.f64 a 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 a (/.f64 (*.f64 b b) a)) (cbrt.f64 a)) (cbrt.f64 (pow.f64 a -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 a 4) (pow.f64 (*.f64 a b) 2)) (/.f64 1 (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (neg.f64 (pow.f64 (/.f64 b a) 2)) 3)) (+.f64 1 (-.f64 (*.f64 (neg.f64 (pow.f64 (/.f64 b a) 2)) (neg.f64 (pow.f64 (/.f64 b a) 2))) (neg.f64 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (/.f64 (pow.f64 b 6) (pow.f64 a 6))) (+.f64 1 (*.f64 (pow.f64 (/.f64 b a) 2) (+.f64 1 (pow.f64 (/.f64 b a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (*.f64 a a)) (*.f64 a a)) (*.f64 (neg.f64 (*.f64 a a)) (*.f64 b b))) (*.f64 (neg.f64 (*.f64 a a)) (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (*.f64 a a)) (cbrt.f64 (pow.f64 a 4))) (*.f64 (neg.f64 (*.f64 a a)) (*.f64 (*.f64 b b) (cbrt.f64 (pow.f64 a -2))))) (*.f64 (neg.f64 (*.f64 a a)) (cbrt.f64 (pow.f64 a 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (pow.f64 a 4)) (*.f64 a a)) (*.f64 (*.f64 a a) (*.f64 (*.f64 b b) (cbrt.f64 (pow.f64 a -2))))) (*.f64 (cbrt.f64 (pow.f64 a 4)) (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 a a) (-.f64 1 1/3)) (neg.f64 (*.f64 a a))) (*.f64 (cbrt.f64 (pow.f64 a 4)) (neg.f64 (*.f64 b b)))) (*.f64 (cbrt.f64 (pow.f64 a 4)) (neg.f64 (*.f64 a a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 a a) (-.f64 1 1/3)) (*.f64 a a)) (*.f64 (cbrt.f64 (pow.f64 a 4)) (*.f64 b b))) (*.f64 (cbrt.f64 (pow.f64 a 4)) (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 a a) (-.f64 1 1/3)) (cbrt.f64 (pow.f64 a 4))) (*.f64 (cbrt.f64 (pow.f64 a 4)) (*.f64 (*.f64 b b) (cbrt.f64 (pow.f64 a -2))))) (cbrt.f64 (pow.f64 a 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 a a) (-.f64 1 1/3)) a) (*.f64 (cbrt.f64 (pow.f64 a 4)) (/.f64 (*.f64 b b) a))) (*.f64 (cbrt.f64 (pow.f64 a 4)) a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 a (cbrt.f64 (pow.f64 a 4))) (*.f64 a (*.f64 (*.f64 b b) (cbrt.f64 (pow.f64 a -2))))) (*.f64 a (cbrt.f64 (pow.f64 a 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 a a) (neg.f64 (*.f64 a a))) (neg.f64 (pow.f64 (*.f64 a b) 2))) (*.f64 (*.f64 a a) (neg.f64 (*.f64 a a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 a 4) (pow.f64 (*.f64 a b) 2))) (neg.f64 (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 a 4) (pow.f64 (*.f64 a b) 2)) (pow.f64 a 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (*.f64 b b) a) a) (neg.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 a b) (-.f64 b a)) (neg.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 a (/.f64 (*.f64 b b) a)) (cbrt.f64 a)) (cbrt.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (cbrt.f64 (pow.f64 a -2))) (cbrt.f64 (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) (neg.f64 (*.f64 a a))) (neg.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) (*.f64 a a)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) (pow.f64 (*.f64 a a) (-.f64 1 1/3))) (cbrt.f64 (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 a b) (cbrt.f64 (pow.f64 a -2))) (-.f64 a b)) (cbrt.f64 (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2)) (cbrt.f64 (-.f64 a (/.f64 (*.f64 b b) a)))) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2)) (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 a b)))) (cbrt.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2)) (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 b a)))) (cbrt.f64 (neg.f64 (*.f64 a a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 2))) (cbrt.f64 (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 a -2)) (*.f64 (+.f64 a b) (-.f64 a b))) (cbrt.f64 (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 a) (/.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (cbrt.f64 a))) (cbrt.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 a) (*.f64 (+.f64 a b) (-.f64 b a))) (neg.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 a 4) (*.f64 (neg.f64 (*.f64 a a)) (neg.f64 (*.f64 b b)))) (pow.f64 a 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (*.f64 a a)) a) (*.f64 (neg.f64 (*.f64 a a)) (/.f64 (*.f64 b b) a))) (*.f64 (neg.f64 (*.f64 a a)) a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 a 4)) (*.f64 (*.f64 b b) (cbrt.f64 (pow.f64 a -2)))) (cbrt.f64 (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 a (neg.f64 (*.f64 a a))) (*.f64 a (neg.f64 (*.f64 b b)))) (*.f64 a (neg.f64 (*.f64 a a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 a a) (*.f64 a (/.f64 (*.f64 b b) a))) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (cbrt.f64 (pow.f64 a -2)))) (neg.f64 (cbrt.f64 (pow.f64 a 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 a (/.f64 (*.f64 b b) a)) (cbrt.f64 a))) (cbrt.f64 (neg.f64 (*.f64 a a))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 a (/.f64 (*.f64 b b) a)) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 a b) a) (-.f64 a b)) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) a) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 a b))) a) (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 2))) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 a 3) (*.f64 (*.f64 a a) (/.f64 (*.f64 b b) a))) (pow.f64 a 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 a 3) (*.f64 a (*.f64 b b))) (pow.f64 a 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 (/.f64 (*.f64 b b) a) a) (/.f64 1 a)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 -1 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 a) (/.f64 a (cbrt.f64 (pow.f64 a 4))) (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 1/2 (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 a -2)) (/.f64 (*.f64 a a) (cbrt.f64 (pow.f64 a 4))) (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 a a)) (*.f64 (cbrt.f64 (pow.f64 a 4)) (pow.f64 a -2)) (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 a a)) a) (/.f64 (cbrt.f64 (pow.f64 a 4)) a) (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a (/.f64 1 a) (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a a) (pow.f64 a -2) (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 a) a (neg.f64 (pow.f64 (/.f64 b a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (/.f64 b a) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 a b) (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 a b) a) (*.f64 (+.f64 a b) (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 1/2) (*.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 0) (*.f64 (+.f64 a b) (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (*.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 a b) b) (*.f64 (-.f64 a b) a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 a b) a) (*.f64 (-.f64 a b) b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a (+.f64 a b)) (*.f64 (neg.f64 b) (+.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (+.f64 a b) (-.f64 a b))) (*.f64 1/2 (*.f64 (+.f64 a b) (-.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 a b) (-.f64 a b))) (*.f64 (+.f64 a b) (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (*.f64 0 (*.f64 (+.f64 a b) (-.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b (-.f64 a b)) (*.f64 a (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a (-.f64 a b)) (*.f64 b (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a a) (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 b b)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 a b) (-.f64 b a)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 a a) 0) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 b b)) (neg.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 2 (+.f64 2 (*.f64 (+.f64 a b) (-.f64 b a))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (+.f64 a b) (-.f64 b a)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 a a) (*.f64 b b))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (*.f64 (+.f64 a b) (-.f64 b a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 a b) (-.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 a b))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 a b) (+.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 2)) (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 a b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 a b)) (-.f64 b a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 b a))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 a b)) (-.f64 (neg.f64 a) (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fabs.f64 a) (neg.f64 b)) (-.f64 (fabs.f64 a) (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 a b) (-.f64 a (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 b a) (-.f64 (neg.f64 a) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fabs.f64 a) b) (-.f64 (fabs.f64 a) b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 a 4)) (+.f64 (cbrt.f64 (pow.f64 b 4)) (cbrt.f64 (pow.f64 (*.f64 a b) 2)))) (-.f64 (cbrt.f64 (*.f64 a a)) (cbrt.f64 (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 a b) (-.f64 b a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 a b) (-.f64 b a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 a b) (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (neg.f64 (*.f64 a a))) (neg.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (*.f64 a a)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 a b) (-.f64 a b)) (pow.f64 (*.f64 a a) (-.f64 1 1/3))) (cbrt.f64 (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 a b) (-.f64 b a)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 a b) (-.f64 a b)) a) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 a b))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 a b))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 a b) (-.f64 a b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (+.f64 a b) (-.f64 b a)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (+.f64 a b) (-.f64 b a)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 a b) (-.f64 b a)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 (+.f64 a b) (-.f64 a b)) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 (*.f64 a a)) a) (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fabs.f64 a) (fabs.f64 a) (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 (+.f64 a b) (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 (+.f64 a b) (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a a (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 a a)) (cbrt.f64 (pow.f64 a 4)) (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 a a)) (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 a) (neg.f64 a) (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 a 4)) (cbrt.f64 (*.f64 a a)) (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 b b))) (cbrt.f64 (pow.f64 b 4)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 b) b (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 b) (cbrt.f64 b)) (cbrt.f64 (*.f64 b b)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b (neg.f64 b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 b b) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 b b)) (*.f64 (neg.f64 b) (cbrt.f64 b)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 (+.f64 a b) (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 (+.f64 a b) (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 (+.f64 a b) (-.f64 a b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 a a) (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a a) 1 (neg.f64 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 b b)) (*.f64 a a))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 1/2) (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 0) (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (*.f64 1/2 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (*.f64 0 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (cbrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) (fabs.f64 (cbrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 0) (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (pow.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (cbrt.f64 (fabs.f64 (*.f64 (+.f64 a b) (-.f64 a b))))) (cbrt.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (neg.f64 (*.f64 a a))) (neg.f64 (*.f64 a a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (*.f64 a a)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (pow.f64 (*.f64 a a) (-.f64 1 1/3))) (cbrt.f64 (pow.f64 a 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) a) a)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (pow.f64 (/.f64 b a) 2)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))))))))"]],"rules":[["egg-rr",46],["egg-rr",75],["egg-rr",119]],"time":39.239990234375,"type":"rewrite"},{"count":[[312,250]],"inputs":[["(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(*.f64 -1 (pow.f64 b 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(pow.f64 a 2)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(pow.f64 a 2)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(pow.f64 a 2)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 -1 (pow.f64 b 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 -1 (pow.f64 b 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(neg.f64 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","1","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(neg.f64 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2)))","(neg.f64 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(+.f64 1 (*.f64 -1 (/.f64 (pow.f64 b 2) (pow.f64 a 2))))","(-.f64 1 (pow.f64 (/.f64 b a) 2))","(*.f64 -1 (pow.f64 b 2))","(neg.f64 (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(*.f64 -1 (pow.f64 b 2))","(neg.f64 (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(*.f64 -1 (pow.f64 b 2))","(neg.f64 (*.f64 b b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 (+.f64 a b) (-.f64 a b))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (pow.f64 a 2) (pow.f64 b 2)) (pow.f64 a 2))))","(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))"]],"time":235.007080078125,"type":"simplify"},{"compiler":[[4240,2171]],"time":48.446044921875,"type":"eval"},{"alts":[["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","done",0.00390625],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))","done",13.7578125]],"compiler":[[11,9],[15,8]],"count":[[252,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[250,0],"picked":[1,1]}],"min-error":[0],"time":103.589111328125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["a",0.00390625,1],["b",0.00390625,1],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))",0.00390625,1],["(fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a)))",0.00390625,1],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))",0.00390625,1],["(*.f64 a a)",0.00390625,1],["(*.f64 b b)",0.00390625,1]],"compiler":[[3,2],[3,2],[15,8],[14,7],[13,6],[5,3],[5,3],[24,15]],"count":[[2,1]],"inputs":[["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))","(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))"]],"link":["."],"name":["Eccentricity of an ellipse"],"oracle":[13.76171875],"outputs":[["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))"]],"time":15.746826171875,"times":[["a",2.489990234375],["b",2.31298828125],["(sqrt.f64 (fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))))",1.901123046875],["(fabs.f64 (/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a)))",1.720947265625],["(/.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 a a))",1.964111328125],["(*.f64 a a)",2.48583984375],["(*.f64 b b)",1.82421875]],"type":"regimes"},{"compiler":[[11,9]],"inputs":[["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (fabs.f64 (+.f64 (pow.f64 (/.f64 b a) 2) -1)))"]],"stop":[["done",1]],"time":21.506103515625,"type":"simplify"},{"time":0.034912109375,"type":"soundness"},{"compiler":[[11,9]],"remove-preprocessing":[[]],"time":9.705078125,"type":"end"}]
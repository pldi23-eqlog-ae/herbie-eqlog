[{"compiler":[[39,31]],"method":["search"],"sampling":[[12,2.793967723814632e-12,1.8626451492097546e-13,0.9999999999970197],[11,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[10,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[9,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[8,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[7,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[6,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[5,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[4,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[3,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[2,0.0,2.9802322387356077e-12,0.9999999999970197],[1,0.0,2.9802322387356077e-12,0.9999999999970197],[0,0.0,2.9802322387356077e-12,0.9999999999970197]],"time":49.97314453125,"type":"analyze"},{"outcomes":[["body",256,"valid",847.322998046875,8256]],"time":854.827880859375,"type":"sample"},{"compiler":[[16,14]],"inputs":[["0","1","2"],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 cosTheta_i)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) cosTheta_i)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u2)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 cosTheta_i)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 cosTheta_i)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) cosTheta_i)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) cosTheta_i)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u2)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u1)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u2)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u1)))"]],"symmetry":[[]],"time":73.27294921875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))"]],"time":19.58203125,"type":"simplify"},{"compiler":[[28,22]],"time":0.486083984375,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","next",0.5222465431959218],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","fresh",11.546442450529]],"compiler":[[15,12],[16,14],[15,12],[16,14]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.5121490334274797],"time":2.47900390625,"type":"prune"},{"compiler":[[46,12]],"locations":[["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))",0.15625,true],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)",0.23828125,true],["(sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))",0.3009023902634286,true],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))",0.3678512695368841,true]],"time":10.6240234375,"type":"localize"},{"count":[[4,24]],"series":[["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","-inf",0.55908203125],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","inf",0.89892578125],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","0",0.39697265625],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","u2","-inf",0.238037109375],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","u2","inf",0.38818359375],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","u2","0",0.378173828125],["(sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))","u2","-inf",0.14794921875],["(sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))","u2","inf",0.1689453125],["(sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))","u2","0",0.246826171875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","-inf",0.490966796875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","inf",15.461181640625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","0",1.302978515625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","-inf",1.43505859375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","inf",1.328857421875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","0",1.23291015625]],"time":24.932861328125,"type":"series"},{"count":[[4,135]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 0) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 0 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 0) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 1/2 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 0 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) (*.f64 (cos.f64 (*.f64 (PI.f64) u2)) (sin.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (PI.f64) u2) (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 0) (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1/2) (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (PI.f64) u2) 1) (*.f64 (*.f64 (PI.f64) u2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 1/2 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) (*.f64 0 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u2 (+.f64 (PI.f64) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (PI.f64) (PI.f64))) (*.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 u2) (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) u2) (cbrt.f64 (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 2)) (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 u2 (cbrt.f64 (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 u2 u2) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 u2)) (cbrt.f64 (*.f64 u2 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) (+.f64 u2 u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 u2 u2)) (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) (*.f64 u2 (cbrt.f64 (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) u2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (PI.f64) u2 (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 u2 (PI.f64) (*.f64 (PI.f64) u2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 0) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 1/2) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 1/2 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 0 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) (fabs.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (fabs.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 0) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 0 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 0 (neg.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))))"]],"rules":[["egg-rr",42],["egg-rr",38],["egg-rr",23],["egg-rr",32]],"time":36.857177734375,"type":"rewrite"},{"count":[[159,144]],"inputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(fma.f64 -4/3 (pow.f64 (*.f64 u2 (PI.f64)) 3) (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 (*.f64 2 u2) (PI.f64) (fma.f64 -4/3 (pow.f64 (*.f64 u2 (PI.f64)) 3) (*.f64 4/15 (pow.f64 (*.f64 u2 (PI.f64)) 5))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(fma.f64 (*.f64 2 u2) (PI.f64) (fma.f64 (pow.f64 (*.f64 u2 (PI.f64)) 3) -4/3 (fma.f64 -8/315 (pow.f64 (*.f64 u2 (PI.f64)) 7) (*.f64 4/15 (pow.f64 (*.f64 u2 (PI.f64)) 5)))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))"]],"time":93.560791015625,"type":"simplify"},{"compiler":[[2609,637]],"time":17.775146484375,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) 2) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",0.7507528562945684],["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","fresh",0.6259199110551225],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) u2) (cbrt.f64 (+.f64 (PI.f64) (PI.f64))))))","fresh",0.633786266335318],["(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))","fresh",0.7026851761088252],["(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",0.5130526488419581],["(*.f64 (*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))","fresh",0.586742488193099],["(*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))","fresh",0.6587479592594363],["(*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))","fresh",0.582836238193099],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 u2))))","fresh",0.598162900648784],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))","fresh",0.822509670952959],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","next",0.5092002541221536],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 1/3))","fresh",2.8283080895194854],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)))))","fresh",0.5974291236587858],["(*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))","fresh",0.5926400468037513]],"compiler":[[18,15],[26,17],[23,18],[23,14],[17,14],[22,15],[26,17],[22,15],[21,16],[18,15],[17,14],[19,16],[20,15],[31,18],[18,15],[26,17],[23,18],[23,14],[17,14],[22,15],[26,17],[22,15],[21,16],[18,15],[17,14],[19,16],[20,15],[31,18]],"count":[[146,14]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[144,14],"picked":[1,0]}],"min-error":[0.04830594614939772],"time":40.1640625,"type":"prune"},{"compiler":[[57,20]],"locations":[["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)",0.23828125,false],["(sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))",0.3009023902634286,false],["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)",0.36166000976844204,true],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))",0.3678512695368841,true]],"time":17.8828125,"type":"localize"},{"count":[[2,8]],"series":[["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)","u1","-inf",1.2060546875],["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)","u1","inf",1.59912109375],["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)","u1","0",0.438232421875],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","-inf",0.2080078125],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","inf",0.184814453125],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","0",0.274169921875],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","-inf",0.351806640625],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","inf",0.414794921875],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","0",0.4248046875]],"time":5.300048828125,"type":"series"},{"count":[[2,52]],"inputs":[["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 0) (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 0 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))) (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 0) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (*.f64 0 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 2/3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 3))))))"]],"rules":[["egg-rr",24],["egg-rr",28]],"time":26.251953125,"type":"rewrite"},{"count":[[60,67]],"inputs":[["(sqrt.f64 (pow.f64 u1 3))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (+.f64 (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7)))))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (+.f64 (*.f64 63/128 (sqrt.f64 (pow.f64 u1 9))) (+.f64 (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7))))))","(sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (+.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (+.f64 (*.f64 9/8 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (*.f64 3/4 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))))) (pow.f64 u1 2)))))","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (+.f64 (*.f64 -1 (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (-.f64 (+.f64 (*.f64 1/4 (-.f64 (*.f64 3 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (*.f64 2 (/.f64 1 (log.f64 (/.f64 -1 u1))))))) (*.f64 -9/8 (/.f64 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (log.f64 (/.f64 -1 u1))))) (*.f64 9/16 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))) (pow.f64 u1 3)))) (+.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (+.f64 (*.f64 9/8 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (*.f64 3/4 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))))) (pow.f64 u1 2))))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (pow.f64 u1 3))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))))","(fma.f64 3/4 (sqrt.f64 (pow.f64 u1 5)) (sqrt.f64 (pow.f64 u1 3)))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (+.f64 (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7)))))","(+.f64 (fma.f64 3/4 (sqrt.f64 (pow.f64 u1 5)) (sqrt.f64 (pow.f64 u1 3))) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7))))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (+.f64 (*.f64 63/128 (sqrt.f64 (pow.f64 u1 9))) (+.f64 (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7))))))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (fma.f64 (sqrt.f64 (pow.f64 u1 9)) 63/128 (fma.f64 3/4 (sqrt.f64 (pow.f64 u1 5)) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7))))))","(sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))","(pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3/2)","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))","(fma.f64 3/2 (/.f64 (sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1)))) u1) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3/2))","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (+.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (+.f64 (*.f64 9/8 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (*.f64 3/4 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))))) (pow.f64 u1 2)))))","(fma.f64 3/2 (/.f64 (sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1)))) u1) (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3/2) (+.f64 1 (*.f64 (fma.f64 9/8 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2) (*.f64 3/4 (-.f64 (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2)))) (pow.f64 u1 -2)))))","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (+.f64 (*.f64 -1 (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (-.f64 (+.f64 (*.f64 1/4 (-.f64 (*.f64 3 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (*.f64 2 (/.f64 1 (log.f64 (/.f64 -1 u1))))))) (*.f64 -9/8 (/.f64 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (log.f64 (/.f64 -1 u1))))) (*.f64 9/16 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))) (pow.f64 u1 3)))) (+.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (+.f64 (*.f64 9/8 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (*.f64 3/4 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))))) (pow.f64 u1 2))))))","(fma.f64 3/2 (/.f64 (sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1)))) u1) (-.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3/2) (+.f64 1 (*.f64 (fma.f64 9/8 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2) (*.f64 3/4 (-.f64 (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2)))) (pow.f64 u1 -2)))) (pow.f64 (*.f64 (/.f64 (cbrt.f64 (fma.f64 1/4 (fma.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2) (*.f64 -2 (+.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3) (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1))))))) (fma.f64 -9/8 (-.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 -9/16 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3))))) u1) (sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1))))) 3)))"]],"time":40.7421875,"type":"simplify"},{"compiler":[[3107,1428]],"time":28.802978515625,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) 2) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",0.7507528562945684],["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","fresh",0.6259199110551225],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) u2) (cbrt.f64 (+.f64 (PI.f64) (PI.f64))))))","fresh",0.6161699577246658],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (*.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)))))","fresh",0.5788553443534595],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 u2))))","fresh",0.598162900648784],["(cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))","next",0.5027199295824468],["(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))","fresh",0.7026851761088252],["(*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))","fresh",0.6587479592594363],["(*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))","fresh",0.582836238193099],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))","fresh",0.8124121611845169],["(*.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))","fresh",2.52730557295566],["(*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))","fresh",0.5926400468037513],["(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",0.5130526488419581]],"compiler":[[18,15],[26,17],[25,20],[22,17],[21,16],[19,16],[23,14],[26,17],[22,15],[20,17],[27,18],[31,18],[17,14],[18,15],[26,17],[25,20],[22,17],[21,16],[19,16],[23,14],[26,17],[22,15],[20,17],[27,18],[31,18],[17,14]],"count":[[151,13]],"kept":[{"done":[0,0],"fresh":[13,8],"new":[137,5],"picked":[1,0]}],"min-error":[0.04439969614939772],"time":39.10302734375,"type":"prune"},{"compiler":[[76,27]],"locations":[["(sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))",0.3009023902634286,false],["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)",0.36166000976844204,false],["(*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))",0.3701362793053261,true],["(pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)",0.7339403321270289,true]],"time":20.289794921875,"type":"localize"},{"count":[[2,16]],"series":[["(*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u1","-inf",2.112060546875],["(*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u1","inf",3.01904296875],["(*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u1","0",0.81201171875],["(*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u2","-inf",0.3759765625],["(*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u2","inf",4.634033203125],["(*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u2","0",1.448974609375],["(pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)","u2","-inf",0.48095703125],["(pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)","u2","inf",0.5009765625],["(pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)","u2","0",0.97314453125]],"time":14.60302734375,"type":"series"},{"count":[[2,55]],"inputs":[["(pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)","(*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 0) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (*.f64 0 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 0) (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (*.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (*.f64 0 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (pow.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) 2) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))) (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4))) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 3))))))"]],"rules":[["egg-rr",30],["egg-rr",25]],"time":27.094970703125,"type":"rewrite"},{"count":[[71,72]],"inputs":[["(*.f64 8 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)))","(+.f64 (*.f64 8 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 (pow.f64 u2 5) (+.f64 (*.f64 -32/3 (pow.f64 (PI.f64) 5)) (*.f64 -16/3 (pow.f64 (PI.f64) 5)))))","(+.f64 (*.f64 (+.f64 (*.f64 16/15 (pow.f64 (PI.f64) 7)) (+.f64 (*.f64 64/9 (pow.f64 (PI.f64) 7)) (*.f64 2 (*.f64 (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6))) (PI.f64))))) (pow.f64 u2 7)) (+.f64 (*.f64 8 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 (pow.f64 u2 5) (+.f64 (*.f64 -32/3 (pow.f64 (PI.f64) 5)) (*.f64 -16/3 (pow.f64 (PI.f64) 5))))))","(+.f64 (*.f64 (pow.f64 u2 9) (+.f64 (*.f64 -4/3 (*.f64 (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6))) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -64/45 (pow.f64 (PI.f64) 9)) (+.f64 (*.f64 -32/315 (pow.f64 (PI.f64) 9)) (*.f64 2 (*.f64 (+.f64 (*.f64 -32/315 (pow.f64 (PI.f64) 8)) (*.f64 -32/45 (pow.f64 (PI.f64) 8))) (PI.f64))))))) (+.f64 (*.f64 (+.f64 (*.f64 16/15 (pow.f64 (PI.f64) 7)) (+.f64 (*.f64 64/9 (pow.f64 (PI.f64) 7)) (*.f64 2 (*.f64 (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6))) (PI.f64))))) (pow.f64 u2 7)) (+.f64 (*.f64 8 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 (pow.f64 u2 5) (+.f64 (*.f64 -32/3 (pow.f64 (PI.f64) 5)) (*.f64 -16/3 (pow.f64 (PI.f64) 5)))))))","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))))))","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (-.f64 (*.f64 -1 (+.f64 1 (+.f64 (*.f64 1/3 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 -1 u1))) 1))) (*.f64 2 (log.f64 (/.f64 -1 u1))))))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2)) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (pow.f64 u1 3)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 8 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)))","(pow.f64 (*.f64 2 (*.f64 u2 (PI.f64))) 3)","(+.f64 (*.f64 8 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 (pow.f64 u2 5) (+.f64 (*.f64 -32/3 (pow.f64 (PI.f64) 5)) (*.f64 -16/3 (pow.f64 (PI.f64) 5)))))","(fma.f64 (*.f64 (pow.f64 (PI.f64) 5) -16) (pow.f64 u2 5) (pow.f64 (*.f64 2 (*.f64 u2 (PI.f64))) 3))","(+.f64 (*.f64 (+.f64 (*.f64 16/15 (pow.f64 (PI.f64) 7)) (+.f64 (*.f64 64/9 (pow.f64 (PI.f64) 7)) (*.f64 2 (*.f64 (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6))) (PI.f64))))) (pow.f64 u2 7)) (+.f64 (*.f64 8 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 (pow.f64 u2 5) (+.f64 (*.f64 -32/3 (pow.f64 (PI.f64) 5)) (*.f64 -16/3 (pow.f64 (PI.f64) 5))))))","(fma.f64 (+.f64 (*.f64 (pow.f64 (PI.f64) 7) (+.f64 16/15 64/9)) (*.f64 (*.f64 2 (*.f64 (pow.f64 (PI.f64) 6) 128/45)) (PI.f64))) (pow.f64 u2 7) (fma.f64 (*.f64 (pow.f64 (PI.f64) 5) -16) (pow.f64 u2 5) (pow.f64 (*.f64 2 (*.f64 u2 (PI.f64))) 3)))","(+.f64 (*.f64 (pow.f64 u2 9) (+.f64 (*.f64 -4/3 (*.f64 (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6))) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -64/45 (pow.f64 (PI.f64) 9)) (+.f64 (*.f64 -32/315 (pow.f64 (PI.f64) 9)) (*.f64 2 (*.f64 (+.f64 (*.f64 -32/315 (pow.f64 (PI.f64) 8)) (*.f64 -32/45 (pow.f64 (PI.f64) 8))) (PI.f64))))))) (+.f64 (*.f64 (+.f64 (*.f64 16/15 (pow.f64 (PI.f64) 7)) (+.f64 (*.f64 64/9 (pow.f64 (PI.f64) 7)) (*.f64 2 (*.f64 (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6))) (PI.f64))))) (pow.f64 u2 7)) (+.f64 (*.f64 8 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 (pow.f64 u2 5) (+.f64 (*.f64 -32/3 (pow.f64 (PI.f64) 5)) (*.f64 -16/3 (pow.f64 (PI.f64) 5)))))))","(fma.f64 (pow.f64 u2 9) (fma.f64 -4/3 (*.f64 (*.f64 (pow.f64 (PI.f64) 6) 128/45) (pow.f64 (PI.f64) 3)) (+.f64 (*.f64 (pow.f64 (PI.f64) 9) (+.f64 -64/45 -32/315)) (*.f64 (*.f64 2 (*.f64 (pow.f64 (PI.f64) 8) -256/315)) (PI.f64)))) (fma.f64 (+.f64 (*.f64 (pow.f64 (PI.f64) 7) (+.f64 16/15 64/9)) (*.f64 (*.f64 2 (*.f64 (pow.f64 (PI.f64) 6) 128/45)) (PI.f64))) (pow.f64 u2 7) (fma.f64 (*.f64 (pow.f64 (PI.f64) 5) -16) (pow.f64 u2 5) (pow.f64 (*.f64 2 (*.f64 u2 (PI.f64))) 3))))","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))","(*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3)))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2))) (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3))) u1) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2))) (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3))) u1) (fma.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3)) (/.f64 (/.f64 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (+.f64 (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) 2) (fma.f64 -1/2 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) (fma.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 u1)))) (+.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))) (*.f64 -2 (neg.f64 (log.f64 (neg.f64 u1))))))))) (neg.f64 (*.f64 u1 u1))) 2)))","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (-.f64 (*.f64 -1 (+.f64 1 (+.f64 (*.f64 1/3 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 -1 u1))) 1))) (*.f64 2 (log.f64 (/.f64 -1 u1))))))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2)) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (pow.f64 u1 3)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))))))","(+.f64 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (+.f64 (*.f64 -1/2 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (cbrt.f64 (neg.f64 (fma.f64 (*.f64 (*.f64 (-.f64 (neg.f64 (fma.f64 -1/2 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) (fma.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 u1)))) (+.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))) (*.f64 -2 (neg.f64 (log.f64 (neg.f64 u1))))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) 2)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2))) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) -1/2 (+.f64 1 (fma.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) 1/3 (fma.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2 (neg.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 u1))) (fma.f64 -2/3 (neg.f64 (log.f64 (neg.f64 u1))) -1)))))))))) u1) 3)) (/.f64 (*.f64 1/2 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) u1))) (fma.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3)) (/.f64 (/.f64 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (+.f64 (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) 2) (fma.f64 -1/2 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) (fma.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 u1)))) (+.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))) (*.f64 -2 (neg.f64 (log.f64 (neg.f64 u1))))))))) (neg.f64 (*.f64 u1 u1))) 2)))"]],"time":79.114990234375,"type":"simplify"},{"compiler":[[4544,2536]],"time":45.35009765625,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) u2) (cbrt.f64 (+.f64 (PI.f64) (PI.f64))))))","fresh",0.6161699577246658],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 u2))))","fresh",0.598162900648784],["(cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (+.f64 (sqrt.f64 (pow.f64 u1 3)) (fma.f64 (sqrt.f64 (pow.f64 u1 9)) 63/128 (fma.f64 3/4 (sqrt.f64 (pow.f64 u1 5)) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7))))))))","fresh",11.398705061803833],["(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))","fresh",0.7026851761088252],["(cbrt.f64 (*.f64 (pow.f64 (*.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)))) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))","fresh",0.5287425002768688],["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","fresh",0.6259199110551225],["(*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))","fresh",0.582836238193099],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))","fresh",0.8124121611845169],["(cbrt.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 16/15 (pow.f64 (PI.f64) 7)) (+.f64 (*.f64 64/9 (pow.f64 (PI.f64) 7)) (*.f64 2 (*.f64 (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6))) (PI.f64))))) (pow.f64 u2 7)) (+.f64 (*.f64 8 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 (pow.f64 u2 5) (+.f64 (*.f64 -32/3 (pow.f64 (PI.f64) 5)) (*.f64 -16/3 (pow.f64 (PI.f64) 5)))))) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))","fresh",9.469049089912893],["(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","next",0.4951964943537116],["(*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))","fresh",0.5926400468037513],["(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",0.5130526488419581]],"compiler":[[25,20],[21,16],[36,30],[23,14],[24,19],[26,17],[22,15],[20,17],[68,57],[26,17],[31,18],[17,14],[25,20],[21,16],[36,30],[23,14],[24,19],[26,17],[22,15],[20,17],[68,57],[26,17],[31,18],[17,14]],"count":[[157,12]],"kept":[{"done":[0,0],"fresh":[12,8],"new":[144,4],"picked":[1,0]}],"min-error":[0.04049344614939772],"time":38.609130859375,"type":"prune"},{"compiler":[[105,34]],"locations":[["(*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))",0.30306625976844204,true],["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)",0.36166000976844204,false],["(*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))",0.3678512695368841,true],["(pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)",0.5709762695368841,true]],"time":24.755859375,"type":"localize"},{"count":[[3,16]],"series":[["(*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))","u2","-inf",0.340087890625],["(*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))","u2","inf",0.343017578125],["(*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))","u2","0",0.625],["(*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))","u1","-inf",1.2099609375],["(*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))","u1","inf",1.676025390625],["(*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))","u1","0",0.530029296875],["(*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","-inf",0.445068359375],["(*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","inf",0.546142578125],["(*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","0",0.666015625],["(*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","-inf",1.84814453125],["(*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","inf",2.510009765625],["(*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","0",0.846923828125],["(pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)","u2","-inf",0.263916015625],["(pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)","u2","inf",0.265869140625],["(pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)","u2","0",0.450927734375]],"time":12.97705078125,"type":"series"},{"count":[[3,123]],"inputs":[["(pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)","(*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) 0) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (*.f64 0 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 (neg.f64 1/2) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (neg.f64 (*.f64 1/2 (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 0 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (cos.f64 0) 2) (*.f64 1/2 (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/2 (*.f64 1/2 (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (neg.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 2 3)) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1) (*.f64 (neg.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (*.f64 1 (neg.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (-.f64 -1 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (-.f64 1 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4)) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) (neg.f64 (sqrt.f64 2))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) (cbrt.f64 4)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) -1) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) 3)) (+.f64 1 (+.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 1 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 1/2 3) (pow.f64 (*.f64 1/2 (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) 3)) (+.f64 (*.f64 1/2 1/2) (+.f64 (*.f64 (*.f64 1/2 (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) (*.f64 1/2 (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4)))) (*.f64 1/2 (*.f64 1/2 (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) (sqrt.f64 2)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) 1) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) (cbrt.f64 2)) (cbrt.f64 4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 1/2 (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) 0) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) (*.f64 0 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))) (cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2)))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2) (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 0) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 0 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2)))) (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4)) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4)) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 4)) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))) (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 (*.f64 u2 (PI.f64)) 4))) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 3))))))"]],"rules":[["egg-rr",31],["egg-rr",35],["egg-rr",57]],"time":35.995849609375,"type":"rewrite"},{"count":[[139,140]],"inputs":[["(*.f64 4 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))","(+.f64 (*.f64 4 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (*.f64 -16/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))))","(+.f64 (*.f64 4 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (+.f64 (*.f64 -16/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6))))))","(+.f64 (*.f64 4 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (+.f64 (*.f64 -16/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (+.f64 (*.f64 (+.f64 (*.f64 -32/315 (pow.f64 (PI.f64) 8)) (*.f64 -32/45 (pow.f64 (PI.f64) 8))) (pow.f64 u2 8)) (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6)))))))","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (-.f64 (*.f64 -1 (+.f64 1 (+.f64 (*.f64 1/3 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 -1 u1))) 1))) (*.f64 2 (log.f64 (/.f64 -1 u1))))))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2)) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (pow.f64 u1 3)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 4 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))","(*.f64 4 (pow.f64 (*.f64 u2 (PI.f64)) 2))","(+.f64 (*.f64 4 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (*.f64 -16/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))))","(fma.f64 4 (pow.f64 (*.f64 u2 (PI.f64)) 2) (*.f64 -16/3 (pow.f64 (*.f64 u2 (PI.f64)) 4)))","(+.f64 (*.f64 4 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (+.f64 (*.f64 -16/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6))))))","(fma.f64 4 (pow.f64 (*.f64 u2 (PI.f64)) 2) (fma.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) 128/45) (*.f64 -16/3 (pow.f64 (*.f64 u2 (PI.f64)) 4))))","(+.f64 (*.f64 4 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (+.f64 (*.f64 -16/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (+.f64 (*.f64 (+.f64 (*.f64 -32/315 (pow.f64 (PI.f64) 8)) (*.f64 -32/45 (pow.f64 (PI.f64) 8))) (pow.f64 u2 8)) (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6)))))))","(fma.f64 4 (pow.f64 (*.f64 u2 (PI.f64)) 2) (fma.f64 -16/3 (pow.f64 (*.f64 u2 (PI.f64)) 4) (fma.f64 (*.f64 (pow.f64 (PI.f64) 8) -256/315) (pow.f64 u2 8) (*.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) 128/45)))))","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2)","(*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))","(*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3)))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))","(fma.f64 1/2 (/.f64 (*.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2))) (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3))) u1) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))))","(+.f64 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (+.f64 (/.f64 (*.f64 1/2 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) u1) (/.f64 (*.f64 1/2 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (+.f64 (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) 2) (fma.f64 -1/2 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) (fma.f64 -2 (neg.f64 (log.f64 (neg.f64 u1))) (neg.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 u1))) (+.f64 1 (neg.f64 (log.f64 (neg.f64 u1))))))))))) (neg.f64 (*.f64 u1 u1))))) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3))))","(+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) u1) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2))) (pow.f64 u1 2)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (+.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (-.f64 (*.f64 -1 (+.f64 1 (+.f64 (*.f64 1/3 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 -1 u1))) 1))) (*.f64 2 (log.f64 (/.f64 -1 u1))))))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2)) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))) (pow.f64 u1 3)) (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))))))))","(+.f64 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (+.f64 (/.f64 (*.f64 1/2 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) u1) (/.f64 (*.f64 1/2 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (+.f64 (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) 2) (fma.f64 -1/2 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) (fma.f64 -2 (neg.f64 (log.f64 (neg.f64 u1))) (neg.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 u1))) (+.f64 1 (neg.f64 (log.f64 (neg.f64 u1))))))))))) (neg.f64 (*.f64 u1 u1))))) (fma.f64 (/.f64 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (fma.f64 -1/2 (*.f64 (*.f64 (-.f64 (neg.f64 (fma.f64 -1/2 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) (fma.f64 -2 (neg.f64 (log.f64 (neg.f64 u1))) (neg.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 u1))) (+.f64 1 (neg.f64 (log.f64 (neg.f64 u1))))))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) 2)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2))) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (+.f64 1 (fma.f64 1/3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) (fma.f64 2 (neg.f64 (log.f64 (neg.f64 u1))) (neg.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 u1))) (fma.f64 -2/3 (neg.f64 (log.f64 (neg.f64 u1))) -1))))))))) (neg.f64 (pow.f64 u1 3))) -1/2 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 2) (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3)))))"]],"time":73.30615234375,"type":"simplify"},{"compiler":[[6331,2991]],"time":52.744873046875,"type":"eval"},{"alts":[["(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (+.f64 (*.f64 4 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (+.f64 (*.f64 -16/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (+.f64 (*.f64 (+.f64 (*.f64 -32/315 (pow.f64 (PI.f64) 8)) (*.f64 -32/45 (pow.f64 (PI.f64) 8))) (pow.f64 u2 8)) (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6)))))))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","fresh",7.532241736451074],["(*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))","fresh",0.582836238193099],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) u2) (cbrt.f64 (+.f64 (PI.f64) (PI.f64))))))","fresh",0.6161699577246658],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 u2))))","fresh",0.598162900648784],["(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))","fresh",0.7026851761088252],["(cbrt.f64 (*.f64 (pow.f64 (*.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)))) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))","fresh",0.5287425002768688],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))","fresh",0.8124121611845169],["(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 3)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","fresh",0.5427352638905957],["(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) 3) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","fresh",0.5082427834274797],["(cbrt.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 16/15 (pow.f64 (PI.f64) 7)) (+.f64 (*.f64 64/9 (pow.f64 (PI.f64) 7)) (*.f64 2 (*.f64 (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6))) (PI.f64))))) (pow.f64 u2 7)) (+.f64 (*.f64 8 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 (pow.f64 u2 5) (+.f64 (*.f64 -32/3 (pow.f64 (PI.f64) 5)) (*.f64 -16/3 (pow.f64 (PI.f64) 5)))))) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))","fresh",9.469049089912893],["(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","done",0.4951964943537116],["(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (-.f64 1 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","fresh",24.18601373262586],["(*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))","fresh",0.5926400468037513]],"compiler":[[69,56],[22,15],[25,20],[21,16],[23,14],[24,19],[20,17],[29,20],[29,20],[68,57],[26,17],[28,20],[31,18]],"count":[[191,13]],"kept":[{"done":[0,0],"fresh":[11,8],"new":[179,4],"picked":[1,1]}],"min-error":[0.03658719614939772],"time":46.507080078125,"type":"prune"},{"accuracy":[0.49519649435371155],"baseline":[0.4951964943537116],"branch":[["cosTheta_i",0.49519649435371155,1],["u1",0.49519649435371166,1],["u2",0.4951964943537116,1],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",0.49519649435371166,1],["(sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1))))",0.49519649435371166,1],["(neg.f64 (log.f64 (-.f64 1 u1)))",0.49519649435371166,1],["(log.f64 (-.f64 1 u1))",0.49519649435371155,1],["(-.f64 1 u1)",0.49519649435371155,1],["(sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",0.4951964943537116,1],["(*.f64 (*.f64 2 (PI.f64)) u2)",0.4951964943537116,1]],"compiler":[[4,3],[4,3],[4,3],[16,14],[9,8],[8,7],[7,6],[6,5],[9,8],[8,7],[672,290]],"count":[[29,1]],"inputs":[["(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (+.f64 (*.f64 4 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (+.f64 (*.f64 -16/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (+.f64 (*.f64 (+.f64 (*.f64 -32/315 (pow.f64 (PI.f64) 8)) (*.f64 -32/45 (pow.f64 (PI.f64) 8))) (pow.f64 u2 8)) (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6)))))))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) 3)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","(cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) 3) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (-.f64 1 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","(cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (+.f64 (sqrt.f64 (pow.f64 u1 3)) (fma.f64 (sqrt.f64 (pow.f64 u1 9)) 63/128 (fma.f64 3/4 (sqrt.f64 (pow.f64 u1 5)) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7))))))))","(cbrt.f64 (*.f64 (pow.f64 (*.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)))) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))","(cbrt.f64 (*.f64 (+.f64 (*.f64 (+.f64 (*.f64 16/15 (pow.f64 (PI.f64) 7)) (+.f64 (*.f64 64/9 (pow.f64 (PI.f64) 7)) (*.f64 2 (*.f64 (+.f64 (*.f64 16/9 (pow.f64 (PI.f64) 6)) (*.f64 16/15 (pow.f64 (PI.f64) 6))) (PI.f64))))) (pow.f64 u2 7)) (+.f64 (*.f64 8 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 (pow.f64 u2 5) (+.f64 (*.f64 -32/3 (pow.f64 (PI.f64) 5)) (*.f64 -16/3 (pow.f64 (PI.f64) 5)))))) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))","(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) u2) (cbrt.f64 (+.f64 (PI.f64) (PI.f64))))))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (*.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)))))","(cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))","(*.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))","(*.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) 2) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) u2) (cbrt.f64 (+.f64 (PI.f64) (PI.f64))))))","(*.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))","(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))","(*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))","(*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 u2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 1/3))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)))))","(*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"link":["."],"name":["Beckmann Sample, near normal, slope_y"],"oracle":[35.73483157255332],"outputs":[["(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))"]],"time":98.375,"times":[["cosTheta_i",8.654052734375],["u1",8.576171875],["u2",8.43115234375],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",8.606201171875],["(sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1))))",8.72900390625],["(neg.f64 (log.f64 (-.f64 1 u1)))",8.703125],["(log.f64 (-.f64 1 u1))",8.69189453125],["(-.f64 1 u1)",8.696044921875],["(sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",8.776123046875],["(*.f64 (*.f64 2 (PI.f64)) u2)",8.721923828125]],"type":"regimes"},{"compiler":[[26,17]],"inputs":[["(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))"]],"method":["egg-herbie"],"outputs":[["(cbrt.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (sin.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))"]],"stop":[["fuel",1]],"time":20.714111328125,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[26,17]],"remove-preprocessing":[[]],"time":15.093017578125,"type":"end"}]
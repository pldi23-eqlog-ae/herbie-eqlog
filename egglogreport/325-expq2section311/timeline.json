[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.3138115406036377,0.4431428909301758,0.24304556846618652],[11,0.3133234977722168,0.4441189765930176,0.24255752563476563],[10,0.312347412109375,0.4450950622558594,0.24255752563476563],[9,0.3084430694580078,0.44899940490722656,0.24255752563476563],[8,0.3045387268066406,0.45290374755859375,0.24255752563476563],[7,0.29673004150390625,0.4685211181640625,0.23474884033203125],[6,0.2811126708984375,0.499755859375,0.2191314697265625],[5,0.2498779296875,0.562225341796875,0.187896728515625],[4,0.2498779296875,0.62469482421875,0.12542724609375],[3,0.2498779296875,0.7496337890625,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":53.123046875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.05517578125,2],["body",2048,"invalid",0.142822265625,1],["body",512,"valid",94.930908203125,1328],["body",1024,"valid",356.830810546875,2791],["body",2048,"valid",45.267822265625,277],["body",256,"valid",121.803466796875,3860]],"time":627.85595703125,"type":"sample"},{"compiler":[[8,5]],"inputs":[["0"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))"]],"symmetry":[[]],"time":54.22509765625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))"]],"time":20.373046875,"type":"simplify"},{"compiler":[[13,7]],"time":0.266845703125,"type":"eval"},{"alts":[["(/.f64 (exp.f64 x) (expm1.f64 x))","next",0.2578125]],"compiler":[[6,4],[6,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.2578125],"time":0.76416015625,"type":"prune"},{"compiler":[[11,4]],"locations":[["(/.f64 (exp.f64 x) (expm1.f64 x))",0.2500027510508252,true]],"time":2.974853515625,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (exp.f64 x) (expm1.f64 x))","x","-inf",0.468017578125],["(/.f64 (exp.f64 x) (expm1.f64 x))","x","inf",0.525146484375],["(/.f64 (exp.f64 x) (expm1.f64 x))","x","0",0.385009765625]],"time":1.424072265625,"type":"series"},{"count":[[1,58]],"inputs":[["(/.f64 (exp.f64 x) (expm1.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (exp.f64 x) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 x)) (/.f64 (pow.f64 (exp.f64 x) 2/3) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3) (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (exp.f64 x) 2/3) (expm1.f64 x)) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (expm1.f64 x) -1/3)) (*.f64 (neg.f64 (pow.f64 (expm1.f64 x) -2/3)) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) 4)) (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x)))) (pow.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (expm1.f64 x) -1/3)) (*.f64 (exp.f64 x) (neg.f64 (pow.f64 (expm1.f64 x) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x)))) (neg.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (expm1.f64 x) -1/3) (*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 x)) (/.f64 -1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 x) (/.f64 1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (expm1.f64 x)) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) -2/3)) (pow.f64 (expm1.f64 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (expm1.f64 x)) (neg.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 2/3)) (/.f64 (pow.f64 (exp.f64 x) 2/3) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (expm1.f64 x) -1/3) (*.f64 (pow.f64 (expm1.f64 x) -2/3) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (exp.f64 x)) (pow.f64 (expm1.f64 x) -2/3)) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (expm1.f64 x) -2/3)) (/.f64 (neg.f64 (exp.f64 x)) (cbrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x))) (*.f64 (cbrt.f64 (exp.f64 x)) (pow.f64 (expm1.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (exp.f64 x) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))) (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3) (cbrt.f64 (neg.f64 (exp.f64 x)))) (neg.f64 (pow.f64 (expm1.f64 x) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (exp.f64 x)) (cbrt.f64 (expm1.f64 x))) (neg.f64 (pow.f64 (expm1.f64 x) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (exp.f64 x) 2/3)) (/.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 x))) (/.f64 (pow.f64 (exp.f64 x) 2/3) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) 2/3) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 x) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) (pow.f64 (exp.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (expm1.f64 x) -2/3) (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))) (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (expm1.f64 x))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (exp.f64 x)) (cbrt.f64 (expm1.f64 x))) (neg.f64 (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) (neg.f64 (pow.f64 (expm1.f64 x) -2/3))) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2) (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))))) (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2) (neg.f64 (exp.f64 x)))) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) -2/3)) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))) (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (expm1.f64 x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 x) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3) (cbrt.f64 (neg.f64 (exp.f64 x)))) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3) (cbrt.f64 (neg.f64 (exp.f64 x))))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 3))))))"]],"rules":[["egg-rr",58]],"time":40.881103515625,"type":"rewrite"},{"count":[[70,65]],"inputs":[["(/.f64 1 x)","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (+.f64 (*.f64 1/12 x) (/.f64 1 x)))","(+.f64 1/2 (+.f64 (*.f64 -1/720 (pow.f64 x 3)) (+.f64 (*.f64 1/12 x) (/.f64 1 x))))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 x)","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (+.f64 (*.f64 1/12 x) (/.f64 1 x)))","(+.f64 1/2 (fma.f64 1/12 x (/.f64 1 x)))","(+.f64 1/2 (+.f64 (*.f64 -1/720 (pow.f64 x 3)) (+.f64 (*.f64 1/12 x) (/.f64 1 x))))","(+.f64 1/2 (fma.f64 -1/720 (pow.f64 x 3) (fma.f64 1/12 x (/.f64 1 x))))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))"]],"time":61.281005859375,"type":"simplify"},{"compiler":[[773,307]],"time":8.40380859375,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (exp.f64 x) 2/3) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","next",0.26171875],["(+.f64 1/2 (/.f64 1 x))","fresh",20.96911249822649],["(/.f64 (exp.f64 x) (expm1.f64 x))","done",0.2578125]],"compiler":[[12,8],[6,5],[6,4],[12,8],[6,5]],"count":[[66,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[65,2],"picked":[1,1]}],"min-error":[0.2031249999590629],"time":9.337158203125,"type":"prune"},{"compiler":[[31,11]],"locations":[["(cbrt.f64 (exp.f64 x))",0.2389860624232245,true],["(pow.f64 (exp.f64 x) 2/3)",0.24649577155484506,true],["(*.f64 (pow.f64 (exp.f64 x) 2/3) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))",0.2539090010508252,true],["(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))",0.25781112397081396,true]],"time":7.36083984375,"type":"localize"},{"count":[[4,48]],"series":[["(cbrt.f64 (exp.f64 x))","x","-inf",0.7919921875],["(cbrt.f64 (exp.f64 x))","x","inf",0.787109375],["(cbrt.f64 (exp.f64 x))","x","0",0.22509765625],["(pow.f64 (exp.f64 x) 2/3)","x","-inf",11.068115234375],["(pow.f64 (exp.f64 x) 2/3)","x","inf",17.0400390625],["(pow.f64 (exp.f64 x) 2/3)","x","0",0.283935546875],["(*.f64 (pow.f64 (exp.f64 x) 2/3) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","x","-inf",0.2919921875],["(*.f64 (pow.f64 (exp.f64 x) 2/3) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","x","inf",0.322021484375],["(*.f64 (pow.f64 (exp.f64 x) 2/3) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","x","0",0.19384765625],["(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","x","-inf",1.974853515625],["(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","x","inf",1.7431640625],["(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","x","0",0.511962890625]],"time":35.401123046875,"type":"series"},{"count":[[4,178]],"inputs":[["(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (exp.f64 x) 2/3) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","(pow.f64 (exp.f64 x) 2/3)","(cbrt.f64 (exp.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 2/3) (*.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 0) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) (*.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (*.f64 1/3 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) (*.f64 0 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (expm1.f64 x))) (/.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 2/3) (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 x))) (/.f64 -1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (/.f64 (cbrt.f64 (exp.f64 (*.f64 x 2/3))) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (expm1.f64 x) -1/3) (/.f64 (cbrt.f64 (exp.f64 x)) (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 x)) (/.f64 1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (expm1.f64 x)) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (expm1.f64 x)) (cbrt.f64 (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 (*.f64 x 2/3))) (expm1.f64 x)) (cbrt.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (pow.f64 (expm1.f64 x) 2/3)) (pow.f64 (expm1.f64 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) (pow.f64 (cbrt.f64 (expm1.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (exp.f64 x))) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 (exp.f64 x)))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 2/3) (cbrt.f64 (cbrt.f64 (neg.f64 (exp.f64 x))))) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (expm1.f64 x) -1/3) (cbrt.f64 (exp.f64 x))) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 2/3)) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (exp.f64 x)))) (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 2/3)) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (pow.f64 (expm1.f64 x) 2/3)) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (neg.f64 (exp.f64 x))) (cbrt.f64 (expm1.f64 x))) (neg.f64 (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (exp.f64 x)) -1) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x)))) (neg.f64 (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) -3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) -3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 0) (/.f64 (exp.f64 x) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) (*.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (/.f64 (exp.f64 x) (expm1.f64 x))) (*.f64 1/3 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (exp.f64 x) (expm1.f64 x))) (/.f64 (exp.f64 x) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) (*.f64 0 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x))) (/.f64 (cbrt.f64 (exp.f64 x)) (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (pow.f64 (*.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (cbrt.f64 (exp.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (pow.f64 (expm1.f64 x) 2/3)) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (cbrt.f64 (exp.f64 x))) 2) (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3) (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x 2/3)) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) (exp.f64 (*.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) (+.f64 2 1/3)) (cbrt.f64 (expm1.f64 x))) (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x 2/3)) (exp.f64 x))) (expm1.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (exp.f64 x) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 x 2/3))) (/.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4) (exp.f64 x))) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 x) (/.f64 1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 x)) (/.f64 (exp.f64 (*.f64 x 2/3)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)) 2/3) (/.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) (+.f64 2 1/3)) (cbrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4) (exp.f64 x))) (expm1.f64 x)) (cbrt.f64 (exp.f64 (*.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 4) (/.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x 2/3)) (exp.f64 x))) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (expm1.f64 x)) (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 (*.f64 x 2/3)) (expm1.f64 x)) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))) (pow.f64 (cbrt.f64 (expm1.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 x)) (/.f64 -1 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))) (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 x) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) (expm1.f64 x))) (cbrt.f64 (exp.f64 x))) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3) (cbrt.f64 (exp.f64 x))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 (*.f64 x 2/3)) (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x)))) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (pow.f64 (*.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (cbrt.f64 (exp.f64 x))) 2)) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (exp.f64 x)))) (pow.f64 (*.f64 (cbrt.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))) (cbrt.f64 (exp.f64 x))) 2)) (cbrt.f64 (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 (*.f64 x 2/3)) (/.f64 (cbrt.f64 (exp.f64 x)) (pow.f64 (expm1.f64 x) 2/3))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (exp.f64 x)) (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 2/3)) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))) 1) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) (exp.f64 (*.f64 x 2/3))) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (exp.f64 x)) (cbrt.f64 (expm1.f64 x))) (neg.f64 (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 x) (pow.f64 (expm1.f64 x) 2/3)) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 x) -1) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))) 1) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x))) (cbrt.f64 (expm1.f64 x))) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (exp.f64 x) (cbrt.f64 (expm1.f64 x)))) (neg.f64 (pow.f64 (expm1.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (exp.f64 x) (expm1.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (exp.f64 x) (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x))) (exp.f64 (*.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (exp.f64 (*.f64 x 2/3)) (/.f64 (cbrt.f64 (exp.f64 x)) (neg.f64 (expm1.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (exp.f64 x) (expm1.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (*.f64 x 2/3)) 2/3) (*.f64 (exp.f64 (*.f64 x 2/3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (*.f64 x 2/3)) 0) (exp.f64 (*.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 x 2/3)) (*.f64 (exp.f64 (*.f64 x 2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (exp.f64 (*.f64 x 2/3))) (*.f64 1/3 (exp.f64 (*.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (exp.f64 (*.f64 x 2/3))) (exp.f64 (*.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 x 2/3)) (*.f64 0 (exp.f64 (*.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 x))) (cbrt.f64 (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 x)) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (*.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (*.f64 x 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (exp.f64 (*.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 4) (cbrt.f64 (exp.f64 (*.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (cbrt.f64 (*.f64 (exp.f64 (*.f64 x 2/3)) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 x 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 (*.f64 x 2/3)) (exp.f64 x))) (cbrt.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (*.f64 x 2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (exp.f64 (*.f64 x 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (exp.f64 (*.f64 x 2/3)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (exp.f64 (*.f64 x 2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (*.f64 x 2/3))) (pow.f64 (cbrt.f64 (*.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 x)) (*.f64 (pow.f64 x 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 x 2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x (cbrt.f64 2/3))) (cbrt.f64 4/9))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (*.f64 x (sqrt.f64 2/3))) (sqrt.f64 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 x 2/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (*.f64 x 2/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (exp.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (exp.f64 (*.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 x 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (*.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 x 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 x 2/3) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 x 1/3) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (exp.f64 x)) 2/3) (*.f64 (cbrt.f64 (exp.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (exp.f64 x)) 0) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (exp.f64 x)) (*.f64 (cbrt.f64 (exp.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2/3 (cbrt.f64 (exp.f64 x))) (*.f64 1/3 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (exp.f64 x))) (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (exp.f64 x)) (*.f64 0 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (cbrt.f64 (exp.f64 (*.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 x 2/3))) (cbrt.f64 (cbrt.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (exp.f64 x)))) (cbrt.f64 (neg.f64 (exp.f64 (*.f64 x 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x 2/3)))) (cbrt.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) 4) (exp.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x)))) (cbrt.f64 (pow.f64 (cbrt.f64 (exp.f64 (*.f64 x 2/3))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (exp.f64 x)) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (exp.f64 (*.f64 x 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (exp.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (exp.f64 x)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 x 1/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 0 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 x 1/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 x 1/3) 1))))))"]],"rules":[["egg-rr",32],["egg-rr",42],["egg-rr",59],["egg-rr",45]],"time":35.39404296875,"type":"rewrite"},{"count":[[226,206]],"inputs":[["(/.f64 1 x)","(-.f64 (/.f64 1 x) 1/6)","(-.f64 (+.f64 (*.f64 -1/36 x) (/.f64 1 x)) 1/6)","(-.f64 (+.f64 (*.f64 -1/36 x) (+.f64 (/.f64 1 x) (*.f64 1/162 (pow.f64 x 2)))) 1/6)","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(/.f64 1 x)","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (+.f64 (*.f64 1/12 x) (/.f64 1 x)))","(+.f64 1/2 (+.f64 (*.f64 -1/720 (pow.f64 x 3)) (+.f64 (*.f64 1/12 x) (/.f64 1 x))))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","1","(+.f64 (*.f64 2/3 x) 1)","(+.f64 (*.f64 2/3 x) (+.f64 1 (*.f64 2/9 (pow.f64 x 2))))","(+.f64 (*.f64 2/3 x) (+.f64 1 (+.f64 (*.f64 2/9 (pow.f64 x 2)) (*.f64 4/81 (pow.f64 x 3)))))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","1","(+.f64 1 (*.f64 1/3 x))","(+.f64 1 (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x)))","(+.f64 1 (+.f64 (*.f64 1/162 (pow.f64 x 3)) (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x))))","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)","(pow.f64 (exp.f64 x) 1/3)"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 x)","(-.f64 (/.f64 1 x) 1/6)","(+.f64 (/.f64 1 x) -1/6)","(-.f64 (+.f64 (*.f64 -1/36 x) (/.f64 1 x)) 1/6)","(+.f64 (fma.f64 -1/36 x (/.f64 1 x)) -1/6)","(-.f64 (+.f64 (*.f64 -1/36 x) (+.f64 (/.f64 1 x) (*.f64 1/162 (pow.f64 x 2)))) 1/6)","(fma.f64 -1/36 x (+.f64 (fma.f64 1/162 (*.f64 x x) (/.f64 1 x)) -1/6))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(*.f64 (pow.f64 (*.f64 1 (exp.f64 x)) 1/3) (/.f64 1 (-.f64 (exp.f64 x) 1)))","(/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x))","(/.f64 1 x)","(+.f64 1/2 (/.f64 1 x))","(+.f64 1/2 (+.f64 (*.f64 1/12 x) (/.f64 1 x)))","(+.f64 1/2 (fma.f64 1/12 x (/.f64 1 x)))","(+.f64 1/2 (+.f64 (*.f64 -1/720 (pow.f64 x 3)) (+.f64 (*.f64 1/12 x) (/.f64 1 x))))","(+.f64 1/2 (fma.f64 (pow.f64 x 3) -1/720 (fma.f64 1/12 x (/.f64 1 x))))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))","(/.f64 (exp.f64 x) (expm1.f64 x))","1","(+.f64 (*.f64 2/3 x) 1)","(fma.f64 2/3 x 1)","(+.f64 (*.f64 2/3 x) (+.f64 1 (*.f64 2/9 (pow.f64 x 2))))","(fma.f64 x 2/3 (fma.f64 (*.f64 x x) 2/9 1))","(+.f64 (*.f64 2/3 x) (+.f64 1 (+.f64 (*.f64 2/9 (pow.f64 x 2)) (*.f64 4/81 (pow.f64 x 3)))))","(+.f64 (fma.f64 2/3 x 1) (fma.f64 4/81 (pow.f64 x 3) (*.f64 2/9 (*.f64 x x))))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","(exp.f64 (*.f64 2/3 x))","1","(+.f64 1 (*.f64 1/3 x))","(fma.f64 1/3 x 1)","(+.f64 1 (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x)))","(+.f64 1 (fma.f64 1/18 (*.f64 x x) (*.f64 1/3 x)))","(+.f64 1 (+.f64 (*.f64 1/162 (pow.f64 x 3)) (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x))))","(+.f64 1 (fma.f64 (pow.f64 x 3) 1/162 (fma.f64 1/18 (*.f64 x x) (*.f64 1/3 x))))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))","(pow.f64 (exp.f64 x) 1/3)","(cbrt.f64 (exp.f64 x))"]],"time":151.98388671875,"type":"simplify"},{"compiler":[[3072,1346]],"time":37.134033203125,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (exp.f64 x) 2/3) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","done",0.26171875],["(+.f64 1/2 (/.f64 1 x))","next",20.96911249822649],["(/.f64 (exp.f64 x) (expm1.f64 x))","done",0.2578125]],"compiler":[[12,8],[6,5],[6,4],[6,5]],"count":[[209,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[206,1],"picked":[1,1]}],"min-error":[0.2031249999590629],"time":74.630126953125,"type":"prune"},{"compiler":[[12,9]],"locations":[["(+.f64 1/2 (/.f64 1 x))",0.00390625,true]],"time":3.36279296875,"type":"localize"},{"count":[[1,3]],"series":[["(+.f64 1/2 (/.f64 1 x))","x","-inf",0.256103515625],["(+.f64 1/2 (/.f64 1 x))","x","inf",0.154052734375],["(+.f64 1/2 (/.f64 1 x))","x","0",0.324951171875]],"time":0.787109375,"type":"series"},{"count":[[1,60]],"inputs":[["(+.f64 1/2 (/.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 1/2 (/.f64 1 x)) 0) (+.f64 1/2 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1/2 (/.f64 1 x)) (*.f64 (+.f64 1/2 (/.f64 1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 1/2 (/.f64 1 x))) (+.f64 1/2 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1/2 (/.f64 1 x)) (*.f64 0 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 -1 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/2 (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 -1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 -1 x) -1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 1/8 (pow.f64 x -3))) (/.f64 1 (neg.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 1/8 (pow.f64 x -3))) 1) (/.f64 (pow.f64 (cbrt.f64 (+.f64 1/8 (pow.f64 x -3))) 2) (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x)))) (/.f64 (+.f64 1/8 (pow.f64 x -3)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x)) (cbrt.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x)))) (/.f64 (+.f64 1/2 (/.f64 1 x)) (pow.f64 (cbrt.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 1/4) (-.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 (/.f64 1/2 x)))) (+.f64 (cbrt.f64 1/2) (cbrt.f64 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 x -2)) (-.f64 (cbrt.f64 1/4) (cbrt.f64 (/.f64 1/2 x)))) (+.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/8 (pow.f64 x -3)) (/.f64 1 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2)) (cbrt.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1/2 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/2 (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))) (+.f64 1/8 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x)) (/.f64 (+.f64 1/2 (/.f64 1 x)) (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1/512 (pow.f64 (pow.f64 x -3) 3)) (/.f64 1 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x)))) (+.f64 1/64 (*.f64 (pow.f64 x -3) (-.f64 (pow.f64 x -3) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 1/8 (pow.f64 x -3)) (cbrt.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x)))) (pow.f64 (cbrt.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 x) -2) (*.f64 2 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x 2) (*.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (*.f64 2 (cbrt.f64 (/.f64 1 x)))) (*.f64 2 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -2 (neg.f64 x)) (*.f64 (neg.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 2 x) (*.f64 x 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) 2) (cbrt.f64 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 1/8 (pow.f64 x -3))) 1) (*.f64 (neg.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1/512 (pow.f64 (pow.f64 x -3) 3)) 1) (*.f64 (+.f64 1/64 (*.f64 (pow.f64 x -3) (-.f64 (pow.f64 x -3) 1/8))) (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1/8 (pow.f64 x -3))) (neg.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/8 (pow.f64 x -3)) (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2)) (cbrt.f64 (+.f64 1/8 (pow.f64 x -3)))) (cbrt.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/2 (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1/8 (pow.f64 x -3))) (cbrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2))) (cbrt.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 1/8 (pow.f64 x -3))) 1) (neg.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1/2 (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 -1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 1/8 (pow.f64 x -3)) (neg.f64 (+.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1/2 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 1/2)) (neg.f64 (sqrt.f64 1/2)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (cbrt.f64 1/2) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1/2 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (pow.f64 x -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 1 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -2)) (cbrt.f64 (/.f64 1 x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 x)) (neg.f64 (cbrt.f64 (pow.f64 x -2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) 1 1/2)))))"]],"rules":[["egg-rr",60]],"time":21.263916015625,"type":"rewrite"},{"count":[[63,62]],"inputs":[["(/.f64 1 x)","1/2","1/2"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 x)","1/2","1/2"]],"time":43.13916015625,"type":"simplify"},{"compiler":[[818,672]],"time":13.119873046875,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (exp.f64 x) 2/3) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","done",0.26171875],["(fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (/.f64 1 x))","next",20.96911249822649],["(/.f64 (exp.f64 x) (expm1.f64 x))","done",0.2578125]],"compiler":[[12,8],[9,8],[6,4],[9,8]],"count":[[65,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[62,1],"picked":[1,0]}],"min-error":[0.2031249999590629],"time":9.06103515625,"type":"prune"},{"compiler":[[17,14]],"locations":[["(fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (/.f64 1 x))",0.33822250976844204,true]],"time":4.717041015625,"type":"localize"},{"count":[[1,12]],"series":[["(fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (/.f64 1 x))","x","-inf",0.1748046875],["(fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (/.f64 1 x))","x","inf",0.2041015625],["(fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (/.f64 1 x))","x","0",0.385986328125]],"time":0.81396484375,"type":"series"},{"count":[[1,119]],"inputs":[["(fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (/.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 1/2 (/.f64 1 x)) 1/2) (*.f64 (+.f64 1/2 (/.f64 1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (+.f64 1/2 (/.f64 1 x))) (*.f64 1/2 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 2) (-.f64 (log.f64 1/2) (+.f64 (/.f64 -1 x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 1/2 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1/2 (/.f64 1 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/4 (-.f64 1/4 (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 -1 (+.f64 (/.f64 -1 x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 x) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (/.f64 -1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/2 (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x -2/3) (-.f64 (cbrt.f64 1/4) (*.f64 (pow.f64 x -1/3) (cbrt.f64 1/2)))) (+.f64 (pow.f64 x -1/3) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 1/4) (-.f64 (pow.f64 x -2/3) (cbrt.f64 (/.f64 1/2 x)))) (+.f64 (pow.f64 x -1/3) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2/3) (cbrt.f64 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (neg.f64 x)) (cbrt.f64 -4)) (/.f64 1 (*.f64 (cbrt.f64 4) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 2)) (*.f64 (neg.f64 x) (sqrt.f64 1/2))) (/.f64 1 (*.f64 (neg.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (pow.f64 x 2/3)) (*.f64 -2 (pow.f64 x -1/3))) (/.f64 1 (*.f64 -2 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 -4) (*.f64 (neg.f64 x) (cbrt.f64 1/2))) (/.f64 1 (*.f64 (neg.f64 x) (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (sqrt.f64 1/2) (neg.f64 x)) (sqrt.f64 2)) (/.f64 1 (*.f64 (sqrt.f64 2) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (sqrt.f64 1/2) (pow.f64 x 2/3)) (*.f64 (sqrt.f64 2) (pow.f64 x -1/3))) (/.f64 1 (*.f64 (sqrt.f64 2) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x 2) 1/2) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 x -1/3) (sqrt.f64 2)) (*.f64 (pow.f64 x 2/3) (sqrt.f64 1/2))) (/.f64 1 (*.f64 (pow.f64 x 2/3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 2) (*.f64 x (sqrt.f64 1/2))) (/.f64 1 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 x -1/3) -2) (neg.f64 (pow.f64 x 2/3))) (/.f64 1 (*.f64 (pow.f64 x 2/3) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 x -1/3) (cbrt.f64 4)) (*.f64 (pow.f64 x 2/3) (cbrt.f64 1/2))) (/.f64 1 (*.f64 (pow.f64 x 2/3) (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (pow.f64 x -3)) -1/8) (/.f64 1 (+.f64 -1/4 (-.f64 (/.f64 1/2 x) (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (cbrt.f64 1/2) x) (cbrt.f64 4)) (/.f64 1 (*.f64 (cbrt.f64 4) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (pow.f64 x 2/3)) (*.f64 (cbrt.f64 4) (pow.f64 x -1/3))) (/.f64 1 (*.f64 (cbrt.f64 4) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 4) (*.f64 x (cbrt.f64 1/2))) (/.f64 1 (*.f64 x (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (*.f64 2 (pow.f64 x -1/3))) (/.f64 1 (*.f64 2 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (sqrt.f64 1/2) x) (sqrt.f64 2)) (/.f64 1 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 1/4) (+.f64 (pow.f64 x -2/3) (*.f64 (cbrt.f64 1/2) (neg.f64 (pow.f64 x -1/3))))) (+.f64 (pow.f64 x -1/3) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/8 (pow.f64 x -3)) (/.f64 1 (-.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 -2 x) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 2) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 -1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 -1 x) -1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (+.f64 1/2 (/.f64 1 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 1/2 (+.f64 1/2 (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 -1 x) -1/2)) (neg.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (pow.f64 x -1/3) 2) (pow.f64 x 2/3)) (/.f64 1 (*.f64 (pow.f64 x 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 -2 x) 1/2) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/8 (pow.f64 x -3)) (/.f64 1 (+.f64 (pow.f64 x -2) (+.f64 1/4 (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1/2 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/2 (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (sqrt.f64 2)) (*.f64 (neg.f64 x) (sqrt.f64 1/2))) (*.f64 (neg.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 -4) (*.f64 (neg.f64 x) (cbrt.f64 1/2))) (*.f64 (neg.f64 x) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x -1/3) 2) (pow.f64 x 2/3)) (*.f64 (pow.f64 x 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x -1/3) -2) (neg.f64 (pow.f64 x 2/3))) (*.f64 (pow.f64 x 2/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x -1/3) (sqrt.f64 2)) (*.f64 (pow.f64 x 2/3) (sqrt.f64 1/2))) (*.f64 (pow.f64 x 2/3) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 x -1/3) (cbrt.f64 4)) (*.f64 (pow.f64 x 2/3) (cbrt.f64 1/2))) (*.f64 (pow.f64 x 2/3) (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sqrt.f64 2) (*.f64 x (sqrt.f64 1/2))) (*.f64 x (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 4) (*.f64 x (cbrt.f64 1/2))) (*.f64 x (cbrt.f64 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 2/3) (*.f64 2 (pow.f64 x -1/3))) (*.f64 2 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 1/2) x) (cbrt.f64 4)) (*.f64 (cbrt.f64 4) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (neg.f64 x)) (cbrt.f64 -4)) (*.f64 (cbrt.f64 4) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (pow.f64 x 2/3)) (*.f64 (cbrt.f64 4) (pow.f64 x -1/3))) (*.f64 (cbrt.f64 4) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 x 2/3)) (*.f64 -2 (pow.f64 x -1/3))) (*.f64 -2 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sqrt.f64 1/2) x) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sqrt.f64 1/2) (neg.f64 x)) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (sqrt.f64 1/2) (pow.f64 x 2/3)) (*.f64 (sqrt.f64 2) (pow.f64 x -1/3))) (*.f64 (sqrt.f64 2) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 x -3)) -1/8) (+.f64 -1/4 (-.f64 (/.f64 1/2 x) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/8 (pow.f64 x -3)) (-.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (neg.f64 x)) (cbrt.f64 -4))) (neg.f64 (*.f64 (cbrt.f64 4) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (neg.f64 (sqrt.f64 2)) (*.f64 (neg.f64 x) (sqrt.f64 1/2)))) (neg.f64 (*.f64 (neg.f64 x) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (neg.f64 (pow.f64 x 2/3)) (*.f64 -2 (pow.f64 x -1/3)))) (neg.f64 (*.f64 -2 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (cbrt.f64 -4) (*.f64 (neg.f64 x) (cbrt.f64 1/2)))) (neg.f64 (*.f64 (neg.f64 x) (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (sqrt.f64 1/2) (neg.f64 x)) (sqrt.f64 2))) (neg.f64 (*.f64 (sqrt.f64 2) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (sqrt.f64 1/2) (pow.f64 x 2/3)) (*.f64 (sqrt.f64 2) (pow.f64 x -1/3)))) (neg.f64 (*.f64 (sqrt.f64 2) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (pow.f64 x -1/3) 2) (pow.f64 x 2/3))) (neg.f64 (*.f64 (pow.f64 x 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x 2) (*.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (pow.f64 x -1/3) (sqrt.f64 2)) (*.f64 (pow.f64 x 2/3) (sqrt.f64 1/2)))) (neg.f64 (*.f64 (pow.f64 x 2/3) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (sqrt.f64 2) (*.f64 x (sqrt.f64 1/2)))) (neg.f64 (*.f64 x (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (pow.f64 x -1/3) -2) (neg.f64 (pow.f64 x 2/3)))) (neg.f64 (*.f64 (pow.f64 x 2/3) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (pow.f64 x -1/3) (cbrt.f64 4)) (*.f64 (pow.f64 x 2/3) (cbrt.f64 1/2)))) (neg.f64 (*.f64 (pow.f64 x 2/3) (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (cbrt.f64 1/2) x) (cbrt.f64 4))) (neg.f64 (*.f64 (cbrt.f64 4) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (cbrt.f64 1/2) (pow.f64 x 2/3)) (*.f64 (cbrt.f64 4) (pow.f64 x -1/3)))) (neg.f64 (*.f64 (cbrt.f64 4) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (cbrt.f64 4) (*.f64 x (cbrt.f64 1/2)))) (neg.f64 (*.f64 x (cbrt.f64 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (pow.f64 x -3)) -1/8) (neg.f64 (+.f64 (pow.f64 x -2) (+.f64 1/4 (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 2/3) (*.f64 2 (pow.f64 x -1/3)))) (neg.f64 (*.f64 2 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (sqrt.f64 1/2) x) (sqrt.f64 2))) (neg.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2) (+.f64 1/8 (pow.f64 x -3)))) (cbrt.f64 (-.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (+.f64 1/8 (pow.f64 x -3)) (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2))) (cbrt.f64 (-.f64 (+.f64 1/4 (pow.f64 x -2)) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -2 x) (*.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/8 (pow.f64 x -3)) (+.f64 (pow.f64 x -2) (+.f64 1/4 (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -2 x) 1/2) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x 2) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/8 (pow.f64 x -3)) (neg.f64 (+.f64 -1/4 (-.f64 (/.f64 1/2 x) (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 -2 x) 1/2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 -1 x) -1/2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2) (+.f64 x 2))) (cbrt.f64 (*.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (-.f64 -2 x) (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2))) (cbrt.f64 (*.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2) (-.f64 -2 x))) (cbrt.f64 (*.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (+.f64 x 2) (pow.f64 (+.f64 1/2 (/.f64 1 x)) 2))) (cbrt.f64 (*.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/2 (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1/2 (/.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1/2 (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 -1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1/2 (/.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 1/2)) (neg.f64 (sqrt.f64 1/2)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 1/8)) (sqrt.f64 (sqrt.f64 1/2)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (cbrt.f64 -1/4) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 1/2)) (pow.f64 1/2 5/6) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 1/2)) (sqrt.f64 (sqrt.f64 1/8)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1/2 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (cbrt.f64 1/4) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/4) (cbrt.f64 1/2) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1/2 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 x -1/3)) (neg.f64 (pow.f64 x -2/3)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) 1 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 1 (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/3) (pow.f64 x -2/3) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -2/3) (pow.f64 x -1/3) 1/2)))))"]],"rules":[["egg-rr",119]],"time":49.3720703125,"type":"rewrite"},{"count":[[131,123]],"inputs":[["(/.f64 1 x)","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(pow.f64 (sqrt.f64 1/2) 2)","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(pow.f64 (sqrt.f64 1/2) 2)","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 x)","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) 1/2)","(pow.f64 (sqrt.f64 1/2) 2)","1/2","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) 1/2)","(pow.f64 (sqrt.f64 1/2) 2)","1/2","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) 1/2)","(+.f64 (/.f64 1 x) (pow.f64 (sqrt.f64 1/2) 2))","(+.f64 (/.f64 1 x) 1/2)"]],"time":49.958984375,"type":"simplify"},{"compiler":[[1572,1302]],"time":24.617919921875,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (exp.f64 x) 2/3) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","done",0.26171875],["(fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (/.f64 1 x))","done",20.96911249822649],["(/.f64 (exp.f64 x) (expm1.f64 x))","done",0.2578125]],"compiler":[[12,8],[9,8],[6,4]],"count":[[126,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[123,0],"picked":[1,1]}],"min-error":[0.2031249999590629],"time":18.7490234375,"type":"prune"},{"accuracy":[0.2578125],"baseline":[0.2578125],"branch":[["x",0.2578125,1],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))",0.2578125,1],["(exp.f64 x)",0.2578125,1]],"compiler":[[2,1],[8,5],[3,2],[42,27]],"count":[[6,1]],"inputs":[["(fma.f64 (sqrt.f64 1/2) (sqrt.f64 1/2) (/.f64 1 x))","(+.f64 1/2 (/.f64 1 x))","(*.f64 (pow.f64 (exp.f64 x) 2/3) (/.f64 (cbrt.f64 (exp.f64 x)) (expm1.f64 x)))","(+.f64 1/2 (/.f64 1 x))","(/.f64 (exp.f64 x) (expm1.f64 x))","(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))"]],"link":["."],"name":["expq2 (section 3.11)"],"oracle":[62.55978824386015],"outputs":[["(/.f64 (exp.f64 x) (expm1.f64 x))"]],"time":8.18603515625,"times":[["x",3.386962890625],["(/.f64 (exp.f64 x) (-.f64 (exp.f64 x) 1))",1.9521484375],["(exp.f64 x)",1.73095703125]],"type":"regimes"},{"compiler":[[6,4]],"inputs":[["(/.f64 (exp.f64 x) (expm1.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (exp.f64 x) (expm1.f64 x))"]],"stop":[["done",1]],"time":38.533935546875,"type":"simplify"},{"time":0.01416015625,"type":"soundness"},{"compiler":[[6,4]],"remove-preprocessing":[[]],"time":7.348876953125,"type":"end"}]
[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.7486577033996582,0.2508540153503418,0.00048828125],[11,0.7476816177368164,0.2518301010131836,0.00048828125],[10,0.7457294464111328,0.2537822723388672,0.00048828125],[9,0.7418251037597656,0.2576866149902344,0.00048828125],[8,0.7340164184570313,0.26549530029296875,0.00048828125],[7,0.7183990478515625,0.2811126708984375,0.00048828125],[6,0.687164306640625,0.312347412109375,0.00048828125],[5,0.62469482421875,0.37481689453125,0.00048828125],[4,0.499755859375,0.499755859375,0.00048828125],[3,0.2498779296875,0.7496337890625,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":43.947998046875,"type":"analyze"},{"outcomes":[["body",4096,"valid",13.099853515625,39],["body",512,"valid",161.438232421875,1325],["body",1024,"valid",608.018798828125,2557],["body",256,"valid",149.712158203125,3103],["body",2048,"valid",284.39404296875,1232]],"time":1224.9951171875,"type":"sample"},{"compiler":[[10,7]],"inputs":[["0"],["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))","(log.f64 (+.f64 x (hypot.f64 x -1)))"]],"symmetry":[[]],"time":50.927001953125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))"]],"method":["egg-herbie"],"outputs":[["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))","(log.f64 (+.f64 x (hypot.f64 x -1)))"]],"time":18.098876953125,"type":"simplify"},{"compiler":[[16,11]],"time":0.387939453125,"type":"eval"},{"alts":[["(log.f64 (+.f64 x (hypot.f64 x -1)))","next",48.17984498102247]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[48.17984498102247],"time":0.80419921875,"type":"prune"},{"compiler":[[17,11]],"locations":[["(hypot.f64 x -1)",0.00390625,true],["(+.f64 x (hypot.f64 x -1))",0.5972800031692478,true],["(log.f64 (+.f64 x (hypot.f64 x -1)))",2.5492698461609593,true]],"time":5.684814453125,"type":"localize"},{"count":[[3,36]],"series":[["(hypot.f64 x -1)","x","-inf",0.2080078125],["(hypot.f64 x -1)","x","inf",0.16796875],["(hypot.f64 x -1)","x","0",0.22412109375],["(+.f64 x (hypot.f64 x -1))","x","-inf",0.2509765625],["(+.f64 x (hypot.f64 x -1))","x","inf",0.27099609375],["(+.f64 x (hypot.f64 x -1))","x","0",0.17822265625],["(log.f64 (+.f64 x (hypot.f64 x -1)))","x","-inf",0.722900390625],["(log.f64 (+.f64 x (hypot.f64 x -1)))","x","inf",0.607177734375],["(log.f64 (+.f64 x (hypot.f64 x -1)))","x","0",0.800048828125]],"time":3.56103515625,"type":"series"},{"count":[[3,106]],"inputs":[["(log.f64 (+.f64 x (hypot.f64 x -1)))","(+.f64 x (hypot.f64 x -1))","(hypot.f64 x -1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))) (pow.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 2/3) (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 (+.f64 x (hypot.f64 x -1))))) (neg.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 x (hypot.f64 x -1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 x -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x 0) (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 x (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (hypot.f64 x -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (neg.f64 (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (hypot.f64 x -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (neg.f64 x) (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (hypot.f64 x -1)) (-.f64 (cbrt.f64 (hypot.f64 x -1)) (cbrt.f64 x)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (hypot.f64 x -1) 2/3) (*.f64 (cbrt.f64 x) (-.f64 (cbrt.f64 x) (cbrt.f64 (hypot.f64 x -1))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (neg.f64 x) (hypot.f64 x -1))) (neg.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) (pow.f64 (+.f64 x (hypot.f64 x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 2/3) (cbrt.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 x) (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 x) (hypot.f64 x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (hypot.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x (hypot.f64 x -1)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (hypot.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 x) (hypot.f64 x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (hypot.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 x) (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (hypot.f64 x -1)) (sqrt.f64 (hypot.f64 x -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 x -1)) (pow.f64 (hypot.f64 x -1) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (hypot.f64 x -1) 2/3) (cbrt.f64 (hypot.f64 x -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (hypot.f64 x -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 x -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 x -1) 1 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 x -1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 x -1)) (sqrt.f64 (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (hypot.f64 x -1))) (neg.f64 (sqrt.f64 (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x -1) (pow.f64 (hypot.f64 x -1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 x -1) 0) (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (hypot.f64 x -1) 2/3)) (cbrt.f64 (neg.f64 (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (hypot.f64 x -1))) (neg.f64 (pow.f64 (hypot.f64 x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 x -1) 2/3) (cbrt.f64 (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 x -1)) (pow.f64 (hypot.f64 x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (hypot.f64 x -1) 2/3)) (fabs.f64 (cbrt.f64 (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (hypot.f64 x -1))) (fabs.f64 (pow.f64 (hypot.f64 x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (hypot.f64 x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (hypot.f64 x -1) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (neg.f64 (sqrt.f64 (hypot.f64 x -1)))) (sqrt.f64 (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 x -1)) (neg.f64 (neg.f64 (sqrt.f64 (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (hypot.f64 x -1) 0)) (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x -1) (fabs.f64 (pow.f64 (hypot.f64 x -1) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 x -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (hypot.f64 x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (hypot.f64 x -1) (+.f64 (pow.f64 x 6) 1))) (cbrt.f64 (-.f64 (pow.f64 x 4) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 x -1) 4) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 x -1) 6) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (hypot.f64 x -1) 4) 2) (/.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 x -1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x 1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 x -1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 x -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 x -1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (hypot.f64 x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 x x 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 x -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 x -1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 -1 x)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 0 (neg.f64 (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 0 (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 -1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 (hypot.f64 x -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (hypot.f64 x -1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 x) -1)))))"]],"rules":[["egg-rr",51],["egg-rr",36],["egg-rr",19]],"time":45.66796875,"type":"rewrite"},{"count":[[142,169]],"inputs":[["x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) (+.f64 (*.f64 -5/112 (pow.f64 x 7)) x)))","(+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 x))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","1","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/8 (pow.f64 x 4)) x)))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 2 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 2 x) (*.f64 1/16 (/.f64 1 (pow.f64 x 5))))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/2 (/.f64 1 x))))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 5/128 (/.f64 1 (pow.f64 x 7)))) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/2 (/.f64 1 x))))","1","(+.f64 1 (*.f64 1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","x","(+.f64 (*.f64 1/2 (/.f64 1 x)) x)","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) x) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(*.f64 -1 x)","(-.f64 (*.f64 -1 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/16 (/.f64 1 (pow.f64 x 5)))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) x))","(fma.f64 -1/6 (pow.f64 x 3) (fma.f64 3/40 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) (+.f64 (*.f64 -5/112 (pow.f64 x 7)) x)))","(fma.f64 -1/6 (pow.f64 x 3) (fma.f64 (pow.f64 x 5) 3/40 (fma.f64 -5/112 (pow.f64 x 7) x)))","(+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 x))))","(+.f64 (log.f64 2) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (log.f64 x) (fma.f64 (pow.f64 x -2) 1/4 (log.f64 2)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(+.f64 (+.f64 (log.f64 x) (fma.f64 (pow.f64 x -2) 1/4 (log.f64 2))) (*.f64 -3/32 (pow.f64 x -4)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(+.f64 (+.f64 (log.f64 x) (+.f64 (log.f64 2) (fma.f64 5/96 (pow.f64 x -6) (/.f64 1/4 (*.f64 x x))))) (*.f64 -3/32 (pow.f64 x -4)))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2))","(log.f64 (/.f64 -1/2 x))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(+.f64 (log.f64 (/.f64 -1/2 x)) (/.f64 -1/4 (*.f64 x x)))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(+.f64 (+.f64 (log.f64 (/.f64 -1/2 x)) (*.f64 3/32 (pow.f64 x -4))) (/.f64 -1/4 (*.f64 x x)))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (log.f64 (/.f64 -1/2 x)) (*.f64 3/32 (pow.f64 x -4))) (fma.f64 5/96 (pow.f64 x -6) (/.f64 1/4 (*.f64 x x))))","1","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 (fma.f64 1/2 (*.f64 x x) 1) x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/8 (pow.f64 x 4)) x)))","(+.f64 (fma.f64 1/2 (*.f64 x x) 1) (fma.f64 -1/8 (pow.f64 x 4) x))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 2 x (/.f64 1/2 x))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 2 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(+.f64 (fma.f64 2 x (/.f64 1/2 x)) (pow.f64 (/.f64 -1/2 x) 3))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 2 x) (*.f64 1/16 (/.f64 1 (pow.f64 x 5))))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(+.f64 (/.f64 1/2 x) (+.f64 (fma.f64 (pow.f64 x -5) 1/16 (*.f64 2 x)) (pow.f64 (/.f64 -1/2 x) 3)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/2 (/.f64 1 x))))","(-.f64 (pow.f64 (/.f64 1/2 x) 3) (fma.f64 1/16 (pow.f64 x -5) (/.f64 1/2 x)))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 5/128 (/.f64 1 (pow.f64 x 7)))) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/2 (/.f64 1 x))))","(-.f64 (fma.f64 5/128 (pow.f64 x -7) (pow.f64 (/.f64 1/2 x) 3)) (fma.f64 1/16 (pow.f64 x -5) (/.f64 1/2 x)))","1","(+.f64 1 (*.f64 1/2 (pow.f64 x 2)))","(fma.f64 1/2 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/8 (pow.f64 x 4) (*.f64 1/2 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 (fma.f64 1/2 (*.f64 x x) 1) (fma.f64 1/16 (pow.f64 x 6) (*.f64 -1/8 (pow.f64 x 4))))","x","(+.f64 (*.f64 1/2 (/.f64 1 x)) x)","(+.f64 (/.f64 1/2 x) x)","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) x) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(+.f64 (/.f64 1/2 x) (+.f64 x (pow.f64 (/.f64 -1/2 x) 3)))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(+.f64 (fma.f64 1/16 (pow.f64 x -5) (/.f64 1/2 x)) (+.f64 x (pow.f64 (/.f64 -1/2 x) 3)))","(*.f64 -1 x)","(neg.f64 x)","(-.f64 (*.f64 -1 x) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (neg.f64 x) (/.f64 -1/2 x))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) x)","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/16 (/.f64 1 (pow.f64 x 5)))))","(-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) (fma.f64 1/16 (pow.f64 x -5) x))"]],"time":127.155029296875,"type":"simplify"},{"compiler":[[1962,1488]],"time":32.30517578125,"type":"eval"},{"alts":[["(log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))","fresh",48.18076992661291],["(log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))","fresh",45.54171942793122],["(fma.f64 -1/6 (pow.f64 x 3) x)","next",31.350320188525853]],"compiler":[[10,8],[10,8],[7,5],[10,8],[10,8],[7,5]],"count":[[170,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[169,3],"picked":[1,0]}],"min-error":[0.00390625],"time":28.30078125,"type":"prune"},{"compiler":[[13,9]],"locations":[["(fma.f64 -1/6 (pow.f64 x 3) x)",0.0546875,true]],"time":4.571044921875,"type":"localize"},{"count":[[1,12]],"series":[["(fma.f64 -1/6 (pow.f64 x 3) x)","x","-inf",0.68017578125],["(fma.f64 -1/6 (pow.f64 x 3) x)","x","inf",0.48193359375],["(fma.f64 -1/6 (pow.f64 x 3) x)","x","0",0.422119140625]],"time":1.649169921875,"type":"series"},{"count":[[1,41]],"inputs":[["(fma.f64 -1/6 (pow.f64 x 3) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/6 (pow.f64 x 3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 -1/6 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 -1/6 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 1/6 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -1/6 (pow.f64 x 3)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 -1/6 (pow.f64 x 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)) 4)) (cbrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x))) (pow.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 -1/6 (*.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -1/6 (*.f64 x x)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)) (pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 2/3) (cbrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 -1/6 (pow.f64 x 3) x))) (neg.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (cbrt.f64 -1/6) x) 2) (-.f64 (pow.f64 x 2/3) (*.f64 (*.f64 (cbrt.f64 -1/6) x) (cbrt.f64 x)))) (+.f64 (*.f64 (cbrt.f64 -1/6) x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (*.f64 (cbrt.f64 -1/6) x) 2) (*.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 -1/6) x)))) (+.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 -1/6) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 -1/6 (pow.f64 x 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 -1/6 (pow.f64 x 3) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/6 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 -1/6 (pow.f64 x 3) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 -1/6 (pow.f64 x 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/6 (pow.f64 x 3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 -1/6 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 -1/6 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/6) (*.f64 (cbrt.f64 1/36) (pow.f64 x 3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 -1/6) x) (pow.f64 (*.f64 (cbrt.f64 -1/6) x) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/6 x) (*.f64 x x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3) -1/6 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/6 (*.f64 x x)) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 -1/6 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 -1/6 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 -1/6 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -1/6 (pow.f64 x 3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/6 (pow.f64 x 3)) 1 x)))))"]],"rules":[["egg-rr",41]],"time":37.511962890625,"type":"rewrite"},{"count":[[53,43]],"inputs":[["x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(*.f64 -1/6 (pow.f64 x 3))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(*.f64 -1/6 (pow.f64 x 3))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(*.f64 -1/6 (pow.f64 x 3))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(*.f64 -1/6 (pow.f64 x 3))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)"]],"time":77.75,"type":"simplify"},{"compiler":[[446,324]],"time":7.428955078125,"type":"eval"},{"alts":[["(log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))","fresh",48.18076992661291],["(log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))","next",45.54171942793122],["(fma.f64 -1/6 (pow.f64 x 3) x)","done",31.350320188525853]],"compiler":[[10,8],[10,8],[7,5],[10,8],[10,8]],"count":[[46,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[43,0],"picked":[1,1]}],"min-error":[0.00390625],"time":6.299072265625,"type":"prune"},{"compiler":[[28,21]],"locations":[["(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))",0.21694958307534415,true],["(log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))",11.137984728442486,true]],"time":8.322021484375,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","x","-inf",0.35693359375],["(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","x","inf",0.346923828125],["(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","x","0",0.387939453125],["(log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))","x","-inf",0.39892578125],["(log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))","x","inf",0.843017578125],["(log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))","x","0",0.594970703125]],"time":3.031982421875,"type":"series"},{"count":[[2,56]],"inputs":[["(log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 0) (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) (*.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) (*.f64 0 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) (pow.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 2/3) (cbrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 0) (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) (*.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) (*.f64 0 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (/.f64 1/2 x) 3) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (/.f64 1/2 x) 3) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 2/3) (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (pow.f64 (/.f64 -1/2 x) 3) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 -1/2 x) 3) (/.f64 1/2 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (*.f64 1/4 (pow.f64 x -3)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (/.f64 -1 x) (*.f64 1/4 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (pow.f64 (/.f64 -1/2 x) 3) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/8) (*.f64 (sqrt.f64 1/8) (pow.f64 x -3)) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (/.f64 (cbrt.f64 1/4) x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/3) (/.f64 -1/2 (pow.f64 x 2/3)) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/8 (/.f64 1 x)) (cbrt.f64 (pow.f64 x -6)) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1/2 x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 -1 x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (/.f64 1 x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) -1/2 (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -3) 1/8 (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 1/2 x) 3) 1 (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 -1/2 x) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1/2 x) 1 (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 1/4 (pow.f64 x -3)) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (/.f64 1/2 x) 3) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1/2 x)) (pow.f64 (/.f64 -1/2 x) 2/3) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 -1/2 x) 2/3) (cbrt.f64 (/.f64 -1/2 x)) (pow.f64 (/.f64 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 x) (/.f64 1/4 (*.f64 x x)) (/.f64 -1/2 x))))))"]],"rules":[["egg-rr",39],["egg-rr",17]],"time":27.158935546875,"type":"rewrite"},{"count":[[80,80]],"inputs":[["(+.f64 (*.f64 -3 (log.f64 x)) (log.f64 1/8))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (log.f64 1/8)))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (+.f64 (log.f64 1/8) (*.f64 -8 (pow.f64 x 4)))))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (+.f64 (log.f64 1/8) (+.f64 (*.f64 -8 (pow.f64 x 4)) (*.f64 -64/3 (pow.f64 x 6))))))","(+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x)))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/192 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/192 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))))","(/.f64 1/8 (pow.f64 x 3))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 -3 (log.f64 x)) (log.f64 1/8))","(fma.f64 -3 (log.f64 x) (log.f64 1/8))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (log.f64 1/8)))","(fma.f64 (log.f64 x) -3 (fma.f64 -4 (*.f64 x x) (log.f64 1/8)))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (+.f64 (log.f64 1/8) (*.f64 -8 (pow.f64 x 4)))))","(fma.f64 (log.f64 x) -3 (fma.f64 (*.f64 x x) -4 (fma.f64 (pow.f64 x 4) -8 (log.f64 1/8))))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (+.f64 (log.f64 1/8) (+.f64 (*.f64 -8 (pow.f64 x 4)) (*.f64 -64/3 (pow.f64 x 6))))))","(+.f64 (fma.f64 (log.f64 x) -3 (fma.f64 (*.f64 x x) -4 (fma.f64 (pow.f64 x 4) -8 (log.f64 1/8)))) (*.f64 -64/3 (pow.f64 x 6)))","(+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x)))","(log.f64 (/.f64 -1/2 x))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(+.f64 (log.f64 (/.f64 -1/2 x)) (/.f64 -1/4 (*.f64 x x)))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (log.f64 (/.f64 -1/2 x)) (fma.f64 1/32 (pow.f64 x -4) (/.f64 1/4 (*.f64 x x))))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/192 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))))","(-.f64 (log.f64 (/.f64 -1/2 x)) (fma.f64 (pow.f64 x -4) 1/32 (fma.f64 1/192 (pow.f64 x -6) (/.f64 1/4 (*.f64 x x)))))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2))","(log.f64 (/.f64 -1/2 x))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(+.f64 (log.f64 (/.f64 -1/2 x)) (/.f64 -1/4 (*.f64 x x)))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (log.f64 (/.f64 -1/2 x)) (fma.f64 1/32 (pow.f64 x -4) (/.f64 1/4 (*.f64 x x))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/192 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))))","(-.f64 (log.f64 (/.f64 -1/2 x)) (fma.f64 (pow.f64 x -4) 1/32 (fma.f64 1/192 (pow.f64 x -6) (/.f64 1/4 (*.f64 x x)))))","(/.f64 1/8 (pow.f64 x 3))","(pow.f64 (/.f64 1/2 x) 3)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))"]],"time":80.866943359375,"type":"simplify"},{"compiler":[[1113,897]],"time":17.282958984375,"type":"eval"},{"alts":[["(log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))","next",48.18076992661291],["(log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))","done",45.54171942793122],["(fma.f64 -1/6 (pow.f64 x 3) x)","done",31.350320188525853]],"compiler":[[10,8],[10,8],[7,5],[10,8]],"count":[[83,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[80,0],"picked":[1,1]}],"min-error":[0.00390625],"time":9.35009765625,"type":"prune"},{"compiler":[[35,25]],"locations":[["(cbrt.f64 (+.f64 x (hypot.f64 x -1)))",0.02734375,true],["(pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3)",0.17453007814753613,true],["(+.f64 x (hypot.f64 x -1))",0.5972800031692478,false],["(log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))",2.549269852243066,true]],"time":9.26708984375,"type":"localize"},{"count":[[3,12]],"series":[["(cbrt.f64 (+.f64 x (hypot.f64 x -1)))","x","-inf",0.25],["(cbrt.f64 (+.f64 x (hypot.f64 x -1)))","x","inf",0.26806640625],["(cbrt.f64 (+.f64 x (hypot.f64 x -1)))","x","0",0.18115234375],["(pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3)","x","-inf",0.718994140625],["(pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3)","x","inf",0.4990234375],["(pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3)","x","0",0.169189453125],["(log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))","x","-inf",1.26708984375],["(log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))","x","inf",1.69384765625],["(log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))","x","0",0.668212890625]],"time":5.849853515625,"type":"series"},{"count":[[3,70]],"inputs":[["(log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))","(pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3)","(cbrt.f64 (+.f64 x (hypot.f64 x -1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) (*.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 0) (log.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) (*.f64 0 (log.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log.f64 (+.f64 x (hypot.f64 x -1)))) (log.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))) (pow.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 2/3) (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 x -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 x (hypot.f64 x -1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 x -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (hypot.f64 x -1)) (*.f64 (+.f64 x (hypot.f64 x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (hypot.f64 x -1)) 0) (+.f64 x (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (hypot.f64 x -1)) (*.f64 0 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 x (hypot.f64 x -1))) (+.f64 x (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1)))) (pow.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 4/3) 2) (cbrt.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (hypot.f64 x -1) 2/3) (-.f64 (pow.f64 x 2/3) (cbrt.f64 (*.f64 x (hypot.f64 x -1))))) (+.f64 (cbrt.f64 (hypot.f64 x -1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (hypot.f64 x -1) 2/3) (cbrt.f64 (*.f64 x (hypot.f64 x -1))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) (pow.f64 (+.f64 x (hypot.f64 x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 2/3) (cbrt.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 7/3) (cbrt.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 2/3)) (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x (hypot.f64 x -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (hypot.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (hypot.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (hypot.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (hypot.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 x -1)) (pow.f64 (hypot.f64 x -1) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (hypot.f64 x -1) 2/3) (cbrt.f64 (hypot.f64 x -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (hypot.f64 x -1)) (sqrt.f64 (hypot.f64 x -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (hypot.f64 x -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 x -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (hypot.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 x -1) 1 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) (*.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 0) (cbrt.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) (*.f64 0 (cbrt.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (+.f64 x (hypot.f64 x -1)))) (cbrt.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1)))) (cbrt.f64 (pow.f64 (+.f64 x (hypot.f64 x -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (+.f64 x (hypot.f64 x -1)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (+.f64 x (hypot.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (hypot.f64 x -1)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (+.f64 x (hypot.f64 x -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (+.f64 x (hypot.f64 x -1)))))))"]],"rules":[["egg-rr",18],["egg-rr",35],["egg-rr",17]],"time":28.72412109375,"type":"rewrite"},{"count":[[82,89]],"inputs":[["x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) (+.f64 (*.f64 -5/112 (pow.f64 x 7)) x)))","1","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/8 (pow.f64 x 4)) x)))","1","(+.f64 1 (*.f64 1/3 x))","(+.f64 1 (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x)))","(+.f64 1 (+.f64 (*.f64 1/18 (pow.f64 x 2)) (+.f64 (*.f64 1/3 x) (*.f64 -4/81 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) x))","(fma.f64 (pow.f64 x 3) -1/6 (fma.f64 3/40 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) (+.f64 (*.f64 -5/112 (pow.f64 x 7)) x)))","(fma.f64 (pow.f64 x 3) -1/6 (fma.f64 3/40 (pow.f64 x 5) (fma.f64 -5/112 (pow.f64 x 7) x)))","1","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) x))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/8 (pow.f64 x 4)) x)))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) (fma.f64 -1/8 (pow.f64 x 4) x)))","1","(+.f64 1 (*.f64 1/3 x))","(fma.f64 1/3 x 1)","(+.f64 1 (+.f64 (*.f64 1/18 (pow.f64 x 2)) (*.f64 1/3 x)))","(+.f64 (fma.f64 1/3 x 1) (*.f64 1/18 (*.f64 x x)))","(+.f64 1 (+.f64 (*.f64 1/18 (pow.f64 x 2)) (+.f64 (*.f64 1/3 x) (*.f64 -4/81 (pow.f64 x 3)))))","(+.f64 1 (fma.f64 1/18 (*.f64 x x) (fma.f64 (pow.f64 x 3) -4/81 (*.f64 1/3 x))))"]],"time":45.12890625,"type":"simplify"},{"compiler":[[1859,1447]],"time":30.162109375,"type":"eval"},{"alts":[["(log.f64 (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1)))) (pow.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 4/3) 2)))","fresh",48.25108242585089],["(log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))","done",45.54171942793122],["(log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))","done",48.18076992661291],["(fma.f64 -1/6 (pow.f64 x 3) x)","done",31.350320188525853]],"compiler":[[20,16],[10,8],[10,8],[7,5]],"count":[[148,4]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[145,1],"picked":[1,1]}],"min-error":[0],"time":19.96484375,"type":"prune"},{"accuracy":[0.18524384291297372],"baseline":[31.350320188525853],"branch":[["x",0.18524384291297372,3],["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))",7.435243842912974,4],["(+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1)))",7.435243842912974,4]],"compiler":[[2,1],[10,7],[9,6],[59,44]],"count":[[6,3]],"inputs":[["(log.f64 (*.f64 (cbrt.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1)))) (pow.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 4/3) 2)))","(log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))","(log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))","(fma.f64 -1/6 (pow.f64 x 3) x)","(log.f64 (+.f64 x (hypot.f64 x -1)))","(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))"]],"link":["."],"name":["Hyperbolic arcsine"],"oracle":[63.7157124495922],"outputs":[["(log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))","(fma.f64 -1/6 (pow.f64 x 3) x)","(log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))"]],"time":23.73095703125,"times":[["x",9.713134765625],["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))",6.346923828125],["(+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1)))",6.155029296875]],"type":"regimes"},{"bstep":[[4.397566801236614e-7,5.729204056266653e+21,10.27392578125],[-10640.765013896878,-0.8275226452988966,10.451904296875]],"compiler":[[12,9],[2,1]],"method":["binary-search","binary-search"],"time":20.8251953125,"type":"bsearch"},{"compiler":[[33,25]],"inputs":[["(if (<=.f64 x -2924911215302917/274877906944) (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) (if (<=.f64 x 4153384413668013/9444732965739290427392) (fma.f64 -1/6 (pow.f64 x 3) x) (log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x -2924911215302917/274877906944) (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) (if (<=.f64 x 4153384413668013/9444732965739290427392) (fma.f64 -1/6 (pow.f64 x 3) x) (log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 x -1))) 3))))","(if (<=.f64 x -2924911215302917/274877906944) (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) (if (<=.f64 x 4153384413668013/9444732965739290427392) (fma.f64 -1/6 (pow.f64 x 3) x) (log.f64 (+.f64 x (hypot.f64 x -1)))))"]],"stop":[["fuel",1]],"time":21.77880859375,"type":"simplify"},{"time":0.027099609375,"type":"soundness"},{"compiler":[[33,25]],"remove-preprocessing":[[]],"time":16.506103515625,"type":"end"}]
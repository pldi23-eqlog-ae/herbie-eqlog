[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.640869140625,"type":"analyze"},{"outcomes":[["body",256,"valid",257.302978515625,8256]],"time":264.822998046875,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0","1"],["(-.f64 x (/.f64 y 200))","(-.f64 y (/.f64 x 200))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 x (/.f64 y 200))","(fma.f64 y -1/200 x)","(-.f64 y (/.f64 x 200))","(fma.f64 x -1/200 y)"]],"symmetry":[[]],"time":58.815185546875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 x (/.f64 y 200))"]],"method":["egg-herbie"],"outputs":[["(-.f64 x (/.f64 y 200))","(fma.f64 y -1/200 x)"]],"time":18.227783203125,"type":"simplify"},{"compiler":[[11,7]],"time":0.32421875,"type":"eval"},{"alts":[["(-.f64 x (/.f64 y 200))","next",0.01171875],["(fma.f64 y -1/200 x)","fresh",0.08984375]],"compiler":[[7,5],[6,4],[7,5],[6,4]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0],"time":2.23583984375,"type":"prune"},{"compiler":[[13,8]],"locations":[["(-.f64 x (/.f64 y 200))",0.01171875,true]],"time":3.134033203125,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 x (/.f64 y 200))","y","-inf",0.194091796875],["(-.f64 x (/.f64 y 200))","y","inf",0.33984375],["(-.f64 x (/.f64 y 200))","y","0",0.215087890625],["(-.f64 x (/.f64 y 200))","x","-inf",0.175048828125],["(-.f64 x (/.f64 y 200))","x","inf",0.29296875],["(-.f64 x (/.f64 y 200))","x","0",0.322998046875]],"time":1.612060546875,"type":"series"},{"count":[[1,46]],"inputs":[["(-.f64 x (/.f64 y 200))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y -1/200))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y -1/200) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y -1/200 x) (*.f64 (fma.f64 y -1/200 x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y -1/200 x) 0) (fma.f64 y -1/200 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y -1/200 x) (*.f64 0 (fma.f64 y -1/200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y -1/200 x)) (fma.f64 y -1/200 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y -1/200 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 y 1/200 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y -1/200) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 y 1/200))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x 0) (*.f64 y 1/200))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 y 1/200 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y 1/200 (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 x) (*.f64 y -1/200)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (fma.f64 y 1/200 (neg.f64 x)))) (cbrt.f64 (pow.f64 (fma.f64 y -1/200 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 (*.f64 1/40000 (*.f64 y y))) (cbrt.f64 (*.f64 (*.f64 x y) 1/200)))) (-.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y 1/200))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y -1/200 x)) (cbrt.f64 (pow.f64 (fma.f64 y -1/200 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y -1/200 x) 2)) (cbrt.f64 (fma.f64 y -1/200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y -1/200 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y -1/200 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y 1/200 (neg.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 y -1/200 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y -1/200 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y -1/200 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y -1/200 x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y -1/200 x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y -1/200 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y -1/200 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 y 1/200 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 y 1/200 (neg.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y -1/200 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 y -1/200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y -1/200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 y -1/200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y -1/200)) (cbrt.f64 (*.f64 1/40000 (*.f64 y y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y 1/200)) (neg.f64 (cbrt.f64 (*.f64 1/40000 (*.f64 y y)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) 1/200 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -1/200 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 y -1/200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 y -1/200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 y -1/200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y -1/200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y -1/200))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 y 1/200) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y -1/200) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 y -1/200 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 y -1/200 x))))))"]],"rules":[["egg-rr",46]],"time":19.81103515625,"type":"rewrite"},{"count":[[70,50]],"inputs":[["(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)"]],"time":106.305908203125,"type":"simplify"},{"compiler":[[402,257]],"time":7.43408203125,"type":"eval"},{"alts":[["(-.f64 x (/.f64 y 200))","done",0.01171875],["(fma.f64 -1/200 y x)","next",0.08984375]],"compiler":[[7,5],[6,4],[6,4]],"count":[[52,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[50,1],"picked":[1,1]}],"min-error":[0],"time":8.35888671875,"type":"prune"},{"compiler":[[9,5]],"locations":[["(fma.f64 -1/200 y x)",0.08984375,true]],"time":2.291015625,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 -1/200 y x)","x","-inf",0.219970703125],["(fma.f64 -1/200 y x)","x","inf",0.15380859375],["(fma.f64 -1/200 y x)","x","0",0.3359375],["(fma.f64 -1/200 y x)","y","-inf",0.294921875],["(fma.f64 -1/200 y x)","y","inf",0.22314453125],["(fma.f64 -1/200 y x)","y","0",0.22607421875]],"time":1.52001953125,"type":"series"},{"count":[[1,38]],"inputs":[["(fma.f64 -1/200 y x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/200 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 -1/200 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 -1/200 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 -1/200 y x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 1/200 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -1/200 y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 1/200 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 -1/200 y x))) (pow.f64 (pow.f64 (fma.f64 -1/200 y x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/200 y x) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 -1/200 y x)) 4)) (cbrt.f64 (fma.f64 -1/200 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/200 y x)) (pow.f64 (fma.f64 -1/200 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 -1/200 y x) 2/3) (cbrt.f64 (fma.f64 -1/200 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 1/200 y) x)) (neg.f64 (pow.f64 (fma.f64 -1/200 y x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 -1/200 y) 2/3) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 -1/200 y)) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 -1/200 y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (*.f64 -1/200 y) 2/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 -1/200 y))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 -1/200 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 1/200 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 1/200 y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/200 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/200 y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 -1/200 y x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/200 y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 1/200 y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/200 y x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/200 y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/200 y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 1/200 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/200 y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/200 y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/8000000 y)) (pow.f64 y 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/200 y)) (pow.f64 (*.f64 -1/200 y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/200) (*.f64 (cbrt.f64 1/40000) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -1/200 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 -1/200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 -1/200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 -1/200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -1/200 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 -1/200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 -1/200 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/200 y) 1 x)))))"]],"rules":[["egg-rr",38]],"time":34.501953125,"type":"rewrite"},{"count":[[62,40]],"inputs":[["x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","x","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)","(+.f64 (*.f64 -1/200 y) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(*.f64 -1/200 y)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","x","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)","(+.f64 (*.f64 -1/200 y) x)","(fma.f64 -1/200 y x)"]],"time":106.673095703125,"type":"simplify"},{"compiler":[[337,229]],"time":6.320068359375,"type":"eval"},{"alts":[["(-.f64 x (/.f64 y 200))","done",0.01171875],["(fma.f64 -1/200 y x)","done",0.08984375]],"compiler":[[7,5],[6,4]],"count":[[42,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[40,0],"picked":[1,1]}],"min-error":[0],"time":5.385986328125,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["y",0.01171875,1],["(-.f64 x (/.f64 y 200))",0.01171875,1],["(/.f64 y 200)",0.01171875,1]],"compiler":[[3,2],[3,2],[7,5],[5,4],[15,9]],"count":[[3,1]],"inputs":[["(fma.f64 -1/200 y x)","(fma.f64 y -1/200 x)","(-.f64 x (/.f64 y 200))"]],"link":["."],"name":["Data.Colour.CIE:cieLAB from colour-2.3.3, D"],"oracle":[0.1015625],"outputs":[["(-.f64 x (/.f64 y 200))"]],"time":11.829833984375,"times":[["x",2.735107421875],["y",2.697021484375],["(-.f64 x (/.f64 y 200))",2.822998046875],["(/.f64 y 200)",2.926025390625]],"type":"regimes"},{"compiler":[[7,5]],"inputs":[["(-.f64 x (/.f64 y 200))"]],"method":["egg-herbie"],"outputs":[["(-.f64 x (/.f64 y 200))","(fma.f64 y -1/200 x)"]],"stop":[["done",1]],"time":18.343017578125,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.427978515625,"type":"end"}]
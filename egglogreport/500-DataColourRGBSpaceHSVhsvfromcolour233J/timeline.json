[{"compiler":[[13,10]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4232075861161775,0.10872872417007784],[11,0.41345625924714113,0.5031684664422755,0.08337527431058334],[10,0.34324670579007943,0.5772785506469518,0.0794747435629688],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":85.7509765625,"type":"analyze"},{"outcomes":[["body",256,"invalid",44.340576171875,1066],["body",256,"valid",338.697509765625,8256]],"time":391.762939453125,"type":"sample"},{"compiler":[[12,9]],"inputs":[["0","1","2"],["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))","(*.f64 y (-.f64 1 (*.f64 (-.f64 1 x) z)))","(*.f64 z (-.f64 1 (*.f64 (-.f64 1 y) x)))","(*.f64 x (-.f64 1 (*.f64 (-.f64 1 z) y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))","(+.f64 x (*.f64 x (*.f64 (+.f64 -1 y) z)))","(*.f64 y (-.f64 1 (*.f64 (-.f64 1 x) z)))","(+.f64 y (*.f64 y (*.f64 (+.f64 -1 x) z)))","(*.f64 z (-.f64 1 (*.f64 (-.f64 1 y) x)))","(+.f64 z (*.f64 z (*.f64 (+.f64 -1 y) x)))","(*.f64 x (-.f64 1 (*.f64 (-.f64 1 z) y)))","(+.f64 x (*.f64 x (*.f64 (+.f64 -1 z) y)))"]],"symmetry":[[]],"time":73.651123046875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))","(*.f64 x (fma.f64 z (+.f64 -1 y) 1))"]],"time":18.434814453125,"type":"simplify"},{"compiler":[[20,14]],"time":0.43017578125,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","next",2.30859375]],"compiler":[[11,8],[11,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[2.30859375],"time":0.9169921875,"type":"prune"},{"compiler":[[25,16]],"locations":[["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))",2.1598381440984884,true]],"time":6.06689453125,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","y","-inf",0.64013671875],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","y","inf",0.406982421875],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","y","0",0.385009765625],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","z","-inf",0.376953125],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","z","inf",0.386962890625],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","z","0",0.528076171875],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","x","-inf",0.35205078125],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","x","inf",0.447021484375],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","x","0",0.6201171875]],"time":4.2890625,"type":"series"},{"count":[[1,33]],"inputs":[["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x) 0) (fma.f64 x (*.f64 z (+.f64 -1 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x) (*.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (*.f64 z (+.f64 -1 y))) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 z (+.f64 -1 y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (*.f64 z (+.f64 -1 y)) x)) (fma.f64 x (*.f64 z (+.f64 -1 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x) (*.f64 0 (fma.f64 x (*.f64 z (+.f64 -1 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 x (*.f64 z (+.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 z (+.f64 -1 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (+.f64 -1 y) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (fma.f64 z (+.f64 -1 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (fma.f64 z (+.f64 -1 y) 1))) (pow.f64 (fma.f64 z (+.f64 -1 y) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (+.f64 -1 y) 1)) (*.f64 (pow.f64 (fma.f64 z (+.f64 -1 y) 1) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 z (+.f64 -1 y) 1) 2/3) x) (cbrt.f64 (fma.f64 z (+.f64 -1 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (fma.f64 z (+.f64 -1 y) 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z (+.f64 -1 y) 1) 2/3) (*.f64 x (cbrt.f64 (fma.f64 z (+.f64 -1 y) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x)) (pow.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x) 2/3) (cbrt.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 z (+.f64 -1 y) 1) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (fma.f64 z (+.f64 -1 y) 1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (*.f64 z (+.f64 -1 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 (*.f64 z (+.f64 -1 y)) 3) 1)) (-.f64 (+.f64 (pow.f64 (*.f64 z (+.f64 -1 y)) 2) 1) (*.f64 z (+.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 z (+.f64 -1 y)) 3) 1) x) (-.f64 (+.f64 (pow.f64 (*.f64 z (+.f64 -1 y)) 2) 1) (*.f64 z (+.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (*.f64 z (+.f64 -1 y)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 z (+.f64 -1 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (+.f64 -1 y)) x x)))))"]],"rules":[["egg-rr",33]],"time":22.1689453125,"type":"rewrite"},{"count":[[69,43]],"inputs":[["(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","x","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(*.f64 z (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(*.f64 z (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","x","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 z (*.f64 (-.f64 y 1) x))","(*.f64 z (*.f64 (+.f64 y -1) x))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 z (*.f64 (-.f64 y 1) x))","(*.f64 z (*.f64 (+.f64 y -1) x))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(fma.f64 z (*.f64 (+.f64 y -1) x) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(fma.f64 z (*.f64 (+.f64 y -1) x) x)"]],"time":123.208984375,"type":"simplify"},{"compiler":[[535,336]],"time":7.81298828125,"type":"eval"},{"alts":[["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","fresh",2.83984375],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","done",2.30859375],["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","next",1.6698810405828044]],"compiler":[[12,8],[11,8],[16,11],[12,8],[16,11]],"count":[[44,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[43,2],"picked":[1,1]}],"min-error":[0.01953125],"time":7.759033203125,"type":"prune"},{"compiler":[[44,24]],"locations":[["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))",0.015625,true],["(*.f64 (+.f64 (*.f64 -1 z) 1) x)",0.01953125,true],["(*.f64 y (*.f64 z x))",4.849409481638939,true]],"time":9.291015625,"type":"localize"},{"count":[[3,39]],"series":[["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","y","-inf",0.199951171875],["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","y","inf",0.17578125],["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","y","0",0.26513671875],["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","x","-inf",0.201171875],["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","x","inf",0.511962890625],["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","x","0",0.2109375],["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","z","-inf",0.19189453125],["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","z","inf",0.2119140625],["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","z","0",0.180908203125],["(*.f64 (+.f64 (*.f64 -1 z) 1) x)","x","-inf",0.30810546875],["(*.f64 (+.f64 (*.f64 -1 z) 1) x)","x","inf",0.3310546875],["(*.f64 (+.f64 (*.f64 -1 z) 1) x)","x","0",0.3740234375],["(*.f64 (+.f64 (*.f64 -1 z) 1) x)","z","-inf",0.22900390625],["(*.f64 (+.f64 (*.f64 -1 z) 1) x)","z","inf",0.25],["(*.f64 (+.f64 (*.f64 -1 z) 1) x)","z","0",0.993896484375],["(*.f64 y (*.f64 z x))","x","-inf",0.286865234375],["(*.f64 y (*.f64 z x))","x","inf",0.43994140625],["(*.f64 y (*.f64 z x))","x","0",0.406982421875],["(*.f64 y (*.f64 z x))","z","-inf",0.31591796875],["(*.f64 y (*.f64 z x))","z","inf",0.4169921875],["(*.f64 y (*.f64 z x))","z","0",0.416015625],["(*.f64 y (*.f64 z x))","y","-inf",0.2470703125],["(*.f64 y (*.f64 z x))","y","inf",0.3349609375],["(*.f64 y (*.f64 z x))","y","0",0.46484375]],"time":8.23388671875,"type":"series"},{"count":[[3,140]],"inputs":[["(*.f64 y (*.f64 z x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) z) (*.f64 (*.f64 (*.f64 y x) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 y x) z) 0) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) z) (*.f64 0 (*.f64 (*.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 y x) z)) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 y z) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 z x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) y) (cbrt.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y x) z)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 y x) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 y x) z) 2)) (cbrt.f64 (*.f64 (*.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 z x))) (cbrt.f64 (pow.f64 (*.f64 z x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (*.f64 z x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 y x) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) (*.f64 y (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 y x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y x) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y x) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 y x) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) x) (*.f64 (*.f64 (-.f64 1 z) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 z) x) 0) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) x) (*.f64 0 (*.f64 (-.f64 1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 z) x)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (-.f64 1 z))) (cbrt.f64 (pow.f64 (-.f64 1 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 z)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 z -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 z -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) x) (cbrt.f64 (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (*.f64 x (cbrt.f64 (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 1 z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (-.f64 1 z) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (/.f64 (-.f64 1 (pow.f64 z 3)) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) 1) (/.f64 x (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (/.f64 x (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 2)) (cbrt.f64 (*.f64 (-.f64 1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (/.f64 1 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 z 3) -1)) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 z 3) -1) x) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 z 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) x)) (cbrt.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) 1) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) 1) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 1 (pow.f64 z 3)))) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 z -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 z x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) x) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) z) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (*.f64 y x) z) (neg.f64 (*.f64 z x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (*.f64 y x) z) x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (+.f64 (neg.f64 (*.f64 z x)) (*.f64 (*.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z x)) (+.f64 x (*.f64 (*.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 z y (-.f64 1 z))) (*.f64 (*.f64 x (fma.f64 z y (-.f64 1 z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (fma.f64 z y (-.f64 1 z))) 0) (*.f64 x (fma.f64 z y (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 z y (-.f64 1 z))) (*.f64 0 (*.f64 x (fma.f64 z y (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (fma.f64 z y (-.f64 1 z)))) (*.f64 x (fma.f64 z y (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (fma.f64 z y (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 z y (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z y (-.f64 1 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (fma.f64 z y (-.f64 1 z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 (*.f64 y z) (cbrt.f64 x)) (*.f64 (-.f64 1 z) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 (-.f64 1 z) (cbrt.f64 x)) (*.f64 (*.f64 y z) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (fma.f64 z y (-.f64 1 z)))) (cbrt.f64 (pow.f64 (*.f64 x (fma.f64 z y (-.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 y x) z) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 2)) (cbrt.f64 (*.f64 (*.f64 (*.f64 (-.f64 1 z) x) y) (*.f64 z x))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 y x) z)) (cbrt.f64 (*.f64 (-.f64 1 z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 y x) z) 2)) (cbrt.f64 (*.f64 (*.f64 (*.f64 (-.f64 1 z) x) y) (*.f64 z x))))) (+.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) (cbrt.f64 (*.f64 (*.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (fma.f64 z y (-.f64 1 z))) 2)) (cbrt.f64 (*.f64 x (fma.f64 z y (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (fma.f64 z y (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (fma.f64 z y (-.f64 1 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 z y (-.f64 1 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 z y (-.f64 1 z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 z y (-.f64 1 z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 z y (-.f64 1 z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 z y (-.f64 1 z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (fma.f64 z y (-.f64 1 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (fma.f64 z y (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (fma.f64 z y (-.f64 1 z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) x (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 1 z) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 2)) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) y (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) x (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y x) z)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 y x) z) 2)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (+.f64 z -1) x) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 z)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) x) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (-.f64 1 z))) (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (-.f64 1 z)) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 2)) (cbrt.f64 (*.f64 (-.f64 1 z) x)) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 y x) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 y z) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 y x) z) 2)) (cbrt.f64 (*.f64 (*.f64 y x) z)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y z) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (*.f64 y x) z)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 z x)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) y) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 z x))) (cbrt.f64 (pow.f64 (*.f64 z x) 2)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) z (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 z) x) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 y x) z) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) x) 1 (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y x) z) 1 (*.f64 (-.f64 1 z) x))))))"]],"rules":[["egg-rr",57],["egg-rr",49],["egg-rr",34]],"time":31.119140625,"type":"rewrite"},{"count":[[179,153]],"inputs":[["x","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","x","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x)))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (+.f64 (*.f64 -1 z) 1))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (+.f64 (*.f64 -1 z) 1))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (+.f64 (*.f64 -1 z) 1))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (+.f64 (*.f64 -1 z) 1))) x))","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","x","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x)))","(*.f64 (*.f64 z x) (+.f64 y -1))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z))","(*.f64 (*.f64 z x) (+.f64 y -1))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 (+.f64 (*.f64 -1 z) (+.f64 (*.f64 y z) 1)) x)","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (+.f64 (*.f64 -1 z) 1))) x))","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (+.f64 (*.f64 -1 z) 1))) x))","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (+.f64 (*.f64 -1 z) 1))) x))","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (+.f64 (*.f64 -1 z) 1))) x))","(fma.f64 (*.f64 x (+.f64 y -1)) z x)","(*.f64 (+.f64 (*.f64 -1 z) 1) x)","(*.f64 (-.f64 1 z) x)","(*.f64 y (*.f64 z x))","(*.f64 y (*.f64 z x))"]],"time":140.905029296875,"type":"simplify"},{"compiler":[[2436,1148]],"time":25.45703125,"type":"eval"},{"alts":[["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 (cbrt.f64 (*.f64 z x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) y)))","fresh",11.699549775665092],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","done",2.30859375],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","fresh",2.83984375],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","next",1.6698810405828044]],"compiler":[[24,16],[11,8],[12,8],[13,8],[24,16],[12,8],[13,8]],"count":[[156,4]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[153,2],"picked":[1,0]}],"min-error":[0.0078125],"time":46.870849609375,"type":"prune"},{"compiler":[[28,14]],"locations":[["(*.f64 (-.f64 1 z) x)",0.01953125,true],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))",1.6542560405828044,true]],"time":6.51416015625,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (-.f64 1 z) x)","x","-inf",0.14599609375],["(*.f64 (-.f64 1 z) x)","x","inf",0.166015625],["(*.f64 (-.f64 1 z) x)","x","0",0.13916015625],["(*.f64 (-.f64 1 z) x)","z","-inf",0.170166015625],["(*.f64 (-.f64 1 z) x)","z","inf",0.14501953125],["(*.f64 (-.f64 1 z) x)","z","0",0.144775390625],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","x","-inf",0.48388671875],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","x","inf",0.41796875],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","x","0",0.346923828125],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","z","-inf",0.31298828125],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","z","inf",0.304931640625],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","z","0",0.237060546875],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","y","-inf",0.273193359375],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","y","inf",0.257080078125],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","y","0",0.31591796875]],"time":4.02587890625,"type":"series"},{"count":[[2,93]],"inputs":[["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","(*.f64 (-.f64 1 z) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (+.f64 (neg.f64 (*.f64 z x)) (*.f64 (*.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))) (*.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))) 0) (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))) (*.f64 0 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z)))) (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) z) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) x) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (*.f64 y x) z) x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 y x) z) (*.f64 (+.f64 z -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z)))) (pow.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))) 2/3) (cbrt.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (*.f64 y z) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 (-.f64 1 z) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 (*.f64 y z) (-.f64 1 z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 1 z) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (-.f64 1 z))) (pow.f64 (-.f64 1 z) 2/3) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) (pow.f64 (*.f64 (-.f64 1 z) x) 2/3) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) x (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 z)) (*.f64 (pow.f64 (-.f64 1 z) 2/3) x) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 1 z)) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 2/3) (cbrt.f64 (*.f64 (-.f64 1 z) x)) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 z x)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) x (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y x) z)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 y x) z) 2)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 z x))) (pow.f64 (*.f64 z x) 2/3) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) y (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) z (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (+.f64 z -1) x) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 z) x) (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 z) x) 1 (*.f64 (*.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 y x) z) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y x) z) 1 (*.f64 (-.f64 1 z) x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) x) (*.f64 (*.f64 (-.f64 1 z) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 z) x) 0) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 (*.f64 z x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 z) x) (*.f64 0 (*.f64 (-.f64 1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 z) x)) (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 z -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 z)) (*.f64 (pow.f64 (-.f64 1 z) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 z) 2/3) x) (cbrt.f64 (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (-.f64 1 z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (/.f64 (-.f64 1 (pow.f64 z 3)) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) 1) (/.f64 x (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (/.f64 x (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) (pow.f64 (*.f64 (-.f64 1 z) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 2/3) (cbrt.f64 (*.f64 (-.f64 1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (-.f64 1 z))) (pow.f64 (-.f64 1 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 z) 2/3) (*.f64 x (cbrt.f64 (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (-.f64 1 z) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (+.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (/.f64 1 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 z -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 z -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (cbrt.f64 (fma.f64 z z (+.f64 1 z)))) (pow.f64 (cbrt.f64 (fma.f64 z z (+.f64 1 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) 1) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 z 3))) 1) (fma.f64 z z (+.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -1 (pow.f64 z 3))) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 z 3)) x) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 z 3))) (*.f64 (pow.f64 (-.f64 1 z) 2/3) x)) (cbrt.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 1 (pow.f64 z 3)))) (neg.f64 (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 z -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 z -1) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 z x)))))))"]],"rules":[["egg-rr",50],["egg-rr",43]],"time":26.544921875,"type":"rewrite"},{"count":[[141,107]],"inputs":[["(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","x","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x)))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (-.f64 1 z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (-.f64 1 z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (-.f64 1 z))) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (-.f64 1 z))) x))","x","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 (-.f64 1 z) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","x","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x)))","(*.f64 (*.f64 z x) (+.f64 y -1))","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 z (+.f64 (*.f64 y x) (*.f64 -1 x))) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z))","(*.f64 (*.f64 z x) (+.f64 y -1))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 (-.f64 (+.f64 (*.f64 y z) 1) z) x)","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (-.f64 1 z))) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (-.f64 1 z))) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (-.f64 1 z))) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 -1 (-.f64 1 z))) x))","(fma.f64 z (*.f64 x (+.f64 y -1)) x)","x","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 (-.f64 1 z) x)"]],"time":173.39013671875,"type":"simplify"},{"compiler":[[1533,754]],"time":18.386962890625,"type":"eval"},{"alts":[["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 (cbrt.f64 (*.f64 z x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) y)))","fresh",11.699549775665092],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","done",2.30859375],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","next",2.83984375],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","done",1.6698810405828044]],"compiler":[[24,16],[11,8],[12,8],[13,8],[24,16],[12,8]],"count":[[111,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[107,0],"picked":[1,1]}],"min-error":[0.0078125],"time":27.85205078125,"type":"prune"},{"compiler":[[31,18]],"locations":[["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)",0.01171875,true],["(*.f64 (-.f64 y 1) x)",0.015625,true],["(*.f64 z (*.f64 (-.f64 y 1) x))",2.701757259022755,true]],"time":7.469970703125,"type":"localize"},{"count":[[3,51]],"series":[["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","x","-inf",0.193115234375],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","x","inf",0.1728515625],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","x","0",0.18603515625],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","y","-inf",0.171142578125],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","y","inf",0.266845703125],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","y","0",0.178955078125],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","z","-inf",0.216064453125],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","z","inf",0.173095703125],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","z","0",0.16796875],["(*.f64 (-.f64 y 1) x)","x","-inf",0.27001953125],["(*.f64 (-.f64 y 1) x)","x","inf",0.31494140625],["(*.f64 (-.f64 y 1) x)","x","0",0.14208984375],["(*.f64 (-.f64 y 1) x)","y","-inf",0.2890625],["(*.f64 (-.f64 y 1) x)","y","inf",0.199951171875],["(*.f64 (-.f64 y 1) x)","y","0",0.157958984375],["(*.f64 z (*.f64 (-.f64 y 1) x))","x","-inf",0.369873046875],["(*.f64 z (*.f64 (-.f64 y 1) x))","x","inf",0.364013671875],["(*.f64 z (*.f64 (-.f64 y 1) x))","x","0",0.467041015625],["(*.f64 z (*.f64 (-.f64 y 1) x))","y","-inf",0.29296875],["(*.f64 z (*.f64 (-.f64 y 1) x))","y","inf",0.26220703125],["(*.f64 z (*.f64 (-.f64 y 1) x))","y","0",0.30908203125],["(*.f64 z (*.f64 (-.f64 y 1) x))","z","-inf",0.258056640625],["(*.f64 z (*.f64 (-.f64 y 1) x))","z","inf",0.35302734375],["(*.f64 z (*.f64 (-.f64 y 1) x))","z","0",0.56787109375]],"time":6.636962890625,"type":"series"},{"count":[[3,146]],"inputs":[["(*.f64 z (*.f64 (-.f64 y 1) x))","(*.f64 (-.f64 y 1) x)","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z x) -1) (*.f64 (*.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z x) y) (*.f64 (*.f64 z x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) (*.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 0) (*.f64 (*.f64 z (+.f64 y -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (*.f64 x y)) (*.f64 z (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 z y)) (*.f64 x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (*.f64 z x)) (*.f64 y (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) (*.f64 0 (*.f64 (*.f64 z (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 z (+.f64 y -1)) x)) (*.f64 (*.f64 z (+.f64 y -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) z) (*.f64 (neg.f64 x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z y) x) (*.f64 (neg.f64 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y -1) x) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z x) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y -1) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y -1) x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 2)) z) (cbrt.f64 (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (+.f64 y -1) x)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 z (+.f64 y -1)) x)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 2)) (cbrt.f64 (*.f64 (*.f64 z (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (+.f64 y -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 z (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (+.f64 y -1) x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 (*.f64 (+.f64 y -1) x))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z (+.f64 y -1)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (*.f64 (-.f64 1 y) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 z (+.f64 y -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 2)) (*.f64 z (cbrt.f64 (*.f64 (+.f64 y -1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 y) x) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 z (+.f64 y -1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (*.f64 (+.f64 y -1) x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z x) (-.f64 1 (pow.f64 y 3))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 z x)) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z x) (+.f64 (pow.f64 y 3) -1)) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 y 3) -1) (*.f64 z x)) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 z (+.f64 (pow.f64 y 3) -1))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (*.f64 x (+.f64 (pow.f64 y 3) -1))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (+.f64 (pow.f64 y 3) -1)) x) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 (pow.f64 y 3) -1)) z) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 z (+.f64 y -1)) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 z (+.f64 y -1)) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 z (+.f64 y -1)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 1 y) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y -1) x) (*.f64 (*.f64 (+.f64 y -1) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 y -1) x) 0) (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y -1) x) (*.f64 0 (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 y -1) x)) (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y -1) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y -1) 2)) x) (cbrt.f64 (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y -1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 y 3) -1) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (/.f64 x (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 y 3) -1) 1) (/.f64 x (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (/.f64 (+.f64 (pow.f64 y 3) -1) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y -1) x)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 2)) (cbrt.f64 (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (+.f64 y -1))) (cbrt.f64 (pow.f64 (+.f64 y -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y -1) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y -1) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (+.f64 y -1) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y -1) 2)) (*.f64 x (cbrt.f64 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 (pow.f64 y 3) -1)) (/.f64 1 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 y -1) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 y 3) -1)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y -1) 2)) x)) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) x) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 y 3) -1))) (neg.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 y 3) -1)) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 (pow.f64 y 3) -1)) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 (pow.f64 y 3) -1)) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 (pow.f64 y 3) -1)) 1) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y -1) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y -1) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 y -1) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y -1) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 1 y) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (neg.f64 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x) (*.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x) 0) (fma.f64 z (*.f64 (+.f64 y -1) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x) (*.f64 0 (fma.f64 z (*.f64 (+.f64 y -1) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 z (*.f64 (+.f64 y -1) x) x)) (fma.f64 z (*.f64 (+.f64 y -1) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (*.f64 z (+.f64 y -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x)) (cbrt.f64 (pow.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 2)) (cbrt.f64 (*.f64 (*.f64 x x) (*.f64 z (+.f64 y -1)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 z (+.f64 y -1)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 2)) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 (*.f64 x x) (*.f64 z (+.f64 y -1)))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 z (+.f64 y -1)) x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x) 2)) (cbrt.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 (+.f64 y -1) z 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 y -1) z 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (*.f64 (+.f64 y -1) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 (*.f64 z (+.f64 y -1)) (cbrt.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 x) (*.f64 (*.f64 z (+.f64 y -1)) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (*.f64 (+.f64 y -1) x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 (+.f64 y -1) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 z (+.f64 y -1)) x)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y -1) x) z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (+.f64 y -1)) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 z (+.f64 y -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 (*.f64 z (+.f64 y -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (*.f64 z (+.f64 y -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 y -1) x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 2)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 (*.f64 (+.f64 y -1) x))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y -1) (*.f64 z x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z x) (+.f64 y -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (*.f64 (-.f64 1 y) x) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z (+.f64 y -1)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 2)) (cbrt.f64 (*.f64 (*.f64 z (+.f64 y -1)) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (+.f64 y -1) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 z (+.f64 y -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (+.f64 y -1) x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 z (+.f64 y -1)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (*.f64 z (+.f64 y -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (*.f64 z (+.f64 y -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 z (+.f64 y -1)) x) 1 x)))))"]],"rules":[["egg-rr",47],["egg-rr",49],["egg-rr",50]],"time":31.10107421875,"type":"rewrite"},{"count":[[197,160]],"inputs":[["(*.f64 -1 (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 -1 x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","x","(*.f64 z (*.f64 (-.f64 y 1) x))","(*.f64 z (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 z (-.f64 y 1))) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 z (-.f64 y 1))) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 z (-.f64 y 1))) 1) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 z (-.f64 y 1))) 1) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 z x))","(neg.f64 (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 (*.f64 z (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 (*.f64 z (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 (*.f64 z (+.f64 y -1)) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 (*.f64 z (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 (*.f64 z (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 (*.f64 z (+.f64 y -1)) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 (*.f64 z (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 (*.f64 z (+.f64 y -1)) x)","(+.f64 (*.f64 y (*.f64 z x)) (*.f64 -1 (*.f64 z x)))","(*.f64 (*.f64 z (+.f64 y -1)) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 x (+.f64 y -1))","x","(*.f64 z (*.f64 (-.f64 y 1) x))","(*.f64 (*.f64 z (+.f64 y -1)) x)","(*.f64 z (*.f64 (-.f64 y 1) x))","(*.f64 (*.f64 z (+.f64 y -1)) x)","(+.f64 (*.f64 -1 (*.f64 z x)) x)","(*.f64 x (-.f64 1 z))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 y (*.f64 z x))","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(+.f64 (*.f64 y (*.f64 z x)) (+.f64 (*.f64 -1 (*.f64 z x)) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 (+.f64 1 (*.f64 z (-.f64 y 1))) x)","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 z (-.f64 y 1))) 1) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 z (-.f64 y 1))) 1) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 z (-.f64 y 1))) 1) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 (*.f64 z (-.f64 y 1))) 1) x))","(fma.f64 (*.f64 z x) (+.f64 y -1) x)"]],"time":175.406005859375,"type":"simplify"},{"compiler":[[2237,1292]],"time":30.829833984375,"type":"eval"},{"alts":[["(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 (cbrt.f64 (*.f64 z x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) y)))","fresh",11.699549775665092],["(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","done",2.30859375],["(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","done",2.83984375],["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","done",1.6698810405828044],["(+.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 y -1) x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 2)) z)) x)","fresh",24.095011504168404]],"compiler":[[24,16],[11,8],[12,8],[13,8],[22,16]],"count":[[164,5]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[160,1],"picked":[1,1]}],"min-error":[0.00390625],"time":49.359130859375,"type":"prune"},{"accuracy":[0.05078125],"baseline":[1.6698810405828044],"branch":[["x",0.08203125,3],["y",1.6698810405828042,1],["z",1.6698810405828042,1],["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))",0.05078125,3],["(-.f64 1 (*.f64 (-.f64 1 y) z))",0.0625,3],["(*.f64 (-.f64 1 y) z)",1.6698810405828044,1],["(-.f64 1 y)",1.6698810405828042,1]],"compiler":[[4,3],[4,3],[4,3],[12,9],[10,8],[8,6],[6,5],[92,56]],"count":[[7,3]],"inputs":[["(+.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 y -1) x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 y -1) x) 2)) z)) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 (cbrt.f64 (*.f64 z x)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) 2)) y)))","(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 z (*.f64 (-.f64 y 1) x)) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 z) 1) x) (*.f64 y (*.f64 z x)))","(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))"]],"link":["."],"name":["Data.Colour.RGBSpace.HSV:hsv from colour-2.3.3, J"],"oracle":[33.4413778501374],"outputs":[["(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))","(*.f64 x (fma.f64 z (+.f64 -1 y) 1))","(fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))"]],"time":45.050048828125,"times":[["x",10.4111328125],["y",3.77001953125],["z",3.822998046875],["(*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z)))",10.409912109375],["(-.f64 1 (*.f64 (-.f64 1 y) z))",7.7509765625],["(*.f64 (-.f64 1 y) z)",3.9169921875],["(-.f64 1 y)",2.941162109375]],"type":"regimes"},{"bstep":[[2.1602393264313232e+29,6.524851525115304e+31,0.031005859375],[-1.977871857975112e+229,-1.6622385389397687e+229,0.10693359375]],"compiler":[[6,5],[12,9]],"method":["left-value","left-value"],"time":0.259033203125,"type":"bsearch"},{"compiler":[[55,35]],"inputs":[["(if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) -17999999999999999314461582802746252500062804613811496631169018198064327999524679810813330292543678950807154573408473115906130657245352229341812917377383046783205296178854908804823059887060026123301467158254749413389077706862231552) (fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x)) (if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) 399999999999999965732603428864) (*.f64 x (fma.f64 z (+.f64 -1 y) 1)) (fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) -17999999999999999314461582802746252500062804613811496631169018198064327999524679810813330292543678950807154573408473115906130657245352229341812917377383046783205296178854908804823059887060026123301467158254749413389077706862231552) (fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x)) (if (<=.f64 (*.f64 x (-.f64 1 (*.f64 (-.f64 1 y) z))) 399999999999999965732603428864) (*.f64 x (fma.f64 z (+.f64 -1 y) 1)) (fma.f64 y (*.f64 z x) (*.f64 (-.f64 1 z) x))))","(if (<=.f64 (fma.f64 x (*.f64 (+.f64 -1 y) z) x) -17999999999999999314461582802746252500062804613811496631169018198064327999524679810813330292543678950807154573408473115906130657245352229341812917377383046783205296178854908804823059887060026123301467158254749413389077706862231552) (fma.f64 x (*.f64 (+.f64 -1 y) z) x) (if (<=.f64 (fma.f64 x (*.f64 (+.f64 -1 y) z) x) 399999999999999965732603428864) (fma.f64 x (*.f64 (+.f64 -1 y) z) x) (fma.f64 x (*.f64 (+.f64 -1 y) z) x)))"]],"stop":[["fuel",1]],"time":23.44091796875,"type":"simplify"},{"time":0.02099609375,"type":"soundness"},{"compiler":[[55,35]],"remove-preprocessing":[[]],"time":18.741943359375,"type":"end"}]
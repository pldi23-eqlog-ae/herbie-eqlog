[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.8770725436042994,0.12195113231427968,0.0009763240814208984],[11,0.8487798809073865,0.15024379501119256,0.0009763240814208984],[10,0.7609750656411052,0.23804861027747393,0.0009763240814208984],[9,0.7102433945983648,0.28878028132021427,0.0009763240814208984],[8,0.546341072767973,0.45268260315060616,0.0009763240814208984],[7,0.46829234808683395,0.5307313278317451,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":29.6259765625,"type":"analyze"},{"outcomes":[["body",256,"valid",281.6279296875,8256]],"time":289.25390625,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(/.f64 (+.f64 x y) (+.f64 y 1))","(/.f64 (+.f64 y x) (+.f64 x 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (+.f64 x y) (+.f64 y 1))","(/.f64 (+.f64 y x) (+.f64 x 1))","(/.f64 (+.f64 x y) (+.f64 x 1))"]],"symmetry":[[]],"time":58.76806640625,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(/.f64 (+.f64 x y) (+.f64 y 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x y) (+.f64 y 1))"]],"time":17.489013671875,"type":"simplify"},{"compiler":[[9,6]],"time":0.237060546875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) (+.f64 y 1))","next",0.0078125]],"compiler":[[9,6],[9,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.677001953125,"type":"prune"},{"compiler":[[18,9]],"locations":[["(/.f64 (+.f64 x y) (+.f64 y 1))",0.0078125,true]],"time":4.115966796875,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (+.f64 x y) (+.f64 y 1))","y","-inf",0.3701171875],["(/.f64 (+.f64 x y) (+.f64 y 1))","y","inf",0.351806640625],["(/.f64 (+.f64 x y) (+.f64 y 1))","y","0",0.31201171875],["(/.f64 (+.f64 x y) (+.f64 y 1))","x","-inf",0.4189453125],["(/.f64 (+.f64 x y) (+.f64 y 1))","x","inf",0.4580078125],["(/.f64 (+.f64 x y) (+.f64 y 1))","x","0",0.510009765625]],"time":2.509033203125,"type":"series"},{"count":[[1,70]],"inputs":[["(/.f64 (+.f64 x y) (+.f64 y 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 y 1)) x) (*.f64 (/.f64 1 (+.f64 y 1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 y 1)) y) (*.f64 (/.f64 1 (+.f64 y 1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 0) (/.f64 (+.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) (*.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 1 (+.f64 y 1))) (*.f64 y (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) (*.f64 x (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 x y) (+.f64 y 1))) (/.f64 (+.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) (*.f64 0 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 x y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 y)) (/.f64 (+.f64 x y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 x y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) (+.f64 (pow.f64 y 3) 1)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (pow.f64 y 3) 1)) (/.f64 (+.f64 x y) (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 (pow.f64 y 3) 1)) (/.f64 (neg.f64 (+.f64 x y)) (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 (pow.f64 y 3) 1)) (/.f64 (cbrt.f64 (+.f64 x y)) (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) -1) (/.f64 (cbrt.f64 (+.f64 x y)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) -1) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (-.f64 -1 y))) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 y)) (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 y 1)) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (+.f64 y 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) -1) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) (+.f64 y 1)) (cbrt.f64 (pow.f64 (+.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) -1) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 y 1)) -2) (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 y 1)) -2)) (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (cbrt.f64 (+.f64 y 1))) (/.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (/.f64 (cbrt.f64 (+.f64 x y)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (cbrt.f64 (+.f64 y 1))) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) 1) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) (/.f64 (+.f64 x y) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2)) (cbrt.f64 (+.f64 x y))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2)) (cbrt.f64 (neg.f64 (+.f64 x y)))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 y 1))) (+.f64 x y)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 x y) (-.f64 -1 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 3))))))"]],"rules":[["egg-rr",70]],"time":22.406982421875,"type":"rewrite"},{"count":[[94,92]],"inputs":[["(/.f64 y (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 x (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 x (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","x","(+.f64 (*.f64 y (-.f64 1 x)) x)","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x))","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x)))","1","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 x (pow.f64 y 2))))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3)))))","1","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 3))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 y (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","x","(+.f64 (*.f64 y (-.f64 1 x)) x)","(fma.f64 y (-.f64 1 x) x)","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x))","(fma.f64 y (-.f64 1 x) (fma.f64 (*.f64 y y) (+.f64 x -1) x))","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x)))","(+.f64 (*.f64 (-.f64 1 x) (+.f64 y (pow.f64 y 3))) (fma.f64 (*.f64 y y) (+.f64 x -1) x))","1","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(+.f64 1 (/.f64 (+.f64 x -1) y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 x (pow.f64 y 2))))","(-.f64 (+.f64 (+.f64 (pow.f64 y -2) 1) (/.f64 (+.f64 x -1) y)) (/.f64 x (*.f64 y y)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3)))))","(-.f64 (+.f64 (fma.f64 x (pow.f64 y -3) (pow.f64 y -2)) (+.f64 1 (/.f64 (+.f64 x -1) y))) (fma.f64 x (pow.f64 y -2) (pow.f64 y -3)))","1","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))","(+.f64 1 (/.f64 (+.f64 x -1) y))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))))","(-.f64 (+.f64 (+.f64 (pow.f64 y -2) 1) (/.f64 (+.f64 x -1) y)) (/.f64 x (*.f64 y y)))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 3))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y))))))","(+.f64 (+.f64 (pow.f64 y -2) (-.f64 1 (/.f64 x (*.f64 y y)))) (neg.f64 (*.f64 (-.f64 1 x) (+.f64 (pow.f64 y -3) (/.f64 1 y)))))"]],"time":80.205078125,"type":"simplify"},{"compiler":[[1409,880]],"time":17.544921875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) (+.f64 y 1))","done",0.0078125],["(/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))","next",14.406151894957398]],"compiler":[[9,6],[17,13],[17,13]],"count":[[93,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[92,1],"picked":[1,1]}],"min-error":[0],"time":18.093017578125,"type":"prune"},{"compiler":[[52,35]],"locations":[["(cbrt.f64 (+.f64 y 1))",0.05078125,true],["(/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))",0.08822250976844201,true],["(/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))",0.10546875,true],["(cbrt.f64 (pow.f64 (+.f64 y 1) 2))",14.077660463935986,true]],"time":13.60205078125,"type":"localize"},{"count":[[4,48]],"series":[["(cbrt.f64 (+.f64 y 1))","y","-inf",0.18603515625],["(cbrt.f64 (+.f64 y 1))","y","inf",0.18896484375],["(cbrt.f64 (+.f64 y 1))","y","0",0.216064453125],["(/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))","y","-inf",0.18798828125],["(/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))","y","inf",0.209228515625],["(/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))","y","0",0.162109375],["(/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))","x","-inf",0.19091796875],["(/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))","x","inf",0.166015625],["(/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))","x","0",0.171875],["(/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))","y","-inf",0.501220703125],["(/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))","y","inf",0.60986328125],["(/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))","y","0",0.296142578125],["(/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))","x","-inf",0.30322265625],["(/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))","x","inf",0.301025390625],["(/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))","x","0",1.669189453125],["(cbrt.f64 (pow.f64 (+.f64 y 1) 2))","y","-inf",0.305908203125],["(cbrt.f64 (pow.f64 (+.f64 y 1) 2))","y","inf",0.43896484375],["(cbrt.f64 (pow.f64 (+.f64 y 1) 2))","y","0",0.510986328125]],"time":6.887939453125,"type":"series"},{"count":[[4,210]],"inputs":[["(cbrt.f64 (pow.f64 (+.f64 y 1) 2))","(/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))","(/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))","(cbrt.f64 (+.f64 y 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (+.f64 y 1) 2/3) 0) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 y 1) 2/3) (*.f64 (pow.f64 (+.f64 y 1) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (+.f64 y 1) 2/3)) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (+.f64 y 1) 2/3) (*.f64 0 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (+.f64 y 1))) (cbrt.f64 (neg.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y 1)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y 1) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) (+.f64 2/3 1))) (cbrt.f64 (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (cbrt.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 4)) (pow.f64 (+.f64 y 1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (+.f64 y 1) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 y 1)) (cbrt.f64 (+.f64 (pow.f64 y 3) 1))) (cbrt.f64 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 y 3) 1)) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 (pow.f64 y 3) 1) 2)) (cbrt.f64 (pow.f64 (fma.f64 y y (-.f64 1 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (+.f64 y 1) (+.f64 (pow.f64 y 3) 1))) (cbrt.f64 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 y 1) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 y 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y 1) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y 1) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) x) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 0) (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (*.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (*.f64 y (cbrt.f64 (pow.f64 (+.f64 y 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (*.f64 x (cbrt.f64 (pow.f64 (+.f64 y 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))) (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (*.f64 0 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 (+.f64 y 1) 2/3))) (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))) (pow.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 2/3) (cbrt.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) -2) (/.f64 (+.f64 x y) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))) (neg.f64 (pow.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) -2) (+.f64 x y)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))) (pow.f64 (+.f64 x y) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 2/3) (cbrt.f64 (neg.f64 (+.f64 x y)))) (cbrt.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 2/3) (cbrt.f64 (+.f64 x y))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (pow.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (pow.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 2/3)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) 1) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) 1) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (pow.f64 (+.f64 y 1) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) -1) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 x y) 3) (pow.f64 (+.f64 y 1) -2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 x y) 3) (pow.f64 (+.f64 y 1) -2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 0) (/.f64 (+.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) (*.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 x y) (+.f64 y 1))) (/.f64 (+.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) (*.f64 0 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (neg.f64 (+.f64 y 1)))) (neg.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3) (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))) (neg.f64 (pow.f64 (+.f64 y 1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) (pow.f64 (pow.f64 (+.f64 y 1) 2/3) (-.f64 -1 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))) (/.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (pow.f64 (+.f64 y 1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y 1) -1/3) (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -1/3)) (/.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (cbrt.f64 (pow.f64 (+.f64 y 1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (+.f64 y 1) -1/3)) (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (+.f64 y 1) 2/3) (-.f64 -1 1/3)) (/.f64 (+.f64 x y) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (/.f64 1 (neg.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) (pow.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -1/3)) (+.f64 x y)) (pow.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -1/3)) (neg.f64 (+.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))) (*.f64 (cbrt.f64 (neg.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (pow.f64 (+.f64 y 1) -1/3))) (*.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) 1) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) -1) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4) (cbrt.f64 (neg.f64 (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))) (cbrt.f64 (neg.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y 1))) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (neg.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -1/3)) (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) (pow.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) 2/3)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 y 1) -1/3) (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3) (cbrt.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)))) (cbrt.f64 (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3) (cbrt.f64 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))) (cbrt.f64 (cbrt.f64 (neg.f64 (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (cbrt.f64 (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (pow.f64 (pow.f64 (+.f64 y 1) 2/3) (-.f64 -1 1/3))) (cbrt.f64 (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (/.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3) (cbrt.f64 (cbrt.f64 (+.f64 y 1))))) (cbrt.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3) (cbrt.f64 (cbrt.f64 (+.f64 y 1))))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (pow.f64 (+.f64 y 1) -1/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) -1/3))) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 x y)) (neg.f64 (pow.f64 (+.f64 y 1) -1/3))) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) 1) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y 1))) 1) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3))) (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))) (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y 1))) -1) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y 1))) 1) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) -1) (neg.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) -1) (cbrt.f64 (neg.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (pow.f64 (+.f64 y 1) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) 1) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) -1) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (*.f64 (cbrt.f64 (+.f64 y 1)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -1/3)) (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (*.f64 (cbrt.f64 (neg.f64 (+.f64 y 1))) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (*.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (neg.f64 (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (cbrt.f64 (pow.f64 (+.f64 y 1) -1/3))) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (*.f64 (neg.f64 (+.f64 y 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (+.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 y 1))))) (cbrt.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y 1)))) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3))) (pow.f64 (+.f64 y 1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (+.f64 y 1) -1/3) (/.f64 (+.f64 x y) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (+.f64 y 1)) 0) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 y 1)) (*.f64 (cbrt.f64 (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (+.f64 y 1)) (*.f64 0 (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (+.f64 y 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (+.f64 y 1)))) (cbrt.f64 (neg.f64 (pow.f64 (+.f64 y 1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (cbrt.f64 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 y 3) 1)) (cbrt.f64 (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (pow.f64 y 3) 1)) (cbrt.f64 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 y 3) 1)) 1) (cbrt.f64 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (+.f64 y 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (pow.f64 y 3) 1)) 1) (*.f64 (cbrt.f64 (fma.f64 y y (-.f64 1 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 y 3) 1))) (neg.f64 (cbrt.f64 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (neg.f64 (pow.f64 y 3)) -1)) (cbrt.f64 (neg.f64 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 y 1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (+.f64 y 1))))))"]],"rules":[["egg-rr",29],["egg-rr",94],["egg-rr",54],["egg-rr",33]],"time":41.426025390625,"type":"rewrite"},{"count":[[258,256]],"inputs":[["1","(+.f64 1 (*.f64 2/3 y))","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (*.f64 2/3 y)))","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (+.f64 (*.f64 2/3 y) (*.f64 4/81 (pow.f64 y 3)))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y)","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x)","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x)","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","x","(+.f64 (*.f64 y (+.f64 1 (*.f64 -2/3 x))) x)","(+.f64 (*.f64 (-.f64 (*.f64 5/9 x) 2/3) (pow.f64 y 2)) (+.f64 (*.f64 y (+.f64 1 (*.f64 -2/3 x))) x))","(+.f64 (*.f64 (pow.f64 y 3) (+.f64 5/9 (*.f64 -40/81 x))) (+.f64 (*.f64 (-.f64 (*.f64 5/9 x) 2/3) (pow.f64 y 2)) (+.f64 (*.f64 y (+.f64 1 (*.f64 -2/3 x))) x)))","(/.f64 y (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 x (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 x (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","x","(+.f64 (*.f64 y (-.f64 1 x)) x)","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x))","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x)))","1","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 x (pow.f64 y 2))))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3)))))","1","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 3))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y))))))","1","(+.f64 1 (*.f64 1/3 y))","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (*.f64 1/3 y)))","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (+.f64 (*.f64 5/81 (pow.f64 y 3)) (*.f64 1/3 y))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 2/3 y))","(fma.f64 2/3 y 1)","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (*.f64 2/3 y)))","(+.f64 1 (fma.f64 -1/9 (*.f64 y y) (*.f64 2/3 y)))","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (+.f64 (*.f64 2/3 y) (*.f64 4/81 (pow.f64 y 3)))))","(+.f64 1 (fma.f64 (*.f64 y y) -1/9 (fma.f64 (pow.f64 y 3) 4/81 (*.f64 2/3 y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) y)","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) (+.f64 y x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) (+.f64 y x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) (+.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) x)","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) (+.f64 y x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) (+.f64 y x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) (+.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x)","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) x)","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) (+.f64 y x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) (+.f64 y x))","(+.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (+.f64 1 y) 2)) 1/3) x))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 1 y) -2)) (+.f64 y x))","x","(+.f64 (*.f64 y (+.f64 1 (*.f64 -2/3 x))) x)","(fma.f64 y (fma.f64 x -2/3 1) x)","(+.f64 (*.f64 (-.f64 (*.f64 5/9 x) 2/3) (pow.f64 y 2)) (+.f64 (*.f64 y (+.f64 1 (*.f64 -2/3 x))) x))","(fma.f64 (*.f64 y y) (fma.f64 5/9 x -2/3) (fma.f64 y (fma.f64 x -2/3 1) x))","(+.f64 (*.f64 (pow.f64 y 3) (+.f64 5/9 (*.f64 -40/81 x))) (+.f64 (*.f64 (-.f64 (*.f64 5/9 x) 2/3) (pow.f64 y 2)) (+.f64 (*.f64 y (+.f64 1 (*.f64 -2/3 x))) x)))","(fma.f64 (pow.f64 y 3) (fma.f64 x -40/81 5/9) (fma.f64 (*.f64 y y) (fma.f64 5/9 x -2/3) (fma.f64 y (fma.f64 x -2/3 1) x)))","(/.f64 y (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 (+.f64 y x) (+.f64 1 y))","x","(+.f64 (*.f64 y (-.f64 1 x)) x)","(fma.f64 y (-.f64 1 x) x)","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x))","(fma.f64 (-.f64 1 x) y (fma.f64 (*.f64 y y) (+.f64 x -1) x))","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x)))","(+.f64 (*.f64 (-.f64 1 x) (+.f64 y (pow.f64 y 3))) (fma.f64 (*.f64 y y) (+.f64 x -1) x))","1","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(+.f64 1 (/.f64 (+.f64 x -1) y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 x (pow.f64 y 2))))","(-.f64 (+.f64 (+.f64 (pow.f64 y -2) 1) (/.f64 (+.f64 x -1) y)) (/.f64 x (*.f64 y y)))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3)))))","(-.f64 (+.f64 (fma.f64 x (pow.f64 y -3) (pow.f64 y -2)) (+.f64 1 (/.f64 (+.f64 x -1) y))) (fma.f64 x (pow.f64 y -2) (pow.f64 y -3)))","1","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))","(+.f64 1 (/.f64 (+.f64 x -1) y))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))))","(-.f64 (+.f64 (+.f64 (pow.f64 y -2) 1) (/.f64 (+.f64 x -1) y)) (/.f64 x (*.f64 y y)))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 3))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y))))))","(+.f64 (pow.f64 y -2) (+.f64 (-.f64 1 (/.f64 x (*.f64 y y))) (neg.f64 (*.f64 (-.f64 1 x) (+.f64 (pow.f64 y -3) (/.f64 1 y))))))","1","(+.f64 1 (*.f64 1/3 y))","(fma.f64 y 1/3 1)","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (*.f64 1/3 y)))","(+.f64 1 (fma.f64 -1/9 (*.f64 y y) (*.f64 1/3 y)))","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (+.f64 (*.f64 5/81 (pow.f64 y 3)) (*.f64 1/3 y))))","(+.f64 1 (fma.f64 -1/9 (*.f64 y y) (fma.f64 5/81 (pow.f64 y 3) (*.f64 1/3 y))))"]],"time":158.300048828125,"type":"simplify"},{"compiler":[[4987,3472]],"time":63.073974609375,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) (+.f64 y 1))","done",0.0078125],["(/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))","done",14.406151894957398]],"compiler":[[9,6],[17,13]],"count":[[258,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[256,0],"picked":[1,1]}],"min-error":[0],"time":80.863037109375,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["(/.f64 (+.f64 x y) (+.f64 y 1))",0.0078125,1]],"compiler":[[3,2],[3,2],[9,6],[24,16]],"count":[[2,1]],"inputs":[["(/.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))","(/.f64 (+.f64 x y) (+.f64 y 1))"]],"link":["."],"name":["Data.Colour.SRGB:invTransferFunction from colour-2.3.3"],"oracle":[14.413964394957398],"outputs":[["(/.f64 (+.f64 x y) (+.f64 y 1))"]],"time":8.3330078125,"times":[["x",2.467041015625],["y",2.544921875],["(/.f64 (+.f64 x y) (+.f64 y 1))",2.492919921875]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(/.f64 (+.f64 x y) (+.f64 y 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x y) (+.f64 y 1))"]],"stop":[["done",1]],"time":18.083984375,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.583984375,"type":"end"}]
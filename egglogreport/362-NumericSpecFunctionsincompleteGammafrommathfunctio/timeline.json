[{"compiler":[[17,14]],"method":["search"],"sampling":[[12,0.4302435948047787,0.061463370686396956,0.5082930345088243],[11,0.41560945892706513,0.09170725150033832,0.49268328957259655],[10,0.3941460596397519,0.12097552325576544,0.48487841710448265],[9,0.36682900600135326,0.17951206676661968,0.45365892723202705],[8,0.32780464366078377,0.23414617404341698,0.43804918229579926],[7,0.2809754088521004,0.34341438859701157,0.37561020255088806],[6,0.18731693923473358,0.43707285821437836,0.37561020255088806],[5,0.0,0.7492677569389343,0.2507322430610657],[4,0.0,0.7492677569389343,0.2507322430610657],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":24.74609375,"type":"analyze"},{"outcomes":[["body",256,"invalid",19.510498046875,422],["body",256,"valid",400.73046875,8256]],"time":428.786865234375,"type":"sample"},{"compiler":[[16,13]],"inputs":[["0","1"],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","(*.f64 (*.f64 3 (sqrt.f64 y)) (-.f64 (+.f64 x (/.f64 1 (*.f64 y 9))) 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","(*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(*.f64 (*.f64 3 (sqrt.f64 y)) (-.f64 (+.f64 x (/.f64 1 (*.f64 y 9))) 1))","(*.f64 (sqrt.f64 (*.f64 y 9)) (+.f64 x (/.f64 (-.f64 1/9 y) y)))"]],"symmetry":[[]],"time":65.218994140625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))"]],"time":22.169921875,"type":"simplify"},{"compiler":[[28,20]],"time":0.485107421875,"type":"eval"},{"alts":[["(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))","next",0.3958587890737681],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))","fresh",0.4388275390737681]],"compiler":[[14,10],[16,13],[14,10],[16,13]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.26009750976844204],"time":1.5,"type":"prune"},{"compiler":[[45,26]],"locations":[["(+.f64 y (/.f64 (-.f64 1/9 x) x))",0.00390625,true],["(/.f64 (-.f64 1/9 x) x)",0.1875,true],["(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))",0.24609375,true],["(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))",0.28515625,true]],"time":11.02099609375,"type":"localize"},{"count":[[4,60]],"series":[["(+.f64 y (/.f64 (-.f64 1/9 x) x))","x","-inf",0.15087890625],["(+.f64 y (/.f64 (-.f64 1/9 x) x))","x","inf",0.180908203125],["(+.f64 y (/.f64 (-.f64 1/9 x) x))","x","0",0.208984375],["(+.f64 y (/.f64 (-.f64 1/9 x) x))","y","-inf",0.14990234375],["(+.f64 y (/.f64 (-.f64 1/9 x) x))","y","inf",0.1728515625],["(+.f64 y (/.f64 (-.f64 1/9 x) x))","y","0",0.16015625],["(/.f64 (-.f64 1/9 x) x)","x","-inf",0.27490234375],["(/.f64 (-.f64 1/9 x) x)","x","inf",0.264892578125],["(/.f64 (-.f64 1/9 x) x)","x","0",0.261962890625],["(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","y","-inf",0.18505859375],["(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","y","inf",0.18994140625],["(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","y","0",0.18115234375],["(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","x","-inf",0.429931640625],["(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","x","inf",0.35791015625],["(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","x","0",0.27099609375],["(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))","y","-inf",0.382080078125],["(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))","y","inf",0.531005859375],["(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))","y","0",0.85986328125],["(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))","x","-inf",0.8818359375],["(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))","x","inf",0.68603515625],["(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))","x","0",0.837158203125]],"time":7.902099609375,"type":"series"},{"count":[[4,291]],"inputs":[["(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))","(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(/.f64 (-.f64 1/9 x) x)","(+.f64 y (/.f64 (-.f64 1/9 x) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 (sqrt.f64 x) y)) (*.f64 3 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (*.f64 x 9))) (*.f64 y (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 (*.f64 x 9))) (*.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 x) y) 3) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)) 3) (*.f64 (*.f64 (sqrt.f64 x) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x))) (*.f64 3 (*.f64 (sqrt.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 0) (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 1/2) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x))) (*.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (*.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (*.f64 x 9)))) (*.f64 1 (*.f64 y (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (*.f64 (sqrt.f64 x) y) 3)) (*.f64 1 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 3 (*.f64 (sqrt.f64 x) y))) (*.f64 1 (*.f64 3 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 y (sqrt.f64 (*.f64 x 9)))) (*.f64 1 (*.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) 1) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 1) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (*.f64 x 9))) 1) (*.f64 (*.f64 y (sqrt.f64 (*.f64 x 9))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 x) y) 3) 1) (*.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 (*.f64 (sqrt.f64 x) y)) 1) (*.f64 (*.f64 3 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (sqrt.f64 (*.f64 x 9))) 1) (*.f64 (*.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (*.f64 x 9))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (cbrt.f64 (*.f64 9 (*.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 (*.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2) x))) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (cbrt.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (cbrt.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (sqrt.f64 3) (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (+.f64 y (/.f64 (-.f64 1/9 x) x))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 9)) y (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 (*.f64 (sqrt.f64 x) y) (*.f64 3 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (sqrt.f64 (*.f64 x 9)) (*.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) y) 3 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (*.f64 x 9)) (*.f64 y (sqrt.f64 (*.f64 x 9))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 0) (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 1/2) (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) y) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) (*.f64 0 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (*.f64 1/2 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2) x)) (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (cbrt.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (sqrt.f64 x)) (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (+.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (*.f64 (/.f64 (-.f64 1/9 x) x) (cbrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (+.f64 (*.f64 (/.f64 (-.f64 1/9 x) x) (cbrt.f64 (sqrt.f64 x))) (*.f64 y (cbrt.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 x) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (-.f64 1/9 x) x) (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) (cbrt.f64 (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x))) (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x))) 2) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (sqrt.f64 x)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) (-.f64 1/9 x)) (/.f64 1 x) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1/9 x) (pow.f64 x (+.f64 -1 1/2)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 (sqrt.f64 x)) y) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) y)) (pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) y)) 2) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 (sqrt.f64 x))) (sqrt.f64 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (*.f64 (cbrt.f64 x) y) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) y (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 x) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 x) y) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) y) 1 (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1/9 x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1/9 x) x) 0) (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1/9 x) x) (*.f64 (/.f64 (-.f64 1/9 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1/9 x) x) 1/2) (*.f64 (/.f64 (-.f64 1/9 x) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 x) (neg.f64 x)) (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/9 x) (*.f64 (/.f64 1 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 1/9 x) x)) (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1/9 x) x) (*.f64 0 (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (-.f64 1/9 x) x)) (*.f64 1/2 (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/9 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1/9 x) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1/9 x) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 1/9 x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (/.f64 1/9 x) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 -1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 1/9 x) (*.f64 x x)) (/.f64 (*.f64 x x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1/729 (fma.f64 x (+.f64 1/9 x) 1/81)) x) (/.f64 (/.f64 (pow.f64 x 3) (fma.f64 x (+.f64 1/9 x) 1/81)) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 x) (/.f64 (+.f64 -1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 x)) (/.f64 (+.f64 -1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 (/.f64 1/9 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1/9 x) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (/.f64 1/9 x) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (sqrt.f64 1/9) (sqrt.f64 x)) -1) (-.f64 (/.f64 (sqrt.f64 1/9) (sqrt.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (sqrt.f64 1/9) (sqrt.f64 x)) 1) (-.f64 (/.f64 (sqrt.f64 1/9) (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1/9 x) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)) (cbrt.f64 (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1/9 x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1/9 x) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1/9 x) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 1/9 x)) (sqrt.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1/9 x) 2)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1/9 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (-.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 x)) (/.f64 (-.f64 1/9 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/2) (/.f64 (-.f64 1/9 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1/9 x) (sqrt.f64 x)) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1/9 x)) (/.f64 1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1/729 (pow.f64 x 3)) x) (/.f64 1 (fma.f64 x (+.f64 1/9 x) 1/81)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1/729 (pow.f64 x 3)) (/.f64 1 (*.f64 (fma.f64 x (+.f64 1/9 x) 1/81) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 -1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1/9 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 1/9 x) 3) -1) (+.f64 (pow.f64 (/.f64 1/9 x) 2) (-.f64 1 (*.f64 (/.f64 1/9 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 1/9 x) 3) 1) (+.f64 (pow.f64 (/.f64 1/9 x) 2) (/.f64 (+.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (*.f64 (/.f64 x 1/9) -1)) (/.f64 x 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (sqrt.f64 1/9) (*.f64 (/.f64 x (sqrt.f64 1/9)) -1)) (*.f64 (/.f64 x (sqrt.f64 1/9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/729 x)) 1) (*.f64 (cbrt.f64 (*.f64 x x)) -1)) (*.f64 (cbrt.f64 (*.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 x) (*.f64 (/.f64 x 1/9) (sqrt.f64 x))) (*.f64 (/.f64 x 1/9) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 x) (*.f64 (/.f64 x 1/9) (neg.f64 x))) (*.f64 (/.f64 x 1/9) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (*.f64 (/.f64 x 1/9) x)) (*.f64 (/.f64 x 1/9) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 x 1/9) (/.f64 x (cbrt.f64 x)))) (*.f64 (/.f64 x 1/9) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (/.f64 x 1/9)) (/.f64 x 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (*.f64 1/9 x)) (*.f64 (/.f64 x (sqrt.f64 1/9)) (sqrt.f64 x))) (*.f64 (/.f64 x (sqrt.f64 1/9)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sqrt.f64 1/9) (neg.f64 x)) (*.f64 (/.f64 x (sqrt.f64 1/9)) (neg.f64 x))) (*.f64 (/.f64 x (sqrt.f64 1/9)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sqrt.f64 1/9) x) (*.f64 (/.f64 x (sqrt.f64 1/9)) x)) (*.f64 (/.f64 x (sqrt.f64 1/9)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sqrt.f64 1/9) (cbrt.f64 (*.f64 x x))) (*.f64 (/.f64 x (sqrt.f64 1/9)) (/.f64 x (cbrt.f64 x)))) (*.f64 (/.f64 x (sqrt.f64 1/9)) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 1/9) (*.f64 (/.f64 x (sqrt.f64 1/9)) 1)) (*.f64 (/.f64 x (sqrt.f64 1/9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1/729 x)) (sqrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 x))) (*.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1/729 x)) (neg.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 x))) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1/729 x)) x) (*.f64 (cbrt.f64 (*.f64 x x)) x)) (*.f64 (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1/729 x)) (cbrt.f64 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 x (cbrt.f64 x)))) (*.f64 x (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 1/729 x)) 1) (*.f64 (cbrt.f64 (*.f64 x x)) 1)) (*.f64 (cbrt.f64 (*.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 1/9 (sqrt.f64 x)) (cbrt.f64 (*.f64 x x))) (*.f64 (sqrt.f64 x) (/.f64 x (cbrt.f64 x)))) (*.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1/9 (cbrt.f64 (*.f64 x x))) (*.f64 (neg.f64 x) (/.f64 x (cbrt.f64 x)))) (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 1/9 (cbrt.f64 (*.f64 x x))) (*.f64 x (/.f64 x (cbrt.f64 x)))) (*.f64 x (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) 1/729) (neg.f64 (*.f64 (fma.f64 x (+.f64 1/9 x) 1/81) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1/9 x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1/729 (pow.f64 x 3)) x) (fma.f64 x (+.f64 1/9 x) 1/81))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1/9 x) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1/9 x) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/9 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1/9 x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/729 (pow.f64 x 3)) (*.f64 (fma.f64 x (+.f64 1/9 x) 1/81) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/729 (pow.f64 x 3)) (/.f64 (*.f64 (fma.f64 x (+.f64 1/9 x) 1/81) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 1/9 (sqrt.f64 x)) 1) (neg.f64 (sqrt.f64 x))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 1/9 (sqrt.f64 x)) (sqrt.f64 x)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 1/9 (sqrt.f64 x)) (neg.f64 x)) (*.f64 (sqrt.f64 x) (neg.f64 x))) (*.f64 (sqrt.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 1/9 (sqrt.f64 x)) 1) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1/9 (sqrt.f64 x)) (*.f64 (neg.f64 x) (sqrt.f64 x))) (*.f64 (neg.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1/9 (neg.f64 x)) (*.f64 x x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1/9 x) (neg.f64 (*.f64 x x))) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (*.f64 1/9 x)) (neg.f64 (*.f64 x x))) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1/9 x) (sqrt.f64 x))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -1/9 x)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1/729 (pow.f64 x 3)) x)) (neg.f64 (fma.f64 x (+.f64 1/9 x) 1/81)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1/9 x) (cbrt.f64 x))) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 1/9 (sqrt.f64 x)) x) (pow.f64 x 3/2)) (pow.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 (*.f64 1/81 x)) (pow.f64 x 3/2)) (pow.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1/9 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1/9 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 -1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/9 x)) (cbrt.f64 (/.f64 1/81 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/2) (/.f64 1/9 (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 1/9) (cbrt.f64 x)) (/.f64 (sqrt.f64 1/9) (cbrt.f64 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/9 (/.f64 1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 1/9) (sqrt.f64 x)) (/.f64 (cbrt.f64 1/81) (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/9) (/.f64 (sqrt.f64 1/9) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 1/9) (sqrt.f64 x)) (/.f64 (sqrt.f64 1/9) (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (/.f64 1/729 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/9 x)) (pow.f64 (cbrt.f64 (/.f64 1/9 x)) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1/9 x) -1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1/9 x) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/9 x) (+.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 0) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) (*.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 1/2) (*.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 y (/.f64 (-.f64 1/9 x) x))) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) (*.f64 0 (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (+.f64 y (/.f64 (-.f64 1/9 x) x))) (*.f64 1/2 (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/9 x) (neg.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y (/.f64 1/9 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 y (/.f64 1/9 x)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/9 x) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (+.f64 y (/.f64 1/9 x)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 y (/.f64 (+.f64 -1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 y (/.f64 1/9 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (+.f64 y (/.f64 1/9 x)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 y y)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)) (cbrt.f64 (/.f64 (*.f64 y (-.f64 1/9 x)) x)))) (+.f64 (cbrt.f64 y) (cbrt.f64 (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)) (-.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (/.f64 (*.f64 y (-.f64 1/9 x)) x)))) (+.f64 (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2)) (cbrt.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 (+.f64 -1/9 x) x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 y (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 y (/.f64 1/9 x)) 3) 1) (+.f64 (*.f64 (+.f64 y (/.f64 1/9 x)) (+.f64 y (/.f64 1/9 x))) (+.f64 1 (*.f64 (+.f64 y (/.f64 1/9 x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 (+.f64 -1/9 x) x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (+.f64 (/.f64 (+.f64 -1/9 x) x) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 1 y) (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 1 (+.f64 y (/.f64 1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 y y)) (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1/9 x) (/.f64 1 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 y) (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) (-.f64 1/9 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/2) (/.f64 (-.f64 1/9 x) (sqrt.f64 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)) (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (-.f64 1/9 x)) (sqrt.f64 x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1/9 x) 2)) (sqrt.f64 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (/.f64 (-.f64 1/9 x) (cbrt.f64 (*.f64 x x))) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1/9 x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 1/9 x) 2)) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 -1/9 x) (/.f64 -1 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/9 x)) (cbrt.f64 (/.f64 1/81 (*.f64 x x))) (neg.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/9 x)) (pow.f64 (cbrt.f64 (/.f64 1/9 x)) 2) (neg.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/2) (/.f64 1/9 (sqrt.f64 x)) (neg.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/9) (/.f64 (sqrt.f64 1/9) x) (neg.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 1/9) (cbrt.f64 x)) (/.f64 (sqrt.f64 1/9) (cbrt.f64 (*.f64 x x))) (neg.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/9 (/.f64 1 x) (neg.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 1/9) (sqrt.f64 x)) (/.f64 (cbrt.f64 1/81) (sqrt.f64 x)) (neg.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (/.f64 1/729 (*.f64 x x))) (neg.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 1/9) (sqrt.f64 x)) (/.f64 (sqrt.f64 1/9) (sqrt.f64 x)) (neg.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) (neg.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 y) (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (+.f64 -1/9 x) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 1/9 x) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1/9 x) x) 1 y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1/9 x) (neg.f64 (-.f64 1 y)))))))"]],"rules":[["egg-rr",67],["egg-rr",108],["egg-rr",56],["egg-rr",60]],"time":49.0029296875,"type":"rewrite"},{"count":[[351,308]],"inputs":[["(*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 y (sqrt.f64 x))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 y (sqrt.f64 x))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(/.f64 1/9 x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","-1","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","-1","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","y","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","y","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(/.f64 1/9 x)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 y 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 y 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 (sqrt.f64 (*.f64 9 x)) (/.f64 (-.f64 1/9 x) x))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))","(*.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 x))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(*.f64 y (sqrt.f64 x))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(*.f64 y (sqrt.f64 x))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(+.f64 (*.f64 y (sqrt.f64 x)) (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))","(/.f64 1/9 x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","-1","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","-1","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","y","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","y","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(/.f64 1/9 x)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 y 1)","(+.f64 y -1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 y 1)","(+.f64 y -1)","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))","(-.f64 (+.f64 y (*.f64 1/9 (/.f64 1 x))) 1)","(+.f64 y (/.f64 (-.f64 1/9 x) x))"]],"time":215.7509765625,"type":"simplify"},{"compiler":[[5592,3451]],"time":65.051025390625,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) 3)","fresh",0.7636454591167754],["(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 (*.f64 (/.f64 1/9 (sqrt.f64 x)) 1) (sqrt.f64 x)) (sqrt.f64 x)))))","fresh",0.3786125488422102],["(*.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2) x)) 3))","fresh",27.31220629884221],["(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1))))","fresh",0.40205004884221013],["(*.f64 3 (fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x))))","fresh",0.4121475586106521],["(*.f64 (sqrt.f64 x) (*.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 3))","fresh",0.420917529305326],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","next",0.262382519536884],["(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))","fresh",0.6238251953688405],["(*.f64 (*.f64 3 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2) x)))","fresh",27.33468632814754],["(*.f64 (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 3)) (cbrt.f64 9))","fresh",0.6098214356003985]],"compiler":[[17,13],[21,13],[28,20],[17,14],[20,13],[14,10],[18,13],[18,14],[28,20],[18,14],[17,13],[21,13],[28,20],[17,14],[20,13],[14,10],[18,13],[18,14],[28,20],[18,14]],"count":[[310,10]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[308,10],"picked":[1,0]}],"min-error":[0.00390625],"time":121.81005859375,"type":"prune"},{"compiler":[[43,29]],"locations":[["(sqrt.f64 (*.f64 x 9))",0.1484375,true],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))",0.18359375,true],["(/.f64 (-.f64 1/9 x) x)",0.1875,false],["(*.f64 (sqrt.f64 (*.f64 x 9)) y)",0.20703125,true]],"time":11.212890625,"type":"localize"},{"count":[[3,24]],"series":[["(sqrt.f64 (*.f64 x 9))","x","-inf",0.27880859375],["(sqrt.f64 (*.f64 x 9))","x","inf",0.282958984375],["(sqrt.f64 (*.f64 x 9))","x","0",0.2548828125],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","y","-inf",0.212890625],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","y","inf",0.19189453125],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","y","0",0.460205078125],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","x","-inf",0.7998046875],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","x","inf",0.806884765625],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","x","0",0.52294921875],["(*.f64 (sqrt.f64 (*.f64 x 9)) y)","y","-inf",0.27685546875],["(*.f64 (sqrt.f64 (*.f64 x 9)) y)","y","inf",0.926025390625],["(*.f64 (sqrt.f64 (*.f64 x 9)) y)","y","0",0.494140625],["(*.f64 (sqrt.f64 (*.f64 x 9)) y)","x","-inf",0.5009765625],["(*.f64 (sqrt.f64 (*.f64 x 9)) y)","x","inf",0.343994140625],["(*.f64 (sqrt.f64 (*.f64 x 9)) y)","x","0",0.595947265625]],"time":7.178955078125,"type":"series"},{"count":[[3,136]],"inputs":[["(*.f64 (sqrt.f64 (*.f64 x 9)) y)","(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","(sqrt.f64 (*.f64 x 9))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 1/2) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 0) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 9)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 9)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (cbrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 9)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (cbrt.f64 (*.f64 (*.f64 y y) (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y y) (*.f64 x 9))) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) y) (sqrt.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x 9)) y) (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 (*.f64 x 9))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 9)) (*.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (sqrt.f64 (*.f64 x 9)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (neg.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (/.f64 x (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1/2) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 0) (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 2)) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (-.f64 1/9 x) x) y) (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 (cbrt.f64 (*.f64 x 9)) y) (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) y) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (cbrt.f64 (*.f64 x 9)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) (neg.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) (/.f64 x (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 (*.f64 (*.f64 x 9) (pow.f64 (/.f64 (-.f64 1/9 x) x) 2))) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (*.f64 x 9)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (cbrt.f64 (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (-.f64 1/9 x)) (/.f64 1 x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) 1 (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (cbrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y y) (*.f64 x 9))) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (sqrt.f64 (*.f64 x 9)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (cbrt.f64 (*.f64 (*.f64 y y) (*.f64 x 9))) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) y) (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (*.f64 x 9)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 9)) y (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) 1/2) (*.f64 (sqrt.f64 (*.f64 x 9)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 x 9)) (*.f64 (sqrt.f64 (*.f64 x 9)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) 0) (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (*.f64 x 9))) (*.f64 1/2 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (*.f64 x 9)) (*.f64 0 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (*.f64 x 9))) (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (cbrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 9)) (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))) (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (sqrt.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 x 9))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))))) (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (fabs.f64 (cbrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (*.f64 x 9))) (fabs.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 x 9)) 0) (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 9)) (pow.f64 (sqrt.f64 (*.f64 x 9)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (neg.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 x (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 x 9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x 9) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 9) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 9) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 9) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x 9)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x 9)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 9) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x 9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) 81) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (*.f64 x 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x 9))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x 9) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (*.f64 x 9))))))))"]],"rules":[["egg-rr",46],["egg-rr",54],["egg-rr",36]],"time":34.489990234375,"type":"rewrite"},{"count":[[160,142]],"inputs":[["(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x))))","(*.f64 (*.f64 -3 (+.f64 x -1/9)) (pow.f64 x -1/2))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (*.f64 3 y) (sqrt.f64 x))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 1/9 x) (sqrt.f64 (/.f64 1 x)))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))"]],"time":91.002197265625,"type":"simplify"},{"compiler":[[6501,4521]],"time":79.810791015625,"type":"eval"},{"alts":[["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","fresh",0.311542529305326],["(fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","fresh",0.3574600586106521],["(*.f64 (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 3)) (cbrt.f64 9))","fresh",0.6098214356003985],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (cbrt.f64 (*.f64 x 9)) (*.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))","fresh",0.3567962890737681],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) 3/2)) y))","fresh",9.005016935317961],["(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","fresh",0.3623237793053261],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","next",0.2894325683790941],["(*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 2)))","fresh",12.853923876989748],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (*.f64 3 y) (sqrt.f64 x)))","fresh",0.33888627930532605],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (/.f64 (-.f64 1/9 x) (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","fresh",0.5033952149057246],["(fma.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) 3/2)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","fresh",17.440202598512258]],"compiler":[[21,17],[24,18],[18,14],[24,18],[20,15],[15,11],[19,15],[31,23],[18,13],[22,15],[20,15],[21,17],[24,18],[18,14],[24,18],[20,15],[15,11],[19,15],[31,23],[18,13],[22,15],[20,15]],"count":[[309,11]],"kept":[{"done":[0,0],"fresh":[9,1],"new":[299,10],"picked":[1,0]}],"min-error":[0],"time":139.006103515625,"type":"prune"},{"compiler":[[47,35]],"locations":[["(sqrt.f64 (*.f64 x 9))",0.1484375,false],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))",0.18359375,true],["(fma.f64 1/9 (/.f64 1 x) -1)",0.201503759768442,true],["(*.f64 (sqrt.f64 (*.f64 x 9)) y)",0.20703125,false]],"time":12.10302734375,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","y","-inf",0.18603515625],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","y","inf",0.2041015625],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","y","0",0.281005859375],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","x","-inf",0.3779296875],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","x","inf",0.341064453125],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","x","0",0.28076171875],["(fma.f64 1/9 (/.f64 1 x) -1)","x","-inf",0.31005859375],["(fma.f64 1/9 (/.f64 1 x) -1)","x","inf",0.219970703125],["(fma.f64 1/9 (/.f64 1 x) -1)","x","0",0.23291015625]],"time":2.56884765625,"type":"series"},{"count":[[2,104]],"inputs":[["(fma.f64 1/9 (/.f64 1 x) -1)","(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1/9 x) x) 0) (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 1/9 x) x) 1/2) (*.f64 (/.f64 (-.f64 1/9 x) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1/9 x) x) (*.f64 (/.f64 (-.f64 1/9 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 1/9 x) x)) (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (-.f64 1/9 x) x)) (*.f64 1/2 (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1/9 x) x) (*.f64 0 (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/9 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 1/9 x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1/9 x) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/9 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (/.f64 1/9 x) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (/.f64 1/9 x) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 1/9 x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)) (cbrt.f64 (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (/.f64 -1/9 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 1/9 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1/9 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 1/9 x) 3) -1) (/.f64 1 (+.f64 (+.f64 1 (/.f64 1/9 x)) (/.f64 1/81 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (/.f64 1/9 x) 3) -1) 1) (*.f64 (+.f64 (+.f64 1 (/.f64 1/9 x)) (/.f64 1/81 (*.f64 x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 1/9 x) 3) -1)) (neg.f64 (+.f64 (+.f64 1 (/.f64 1/9 x)) (/.f64 1/81 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 1/9 x) 3) -1) (+.f64 (+.f64 1 (/.f64 1/9 x)) (/.f64 1/81 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1/9 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (/.f64 1/9 x) 3) -1) 1) (+.f64 (+.f64 1 (/.f64 1/9 x)) (/.f64 1/81 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 1/9 x) 3) -1) (+.f64 1 (-.f64 (/.f64 1/81 (*.f64 x x)) (/.f64 -1/9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x -1/9) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 x) 1/9) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/9 1) x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/9 (neg.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1/9 1) (neg.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/9 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1/9 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1/9 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 1 (/.f64 -1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 1 (/.f64 1/9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/9 (/.f64 1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/9 (cbrt.f64 x)) (cbrt.f64 (pow.f64 x -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) 1/9 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/9) (/.f64 (sqrt.f64 1/9) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/9 x)) (cbrt.f64 (/.f64 1/81 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1/9 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1 (/.f64 1/9 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/9 x) 1 -1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 1/9 x))) (neg.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 0) (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1/2) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 1/9 x)) (+.f64 (neg.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (*.f64 x 9)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 2)) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 (cbrt.f64 (*.f64 x 9)) y) (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (cbrt.f64 (*.f64 x 9)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (-.f64 1/9 x) x) y) (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 y (sqrt.f64 (sqrt.f64 (*.f64 x 9)))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (/.f64 (-.f64 1/9 x) x)) (*.f64 y (sqrt.f64 (sqrt.f64 (*.f64 x 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (*.f64 x 9)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 (*.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2) (*.f64 x 9))) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (cbrt.f64 (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 1/9 x) x) 2)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (sqrt.f64 (*.f64 x 9)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 y (sqrt.f64 (sqrt.f64 (*.f64 x 9)))) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (cbrt.f64 (*.f64 (*.f64 y y) (*.f64 x 9))) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y y) (*.f64 x 9))) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (cbrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 9)) y (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 (sqrt.f64 (*.f64 x 9)))) (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (*.f64 x 9)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) 1 (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))))"]],"rules":[["egg-rr",51],["egg-rr",53]],"time":27.778076171875,"type":"rewrite"},{"count":[[128,113]],"inputs":[["(/.f64 1/9 x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","-1","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","-1","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/9 x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","-1","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","-1","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(-.f64 (*.f64 1/9 (/.f64 1 x)) 1)","(/.f64 (-.f64 1/9 x) x)","(*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x)))","(*.f64 (sqrt.f64 (*.f64 9 x)) (/.f64 (-.f64 1/9 x) x))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (sqrt.f64 (*.f64 9 x)) y)","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (sqrt.f64 (*.f64 9 x)) y)","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 (-.f64 (*.f64 1/9 (/.f64 1 x)) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))"]],"time":91.487060546875,"type":"simplify"},{"compiler":[[5149,3887]],"time":66.493896484375,"type":"eval"},{"alts":[["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","next",0.311542529305326],["(fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","fresh",0.3574600586106521],["(*.f64 (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 3)) (cbrt.f64 9))","fresh",0.6098214356003985],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (cbrt.f64 (*.f64 x 9)) (*.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))","fresh",0.3567962890737681],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 2)) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))","fresh",12.853923876989748],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) 3/2)) y))","fresh",9.005016935317961],["(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","fresh",0.3623237793053261],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","done",0.2894325683790941],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (*.f64 3 y) (sqrt.f64 x)))","fresh",0.33888627930532605],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (/.f64 (-.f64 1/9 x) (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","fresh",0.5033952149057246],["(fma.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) 3/2)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","fresh",17.440202598512258]],"compiler":[[21,17],[24,18],[18,14],[24,18],[31,23],[20,15],[15,11],[19,15],[18,13],[22,15],[20,15],[21,17],[24,18],[18,14],[24,18],[31,23],[20,15],[15,11],[18,13],[22,15],[20,15]],"count":[[254,11]],"kept":[{"done":[0,0],"fresh":[10,9],"new":[243,1],"picked":[1,1]}],"min-error":[0],"time":96.31396484375,"type":"prune"},{"compiler":[[56,44]],"locations":[["(sqrt.f64 (*.f64 x 9))",0.1484375,false],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))",0.18359375,true],["(*.f64 (sqrt.f64 (*.f64 x 9)) y)",0.20703125,false],["(/.f64 (cbrt.f64 1/81) x)",0.34765625,true]],"time":15.522216796875,"type":"localize"},{"count":[[2,12]],"series":[["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","y","-inf",0.195068359375],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","y","inf",0.248046875],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","y","0",1.10400390625],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","x","-inf",0.828857421875],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","x","inf",0.671142578125],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","x","0",0.764892578125],["(/.f64 (cbrt.f64 1/81) x)","x","-inf",0.322998046875],["(/.f64 (cbrt.f64 1/81) x)","x","inf",0.447021484375],["(/.f64 (cbrt.f64 1/81) x)","x","0",1.350830078125]],"time":6.077880859375,"type":"series"},{"count":[[2,100]],"inputs":[["(/.f64 (cbrt.f64 1/81) x)","(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (cbrt.f64 1/81) x) 0) (/.f64 (cbrt.f64 1/81) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (cbrt.f64 1/81) x) 1/2) (*.f64 (/.f64 (cbrt.f64 1/81) x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cbrt.f64 1/81) x) (*.f64 (/.f64 (cbrt.f64 1/81) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (cbrt.f64 1/81) x)) (/.f64 (cbrt.f64 1/81) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (cbrt.f64 1/81) x)) (*.f64 1/2 (/.f64 (cbrt.f64 1/81) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cbrt.f64 1/81) x) (*.f64 0 (/.f64 (cbrt.f64 1/81) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (cbrt.f64 -1/81) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 x)) (/.f64 (cbrt.f64 -1/81) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (cbrt.f64 -1/81) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cbrt.f64 1/81) x)) (pow.f64 (/.f64 (cbrt.f64 1/81) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 1/81) x) 2/3) (cbrt.f64 (/.f64 (cbrt.f64 1/81) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/81) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/81)) (/.f64 (cbrt.f64 (cbrt.f64 1/6561)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/3) (cbrt.f64 (/.f64 1/81 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (cbrt.f64 1/81) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 1/81) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/81) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (cbrt.f64 1/81))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 -1/81) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/81 (*.f64 x x))) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cbrt.f64 1/6561)) x) (cbrt.f64 (cbrt.f64 1/81)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (cbrt.f64 -1/81))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/81 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1/81 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 -1/81) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 1/81) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/81 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (cbrt.f64 1/81) x)) (cbrt.f64 (cbrt.f64 1/6561))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 1/81) x) 2/3) (cbrt.f64 (cbrt.f64 1/81))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 1/81) x) 2/3) (cbrt.f64 (cbrt.f64 -1/81))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (cbrt.f64 1/81)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 1/81) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/81 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1/81 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/81)) (pow.f64 (/.f64 (cbrt.f64 1/81) x) 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 -1/81)) (pow.f64 (/.f64 (cbrt.f64 1/81) x) 2/3)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 1/81 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 -1/81) (cbrt.f64 x)) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 1/81) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 1/81 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 1/81) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 1/81) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 1/81) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/81 (pow.f64 x -3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 1/81) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (cbrt.f64 -1/81) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (cbrt.f64 -1/81) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/81 (pow.f64 x -3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 1/9 x))) (neg.f64 (sqrt.f64 (*.f64 x 9))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 0) (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1/2) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) (*.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) (*.f64 0 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 1/9 x)) (+.f64 (neg.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (*.f64 x 9)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (-.f64 1/9 x) x) y) (sqrt.f64 (*.f64 x 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (cbrt.f64 (*.f64 x 9)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 (cbrt.f64 (*.f64 x 9)) y) (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 2/3) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (+.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) y) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (/.f64 (-.f64 1/9 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 9)) y (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9)))) (cbrt.f64 (*.f64 x 9)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (sqrt.f64 (*.f64 x 9)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) y) (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (cbrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (*.f64 (cbrt.f64 (*.f64 x 9)) (pow.f64 y 2/3)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 x 9)) (pow.f64 y 2/3)) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y)) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 (*.f64 (*.f64 x 9) (pow.f64 (/.f64 (-.f64 1/9 x) x) 2))) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (cbrt.f64 (/.f64 (-.f64 1/9 x) x))) (pow.f64 (/.f64 (-.f64 1/9 x) x) 2/3) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1/9 x) x) (sqrt.f64 (*.f64 x 9)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (sqrt.f64 (sqrt.f64 (*.f64 x 9))) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) y) (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) y) 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) 1 (*.f64 (sqrt.f64 (*.f64 x 9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))))))"]],"rules":[["egg-rr",52],["egg-rr",48]],"time":29.925048828125,"type":"rewrite"},{"count":[[112,107]],"inputs":[["(*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x)))","(*.f64 (+.f64 (/.f64 (*.f64 3 1/9) x) -3) (sqrt.f64 x))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 y (sqrt.f64 x))) (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (sqrt.f64 (*.f64 9 x)) y)","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(*.f64 3 (*.f64 y (sqrt.f64 x)))","(*.f64 (sqrt.f64 (*.f64 9 x)) y)","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))","(+.f64 (*.f64 3 (*.f64 (-.f64 (/.f64 (*.f64 (cbrt.f64 1/9) (cbrt.f64 1/81)) x) 1) (sqrt.f64 x))) (*.f64 3 (*.f64 y (sqrt.f64 x))))","(*.f64 (sqrt.f64 (*.f64 9 x)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))"]],"time":58.260986328125,"type":"simplify"},{"compiler":[[5457,4259]],"time":73.796875,"type":"eval"},{"alts":[["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","done",0.311542529305326],["(fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","fresh",0.3574600586106521],["(*.f64 (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 3)) (cbrt.f64 9))","fresh",0.6098214356003985],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (cbrt.f64 (*.f64 x 9)) (*.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))","fresh",0.3567962890737681],["(*.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 2)) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))","fresh",12.853923876989748],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) 3/2)) y))","fresh",9.005016935317961],["(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","fresh",0.3623237793053261],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","done",0.2894325683790941],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (*.f64 3 y) (sqrt.f64 x)))","fresh",0.33888627930532605],["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (/.f64 (-.f64 1/9 x) (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","fresh",0.5033952149057246],["(fma.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) 3/2)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","fresh",17.440202598512258]],"compiler":[[21,17],[24,18],[18,14],[24,18],[31,23],[20,15],[15,11],[19,15],[18,13],[22,15],[20,15]],"count":[[248,11]],"kept":[{"done":[1,1],"fresh":[9,9],"new":[237,0],"picked":[1,1]}],"min-error":[0],"time":82.253173828125,"type":"prune"},{"accuracy":[0.262382519536884],"baseline":[0.262382519536884],"branch":[["x",0.2623825195368841,1],["y",0.262382519536884,1],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))",0.2623825195368841,1]],"compiler":[[3,2],[3,2],[16,13],[430,294]],"count":[[23,1]],"inputs":[["(*.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 2)) (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))))","(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","(fma.f64 (cbrt.f64 (sqrt.f64 (*.f64 x 9))) (*.f64 (cbrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (cbrt.f64 (*.f64 x 9)) (*.f64 y (cbrt.f64 (sqrt.f64 (*.f64 x 9))))))","(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) 3/2)) y))","(*.f64 3 (fma.f64 (-.f64 1/9 x) (pow.f64 x -1/2) (*.f64 y (sqrt.f64 x))))","(fma.f64 (sqrt.f64 (*.f64 x 9)) (fma.f64 1/9 (/.f64 1 x) -1) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","(*.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))) (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y)) 2)))","(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (*.f64 3 y) (sqrt.f64 x)))","(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (/.f64 (-.f64 1/9 x) (sqrt.f64 x)) (sqrt.f64 x)) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","(fma.f64 (cbrt.f64 (pow.f64 (*.f64 x 9) 3/2)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) 3)","(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 (*.f64 (/.f64 1/9 (sqrt.f64 x)) 1) (sqrt.f64 x)) (sqrt.f64 x)))))","(*.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2) x)) 3))","(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (fma.f64 (cbrt.f64 1/9) (/.f64 (cbrt.f64 1/81) x) -1))))","(*.f64 3 (fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 (-.f64 1/9 x) x))))","(*.f64 (sqrt.f64 x) (*.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 3))","(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x)))))","(*.f64 (*.f64 3 (cbrt.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 y (/.f64 (-.f64 1/9 x) x)) 2) x)))","(*.f64 (*.f64 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))) (cbrt.f64 3)) (cbrt.f64 9))","(*.f64 3 (*.f64 (sqrt.f64 x) (+.f64 y (/.f64 (-.f64 1/9 x) x))))","(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))"]],"link":["."],"name":["Numeric.SpecFunctions:incompleteGamma from math-functions-0.1.5.2, B"],"oracle":[33.35444667981147],"outputs":[["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))"]],"time":29.81787109375,"times":[["x",7.365966796875],["y",7.34716796875],["(*.f64 (*.f64 3 (sqrt.f64 x)) (-.f64 (+.f64 y (/.f64 1 (*.f64 x 9))) 1))",7.9091796875]],"type":"regimes"},{"compiler":[[18,13]],"inputs":[["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (sqrt.f64 (*.f64 x 9)) (/.f64 (-.f64 1/9 x) x) (*.f64 (sqrt.f64 (*.f64 x 9)) y))","(*.f64 (sqrt.f64 (*.f64 x 9)) (+.f64 (/.f64 (-.f64 1/9 x) x) y))"]],"stop":[["fuel",1]],"time":21.319091796875,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[18,13]],"remove-preprocessing":[[]],"time":10.38916015625,"type":"end"}]
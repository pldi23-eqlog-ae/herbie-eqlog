[{"compiler":[[32,21]],"method":["search"],"sampling":[[12,0.37445095177099574,0.2496339678473305,0.37591508038167376],[11,0.37445095177099574,0.2496339678473305,0.37591508038167376],[10,0.37445095177099574,0.2496339678473305,0.37591508038167376],[9,0.2496339678473305,0.499267935694661,0.2510980964580085],[8,0.2496339678473305,0.499267935694661,0.2510980964580085],[7,0.2496339678473305,0.499267935694661,0.2510980964580085],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":107.12890625,"type":"analyze"},{"outcomes":[["body",256,"invalid",177.16845703125,2105],["body",256,"valid",750.12158203125,8256]],"time":936.821044921875,"type":"sample"},{"compiler":[[31,20]],"inputs":[["0","1","2"],["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(/.f64 (-.f64 (*.f64 (atan2.f64 re im) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(/.f64 (-.f64 (*.f64 (atan2.f64 im base) (log.f64 re)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 base base) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 re) (log.f64 re)) (*.f64 0 0)))","(/.f64 (-.f64 (*.f64 (atan2.f64 base re) (log.f64 im)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 base base)))) 0)) (+.f64 (*.f64 (log.f64 im) (log.f64 im)) (*.f64 0 0)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(*.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)","(/.f64 (-.f64 (*.f64 (atan2.f64 re im) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(*.f64 1 (/.f64 (atan2.f64 re im) (log.f64 base)))","(/.f64 (-.f64 (*.f64 (atan2.f64 im base) (log.f64 re)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 base base) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 re) (log.f64 re)) (*.f64 0 0)))","(*.f64 1 (/.f64 (atan2.f64 im base) (log.f64 re)))","(/.f64 (-.f64 (*.f64 (atan2.f64 base re) (log.f64 im)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 base base)))) 0)) (+.f64 (*.f64 (log.f64 im) (log.f64 im)) (*.f64 0 0)))","(*.f64 1 (/.f64 (atan2.f64 base re) (log.f64 im)))"]],"symmetry":[[]],"time":83.48681640625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","(/.f64 (atan2.f64 im re) (log.f64 base))"]],"time":23.005126953125,"type":"simplify"},{"compiler":[[37,21]],"time":0.462890625,"type":"eval"},{"alts":[["(/.f64 (atan2.f64 im re) (log.f64 base))","next",0.3046875],["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","fresh",32.496757519536885]],"compiler":[[9,6],[31,20],[9,6],[31,20]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.26171875],"time":1.5830078125,"type":"prune"},{"compiler":[[17,6]],"locations":[["(/.f64 (atan2.f64 im re) (log.f64 base))",0.3046875,true]],"time":4.66015625,"type":"localize"},{"count":[[1,8]],"series":[["(/.f64 (atan2.f64 im re) (log.f64 base))","base","-inf",6.945068359375],["(/.f64 (atan2.f64 im re) (log.f64 base))","base","inf",5.955078125],["(/.f64 (atan2.f64 im re) (log.f64 base))","base","0",9.52783203125],["(/.f64 (atan2.f64 im re) (log.f64 base))","re","-inf",0.39013671875],["(/.f64 (atan2.f64 im re) (log.f64 base))","re","inf",0.386962890625],["(/.f64 (atan2.f64 im re) (log.f64 base))","re","0",4.1318359375],["(/.f64 (atan2.f64 im re) (log.f64 base))","im","-inf",0.386962890625],["(/.f64 (atan2.f64 im re) (log.f64 base))","im","inf",0.39208984375],["(/.f64 (atan2.f64 im re) (log.f64 base))","im","0",15.22998046875]],"time":43.4609375,"type":"series"},{"count":[[1,52]],"inputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (atan2.f64 im re) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 im re)) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 base)) (cbrt.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -1/3)) (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 base) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1/3) (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base)))) (neg.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2/3)) (pow.f64 (log.f64 base) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (log.f64 base)) (neg.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 base))) (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 base) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 base) -2/3)) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -2/3)) (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 base)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 base)))) (neg.f64 (pow.f64 (log.f64 base) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (neg.f64 (atan2.f64 im re)))) (neg.f64 (pow.f64 (log.f64 base) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (atan2.f64 im re) 2/3)) (/.f64 (cbrt.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (atan2.f64 im re) 2/3) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)) (pow.f64 (atan2.f64 im re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2/3) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 base) -2/3))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (neg.f64 (log.f64 base)))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (neg.f64 (atan2.f64 im re)))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2/3)) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (neg.f64 (atan2.f64 im re)))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (neg.f64 (atan2.f64 im re))))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3))))))"]],"rules":[["egg-rr",52]],"time":40.785888671875,"type":"rewrite"},{"count":[[60,54]],"inputs":[["(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))"]],"time":39.09814453125,"type":"simplify"},{"compiler":[[713,245]],"time":8.044921875,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)","fresh",0.7447016114323551],["(*.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)) (pow.f64 (atan2.f64 im re) 2/3))","fresh",31.456281875845015],["(*.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 base)) (cbrt.f64 (atan2.f64 im re)))","fresh",31.4602585986245],["(/.f64 (atan2.f64 im re) (log.f64 base))","done",0.3046875],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","next",0.40072250976844204],["(/.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (neg.f64 (atan2.f64 im re)))) (cbrt.f64 (neg.f64 (log.f64 base))))","fresh",31.64326759717899],["(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))","fresh",34.424312744211065],["(*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))","fresh",31.597937144394287],["(/.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (neg.f64 (atan2.f64 im re)))) (cbrt.f64 (neg.f64 (log.f64 base))))","fresh",6.181898439943055],["(/.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3)))","fresh",36.362314612088994],["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))","fresh",32.496757519536885]],"compiler":[[12,9],[16,10],[16,10],[9,6],[11,8],[22,14],[15,10],[19,10],[22,14],[26,16],[31,20],[12,9],[16,10],[16,10],[11,8],[22,14],[15,10],[19,10],[22,14],[26,16],[31,20]],"count":[[56,11]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[54,9],"picked":[1,1]}],"min-error":[0.03125],"time":15.75,"type":"prune"},{"compiler":[[24,11]],"locations":[["(/.f64 1 (log.f64 base))",0.30078125,true],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))",0.328125,true]],"time":6.095947265625,"type":"localize"},{"count":[[2,44]],"series":[["(/.f64 1 (log.f64 base))","base","-inf",0.4541015625],["(/.f64 1 (log.f64 base))","base","inf",0.418212890625],["(/.f64 1 (log.f64 base))","base","0",0.385986328125],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","base","-inf",0.173095703125],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","base","inf",0.165771484375],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","base","0",0.172119140625],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","re","-inf",0.154052734375],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","re","inf",0.182861328125],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","re","0",0.14697265625],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","im","-inf",0.157958984375],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","im","inf",0.18798828125],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","im","0",0.195068359375]],"time":2.93115234375,"type":"series"},{"count":[[2,119]],"inputs":[["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","(/.f64 1 (log.f64 base))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (atan2.f64 im re) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 base) -2/3)) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (atan2.f64 im re) 2/3)) (/.f64 (cbrt.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (cbrt.f64 (log.f64 base))) (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 base) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 im re)) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)) (pow.f64 (atan2.f64 im re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 base)) (cbrt.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (atan2.f64 im re) 2/3) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1/3) (*.f64 (pow.f64 (log.f64 base) -2/3) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (atan2.f64 im re))) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) -2/3) (atan2.f64 im re)) (pow.f64 (log.f64 base) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -1/3)) (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 base) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 base))) (neg.f64 (pow.f64 (log.f64 base) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 base) -2/3))) (neg.f64 (pow.f64 (log.f64 base) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (log.f64 base)) (neg.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -2/3)) (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (atan2.f64 im re))) (pow.f64 (log.f64 base) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2/3) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) (pow.f64 (atan2.f64 im re) 2/3)) (pow.f64 (log.f64 base) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) (pow.f64 (atan2.f64 im re) 2/3)) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (atan2.f64 im re)))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 base))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) (pow.f64 (atan2.f64 im re) 2/3))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (neg.f64 (atan2.f64 im re)))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (atan2.f64 im re))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 base) -2/3) (atan2.f64 im re)) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (neg.f64 (pow.f64 (log.f64 base) -2/3))) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (atan2.f64 im re))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (log.f64 base)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (log.f64 base)) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (log.f64 base)) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (log.f64 base)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (log.f64 base)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (log.f64 base)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (log.f64 base)) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (log.f64 base)) 3/2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 (log.f64 base)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 (log.f64 base)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 (log.f64 base)) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 (log.f64 base)) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 (log.f64 base)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 (log.f64 base)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 (log.f64 base)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 (log.f64 base)) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 (log.f64 base)) 3/2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 1 (log.f64 base)) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) -1/3)) (cbrt.f64 (log.f64 base))) (/.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2/3)) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -1/3)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2/3)) (pow.f64 (log.f64 base) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -1/3)) (neg.f64 (pow.f64 (log.f64 base) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -2/3)) (neg.f64 (pow.f64 (log.f64 base) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2/3)) (/.f64 (pow.f64 (log.f64 base) -1/3) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (log.f64 base)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) -1/3) (cbrt.f64 (pow.f64 (log.f64 base) -2/3))) (pow.f64 (cbrt.f64 (pow.f64 (log.f64 base) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) -2/3) -1) (neg.f64 (pow.f64 (log.f64 base) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1/3) (pow.f64 (log.f64 base) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2/3) (pow.f64 (log.f64 base) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 base) -1/3) (cbrt.f64 (pow.f64 (log.f64 base) -2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 base) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) -1/3) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 base) -2/3) -1) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) -2/3)) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) -1/3)) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (log.f64 base)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (pow.f64 (log.f64 base) -1/3)) 0) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (log.f64 base) -1/3) (cbrt.f64 (pow.f64 (log.f64 base) -2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 base)) (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (log.f64 base) -2/3) -1)) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) -1)) (cbrt.f64 (neg.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -1/3) (pow.f64 (log.f64 base) -2))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) -1/3) 7)) (cbrt.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) -2/3) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) -1/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 base) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 base)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 base) -3))))))"]],"rules":[["egg-rr",62],["egg-rr",57]],"time":47.844970703125,"type":"rewrite"},{"count":[[163,123]],"inputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (log.f64 base))"]],"time":133.489990234375,"type":"simplify"},{"compiler":[[1626,711]],"time":17.22607421875,"type":"eval"},{"alts":[["(*.f64 (atan2.f64 im re) (pow.f64 (cbrt.f64 (log.f64 base)) -3))","fresh",0.7421229005061233],["(/.f64 (cbrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (cbrt.f64 (log.f64 base)))","fresh",6.181898439943055],["(*.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 base)) (cbrt.f64 (atan2.f64 im re)))","fresh",31.4602585986245],["(/.f64 (atan2.f64 im re) (log.f64 base))","done",0.3046875],["(*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))","fresh",31.597937144394287],["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","next",0.41634750976844204],["(*.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)) (pow.f64 (atan2.f64 im re) 2/3))","fresh",31.456281875845015],["(/.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (atan2.f64 im re))) (cbrt.f64 (log.f64 base)))","fresh",31.64326759717899],["(pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)","fresh",0.7447016114323551],["(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","done",0.40072250976844204],["(/.f64 (cbrt.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3)))","fresh",36.362314612088994],["(*.f64 (atan2.f64 im re) (/.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) -1)) (cbrt.f64 (neg.f64 (log.f64 base)))))","fresh",0.5681038574528623]],"compiler":[[12,9],[20,12],[16,10],[9,6],[19,10],[14,9],[16,10],[20,12],[12,9],[11,8],[26,16],[19,14],[12,9],[20,12],[16,10],[19,10],[14,9],[16,10],[20,12],[12,9],[26,16],[19,14]],"count":[[134,12]],"kept":[{"done":[1,1],"fresh":[9,2],"new":[123,8],"picked":[1,1]}],"min-error":[0.01953125],"time":28.094970703125,"type":"prune"},{"compiler":[[34,15]],"locations":[["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))",0.328125,true],["(/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2))",0.3857612793053261,true],["(pow.f64 (log.f64 base) 2)",0.5436325195368841,true]],"time":9.3359375,"type":"localize"},{"count":[[3,56]],"series":[["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","base","-inf",0.19091796875],["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","base","inf",0.159912109375],["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","base","0",0.173095703125],["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","re","-inf",0.151123046875],["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","re","inf",0.151123046875],["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","re","0",0.1728515625],["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","im","-inf",0.152099609375],["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","im","inf",0.154052734375],["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","im","0",0.177001953125],["(/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2))","base","-inf",0.162109375],["(/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2))","base","inf",0.17822265625],["(/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2))","base","0",0.152099609375],["(pow.f64 (log.f64 base) 2)","base","-inf",0.419921875],["(pow.f64 (log.f64 base) 2)","base","inf",0.364990234375],["(pow.f64 (log.f64 base) 2)","base","0",0.375]],"time":3.31103515625,"type":"series"},{"count":[[3,159]],"inputs":[["(pow.f64 (log.f64 base) 2)","(/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 base) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log.f64 base) 2) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log.f64 base) 2) 3/2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log.f64 base) 2) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log.f64 base) 2) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log.f64 base) 2) 1/3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log.f64 base) 2) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log.f64 base) 2) 6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log.f64 base) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log.f64 base) 2) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (log.f64 base) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 2/3) (pow.f64 (log.f64 base) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 4/3) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 base)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) 2/3)) (neg.f64 (pow.f64 (log.f64 base) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 base)) (pow.f64 (cbrt.f64 (log.f64 base)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 base)) 5) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (log.f64 base) 4/3) 0)) (+.f64 (pow.f64 (log.f64 base) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log.f64 base) 4/3) (+.f64 0 (*.f64 (pow.f64 (log.f64 base) 2/3) 0))) (-.f64 (pow.f64 (log.f64 base) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (log.f64 base) 4/3) (*.f64 0 (neg.f64 (pow.f64 (log.f64 base) 2/3))))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 base) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 base)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 base)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 base) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (log.f64 base)) (/.f64 2 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 base)) (pow.f64 (log.f64 base) (neg.f64 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 base)) (neg.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -2)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (log.f64 base)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) (neg.f64 4/3)) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2/3) (pow.f64 (log.f64 base) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1/3) (pow.f64 (log.f64 base) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (log.f64 base) -2/3) (*.f64 0 (neg.f64 (pow.f64 (log.f64 base) -1/3))))) (pow.f64 (log.f64 base) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) 3) (pow.f64 (log.f64 base) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 base)) (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 base)) (pow.f64 (log.f64 base) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 base) -1/3) (pow.f64 (log.f64 base) 2/3)) (pow.f64 (log.f64 base) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 base) -2/3) (cbrt.f64 (neg.f64 (log.f64 base)))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) -1/3) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) -1/3)) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 base) (cbrt.f64 (log.f64 base))) (pow.f64 (cbrt.f64 (log.f64 base)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (log.f64 base) -1/3)) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (neg.f64 (pow.f64 (log.f64 base) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) -2/3) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (log.f64 base)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) 3)) (neg.f64 (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) (neg.f64 (pow.f64 (log.f64 base) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (log.f64 base) (cbrt.f64 (pow.f64 (log.f64 base) 4/3))) 3) (pow.f64 (pow.f64 (log.f64 base) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) (cbrt.f64 (log.f64 base)))) (cbrt.f64 (pow.f64 (log.f64 base) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (log.f64 base)) (pow.f64 (log.f64 base) -2))) (cbrt.f64 (pow.f64 (log.f64 base) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) (neg.f64 (log.f64 base)))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) 2) (pow.f64 (log.f64 base) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 base) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 (pow.f64 (log.f64 base) 2/3) (cbrt.f64 (log.f64 base))) 3) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) -1/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 base)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 base) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 base) 2)) (pow.f64 (log.f64 base) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 base) 3)) (pow.f64 (log.f64 base) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 base) -3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (atan2.f64 im re) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 im re)) (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)) (pow.f64 (atan2.f64 im re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 base)) (cbrt.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (atan2.f64 im re) 2/3) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -1/3) (*.f64 (pow.f64 (log.f64 base) -2/3) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) -2/3) (atan2.f64 im re)) (pow.f64 (log.f64 base) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (pow.f64 (log.f64 base) -2/3)) (pow.f64 (log.f64 base) (neg.f64 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (atan2.f64 im re) (log.f64 base))) (neg.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2) (*.f64 (atan2.f64 im re) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (log.f64 base)) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2/3) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (cbrt.f64 (log.f64 base))) (pow.f64 (cbrt.f64 (log.f64 base)) 5))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (pow.f64 (log.f64 base) -2/3)) (cbrt.f64 (pow.f64 (log.f64 base) 4/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) (log.f64 base)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (*.f64 (pow.f64 (log.f64 base) -2/3) (atan2.f64 im re))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 (atan2.f64 im re) (log.f64 base))) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (pow.f64 (log.f64 base) -2/3)) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (cbrt.f64 (pow.f64 (log.f64 base) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (neg.f64 (*.f64 (atan2.f64 im re) (log.f64 base))))) (neg.f64 (pow.f64 (log.f64 base) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (*.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (pow.f64 (log.f64 base) -2/3)))) (cbrt.f64 (pow.f64 (log.f64 base) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (log.f64 base) -2/3) (atan2.f64 im re)) (log.f64 base)) (pow.f64 (log.f64 base) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (pow.f64 (log.f64 base) -2/3)) (pow.f64 (log.f64 base) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (*.f64 (atan2.f64 im re) (log.f64 base)))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (atan2.f64 im re) (log.f64 base))) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3)) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (log.f64 base)) (*.f64 (pow.f64 (log.f64 base) -2/3) (atan2.f64 im re))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (pow.f64 (log.f64 base) 4/3)) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (pow.f64 (log.f64 base) -2/3)) (pow.f64 (log.f64 base) 2/3)) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (log.f64 base)) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (log.f64 base)) (pow.f64 (log.f64 base) 2/3)) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 base) -2/3) (atan2.f64 im re)) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (atan2.f64 im re) (log.f64 base))) (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (log.f64 base)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (log.f64 base))) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (atan2.f64 im re) (log.f64 base))) (pow.f64 (log.f64 base) 2/3)) (neg.f64 (pow.f64 (log.f64 base) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (log.f64 base)) -1) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (neg.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 base))) (cbrt.f64 (atan2.f64 im re))) 3) (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (cbrt.f64 (neg.f64 (log.f64 base)))) 3) (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 (atan2.f64 im re) (log.f64 base)))) 3) (neg.f64 (pow.f64 (log.f64 base) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) 3) (pow.f64 (log.f64 base) 4))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (*.f64 (atan2.f64 im re) (log.f64 base)))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (/.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (log.f64 base)))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (log.f64 base)) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (pow.f64 (log.f64 base) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 3))))))"]],"rules":[["egg-rr",69],["egg-rr",52],["egg-rr",38]],"time":54.6669921875,"type":"rewrite"},{"count":[[215,165]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (log.f64 (/.f64 1 base)) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (log.f64 base) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2)","(pow.f64 (log.f64 base) 2)","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 -1 (log.f64 (/.f64 1 base)))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (log.f64 base))","(/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 1 (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))"]],"time":164.156982421875,"type":"simplify"},{"compiler":[[2301,954]],"time":23.431884765625,"type":"eval"},{"alts":[["(*.f64 (atan2.f64 im re) (/.f64 (pow.f64 (log.f64 base) 3) (pow.f64 (log.f64 base) 4)))","fresh",0.5065613281475361],["(pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)","fresh",0.7447016114323551],["(/.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 (atan2.f64 im re) (log.f64 base)))) 3) (neg.f64 (pow.f64 (log.f64 base) 2)))","fresh",0.7740366700430071],["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","done",0.41634750976844204],["(*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))","fresh",31.597937144394287],["(*.f64 (atan2.f64 im re) (/.f64 (pow.f64 (log.f64 base) 2) (pow.f64 (log.f64 base) 3)))","fresh",0.5527725586106521],["(*.f64 (pow.f64 (log.f64 base) -2) (*.f64 (atan2.f64 im re) (log.f64 base)))","fresh",0.42158129884221013],["(/.f64 (cbrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (cbrt.f64 (log.f64 base)))","fresh",6.181898439943055],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","next",0.4121475586106521],["(/.f64 (atan2.f64 im re) (log.f64 base))","done",0.3046875],["(*.f64 (atan2.f64 im re) (*.f64 (log.f64 base) (pow.f64 (log.f64 base) -2)))","fresh",0.4349212890737681]],"compiler":[[16,11],[12,9],[19,14],[14,9],[19,10],[16,11],[14,9],[20,12],[14,9],[9,6],[14,9],[16,11],[12,9],[19,14],[19,10],[16,11],[14,9],[20,12],[14,9],[14,9]],"count":[[177,11]],"kept":[{"done":[2,1],"fresh":[9,3],"new":[165,6],"picked":[1,1]}],"min-error":[0.0078125],"time":43.984130859375,"type":"prune"},{"compiler":[[35,15]],"locations":[["(*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))",0.3125,true],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))",0.3678512695368841,true],["(pow.f64 (log.f64 base) -2)",0.5224800293053261,true]],"time":8.340087890625,"type":"localize"},{"count":[[3,84]],"series":[["(*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))","re","-inf",0.373046875],["(*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))","re","inf",0.399169921875],["(*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))","re","0",0.39013671875],["(*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))","im","-inf",0.39892578125],["(*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))","im","inf",0.40283203125],["(*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))","im","0",0.385009765625],["(*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))","base","-inf",0.47998046875],["(*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))","base","inf",0.32080078125],["(*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))","base","0",0.404052734375],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","re","-inf",0.1591796875],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","re","inf",0.162109375],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","re","0",0.175048828125],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","im","-inf",0.161865234375],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","im","inf",0.1650390625],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","im","0",0.1689453125],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","base","-inf",0.175048828125],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","base","inf",0.198974609375],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","base","0",0.166015625],["(pow.f64 (log.f64 base) -2)","base","-inf",0.535888671875],["(pow.f64 (log.f64 base) -2)","base","inf",0.503173828125],["(pow.f64 (log.f64 base) -2)","base","0",0.56201171875]],"time":6.973876953125,"type":"series"},{"count":[[3,81]],"inputs":[["(pow.f64 (log.f64 base) -2)","(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","(*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 base) -2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (cbrt.f64 (pow.f64 (log.f64 base) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (cbrt.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 base) -2))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 base) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 base) -2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 base) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 base) -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (log.f64 base) -2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 base) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 base) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (log.f64 base) -2) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 base) (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2) (*.f64 (atan2.f64 im re) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (*.f64 (atan2.f64 im re) (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))) (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 2/3) (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 base)) (*.f64 (pow.f64 (log.f64 base) 2/3) (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (*.f64 (atan2.f64 im re) (log.f64 base))) (cbrt.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) 2/3) (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))) (cbrt.f64 (log.f64 base)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 2/3) (log.f64 base)) (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))) (pow.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 2/3) (cbrt.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 base) (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)))) (pow.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 2/3) (*.f64 (log.f64 base) (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) 2/3) (*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (cbrt.f64 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 base)))) (neg.f64 (pow.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 base))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 base))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (pow.f64 (log.f64 base) -2)) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (atan2.f64 im re) 2/3) (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (atan2.f64 im re) 2/3) (pow.f64 (log.f64 base) -2)) (cbrt.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (atan2.f64 im re)) (cbrt.f64 (pow.f64 (log.f64 base) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))) (pow.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 2/3) (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) -2))) (cbrt.f64 (pow.f64 (log.f64 base) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) -2) (cbrt.f64 (atan2.f64 im re))) (pow.f64 (atan2.f64 im re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (*.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (atan2.f64 im re) 2/3) (*.f64 (pow.f64 (log.f64 base) -2) (cbrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 base) -2)) (atan2.f64 im re))) (neg.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (pow.f64 (log.f64 base) -2)) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 base) -2)) (atan2.f64 im re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 base) -2)) (atan2.f64 im re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 base) -2)) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) 3))))))"]],"rules":[["egg-rr",28],["egg-rr",34],["egg-rr",19]],"time":44.9609375,"type":"rewrite"},{"count":[[165,90]],"inputs":[["(/.f64 1 (pow.f64 (log.f64 base) 2))","(/.f64 1 (pow.f64 (log.f64 base) 2))","(/.f64 1 (pow.f64 (log.f64 base) 2))","(/.f64 1 (pow.f64 (log.f64 base) 2))","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 (/.f64 1 base)) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 (pow.f64 (log.f64 base) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 base) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 base) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 base) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (log.f64 (/.f64 1 base)) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(pow.f64 (log.f64 base) -2)","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(*.f64 -1 (/.f64 (atan2.f64 im re) (log.f64 (/.f64 1 base))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 (/.f64 1 base)) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 (/.f64 1 base)) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 (/.f64 1 base)) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 (/.f64 1 base)) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 base)))) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))","(/.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) 2))","(*.f64 (atan2.f64 im re) (pow.f64 (log.f64 base) -2))"]],"time":244.962158203125,"type":"simplify"},{"compiler":[[1314,636]],"time":18.091796875,"type":"eval"},{"alts":[["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (*.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) -2)))) (log.f64 base))","fresh",0.5847626953688405],["(pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))) 3)","fresh",0.7522204102745652],["(*.f64 (pow.f64 (log.f64 base) -2) (*.f64 (atan2.f64 im re) (log.f64 base)))","fresh",0.42158129884221013],["(/.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 (atan2.f64 im re) (log.f64 base)))) 3) (neg.f64 (pow.f64 (log.f64 base) 2)))","fresh",0.7740366700430071],["(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","done",0.41634750976844204],["(*.f64 (atan2.f64 im re) (/.f64 (pow.f64 (log.f64 base) 2) (pow.f64 (log.f64 base) 3)))","fresh",0.5527725586106521],["(*.f64 (cbrt.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))) (pow.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 2/3))","fresh",31.59367034645136],["(*.f64 (atan2.f64 im re) (/.f64 (pow.f64 (log.f64 base) 3) (pow.f64 (log.f64 base) 4)))","fresh",0.5065613281475361],["(/.f64 (cbrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (cbrt.f64 (log.f64 base)))","fresh",6.181898439943055],["(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","done",0.4121475586106521],["(*.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (atan2.f64 im re) 2/3) (pow.f64 (log.f64 base) -2))) (log.f64 base))","fresh",31.543177045605244],["(*.f64 (atan2.f64 im re) (*.f64 (log.f64 base) (pow.f64 (log.f64 base) -2)))","fresh",0.4349212890737681]],"compiler":[[21,14],[14,11],[14,9],[19,14],[14,9],[16,11],[23,15],[16,11],[20,12],[14,9],[21,13],[14,9]],"count":[[101,12]],"kept":[{"done":[2,1],"fresh":[8,6],"new":[90,4],"picked":[1,1]}],"min-error":[0],"time":19.733154296875,"type":"prune"},{"accuracy":[0.3046875],"baseline":[0.3046875],"branch":[["re",0.3046875,1],["im",0.3046875,1],["base",0.3046875,1],["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))",0.3046875,1],["(log.f64 base)",0.3046875,1]],"compiler":[[4,3],[4,3],[4,3],[31,20],[5,4],[426,164]],"count":[[29,1]],"inputs":[["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 base) -4)) (*.f64 (atan2.f64 im re) (cbrt.f64 (pow.f64 (log.f64 base) -2)))) (log.f64 base))","(pow.f64 (cbrt.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))) 3)","(*.f64 (cbrt.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re))) (pow.f64 (*.f64 (/.f64 1 (log.f64 base)) (atan2.f64 im re)) 2/3))","(*.f64 (*.f64 (cbrt.f64 (atan2.f64 im re)) (*.f64 (pow.f64 (atan2.f64 im re) 2/3) (pow.f64 (log.f64 base) -2))) (log.f64 base))","(*.f64 (atan2.f64 im re) (/.f64 (pow.f64 (log.f64 base) 3) (pow.f64 (log.f64 base) 4)))","(/.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 (atan2.f64 im re) (log.f64 base)))) 3) (neg.f64 (pow.f64 (log.f64 base) 2)))","(*.f64 (atan2.f64 im re) (/.f64 (pow.f64 (log.f64 base) 2) (pow.f64 (log.f64 base) 3)))","(*.f64 (pow.f64 (log.f64 base) -2) (*.f64 (atan2.f64 im re) (log.f64 base)))","(*.f64 (*.f64 (pow.f64 (log.f64 base) -2) (atan2.f64 im re)) (log.f64 base))","(*.f64 (atan2.f64 im re) (*.f64 (log.f64 base) (pow.f64 (log.f64 base) -2)))","(*.f64 (atan2.f64 im re) (pow.f64 (cbrt.f64 (log.f64 base)) -3))","(/.f64 (cbrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (cbrt.f64 (log.f64 base)))","(*.f64 (atan2.f64 im re) (/.f64 (log.f64 base) (pow.f64 (log.f64 base) 2)))","(*.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)) (pow.f64 (atan2.f64 im re) 2/3))","(/.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (atan2.f64 im re))) (cbrt.f64 (log.f64 base)))","(pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)","(/.f64 (cbrt.f64 (*.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3)))","(*.f64 (atan2.f64 im re) (/.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 base) -2) -1)) (cbrt.f64 (neg.f64 (log.f64 base)))))","(pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))) 3)","(*.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 base)) (pow.f64 (atan2.f64 im re) 2/3))","(*.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2/3) (log.f64 base)) (cbrt.f64 (atan2.f64 im re)))","(*.f64 (atan2.f64 im re) (/.f64 1 (log.f64 base)))","(/.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (neg.f64 (atan2.f64 im re)))) (cbrt.f64 (neg.f64 (log.f64 base))))","(/.f64 (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))) (pow.f64 (log.f64 base) 2/3))","(*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2/3) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 base))))","(/.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (neg.f64 (atan2.f64 im re)))) (cbrt.f64 (neg.f64 (log.f64 base))))","(/.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 base)) 2) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 base))))) (cbrt.f64 (pow.f64 (log.f64 base) 2/3)))","(/.f64 (atan2.f64 im re) (log.f64 base))","(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))"]],"link":["."],"name":["math.log/2 on complex, imaginary part"],"oracle":[57.38996546010395],"outputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))"]],"time":51.23291015625,"times":[["re",9.057861328125],["im",8.955078125],["base",9.012939453125],["(/.f64 (-.f64 (*.f64 (atan2.f64 im re) (log.f64 base)) (*.f64 (log.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))) 0)) (+.f64 (*.f64 (log.f64 base) (log.f64 base)) (*.f64 0 0)))",7.993896484375],["(log.f64 base)",9.31103515625]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (atan2.f64 im re) (log.f64 base))"]],"stop":[["fuel",1]],"time":38.166015625,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":8.36083984375,"type":"end"}]
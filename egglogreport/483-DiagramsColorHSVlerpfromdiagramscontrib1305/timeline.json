[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4407599744804429,0.09117633580581241],[11,0.41345625924714113,0.5148700586851191,0.07167368206773972],[10,0.34324670579007943,0.600681735132639,0.05607155907728156],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":86.372802734375,"type":"analyze"},{"outcomes":[["body",256,"invalid",52.2626953125,1292],["body",256,"valid",330.1162109375,8256]],"time":391.39501953125,"type":"sample"},{"compiler":[[12,8]],"inputs":[["0","1","2"],["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))","(+.f64 (*.f64 (-.f64 1 y) x) (*.f64 y z))","(+.f64 (*.f64 (-.f64 1 z) y) (*.f64 z x))","(+.f64 (*.f64 (-.f64 1 x) z) (*.f64 x y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))","(fma.f64 (-.f64 1 x) y (*.f64 x z))","(+.f64 (*.f64 (-.f64 1 y) x) (*.f64 y z))","(fma.f64 (-.f64 1 y) x (*.f64 y z))","(+.f64 (*.f64 (-.f64 1 z) y) (*.f64 z x))","(fma.f64 (-.f64 1 z) y (*.f64 x z))","(+.f64 (*.f64 (-.f64 1 x) z) (*.f64 x y))","(fma.f64 y x (*.f64 (-.f64 1 x) z))"]],"symmetry":[[]],"time":71.13916015625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))","(fma.f64 (-.f64 1 x) y (*.f64 x z))"]],"time":17.9658203125,"type":"simplify"},{"compiler":[[20,11]],"time":0.336181640625,"type":"eval"},{"alts":[["(fma.f64 (-.f64 1 x) y (*.f64 x z))","next",0.01953125]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.01953125],"time":0.849853515625,"type":"prune"},{"compiler":[[21,10]],"locations":[["(fma.f64 (-.f64 1 x) y (*.f64 x z))",0.01953125,true]],"time":4.8310546875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (-.f64 1 x) y (*.f64 x z))","z","-inf",0.244873046875],["(fma.f64 (-.f64 1 x) y (*.f64 x z))","z","inf",0.2548828125],["(fma.f64 (-.f64 1 x) y (*.f64 x z))","z","0",0.31005859375],["(fma.f64 (-.f64 1 x) y (*.f64 x z))","y","-inf",0.350830078125],["(fma.f64 (-.f64 1 x) y (*.f64 x z))","y","inf",0.2861328125],["(fma.f64 (-.f64 1 x) y (*.f64 x z))","y","0",0.42919921875],["(fma.f64 (-.f64 1 x) y (*.f64 x z))","x","-inf",0.35107421875],["(fma.f64 (-.f64 1 x) y (*.f64 x z))","x","inf",1.320068359375],["(fma.f64 (-.f64 1 x) y (*.f64 x z))","x","0",0.531982421875]],"time":4.195068359375,"type":"series"},{"count":[[1,37]],"inputs":[["(fma.f64 (-.f64 1 x) y (*.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z)) 0) (fma.f64 (-.f64 1 x) y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z)) (*.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (-.f64 1 x) y (*.f64 x z))) (fma.f64 (-.f64 1 x) y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z)) (*.f64 0 (fma.f64 (-.f64 1 x) y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x z) (*.f64 (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z))) (pow.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z)) 2/3) (cbrt.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 1 x) y (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 1 x) y (*.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) y (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) z) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) x) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 z)) (pow.f64 z 2/3) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x z)) (pow.f64 (*.f64 x z) 2/3) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x z) 2/3) (cbrt.f64 (*.f64 x z)) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 x) y)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) y) 2)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (-.f64 1 x) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (pow.f64 (-.f64 1 x) 2/3) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 x) (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x z)) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x z) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x z) 1 (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 x) y) 1 (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 x) y) (*.f64 x z))))))"]],"rules":[["egg-rr",37]],"time":21.910888671875,"type":"rewrite"},{"count":[[73,47]],"inputs":[["y","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(*.f64 (+.f64 z (*.f64 -1 y)) x)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x))","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(*.f64 (+.f64 z (*.f64 -1 y)) x)","(*.f64 (-.f64 z y) x)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x))","(*.f64 (-.f64 z y) x)","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)"]],"time":117.68017578125,"type":"simplify"},{"compiler":[[528,271]],"time":6.614990234375,"type":"eval"},{"alts":[["(fma.f64 (-.f64 z y) x y)","next",0.0078125],["(fma.f64 (-.f64 1 x) y (*.f64 x z))","done",0.01953125],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","fresh",0.01953125]],"compiler":[[9,5],[11,7],[11,7],[9,5],[11,7]],"count":[[48,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[47,2],"picked":[1,1]}],"min-error":[0],"time":8.976806640625,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 (-.f64 z y) x y)",0.0078125,true]],"time":3.531982421875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (-.f64 z y) x y)","x","-inf",0.286865234375],["(fma.f64 (-.f64 z y) x y)","x","inf",0.241943359375],["(fma.f64 (-.f64 z y) x y)","x","0",0.223876953125],["(fma.f64 (-.f64 z y) x y)","y","-inf",0.257080078125],["(fma.f64 (-.f64 z y) x y)","y","inf",0.22802734375],["(fma.f64 (-.f64 z y) x y)","y","0",0.25],["(fma.f64 (-.f64 z y) x y)","z","-inf",0.245849609375],["(fma.f64 (-.f64 z y) x y)","z","inf",0.576904296875],["(fma.f64 (-.f64 z y) x y)","z","0",0.295166015625]],"time":2.72900390625,"type":"series"},{"count":[[1,37]],"inputs":[["(fma.f64 (-.f64 z y) x y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 z y) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (-.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (-.f64 z y) x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 z y) x y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 y (*.f64 (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 y (-.f64 (*.f64 (-.f64 y z) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (-.f64 z y) x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (-.f64 y z) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 z y) x y)) (pow.f64 (fma.f64 (-.f64 z y) x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (-.f64 z y) x y) 2/3) (cbrt.f64 (fma.f64 (-.f64 z y) x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 (-.f64 y z) x) y)) (neg.f64 (pow.f64 (fma.f64 (-.f64 z y) x y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 z y) x) 2)) (-.f64 (pow.f64 y 2/3) (*.f64 (cbrt.f64 (*.f64 (-.f64 z y) x)) (cbrt.f64 y)))) (+.f64 (cbrt.f64 (*.f64 (-.f64 z y) x)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 y 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 z y) x) 2)) (*.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (-.f64 z y) x))))) (+.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (-.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 (-.f64 y z) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (-.f64 y z) x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 z y) x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 z y) x y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (-.f64 z y) x y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 z y) x y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 y z) x) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 z y) x y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 z y) x y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 z y) x y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (-.f64 y z) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 z y) x y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 y 2/3) (*.f64 (-.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (cbrt.f64 y) (*.f64 (-.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 z y) x y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 z y) x)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 z y) x) 2)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 z y) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 z y) (cbrt.f64 x)) (pow.f64 x 2/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 z y)) (*.f64 (pow.f64 (-.f64 z y) 2/3) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 y) (*.f64 (-.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 z y) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (*.f64 (-.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (*.f64 (-.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 z y) x) 1 y)))))"]],"rules":[["egg-rr",37]],"time":37.735107421875,"type":"rewrite"},{"count":[[73,47]],"inputs":[["(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(*.f64 z x)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(*.f64 z x)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(*.f64 y (+.f64 1 (*.f64 -1 x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(*.f64 -1 (*.f64 y (-.f64 x 1)))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))","y","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(*.f64 (-.f64 z y) x)","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(*.f64 (-.f64 z y) x)","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(+.f64 (*.f64 (-.f64 z y) x) y)"]],"method":["egg-herbie"],"outputs":[["(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (+.f64 y (*.f64 -1 (*.f64 y x))))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(*.f64 y (+.f64 1 (*.f64 -1 x)))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 1 (*.f64 -1 x))))","(fma.f64 (-.f64 z y) x y)","(*.f64 -1 (*.f64 y (-.f64 x 1)))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (-.f64 x 1))))","(fma.f64 (-.f64 z y) x y)","y","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(*.f64 (-.f64 z y) x)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(*.f64 (-.f64 z y) x)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (-.f64 z y) x) y)","(fma.f64 (-.f64 z y) x y)"]],"time":120.549072265625,"type":"simplify"},{"compiler":[[468,150]],"time":5.366943359375,"type":"eval"},{"alts":[["(fma.f64 (-.f64 z y) x y)","done",0.0078125],["(fma.f64 (-.f64 1 x) y (*.f64 x z))","done",0.01953125],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","next",0.01953125]],"compiler":[[9,5],[11,7],[11,7],[11,7]],"count":[[50,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[47,0],"picked":[1,1]}],"min-error":[0],"time":8.10498046875,"type":"prune"},{"compiler":[[23,13]],"locations":[["(*.f64 (-.f64 1 x) y)",0.01171875,true],["(fma.f64 x z (*.f64 (-.f64 1 x) y))",0.01171875,true]],"time":5.596923828125,"type":"localize"},{"count":[[2,60]],"series":[["(*.f64 (-.f64 1 x) y)","y","-inf",0.200927734375],["(*.f64 (-.f64 1 x) y)","y","inf",0.215087890625],["(*.f64 (-.f64 1 x) y)","y","0",0.2470703125],["(*.f64 (-.f64 1 x) y)","x","-inf",0.14794921875],["(*.f64 (-.f64 1 x) y)","x","inf",0.14599609375],["(*.f64 (-.f64 1 x) y)","x","0",0.166015625],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","y","-inf",0.219970703125],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","y","inf",0.27001953125],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","y","0",0.2861328125],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","z","-inf",0.261962890625],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","z","inf",0.23193359375],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","z","0",0.283935546875],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","x","-inf",0.2939453125],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","x","inf",0.2900390625],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","x","0",0.343017578125]],"time":3.76904296875,"type":"series"},{"count":[[2,89]],"inputs":[["(fma.f64 x z (*.f64 (-.f64 1 x) y))","(*.f64 (-.f64 1 x) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (+.f64 (neg.f64 (*.f64 x y)) (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z)) 0) (fma.f64 y (-.f64 1 x) (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z)) (*.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y (-.f64 1 x) (*.f64 x z))) (fma.f64 y (-.f64 1 x) (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z)) (*.f64 0 (fma.f64 y (-.f64 1 x) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x z) y) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x z) (*.f64 (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z))) (pow.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z)) 2/3) (cbrt.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (-.f64 1 x) (*.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (-.f64 1 x) (*.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 z)) (pow.f64 z 2/3) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) z) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x z)) (cbrt.f64 (pow.f64 (*.f64 x z) 2)) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (-.f64 1 x) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 x) (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 1 x) y)) (pow.f64 (*.f64 (-.f64 1 x) y) 2/3) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (-.f64 1 x) y) 2/3) (cbrt.f64 (*.f64 (-.f64 1 x) y)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (-.f64 1 x))) (pow.f64 (-.f64 1 x) 2/3) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (-.f64 1 x)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) y (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (pow.f64 (-.f64 1 x) 2/3) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (+.f64 x -1) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x z) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 1 x) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 x) y) 1 (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x z) 1 (*.f64 (-.f64 1 x) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 x) y) 0) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 x) y) (*.f64 (*.f64 (-.f64 1 x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (neg.f64 (*.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 1 x) y)) (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 1 x) y) (*.f64 0 (*.f64 (-.f64 1 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (pow.f64 (-.f64 1 x) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (-.f64 1 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (-.f64 1 x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (-.f64 1 x) 2/3) y) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) 1) (/.f64 y (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 x 3)) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 y (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (/.f64 (-.f64 1 (pow.f64 x 3)) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 x) y)) (pow.f64 (*.f64 (-.f64 1 x) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (-.f64 1 x) y) 2/3) (cbrt.f64 (*.f64 (-.f64 1 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (-.f64 1 x))) (pow.f64 (-.f64 1 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 x) 2/3) (*.f64 y (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 -1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (*.f64 (pow.f64 (-.f64 1 x) 2/3) y)) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) y) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y (-.f64 1 (pow.f64 x 3)))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 x -1) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 x) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 y 2/3) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (cbrt.f64 y) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 y) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (neg.f64 (*.f64 x y)))))))"]],"rules":[["egg-rr",50],["egg-rr",39]],"time":26.612060546875,"type":"rewrite"},{"count":[[149,101]],"inputs":[["y","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(*.f64 (+.f64 z (*.f64 -1 y)) x)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x))","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","y","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(*.f64 (+.f64 z (*.f64 -1 y)) x)","(*.f64 (-.f64 z y) x)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 (+.f64 z (*.f64 -1 y)) x) y)","(fma.f64 (-.f64 z y) x y)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x))","(*.f64 (-.f64 z y) x)","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 y (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) y) x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(*.f64 y (-.f64 1 x))","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","(+.f64 (*.f64 z x) (*.f64 y (-.f64 1 x)))","(fma.f64 (-.f64 z y) x y)","y","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(+.f64 y (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))","(*.f64 y (-.f64 1 x))"]],"time":186.784912109375,"type":"simplify"},{"compiler":[[1279,698]],"time":17.278076171875,"type":"eval"},{"alts":[["(fma.f64 (-.f64 z y) x y)","done",0.0078125],["(fma.f64 (-.f64 1 x) y (*.f64 x z))","done",0.01953125],["(fma.f64 x z (*.f64 (-.f64 1 x) y))","done",0.01953125]],"compiler":[[9,5],[11,7],[11,7]],"count":[[104,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[101,0],"picked":[1,1]}],"min-error":[0],"time":23.322998046875,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["z",0.0078125,1],["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))",0.0078125,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[34,17]],"count":[[4,1]],"inputs":[["(fma.f64 (-.f64 z y) x y)","(fma.f64 x z (*.f64 (-.f64 1 x) y))","(fma.f64 (-.f64 1 x) y (*.f64 x z))","(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))"]],"link":["."],"name":["Diagrams.Color.HSV:lerp  from diagrams-contrib-1.3.0.5"],"oracle":[0.02734375],"outputs":[["(fma.f64 (-.f64 z y) x y)"]],"time":12.6650390625,"times":[["x",2.8740234375],["y",3.029052734375],["z",2.885009765625],["(+.f64 (*.f64 (-.f64 1 x) y) (*.f64 x z))",3.037841796875]],"type":"regimes"},{"compiler":[[9,5]],"inputs":[["(fma.f64 (-.f64 z y) x y)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (-.f64 z y) x y)"]],"stop":[["done",1]],"time":36.301025390625,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.636962890625,"type":"end"}]
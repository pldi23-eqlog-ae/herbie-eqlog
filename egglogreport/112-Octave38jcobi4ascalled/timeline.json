[{"compiler":[[29,19]],"method":["search"],"sampling":[[12,0.49902379512786865,0.0007320642471313477,0.500244140625],[11,0.4982917308807373,0.0014641284942626953,0.500244140625],[10,0.4968276023864746,0.0029282569885253906,0.500244140625],[9,0.4938993453979492,0.005856513977050781,0.500244140625],[8,0.48804283142089844,0.011713027954101563,0.500244140625],[7,0.4763298034667969,0.023426055908203125,0.500244140625],[6,0.45290374755859375,0.04685211181640625,0.500244140625],[5,0.4060516357421875,0.0937042236328125,0.500244140625],[4,0.312347412109375,0.187408447265625,0.500244140625],[3,0.0,0.499755859375,0.500244140625],[2,0.0,0.499755859375,0.500244140625],[1,0.0,0.499755859375,0.500244140625],[0,0.0,0.499755859375,0.500244140625]],"time":3.468994140625,"type":"analyze"},{"outcomes":[["body",256,"valid",439.259033203125,8256]],"time":447.224853515625,"type":"sample"},{"compiler":[[26,17]],"inputs":[["0"],["(/.f64 (/.f64 (*.f64 (*.f64 i i) (*.f64 i i)) (*.f64 (*.f64 2 i) (*.f64 2 i))) (-.f64 (*.f64 (*.f64 2 i) (*.f64 2 i)) 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (/.f64 (*.f64 (*.f64 i i) (*.f64 i i)) (*.f64 (*.f64 2 i) (*.f64 2 i))) (-.f64 (*.f64 (*.f64 2 i) (*.f64 2 i)) 1))","(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))"]],"symmetry":[[]],"time":54.537109375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (/.f64 (*.f64 (*.f64 i i) (*.f64 i i)) (*.f64 (*.f64 2 i) (*.f64 2 i))) (-.f64 (*.f64 (*.f64 2 i) (*.f64 2 i)) 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 (*.f64 (*.f64 i i) (*.f64 i i)) (*.f64 (*.f64 2 i) (*.f64 2 i))) (-.f64 (*.f64 (*.f64 2 i) (*.f64 2 i)) 1))","(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))"]],"time":21.302001953125,"type":"simplify"},{"compiler":[[38,24]],"time":0.490966796875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))","next",12.50390625]],"compiler":[[13,9],[13,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[12.50390625],"time":0.90087890625,"type":"prune"},{"compiler":[[34,20]],"locations":[["(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))",12.114516812211914,true]],"time":7.757080078125,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))","i","-inf",0.39501953125],["(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))","i","inf",0.43212890625],["(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))","i","0",1.174072265625]],"time":2.080078125,"type":"series"},{"count":[[1,81]],"inputs":[["(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 0) (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) (*.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))) (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) (*.f64 0 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 i i) (*.f64 (fma.f64 (*.f64 i 4) i -1) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (+.f64 (*.f64 -4 (*.f64 i i)) 1)) (/.f64 (*.f64 i i) (*.f64 (fma.f64 (*.f64 i 4) i -1) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 1/64 (pow.f64 i 6)) (fma.f64 (*.f64 i 4) i -1))) (pow.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 2)) (cbrt.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/4 (*.f64 i i)) (/.f64 -1 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/64 (fma.f64 (*.f64 i 4) i -1))) (/.f64 (*.f64 i i) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 i i) 1/4)) (/.f64 (cbrt.f64 (*.f64 (pow.f64 i 4) 1/16)) (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 i (/.f64 (*.f64 i 1/4) (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 i (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 i i) (/.f64 1/4 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 i 6) (fma.f64 (*.f64 i 4) i -1))) (/.f64 1/4 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 i i) 1/4) (/.f64 1 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 (*.f64 i 4) i -1)) (*.f64 (*.f64 i i) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 1/3)) (/.f64 (*.f64 i i) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 i i) (*.f64 (fma.f64 (*.f64 i 4) i -1) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i 1/4) (fma.f64 (*.f64 i 4) i -1)) i)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/4 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))) (cbrt.f64 (/.f64 (pow.f64 i 6) (fma.f64 (*.f64 i 4) i -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i i) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))) (cbrt.f64 (/.f64 1/64 (fma.f64 (*.f64 i 4) i -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/4 (fma.f64 (*.f64 i 4) i -1)) (*.f64 i i))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 (pow.f64 i 4) 1/16)) (fma.f64 (*.f64 i 4) i -1)) (cbrt.f64 (*.f64 (*.f64 i i) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i i) (*.f64 (fma.f64 (*.f64 i 4) i -1) -4)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i i) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)) 4)) (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 (*.f64 i 4) i -1)) (*.f64 -1/4 (*.f64 i i)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))) (/.f64 i (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i i) (+.f64 (*.f64 -4 (*.f64 i i)) 1)) -1/4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 i i)) (/.f64 1 (*.f64 (fma.f64 (*.f64 i 4) i -1) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/4 (/.f64 (*.f64 i i) (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i i) (fma.f64 (*.f64 i 4) i -1)) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i i) (*.f64 (fma.f64 (*.f64 i 4) i -1) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 i i)) (*.f64 (fma.f64 (*.f64 i 4) i -1) -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 2)) (cbrt.f64 (*.f64 i i))) (cbrt.f64 (*.f64 (fma.f64 (*.f64 i 4) i -1) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 i i)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 2))) (cbrt.f64 (*.f64 (fma.f64 (*.f64 i 4) i -1) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 1/64 (pow.f64 i 6)) (fma.f64 (*.f64 i 4) i -1))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (cbrt.f64 4)) (/.f64 (fma.f64 (*.f64 i 4) i -1) (cbrt.f64 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (pow.f64 i 6) (fma.f64 (*.f64 i 4) i -1))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) 2) (*.f64 (fma.f64 (*.f64 i 4) i -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (*.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)) 2)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (cbrt.f64 (*.f64 (fma.f64 (*.f64 i 4) i -1) 4))) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 i 4) i -1) 4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 i i) 1/2) (*.f64 (fma.f64 (*.f64 i 4) i -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 i i)) (*.f64 (*.f64 (fma.f64 (*.f64 i 4) i -1) -4) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 i i)) (cbrt.f64 (*.f64 (pow.f64 i 4) 1/16))) (*.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 i 4) i -1) 4)) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 i i) (*.f64 (fma.f64 (*.f64 i 4) i -1) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/4 (*.f64 i i)) (+.f64 (*.f64 -4 (*.f64 i i)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (*.f64 1/64 (pow.f64 i 6)) (fma.f64 (*.f64 i 4) i -1))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 1/3)) (*.f64 (*.f64 i i) 1/4)) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/64 (fma.f64 (*.f64 i 4) i -1))) (*.f64 i i)) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 2)) (cbrt.f64 (*.f64 -1/4 (*.f64 i i)))) (cbrt.f64 (+.f64 (*.f64 -4 (*.f64 i i)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 2)) (cbrt.f64 (*.f64 (*.f64 i i) 1/4))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))) (cbrt.f64 (*.f64 (pow.f64 i 4) 1/16))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 i (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) (*.f64 i 1/4)) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 i 6) (fma.f64 (*.f64 i 4) i -1))) 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 i i) (/.f64 1/4 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/4 (*.f64 i i))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 2))) (cbrt.f64 (+.f64 (*.f64 -4 (*.f64 i i)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 i i) 1/4)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 2))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/4 (/.f64 (*.f64 i i) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 1/64 (pow.f64 i 6)) (fma.f64 (*.f64 i 4) i -1))) 1) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 i (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)) 4)) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 1/64 (pow.f64 i 6)) (fma.f64 (*.f64 i 4) i -1))) 1) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) -1) (+.f64 (*.f64 -4 (*.f64 i i)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (cbrt.f64 (*.f64 (fma.f64 (*.f64 i 4) i -1) 4))) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2) 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (fma.f64 (*.f64 i 4) i -1)) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/4 (*.f64 i i)) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (*.f64 1/64 (pow.f64 i 6)) (fma.f64 (*.f64 i 4) i -1)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 i i) (*.f64 (fma.f64 (*.f64 i 4) i -1) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 i i) (*.f64 (fma.f64 (*.f64 i 4) i -1) -4)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) 3))))))"]],"rules":[["egg-rr",81]],"time":24.10400390625,"type":"rewrite"},{"count":[[93,96]],"inputs":[["(*.f64 -1/4 (pow.f64 i 2))","(+.f64 (*.f64 -1 (pow.f64 i 4)) (*.f64 -1/4 (pow.f64 i 2)))","(+.f64 (*.f64 -1 (pow.f64 i 4)) (+.f64 (*.f64 -1/4 (pow.f64 i 2)) (*.f64 -4 (pow.f64 i 6))))","(+.f64 (*.f64 -16 (pow.f64 i 8)) (+.f64 (*.f64 -1 (pow.f64 i 4)) (+.f64 (*.f64 -1/4 (pow.f64 i 2)) (*.f64 -4 (pow.f64 i 6)))))","1/16","(+.f64 1/16 (*.f64 1/64 (/.f64 1 (pow.f64 i 2))))","(+.f64 (*.f64 1/256 (/.f64 1 (pow.f64 i 4))) (+.f64 1/16 (*.f64 1/64 (/.f64 1 (pow.f64 i 2)))))","(+.f64 (*.f64 1/256 (/.f64 1 (pow.f64 i 4))) (+.f64 1/16 (+.f64 (*.f64 1/1024 (/.f64 1 (pow.f64 i 6))) (*.f64 1/64 (/.f64 1 (pow.f64 i 2))))))","1/16","(+.f64 1/16 (*.f64 1/64 (/.f64 1 (pow.f64 i 2))))","(+.f64 (*.f64 1/256 (/.f64 1 (pow.f64 i 4))) (+.f64 1/16 (*.f64 1/64 (/.f64 1 (pow.f64 i 2)))))","(+.f64 (*.f64 1/256 (/.f64 1 (pow.f64 i 4))) (+.f64 1/16 (+.f64 (*.f64 1/1024 (/.f64 1 (pow.f64 i 6))) (*.f64 1/64 (/.f64 1 (pow.f64 i 2))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/4 (pow.f64 i 2))","(*.f64 (*.f64 -1/4 i) i)","(+.f64 (*.f64 -1 (pow.f64 i 4)) (*.f64 -1/4 (pow.f64 i 2)))","(fma.f64 -1/4 (*.f64 i i) (neg.f64 (pow.f64 i 4)))","(+.f64 (*.f64 -1 (pow.f64 i 4)) (+.f64 (*.f64 -1/4 (pow.f64 i 2)) (*.f64 -4 (pow.f64 i 6))))","(-.f64 (fma.f64 -4 (pow.f64 i 6) (*.f64 (*.f64 -1/4 i) i)) (pow.f64 i 4))","(+.f64 (*.f64 -16 (pow.f64 i 8)) (+.f64 (*.f64 -1 (pow.f64 i 4)) (+.f64 (*.f64 -1/4 (pow.f64 i 2)) (*.f64 -4 (pow.f64 i 6)))))","(fma.f64 -16 (pow.f64 i 8) (-.f64 (fma.f64 -4 (pow.f64 i 6) (*.f64 (*.f64 -1/4 i) i)) (pow.f64 i 4)))","1/16","(+.f64 1/16 (*.f64 1/64 (/.f64 1 (pow.f64 i 2))))","(fma.f64 1/64 (pow.f64 i -2) 1/16)","(+.f64 (*.f64 1/256 (/.f64 1 (pow.f64 i 4))) (+.f64 1/16 (*.f64 1/64 (/.f64 1 (pow.f64 i 2)))))","(fma.f64 1/256 (pow.f64 i -4) (fma.f64 1/64 (pow.f64 i -2) 1/16))","(+.f64 (*.f64 1/256 (/.f64 1 (pow.f64 i 4))) (+.f64 1/16 (+.f64 (*.f64 1/1024 (/.f64 1 (pow.f64 i 6))) (*.f64 1/64 (/.f64 1 (pow.f64 i 2))))))","(+.f64 (fma.f64 (pow.f64 i -4) 1/256 1/16) (fma.f64 1/1024 (pow.f64 i -6) (/.f64 1/64 (*.f64 i i))))","1/16","(+.f64 1/16 (*.f64 1/64 (/.f64 1 (pow.f64 i 2))))","(fma.f64 1/64 (pow.f64 i -2) 1/16)","(+.f64 (*.f64 1/256 (/.f64 1 (pow.f64 i 4))) (+.f64 1/16 (*.f64 1/64 (/.f64 1 (pow.f64 i 2)))))","(fma.f64 1/256 (pow.f64 i -4) (fma.f64 1/64 (pow.f64 i -2) 1/16))","(+.f64 (*.f64 1/256 (/.f64 1 (pow.f64 i 4))) (+.f64 1/16 (+.f64 (*.f64 1/1024 (/.f64 1 (pow.f64 i 6))) (*.f64 1/64 (/.f64 1 (pow.f64 i 2))))))","(+.f64 (fma.f64 (pow.f64 i -4) 1/256 1/16) (fma.f64 1/1024 (pow.f64 i -6) (/.f64 1/64 (*.f64 i i))))"]],"time":71.4150390625,"type":"simplify"},{"compiler":[[1827,1274]],"time":23.8759765625,"type":"eval"},{"alts":[["(/.f64 (*.f64 i (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))","next",22.098758598026176],["(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))","done",12.50390625],["(fma.f64 1/64 (pow.f64 i -2) 1/16)","fresh",34.109284205614536]],"compiler":[[24,18],[13,9],[7,6],[24,18],[7,6]],"count":[[97,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[96,2],"picked":[1,1]}],"min-error":[0],"time":18.89599609375,"type":"prune"},{"compiler":[[93,69]],"locations":[["(*.f64 i (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))",0.12109375,true],["(/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))",6.816761579500751,true],["(cbrt.f64 (fma.f64 (*.f64 i 4) i -1))",11.91926913237699,true],["(cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))",14.809746323846275,true]],"time":23.976806640625,"type":"localize"},{"count":[[4,16]],"series":[["(*.f64 i (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))","i","-inf",0.3330078125],["(*.f64 i (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))","i","inf",0.33203125],["(*.f64 i (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))","i","0",0.300048828125],["(/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))","i","-inf",0.3681640625],["(/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))","i","inf",0.554931640625],["(/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))","i","0",0.501953125],["(cbrt.f64 (fma.f64 (*.f64 i 4) i -1))","i","-inf",0.263916015625],["(cbrt.f64 (fma.f64 (*.f64 i 4) i -1))","i","inf",0.452880859375],["(cbrt.f64 (fma.f64 (*.f64 i 4) i -1))","i","0",0.887939453125],["(cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))","i","-inf",0.316162109375],["(cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))","i","inf",0.407958984375],["(cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))","i","0",0.452880859375]],"time":5.342041015625,"type":"series"},{"count":[[4,206]],"inputs":[["(cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))","(cbrt.f64 (fma.f64 (*.f64 i 4) i -1))","(/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))","(*.f64 i (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 0) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) (*.f64 0 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 (*.f64 i 4) i -1))) (cbrt.f64 (neg.f64 (fma.f64 (*.f64 i 4) i -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (+.f64 2/3 1))) (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (cbrt.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)) 0) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)) (*.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)) (*.f64 0 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (fma.f64 (*.f64 i 4) i -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 (*.f64 i 4) i -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (pow.f64 (*.f64 4 (*.f64 i i)) 3) -1)) (cbrt.f64 (+.f64 (+.f64 1 (*.f64 4 (*.f64 i i))) (pow.f64 (*.f64 4 (*.f64 i i)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 i 4) i -1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (fma.f64 (*.f64 i 4) i -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 (*.f64 i 4) i -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 0) (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) (*.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) (*.f64 0 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 i (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (/.f64 i (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 i) (/.f64 1 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) (cbrt.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/4 i) (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 i (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (cbrt.f64 (/.f64 1/64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 i (/.f64 1/4 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/4 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (/.f64 i (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 i 1/4)) (/.f64 (pow.f64 (*.f64 i 1/4) 2/3) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 2/3)) (*.f64 i 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 2/3))) (/.f64 i (cbrt.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)) 1/64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 i (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))) (/.f64 i (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/4 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) i)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 2/3))) (*.f64 -1/4 i))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 i (cbrt.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)) 1/64))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 i (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 i 1/4) 2/3) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) (cbrt.f64 (*.f64 i 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 i (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))) (/.f64 1/4 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 i (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) -1/4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/4 (/.f64 i (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 i (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 i (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 i) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) (cbrt.f64 i)) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 i) (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3)) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i 1/4) (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i 1/4) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 i (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 i (cbrt.f64 4)) (/.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) (cbrt.f64 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 i (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4))) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 i 2) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 i (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (cbrt.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)) 1/64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 i 1/2) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 i) (pow.f64 (*.f64 i 1/4) 2/3)) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 i) (*.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/4 i) (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 i (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 i (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) 1/4) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) (cbrt.f64 (*.f64 -1/4 i))) (cbrt.f64 (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) (cbrt.f64 (*.f64 i 1/4))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1/4 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) i) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (pow.f64 (*.f64 i 1/4) 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 2/3))) (*.f64 i 1/4)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 i (cbrt.f64 (/.f64 1/64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/4 (/.f64 i (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/4 i)) (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 i 1/4)) (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3)) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 i (cbrt.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)) 1/64))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) 1) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/4 i) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i 1/4) -1) (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) 1) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 i (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4))) (cbrt.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)) 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 i (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 i 1/4) 3) (pow.f64 (fma.f64 (*.f64 i 4) i -1) -2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 i (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 i (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 i 1/4) 3) (pow.f64 (fma.f64 (*.f64 i 4) i -1) -2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 0) (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) (*.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) (*.f64 0 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (*.f64 (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) i))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (*.f64 i i) -1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 i i) -1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) i) (cbrt.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) (cbrt.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 i (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (/.f64 i (cbrt.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)) 1/64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 i (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) i)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i (cbrt.f64 i)) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4)) (pow.f64 i 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 i (cbrt.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))) (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 i) (/.f64 (*.f64 (pow.f64 i 2/3) i) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 i 1/4) (/.f64 i (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 i (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) (*.f64 i 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 i (cbrt.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)) 1/64))) (/.f64 i (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 i 2/3) i) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4)) (cbrt.f64 i))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 i 2/3) (/.f64 (*.f64 i (cbrt.f64 i)) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 2/3)) (*.f64 (*.f64 i i) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) (*.f64 i (cbrt.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i i) (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) -1/4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 i i) -1/4) (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (neg.f64 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 i i) (/.f64 1/4 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i i) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 i i) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 i (neg.f64 i)) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 i) (*.f64 (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) i)) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 i) i) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (cbrt.f64 4)) (/.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) (cbrt.f64 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4))) (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) 2) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (cbrt.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)) 1/64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 i i)) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 i i) -1/4) (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 i i) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) (cbrt.f64 (*.f64 (*.f64 i i) 1/4))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 i i) 1/4) -1) (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 i (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (*.f64 i 1/4)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 i (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 i (/.f64 i (cbrt.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)) 1/64)))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 i i) 1/4)) (pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3)) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/4 i)) (*.f64 (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) i)) (cbrt.f64 (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 i 1/4)) (*.f64 (pow.f64 (/.f64 (*.f64 i 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 2/3) i)) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) 1) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 i i) -1/4) 1) (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) i) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 i i) -1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 i i) -1/4) 1) (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) -1) (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) 1) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4))))) (cbrt.f64 (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4))) (cbrt.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)) 1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 i i) 1) (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))) (neg.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 (*.f64 i i) 1/4) 3) (pow.f64 (fma.f64 (*.f64 i 4) i -1) -2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (*.f64 i i) -1/4) (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 i (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4)) i))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 i (/.f64 i (*.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3) -4))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (*.f64 i i) 1/4) (neg.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 i i) 1/4) 3) (pow.f64 (fma.f64 (*.f64 i 4) i -1) -2)))))))"]],"rules":[["egg-rr",80],["egg-rr",77],["egg-rr",20],["egg-rr",29]],"time":42.612060546875,"type":"rewrite"},{"count":[[222,236]],"inputs":[["1","(+.f64 (*.f64 -8/3 (pow.f64 i 2)) 1)","(+.f64 (*.f64 -8/3 (pow.f64 i 2)) (+.f64 1 (*.f64 -16/9 (pow.f64 i 4))))","(+.f64 (*.f64 -8/3 (pow.f64 i 2)) (+.f64 1 (+.f64 (*.f64 -256/81 (pow.f64 i 6)) (*.f64 -16/9 (pow.f64 i 4)))))","(cbrt.f64 -1)","(+.f64 (cbrt.f64 -1) (*.f64 4/3 (/.f64 (pow.f64 i 2) (pow.f64 (cbrt.f64 -1) 2))))","(+.f64 (cbrt.f64 -1) (+.f64 (*.f64 4/3 (/.f64 (pow.f64 i 2) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -16/9 (/.f64 (pow.f64 i 4) (pow.f64 (cbrt.f64 -1) 5)))))","(+.f64 (*.f64 320/81 (/.f64 (pow.f64 i 6) (pow.f64 (cbrt.f64 -1) 8))) (+.f64 (cbrt.f64 -1) (+.f64 (*.f64 4/3 (/.f64 (pow.f64 i 2) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -16/9 (/.f64 (pow.f64 i 4) (pow.f64 (cbrt.f64 -1) 5))))))","(*.f64 1/4 i)","(+.f64 (*.f64 1/4 i) (*.f64 2/3 (pow.f64 i 3)))","(+.f64 (*.f64 20/9 (pow.f64 i 5)) (+.f64 (*.f64 1/4 i) (*.f64 2/3 (pow.f64 i 3))))","(+.f64 (*.f64 20/9 (pow.f64 i 5)) (+.f64 (*.f64 1/4 i) (+.f64 (*.f64 640/81 (pow.f64 i 7)) (*.f64 2/3 (pow.f64 i 3)))))","(*.f64 1/4 (pow.f64 i 2))","(+.f64 (*.f64 2/3 (pow.f64 i 4)) (*.f64 1/4 (pow.f64 i 2)))","(+.f64 (*.f64 20/9 (pow.f64 i 6)) (+.f64 (*.f64 2/3 (pow.f64 i 4)) (*.f64 1/4 (pow.f64 i 2))))","(+.f64 (*.f64 20/9 (pow.f64 i 6)) (+.f64 (*.f64 2/3 (pow.f64 i 4)) (+.f64 (*.f64 1/4 (pow.f64 i 2)) (*.f64 640/81 (pow.f64 i 8)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 -8/3 (pow.f64 i 2)) 1)","(fma.f64 -8/3 (*.f64 i i) 1)","(+.f64 (*.f64 -8/3 (pow.f64 i 2)) (+.f64 1 (*.f64 -16/9 (pow.f64 i 4))))","(fma.f64 (*.f64 i i) -8/3 (fma.f64 (pow.f64 i 4) -16/9 1))","(+.f64 (*.f64 -8/3 (pow.f64 i 2)) (+.f64 1 (+.f64 (*.f64 -256/81 (pow.f64 i 6)) (*.f64 -16/9 (pow.f64 i 4)))))","(+.f64 (fma.f64 -8/3 (*.f64 i i) 1) (fma.f64 (pow.f64 i 4) -16/9 (*.f64 -256/81 (pow.f64 i 6))))","(cbrt.f64 -1)","-1","(+.f64 (cbrt.f64 -1) (*.f64 4/3 (/.f64 (pow.f64 i 2) (pow.f64 (cbrt.f64 -1) 2))))","(fma.f64 (*.f64 i i) 4/3 -1)","(+.f64 (cbrt.f64 -1) (+.f64 (*.f64 4/3 (/.f64 (pow.f64 i 2) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -16/9 (/.f64 (pow.f64 i 4) (pow.f64 (cbrt.f64 -1) 5)))))","(+.f64 -1 (fma.f64 (neg.f64 (pow.f64 i 4)) -16/9 (*.f64 (*.f64 4/3 i) i)))","(+.f64 (*.f64 320/81 (/.f64 (pow.f64 i 6) (pow.f64 (cbrt.f64 -1) 8))) (+.f64 (cbrt.f64 -1) (+.f64 (*.f64 4/3 (/.f64 (pow.f64 i 2) (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -16/9 (/.f64 (pow.f64 i 4) (pow.f64 (cbrt.f64 -1) 5))))))","(+.f64 (fma.f64 (pow.f64 i 6) 320/81 -1) (fma.f64 (neg.f64 (pow.f64 i 4)) -16/9 (*.f64 (*.f64 4/3 i) i)))","(*.f64 1/4 i)","(+.f64 (*.f64 1/4 i) (*.f64 2/3 (pow.f64 i 3)))","(fma.f64 2/3 (pow.f64 i 3) (*.f64 1/4 i))","(+.f64 (*.f64 20/9 (pow.f64 i 5)) (+.f64 (*.f64 1/4 i) (*.f64 2/3 (pow.f64 i 3))))","(fma.f64 (pow.f64 i 5) 20/9 (fma.f64 2/3 (pow.f64 i 3) (*.f64 1/4 i)))","(+.f64 (*.f64 20/9 (pow.f64 i 5)) (+.f64 (*.f64 1/4 i) (+.f64 (*.f64 640/81 (pow.f64 i 7)) (*.f64 2/3 (pow.f64 i 3)))))","(fma.f64 (pow.f64 i 5) 20/9 (fma.f64 1/4 i (fma.f64 640/81 (pow.f64 i 7) (*.f64 2/3 (pow.f64 i 3)))))","(*.f64 1/4 (pow.f64 i 2))","(*.f64 1/4 (*.f64 i i))","(+.f64 (*.f64 2/3 (pow.f64 i 4)) (*.f64 1/4 (pow.f64 i 2)))","(fma.f64 2/3 (pow.f64 i 4) (*.f64 1/4 (*.f64 i i)))","(+.f64 (*.f64 20/9 (pow.f64 i 6)) (+.f64 (*.f64 2/3 (pow.f64 i 4)) (*.f64 1/4 (pow.f64 i 2))))","(fma.f64 20/9 (pow.f64 i 6) (fma.f64 2/3 (pow.f64 i 4) (*.f64 1/4 (*.f64 i i))))","(+.f64 (*.f64 20/9 (pow.f64 i 6)) (+.f64 (*.f64 2/3 (pow.f64 i 4)) (+.f64 (*.f64 1/4 (pow.f64 i 2)) (*.f64 640/81 (pow.f64 i 8)))))","(fma.f64 20/9 (pow.f64 i 6) (fma.f64 2/3 (pow.f64 i 4) (fma.f64 640/81 (pow.f64 i 8) (*.f64 1/4 (*.f64 i i)))))"]],"time":59.970947265625,"type":"simplify"},{"compiler":[[6888,5152]],"time":86.3349609375,"type":"eval"},{"alts":[["(/.f64 (*.f64 i (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))","done",22.098758598026176],["(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))","done",12.50390625],["(fma.f64 1/64 (pow.f64 i -2) 1/16)","next",34.109284205614536]],"compiler":[[24,18],[13,9],[7,6],[7,6]],"count":[[239,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[236,0],"picked":[1,1]}],"min-error":[0],"time":26.1630859375,"type":"prune"},{"compiler":[[14,11]],"time":4.18994140625,"type":"localize"},{"compiler":[[1,1]],"time":0.086181640625,"type":"eval"},{"alts":[["(/.f64 (*.f64 i (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))","done",22.098758598026176],["(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))","done",12.50390625],["(fma.f64 1/64 (pow.f64 i -2) 1/16)","done",34.109284205614536]],"compiler":[[24,18],[13,9],[7,6]],"count":[[3,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":1.18798828125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[12.50390625],"branch":[["i",0.00390625,2],["(/.f64 (/.f64 (*.f64 (*.f64 i i) (*.f64 i i)) (*.f64 (*.f64 2 i) (*.f64 2 i))) (-.f64 (*.f64 (*.f64 2 i) (*.f64 2 i)) 1))",12.50390625,1]],"compiler":[[2,1],[26,17],[67,46]],"count":[[4,2]],"inputs":[["(/.f64 (*.f64 i (/.f64 (*.f64 i 1/4) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 i 4) i -1) 2)))) (cbrt.f64 (fma.f64 (*.f64 i 4) i -1)))","(fma.f64 1/64 (pow.f64 i -2) 1/16)","(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))","(/.f64 (/.f64 (*.f64 (*.f64 i i) (*.f64 i i)) (*.f64 (*.f64 2 i) (*.f64 2 i))) (-.f64 (*.f64 (*.f64 2 i) (*.f64 2 i)) 1))"]],"link":["."],"name":["Octave 3.8, jcobi/4, as called"],"oracle":[56.92149050445676],"outputs":[["(/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1))","(fma.f64 1/64 (pow.f64 i -2) 1/16)"]],"time":11.1689453125,"times":[["i",5.569091796875],["(/.f64 (/.f64 (*.f64 (*.f64 i i) (*.f64 i i)) (*.f64 (*.f64 2 i) (*.f64 2 i))) (-.f64 (*.f64 (*.f64 2 i) (*.f64 2 i)) 1))",4.27197265625]],"type":"regimes"},{"bstep":[[14.773869287503453,713775.0472954232,12.385986328125]],"compiler":[[28,19],[2,1]],"method":["binary-search"],"time":12.490966796875,"type":"bsearch"},{"compiler":[[23,17]],"inputs":[["(if (<=.f64 i 8316949027252621/562949953421312) (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) (fma.f64 1/64 (pow.f64 i -2) 1/16))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 i 8316949027252621/562949953421312) (/.f64 (*.f64 (*.f64 i i) 1/4) (fma.f64 (*.f64 i 4) i -1)) (fma.f64 1/64 (pow.f64 i -2) 1/16))"]],"stop":[["done",1]],"time":21.125,"type":"simplify"},{"time":0.02197265625,"type":"soundness"},{"compiler":[[23,17]],"remove-preprocessing":[[]],"time":12.782958984375,"type":"end"}]
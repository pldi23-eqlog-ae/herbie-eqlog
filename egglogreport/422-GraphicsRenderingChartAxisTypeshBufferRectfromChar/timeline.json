[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.755126953125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.031982421875,1],["body",1024,"valid",18.8427734375,220],["body",512,"valid",8.391845703125,145],["body",2048,"valid",19.782470703125,174],["body",256,"valid",261.77392578125,7717]],"time":318.83984375,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(+.f64 x (/.f64 (-.f64 x y) 2))","(+.f64 y (/.f64 (-.f64 y x) 2))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 x (/.f64 (-.f64 x y) 2))","(fma.f64 (-.f64 x y) 1/2 x)","(+.f64 y (/.f64 (-.f64 y x) 2))","(fma.f64 (-.f64 y x) 1/2 y)"]],"symmetry":[[]],"time":59.537109375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 x (/.f64 (-.f64 x y) 2))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (-.f64 x y) 2))","(fma.f64 (-.f64 x y) 1/2 x)"]],"time":18.907958984375,"type":"simplify"},{"compiler":[[15,8]],"time":0.35009765625,"type":"eval"},{"alts":[["(fma.f64 (-.f64 x y) 1/2 x)","next",0.08203125]],"compiler":[[8,5],[8,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.08203125],"time":0.827880859375,"type":"prune"},{"compiler":[[14,6]],"locations":[["(fma.f64 (-.f64 x y) 1/2 x)",0.01171875,true]],"time":3.3310546875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (-.f64 x y) 1/2 x)","y","-inf",0.3388671875],["(fma.f64 (-.f64 x y) 1/2 x)","y","inf",0.3291015625],["(fma.f64 (-.f64 x y) 1/2 x)","y","0",0.31103515625],["(fma.f64 (-.f64 x y) 1/2 x)","x","-inf",0.39599609375],["(fma.f64 (-.f64 x y) 1/2 x)","x","inf",0.404052734375],["(fma.f64 (-.f64 x y) 1/2 x)","x","0",0.429931640625]],"time":2.322998046875,"type":"series"},{"count":[[1,39]],"inputs":[["(fma.f64 (-.f64 x y) 1/2 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 y x) -1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 y x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (-.f64 x y) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 x y) 1/2 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (-.f64 y x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 (*.f64 (-.f64 y x) 1/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (-.f64 y x) -1/2) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (-.f64 y x) 1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 x y) 1/2 x)) (pow.f64 (fma.f64 (-.f64 x y) 1/2 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (-.f64 x y) 1/2 x) 2/3) (cbrt.f64 (fma.f64 (-.f64 x y) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 (-.f64 y x) 1/2) x)) (neg.f64 (pow.f64 (fma.f64 (-.f64 x y) 1/2 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 y x) -1/2) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (-.f64 y x) -1/2))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (-.f64 y x) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 y x) -1/2) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 (-.f64 y x) -1/2)) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 (-.f64 y x) -1/2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 (-.f64 y x) 1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (-.f64 y x) 1/2) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 x y) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 x y) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (-.f64 x y) 1/2 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 x y) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 y x) 1/2) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x 2) (-.f64 y x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 x y) 1/2 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 x y) 1/2 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 x y) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (-.f64 y x) 1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 x y) 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (-.f64 y x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (-.f64 y x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 x y) (sqrt.f64 1/2)) (sqrt.f64 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 y x) -1/2)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 y x) -1/2) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x y)) (*.f64 (pow.f64 (-.f64 x y) 2/3) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 x y) (cbrt.f64 1/2)) (cbrt.f64 1/4) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x y) 1/2 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (-.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (-.f64 y x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (-.f64 y x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (-.f64 y x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 y x) -1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 y x) -1/2) 1 x)))))"]],"rules":[["egg-rr",39]],"time":38.614013671875,"type":"rewrite"},{"count":[[63,46]],"inputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 1/2 x) x)","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(*.f64 -1/2 y)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(*.f64 -1/2 y)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 1/2 x) x)","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(*.f64 -1/2 y)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(*.f64 -1/2 y)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 x 3/2 (*.f64 -1/2 y))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 x 3/2 (*.f64 -1/2 y))"]],"time":83.722900390625,"type":"simplify"},{"compiler":[[459,249]],"time":7.132080078125,"type":"eval"},{"alts":[["(fma.f64 x 3/2 (*.f64 -1/2 y))","next",0]],"compiler":[[8,6],[8,6]],"count":[[47,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[46,1],"picked":[1,0]}],"min-error":[0],"time":7.134033203125,"type":"prune"},{"compiler":[[15,10]],"locations":[["(fma.f64 x 3/2 (*.f64 -1/2 y))",0.0703125,true]],"time":3.887939453125,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 x 3/2 (*.f64 -1/2 y))","y","-inf",0.241943359375],["(fma.f64 x 3/2 (*.f64 -1/2 y))","y","inf",0.27099609375],["(fma.f64 x 3/2 (*.f64 -1/2 y))","y","0",0.2919921875],["(fma.f64 x 3/2 (*.f64 -1/2 y))","x","-inf",0.2099609375],["(fma.f64 x 3/2 (*.f64 -1/2 y))","x","inf",0.201904296875],["(fma.f64 x 3/2 (*.f64 -1/2 y))","x","0",0.348876953125]],"time":1.64111328125,"type":"series"},{"count":[[1,43]],"inputs":[["(fma.f64 x 3/2 (*.f64 -1/2 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 3/2) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/2 y) (*.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 3/2 (*.f64 -1/2 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x 3/2 (*.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 -1/2 y) (*.f64 -3/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x 3/2) (*.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 -3/2 x) (*.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 3/2 (*.f64 -1/2 y))) (pow.f64 (fma.f64 x 3/2 (*.f64 -1/2 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x 3/2 (*.f64 -1/2 y)) 2/3) (cbrt.f64 (fma.f64 x 3/2 (*.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 -3/2 x) (*.f64 1/2 y))) (neg.f64 (pow.f64 (fma.f64 x 3/2 (*.f64 -1/2 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/4)) (-.f64 (pow.f64 (*.f64 -1/2 y) 2/3) (*.f64 (cbrt.f64 (*.f64 x 3/2)) (cbrt.f64 (*.f64 -1/2 y))))) (+.f64 (cbrt.f64 (*.f64 x 3/2)) (cbrt.f64 (*.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 -1/2 y) 2/3) (-.f64 (cbrt.f64 (*.f64 (*.f64 x x) 9/4)) (*.f64 (cbrt.f64 (*.f64 -1/2 y)) (cbrt.f64 (*.f64 x 3/2))))) (+.f64 (cbrt.f64 (*.f64 -1/2 y)) (cbrt.f64 (*.f64 x 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 -3/2 x) (*.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -3/2 x) (*.f64 1/2 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 3/2 (*.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 3/2 (*.f64 -1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x 3/2 (*.f64 -1/2 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x 3/2 (*.f64 -1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -3/2 x) (*.f64 1/2 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 3/2 (*.f64 -1/2 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 3/2 (*.f64 -1/2 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 3/2 (*.f64 -1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 -3/2 x) (*.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 3/2 (*.f64 -1/2 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) 3/2) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 3/2)) (cbrt.f64 9/4) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 3/2)) (cbrt.f64 (*.f64 (*.f64 x x) 9/4)) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 3/2)) (sqrt.f64 3/2) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (*.f64 (cbrt.f64 1/4) y) (*.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) -1/2) (*.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 -1/2 y) 2/3) (cbrt.f64 (*.f64 -1/2 y)) (*.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 -1/2)) (cbrt.f64 1/4) (*.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/2 y)) (pow.f64 (*.f64 -1/2 y) 2/3) (*.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/8 y)) (pow.f64 y 2/3) (*.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 3/2 (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3/2 x (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -1/2 (*.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 y (*.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 1/2 y) (*.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 3/2) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 3/2) 1 (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/2 y) 1 (*.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -1/2 y) (*.f64 x 3/2))))))"]],"rules":[["egg-rr",43]],"time":36.22802734375,"type":"rewrite"},{"count":[[67,47]],"inputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))"]],"time":77.8798828125,"type":"simplify"},{"compiler":[[470,353]],"time":7.89404296875,"type":"eval"},{"alts":[["(fma.f64 x 3/2 (*.f64 -1/2 y))","done",0]],"compiler":[[8,6]],"count":[[48,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[47,0],"picked":[1,1]}],"min-error":[0],"time":7.632080078125,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(+.f64 x (/.f64 (-.f64 x y) 2))",0,1]],"compiler":[[3,2],[3,2],[9,6],[21,12]],"count":[[3,1]],"inputs":[["(fma.f64 x 3/2 (*.f64 -1/2 y))","(fma.f64 (-.f64 x y) 1/2 x)","(+.f64 x (/.f64 (-.f64 x y) 2))"]],"link":["."],"name":["Graphics.Rendering.Chart.Axis.Types:hBufferRect from Chart-1.5.3"],"oracle":[0.08203125],"outputs":[["(fma.f64 x 3/2 (*.f64 -1/2 y))"]],"time":8.723876953125,"times":[["x",2.75390625],["y",2.576171875],["(+.f64 x (/.f64 (-.f64 x y) 2))",2.72607421875]],"type":"regimes"},{"compiler":[[8,6]],"inputs":[["(fma.f64 x 3/2 (*.f64 -1/2 y))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x 3/2 (*.f64 -1/2 y))"]],"stop":[["done",1]],"time":34.803955078125,"type":"simplify"},{"time":0.01708984375,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":8.863037109375,"type":"end"}]
[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.7921945555135608,0.20682912040501833,0.0009763240814208984],[11,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[10,0.6087800525128841,0.39024362340569496,0.0009763240814208984],[9,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[8,0.31219489872455597,0.6868287771940231,0.0009763240814208984],[7,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[6,0.0,0.9990236759185791,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":49.281982421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.072021484375,2],["body",256,"valid",309.2509765625,8256]],"time":317.071044921875,"type":"sample"},{"compiler":[[11,7]],"inputs":[["0","1"],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","(/.f64 (+.f64 y x) (*.f64 (*.f64 y 2) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","(/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))","(/.f64 (+.f64 y x) (*.f64 (*.f64 y 2) x))","(/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))"]],"symmetry":[[]],"time":57.838134765625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","(/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))"]],"time":17.7109375,"type":"simplify"},{"compiler":[[20,11]],"time":0.362060546875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","next",14.81204757690762]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[14.81204757690762],"time":0.8359375,"type":"prune"},{"compiler":[[25,13]],"locations":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))",14.23426054938465,true]],"time":5.702880859375,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","y","-inf",0.7060546875],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","y","inf",0.517822265625],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","y","0",0.450927734375],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","x","-inf",0.552978515625],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","x","inf",0.55419921875],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","x","0",0.56298828125]],"time":3.43115234375,"type":"series"},{"count":[[1,97]],"inputs":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 0) (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) (*.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 -1 y) (*.f64 -2 x)) x) (*.f64 (/.f64 (/.f64 -1 y) (*.f64 -2 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 -1 y) (*.f64 -2 x)) y) (*.f64 (/.f64 (/.f64 -1 y) (*.f64 -2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))) (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) (*.f64 0 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 (/.f64 -1 y) (*.f64 -2 x))) (*.f64 y (/.f64 (/.f64 -1 y) (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 (/.f64 -1 y) (*.f64 -2 x))) (*.f64 x (/.f64 (/.f64 -1 y) (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 x y) (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -2 (*.f64 x y))) (/.f64 (+.f64 x y) (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 x y) (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) x) (/.f64 -1 (*.f64 -2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 (+.f64 x x) y))) (pow.f64 (cbrt.f64 (*.f64 (+.f64 x x) y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 x y) (+.f64 x x)) (cbrt.f64 y)) (/.f64 1 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (/.f64 1 (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) y) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) (+.f64 x x)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) x) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 (/.f64 -1 y) (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 y) (*.f64 -2 x)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (+.f64 x x)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 (+.f64 x y) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 -1 y) (*.f64 -2 x))) (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (*.f64 -2 x)) (/.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (/.f64 (+.f64 x y) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 y y)) (/.f64 (cbrt.f64 (+.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (*.f64 -2 (*.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (*.f64 (+.f64 x x) y)) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))) (cbrt.f64 (/.f64 (/.f64 -1 y) (*.f64 -2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 x x)) (/.f64 (cbrt.f64 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 -2 (*.f64 x y))) (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) y) (/.f64 (cbrt.f64 (+.f64 x y)) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) y) (/.f64 -1 (*.f64 -2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (+.f64 y y)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (*.f64 -2 x)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) y) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) x) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 2)) (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 x x)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (+.f64 x y)) x) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 x) (+.f64 x y)) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (+.f64 x y)) y) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (*.f64 (+.f64 x y) 1/2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (+.f64 x y)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (neg.f64 (+.f64 x y))) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (+.f64 x y)) (+.f64 x x)) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (+.f64 y y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 x x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (+.f64 y y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) y)) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) x) 1) (+.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 -2 x)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) y) 1) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) 1/2) (/.f64 1 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 x y)) (/.f64 1 y)) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 x x))) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (*.f64 (cbrt.f64 y) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) 1/2) 1) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 x x))) 1) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 x x))) (*.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (*.f64 -2 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 x y) x)) (*.f64 -2 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 x y) y)) (*.f64 -2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (*.f64 -2 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (+.f64 x y) (+.f64 x x)) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (*.f64 (+.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (+.f64 x x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (+.f64 x x)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 (+.f64 x x) y))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 2)) (cbrt.f64 (+.f64 x y))) (cbrt.f64 (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 2)) (cbrt.f64 (neg.f64 (+.f64 x y)))) (cbrt.f64 (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 -1 y) (*.f64 -2 x))) (+.f64 x y)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 (+.f64 x y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 x x)))) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 2))) (cbrt.f64 (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 2))) (cbrt.f64 (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))) (cbrt.f64 (*.f64 (+.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 (+.f64 x x) y))) 1) (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (+.f64 x y) (+.f64 x x)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) x) (/.f64 1 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 x x))) (/.f64 1 y)) (cbrt.f64 (*.f64 (*.f64 x x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 (+.f64 x x) y)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 x x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x y) (*.f64 -2 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 -2 (*.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (+.f64 x y) (+.f64 x x)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y)) 3))))))"]],"rules":[["egg-rr",97]],"time":23.798828125,"type":"rewrite"},{"count":[[121,101]],"inputs":[["(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"time":82.30810546875,"type":"simplify"},{"compiler":[[1509,618]],"time":14.30810546875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","done",14.81204757690762],["(*.f64 (/.f64 (+.f64 x y) y) (/.f64 -1 (*.f64 -2 x)))","fresh",7.662441259768442],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","next",0.01953125]],"compiler":[[11,7],[13,9],[9,7],[13,9],[9,7]],"count":[[102,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[101,2],"picked":[1,1]}],"min-error":[0],"time":19.139892578125,"type":"prune"},{"compiler":[[18,12]],"locations":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))",0.01953125,true]],"time":4.634033203125,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","x","-inf",0.193115234375],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","x","inf",0.2421875],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","x","0",0.31201171875],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","y","-inf",0.248046875],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","y","inf",0.2509765625],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","y","0",0.408935546875]],"time":1.73486328125,"type":"series"},{"count":[[1,107]],"inputs":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/2 y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/2 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) (*.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 0) (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) (*.f64 0 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/2 x) (/.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/2 y) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 -1/2 x) (/.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 -1/2 x) (/.f64 -1/2 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (+.f64 (/.f64 (cbrt.f64 1/4) x) (/.f64 (cbrt.f64 1/4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (+.f64 (/.f64 (cbrt.f64 1/4) y) (/.f64 (cbrt.f64 1/4) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (/.f64 1/4 (*.f64 y y))) (-.f64 (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (cbrt.f64 (/.f64 1/4 (*.f64 y x))))) (+.f64 (cbrt.f64 (/.f64 1/2 y)) (cbrt.f64 (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (-.f64 (cbrt.f64 (/.f64 1/4 (*.f64 y y))) (cbrt.f64 (/.f64 1/4 (*.f64 y x))))) (+.f64 (cbrt.f64 (/.f64 1/2 x)) (cbrt.f64 (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (+.f64 x y)) (/.f64 1 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 2)) (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (+.f64 y x) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 y x)) (*.f64 1/2 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (+.f64 (/.f64 -1 x) (/.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/2) (+.f64 (/.f64 (sqrt.f64 1/2) x) (/.f64 (sqrt.f64 1/2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/2) (+.f64 (/.f64 (sqrt.f64 1/2) y) (/.f64 (sqrt.f64 1/2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (+.f64 (/.f64 -1 y) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 1/2 (+.f64 x y))) (/.f64 1 (neg.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 (*.f64 y x))) (pow.f64 (cbrt.f64 (*.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 x) (*.f64 (*.f64 y 2) -1/2)) (*.f64 (*.f64 y 2) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 y 2) (cbrt.f64 (/.f64 1/8 x)))) (*.f64 (*.f64 y 2) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x 2) (*.f64 y 2)) (*.f64 (*.f64 y 2) (*.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (*.f64 (*.f64 y 2) 1/2)) (*.f64 (*.f64 y 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (cbrt.f64 (*.f64 x x))) (*.f64 y (cbrt.f64 (/.f64 1/8 x)))) (*.f64 y (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (*.f64 x 2)) y) (*.f64 y (*.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 (cbrt.f64 (*.f64 x x))) (*.f64 (neg.f64 y) (cbrt.f64 (/.f64 1/8 x)))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 (*.f64 x 2)) (neg.f64 y)) (*.f64 (neg.f64 y) (*.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 y)) (neg.f64 x)) (*.f64 (cbrt.f64 (*.f64 y y)) -1/2)) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 y)) (cbrt.f64 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (/.f64 1/8 x)))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 y)) (*.f64 x 2)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 y)) x) (cbrt.f64 (*.f64 (*.f64 y y) 1/8))) (*.f64 (cbrt.f64 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 x)) (neg.f64 y)) (*.f64 (cbrt.f64 (*.f64 x x)) -1/2)) (*.f64 (cbrt.f64 (*.f64 x x)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 x)) (cbrt.f64 (*.f64 y y))) (*.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (/.f64 1/8 y)))) (*.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 x)) y) (*.f64 (cbrt.f64 (*.f64 x x)) 1/2)) (*.f64 (cbrt.f64 (*.f64 x x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (/.f64 1/8 x)) (*.f64 y 2)) (cbrt.f64 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/8)) (*.f64 x (cbrt.f64 (/.f64 1/8 y)))) (*.f64 (cbrt.f64 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 1/2 (*.f64 y 2)) x) (*.f64 x (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 x) (cbrt.f64 (/.f64 1/8 y)))) (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/2 (*.f64 y 2)) (neg.f64 x)) (*.f64 (neg.f64 x) (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 y) (*.f64 (*.f64 x 2) -1/2)) (*.f64 (*.f64 x 2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (*.f64 x 2) (cbrt.f64 (/.f64 1/8 y)))) (*.f64 (*.f64 x 2) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 y (*.f64 (*.f64 x 2) 1/2)) (*.f64 (*.f64 x 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y 2) (*.f64 x 2)) (*.f64 (*.f64 x 2) (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (+.f64 x y)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 1/2 (+.f64 x y))) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 2)) (cbrt.f64 (*.f64 1/2 (+.f64 x y)))) (cbrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 1/2 (+.f64 x y))) 1) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/2 (+.f64 x y))) (cbrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 2))) (cbrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 1/2 (+.f64 x y))) y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (neg.f64 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (*.f64 y (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 1/2 (+.f64 x y))) x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 1/2 (+.f64 x y))) (neg.f64 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 -1/2 x) (/.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/2 (/.f64 (+.f64 y x) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (neg.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/2 y)) (cbrt.f64 (/.f64 1/4 (*.f64 y y))) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/2 x)) (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 1 y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 1 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 y)) (cbrt.f64 (/.f64 1/8 (*.f64 y y))) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 1/2) (cbrt.f64 y)) (/.f64 (sqrt.f64 1/2) (cbrt.f64 (*.f64 y y))) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (/.f64 (cbrt.f64 1/4) y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (/.f64 (sqrt.f64 1/2) y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (/.f64 -1 y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) 1/2 (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1/2 y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/4 (*.f64 y y))) (cbrt.f64 (/.f64 1/2 y)) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (/.f64 (sqrt.f64 1/2) x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (cbrt.f64 (/.f64 1/2 x)) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (/.f64 (cbrt.f64 1/4) x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (/.f64 -1 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) 1/2 (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1/2 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 1/2) (cbrt.f64 x)) (/.f64 (sqrt.f64 1/2) (cbrt.f64 (*.f64 x x))) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (/.f64 1/8 (*.f64 x x))) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1/2 y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1/2 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 y) 1 (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 x) 1 (/.f64 1/2 y))))))"]],"rules":[["egg-rr",107]],"time":26.177001953125,"type":"rewrite"},{"count":[[131,110]],"inputs":[["(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"time":82.34716796875,"type":"simplify"},{"compiler":[[1459,872]],"time":18.15380859375,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","done",14.81204757690762],["(*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))","next",7.662441259768442],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","done",0.01953125]],"compiler":[[11,7],[13,9],[9,7],[13,9]],"count":[[113,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[110,1],"picked":[1,1]}],"min-error":[0],"time":24.481201171875,"type":"prune"},{"compiler":[[35,18]],"locations":[["(/.f64 (*.f64 1/2 (+.f64 x y)) y)",0.0234375,true],["(*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))",7.114940306330579,true]],"time":7.56494140625,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 (*.f64 1/2 (+.f64 x y)) y)","y","-inf",0.252197265625],["(/.f64 (*.f64 1/2 (+.f64 x y)) y)","y","inf",0.219970703125],["(/.f64 (*.f64 1/2 (+.f64 x y)) y)","y","0",0.330078125],["(/.f64 (*.f64 1/2 (+.f64 x y)) y)","x","-inf",0.30078125],["(/.f64 (*.f64 1/2 (+.f64 x y)) y)","x","inf",0.240966796875],["(/.f64 (*.f64 1/2 (+.f64 x y)) y)","x","0",0.285888671875],["(*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))","y","-inf",0.16796875],["(*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))","y","inf",0.1728515625],["(*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))","y","0",0.151123046875],["(*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))","x","-inf",0.172119140625],["(*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))","x","inf",0.205078125],["(*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))","x","0",0.203857421875]],"time":2.8720703125,"type":"series"},{"count":[[2,171]],"inputs":[["(*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))","(/.f64 (*.f64 1/2 (+.f64 x y)) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 0) (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) (*.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x)) (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) (*.f64 0 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (*.f64 x y))) (/.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 2)) (cbrt.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y)) (/.f64 (/.f64 1 x) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 x)) (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (/.f64 (*.f64 1/2 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) x) (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 (*.f64 1/2 (+.f64 x y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 (*.f64 1/2 (+.f64 x y)) y)) (cbrt.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2)) x) (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 (*.f64 1/2 (+.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 x -2))) (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 x) (cbrt.f64 (*.f64 y y))) (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2)) (/.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (+.f64 x y)) (/.f64 (/.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) x) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 (+.f64 x y)) (/.f64 1 (neg.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 x) y) (*.f64 1/2 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 (*.f64 x y))) (cbrt.f64 (pow.f64 (*.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (/.f64 (*.f64 x y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (/.f64 (neg.f64 (*.f64 x y)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 2)) (cbrt.f64 (*.f64 1/2 (+.f64 x y)))) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 2)) (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 2)) (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y)) (/.f64 1 x)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 x)) (/.f64 1 y)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 x) (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/2 (+.f64 x y)) (/.f64 (/.f64 1 x) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 (*.f64 1/2 (+.f64 x y)) y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 x -2)) (/.f64 (*.f64 1/2 (+.f64 x y)) y))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) x) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/2 (+.f64 x y)) (*.f64 (/.f64 1 y) (cbrt.f64 (pow.f64 x -2)))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/2 (+.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 2))) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 2))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/2 (+.f64 x y))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2)) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/2 (+.f64 x y))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2)) x)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) x) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) x) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (*.f64 x (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (*.f64 y (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 x)) (*.f64 (cbrt.f64 (*.f64 x x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (cbrt.f64 x)) 1) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y) (cbrt.f64 x)) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (/.f64 (neg.f64 (*.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (+.f64 x y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (+.f64 x y)) (/.f64 (neg.f64 (*.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (+.f64 x y)) (/.f64 (*.f64 x y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (+.f64 x y)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (cbrt.f64 x))) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 x) (/.f64 (*.f64 1/2 (+.f64 x y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 x) (/.f64 (*.f64 -1/2 (+.f64 x y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y) 0) (/.f64 (*.f64 1/2 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) (*.f64 1/2 x)) (*.f64 (/.f64 1 y) (*.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) (*.f64 1/2 y)) (*.f64 (/.f64 1 y) (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 0) (/.f64 (*.f64 1/2 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 -1/2 (+.f64 x y)) y)) (/.f64 (*.f64 1/2 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 x) (/.f64 1 y)) (*.f64 (*.f64 1/2 y) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 y) (/.f64 1 y)) (*.f64 (*.f64 1/2 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) (/.f64 (*.f64 1/2 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (*.f64 0 (/.f64 (*.f64 1/2 (+.f64 x y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 -1/2 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (*.f64 -1/2 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) (cbrt.f64 (/.f64 1/8 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (+.f64 x y))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (+.f64 x y)) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 y)) (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (+.f64 x y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2)) (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 1/2 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 (+.f64 x y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/2 (+.f64 x y)) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 1/2 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 -1/2 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/2 (+.f64 x y)) 2) (*.f64 y y))) (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 y) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (*.f64 -1/2 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (/.f64 1/8 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/8 (*.f64 y y))) (/.f64 (+.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/2 (+.f64 x y)) 2)) y) (cbrt.f64 (*.f64 1/2 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (+.f64 x y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (+.f64 x y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (*.f64 y 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 1/2 (+.f64 x y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) 1/2) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) (cbrt.f64 (pow.f64 (*.f64 1/2 (+.f64 x y)) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2)) (cbrt.f64 (*.f64 1/2 (+.f64 x y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2)) (cbrt.f64 (*.f64 -1/2 (+.f64 x y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/8 y)) (+.f64 x y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (cbrt.f64 (/.f64 1/8 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/2 (+.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/2 (+.f64 x y))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/2 (+.f64 x y)) 2) (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/2 (+.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/2 (+.f64 x y))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 1/2 (+.f64 x y)) 2) (*.f64 y y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (/.f64 (neg.f64 y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (neg.f64 (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 -1/2 (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) 3))))))"]],"rules":[["egg-rr",73],["egg-rr",98]],"time":31.81884765625,"type":"rewrite"},{"count":[[219,180]],"inputs":[["(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(*.f64 1/2 (/.f64 x y))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(*.f64 1/2 (/.f64 x y))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(*.f64 1/2 (/.f64 x y))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(*.f64 1/2 (/.f64 x y))","(/.f64 (*.f64 1/2 x) y)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(*.f64 1/2 (/.f64 x y))","(/.f64 (*.f64 1/2 x) y)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(*.f64 1/2 (/.f64 x y))","(/.f64 (*.f64 1/2 x) y)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","1/2","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)","(+.f64 1/2 (*.f64 1/2 (/.f64 x y)))","(fma.f64 (/.f64 x y) 1/2 1/2)"]],"time":159.203125,"type":"simplify"},{"compiler":[[2838,1510]],"time":29.52490234375,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","done",14.81204757690762],["(*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))","done",7.662441259768442],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","done",0.01953125]],"compiler":[[11,7],[13,9],[9,7]],"count":[[183,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[180,0],"picked":[1,1]}],"min-error":[0],"time":47.01611328125,"type":"prune"},{"accuracy":[0.01953125],"baseline":[0.01953125],"branch":[["x",0.01953125,1],["y",0.01953125,1],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))",0.01953125,1]],"compiler":[[3,2],[3,2],[11,7],[40,24]],"count":[[4,1]],"inputs":[["(*.f64 (/.f64 (*.f64 1/2 (+.f64 x y)) y) (/.f64 1 x))","(*.f64 (/.f64 (+.f64 x y) y) (/.f64 -1 (*.f64 -2 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))"]],"link":["."],"name":["Linear.Projection:inversePerspective from linear-1.19.1.3, C"],"oracle":[22.345582586676066],"outputs":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"time":9.85400390625,"times":[["x",2.93896484375],["y",3.161865234375],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))",2.8427734375]],"type":"regimes"},{"compiler":[[9,7]],"inputs":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"stop":[["done",1]],"time":19.909912109375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[9,7]],"remove-preprocessing":[[]],"time":8.193115234375,"type":"end"}]
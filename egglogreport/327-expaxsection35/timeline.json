[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.7336580120027065,0.04585362575016916,0.22048836224712431],[11,0.7336580120027065,0.06048776162788272,0.20585422636941075],[10,0.7180482670664787,0.08975603338330984,0.19219569955021143],[9,0.7180482670664787,0.11707308702170849,0.16487864591181278],[8,0.6868287771940231,0.17170719429850578,0.14146402850747108],[7,0.6868287771940231,0.21853642910718918,0.09463479369878769],[6,0.6243897974491119,0.31219489872455597,0.06341530382633209],[5,0.6243897974491119,0.37463387846946716,0.0009763240814208984],[4,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[3,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":12.217041015625,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.61328125,323],["body",1024,"valid",232.642333984375,1802],["body",512,"valid",86.296142578125,1175],["body",2048,"valid",363.260498046875,1501],["body",256,"valid",136.602783203125,3778]],"time":839.3349609375,"type":"sample"},{"compiler":[[8,6]],"inputs":[["0","1"],["(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 x a)) 1)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 x a)) 1)","(expm1.f64 (*.f64 a x))"]],"symmetry":[[]],"time":59.43017578125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (exp.f64 (*.f64 a x)) 1)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))"]],"time":37.677978515625,"type":"simplify"},{"compiler":[[12,7]],"time":0.300048828125,"type":"eval"},{"alts":[["(expm1.f64 (*.f64 a x))","next",0.00390625]],"compiler":[[6,4],[6,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.784912109375,"type":"prune"},{"compiler":[[11,4]],"locations":[["(expm1.f64 (*.f64 a x))",0.00390625,true]],"time":2.626953125,"type":"localize"},{"count":[[1,24]],"series":[["(expm1.f64 (*.f64 a x))","x","-inf",0.19384765625],["(expm1.f64 (*.f64 a x))","x","inf",0.216064453125],["(expm1.f64 (*.f64 a x))","x","0",0.31201171875],["(expm1.f64 (*.f64 a x))","a","-inf",0.237060546875],["(expm1.f64 (*.f64 a x))","a","inf",0.20703125],["(expm1.f64 (*.f64 a x))","a","0",0.5361328125]],"time":1.783935546875,"type":"series"},{"count":[[1,80]],"inputs":[["(expm1.f64 (*.f64 a x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (expm1.f64 (*.f64 a x)) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 (*.f64 (*.f64 a x) 3)) (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) (neg.f64 (/.f64 1 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (expm1.f64 (*.f64 a x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (expm1.f64 (*.f64 a x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (*.f64 a x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (exp.f64 (*.f64 a x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (expm1.f64 (*.f64 a x)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (expm1.f64 (*.f64 a x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (*.f64 a x)) 3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (*.f64 (*.f64 a x) 3)) (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) (/.f64 1 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (expm1.f64 (*.f64 a x)) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 0 (/.f64 (exp.f64 (*.f64 (*.f64 a x) 3)) (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))))) (/.f64 1 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (*.f64 (*.f64 a x) 3)) (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) (-.f64 (/.f64 1 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (exp.f64 (*.f64 a x)) 1/2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (neg.f64 (expm1.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 (*.f64 (*.f64 a x) 3)) (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) (+.f64 (/.f64 1 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (exp.f64 (*.f64 (*.f64 a x) 3)) (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) 1) (/.f64 (/.f64 1 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (expm1.f64 (*.f64 a x)) (/.f64 0 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (*.f64 a x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (expm1.f64 (*.f64 a x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (expm1.f64 (*.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (expm1.f64 (*.f64 a x)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (exp.f64 (*.f64 a x)) 3) 4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (exp.f64 (*.f64 a x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1 (neg.f64 (exp.f64 (*.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 4 (exp.f64 (*.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 2 (exp.f64 (*.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (neg.f64 (expm1.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (neg.f64 (expm1.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (expm1.f64 (*.f64 a x))) (pow.f64 (expm1.f64 (*.f64 a x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (expm1.f64 (*.f64 a x)) 2/3) (cbrt.f64 (expm1.f64 (*.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (expm1.f64 (*.f64 a x)))) (pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (expm1.f64 (*.f64 a x)) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (expm1.f64 (*.f64 a x))) 4)) (cbrt.f64 (expm1.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (expm1.f64 (*.f64 a x)))) (neg.f64 (pow.f64 (expm1.f64 (*.f64 a x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (expm1.f64 (*.f64 a x)) 2/3) (-.f64 0 (*.f64 (cbrt.f64 (expm1.f64 (*.f64 a x))) 0))) (+.f64 (cbrt.f64 (expm1.f64 (*.f64 a x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (exp.f64 (*.f64 a x)) 2/3) (-.f64 1 (*.f64 (cbrt.f64 (exp.f64 (*.f64 a x))) -1))) (+.f64 (cbrt.f64 (exp.f64 (*.f64 a x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (pow.f64 (exp.f64 (*.f64 a x)) 2/3) (neg.f64 (cbrt.f64 (exp.f64 (*.f64 a x)))))) (+.f64 -1 (cbrt.f64 (exp.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (expm1.f64 (*.f64 a x)) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (expm1.f64 (*.f64 a x))))))) (cbrt.f64 (expm1.f64 (*.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (expm1.f64 (*.f64 a x)) 2/3) (+.f64 0 (*.f64 (cbrt.f64 (expm1.f64 (*.f64 a x))) 0))) (-.f64 (cbrt.f64 (expm1.f64 (*.f64 a x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (exp.f64 (*.f64 a x)) 2/3) (+.f64 1 (*.f64 (cbrt.f64 (exp.f64 (*.f64 a x))) 1))) (-.f64 (cbrt.f64 (exp.f64 (*.f64 a x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (*.f64 (*.f64 a x) 3)) (/.f64 1 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (expm1.f64 (*.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (expm1.f64 (*.f64 a x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (expm1.f64 (*.f64 a x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (*.f64 a x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 (*.f64 a x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) 3))) (/.f64 1 (neg.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 1 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) (exp.f64 (*.f64 a x))))) (*.f64 2 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) 3))))) (*.f64 2 (+.f64 1 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) (exp.f64 (*.f64 a x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) (*.f64 2 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) 3))))) (*.f64 2 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 1 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) (exp.f64 (*.f64 a x))))) (*.f64 3 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) 3))))) (*.f64 3 (+.f64 1 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) (exp.f64 (*.f64 a x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) (*.f64 3 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) 3))))) (*.f64 3 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) 3))) 2) (*.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) 0)) (*.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) 3))) 1) (*.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) 0)) (*.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) 3))) 3) (*.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) 0)) (*.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (expm1.f64 (*.f64 (*.f64 a x) 3)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))) 0)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 a x) 3)) 2) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))) 0)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 a x) 3)) 3) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))) 0)) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (*.f64 (*.f64 a x) 3)) (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) (*.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))) 1)) (pow.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) 3))) (neg.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 a x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 (*.f64 a x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (neg.f64 (expm1.f64 (*.f64 a x))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (neg.f64 (expm1.f64 (*.f64 a x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (expm1.f64 (*.f64 a x)) 2) 0) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (expm1.f64 (*.f64 a x)) 3) 0) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 (*.f64 a x) 3)) (neg.f64 (neg.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (expm1.f64 (*.f64 (*.f64 a x) 3)) (pow.f64 (expm1.f64 (*.f64 a x)) 2))) (cbrt.f64 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 (*.f64 a x) 3)) (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) 3)))) (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 (*.f64 a x) 3)) (+.f64 1 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) (exp.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (+.f64 1 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) (exp.f64 (*.f64 a x))))) (neg.f64 (expm1.f64 (*.f64 (*.f64 a x) 3)))) (+.f64 1 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) (exp.f64 (*.f64 a x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (expm1.f64 (*.f64 a x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (expm1.f64 (*.f64 a x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (expm1.f64 (*.f64 a x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 1 (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x)))) (/.f64 (exp.f64 (*.f64 (*.f64 a x) 3)) (+.f64 (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) (*.f64 a x)) 1) (exp.f64 (*.f64 a x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (expm1.f64 (*.f64 a x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (expm1.f64 (*.f64 a x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (*.f64 a x))) (pow.f64 (exp.f64 (*.f64 a x)) 2/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (*.f64 a x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (*.f64 a x))))))"]],"rules":[["egg-rr",80]],"time":41.405029296875,"type":"rewrite"},{"count":[[104,87]],"inputs":[["(*.f64 a x)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (*.f64 a x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (+.f64 (*.f64 a x) (*.f64 1/6 (*.f64 (pow.f64 a 3) (pow.f64 x 3)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (+.f64 (*.f64 a x) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 a 4) (pow.f64 x 4))) (*.f64 1/6 (*.f64 (pow.f64 a 3) (pow.f64 x 3))))))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(*.f64 a x)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (*.f64 a x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (+.f64 (*.f64 a x) (*.f64 1/6 (*.f64 (pow.f64 a 3) (pow.f64 x 3)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (+.f64 (*.f64 a x) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 a 4) (pow.f64 x 4))) (*.f64 1/6 (*.f64 (pow.f64 a 3) (pow.f64 x 3))))))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)","(-.f64 (exp.f64 (*.f64 a x)) 1)"]],"method":["egg-herbie"],"outputs":[["(*.f64 a x)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (*.f64 a x))","(fma.f64 1/2 (pow.f64 (*.f64 a x) 2) (*.f64 a x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (+.f64 (*.f64 a x) (*.f64 1/6 (*.f64 (pow.f64 a 3) (pow.f64 x 3)))))","(+.f64 (*.f64 (pow.f64 (*.f64 a x) 2) (+.f64 (*.f64 1/6 (*.f64 a x)) 1/2)) (*.f64 a x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (+.f64 (*.f64 a x) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 a 4) (pow.f64 x 4))) (*.f64 1/6 (*.f64 (pow.f64 a 3) (pow.f64 x 3))))))","(+.f64 (fma.f64 a x (*.f64 1/24 (pow.f64 (*.f64 a x) 4))) (*.f64 (pow.f64 (*.f64 a x) 2) (+.f64 (*.f64 1/6 (*.f64 a x)) 1/2)))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(*.f64 a x)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (*.f64 a x))","(fma.f64 1/2 (pow.f64 (*.f64 a x) 2) (*.f64 a x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (+.f64 (*.f64 a x) (*.f64 1/6 (*.f64 (pow.f64 a 3) (pow.f64 x 3)))))","(+.f64 (*.f64 (pow.f64 (*.f64 a x) 2) (+.f64 (*.f64 1/6 (*.f64 a x)) 1/2)) (*.f64 a x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 a 2) (pow.f64 x 2))) (+.f64 (*.f64 a x) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 a 4) (pow.f64 x 4))) (*.f64 1/6 (*.f64 (pow.f64 a 3) (pow.f64 x 3))))))","(+.f64 (fma.f64 a x (*.f64 1/24 (pow.f64 (*.f64 a x) 4))) (*.f64 (pow.f64 (*.f64 a x) 2) (+.f64 (*.f64 1/6 (*.f64 a x)) 1/2)))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)","(expm1.f64 (*.f64 a x))"]],"time":103.614013671875,"type":"simplify"},{"compiler":[[1683,693]],"time":15.70703125,"type":"eval"},{"alts":[["(expm1.f64 (*.f64 a x))","done",0.00390625]],"compiler":[[6,4]],"count":[[88,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[87,0],"picked":[1,1]}],"min-error":[0.00390625],"time":18.8310546875,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["a",0.00390625,1],["x",0.00390625,1],["(-.f64 (exp.f64 (*.f64 a x)) 1)",0.00390625,1],["(exp.f64 (*.f64 a x))",0.00390625,1],["(*.f64 a x)",0.00390625,1]],"compiler":[[3,2],[3,2],[8,6],[6,4],[5,3],[12,7]],"count":[[2,1]],"inputs":[["(expm1.f64 (*.f64 a x))","(-.f64 (exp.f64 (*.f64 a x)) 1)"]],"link":["."],"name":["expax (section 3.5)"],"oracle":[28.748252547817856],"outputs":[["(expm1.f64 (*.f64 a x))"]],"time":11.720947265625,"times":[["a",2.43994140625],["x",2.6748046875],["(-.f64 (exp.f64 (*.f64 a x)) 1)",1.793212890625],["(exp.f64 (*.f64 a x))",1.7158203125],["(*.f64 a x)",2.52294921875]],"type":"regimes"},{"compiler":[[6,4]],"inputs":[["(expm1.f64 (*.f64 a x))"]],"method":["egg-herbie"],"outputs":[["(expm1.f64 (*.f64 a x))"]],"stop":[["done",1]],"time":33.97607421875,"type":"simplify"},{"time":0.016845703125,"type":"soundness"},{"compiler":[[6,4]],"remove-preprocessing":[[]],"time":7.47314453125,"type":"end"}]
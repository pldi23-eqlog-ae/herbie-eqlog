[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.52852191630177,0.41345625924714113,0.05802182445108883],[11,0.46416315896613014,0.49536740494704645,0.04046943608682341],[10,0.3822520132662248,0.5772785506469518,0.04046943608682341],[9,0.29644033681870496,0.6864934115801589,0.017066251601136173],[8,0.21842972186641418,0.7801061495229078,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":71.60107421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",39.0859375,1072],["body",256,"valid",299.650146484375,8256]],"time":347.362060546875,"type":"sample"},{"compiler":[[8,5]],"inputs":[["0","1","2"],["(/.f64 (*.f64 x y) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 z y) x)","(/.f64 (*.f64 x z) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (*.f64 x y) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 x y) z)","(/.f64 (*.f64 z y) x)","(/.f64 (*.f64 x z) y)"]],"symmetry":[[]],"time":64.781982421875,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(/.f64 (*.f64 x y) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x y) z)"]],"time":35.510009765625,"type":"simplify"},{"compiler":[[8,5]],"time":0.18896484375,"type":"eval"},{"alts":[["(/.f64 (*.f64 x y) z)","next",5.757409516054081]],"compiler":[[8,5],[8,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[5.757409516054081],"time":0.660888671875,"type":"prune"},{"compiler":[[14,5]],"locations":[["(/.f64 (*.f64 x y) z)",5.65024039682047,true]],"time":3.074951171875,"type":"localize"},{"count":[[1,36]],"series":[["(/.f64 (*.f64 x y) z)","z","-inf",0.31591796875],["(/.f64 (*.f64 x y) z)","z","inf",0.337890625],["(/.f64 (*.f64 x y) z)","z","0",0.416015625],["(/.f64 (*.f64 x y) z)","y","-inf",0.31005859375],["(/.f64 (*.f64 x y) z)","y","inf",0.44091796875],["(/.f64 (*.f64 x y) z)","y","0",0.674072265625],["(/.f64 (*.f64 x y) z)","x","-inf",0.375],["(/.f64 (*.f64 x y) z)","x","inf",0.391845703125],["(/.f64 (*.f64 x y) z)","x","0",0.59814453125]],"time":3.967041015625,"type":"series"},{"count":[[1,51]],"inputs":[["(/.f64 (*.f64 x y) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (*.f64 y (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (*.f64 x (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 z -2/3)) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) z) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 z -2/3)) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (*.f64 (*.f64 x y) (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) z) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y)))) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (neg.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (/.f64 (*.f64 x y) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (pow.f64 z -2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y))))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (/.f64 (*.f64 x y) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3))))))"]],"rules":[["egg-rr",51]],"time":37.670166015625,"type":"rewrite"},{"count":[[87,52]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"time":135.093017578125,"type":"simplify"},{"compiler":[[544,204]],"time":5.56689453125,"type":"eval"},{"alts":[["(*.f64 (/.f64 x z) y)","next",4.983342537093249],["(*.f64 (/.f64 y z) x)","fresh",7.095630648408692],["(*.f64 (/.f64 1 z) (*.f64 x y))","fresh",5.810475775822524],["(/.f64 (*.f64 x y) z)","done",5.757409516054081]],"compiler":[[8,5],[8,5],[10,7],[8,5],[8,5],[8,5],[10,7]],"count":[[53,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[52,3],"picked":[1,1]}],"min-error":[0.01171875],"time":9.635986328125,"type":"prune"},{"compiler":[[14,5]],"locations":[["(*.f64 (/.f64 x z) y)",4.866360029854829,true]],"time":3.044921875,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (/.f64 x z) y)","y","-inf",0.513916015625],["(*.f64 (/.f64 x z) y)","y","inf",0.1640625],["(*.f64 (/.f64 x z) y)","y","0",0.14111328125],["(*.f64 (/.f64 x z) y)","z","-inf",0.15185546875],["(*.f64 (/.f64 x z) y)","z","inf",0.176025390625],["(*.f64 (/.f64 x z) y)","z","0",0.14404296875],["(*.f64 (/.f64 x z) y)","x","-inf",0.160888671875],["(*.f64 (/.f64 x z) y)","x","inf",0.179931640625],["(*.f64 (/.f64 x z) y)","x","0",0.1640625]],"time":1.88720703125,"type":"series"},{"count":[[1,78]],"inputs":[["(*.f64 (/.f64 x z) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) z) (*.f64 (pow.f64 x 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 y)) (/.f64 (pow.f64 y 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 y)) -1) (/.f64 (pow.f64 y 2/3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 z)) (/.f64 (pow.f64 y 2/3) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (cbrt.f64 y)) (pow.f64 z 2/3)) (/.f64 (pow.f64 y 2/3) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x y)) -1) (/.f64 (pow.f64 (*.f64 x y) 2/3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 z 2/3)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (/.f64 x z))) (pow.f64 (/.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) (*.f64 (pow.f64 (/.f64 x z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 x z) 2/3) y) (cbrt.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (/.f64 x z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x z) 2/3) (*.f64 y (cbrt.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (/.f64 x z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) (/.f64 (*.f64 (pow.f64 x 2/3) y) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (pow.f64 z 2/3)) (/.f64 (*.f64 (pow.f64 x 2/3) y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x y)) z) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (*.f64 (pow.f64 x 2/3) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 z -2/3)) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (*.f64 x (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (neg.f64 z))) (/.f64 x (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (*.f64 (pow.f64 x 2/3) y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (neg.f64 z))) (/.f64 y (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (*.f64 y (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 z -2/3)) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (/.f64 (*.f64 x y) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -2/3) (/.f64 (*.f64 x y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (pow.f64 (/.f64 x z) 2/3) y)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (/.f64 (*.f64 x y) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (neg.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (*.f64 x y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (*.f64 (pow.f64 (/.f64 x z) 2/3) y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 y)) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (cbrt.f64 (*.f64 x y))) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (neg.f64 x))) 3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 x y) 3) (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (*.f64 x y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x y) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3))))))"]],"rules":[["egg-rr",78]],"time":40.94287109375,"type":"rewrite"},{"count":[[114,79]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"time":134.609130859375,"type":"simplify"},{"compiler":[[851,328]],"time":8.923828125,"type":"eval"},{"alts":[["(*.f64 (/.f64 x z) y)","done",4.983342537093249],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","fresh",6.150408612580209],["(/.f64 (*.f64 x y) z)","done",5.757409516054081],["(*.f64 (/.f64 y z) x)","fresh",7.095630648408692],["(*.f64 (/.f64 1 z) (*.f64 x y))","next",5.810475775822524]],"compiler":[[8,5],[15,8],[8,5],[8,5],[10,7],[15,8],[8,5],[10,7]],"count":[[83,5]],"kept":[{"done":[1,1],"fresh":[2,0],"new":[79,3],"picked":[1,1]}],"min-error":[0.0078125],"time":13.43896484375,"type":"prune"},{"compiler":[[20,10]],"locations":[["(*.f64 (/.f64 1 z) (*.f64 x y))",5.703306656588913,true]],"time":4.51611328125,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (/.f64 1 z) (*.f64 x y))","y","-inf",0.166015625],["(*.f64 (/.f64 1 z) (*.f64 x y))","y","inf",0.14892578125],["(*.f64 (/.f64 1 z) (*.f64 x y))","y","0",0.141845703125],["(*.f64 (/.f64 1 z) (*.f64 x y))","x","-inf",0.16796875],["(*.f64 (/.f64 1 z) (*.f64 x y))","x","inf",0.14990234375],["(*.f64 (/.f64 1 z) (*.f64 x y))","x","0",0.159912109375],["(*.f64 (/.f64 1 z) (*.f64 x y))","z","-inf",0.154052734375],["(*.f64 (/.f64 1 z) (*.f64 x y))","z","inf",0.1572265625],["(*.f64 (/.f64 1 z) (*.f64 x y))","z","0",0.197021484375]],"time":1.534912109375,"type":"series"},{"count":[[1,78]],"inputs":[["(*.f64 (/.f64 1 z) (*.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) (*.f64 (pow.f64 z -2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (*.f64 y (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (pow.f64 z -2/3)) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z -2/3) x) (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 x y) z))) (neg.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (/.f64 1 (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x y)) z) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (/.f64 x z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (/.f64 (cbrt.f64 (*.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) z) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (*.f64 (pow.f64 z -2/3) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z -2/3) (*.f64 x y)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -2/3) (/.f64 (*.f64 x y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (*.f64 x y) 2/3)) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y) (pow.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3))) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (*.f64 (pow.f64 z -2/3) x)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (*.f64 x y))) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 z -2/3) (*.f64 x y))) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 z -2/3) (*.f64 x y))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (*.f64 x y) 2/3))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (pow.f64 z 2/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y (*.f64 (pow.f64 z -2/3) x))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (neg.f64 (*.f64 x y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (/.f64 (*.f64 x y) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 z)) x) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (*.f64 x y) 2/3)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) y) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (*.f64 x y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 z -2/3) (*.f64 x y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 y (pow.f64 z -2/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 (pow.f64 z -2/3) x)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (pow.f64 z -2/3) (*.f64 x y)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x y) (pow.f64 (/.f64 (*.f64 x y) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2) (*.f64 x y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3))))))"]],"rules":[["egg-rr",78]],"time":40.194091796875,"type":"rewrite"},{"count":[[114,79]],"inputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"time":134.471923828125,"type":"simplify"},{"compiler":[[889,349]],"time":9.006103515625,"type":"eval"},{"alts":[["(*.f64 (/.f64 x z) y)","done",4.983342537093249],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","next",6.150408612580209],["(/.f64 (*.f64 x y) z)","done",5.757409516054081],["(*.f64 x (/.f64 y z))","fresh",7.095630648408692],["(*.f64 (/.f64 1 z) (*.f64 x y))","done",5.810475775822524]],"compiler":[[8,5],[15,8],[8,5],[8,5],[10,7],[15,8],[8,5]],"count":[[84,5]],"kept":[{"done":[2,2],"fresh":[2,1],"new":[79,1],"picked":[1,1]}],"min-error":[0.0078125],"time":13.43994140625,"type":"prune"},{"compiler":[[38,8]],"locations":[["(cbrt.f64 z)",0.109375,true],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))",1.4107852566687011,true],["(/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))",1.6763868105443525,true],["(/.f64 (*.f64 x y) (cbrt.f64 z))",2.9441157479479134,true]],"time":6.10205078125,"type":"localize"},{"count":[[4,84]],"series":[["(cbrt.f64 z)","z","-inf",0.323974609375],["(cbrt.f64 z)","z","inf",0.253173828125],["(cbrt.f64 z)","z","0",0.2470703125],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","z","-inf",1.343017578125],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","z","inf",0.1689453125],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","z","0",0.14404296875],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","y","-inf",0.15283203125],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","y","inf",0.1689453125],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","y","0",0.14501953125],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","x","-inf",0.155029296875],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","x","inf",0.172119140625],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","x","0",0.156982421875],["(/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))","z","-inf",0.526123046875],["(/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))","z","inf",0.31591796875],["(/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))","z","0",0.3759765625],["(/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))","y","-inf",0.31494140625],["(/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))","y","inf",0.2529296875],["(/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))","y","0",1.256103515625],["(/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))","x","-inf",0.328125],["(/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))","x","inf",0.238037109375],["(/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))","x","0",1.673828125],["(/.f64 (*.f64 x y) (cbrt.f64 z))","z","-inf",1.416015625],["(/.f64 (*.f64 x y) (cbrt.f64 z))","z","inf",0.4169921875],["(/.f64 (*.f64 x y) (cbrt.f64 z))","z","0",0.5390625],["(/.f64 (*.f64 x y) (cbrt.f64 z))","y","-inf",0.326904296875],["(/.f64 (*.f64 x y) (cbrt.f64 z))","y","inf",0.43994140625],["(/.f64 (*.f64 x y) (cbrt.f64 z))","y","0",1.18994140625],["(/.f64 (*.f64 x y) (cbrt.f64 z))","x","-inf",0.340087890625],["(/.f64 (*.f64 x y) (cbrt.f64 z))","x","inf",0.669921875],["(/.f64 (*.f64 x y) (cbrt.f64 z))","x","0",1.805908203125]],"time":16.20703125,"type":"series"},{"count":[[4,242]],"inputs":[["(/.f64 (*.f64 x y) (cbrt.f64 z))","(/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))","(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","(cbrt.f64 z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 0) (/.f64 (*.f64 x y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x y) (cbrt.f64 z))) (/.f64 (*.f64 x y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (*.f64 0 (/.f64 (*.f64 x y) (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (neg.f64 z))) (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (cbrt.f64 z))) (/.f64 x (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (cbrt.f64 z))) (/.f64 y (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -1/3)) (/.f64 (*.f64 x y) (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (pow.f64 z 2/3))) (/.f64 x (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (pow.f64 z 2/3))) (/.f64 y (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 z)) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 z -1/3)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z)))) (neg.f64 (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (cbrt.f64 z))) x) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) (pow.f64 (*.f64 x y) 2/3)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -1/3)) (*.f64 x y)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (cbrt.f64 z))) y) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3) (cbrt.f64 (*.f64 x y))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y)))) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) 1) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 y (cbrt.f64 (pow.f64 z 2/3)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3)) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 x (cbrt.f64 (pow.f64 z 2/3)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) -1) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (cbrt.f64 (pow.f64 z 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) 1) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 (cbrt.f64 z))) (neg.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z)))) (neg.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 x y) 3) z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 x y) 3) z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 0) (/.f64 (*.f64 x y) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (*.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x y) (pow.f64 z 2/3))) (/.f64 (*.f64 x y) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (*.f64 0 (/.f64 (*.f64 x y) (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (neg.f64 z))) (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) (/.f64 (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3))) (pow.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) (/.f64 (pow.f64 z -1/3) (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (/.f64 (*.f64 x y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -1/3)) (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 z -1/3) (cbrt.f64 (pow.f64 z 2/3))) (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3) (cbrt.f64 z)) (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) -2) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 z -1/3)) (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3)))) (neg.f64 (pow.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 1 (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))))) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 z -1/3) (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -1/3)) (/.f64 (*.f64 x y) (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3))) (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) (pow.f64 z -1/3)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z)))) (pow.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) (pow.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 2/3)) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (/.f64 (pow.f64 z -1/3) (cbrt.f64 (pow.f64 z 2/3)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) 1) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3) (cbrt.f64 z))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (/.f64 (pow.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) 2/3) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) -1) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (cbrt.f64 (pow.f64 z 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) 1) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))) (cbrt.f64 (cbrt.f64 z))) (neg.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (*.f64 (pow.f64 z 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (/.f64 (neg.f64 (pow.f64 z 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -1/3)) (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z)))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -1/3)) (neg.f64 (*.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 z 2/3)) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -1/3)) (*.f64 x y)) (cbrt.f64 (*.f64 (pow.f64 z 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z)))) (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z -1/3))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) -1) (*.f64 (cbrt.f64 (pow.f64 z 2/3)) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) 1) (cbrt.f64 (*.f64 (pow.f64 z 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 z -1/3))) (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (*.f64 (neg.f64 (pow.f64 z 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z)))) (neg.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (neg.f64 (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x y) 3) z) z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x y) 3) z) z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x y) z) 0) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) (*.f64 (/.f64 (*.f64 x y) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x y) z)) (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) z) (*.f64 0 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (neg.f64 z))) (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (/.f64 (*.f64 x y) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3))) (/.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) (/.f64 (pow.f64 z -1/3) (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (/.f64 (*.f64 x y) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -1/3)) (/.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 z -1/3) (cbrt.f64 (pow.f64 z 2/3))) (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 (*.f64 x y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 z -1/3)) (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 (cbrt.f64 z))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))) (/.f64 1 (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -1/3)) (/.f64 (*.f64 x y) (cbrt.f64 z))) (cbrt.f64 (*.f64 (pow.f64 z 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -1/3)) (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z)))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -1/3)) (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z)))) (*.f64 (cbrt.f64 (pow.f64 z 2/3)) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -1/3)) (*.f64 x y)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -1/3)) (neg.f64 (*.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 z 2/3)) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z)))) (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 z -1/3))) (*.f64 (neg.f64 (pow.f64 z 2/3)) (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))) (cbrt.f64 (pow.f64 z -1/3))) (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z -1/3))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) -1) (*.f64 (cbrt.f64 (pow.f64 z 2/3)) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) 1) (cbrt.f64 (*.f64 (pow.f64 z 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (neg.f64 (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))))) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (pow.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) 2/3)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 z -1/3) (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -1/3)) (/.f64 (*.f64 x y) (pow.f64 z 2/3))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) (pow.f64 z -1/3)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z)))) (/.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (cbrt.f64 z)))) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) (cbrt.f64 z))) (/.f64 (pow.f64 (/.f64 (*.f64 x y) z) 2/3) (cbrt.f64 (cbrt.f64 z)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3)))) (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (neg.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3))) (pow.f64 (/.f64 (*.f64 x y) z) 2/3)) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) (pow.f64 (cbrt.f64 z) -2)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (/.f64 (pow.f64 z -1/3) (cbrt.f64 (pow.f64 z 2/3)))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 (pow.f64 z 2/3))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 (cbrt.f64 z))) 1) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) -1) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (cbrt.f64 (pow.f64 z 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 (cbrt.f64 z))) 1) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))) (cbrt.f64 (cbrt.f64 z))) (neg.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (*.f64 (pow.f64 z 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))) (/.f64 (neg.f64 (pow.f64 z 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (*.f64 (cbrt.f64 z) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (*.f64 (cbrt.f64 (neg.f64 z)) (neg.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (*.f64 (neg.f64 (pow.f64 z 2/3)) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (*.f64 (neg.f64 (pow.f64 z 2/3)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (cbrt.f64 z))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))) (*.f64 (neg.f64 (pow.f64 z 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x y) (pow.f64 z 2/3)) (cbrt.f64 (cbrt.f64 z)))) (neg.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 (neg.f64 z))) (pow.f64 (cbrt.f64 z) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (*.f64 x y) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3))) (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 z -1/3) (/.f64 (*.f64 x y) (neg.f64 (pow.f64 z 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 z) 0) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 z) (*.f64 0 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 z))) (neg.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 2/3)) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 z)))))"]],"rules":[["egg-rr",22],["egg-rr",86],["egg-rr",74],["egg-rr",60]],"time":38.77197265625,"type":"rewrite"},{"count":[[326,247]],"inputs":[["(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (cbrt.f64 z))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (*.f64 y x))","(/.f64 (*.f64 y x) (pow.f64 z 2/3))","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)","(/.f64 (*.f64 y x) z)"]],"time":228.2890625,"type":"simplify"},{"compiler":[[4738,1754]],"time":39.3349609375,"type":"eval"},{"alts":[["(*.f64 (/.f64 x z) y)","done",4.983342537093249],["(/.f64 (*.f64 x y) z)","done",5.757409516054081],["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4) 2)))) (cbrt.f64 z))","fresh",6.3029000255224314],["(*.f64 x (/.f64 y z))","fresh",7.095630648408692],["(*.f64 (/.f64 1 z) (*.f64 x y))","done",5.810475775822524]],"compiler":[[8,5],[8,5],[26,16],[8,5],[10,7]],"count":[[296,5]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[291,1],"picked":[1,0]}],"min-error":[0.00390625],"time":73.60986328125,"type":"prune"},{"accuracy":[0.4557286712932252],"baseline":[4.983342537093249],"branch":[["x",3.96771753709325,2],["y",2.6969727791547076,4],["z",2.5826317340044853,3],["(/.f64 (*.f64 x y) z)",0.4557286712932252,6],["(*.f64 x y)",0.67578125,4],["(*.f64 x y)",0.67578125,4]],"compiler":[[4,3],[4,3],[4,3],[8,5],[6,4],[6,4],[77,30]],"count":[[9,6]],"inputs":[["(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (*.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4) 2)))) (cbrt.f64 z))","(*.f64 x (/.f64 y z))","(/.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))","(*.f64 (/.f64 y z) x)","(*.f64 (/.f64 1 z) (*.f64 x y))","(*.f64 (/.f64 x z) y)","(*.f64 (/.f64 y z) x)","(*.f64 (/.f64 1 z) (*.f64 x y))","(/.f64 (*.f64 x y) z)"]],"link":["."],"name":["Diagrams.Solve.Tridiagonal:solveCyclicTriDiagonal from diagrams-solve-0.1, A"],"oracle":[18.00068195125595],"outputs":[["(*.f64 x (/.f64 y z))","(*.f64 (/.f64 1 z) (*.f64 x y))","(/.f64 (*.f64 x y) z)","(*.f64 (/.f64 x z) y)","(/.f64 (*.f64 x y) z)","(*.f64 (/.f64 x z) y)"]],"time":80.55810546875,"times":[["x",7.60693359375],["y",14.5380859375],["z",11.10205078125],["(/.f64 (*.f64 x y) z)",18.008056640625],["(*.f64 x y)",14.505859375],["(*.f64 x y)",13.1240234375]],"type":"regimes"},{"bstep":[[1.7120755597941846e+200,4.0898691472747425e+202,0.026123046875],[-0.0,4.243e-319,0.011962890625],[-3.072721789357648e-286,-6.82482929043e-313,0.044921875],[-2.9789484179137466e+159,-2.4134434412755767e+146,0.0478515625],[-1.195074754845417e+300,-2.0530832494141152e+297,0.10498046875]],"compiler":[[6,5],[8,5]],"method":["left-value","left-value","left-value","left-value","left-value"],"time":0.380859375,"type":"bsearch"},{"compiler":[[75,27]],"inputs":[["(if (<=.f64 (/.f64 (*.f64 x y) z) -1000000000000000052504760255204420248704468581108159154915854115511802457988908195786371375080447864043704443832883878176942523235360430575644792184786706982848387200926575803737830233794788090059368953234970799945081119038967640880074652742780142494579258788820056842838115669472196386865459400540160) (*.f64 x (/.f64 y z)) (if (<=.f64 (/.f64 (*.f64 x y) z) -1999999999999999856969387974336841544611466940118938136259861775855544812609788247233480561009492401147963340862836599047403467459377561298838125765673390964736) (*.f64 (/.f64 1 z) (*.f64 x y)) (if (<=.f64 (/.f64 (*.f64 x y) z) -8572068857490139/42860344287450692837937001962400072422456192468221344297750015534814042044997444899727935152627834325103786916702125873007485811427692561743938310298794299215738271099296923941684298420249484567511816728612185899934327765069595070236662175784308251658284785910746168670641719326610497547348822672277504) (/.f64 (*.f64 x y) z) (if (<=.f64 (/.f64 (*.f64 x y) z) 0) (*.f64 (/.f64 x z) y) (if (<=.f64 (/.f64 (*.f64 x y) z) 199999999999999993946624442502072331894900655091004725296483501900693696871108151068392676809412503736055024831947764816364271468736556969278770082094479755742047182133579963622363626612334257709776896) (/.f64 (*.f64 x y) z) (*.f64 (/.f64 x z) y))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (/.f64 (*.f64 x y) z) -1000000000000000052504760255204420248704468581108159154915854115511802457988908195786371375080447864043704443832883878176942523235360430575644792184786706982848387200926575803737830233794788090059368953234970799945081119038967640880074652742780142494579258788820056842838115669472196386865459400540160) (*.f64 x (/.f64 y z)) (if (<=.f64 (/.f64 (*.f64 x y) z) -1999999999999999856969387974336841544611466940118938136259861775855544812609788247233480561009492401147963340862836599047403467459377561298838125765673390964736) (*.f64 (/.f64 1 z) (*.f64 x y)) (if (<=.f64 (/.f64 (*.f64 x y) z) -8572068857490139/42860344287450692837937001962400072422456192468221344297750015534814042044997444899727935152627834325103786916702125873007485811427692561743938310298794299215738271099296923941684298420249484567511816728612185899934327765069595070236662175784308251658284785910746168670641719326610497547348822672277504) (/.f64 (*.f64 x y) z) (if (<=.f64 (/.f64 (*.f64 x y) z) 0) (*.f64 (/.f64 x z) y) (if (<=.f64 (/.f64 (*.f64 x y) z) 199999999999999993946624442502072331894900655091004725296483501900693696871108151068392676809412503736055024831947764816364271468736556969278770082094479755742047182133579963622363626612334257709776896) (/.f64 (*.f64 x y) z) (*.f64 (/.f64 x z) y))))))","(if (<=.f64 (/.f64 (*.f64 x y) z) -1000000000000000052504760255204420248704468581108159154915854115511802457988908195786371375080447864043704443832883878176942523235360430575644792184786706982848387200926575803737830233794788090059368953234970799945081119038967640880074652742780142494579258788820056842838115669472196386865459400540160) (/.f64 (*.f64 x y) z) (if (<=.f64 (/.f64 (*.f64 x y) z) -1999999999999999856969387974336841544611466940118938136259861775855544812609788247233480561009492401147963340862836599047403467459377561298838125765673390964736) (/.f64 (*.f64 x y) z) (if (<=.f64 (/.f64 (*.f64 x y) z) -8572068857490139/42860344287450692837937001962400072422456192468221344297750015534814042044997444899727935152627834325103786916702125873007485811427692561743938310298794299215738271099296923941684298420249484567511816728612185899934327765069595070236662175784308251658284785910746168670641719326610497547348822672277504) (/.f64 (*.f64 x y) z) (if (<=.f64 (/.f64 (*.f64 x y) z) 0) (/.f64 (*.f64 x y) z) (if (<=.f64 (/.f64 (*.f64 x y) z) 199999999999999993946624442502072331894900655091004725296483501900693696871108151068392676809412503736055024831947764816364271468736556969278770082094479755742047182133579963622363626612334257709776896) (/.f64 (*.f64 x y) z) (/.f64 (*.f64 x y) z))))))"]],"stop":[["fuel",1]],"time":20.486083984375,"type":"simplify"},{"time":0.006103515625,"type":"soundness"},{"compiler":[[75,27]],"remove-preprocessing":[[]],"time":14.130859375,"type":"end"}]
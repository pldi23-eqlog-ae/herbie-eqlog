[{"compiler":[[7,6]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.55908203125,"type":"analyze"},{"outcomes":[["body",256,"valid",242.1259765625,8256]],"time":250.76708984375,"type":"sample"},{"compiler":[[6,5]],"inputs":[["0"],["(-.f64 x (/.f64 1 3))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 x (/.f64 1 3))","(+.f64 x -1/3)"]],"symmetry":[[]],"time":58.058837890625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 x (/.f64 1 3))"]],"method":["egg-herbie"],"outputs":[["(-.f64 x (/.f64 1 3))","(+.f64 x -1/3)"]],"time":20.025146484375,"type":"simplify"},{"compiler":[[9,7]],"time":0.64794921875,"type":"eval"},{"alts":[["(+.f64 x -1/3)","next",0.01171875]],"compiler":[[4,3],[4,3]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.01171875],"time":0.89697265625,"type":"prune"},{"compiler":[[6,4]],"locations":[["(+.f64 x -1/3)",0.01171875,true]],"time":1.757080078125,"type":"localize"},{"count":[[1,12]],"series":[["(+.f64 x -1/3)","x","-inf",0.2119140625],["(+.f64 x -1/3)","x","inf",0.35791015625],["(+.f64 x -1/3)","x","0",0.333984375]],"time":1.010986328125,"type":"series"},{"count":[[1,68]],"inputs":[["(+.f64 x -1/3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x 0) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1/3 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x -1/3) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (-.f64 1/3 x)) 4)) (cbrt.f64 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1/27)) (/.f64 (pow.f64 (+.f64 (pow.f64 x 3) -1/27) 2/3) (+.f64 1/9 (*.f64 x (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x -1/3))) (pow.f64 (pow.f64 (+.f64 x -1/3) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))))) (/.f64 (+.f64 x -1/3) (pow.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))) -1/3) (/.f64 (+.f64 (pow.f64 x 3) -1/27) (pow.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1/3)) (pow.f64 (+.f64 x -1/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 (pow.f64 x 2/3) (cbrt.f64 1/9)) (cbrt.f64 (*.f64 x -1/3))) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 1/9) (*.f64 (cbrt.f64 x) (+.f64 (cbrt.f64 x) (cbrt.f64 1/3)))) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x -1/3) 2/3) (cbrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) -1/19683) (/.f64 1 (*.f64 (+.f64 (+.f64 (pow.f64 x 6) 1/729) (pow.f64 (*.f64 1/3 x) 3)) (+.f64 1/9 (*.f64 x (+.f64 x 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 x 3) -1/27) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))))) (pow.f64 (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 x -1/3) 2/3) (cbrt.f64 (+.f64 (pow.f64 x 3) -1/27))) (pow.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (+.f64 (cbrt.f64 1/9) (*.f64 (cbrt.f64 x) (cbrt.f64 1/3)))) (+.f64 (cbrt.f64 x) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1/27 (pow.f64 x 3)) (/.f64 -1 (+.f64 1/9 (*.f64 x (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))) (/.f64 (+.f64 x -1/3) (+.f64 1/9 (*.f64 x (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) -1/27) (/.f64 1 (+.f64 1/9 (*.f64 x (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1/9 (*.f64 x (+.f64 x 1/3)))) (+.f64 (pow.f64 x 3) -1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1/3 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x -1/3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) -1/19683) (/.f64 1 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))))) (/.f64 1 (+.f64 (+.f64 (pow.f64 x 6) 1/729) (pow.f64 (*.f64 1/3 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) -1/19683) (/.f64 1 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))))) (+.f64 (+.f64 (pow.f64 x 6) 1/729) (pow.f64 (*.f64 1/3 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) -1/19683) (*.f64 (+.f64 (+.f64 (pow.f64 x 6) 1/729) (pow.f64 (*.f64 1/3 x) 3)) (+.f64 1/9 (*.f64 x (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) -1/19683) (*.f64 1 (*.f64 (+.f64 (+.f64 (pow.f64 x 6) 1/729) (pow.f64 (*.f64 1/3 x) 3)) (+.f64 1/9 (*.f64 x (+.f64 x 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) -1/27))) 3) (pow.f64 (neg.f64 (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (sqrt.f64 3)) (sqrt.f64 1/3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (neg.f64 (sqrt.f64 3))) (neg.f64 (sqrt.f64 1/3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (pow.f64 x 3) -1/27) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3)))))) (neg.f64 (pow.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (+.f64 x -1/3) 2/3) (cbrt.f64 (+.f64 (pow.f64 x 3) -1/27)))) (neg.f64 (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/27 (pow.f64 x 3)) (+.f64 -1/9 (*.f64 x (-.f64 -1/3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (pow.f64 x 3) -1/27) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))))) (pow.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) -1/27) (+.f64 1/9 (*.f64 x (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 x -1/3) 2/3) (cbrt.f64 (+.f64 (pow.f64 x 3) -1/27))) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/3 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x -3) -1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (cbrt.f64 9)) (cbrt.f64 1/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x 3) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (cbrt.f64 3)) (cbrt.f64 1/9)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) -1/19683)) (neg.f64 (*.f64 (+.f64 (+.f64 (pow.f64 x 6) 1/729) (pow.f64 (*.f64 1/3 x) 3)) (+.f64 1/9 (*.f64 x (+.f64 x 1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 x 3) 3) -1/19683) (/.f64 1 (+.f64 1/9 (*.f64 x (+.f64 x 1/3)))))) (neg.f64 (+.f64 (+.f64 (pow.f64 x 6) 1/729) (pow.f64 (*.f64 1/3 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x -1/3) 2) (-.f64 1/27 (pow.f64 x 3)))) (cbrt.f64 (+.f64 -1/9 (*.f64 x (-.f64 -1/3 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x -1/3) 2) (+.f64 (pow.f64 x 3) -1/27))) (cbrt.f64 (+.f64 1/9 (*.f64 x (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x -1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x -1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/3) (cbrt.f64 1/9) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/9) (cbrt.f64 -1/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 -1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/3 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 -1/3)))))"]],"rules":[["egg-rr",68]],"time":45.406982421875,"type":"rewrite"},{"count":[[80,70]],"inputs":[["-1/3","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)"]],"method":["egg-herbie"],"outputs":[["-1/3","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)"]],"time":51.35595703125,"type":"simplify"},{"compiler":[[889,715]],"time":15.626953125,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 x -3) -1) -3)","next",0.3671875],["(+.f64 x -1/3)","done",0.01171875]],"compiler":[[8,7],[4,3],[8,7]],"count":[[71,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[70,1],"picked":[1,1]}],"min-error":[0],"time":12.360107421875,"type":"prune"},{"compiler":[[19,15]],"locations":[["(-.f64 (*.f64 x -3) -1)",0.00390625,true],["(/.f64 (-.f64 (*.f64 x -3) -1) -3)",0.30765832650946107,true]],"time":4.69189453125,"type":"localize"},{"count":[[2,24]],"series":[["(-.f64 (*.f64 x -3) -1)","x","-inf",0.1689453125],["(-.f64 (*.f64 x -3) -1)","x","inf",0.14404296875],["(-.f64 (*.f64 x -3) -1)","x","0",0.149169921875],["(/.f64 (-.f64 (*.f64 x -3) -1) -3)","x","-inf",0.25],["(/.f64 (-.f64 (*.f64 x -3) -1) -3)","x","inf",0.367919921875],["(/.f64 (-.f64 (*.f64 x -3) -1) -3)","x","0",0.369873046875]],"time":1.527099609375,"type":"series"},{"count":[[2,194]],"inputs":[["(/.f64 (-.f64 (*.f64 x -3) -1) -3)","(-.f64 (*.f64 x -3) -1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x 0) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1/3) (*.f64 (+.f64 x -1/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x -1/3) 0) (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1/3) (*.f64 0 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 x -1/3)) (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x -3) 3) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))) -3) (/.f64 (/.f64 -1 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))) -3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 -1/3 (/.f64 (*.f64 x -3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x -3) 3) (*.f64 -3 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))) (/.f64 -1 (*.f64 -3 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 x -3) -3) 9) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 x 3) (fma.f64 x x (*.f64 1/3 (+.f64 x 1/3)))) (/.f64 1/27 (fma.f64 x x (*.f64 1/3 (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x 3 -1) (sqrt.f64 3)) (/.f64 1 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) -1/27) (/.f64 1 (fma.f64 x x (*.f64 1/3 (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1/3)) (cbrt.f64 (pow.f64 (+.f64 x -1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x -1/3) 2)) (cbrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 3 -1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1/3)) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 x -3 1) 2) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x -3 1)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x -3 1) 2)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -3 1) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (fma.f64 x -3 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/3) (/.f64 (fma.f64 x -3 1) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x -3 1) 2)) -1/3) (cbrt.f64 (fma.f64 x -3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x -3 1) (cbrt.f64 9)) (cbrt.f64 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 x -3 1) 2) 9)) (cbrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1/3 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (fma.f64 x 3 -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/3) (+.f64 (/.f64 (*.f64 x -3) (cbrt.f64 9)) (cbrt.f64 (/.f64 1 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -27 (pow.f64 x 3) 1) (/.f64 1 (*.f64 -3 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x 3 -1) (cbrt.f64 1/3)) (cbrt.f64 (/.f64 1 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -27 (pow.f64 x 3) 1) -1/3) (/.f64 1 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 x -3) -3 -3) (/.f64 1 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) -1/27) (fma.f64 x x (*.f64 1/3 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x -3) -3 -3) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1/3) 2)) (cbrt.f64 (fma.f64 x 3 -1))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x -1/3) 2)) (cbrt.f64 (fma.f64 x -3 1))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x 3 -1)) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 x -3 1) 2) 9))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x 3 -1)) (cbrt.f64 (pow.f64 (+.f64 x -1/3) 2))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x -3 1)) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 x -3 1) 2) 9))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x -3 1)) (cbrt.f64 (pow.f64 (+.f64 x -1/3) 2))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 x -3) -3 -3) 1) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) -1/27) 1) (fma.f64 x x (*.f64 1/3 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x 3 -1) (cbrt.f64 1/3)) (cbrt.f64 (cbrt.f64 9))) (pow.f64 (cbrt.f64 (cbrt.f64 9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x -3 1) (cbrt.f64 9)) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x 3 -1) (cbrt.f64 1/3)) (cbrt.f64 3)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x 3 -1) (cbrt.f64 9)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x 3 -1) (cbrt.f64 -3)) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x 3 -1) (neg.f64 (sqrt.f64 3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x 3 -1) (sqrt.f64 3)) (cbrt.f64 (sqrt.f64 3))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x 3 -1) (sqrt.f64 3)) (sqrt.f64 (sqrt.f64 3))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 -27 (pow.f64 x 3) 1) -1/3) (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))) (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) -1/27) (+.f64 (*.f64 x x) (-.f64 1/9 (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 3 x) -3) 3) (*.f64 3 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 3 x) 3) -3) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 3 x) (cbrt.f64 9)) (*.f64 3 (cbrt.f64 -1/3))) (*.f64 3 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x -3) (cbrt.f64 9)) (cbrt.f64 (/.f64 -27 -3))) (*.f64 -3 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 x -3) (cbrt.f64 -1/3)) -3) (cbrt.f64 9)) (*.f64 (cbrt.f64 9) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 x -3) (cbrt.f64 -1/3)) 3) (*.f64 (cbrt.f64 9) -1)) (*.f64 (cbrt.f64 9) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (*.f64 x -3) (cbrt.f64 -1/3)) (cbrt.f64 9)) (*.f64 (cbrt.f64 9) (cbrt.f64 -1/3))) (*.f64 (cbrt.f64 9) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x -3) 3) 3) (*.f64 -3 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 3 x) -3) -3) (*.f64 3 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 3 x) 3) 3) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 3 x) (cbrt.f64 9)) (*.f64 3 (cbrt.f64 1/3))) (*.f64 3 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x -3) (cbrt.f64 9)) (*.f64 -3 (cbrt.f64 1/3))) (*.f64 -3 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x -3) (cbrt.f64 -1/3)) -3) (*.f64 (cbrt.f64 9) -1)) (*.f64 (cbrt.f64 9) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x -3) (cbrt.f64 -1/3)) 3) (cbrt.f64 9)) (*.f64 (cbrt.f64 9) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (*.f64 x -3) (cbrt.f64 -1/3)) (cbrt.f64 9)) (*.f64 (cbrt.f64 9) (cbrt.f64 1/3))) (*.f64 (cbrt.f64 9) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x -3) 3) -3) (*.f64 -3 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 x 3 -1) (cbrt.f64 1/3))) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 x 3 -1) (sqrt.f64 3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) -1/27)) (neg.f64 (fma.f64 x x (*.f64 1/3 (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x 3 -1) (cbrt.f64 1/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x 3 -1) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -27 (pow.f64 x 3) 1) (*.f64 -3 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x 3 -1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x -3 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/3 (+.f64 -1 (pow.f64 (*.f64 3 x) 3))) (neg.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/3) (fma.f64 x -3 1)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x -1/3)) (cbrt.f64 (pow.f64 (fma.f64 x -3 1) 2))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (*.f64 3 x) 3)) -1/3) (neg.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (+.f64 x -1/3)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 x 3 -1) (cbrt.f64 1/3)) 1) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x 3 -1) (sqrt.f64 3)) 1) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/3 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 -27 (pow.f64 x 3) 1)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x -3 1) 2)) -1/3)) (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x 3 -1) (cbrt.f64 1/3)) 1) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x 3 -1) (sqrt.f64 3)) 1) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 x -3) -3 -3) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (*.f64 3 x) 3)) (*.f64 3 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (*.f64 3 x) 3)) (*.f64 -3 (neg.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 x -3) (cbrt.f64 -1/3)) (cbrt.f64 -1/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 9) x) (cbrt.f64 -1/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 9) x) (cbrt.f64 1/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (*.f64 3 x) 3)) (neg.f64 (*.f64 -3 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (fma.f64 -27 (pow.f64 x 3) 1) -1/3)) (neg.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (*.f64 x -3) -3 -3)) (neg.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -27 (pow.f64 x 3) 1) -1/3) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 -27 (pow.f64 x 3) 1) -1/3) 1) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (*.f64 3 x) 3)) 1/3) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 -27 (pow.f64 x 3) 1) -1/3) 1) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x -1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x -1/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x -1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1/3 (fma.f64 x -3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x -1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -27 -3)) (/.f64 x (cbrt.f64 9)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x -3) -1/3 -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (pow.f64 (*.f64 x -3) 2) 9)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/3) (/.f64 (*.f64 x -3) (cbrt.f64 9)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 -1/3)) (cbrt.f64 (/.f64 -27 9)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x -3)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 x -3) 2)) -1/3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -3 (*.f64 x -1/3) -1/3)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -3 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x -3 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -3 1) (*.f64 (fma.f64 x -3 1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x -3 1) 0) (fma.f64 x -3 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -3 1) (*.f64 0 (fma.f64 x -3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x -3 1)) (fma.f64 x -3 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (*.f64 x -3) 3) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))) (/.f64 1 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x -3) 3) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))) (/.f64 -1 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x -3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 x 3 -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x -3 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (*.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 (pow.f64 (*.f64 x -3) 3) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))) 1) (/.f64 (/.f64 -1 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x -3 1)) (cbrt.f64 (pow.f64 (fma.f64 x -3 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x -3 1) 2)) (cbrt.f64 (fma.f64 x -3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -27 (pow.f64 x 3) 1) (/.f64 1 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x -3 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -3 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 x 3 -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))) (fma.f64 -27 (pow.f64 x 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 3 -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1/3) -3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 3 -1)) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x -3 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1 (pow.f64 (*.f64 3 x) 3)) (/.f64 -1 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x -3) 2)) (-.f64 1 (cbrt.f64 (*.f64 x -3)))) (+.f64 (cbrt.f64 (*.f64 x -3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (-.f64 (cbrt.f64 (pow.f64 (*.f64 x -3) 2)) (cbrt.f64 (*.f64 x -3)))) (+.f64 1 (cbrt.f64 (*.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x -3) 2)) (+.f64 1 (cbrt.f64 (*.f64 3 x)))) (-.f64 (cbrt.f64 (*.f64 x -3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 (*.f64 3 x) 3)) (neg.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x -3 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x -3 1) -3) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 x -3 1) 2)) (cbrt.f64 (fma.f64 -27 (pow.f64 x 3) 1))) (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 (*.f64 3 x) 3)) 1) (neg.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (pow.f64 (*.f64 x -3) 3) 3) 1) (/.f64 1 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))) (+.f64 (+.f64 1 (pow.f64 (*.f64 3 x) 3)) (pow.f64 (*.f64 x -3) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x -3) -3 -3) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x 3 -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 -27 (pow.f64 x 3) 1)) (cbrt.f64 (pow.f64 (fma.f64 x -3 1) 2))) (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 -27 (pow.f64 x 3) 1) (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))) (pow.f64 (cbrt.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (*.f64 x -3) 3) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))) (*.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)) -1)) (*.f64 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))) (*.f64 -3 (+.f64 -1 (pow.f64 (*.f64 3 x) 3)))) (*.f64 -3 (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -27 (pow.f64 x 3) 1) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 3 x) 3)) (fma.f64 9 (*.f64 x x) (fma.f64 x 3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x -3 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x -3 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -3 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -3 1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -3 1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 x 3 -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (fma.f64 x 3 -1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x -3 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -3 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x -3)) (cbrt.f64 (pow.f64 (*.f64 x -3) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -3 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (*.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (*.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 3 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 -3)) (cbrt.f64 9) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x -3) 2)) (cbrt.f64 (*.f64 x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -3) (*.f64 (cbrt.f64 9) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) -27)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -27 x)) (cbrt.f64 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x -3) 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 x -3 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 x -3 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 x -3 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 x -3 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 x -3 1))))))"]],"rules":[["egg-rr",70],["egg-rr",124]],"time":31.2919921875,"type":"rewrite"},{"count":[[218,200]],"inputs":[["-1/3","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","1","(+.f64 (*.f64 -3 x) 1)","(+.f64 (*.f64 -3 x) 1)","(+.f64 (*.f64 -3 x) 1)","(*.f64 -3 x)","(+.f64 1 (*.f64 -3 x))","(+.f64 1 (*.f64 -3 x))","(+.f64 1 (*.f64 -3 x))","(*.f64 -3 x)","(+.f64 1 (*.f64 -3 x))","(+.f64 1 (*.f64 -3 x))","(+.f64 1 (*.f64 -3 x))"]],"method":["egg-herbie"],"outputs":[["-1/3","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","1","(+.f64 (*.f64 -3 x) 1)","(fma.f64 -3 x 1)","(+.f64 (*.f64 -3 x) 1)","(fma.f64 -3 x 1)","(+.f64 (*.f64 -3 x) 1)","(fma.f64 -3 x 1)","(*.f64 -3 x)","(+.f64 1 (*.f64 -3 x))","(fma.f64 -3 x 1)","(+.f64 1 (*.f64 -3 x))","(fma.f64 -3 x 1)","(+.f64 1 (*.f64 -3 x))","(fma.f64 -3 x 1)","(*.f64 -3 x)","(+.f64 1 (*.f64 -3 x))","(fma.f64 -3 x 1)","(+.f64 1 (*.f64 -3 x))","(fma.f64 -3 x 1)","(+.f64 1 (*.f64 -3 x))","(fma.f64 -3 x 1)"]],"time":80.389892578125,"type":"simplify"},{"compiler":[[2540,2094]],"time":43.0419921875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 x -3) -1) -3)","done",0.3671875],["(+.f64 x -1/3)","done",0.01171875]],"compiler":[[8,7],[4,3]],"count":[[202,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[200,0],"picked":[1,1]}],"min-error":[0],"time":63.7060546875,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["(-.f64 x (/.f64 1 3))",0.01171875,1]],"compiler":[[2,1],[6,5],[16,13]],"count":[[3,1]],"inputs":[["(/.f64 (-.f64 (*.f64 x -3) -1) -3)","(+.f64 x -1/3)","(-.f64 x (/.f64 1 3))"]],"link":["."],"name":["Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, G"],"oracle":[0.37890625],"outputs":[["(+.f64 x -1/3)"]],"time":5.8310546875,"times":[["x",2.78515625],["(-.f64 x (/.f64 1 3))",2.41796875]],"type":"regimes"},{"compiler":[[4,3]],"inputs":[["(+.f64 x -1/3)"]],"method":["egg-herbie"],"outputs":[["(+.f64 x -1/3)"]],"stop":[["done",1]],"time":37.989990234375,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[4,3]],"remove-preprocessing":[[]],"time":7.280029296875,"type":"end"}]
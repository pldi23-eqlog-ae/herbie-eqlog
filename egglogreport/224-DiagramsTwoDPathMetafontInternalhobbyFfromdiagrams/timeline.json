[{"compiler":[[53,41]],"method":["search"],"sampling":[[12,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[11,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[10,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[9,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[8,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[7,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[6,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[5,0.7492677569389343,0.24975591897964478,0.0009763240814208984],[4,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":145.97314453125,"type":"analyze"},{"outcomes":[["body",1024,"valid",2163.48779296875,3620],["body",512,"valid",478.294921875,1398],["body",2048,"valid",35.9306640625,28],["body",256,"valid",513.134521484375,3210]],"time":3199.614013671875,"type":"sample"},{"compiler":[[52,40]],"inputs":[["0","1"],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (cos.f64 y) (cos.f64 x)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 y))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 x)))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","(/.f64 (fma.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 y) (*.f64 (sin.f64 x) 1/16))) (-.f64 (sin.f64 x) (*.f64 (sin.f64 y) 1/16))) 2) (*.f64 3 (+.f64 1 (/.f64 (+.f64 (*.f64 (+.f64 (sqrt.f64 5) -1) (cos.f64 x)) (*.f64 (-.f64 3 (sqrt.f64 5)) (cos.f64 y))) 2))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (cos.f64 y) (cos.f64 x)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 y))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 x)))))","(/.f64 (fma.f64 (-.f64 (cos.f64 y) (cos.f64 x)) (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 y) (*.f64 (sin.f64 x) 1/16))) (-.f64 (sin.f64 x) (*.f64 (sin.f64 y) 1/16))) 2) (*.f64 3 (+.f64 1 (/.f64 (+.f64 (*.f64 (+.f64 (sqrt.f64 5) -1) (cos.f64 y)) (*.f64 (-.f64 3 (sqrt.f64 5)) (cos.f64 x))) 2))))"]],"symmetry":[[]],"time":54.807861328125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","(/.f64 (fma.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) 2) (*.f64 3 (+.f64 1 (/.f64 (+.f64 (*.f64 (+.f64 (sqrt.f64 5) -1) (cos.f64 x)) (*.f64 (-.f64 3 (sqrt.f64 5)) (cos.f64 y))) 2))))"]],"time":18.208984375,"type":"simplify"},{"compiler":[[99,70]],"time":1.071044921875,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) 2) (*.f64 3 (+.f64 1 (/.f64 (+.f64 (*.f64 (+.f64 (sqrt.f64 5) -1) (cos.f64 x)) (*.f64 (-.f64 3 (sqrt.f64 5)) (cos.f64 y))) 2))))","fresh",0.47236890861040004],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","next",0.44833764652663033]],"compiler":[[49,37],[52,40],[49,37],[52,40]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.40956884768442026],"time":3.489990234375,"type":"prune"},{"compiler":[[269,178]],"locations":[["(*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16)))",0.30078125,true],["(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16)))",0.40072250976844204,true],["(-.f64 3 (sqrt.f64 5))",1.0,true],["(-.f64 (cos.f64 x) (cos.f64 y))",2.1523568443046606,true]],"time":57.14208984375,"type":"localize"},{"count":[[4,56]],"series":[["(*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16)))","y","-inf",0.509033203125],["(*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16)))","y","inf",0.64306640625],["(*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16)))","y","0",0.464111328125],["(*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16)))","x","-inf",1.19482421875],["(*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16)))","x","inf",0.68505859375],["(*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16)))","x","0",0.422119140625],["(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16)))","y","-inf",0.47412109375],["(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16)))","y","inf",0.708984375],["(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16)))","y","0",0.416015625],["(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16)))","x","-inf",0.85400390625],["(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16)))","x","inf",0.73095703125],["(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16)))","x","0",0.536865234375],["(-.f64 (cos.f64 x) (cos.f64 y))","y","-inf",0.216064453125],["(-.f64 (cos.f64 x) (cos.f64 y))","y","inf",0.375],["(-.f64 (cos.f64 x) (cos.f64 y))","y","0",0.3271484375],["(-.f64 (cos.f64 x) (cos.f64 y))","x","-inf",0.216796875],["(-.f64 (cos.f64 x) (cos.f64 y))","x","inf",0.5009765625],["(-.f64 (cos.f64 x) (cos.f64 y))","x","0",0.43505859375]],"time":9.9990234375,"type":"series"},{"count":[[4,224]],"inputs":[["(-.f64 (cos.f64 x) (cos.f64 y))","(-.f64 3 (sqrt.f64 5))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16)))","(*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cos.f64 x) (cos.f64 y)) 1/2) (*.f64 (-.f64 (cos.f64 x) (cos.f64 y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 (-.f64 (cos.f64 x) (cos.f64 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cos.f64 x) (cos.f64 y)) 0) (-.f64 (cos.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 y)) (*.f64 (neg.f64 (cos.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 (cos.f64 x) (cos.f64 y))) (*.f64 1/2 (-.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 0 (-.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (cos.f64 x) (cos.f64 y))) (-.f64 (cos.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 y)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 x) (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (cos.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cos.f64 x) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cos.f64 y) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cos.f64 x) 0) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (cos.f64 y)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cos.f64 x) (cos.f64 y))) (cbrt.f64 (pow.f64 (-.f64 (cos.f64 x) (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (cos.f64 x) (cos.f64 y)) 2)) (cbrt.f64 (-.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2 (sin.f64 (*.f64 (+.f64 x y) 1/2))) (sin.f64 (*.f64 (-.f64 x y) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (cos.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cos.f64 x) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (cos.f64 y) (cos.f64 x)))) (pow.f64 (cbrt.f64 (-.f64 (cos.f64 y) (cos.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cos.f64 y) (cos.f64 x))) (neg.f64 (pow.f64 (cbrt.f64 (-.f64 (cos.f64 y) (cos.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (*.f64 (sin.f64 (*.f64 (+.f64 x y) 1/2)) (sin.f64 (*.f64 (-.f64 x y) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (+.f64 x y) 1/2)) (sin.f64 (*.f64 (-.f64 x y) 1/2))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cos.f64 y) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (sin.f64 (*.f64 (+.f64 x y) 1/2)) (sin.f64 (*.f64 (-.f64 y x) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (neg.f64 (*.f64 (sin.f64 (*.f64 (+.f64 x y) 1/2)) (sin.f64 (*.f64 (-.f64 x y) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -2 (neg.f64 (*.f64 (sin.f64 (*.f64 (+.f64 x y) 1/2)) (sin.f64 (*.f64 (-.f64 y x) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 x) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 y) (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (-.f64 (cos.f64 (*.f64 1/2 (-.f64 (+.f64 x y) (-.f64 x y)))) (cos.f64 (*.f64 1/2 (+.f64 (+.f64 x y) (-.f64 x y)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 (*.f64 1/2 (-.f64 (+.f64 x y) (-.f64 x y)))) (cos.f64 (*.f64 1/2 (+.f64 (+.f64 x y) (-.f64 x y))))) -2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cos.f64 x) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cos.f64 x) (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cos.f64 x) (cos.f64 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cos.f64 x) (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cos.f64 y) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (cos.f64 y) (cos.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (cos.f64 x) (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cos.f64 x) (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (cos.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (cos.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (cos.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (cos.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) 1 (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (cos.f64 x)) (neg.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (cos.f64 x) (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 3 (sqrt.f64 5)) 1/2) (*.f64 (-.f64 3 (sqrt.f64 5)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 3 (sqrt.f64 5)) (*.f64 (-.f64 3 (sqrt.f64 5)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 3 (sqrt.f64 5)) 0) (-.f64 3 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (-.f64 3 (sqrt.f64 5))) (*.f64 1/2 (-.f64 3 (sqrt.f64 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 3 (sqrt.f64 5)) (*.f64 0 (-.f64 3 (sqrt.f64 5))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 3 (sqrt.f64 5))) (-.f64 3 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 5)) (*.f64 -3 -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 3 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 27 (+.f64 14 (sqrt.f64 (*.f64 9 5)))) (neg.f64 (/.f64 (sqrt.f64 125) (+.f64 14 (sqrt.f64 (*.f64 9 5))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 3 (neg.f64 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 5)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 9 (+.f64 3 (sqrt.f64 5))) (/.f64 5 (+.f64 3 (sqrt.f64 5))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 27 (+.f64 14 (sqrt.f64 (*.f64 9 5)))) (/.f64 (sqrt.f64 125) (+.f64 14 (sqrt.f64 (*.f64 9 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (sqrt.f64 5) -3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (sqrt.f64 5)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (sqrt.f64 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 3 (sqrt.f64 5))) (cbrt.f64 (pow.f64 (-.f64 3 (sqrt.f64 5)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 3 (sqrt.f64 5)) 2)) (cbrt.f64 (-.f64 3 (sqrt.f64 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 3 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 3 (sqrt.f64 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 3) (sqrt.f64 (sqrt.f64 5))) (-.f64 (sqrt.f64 3) (sqrt.f64 (sqrt.f64 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 -3 (neg.f64 (sqrt.f64 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (sqrt.f64 3) (sqrt.f64 (sqrt.f64 5)))) (-.f64 (sqrt.f64 (sqrt.f64 5)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (sqrt.f64 5) -3))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 5) -3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sqrt.f64 5) -3)) (neg.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 5) -3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 3) (sqrt.f64 (sqrt.f64 5))) (-.f64 (sqrt.f64 3) (neg.f64 (sqrt.f64 (sqrt.f64 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 (sqrt.f64 (sqrt.f64 5)))) (-.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 (sqrt.f64 (sqrt.f64 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (sqrt.f64 3)) (sqrt.f64 (sqrt.f64 5))) (-.f64 (neg.f64 (sqrt.f64 3)) (sqrt.f64 (sqrt.f64 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 9) (+.f64 (cbrt.f64 5) (*.f64 (cbrt.f64 3) (cbrt.f64 (sqrt.f64 5))))) (-.f64 (cbrt.f64 3) (cbrt.f64 (sqrt.f64 5))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 27 (sqrt.f64 125)) (/.f64 1 (+.f64 14 (sqrt.f64 (*.f64 9 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (sqrt.f64 5) -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 27 (sqrt.f64 125)) (/.f64 1 (-.f64 14 (neg.f64 (sqrt.f64 (*.f64 9 5))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 125) 27) (/.f64 1 (neg.f64 (+.f64 14 (sqrt.f64 (*.f64 9 5))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 4 (/.f64 1 (+.f64 3 (sqrt.f64 5))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 3 (sqrt.f64 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 19683 (*.f64 (sqrt.f64 125) 125)) (/.f64 1 (+.f64 14 (sqrt.f64 (*.f64 9 5))))) (+.f64 (+.f64 729 125) (*.f64 27 (sqrt.f64 125))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (sqrt.f64 125)) 1) (-.f64 14 (neg.f64 (sqrt.f64 (*.f64 9 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 3 (sqrt.f64 5)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (+.f64 3 (sqrt.f64 5)) -4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -2 (/.f64 (+.f64 3 (sqrt.f64 5)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 27 (+.f64 14 (sqrt.f64 (*.f64 9 5)))) (*.f64 (+.f64 14 (sqrt.f64 (*.f64 9 5))) (sqrt.f64 125))) (*.f64 (+.f64 14 (sqrt.f64 (*.f64 9 5))) (+.f64 14 (sqrt.f64 (*.f64 9 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 125) 27) (neg.f64 (-.f64 14 (neg.f64 (sqrt.f64 (*.f64 9 5))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (sqrt.f64 125)) (+.f64 14 (sqrt.f64 (*.f64 9 5))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -4 (neg.f64 (+.f64 3 (sqrt.f64 5))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (sqrt.f64 125)) (-.f64 14 (neg.f64 (sqrt.f64 (*.f64 9 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 125) 27) (neg.f64 (+.f64 14 (sqrt.f64 (*.f64 9 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 4 (+.f64 3 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 (sqrt.f64 5)) 2)) (cbrt.f64 (-.f64 27 (sqrt.f64 125)))) (cbrt.f64 (+.f64 14 (sqrt.f64 (*.f64 9 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (sqrt.f64 125)) 1) (+.f64 14 (sqrt.f64 (*.f64 9 5))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 27 (sqrt.f64 125))) (cbrt.f64 (pow.f64 (-.f64 3 (sqrt.f64 5)) 2))) (cbrt.f64 (+.f64 14 (sqrt.f64 (*.f64 9 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (sqrt.f64 125) 27) 1) (neg.f64 (+.f64 14 (sqrt.f64 (*.f64 9 5)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 2 (/.f64 (+.f64 3 (sqrt.f64 5)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (sqrt.f64 125)) (+.f64 5 (-.f64 9 (*.f64 (neg.f64 (sqrt.f64 5)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 3 (sqrt.f64 5)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 3 (sqrt.f64 5)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 3 (sqrt.f64 5))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 3 (sqrt.f64 5))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (sqrt.f64 5) -3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (sqrt.f64 5) -3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 3 (sqrt.f64 5)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) (sqrt.f64 3) (neg.f64 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) (cbrt.f64 9) (neg.f64 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 3 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 3 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 3 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 3 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 9) (cbrt.f64 3) (neg.f64 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -3 (neg.f64 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 (sqrt.f64 3)) (neg.f64 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 3 (neg.f64 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 3 (sqrt.f64 5)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 1 (neg.f64 (sqrt.f64 5)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (sin.f64 x)) (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 y) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) 1/2) (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) 0) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (sin.f64 x) (sqrt.f64 2))) (*.f64 1 (*.f64 (*.f64 (sin.f64 y) -1/16) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (sqrt.f64 2) (sin.f64 x))) (*.f64 1 (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 y) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (sqrt.f64 2)) (*.f64 (*.f64 (sin.f64 y) -1/16) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (*.f64 1/2 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (*.f64 0 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (sqrt.f64 2)) 1) (*.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (sqrt.f64 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (sin.f64 x)) 1) (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 y) -1/16)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (sqrt.f64 2)) (*.f64 (sin.f64 x) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 y) -1/16)) (*.f64 (sqrt.f64 2) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2) 2)) (cbrt.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (sqrt.f64 (sqrt.f64 2)) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 2)) (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (neg.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (sqrt.f64 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (sin.f64 y)) (/.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (sin.f64 x)) -16))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (/.f64 (*.f64 (sin.f64 x) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) -16))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sin.f64 x) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) -16) (*.f64 (sin.f64 y) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (sin.f64 x)) -16) (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2)) (*.f64 (sin.f64 y) -1/16)) (*.f64 (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2)) (sin.f64 x)) (*.f64 (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2)) (*.f64 (sin.f64 y) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) 1/2) (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) 0) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (sin.f64 y) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))) (*.f64 1 (/.f64 (*.f64 (sin.f64 x) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) -16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (sin.f64 y))) (*.f64 1 (/.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (sin.f64 x)) -16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (*.f64 (sin.f64 x) (sqrt.f64 2))) (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (*.f64 (*.f64 (sin.f64 y) -1/16) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (*.f64 (sqrt.f64 2) (sin.f64 x))) (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 y) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 y) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (*.f64 (sqrt.f64 2) (*.f64 (*.f64 (sin.f64 x) -1/16) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (sin.f64 y))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2))) (*.f64 (sin.f64 x) (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2))) (*.f64 (*.f64 (sin.f64 y) -1/16) (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))) (*.f64 1/2 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) (*.f64 0 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) 1) (*.f64 (/.f64 (*.f64 (sin.f64 x) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) -16) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (sin.f64 y)) 1) (*.f64 (/.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (sin.f64 x)) -16) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (sqrt.f64 2)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (*.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (sqrt.f64 2)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (sin.f64 x)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (sqrt.f64 2)) (*.f64 (*.f64 (*.f64 (sin.f64 x) -1/16) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (sin.f64 y)) (sqrt.f64 2)) (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (fma.f64 (sin.f64 x) 1/16 (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sin.f64 x) 1/16 (neg.f64 (sin.f64 y))) (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (*.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2) 2)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) 2)) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))) (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) 2)) (cbrt.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (cbrt.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (cbrt.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) (cbrt.f64 (pow.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (sqrt.f64 2)) (fma.f64 (sin.f64 x) 1/16 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2)) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (fma.f64 (sin.f64 x) 1/16 (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (fma.f64 (sin.f64 x) 1/16 (neg.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (fma.f64 (sin.f64 x) 1/16 (neg.f64 (sin.f64 y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (fma.f64 (sin.f64 x) 1/16 (neg.f64 (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (sqrt.f64 2)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2)) (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)) (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 (sin.f64 y) 1/16 (neg.f64 (sin.f64 x))) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))) 3))))))"]],"rules":[["egg-rr",62],["egg-rr",40],["egg-rr",72],["egg-rr",50]],"time":51.375,"type":"rewrite"},{"count":[[280,274]],"inputs":[["(-.f64 1 (cos.f64 y))","(-.f64 (+.f64 1 (*.f64 -1/2 (pow.f64 x 2))) (cos.f64 y))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4)))) (cos.f64 y))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6))))) (cos.f64 y))","(-.f64 (cos.f64 x) 1)","(-.f64 (+.f64 (cos.f64 x) (*.f64 1/2 (pow.f64 y 2))) 1)","(-.f64 (+.f64 (cos.f64 x) (+.f64 (*.f64 1/2 (pow.f64 y 2)) (*.f64 -1/24 (pow.f64 y 4)))) 1)","(-.f64 (+.f64 (cos.f64 x) (+.f64 (*.f64 1/2 (pow.f64 y 2)) (+.f64 (*.f64 1/720 (pow.f64 y 6)) (*.f64 -1/24 (pow.f64 y 4))))) 1)","(*.f64 -1/16 (*.f64 (sqrt.f64 2) (sin.f64 y)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (sin.f64 y))) (*.f64 (sqrt.f64 2) x))","(+.f64 (*.f64 -1/6 (*.f64 (sqrt.f64 2) (pow.f64 x 3))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (sin.f64 y))) (*.f64 (sqrt.f64 2) x)))","(+.f64 (*.f64 -1/6 (*.f64 (sqrt.f64 2) (pow.f64 x 3))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (sin.f64 y))) (+.f64 (*.f64 (sqrt.f64 2) x) (*.f64 1/120 (*.f64 (sqrt.f64 2) (pow.f64 x 5))))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (sin.f64 x))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) y)) (*.f64 (sqrt.f64 2) (sin.f64 x)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) y)) (+.f64 (*.f64 1/96 (*.f64 (sqrt.f64 2) (pow.f64 y 3))) (*.f64 (sqrt.f64 2) (sin.f64 x))))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) y)) (+.f64 (*.f64 1/96 (*.f64 (sqrt.f64 2) (pow.f64 y 3))) (+.f64 (*.f64 (sqrt.f64 2) (sin.f64 x)) (*.f64 -1/1920 (*.f64 (sqrt.f64 2) (pow.f64 y 5))))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x))))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/1536 (sin.f64 y)) (*.f64 -1/6 (sin.f64 y))) (pow.f64 x 3))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2)))","(+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2))))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 y 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2)))))","(+.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/1536 (sin.f64 x)) (*.f64 -1/6 (sin.f64 x))))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 y 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2))))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (cos.f64 y))","(-.f64 (+.f64 1 (*.f64 -1/2 (pow.f64 x 2))) (cos.f64 y))","(-.f64 (fma.f64 (*.f64 x x) -1/2 1) (cos.f64 y))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4)))) (cos.f64 y))","(-.f64 (+.f64 1 (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/2 (*.f64 x x)))) (cos.f64 y))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6))))) (cos.f64 y))","(+.f64 (fma.f64 -1/2 (*.f64 x x) (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/720 (pow.f64 x 6)))) (-.f64 1 (cos.f64 y)))","(-.f64 (cos.f64 x) 1)","(+.f64 (cos.f64 x) -1)","(-.f64 (+.f64 (cos.f64 x) (*.f64 1/2 (pow.f64 y 2))) 1)","(+.f64 (cos.f64 x) (fma.f64 (*.f64 y y) 1/2 -1))","(-.f64 (+.f64 (cos.f64 x) (+.f64 (*.f64 1/2 (pow.f64 y 2)) (*.f64 -1/24 (pow.f64 y 4)))) 1)","(+.f64 (+.f64 (cos.f64 x) (fma.f64 (pow.f64 y 4) -1/24 (*.f64 1/2 (*.f64 y y)))) -1)","(-.f64 (+.f64 (cos.f64 x) (+.f64 (*.f64 1/2 (pow.f64 y 2)) (+.f64 (*.f64 1/720 (pow.f64 y 6)) (*.f64 -1/24 (pow.f64 y 4))))) 1)","(+.f64 (fma.f64 1/2 (*.f64 y y) (fma.f64 1/720 (pow.f64 y 6) (*.f64 -1/24 (pow.f64 y 4)))) (+.f64 (cos.f64 x) -1))","(*.f64 -1/16 (*.f64 (sqrt.f64 2) (sin.f64 y)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (sin.f64 y))) (*.f64 (sqrt.f64 2) x))","(fma.f64 -1/16 (*.f64 (sqrt.f64 2) (sin.f64 y)) (*.f64 (sqrt.f64 2) x))","(+.f64 (*.f64 -1/6 (*.f64 (sqrt.f64 2) (pow.f64 x 3))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (sin.f64 y))) (*.f64 (sqrt.f64 2) x)))","(fma.f64 (*.f64 -1/6 (sqrt.f64 2)) (pow.f64 x 3) (fma.f64 -1/16 (*.f64 (sqrt.f64 2) (sin.f64 y)) (*.f64 (sqrt.f64 2) x)))","(+.f64 (*.f64 -1/6 (*.f64 (sqrt.f64 2) (pow.f64 x 3))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (sin.f64 y))) (+.f64 (*.f64 (sqrt.f64 2) x) (*.f64 1/120 (*.f64 (sqrt.f64 2) (pow.f64 x 5))))))","(fma.f64 (*.f64 -1/6 (sqrt.f64 2)) (pow.f64 x 3) (fma.f64 -1/16 (*.f64 (sqrt.f64 2) (sin.f64 y)) (fma.f64 (sqrt.f64 2) x (*.f64 1/120 (*.f64 (sqrt.f64 2) (pow.f64 x 5))))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (sin.f64 x))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) y)) (*.f64 (sqrt.f64 2) (sin.f64 x)))","(fma.f64 -1/16 (*.f64 (sqrt.f64 2) y) (*.f64 (sqrt.f64 2) (sin.f64 x)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) y)) (+.f64 (*.f64 1/96 (*.f64 (sqrt.f64 2) (pow.f64 y 3))) (*.f64 (sqrt.f64 2) (sin.f64 x))))","(fma.f64 -1/16 (*.f64 (sqrt.f64 2) y) (fma.f64 1/96 (*.f64 (sqrt.f64 2) (pow.f64 y 3)) (*.f64 (sqrt.f64 2) (sin.f64 x))))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) y)) (+.f64 (*.f64 1/96 (*.f64 (sqrt.f64 2) (pow.f64 y 3))) (+.f64 (*.f64 (sqrt.f64 2) (sin.f64 x)) (*.f64 -1/1920 (*.f64 (sqrt.f64 2) (pow.f64 y 5))))))","(fma.f64 -1/16 (*.f64 (sqrt.f64 2) y) (fma.f64 1/96 (*.f64 (sqrt.f64 2) (pow.f64 y 3)) (fma.f64 (sqrt.f64 2) (sin.f64 x) (*.f64 -1/1920 (*.f64 (sqrt.f64 2) (pow.f64 y 5))))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))))","(*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))))","(*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2)))","(*.f64 (*.f64 -1/16 (sqrt.f64 2)) (pow.f64 (sin.f64 y) 2))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x)))","(fma.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2)) (*.f64 (sqrt.f64 2) (*.f64 (*.f64 257/256 (sin.f64 y)) x)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x))))","(+.f64 (*.f64 (*.f64 -1/16 (sqrt.f64 2)) (+.f64 (*.f64 x x) (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (*.f64 (*.f64 257/256 (sin.f64 y)) x)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/1536 (sin.f64 y)) (*.f64 -1/6 (sin.f64 y))) (pow.f64 x 3))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x)))))","(+.f64 (*.f64 (*.f64 -1/16 (sqrt.f64 2)) (+.f64 (*.f64 x x) (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (fma.f64 (*.f64 (sin.f64 y) -257/1536) (pow.f64 x 3) (*.f64 (*.f64 257/256 (sin.f64 y)) x))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2)))","(*.f64 (*.f64 -1/16 (sqrt.f64 2)) (pow.f64 (sin.f64 x) 2))","(+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2))))","(fma.f64 (sqrt.f64 2) (*.f64 y (*.f64 257/256 (sin.f64 x))) (*.f64 (*.f64 -1/16 (sqrt.f64 2)) (pow.f64 (sin.f64 x) 2)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 y 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2)))))","(fma.f64 -1/16 (*.f64 (sqrt.f64 2) (*.f64 y y)) (fma.f64 (sqrt.f64 2) (*.f64 y (*.f64 257/256 (sin.f64 x))) (*.f64 (*.f64 -1/16 (sqrt.f64 2)) (pow.f64 (sin.f64 x) 2))))","(+.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/1536 (sin.f64 x)) (*.f64 -1/6 (sin.f64 x))))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 y 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2))))))","(fma.f64 (*.f64 (sqrt.f64 2) (pow.f64 y 3)) (*.f64 (sin.f64 x) -257/1536) (fma.f64 -1/16 (*.f64 (sqrt.f64 2) (*.f64 y y)) (fma.f64 (sqrt.f64 2) (*.f64 y (*.f64 257/256 (sin.f64 x))) (*.f64 (*.f64 -1/16 (sqrt.f64 2)) (pow.f64 (sin.f64 x) 2)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y))) (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))","(*.f64 (sqrt.f64 2) (*.f64 (-.f64 (sin.f64 y) (*.f64 1/16 (sin.f64 x))) (-.f64 (sin.f64 x) (*.f64 1/16 (sin.f64 y)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (sin.f64 x) (*.f64 -1/16 (sin.f64 y))) (+.f64 (sin.f64 y) (*.f64 -1/16 (sin.f64 x)))))"]],"time":195.531982421875,"type":"simplify"},{"compiler":[[15566,10634]],"time":141.403076171875,"type":"eval"},{"alts":[["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2) 2))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","fresh",0.44281015629507237],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 3 (sqrt.f64 5))) 3) 2) (cos.f64 y)))))","fresh",0.5241839965263784],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","next",0.43271264652663033],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","fresh",0.4389039062950723],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 (*.f64 (-.f64 19683 (*.f64 (sqrt.f64 125) 125)) (/.f64 1 (+.f64 14 (sqrt.f64 (*.f64 9 5))))) (+.f64 (+.f64 729 125) (*.f64 27 (sqrt.f64 125)))) 2) (cos.f64 y)))))","fresh",0.4907839301637833],["(/.f64 (fma.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) 2) (*.f64 3 (+.f64 1 (/.f64 (+.f64 (*.f64 (+.f64 (sqrt.f64 5) -1) (cos.f64 x)) (*.f64 (-.f64 3 (sqrt.f64 5)) (cos.f64 y))) 2))))","fresh",0.47236890861040004],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 4 (+.f64 3 (sqrt.f64 5))) 2) (cos.f64 y)))))","fresh",0.46786889652663033],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (fma.f64 (sqrt.f64 3) (sqrt.f64 3) (neg.f64 (sqrt.f64 5))) 2) (cos.f64 y)))))","fresh",1.0086683147683342],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","fresh",0.43661889652663033]],"compiler":[[66,50],[55,43],[52,40],[74,52],[72,60],[49,37],[54,42],[56,44],[64,48],[66,50],[55,43],[52,40],[74,52],[72,60],[49,37],[54,42],[56,44],[64,48]],"count":[[276,9]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[274,8],"picked":[1,0]}],"min-error":[0.2285538086106521],"time":121.02490234375,"type":"prune"},{"compiler":[[274,179]],"locations":[["(*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))",0.38900375976844204,true],["(*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2))",0.41796875,true],["(-.f64 3 (sqrt.f64 5))",1.0,false],["(-.f64 (cos.f64 x) (cos.f64 y))",2.1523568443046606,false]],"time":84.277099609375,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))","y","-inf",0.202880859375],["(*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))","y","inf",0.177978515625],["(*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))","y","0",0.260986328125],["(*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))","x","-inf",0.177978515625],["(*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))","x","inf",0.213134765625],["(*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))","x","0",0.233154296875],["(*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2))","y","-inf",0.715087890625],["(*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2))","y","inf",0.778076171875],["(*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2))","y","0",0.305908203125],["(*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2))","x","-inf",0.700927734375],["(*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2))","x","inf",0.843017578125],["(*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2))","x","0",0.421142578125]],"time":5.265869140625,"type":"series"},{"count":[[2,144]],"inputs":[["(*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2))","(*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y))) (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (sqrt.f64 2)) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16))) (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2)) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sqrt.f64 2)) (sin.f64 x)) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sqrt.f64 2)) (*.f64 (sin.f64 y) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sqrt.f64 2)) (*.f64 (sin.f64 y) -1/16)) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sqrt.f64 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))) (*.f64 1 (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (sqrt.f64 2))) (*.f64 1 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) (*.f64 (sqrt.f64 2) (*.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16))) (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x))) (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 2) (*.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) (*.f64 (sqrt.f64 2) (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (sin.f64 y)) (*.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (*.f64 (sin.f64 x) -1/16)) (*.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) 1/2) (*.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) 0) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) (*.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sqrt.f64 2))) (*.f64 (*.f64 (sin.f64 y) -1/16) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sqrt.f64 2))) (*.f64 (sin.f64 x) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y))) 1) (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (sqrt.f64 2)) 1) (*.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) (*.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16)) (sqrt.f64 2)) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x)) (sqrt.f64 2)) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) (*.f64 (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (*.f64 (sqrt.f64 2) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)))) (*.f64 (*.f64 (sin.f64 x) -1/16) (*.f64 (sqrt.f64 2) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) -1/16) (*.f64 (sqrt.f64 2) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)))) (*.f64 (sin.f64 y) (*.f64 (sqrt.f64 2) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))) (*.f64 1/2 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) (*.f64 0 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sqrt.f64 2)) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 2) 2)) (cbrt.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (*.f64 (cbrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2)) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 2)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 (sqrt.f64 2))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (sqrt.f64 (sqrt.f64 2)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (cbrt.f64 (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (sqrt.f64 2) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x)) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16)) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (*.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (*.f64 (*.f64 (sin.f64 x) -1/16) (*.f64 (sin.f64 y) -1/16))) (*.f64 (*.f64 (sin.f64 x) -1/16) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (*.f64 (*.f64 (sin.f64 x) -1/16) (sin.f64 x))) (*.f64 (*.f64 (sin.f64 x) -1/16) (*.f64 (sin.f64 y) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (*.f64 (*.f64 (sin.f64 y) -1/16) (*.f64 (sin.f64 x) -1/16))) (*.f64 (sin.f64 x) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (*.f64 (sin.f64 x) (*.f64 (sin.f64 x) -1/16))) (*.f64 (*.f64 (sin.f64 y) -1/16) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)) (*.f64 (sin.f64 y) (sin.f64 x))) (*.f64 (sin.f64 y) (*.f64 (sin.f64 y) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)) (*.f64 (sin.f64 y) (*.f64 (sin.f64 y) -1/16))) (*.f64 (sin.f64 y) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)) (*.f64 (*.f64 (sin.f64 y) -1/16) (sin.f64 y))) (*.f64 (sin.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)) (*.f64 (sin.f64 x) (sin.f64 y))) (*.f64 (*.f64 (sin.f64 y) -1/16) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (*.f64 (sin.f64 y) -1/16)) (+.f64 (*.f64 (sin.f64 y) (sin.f64 x)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (sin.f64 y)) (+.f64 (*.f64 (sin.f64 x) (sin.f64 y)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (sin.f64 y)) (+.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (sin.f64 y)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (sin.f64 x)) (+.f64 (*.f64 (sin.f64 y) (*.f64 (sin.f64 y) -1/16)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) -1/16) (sin.f64 x)) (+.f64 (*.f64 (*.f64 (sin.f64 x) -1/16) (*.f64 (sin.f64 y) -1/16)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) -1/16) (*.f64 (sin.f64 y) -1/16)) (+.f64 (*.f64 (*.f64 (sin.f64 x) -1/16) (sin.f64 x)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 x) (*.f64 (sin.f64 x) -1/16)) (+.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (*.f64 (sin.f64 x) -1/16)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (*.f64 (sin.f64 x) -1/16)) (+.f64 (*.f64 (sin.f64 x) (*.f64 (sin.f64 x) -1/16)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) (*.f64 1 (*.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16))) (*.f64 1 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x))) (*.f64 1 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1 (*.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) (*.f64 1 (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 1/2) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 0) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 1) (*.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16)) 1) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x)) 1) (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 1) (*.f64 (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) (*.f64 1/2 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (*.f64 0 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) 2)) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 2)) (cbrt.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (cbrt.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)))) (cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2)) (+.f64 (*.f64 (sin.f64 y) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)))) (*.f64 (*.f64 (sin.f64 x) -1/16) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2)) (+.f64 (*.f64 (*.f64 (sin.f64 x) -1/16) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)))) (*.f64 (sin.f64 y) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 y) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (sin.f64 x) (*.f64 (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (sin.f64 y) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) 1 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)) (*.f64 (*.f64 (sin.f64 y) -1/16) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 x) -1/16)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) -1/16) 2)) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 x) -1/16) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2)) (*.f64 (sin.f64 x) -1/16)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16))) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16))) 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) -1/16) (sin.f64 x) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (sin.f64 x) -1/16) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)))) (cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 x)) -1/16 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/16 (*.f64 (sin.f64 x) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (cbrt.f64 (*.f64 (sin.f64 x) -1/16))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 x) -1/16) 2)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 x) (*.f64 -1/16 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y))) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y))) 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2)) (sin.f64 y)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (cbrt.f64 (sin.f64 y))) (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (sin.f64 y)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 y) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)))) (cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2)) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (*.f64 (sin.f64 x) -1/16)))))))"]],"rules":[["egg-rr",84],["egg-rr",60]],"time":37.9970703125,"type":"rewrite"},{"count":[[192,176]],"inputs":[["(*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x))))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/1536 (sin.f64 y)) (*.f64 -1/6 (sin.f64 y))) (pow.f64 x 3))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2)))","(+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2))))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 y 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2)))))","(+.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/1536 (sin.f64 x)) (*.f64 -1/6 (sin.f64 x))))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 y 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2))))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 -1/16 (pow.f64 (sin.f64 y) 2))","(+.f64 (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x) (*.f64 -1/16 (pow.f64 (sin.f64 y) 2)))","(+.f64 (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x) (+.f64 (*.f64 -1/16 (pow.f64 x 2)) (*.f64 -1/16 (pow.f64 (sin.f64 y) 2))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/1536 (sin.f64 y)) (*.f64 -1/6 (sin.f64 y))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x) (+.f64 (*.f64 -1/16 (pow.f64 x 2)) (*.f64 -1/16 (pow.f64 (sin.f64 y) 2)))))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 -1/16 (pow.f64 (sin.f64 x) 2))","(+.f64 (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x))) (*.f64 -1/16 (pow.f64 (sin.f64 x) 2)))","(+.f64 (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x))) (+.f64 (*.f64 -1/16 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 (sin.f64 x) 2))))","(+.f64 (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x))) (+.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/1536 (sin.f64 x)) (*.f64 -1/6 (sin.f64 x)))) (+.f64 (*.f64 -1/16 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 (sin.f64 x) 2)))))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2)))","(*.f64 (*.f64 -1/16 (sqrt.f64 2)) (pow.f64 (sin.f64 y) 2))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x)))","(fma.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2)) (*.f64 (sqrt.f64 2) (*.f64 (*.f64 257/256 (sin.f64 y)) x)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x))))","(+.f64 (*.f64 (*.f64 -1/16 (sqrt.f64 2)) (fma.f64 x x (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (*.f64 (*.f64 257/256 (sin.f64 y)) x)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 y) 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/1536 (sin.f64 y)) (*.f64 -1/6 (sin.f64 y))) (pow.f64 x 3))) (*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x)))))","(+.f64 (*.f64 (*.f64 -1/16 (sqrt.f64 2)) (fma.f64 x x (pow.f64 (sin.f64 y) 2))) (*.f64 (sqrt.f64 2) (fma.f64 (*.f64 (sin.f64 y) -257/1536) (pow.f64 x 3) (*.f64 (*.f64 257/256 (sin.f64 y)) x))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2)))","(*.f64 (*.f64 -1/16 (sqrt.f64 2)) (pow.f64 (sin.f64 x) 2))","(+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2))))","(fma.f64 (sqrt.f64 2) (*.f64 y (*.f64 257/256 (sin.f64 x))) (*.f64 (*.f64 -1/16 (sqrt.f64 2)) (pow.f64 (sin.f64 x) 2)))","(+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 y 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2)))))","(fma.f64 (*.f64 (sqrt.f64 2) (*.f64 y y)) -1/16 (fma.f64 (sqrt.f64 2) (*.f64 y (*.f64 257/256 (sin.f64 x))) (*.f64 (*.f64 -1/16 (sqrt.f64 2)) (pow.f64 (sin.f64 x) 2))))","(+.f64 (*.f64 (sqrt.f64 2) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/1536 (sin.f64 x)) (*.f64 -1/6 (sin.f64 x))))) (+.f64 (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 y 2))) (+.f64 (*.f64 (sqrt.f64 2) (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x)))) (*.f64 -1/16 (*.f64 (sqrt.f64 2) (pow.f64 (sin.f64 x) 2))))))","(fma.f64 (*.f64 (sqrt.f64 2) (pow.f64 y 3)) (*.f64 (sin.f64 x) -257/1536) (fma.f64 (*.f64 (sqrt.f64 2) (*.f64 y y)) -1/16 (fma.f64 (sqrt.f64 2) (*.f64 y (*.f64 257/256 (sin.f64 x))) (*.f64 (*.f64 -1/16 (sqrt.f64 2)) (pow.f64 (sin.f64 x) 2)))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y))))","(*.f64 (sqrt.f64 2) (*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))))","(*.f64 -1/16 (pow.f64 (sin.f64 y) 2))","(+.f64 (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x) (*.f64 -1/16 (pow.f64 (sin.f64 y) 2)))","(fma.f64 (*.f64 257/256 (sin.f64 y)) x (*.f64 -1/16 (pow.f64 (sin.f64 y) 2)))","(+.f64 (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x) (+.f64 (*.f64 -1/16 (pow.f64 x 2)) (*.f64 -1/16 (pow.f64 (sin.f64 y) 2))))","(fma.f64 (*.f64 257/256 (sin.f64 y)) x (*.f64 -1/16 (fma.f64 x x (pow.f64 (sin.f64 y) 2))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/1536 (sin.f64 y)) (*.f64 -1/6 (sin.f64 y))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 1/256 (sin.f64 y)) (sin.f64 y)) x) (+.f64 (*.f64 -1/16 (pow.f64 x 2)) (*.f64 -1/16 (pow.f64 (sin.f64 y) 2)))))","(fma.f64 (pow.f64 x 3) (*.f64 (sin.f64 y) -257/1536) (fma.f64 (*.f64 257/256 (sin.f64 y)) x (*.f64 -1/16 (fma.f64 x x (pow.f64 (sin.f64 y) 2)))))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 -1/16 (pow.f64 (sin.f64 x) 2))","(+.f64 (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x))) (*.f64 -1/16 (pow.f64 (sin.f64 x) 2)))","(fma.f64 y (*.f64 257/256 (sin.f64 x)) (*.f64 -1/16 (pow.f64 (sin.f64 x) 2)))","(+.f64 (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x))) (+.f64 (*.f64 -1/16 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 (sin.f64 x) 2))))","(fma.f64 y (*.f64 257/256 (sin.f64 x)) (*.f64 -1/16 (fma.f64 y y (pow.f64 (sin.f64 x) 2))))","(+.f64 (*.f64 y (+.f64 (*.f64 1/256 (sin.f64 x)) (sin.f64 x))) (+.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/1536 (sin.f64 x)) (*.f64 -1/6 (sin.f64 x)))) (+.f64 (*.f64 -1/16 (pow.f64 y 2)) (*.f64 -1/16 (pow.f64 (sin.f64 x) 2)))))","(fma.f64 y (*.f64 257/256 (sin.f64 x)) (fma.f64 (pow.f64 y 3) (*.f64 (sin.f64 x) -257/1536) (*.f64 -1/16 (fma.f64 y y (pow.f64 (sin.f64 x) 2)))))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))","(*.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) (+.f64 (*.f64 -1/16 (sin.f64 x)) (sin.f64 y)))","(*.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y)))"]],"time":153.705078125,"type":"simplify"},{"compiler":[[17879,11931]],"time":169.726806640625,"type":"eval"},{"alts":[["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2) 2))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","fresh",0.44281015629507237],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 3 (sqrt.f64 5))) 3) 2) (cos.f64 y)))))","fresh",0.5085589965263784],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (fma.f64 (sqrt.f64 3) (sqrt.f64 3) (neg.f64 (sqrt.f64 5))) 2) (cos.f64 y)))))","fresh",0.9930433147683343],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","next",0.4271851562950723],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 4 (+.f64 3 (sqrt.f64 5))) 2) (cos.f64 y)))))","fresh",0.45224389652663033],["(/.f64 (fma.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) 2) (*.f64 3 (+.f64 1 (/.f64 (+.f64 (*.f64 (+.f64 (sqrt.f64 5) -1) (cos.f64 x)) (*.f64 (-.f64 3 (sqrt.f64 5)) (cos.f64 y))) 2))))","fresh",0.47236890861040004],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 (*.f64 (-.f64 19683 (*.f64 (sqrt.f64 125) 125)) (/.f64 1 (+.f64 14 (sqrt.f64 (*.f64 9 5))))) (+.f64 (+.f64 729 125) (*.f64 27 (sqrt.f64 125)))) 2) (cos.f64 y)))))","fresh",0.4751589301637833],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","fresh",0.43661889652663033]],"compiler":[[66,50],[55,43],[56,44],[74,52],[54,42],[49,37],[72,60],[64,48],[66,50],[55,43],[56,44],[74,52],[54,42],[49,37],[72,60],[64,48]],"count":[[322,8]],"kept":[{"done":[0,0],"fresh":[8,3],"new":[313,5],"picked":[1,0]}],"min-error":[0.2246475586106521],"time":156.049072265625,"type":"prune"},{"compiler":[[432,240]],"locations":[["(*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2))",0.41796875,false],["(+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))",0.8558827764676663,true],["(-.f64 3 (sqrt.f64 5))",1.0,false],["(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))",2.4928288833430847,true]],"time":84.76611328125,"type":"localize"},{"count":[[2,48]],"series":[["(+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","x","-inf",1.205810546875],["(+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","x","inf",2.108154296875],["(+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","x","0",1.0830078125],["(+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","y","-inf",2.846923828125],["(+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","y","inf",2.287109375],["(+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","y","0",1.174072265625],["(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","y","-inf",0.974853515625],["(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","y","inf",1.632080078125],["(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","y","0",1.996826171875],["(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","x","-inf",0.970947265625],["(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","x","inf",1.822021484375],["(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","x","0",0.60302734375]],"time":18.921875,"type":"series"},{"count":[[2,95]],"inputs":[["(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 0) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) (*.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) (*.f64 0 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) (cbrt.f64 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (cbrt.f64 (cos.f64 x)) 0) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (neg.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 x))))) (pow.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y)))))) (-.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (cbrt.f64 (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) (pow.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 2/3) (cbrt.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 x)))) (neg.f64 (pow.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y)))) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (cbrt.f64 (cbrt.f64 (cos.f64 x))) (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (neg.f64 (cos.f64 y))) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) 1 (cbrt.f64 (neg.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 y) 2/3) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 y) 2/3) (*.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (neg.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) 0) (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) (*.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) (*.f64 0 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (cos.f64 y) 2/3) (neg.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (+.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 2/3) (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 y) (+.f64 2/3 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) (+.f64 2/3 1))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 2/3) (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (+.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 y)))) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (+.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4))) (cbrt.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) (-.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 2/3)) (-.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4))) (cbrt.f64 (*.f64 (cos.f64 y) (cbrt.f64 (cos.f64 x)))))) (+.f64 (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y)))) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4))) (-.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 2/3)) (cbrt.f64 (*.f64 (cos.f64 y) (cbrt.f64 (cos.f64 x)))))) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 y) (pow.f64 (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y)))) (pow.f64 (cos.f64 y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (cos.f64 y) (pow.f64 (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (cos.f64 y))) (cbrt.f64 (neg.f64 (cos.f64 y))) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4))) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 y)) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y)))) (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 2/3)) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 x)) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (cos.f64 y) 2/3) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cos.f64 y) 2/3) 1 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (cos.f64 y) (+.f64 2/3 1))) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 4))) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y))) 1 (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 2/3) (cos.f64 x))) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 y) (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cos.f64 y))) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y)))) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 2/3)) (cbrt.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cos.f64 y)))) (pow.f64 (cos.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cos.f64 x) (cbrt.f64 (cos.f64 y)))) (cbrt.f64 (pow.f64 (cos.f64 y) 2/3)) (pow.f64 (cos.f64 y) 2/3))))))"]],"rules":[["egg-rr",51],["egg-rr",44]],"time":28.0,"type":"rewrite"},{"count":[[143,129]],"inputs":[["(-.f64 1 (pow.f64 (cos.f64 y) 1/3))","(-.f64 (+.f64 1 (*.f64 -1/6 (pow.f64 x 2))) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (+.f64 (*.f64 -1/72 (pow.f64 x 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 x 2)))) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (+.f64 (*.f64 -1/72 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (*.f64 -23/6480 (pow.f64 x 6))))) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) 1)","(-.f64 (+.f64 (pow.f64 (cos.f64 x) 1/3) (*.f64 1/6 (pow.f64 y 2))) 1)","(-.f64 (+.f64 (pow.f64 (cos.f64 x) 1/3) (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 4)))) 1)","(-.f64 (+.f64 (*.f64 23/6480 (pow.f64 y 6)) (+.f64 (pow.f64 (cos.f64 x) 1/3) (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 4))))) 1)","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(+.f64 1 (pow.f64 (cos.f64 x) 1/3))","(+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 1/3) (*.f64 (pow.f64 y 2) (-.f64 (*.f64 -1/6 (pow.f64 (*.f64 (cos.f64 x) 1) 1/3)) 1/3))))","(+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 x) 2)) 1/3) (*.f64 (pow.f64 y 4) (-.f64 (*.f64 1/24 (cos.f64 x)) (*.f64 1/12 (cos.f64 x)))))) (*.f64 (pow.f64 y 2) (-.f64 (*.f64 -1/6 (pow.f64 (*.f64 (cos.f64 x) 1) 1/3)) 1/3)))))","(+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 x) 2)) 1/3) (*.f64 (pow.f64 y 4) (-.f64 (*.f64 1/24 (cos.f64 x)) (*.f64 1/12 (cos.f64 x)))))) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 (*.f64 -1/6 (pow.f64 (*.f64 (cos.f64 x) 1) 1/3)) 1/3)) (*.f64 (pow.f64 y 6) (-.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 x) 2)) 1/3) (-.f64 (*.f64 -1/720 (cos.f64 x)) (+.f64 (*.f64 -1/216 (cos.f64 x)) (*.f64 -1/3 (-.f64 (*.f64 1/24 (cos.f64 x)) (*.f64 1/12 (cos.f64 x)))))))) 1/405))))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (cos.f64 y) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (cos.f64 y) 1/3) (+.f64 (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) (pow.f64 x 2)))))","(+.f64 (pow.f64 (cos.f64 y) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) (*.f64 (-.f64 (*.f64 1/24 (cos.f64 y)) (*.f64 1/12 (cos.f64 y))) (pow.f64 x 4)))) (+.f64 (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) (pow.f64 x 2))))))","(+.f64 (pow.f64 (cos.f64 y) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) (*.f64 (-.f64 (*.f64 -1/720 (cos.f64 y)) (+.f64 (*.f64 -1/3 (-.f64 (*.f64 1/24 (cos.f64 y)) (*.f64 1/12 (cos.f64 y)))) (*.f64 -1/216 (cos.f64 y)))) (pow.f64 x 6)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) (*.f64 (-.f64 (*.f64 1/24 (cos.f64 y)) (*.f64 1/12 (cos.f64 y))) (pow.f64 x 4)))) (+.f64 (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) (pow.f64 x 2)))))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (pow.f64 (cos.f64 y) 1/3))","(-.f64 1 (cbrt.f64 (cos.f64 y)))","(-.f64 (+.f64 1 (*.f64 -1/6 (pow.f64 x 2))) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (fma.f64 -1/6 (*.f64 x x) 1) (cbrt.f64 (cos.f64 y)))","(-.f64 (+.f64 (*.f64 -1/72 (pow.f64 x 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 x 2)))) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (fma.f64 (pow.f64 x 4) -1/72 (fma.f64 -1/6 (*.f64 x x) 1)) (cbrt.f64 (cos.f64 y)))","(-.f64 (+.f64 (*.f64 -1/72 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (*.f64 -23/6480 (pow.f64 x 6))))) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (+.f64 (fma.f64 (pow.f64 x 4) -1/72 1) (fma.f64 -23/6480 (pow.f64 x 6) (*.f64 -1/6 (*.f64 x x)))) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) 1)","(+.f64 (cbrt.f64 (cos.f64 x)) -1)","(-.f64 (+.f64 (pow.f64 (cos.f64 x) 1/3) (*.f64 1/6 (pow.f64 y 2))) 1)","(+.f64 (cbrt.f64 (cos.f64 x)) (fma.f64 1/6 (*.f64 y y) -1))","(-.f64 (+.f64 (pow.f64 (cos.f64 x) 1/3) (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 4)))) 1)","(+.f64 (cbrt.f64 (cos.f64 x)) (+.f64 (*.f64 1/72 (pow.f64 y 4)) (fma.f64 1/6 (*.f64 y y) -1)))","(-.f64 (+.f64 (*.f64 23/6480 (pow.f64 y 6)) (+.f64 (pow.f64 (cos.f64 x) 1/3) (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 1/72 (pow.f64 y 4))))) 1)","(+.f64 (+.f64 (fma.f64 23/6480 (pow.f64 y 6) (cbrt.f64 (cos.f64 x))) (fma.f64 1/6 (*.f64 y y) (*.f64 1/72 (pow.f64 y 4)))) -1)","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(-.f64 (pow.f64 (cos.f64 x) 1/3) (pow.f64 (cos.f64 y) 1/3))","(-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))","(+.f64 1 (pow.f64 (cos.f64 x) 1/3))","(+.f64 1 (cbrt.f64 (cos.f64 x)))","(+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 1/3) (*.f64 (pow.f64 y 2) (-.f64 (*.f64 -1/6 (pow.f64 (*.f64 (cos.f64 x) 1) 1/3)) 1/3))))","(+.f64 1 (fma.f64 (*.f64 y y) (fma.f64 -1/6 (cbrt.f64 (cos.f64 x)) -1/3) (cbrt.f64 (cos.f64 x))))","(+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 x) 2)) 1/3) (*.f64 (pow.f64 y 4) (-.f64 (*.f64 1/24 (cos.f64 x)) (*.f64 1/12 (cos.f64 x)))))) (*.f64 (pow.f64 y 2) (-.f64 (*.f64 -1/6 (pow.f64 (*.f64 (cos.f64 x) 1) 1/3)) 1/3)))))","(+.f64 (+.f64 1 (cbrt.f64 (cos.f64 x))) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (*.f64 (pow.f64 y 4) (*.f64 (cos.f64 x) -1/24))) (*.f64 (*.f64 y y) (fma.f64 -1/6 (cbrt.f64 (cos.f64 x)) -1/3))))","(+.f64 1 (+.f64 (pow.f64 (cos.f64 x) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 x) 2)) 1/3) (*.f64 (pow.f64 y 4) (-.f64 (*.f64 1/24 (cos.f64 x)) (*.f64 1/12 (cos.f64 x)))))) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 (*.f64 -1/6 (pow.f64 (*.f64 (cos.f64 x) 1) 1/3)) 1/3)) (*.f64 (pow.f64 y 6) (-.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 x) 2)) 1/3) (-.f64 (*.f64 -1/720 (cos.f64 x)) (+.f64 (*.f64 -1/216 (cos.f64 x)) (*.f64 -1/3 (-.f64 (*.f64 1/24 (cos.f64 x)) (*.f64 1/12 (cos.f64 x)))))))) 1/405))))))","(+.f64 (+.f64 1 (cbrt.f64 (cos.f64 x))) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (*.f64 (pow.f64 y 4) (*.f64 (cos.f64 x) -1/24))) (fma.f64 (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) -2)) (+.f64 (*.f64 (cos.f64 x) (-.f64 -1/720 -1/216)) (*.f64 1/3 (*.f64 (cos.f64 x) -1/24)))) -1/405) (pow.f64 y 6) (*.f64 (*.f64 y y) (fma.f64 -1/6 (cbrt.f64 (cos.f64 x)) -1/3)))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (cos.f64 y) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(+.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (pow.f64 (cos.f64 y) 2)))","(+.f64 (pow.f64 (cos.f64 y) 1/3) (+.f64 (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) (pow.f64 x 2)))))","(+.f64 (cbrt.f64 (cos.f64 y)) (fma.f64 (cbrt.f64 (*.f64 -1/216 (cos.f64 y))) (*.f64 x x) (cbrt.f64 (pow.f64 (cos.f64 y) 2))))","(+.f64 (pow.f64 (cos.f64 y) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) (*.f64 (-.f64 (*.f64 1/24 (cos.f64 y)) (*.f64 1/12 (cos.f64 y))) (pow.f64 x 4)))) (+.f64 (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) (pow.f64 x 2))))))","(+.f64 (cbrt.f64 (cos.f64 y)) (fma.f64 1/3 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 y) -2)) (*.f64 (*.f64 (cos.f64 y) -1/24) (pow.f64 x 4))) (fma.f64 (cbrt.f64 (*.f64 -1/216 (cos.f64 y))) (*.f64 x x) (cbrt.f64 (pow.f64 (cos.f64 y) 2)))))","(+.f64 (pow.f64 (cos.f64 y) 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) (*.f64 (-.f64 (*.f64 -1/720 (cos.f64 y)) (+.f64 (*.f64 -1/3 (-.f64 (*.f64 1/24 (cos.f64 y)) (*.f64 1/12 (cos.f64 y)))) (*.f64 -1/216 (cos.f64 y)))) (pow.f64 x 6)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cos.f64 y) 2)) 1/3) (*.f64 (-.f64 (*.f64 1/24 (cos.f64 y)) (*.f64 1/12 (cos.f64 y))) (pow.f64 x 4)))) (+.f64 (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3) (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 1 (cos.f64 y)) 1/3) (pow.f64 x 2)))))))","(+.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (*.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 (cos.f64 y) -2))) (+.f64 (*.f64 (-.f64 (*.f64 -1/720 (cos.f64 y)) (fma.f64 -1/3 (*.f64 (cos.f64 y) -1/24) (*.f64 -1/216 (cos.f64 y)))) (pow.f64 x 6)) (*.f64 (*.f64 (cos.f64 y) -1/24) (pow.f64 x 4)))) (fma.f64 (cbrt.f64 (*.f64 -1/216 (cos.f64 y))) (*.f64 x x) (cbrt.f64 (pow.f64 (cos.f64 y) 2)))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))","(+.f64 (pow.f64 (*.f64 (cos.f64 x) (cos.f64 y)) 1/3) (pow.f64 (pow.f64 (cos.f64 y) 2) 1/3))","(*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))"]],"time":170.802978515625,"type":"simplify"},{"compiler":[[21904,13167]],"time":185.634033203125,"type":"eval"},{"alts":[["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2) 2))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","fresh",0.44281015629507237],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 3 (sqrt.f64 5))) 3) 2) (cos.f64 y)))))","fresh",0.5085589965263784],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (fma.f64 (sqrt.f64 3) (sqrt.f64 3) (neg.f64 (sqrt.f64 5))) 2) (cos.f64 y)))))","fresh",0.9930433147683343],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 4 (+.f64 3 (sqrt.f64 5))) 2) (cos.f64 y)))))","fresh",0.44509516606351435],["(/.f64 (fma.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) 2) (*.f64 3 (+.f64 1 (/.f64 (+.f64 (*.f64 (+.f64 (sqrt.f64 5) -1) (cos.f64 x)) (*.f64 (-.f64 3 (sqrt.f64 5)) (cos.f64 y))) 2))))","fresh",0.47236890861040004],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 (*.f64 (-.f64 19683 (*.f64 (sqrt.f64 125) 125)) (/.f64 1 (+.f64 14 (sqrt.f64 (*.f64 9 5))))) (+.f64 (+.f64 729 125) (*.f64 27 (sqrt.f64 125)))) 2) (cos.f64 y)))))","fresh",0.4680101997006673],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","next",0.43661889652663033],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (fma.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (cbrt.f64 (neg.f64 (cos.f64 y))))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","fresh",15.529335058610656]],"compiler":[[66,50],[55,43],[56,44],[76,54],[49,37],[94,72],[64,48],[81,58],[66,50],[55,43],[56,44],[76,54],[49,37],[94,72],[64,48],[81,58]],"count":[[286,8]],"kept":[{"done":[0,0],"fresh":[7,5],"new":[278,3],"picked":[1,0]}],"min-error":[0.2129288086106521],"time":125.830078125,"type":"prune"},{"compiler":[[368,241]],"locations":[["(*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))",0.4375,true],["(-.f64 3 (sqrt.f64 5))",1.0,false],["(-.f64 (cos.f64 x) (cos.f64 y))",2.1523568443046606,false],["(cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))",3.163168350320828,true]],"time":78.86181640625,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))","y","-inf",1.255126953125],["(*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))","y","inf",1.26416015625],["(*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))","y","0",5.785888671875],["(*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))","x","-inf",1.2978515625],["(*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))","x","inf",1.297119140625],["(*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))","x","0",1.3310546875],["(cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))","y","-inf",1.192138671875],["(cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))","y","inf",1.597900390625],["(cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))","y","0",0.9130859375],["(cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))","x","-inf",1.64208984375],["(cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))","x","inf",1.251953125],["(cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))","x","0",1.575927734375]],"time":20.68115234375,"type":"series"},{"count":[[2,60]],"inputs":[["(cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))","(*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3) 0) (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3) 1/2) (*.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3) (*.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)) (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)) (*.f64 1/2 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3) (*.f64 0 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))) (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) (+.f64 2/3 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) (+.f64 2/3 1))) (cbrt.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) (cbrt.f64 (neg.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3))) (cbrt.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 4)) (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) 4) (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) 0) (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) 1/2) (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))) (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))) (*.f64 1/2 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) (*.f64 0 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2)) (cbrt.f64 (*.f64 2 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))) (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)) (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) (cbrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)) (*.f64 (sqrt.f64 2) (cbrt.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3)) (sqrt.f64 2)) (cbrt.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))) (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) 2/3) 2)) (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))) (sqrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) (sqrt.f64 (sqrt.f64 8)))) (sqrt.f64 (sqrt.f64 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2)) (cbrt.f64 (*.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) (sqrt.f64 (sqrt.f64 8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) (sqrt.f64 2))) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (cbrt.f64 (*.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) (sqrt.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))))))"]],"rules":[["egg-rr",32],["egg-rr",28]],"time":26.219970703125,"type":"rewrite"},{"count":[[108,96]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (cbrt.f64 1/256))","(+.f64 (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/256) 2)) 1/3) x))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (cbrt.f64 1/256)))","(+.f64 (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/256) 2)) 1/3) x))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (cbrt.f64 1/256)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 4)) 1/3) (/.f64 (*.f64 (pow.f64 x 2) (-.f64 1 (*.f64 1/192 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 16)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/256)) 1/3))))) (pow.f64 (cbrt.f64 1/256) 2))))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (-.f64 (*.f64 1/48 (sin.f64 y)) (+.f64 (*.f64 -1/13824 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 y) 5)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/256) 2)))) (*.f64 -1/12 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (sin.f64 y)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/256) 5)) 1/3) (-.f64 1 (*.f64 1/192 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 16)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/256)) 1/3))))))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 1/256) 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 4)) 1/3))) (+.f64 (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/256) 2)) 1/3) x))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (cbrt.f64 1/256)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 4)) 1/3) (/.f64 (*.f64 (pow.f64 x 2) (-.f64 1 (*.f64 1/192 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 16)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/256)) 1/3))))) (pow.f64 (cbrt.f64 1/256) 2)))))))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (sin.f64 x) 2) 1/3)","(+.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 1/3) (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 5)) 1/9) y)))","(+.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 1/3) (+.f64 (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 5)) 1/9) y)) (*.f64 1/3 (*.f64 (*.f64 (-.f64 1/256 (*.f64 1/192 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 16)) 1/9))) (pow.f64 y 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 4)) 1/3)))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 4)) 1/3) (*.f64 (pow.f64 y 3) (-.f64 (*.f64 1/48 (sin.f64 x)) (+.f64 (*.f64 -1/12 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/9) (-.f64 1/256 (*.f64 1/192 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 16)) 1/9))))) (*.f64 -1/13824 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 5)) 1/3))))))) (+.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 1/3) (+.f64 (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 5)) 1/9) y)) (*.f64 1/3 (*.f64 (*.f64 (-.f64 1/256 (*.f64 1/192 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 16)) 1/9))) (pow.f64 y 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 4)) 1/3))))))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (pow.f64 (*.f64 1 (sin.f64 y)) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (sqrt.f64 2) x) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 2)) 1/3)))) (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (pow.f64 (*.f64 1 (sin.f64 y)) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (sqrt.f64 2) x) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 2)) 1/3)))) (+.f64 (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (pow.f64 (*.f64 1 (sin.f64 y)) 1/3)) (*.f64 -1/9 (*.f64 (*.f64 (sqrt.f64 2) (pow.f64 x 2)) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 7)) 1/3))))))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (sqrt.f64 2) x) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 2)) 1/3)))) (+.f64 (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (pow.f64 (*.f64 1 (sin.f64 y)) 1/3)) (+.f64 (*.f64 -1/9 (*.f64 (*.f64 (sqrt.f64 2) (pow.f64 x 2)) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 7)) 1/3)))) (*.f64 -1/3 (*.f64 (/.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 1/6 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 2))))))) (pow.f64 x 3))) (pow.f64 (cbrt.f64 -1/16) 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3))))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (sin.f64 x)) 1/3))","(+.f64 (*.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) y) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/9))) (*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (sin.f64 x)) 1/3)))","(+.f64 (*.f64 -1/2304 (*.f64 (*.f64 (sqrt.f64 2) (pow.f64 y 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 7)) 1/9))) (+.f64 (*.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) y) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/9))) (*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (sin.f64 x)) 1/3))))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (-.f64 1/96 (+.f64 (*.f64 -1/110592 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3)) (*.f64 1/18432 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3))))) (pow.f64 y 3))) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3))) (+.f64 (*.f64 -1/2304 (*.f64 (*.f64 (sqrt.f64 2) (pow.f64 y 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 7)) 1/9))) (+.f64 (*.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) y) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/9))) (*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (sin.f64 x)) 1/3)))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (cbrt.f64 1/256))","(*.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 1/256))","(+.f64 (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/256) 2)) 1/3) x))) (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (cbrt.f64 1/256)))","(fma.f64 -1/24 (*.f64 (pow.f64 (pow.f64 (sin.f64 y) 5) 1/9) (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 1 1/65536))) x)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 1/256)))","(+.f64 (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/256) 2)) 1/3) x))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (cbrt.f64 1/256)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 4)) 1/3) (/.f64 (*.f64 (pow.f64 x 2) (-.f64 1 (*.f64 1/192 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 16)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/256)) 1/3))))) (pow.f64 (cbrt.f64 1/256) 2))))))","(fma.f64 (*.f64 (pow.f64 (pow.f64 (sin.f64 y) 5) 1/9) (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 1 1/65536))) x)) -1/24 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 1/256) (/.f64 (*.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 (sin.f64 y) -4))) (*.f64 (*.f64 x x) (-.f64 1 (*.f64 (*.f64 1/192 (pow.f64 (pow.f64 (sin.f64 y) 16) 1/9)) (/.f64 1 (cbrt.f64 (cbrt.f64 1/256))))))) (cbrt.f64 1/65536))))","(+.f64 (*.f64 1/3 (*.f64 (/.f64 (*.f64 (-.f64 (*.f64 1/48 (sin.f64 y)) (+.f64 (*.f64 -1/13824 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 y) 5)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 1/256) 2)))) (*.f64 -1/12 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (sin.f64 y)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/256) 5)) 1/3) (-.f64 1 (*.f64 1/192 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 16)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/256)) 1/3))))))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 1/256) 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 4)) 1/3))) (+.f64 (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 5)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 1/256) 2)) 1/3) x))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (cbrt.f64 1/256)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 4)) 1/3) (/.f64 (*.f64 (pow.f64 x 2) (-.f64 1 (*.f64 1/192 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 16)) 1/9) (pow.f64 (/.f64 1 (cbrt.f64 1/256)) 1/3))))) (pow.f64 (cbrt.f64 1/256) 2)))))))","(fma.f64 1/3 (/.f64 (*.f64 (*.f64 (-.f64 (*.f64 1/48 (sin.f64 y)) (fma.f64 -1/12 (*.f64 (*.f64 (pow.f64 (/.f64 1 (sin.f64 y)) 1/9) (cbrt.f64 (pow.f64 (cbrt.f64 1/256) -5))) (-.f64 1 (*.f64 (*.f64 1/192 (pow.f64 (pow.f64 (sin.f64 y) 16) 1/9)) (/.f64 1 (cbrt.f64 (cbrt.f64 1/256)))))) (*.f64 -1/13824 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 y) 5) 1/65536))))) (pow.f64 x 3)) (cbrt.f64 (pow.f64 (sin.f64 y) -4))) (cbrt.f64 1/65536)) (fma.f64 (*.f64 (pow.f64 (pow.f64 (sin.f64 y) 5) 1/9) (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 1 1/65536))) x)) -1/24 (fma.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 1/256) (/.f64 (*.f64 (*.f64 1/3 (cbrt.f64 (pow.f64 (sin.f64 y) -4))) (*.f64 (*.f64 x x) (-.f64 1 (*.f64 (*.f64 1/192 (pow.f64 (pow.f64 (sin.f64 y) 16) 1/9)) (/.f64 1 (cbrt.f64 (cbrt.f64 1/256))))))) (cbrt.f64 1/65536)))))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (sin.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (sin.f64 x) 2))","(+.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 1/3) (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 5)) 1/9) y)))","(fma.f64 -1/24 (*.f64 (pow.f64 (pow.f64 (sin.f64 x) 5) 1/9) y) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))","(+.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 1/3) (+.f64 (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 5)) 1/9) y)) (*.f64 1/3 (*.f64 (*.f64 (-.f64 1/256 (*.f64 1/192 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 16)) 1/9))) (pow.f64 y 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 4)) 1/3)))))","(+.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 -1/24 (*.f64 (pow.f64 (pow.f64 (sin.f64 x) 5) 1/9) y) (*.f64 1/3 (*.f64 (+.f64 1/256 (*.f64 (pow.f64 (pow.f64 (sin.f64 x) 16) 1/9) -1/192)) (*.f64 (*.f64 y y) (cbrt.f64 (pow.f64 (sin.f64 x) -4)))))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 4)) 1/3) (*.f64 (pow.f64 y 3) (-.f64 (*.f64 1/48 (sin.f64 x)) (+.f64 (*.f64 -1/12 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/9) (-.f64 1/256 (*.f64 1/192 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 16)) 1/9))))) (*.f64 -1/13824 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 5)) 1/3))))))) (+.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 1/3) (+.f64 (*.f64 -1/24 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 5)) 1/9) y)) (*.f64 1/3 (*.f64 (*.f64 (-.f64 1/256 (*.f64 1/192 (pow.f64 (*.f64 1 (pow.f64 (sin.f64 x) 16)) 1/9))) (pow.f64 y 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 4)) 1/3))))))","(fma.f64 1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) -4)) (pow.f64 y 3)) (-.f64 (*.f64 1/48 (sin.f64 x)) (fma.f64 -1/12 (*.f64 (pow.f64 (/.f64 1 (sin.f64 x)) 1/9) (+.f64 1/256 (*.f64 (pow.f64 (pow.f64 (sin.f64 x) 16) 1/9) -1/192))) (*.f64 -1/13824 (cbrt.f64 (pow.f64 (sin.f64 x) 5)))))) (+.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 -1/24 (*.f64 (pow.f64 (pow.f64 (sin.f64 x) 5) 1/9) y) (*.f64 1/3 (*.f64 (+.f64 1/256 (*.f64 (pow.f64 (pow.f64 (sin.f64 x) 16) 1/9) -1/192)) (*.f64 (*.f64 y y) (cbrt.f64 (pow.f64 (sin.f64 x) -4))))))))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x)) 2) 1/3)","(cbrt.f64 (pow.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x)) 2))","(*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (pow.f64 (*.f64 1 (sin.f64 y)) 1/3))","(*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (cbrt.f64 (sin.f64 y)))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (sqrt.f64 2) x) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 2)) 1/3)))) (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (pow.f64 (*.f64 1 (sin.f64 y)) 1/3)))","(fma.f64 1/3 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) x) (pow.f64 (pow.f64 (sin.f64 y) -2) 1/9)) (cbrt.f64 (pow.f64 (cbrt.f64 -1/16) -2))) (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (cbrt.f64 (sin.f64 y))))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (sqrt.f64 2) x) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 2)) 1/3)))) (+.f64 (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (pow.f64 (*.f64 1 (sin.f64 y)) 1/3)) (*.f64 -1/9 (*.f64 (*.f64 (sqrt.f64 2) (pow.f64 x 2)) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 7)) 1/3))))))","(fma.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) x) (pow.f64 (pow.f64 (sin.f64 y) -2) 1/9)) (cbrt.f64 (pow.f64 (cbrt.f64 -1/16) -2))) 1/3 (fma.f64 -1/9 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 x x)) (pow.f64 (pow.f64 (sin.f64 y) -7) 1/9)) (cbrt.f64 (pow.f64 (cbrt.f64 -1/16) -7))) (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (cbrt.f64 (sin.f64 y)))))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (sqrt.f64 2) x) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 2)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 2)) 1/3)))) (+.f64 (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (pow.f64 (*.f64 1 (sin.f64 y)) 1/3)) (+.f64 (*.f64 -1/9 (*.f64 (*.f64 (sqrt.f64 2) (pow.f64 x 2)) (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 (sin.f64 y) 7)) 1/9) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 7)) 1/3)))) (*.f64 -1/3 (*.f64 (/.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 1/6 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 2)))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1/16) 2))))))) (pow.f64 x 3))) (pow.f64 (cbrt.f64 -1/16) 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 y) 2)) 1/3))))))","(fma.f64 1/3 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) x) (pow.f64 (pow.f64 (sin.f64 y) -2) 1/9)) (cbrt.f64 (pow.f64 (cbrt.f64 -1/16) -2))) (fma.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 -1/16)) (cbrt.f64 (sin.f64 y)) (fma.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (+.f64 1/6 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 y) -2)) (pow.f64 (cbrt.f64 -1/16) -2)) (+.f64 -2/9 1/27))) (pow.f64 x 3))) (pow.f64 (cbrt.f64 -1/16) -2)) (cbrt.f64 (pow.f64 (sin.f64 y) -2))) -1/3 (*.f64 -1/9 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 x x)) (pow.f64 (pow.f64 (sin.f64 y) -7) 1/9)) (cbrt.f64 (pow.f64 (cbrt.f64 -1/16) -7)))))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (sin.f64 x)) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (sin.f64 x)))","(+.f64 (*.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) y) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/9))) (*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (sin.f64 x)) 1/3)))","(fma.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) y) (pow.f64 (pow.f64 (sin.f64 x) -2) 1/9)) (*.f64 (sqrt.f64 2) (cbrt.f64 (sin.f64 x))))","(+.f64 (*.f64 -1/2304 (*.f64 (*.f64 (sqrt.f64 2) (pow.f64 y 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 7)) 1/9))) (+.f64 (*.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) y) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/9))) (*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (sin.f64 x)) 1/3))))","(fma.f64 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 y y)) (pow.f64 (pow.f64 (sin.f64 x) -7) 1/9)) -1/2304 (fma.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) y) (pow.f64 (pow.f64 (sin.f64 x) -2) 1/9)) (*.f64 (sqrt.f64 2) (cbrt.f64 (sin.f64 x)))))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (-.f64 1/96 (+.f64 (*.f64 -1/110592 (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3)) (*.f64 1/18432 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3))))) (pow.f64 y 3))) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/3))) (+.f64 (*.f64 -1/2304 (*.f64 (*.f64 (sqrt.f64 2) (pow.f64 y 2)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 7)) 1/9))) (+.f64 (*.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) y) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 x) 2)) 1/9))) (*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (sin.f64 x)) 1/3)))))","(fma.f64 1/3 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 (-.f64 1/96 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) -2)) (+.f64 -1/110592 1/18432))) (pow.f64 y 3))) (cbrt.f64 (pow.f64 (sin.f64 x) -2))) (fma.f64 (*.f64 (*.f64 (sqrt.f64 2) (*.f64 y y)) (pow.f64 (pow.f64 (sin.f64 x) -7) 1/9)) -1/2304 (fma.f64 -1/48 (*.f64 (*.f64 (sqrt.f64 2) y) (pow.f64 (pow.f64 (sin.f64 x) -2) 1/9)) (*.f64 (sqrt.f64 2) (cbrt.f64 (sin.f64 x))))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))","(*.f64 (sqrt.f64 2) (pow.f64 (*.f64 1 (+.f64 (*.f64 -1/16 (sin.f64 y)) (sin.f64 x))) 1/3))","(*.f64 (sqrt.f64 2) (cbrt.f64 (fma.f64 -1/16 (sin.f64 y) (sin.f64 x))))"]],"time":180.031005859375,"type":"simplify"},{"compiler":[[16834,11601]],"time":157.4638671875,"type":"eval"},{"alts":[["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 3 (sqrt.f64 5))) 3) 2) (cos.f64 y)))))","fresh",0.5085589965263784],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))) 3) (cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","fresh",0.44509516606351435],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (fma.f64 (sqrt.f64 3) (sqrt.f64 3) (neg.f64 (sqrt.f64 5))) 2) (cos.f64 y)))))","fresh",0.9930433147683343],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 4 (+.f64 3 (sqrt.f64 5))) 2) (cos.f64 y)))))","fresh",0.44509516606351435],["(/.f64 (fma.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) 2) (*.f64 3 (+.f64 1 (/.f64 (+.f64 (*.f64 (+.f64 (sqrt.f64 5) -1) (cos.f64 x)) (*.f64 (-.f64 3 (sqrt.f64 5)) (cos.f64 y))) 2))))","fresh",0.47236890861040004],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 (*.f64 (-.f64 19683 (*.f64 (sqrt.f64 125) 125)) (/.f64 1 (+.f64 14 (sqrt.f64 (*.f64 9 5))))) (+.f64 (+.f64 729 125) (*.f64 27 (sqrt.f64 125)))) 2) (cos.f64 y)))))","fresh",0.4680101997006673],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","done",0.43661889652663033],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (fma.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (cbrt.f64 (neg.f64 (cos.f64 y))))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","fresh",15.529335058610656]],"compiler":[[55,43],[66,50],[56,44],[76,54],[49,37],[94,72],[64,48],[81,58]],"count":[[241,8]],"kept":[{"done":[0,0],"fresh":[7,6],"new":[233,1],"picked":[1,1]}],"min-error":[0.2090225586106521],"time":89.09521484375,"type":"prune"},{"accuracy":[0.42718515629507237],"baseline":[0.4271851562950723],"branch":[["x",0.4271851562950724,1],["y",0.42718515629507237,1],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))",0.4271851562950724,1]],"compiler":[[3,2],[3,2],[52,40],[1186,795]],"count":[[19,1]],"inputs":[["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sqrt.f64 8) (fma.f64 (sin.f64 y) -1/16 (sin.f64 x))))) 3) (cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 4 (+.f64 3 (sqrt.f64 5))) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 (*.f64 (-.f64 19683 (*.f64 (sqrt.f64 125) 125)) (/.f64 1 (+.f64 14 (sqrt.f64 (*.f64 9 5))))) (+.f64 (+.f64 729 125) (*.f64 27 (sqrt.f64 125)))) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (fma.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (cbrt.f64 (neg.f64 (cos.f64 y))))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 3 (sqrt.f64 5))) 3) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (fma.f64 (sqrt.f64 3) (sqrt.f64 3) (neg.f64 (sqrt.f64 5))) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 4 (+.f64 3 (sqrt.f64 5))) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 (*.f64 (-.f64 19683 (*.f64 (sqrt.f64 125) 125)) (/.f64 1 (+.f64 14 (sqrt.f64 (*.f64 9 5))))) (+.f64 (+.f64 729 125) (*.f64 27 (sqrt.f64 125)))) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (cbrt.f64 (*.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2) 2))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 3 (sqrt.f64 5))) 3) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 (*.f64 (-.f64 19683 (*.f64 (sqrt.f64 125) 125)) (/.f64 1 (+.f64 14 (sqrt.f64 (*.f64 9 5))))) (+.f64 (+.f64 729 125) (*.f64 27 (sqrt.f64 125)))) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (/.f64 4 (+.f64 3 (sqrt.f64 5))) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (fma.f64 (sqrt.f64 3) (sqrt.f64 3) (neg.f64 (sqrt.f64 5))) 2) (cos.f64 y)))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (cbrt.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)))) (cbrt.f64 (pow.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) 2))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","(/.f64 (fma.f64 (-.f64 (cos.f64 x) (cos.f64 y)) (*.f64 (*.f64 (sqrt.f64 2) (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16))) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) 2) (*.f64 3 (+.f64 1 (/.f64 (+.f64 (*.f64 (+.f64 (sqrt.f64 5) -1) (cos.f64 x)) (*.f64 (-.f64 3 (sqrt.f64 5)) (cos.f64 y))) 2))))","(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))"]],"link":["."],"name":["Diagrams.TwoD.Path.Metafont.Internal:hobbyF from diagrams-contrib-1.3.0.5"],"oracle":[15.996910253979504],"outputs":[["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))"]],"time":38.434814453125,"times":[["x",6.341064453125],["y",6.64306640625],["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (sqrt.f64 2) (-.f64 (sin.f64 x) (/.f64 (sin.f64 y) 16))) (-.f64 (sin.f64 y) (/.f64 (sin.f64 x) 16))) (-.f64 (cos.f64 x) (cos.f64 y)))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))",5.593017578125]],"type":"regimes"},{"compiler":[[74,52]],"inputs":[["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 2 (*.f64 (*.f64 (*.f64 (+.f64 (sin.f64 x) (*.f64 (sin.f64 y) -1/16)) (+.f64 (sin.f64 y) (*.f64 (sin.f64 x) -1/16))) (sqrt.f64 2)) (*.f64 (+.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (+.f64 (cbrt.f64 (pow.f64 (cos.f64 y) 2)) (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))))) (*.f64 3 (+.f64 (+.f64 1 (*.f64 (/.f64 (-.f64 (sqrt.f64 5) 1) 2) (cos.f64 x))) (*.f64 (/.f64 (-.f64 3 (sqrt.f64 5)) 2) (cos.f64 y)))))","(*.f64 (fma.f64 (*.f64 (+.f64 (pow.f64 (cos.f64 x) 2/3) (*.f64 (cbrt.f64 (cos.f64 y)) (+.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y))))) (-.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 y)))) (*.f64 (*.f64 (fma.f64 (sin.f64 y) -1/16 (sin.f64 x)) (fma.f64 -1/16 (sin.f64 x) (sin.f64 y))) (sqrt.f64 2)) 2) (/.f64 1/3 (+.f64 1 (/.f64 (+.f64 (*.f64 (+.f64 (sqrt.f64 5) -1) (cos.f64 x)) (*.f64 (-.f64 3 (sqrt.f64 5)) (cos.f64 y))) 2))))"]],"stop":[["fuel",1]],"time":17.861083984375,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[74,52]],"remove-preprocessing":[[]],"time":23.815185546875,"type":"end"}]
[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.8117067366838455,0.09170725150033832,0.09658601181581616],[11,0.7960969917476177,0.12097552325576544,0.08292748499661684],[10,0.7492677569389343,0.17951206676661968,0.07122017629444599],[9,0.7180482670664787,0.23414617404341698,0.047805558890104294],[8,0.6243897974491119,0.34341438859701157,0.032195813953876495],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.46484375,"type":"analyze"},{"outcomes":[["body",256,"invalid",8.260986328125,265],["body",256,"valid",258.821044921875,8256]],"time":274.966064453125,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0","1"],["(/.f64 (*.f64 x y) 2)","(/.f64 (*.f64 y x) 2)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (*.f64 x y) 2)","(*.f64 (*.f64 x y) 1/2)","(/.f64 (*.f64 y x) 2)","(*.f64 (*.f64 x y) 1/2)"]],"symmetry":[[]],"time":76.905029296875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (*.f64 x y) 2)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x y) 2)","(*.f64 (*.f64 x y) 1/2)"]],"time":37.090087890625,"type":"simplify"},{"compiler":[[12,7]],"time":0.31884765625,"type":"eval"},{"alts":[["(*.f64 (*.f64 x y) 1/2)","next",0.00390625]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.7939453125,"type":"prune"},{"compiler":[[13,6]],"locations":[["(*.f64 (*.f64 x y) 1/2)",0.00390625,true]],"time":2.858154296875,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (*.f64 x y) 1/2)","y","-inf",0.27685546875],["(*.f64 (*.f64 x y) 1/2)","y","inf",0.4189453125],["(*.f64 (*.f64 x y) 1/2)","y","0",0.611083984375],["(*.f64 (*.f64 x y) 1/2)","x","-inf",0.26806640625],["(*.f64 (*.f64 x y) 1/2)","x","inf",0.5439453125],["(*.f64 (*.f64 x y) 1/2)","x","0",0.54296875]],"time":2.736083984375,"type":"series"},{"count":[[1,40]],"inputs":[["(*.f64 (*.f64 x y) 1/2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x y) 1/2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -1/2 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (pow.f64 (*.f64 x y) 2/3) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 y 1/2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x y) 2/3) 1/2) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x y) 1/2)) (pow.f64 (*.f64 (*.f64 x y) 1/2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 x y) 1/2) 2/3) (cbrt.f64 (*.f64 (*.f64 x y) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/8 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x y) 2/3) (cbrt.f64 (*.f64 1/8 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/2 (*.f64 x y))) (neg.f64 (pow.f64 (*.f64 (*.f64 x y) 1/2) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (cbrt.f64 1/2)) (cbrt.f64 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/4) (*.f64 (*.f64 x y) (cbrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/4) (*.f64 x y)) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (sqrt.f64 1/2)) (sqrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/2) (*.f64 (*.f64 x y) (sqrt.f64 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -1/2 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/2 (*.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 x y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 x y) 1/2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) 4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (*.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/4) (*.f64 x y)) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x y) 1/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) 1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x y) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/2 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) 1/2) 3))))))"]],"rules":[["egg-rr",40]],"time":34.453857421875,"type":"rewrite"},{"count":[[64,41]],"inputs":[["(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))","(*.f64 1/2 (*.f64 y x))"]],"time":97.70703125,"type":"simplify"},{"compiler":[[339,199]],"time":5.555908203125,"type":"eval"},{"alts":[["(*.f64 y (*.f64 1/2 x))","next",0]],"compiler":[[7,5],[7,5]],"count":[[42,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[41,1],"picked":[1,0]}],"min-error":[0],"time":6.127197265625,"type":"prune"},{"compiler":[[13,8]],"time":3.130859375,"type":"localize"},{"compiler":[[2,2]],"time":0.0859375,"type":"eval"},{"alts":[["(*.f64 y (*.f64 1/2 x))","done",0]],"compiler":[[7,5]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.4560546875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(/.f64 (*.f64 x y) 2)",0,1],["(*.f64 x y)",0,1],["(*.f64 x y)",0,1]],"compiler":[[3,2],[3,2],[7,5],[5,3],[5,3],[17,10]],"count":[[3,1]],"inputs":[["(*.f64 y (*.f64 1/2 x))","(*.f64 (*.f64 x y) 1/2)","(/.f64 (*.f64 x y) 2)"]],"link":["."],"name":["Numeric.Interval.Internal:scale from intervals-0.7.1, B"],"oracle":[0.00390625],"outputs":[["(*.f64 y (*.f64 1/2 x))"]],"time":14.638916015625,"times":[["x",2.72607421875],["y",2.626220703125],["(/.f64 (*.f64 x y) 2)",2.622802734375],["(*.f64 x y)",3.39404296875],["(*.f64 x y)",2.615966796875]],"type":"regimes"},{"compiler":[[7,5]],"inputs":[["(*.f64 y (*.f64 1/2 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (*.f64 1/2 x))","(*.f64 (*.f64 y x) 1/2)"]],"stop":[["done",1]],"time":33.5380859375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.43017578125,"type":"end"}]
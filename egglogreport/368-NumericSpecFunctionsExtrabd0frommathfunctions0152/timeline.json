[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.2662112235246923,0.29546520413180133,0.4383235723435064],[11,0.22818104873545053,0.3646996249019594,0.4071193263625901],[10,0.17552388364265425,0.448561035975672,0.37591508038167376],[9,0.11701592242843617,0.5070689971898901,0.37591508038167376],[8,0.07801061495229078,0.6084827966278681,0.31350658841984114],[7,0.031204245980916312,0.7176976575610752,0.2510980964580085],[6,0.0,0.7489019035419915,0.2510980964580085],[5,0.0,0.8737188874656567,0.12628111253434326],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":71.1669921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",44.6982421875,1053],["body",256,"valid",425.440673828125,8256]],"time":478.714111328125,"type":"sample"},{"compiler":[[11,7]],"inputs":[["0","1","2"],["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(-.f64 (*.f64 y (log.f64 (/.f64 y x))) z)","(-.f64 (*.f64 z (log.f64 (/.f64 z y))) x)","(-.f64 (*.f64 x (log.f64 (/.f64 x z))) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(-.f64 (*.f64 y (log.f64 (/.f64 y x))) z)","(fma.f64 y (log.f64 (/.f64 y x)) (neg.f64 z))","(-.f64 (*.f64 z (log.f64 (/.f64 z y))) x)","(fma.f64 z (log.f64 (/.f64 z y)) (neg.f64 x))","(-.f64 (*.f64 x (log.f64 (/.f64 x z))) y)","(fma.f64 x (log.f64 (/.f64 x z)) (neg.f64 y))"]],"symmetry":[[]],"time":70.706787109375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))"]],"time":17.56005859375,"type":"simplify"},{"compiler":[[19,9]],"time":0.330078125,"type":"eval"},{"alts":[["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","next",14.3359375],["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)","fresh",14.33984375]],"compiler":[[11,7],[11,7],[11,7],[11,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[14.33203125],"time":1.240966796875,"type":"prune"},{"compiler":[[23,7]],"locations":[["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))",0.109375,true],["(log.f64 (/.f64 x y))",14.38267662921025,true]],"time":5.76806640625,"type":"localize"},{"count":[[2,60]],"series":[["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","z","-inf",0.177978515625],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","z","inf",0.257080078125],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","z","0",2.02001953125],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","y","-inf",0.397216796875],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","y","inf",0.35009765625],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","y","0",0.3330078125],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","x","-inf",8.030029296875],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","x","inf",0.39306640625],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","x","0",0.298095703125],["(log.f64 (/.f64 x y))","y","-inf",7.55615234375],["(log.f64 (/.f64 x y))","y","inf",5.889892578125],["(log.f64 (/.f64 x y))","y","0",6.9130859375],["(log.f64 (/.f64 x y))","x","-inf",10.85498046875],["(log.f64 (/.f64 x y))","x","inf",4.68408203125],["(log.f64 (/.f64 x y))","x","0",15.993896484375]],"time":64.369873046875,"type":"series"},{"count":[[2,56]],"inputs":[["(log.f64 (/.f64 x y))","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (log.f64 (/.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 x y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 (/.f64 x y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 z) (neg.f64 (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 z (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3) (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 z (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z (*.f64 x (log.f64 (/.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2)) (-.f64 (pow.f64 z 2/3) (*.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (cbrt.f64 (neg.f64 z))))) (+.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (cbrt.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3) (*.f64 0 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))) (+.f64 0 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 z 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2)) (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))))) (+.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2)) (+.f64 (pow.f64 z 2/3) (*.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (cbrt.f64 z)))) (-.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z (*.f64 x (log.f64 (/.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 z (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (log.f64 (/.f64 x y)) 2/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z -1 (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (neg.f64 (pow.f64 z 2/3)) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (pow.f64 z 2/3) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z 2/3) (cbrt.f64 (neg.f64 z)) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 (/.f64 x y))) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) 1 (*.f64 x (log.f64 (/.f64 x y))))))))"]],"rules":[["egg-rr",39],["egg-rr",17]],"time":44.04296875,"type":"rewrite"},{"count":[[116,73]],"inputs":[["(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(log.f64 (/.f64 x y))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (log.f64 (/.f64 x y)) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))"]],"time":199.132080078125,"type":"simplify"},{"compiler":[[920,305]],"time":8.492919921875,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","fresh",14.831156506294828],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","done",14.3359375],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","fresh",30.889215070395597],["(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","fresh",33.38405128877494],["(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))","next",14.5981026856004],["(fma.f64 x (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (log.f64 (/.f64 x y)) 2/3)) (neg.f64 z))","fresh",41.78361773675795]],"compiler":[[14,10],[11,7],[16,12],[14,10],[14,10],[19,11],[14,10],[16,12],[14,10],[14,10],[19,11]],"count":[[75,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[73,5],"picked":[1,1]}],"min-error":[0.0625],"time":14.964111328125,"type":"prune"},{"compiler":[[39,13]],"locations":[["(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))",0.109375,true],["(cbrt.f64 (log.f64 (/.f64 x y)))",0.1328125,true],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)",0.761284082127029,true],["(log.f64 (/.f64 x y))",14.38267662921025,false]],"time":9.487060546875,"type":"localize"},{"count":[[3,84]],"series":[["(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))","z","-inf",0.2021484375],["(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))","z","inf",0.181884765625],["(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))","z","0",1.051025390625],["(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))","y","-inf",0.39697265625],["(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))","y","inf",0.375],["(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))","y","0",0.44287109375],["(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))","x","-inf",0.321044921875],["(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))","x","inf",0.31201171875],["(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))","x","0",0.3330078125],["(cbrt.f64 (log.f64 (/.f64 x y)))","y","-inf",0.175048828125],["(cbrt.f64 (log.f64 (/.f64 x y)))","y","inf",0.179931640625],["(cbrt.f64 (log.f64 (/.f64 x y)))","y","0",0.1728515625],["(cbrt.f64 (log.f64 (/.f64 x y)))","x","-inf",0.2109375],["(cbrt.f64 (log.f64 (/.f64 x y)))","x","inf",0.18798828125],["(cbrt.f64 (log.f64 (/.f64 x y)))","x","0",0.1669921875],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","y","-inf",1.43505859375],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","y","inf",1.364013671875],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","y","0",1.4580078125],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","x","-inf",1.469970703125],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","x","inf",1.4580078125],["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","x","0",1.69677734375]],"time":13.907958984375,"type":"series"},{"count":[[3,76]],"inputs":[["(pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x y)) (*.f64 (log.f64 (/.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (/.f64 x y)) 0) (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x y)) (*.f64 0 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log.f64 (/.f64 x y))) (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 4/3) 2) (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (log.f64 (/.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 7/3) (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3)) (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 x y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 0) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (*.f64 0 (cbrt.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (log.f64 (/.f64 x y)))) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3)) (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))) (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 (/.f64 x y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (log.f64 (/.f64 x y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) (*.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 0) (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) (*.f64 0 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 (/.f64 x y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 z (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3) (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 z (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (log.f64 (/.f64 x y)) 2/3)) (cbrt.f64 (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (log.f64 (/.f64 x y)) 2/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (pow.f64 z 2/3) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (neg.f64 (pow.f64 z 2/3)) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z 2/3) (cbrt.f64 (neg.f64 z)) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 (/.f64 x y))) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z -1 (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) 1 (*.f64 x (log.f64 (/.f64 x y))))))))"]],"rules":[["egg-rr",37],["egg-rr",18],["egg-rr",21]],"time":28.844970703125,"type":"rewrite"},{"count":[[160,99]],"inputs":[["(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)))","(-.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)))) 1/3) x) z)","(-.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)))) 1/3) x) z)","(-.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)))) 1/3) x) z)","(-.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)))) 1/3) x) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)) z)","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)) z)","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))))","(log.f64 (/.f64 x y))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(log.f64 (/.f64 x y))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(log.f64 (/.f64 x y))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(log.f64 (/.f64 x y))","(pow.f64 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 1/3)","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(*.f64 (pow.f64 1 1/3) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(pow.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) 1/3)","(cbrt.f64 (log.f64 (/.f64 x y)))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 1 y))) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)))) 1/3) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)))) 1/3) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)))) 1/3) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) 2) (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)))) 1/3) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))"]],"time":269.921875,"type":"simplify"},{"compiler":[[1716,694]],"time":19.235107421875,"type":"eval"},{"alts":[["(fma.f64 x (pow.f64 (cbrt.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 3) (neg.f64 z))","fresh",33.51188249149095],["(fma.f64 x (pow.f64 (cbrt.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))) 3) (neg.f64 z))","fresh",31.01725895976794],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","fresh",30.889215070395597],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","next",14.831156506294828],["(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","fresh",33.38405128877494],["(fma.f64 x (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 4/3) 2)) (neg.f64 z))","fresh",41.82416782185146],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","done",14.3359375]],"compiler":[[17,13],[19,15],[16,12],[14,10],[14,10],[23,14],[11,7],[17,13],[19,15],[16,12],[14,10],[14,10],[23,14]],"count":[[127,7]],"kept":[{"done":[1,1],"fresh":[4,2],"new":[121,4],"picked":[1,0]}],"min-error":[0.0546875],"time":28.51611328125,"type":"prune"},{"compiler":[[44,11]],"locations":[["(cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))",0.05859375,true],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))",0.109375,false],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)",0.7110902344426087,true],["(log.f64 (/.f64 x y))",14.38267662921025,false]],"time":8.727783203125,"type":"localize"},{"count":[[2,40]],"series":[["(cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))","z","-inf",0.26513671875],["(cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))","z","inf",0.239990234375],["(cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))","z","0",0.468017578125],["(cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))","y","-inf",0.218017578125],["(cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))","y","inf",0.182861328125],["(cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))","y","0",0.18994140625],["(cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))","x","-inf",0.26708984375],["(cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))","x","inf",0.282958984375],["(cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))","x","0",0.60791015625],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","z","-inf",0.465087890625],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","z","inf",0.5498046875],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","z","0",2.55615234375],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","y","-inf",1.56787109375],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","y","inf",1.5400390625],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","y","0",1.93896484375],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","x","-inf",0.47900390625],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","x","inf",0.81005859375],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","x","0",3.333984375]],"time":16.316162109375,"type":"series"},{"count":[[2,58]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","(cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 0) (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) (*.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) (*.f64 0 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (log.f64 (/.f64 x y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 z (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))) (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 4/3) 2) (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3) (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 7/3) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3)) (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 z (*.f64 x (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (log.f64 (/.f64 x y)))) (cbrt.f64 (pow.f64 (*.f64 x (log.f64 (/.f64 x y))) 2)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (log.f64 (/.f64 x y)) 2/3) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (pow.f64 z 2/3) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (neg.f64 (pow.f64 z 2/3)) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z 2/3) (cbrt.f64 (neg.f64 z)) (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (log.f64 (/.f64 x y))) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 z) 1 (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z -1 (*.f64 x (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (*.f64 x (log.f64 (/.f64 x y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 0) (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) (*.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))) (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) (*.f64 0 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))) (cbrt.f64 (pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z)))))))"]],"rules":[["egg-rr",18],["egg-rr",40]],"time":25.219970703125,"type":"rewrite"},{"count":[[98,97]],"inputs":[["(*.f64 -1 (*.f64 (pow.f64 1 1/3) z))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))))) x) (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))))) x) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2))))))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) z) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) z) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) z))))","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (*.f64 (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 z) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2))))) (cbrt.f64 -1)))) (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) z)))) (cbrt.f64 -1))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2))))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))))))))))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))))) x) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2))))))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) z) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) z) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)))))","(pow.f64 (*.f64 (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 2) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)) 1/3)","(pow.f64 (*.f64 (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 2) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)) 1/3)","(pow.f64 (*.f64 (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 2) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)) 1/3)","(pow.f64 (*.f64 (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 2) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)) 1/3)","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)) (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9))) z))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9))) z) (*.f64 (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/9)) (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)))))) (pow.f64 z 2))))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9))) z) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/9) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/3) (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3)))))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3)))))))) (pow.f64 z 3)) (*.f64 (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/9)) (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)))))) (pow.f64 z 2)))))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (cbrt.f64 -1))","(+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (cbrt.f64 -1)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2) (pow.f64 x 2)))))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2) (pow.f64 x 2))))) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 -1) 2)))))))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) 1/3)","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) 1/3)","(pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1/3)","(+.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/9) z)))","(+.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/9) z)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 7) (pow.f64 x 7))) 1/9) (pow.f64 z 2)))))","(+.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/9) z)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 7) (pow.f64 x 7))) 1/9) (pow.f64 z 2))) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3) (*.f64 (pow.f64 z 3) (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3))))))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (pow.f64 1 1/3) z))","(neg.f64 z)","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))))) x) (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)))","(fma.f64 (*.f64 (pow.f64 (pow.f64 z 4) 1/9) (log.f64 (/.f64 x y))) x (neg.f64 z))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))))) x) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2))))))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) z) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) z) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) z))))","(fma.f64 x (*.f64 (pow.f64 (pow.f64 z 4) 1/9) (log.f64 (/.f64 x y))) (fma.f64 (fma.f64 (cbrt.f64 z) (neg.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 z -4) 1/9) (pow.f64 (log.f64 (/.f64 x y)) 2)) -1/9)) (*.f64 (*.f64 (pow.f64 (/.f64 1 z) 1/9) (neg.f64 (pow.f64 (log.f64 (/.f64 x y)) 2))) 1/9)) (*.f64 x x) (neg.f64 z)))","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (*.f64 (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 z) 1/3) (/.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2))))) (cbrt.f64 -1)))) (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) z)))) (cbrt.f64 -1))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2))))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3)))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))))))))))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x))))) (*.f64 2/3 (*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)))))) x) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 4)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2))))))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) z) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) z) 1/9) (*.f64 (pow.f64 (/.f64 1 (cbrt.f64 -1)) 1/3) (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2)))))) (pow.f64 x 2)) (*.f64 -1 (*.f64 (pow.f64 1 1/3) z)))))","(fma.f64 (pow.f64 x 3) (fma.f64 (cbrt.f64 z) (neg.f64 (fma.f64 (*.f64 -2/3 (cbrt.f64 (/.f64 1 z))) (neg.f64 (*.f64 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) (cbrt.f64 (pow.f64 z -2))) (+.f64 -2/9 1/27))) (/.f64 (*.f64 2/27 (pow.f64 (log.f64 (/.f64 x y)) 3)) z))) (fma.f64 (*.f64 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) (cbrt.f64 (pow.f64 z -2))) (+.f64 -2/9 1/27)) -1/3 (fma.f64 (*.f64 1/3 (pow.f64 (pow.f64 z -2) 1/9)) (*.f64 (log.f64 (/.f64 x y)) (*.f64 (*.f64 (pow.f64 (pow.f64 z -4) 1/9) (pow.f64 (log.f64 (/.f64 x y)) 2)) -1/9)) (*.f64 -2/27 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) (cbrt.f64 (pow.f64 z -2))))))) (fma.f64 x (*.f64 (pow.f64 (pow.f64 z 4) 1/9) (log.f64 (/.f64 x y))) (fma.f64 (fma.f64 (cbrt.f64 z) (neg.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 z -4) 1/9) (pow.f64 (log.f64 (/.f64 x y)) 2)) -1/9)) (*.f64 (*.f64 (pow.f64 (/.f64 1 z) 1/9) (neg.f64 (pow.f64 (log.f64 (/.f64 x y)) 2))) 1/9)) (*.f64 x x) (neg.f64 z))))","(pow.f64 (*.f64 (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 2) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)) 1/3)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(pow.f64 (*.f64 (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 2) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)) 1/3)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(pow.f64 (*.f64 (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 2) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)) 1/3)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(pow.f64 (*.f64 (pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 2) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)) 1/3)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x))","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)) (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9))) z))","(fma.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 4) 1/9) -1) z (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9))) z) (*.f64 (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/9)) (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)))))) (pow.f64 z 2))))","(fma.f64 (log.f64 (/.f64 x y)) x (fma.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 4) 1/9) -1) z (*.f64 (+.f64 (*.f64 (pow.f64 (/.f64 (/.f64 1 x) (log.f64 (/.f64 x y))) 1/9) 1/9) (*.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -4) 1/9) -1/9))) (*.f64 z z))))","(+.f64 (*.f64 (pow.f64 1 1/3) (*.f64 (log.f64 (/.f64 x y)) x)) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/3 (pow.f64 (*.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9))) z) (+.f64 (*.f64 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/9) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9))))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/3) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/3) (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3)))))))) (+.f64 (*.f64 2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3)))))))) (pow.f64 z 3)) (*.f64 (+.f64 (*.f64 -1/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/9)) (+.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/9)) (*.f64 (pow.f64 (*.f64 1 (*.f64 (log.f64 (/.f64 x y)) x)) 1/3) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 4) (pow.f64 x 4))) 1/9)))))) (pow.f64 z 2)))))","(fma.f64 (log.f64 (/.f64 x y)) x (fma.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 4) 1/9) -1) z (fma.f64 (fma.f64 (*.f64 -1/3 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -2) 1/9)) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -4) 1/9) -1/9) (fma.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (fma.f64 (*.f64 -2/3 (cbrt.f64 (/.f64 (/.f64 1 x) (log.f64 (/.f64 x y))))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -2)) (+.f64 2/9 -1/27)) (/.f64 2/27 (*.f64 (log.f64 (/.f64 x y)) x))) (fma.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -2)) (+.f64 2/9 -1/27)) -1/3 (*.f64 2/27 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -2)))))) (pow.f64 z 3) (*.f64 (+.f64 (*.f64 (pow.f64 (/.f64 (/.f64 1 x) (log.f64 (/.f64 x y))) 1/9) 1/9) (*.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -4) 1/9) -1/9))) (*.f64 z z)))))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (cbrt.f64 -1))","(cbrt.f64 (neg.f64 z))","(+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (cbrt.f64 -1)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 z -2) 1/9) (*.f64 (log.f64 (/.f64 x y)) x)) (cbrt.f64 (neg.f64 z)))","(+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2) (pow.f64 x 2)))))))","(+.f64 (cbrt.f64 (neg.f64 z)) (fma.f64 (*.f64 -1/9 (pow.f64 (pow.f64 z -7) 1/9)) (neg.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 2)) (*.f64 (*.f64 1/3 (pow.f64 (pow.f64 z -2) 1/9)) (*.f64 (log.f64 (/.f64 x y)) x))))","(+.f64 (*.f64 (pow.f64 (*.f64 1 z) 1/3) (cbrt.f64 -1)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 2)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3) (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x)))) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 (pow.f64 1 4) (pow.f64 z 7)) 1/9) (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 7)) 1/3) (*.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 2) (pow.f64 x 2))))) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (/.f64 (*.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2)) (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3)))) (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (pow.f64 z 2)) 1/3) (/.f64 (pow.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) 3) (pow.f64 (cbrt.f64 -1) 2))))) (pow.f64 x 3)) (pow.f64 (cbrt.f64 -1) 2)))))))","(+.f64 (cbrt.f64 (neg.f64 z)) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 z -2) 1/9) (*.f64 (log.f64 (/.f64 x y)) x)) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 z -7) 1/9) (neg.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 2))) (*.f64 (*.f64 -1/3 (cbrt.f64 (pow.f64 z -2))) (*.f64 (*.f64 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) (cbrt.f64 (pow.f64 z -2))) (+.f64 -2/9 1/27)) (pow.f64 x 3))))))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 x) (*.f64 -1 (log.f64 y))) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) 1/3)","(cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))","(pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1/3)","(cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))","(+.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1/3) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/9) z)))","(fma.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -2) 1/9) z) -1/3 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)))","(+.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/9) z)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 7) (pow.f64 x 7))) 1/9) (pow.f64 z 2)))))","(+.f64 (fma.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -2) 1/9) z) -1/3 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))) (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -7) 1/9)) (*.f64 z z)))","(+.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/9) z)) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 7) (pow.f64 x 7))) 1/9) (pow.f64 z 2))) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3) (*.f64 (pow.f64 z 3) (+.f64 (*.f64 -1/27 (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3)) (*.f64 2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (*.f64 (pow.f64 (log.f64 (/.f64 x y)) 2) (pow.f64 x 2))) 1/3))))))))))","(+.f64 (fma.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -2) 1/9) z) -1/3 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x))) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -7) 1/9) (*.f64 z z)) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -2)) (pow.f64 z 3)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) -2)) (+.f64 2/9 -1/27))))))"]],"time":172.278076171875,"type":"simplify"},{"compiler":[[4545,2470]],"time":45.808837890625,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 x (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) (neg.f64 z))) 3)","fresh",33.933976537915484],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","next",30.889215070395597],["(fma.f64 x (pow.f64 (cbrt.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 3) (neg.f64 z))","fresh",33.51188249149095],["(fma.f64 x (pow.f64 (cbrt.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))) 3) (neg.f64 z))","fresh",31.01725895976794],["(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","done",14.831156506294828],["(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","fresh",33.38405128877494],["(fma.f64 x (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 4/3) 2)) (neg.f64 z))","fresh",41.82416782185146],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","done",14.3359375]],"compiler":[[17,13],[16,12],[17,13],[19,15],[14,10],[14,10],[23,14],[11,7],[17,13],[16,12],[17,13],[19,15],[14,10],[23,14]],"count":[[177,8]],"kept":[{"done":[1,1],"fresh":[5,5],"new":[170,1],"picked":[1,1]}],"min-error":[0.046875],"time":39.489013671875,"type":"prune"},{"compiler":[[54,38]],"locations":[["(log.f64 (/.f64 -1 y))",0.00390625,true],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)",0.0078125,true],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)",0.1328125,true],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))",0.2558975586106521,true]],"time":15.7021484375,"type":"localize"},{"count":[[4,80]],"series":[["(log.f64 (/.f64 -1 y))","y","-inf",0.14404296875],["(log.f64 (/.f64 -1 y))","y","inf",0.18408203125],["(log.f64 (/.f64 -1 y))","y","0",0.155029296875],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","z","-inf",0.18310546875],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","z","inf",0.218017578125],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","z","0",2.955078125],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","x","-inf",0.22900390625],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","x","inf",0.427978515625],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","x","0",0.178955078125],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","y","-inf",0.205078125],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","y","inf",0.2080078125],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","y","0",0.23095703125],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","x","-inf",0.475830078125],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","x","inf",0.4111328125],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","x","0",6.56396484375],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","y","-inf",0.281982421875],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","y","inf",0.31103515625],["(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","y","0",0.31298828125],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","x","-inf",4.406005859375],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","x","inf",5.80419921875],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","x","0",8.81884765625],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","y","-inf",7.575927734375],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","y","inf",4.1240234375],["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","y","0",11.9580078125]],"time":56.745849609375,"type":"series"},{"count":[[4,153]],"inputs":[["(+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(log.f64 (/.f64 -1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 (neg.f64 y))) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (neg.f64 x)) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x y)) (*.f64 (log.f64 (/.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (/.f64 x y)) 0) (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x y)) (*.f64 0 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (log.f64 (/.f64 x y))) (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (log.f64 (neg.f64 y))) (neg.f64 (log.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 (neg.f64 x)) 2)) (-.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) 2) (cbrt.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) (log.f64 (neg.f64 x))))))) (+.f64 (cbrt.f64 (log.f64 (neg.f64 x))) (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) 2) (-.f64 (cbrt.f64 (pow.f64 (log.f64 (neg.f64 x)) 2)) (cbrt.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) (log.f64 (neg.f64 x))))))) (+.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) (cbrt.f64 (log.f64 (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 (neg.f64 x))) (cbrt.f64 (pow.f64 (log.f64 (neg.f64 x)) 2)) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) (pow.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) 2) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) 2) (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (log.f64 (neg.f64 y)) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (log.f64 (neg.f64 x))) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (log.f64 (neg.f64 x)) 2)) (cbrt.f64 (log.f64 (neg.f64 x))) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 (neg.f64 x)) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (log.f64 (neg.f64 y))) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (log.f64 (neg.f64 y))) 1 (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 (neg.f64 x)) 1 (neg.f64 (log.f64 (neg.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) (*.f64 x (log.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (neg.f64 x))) (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (/.f64 x y)) x) (*.f64 (*.f64 (log.f64 (/.f64 x y)) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 (/.f64 x y)) x) 0) (*.f64 (log.f64 (/.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) 1) (*.f64 (*.f64 x (log.f64 (neg.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (log.f64 (neg.f64 x))) 1) (*.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (/.f64 x y)) x) (*.f64 0 (*.f64 (log.f64 (/.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log.f64 (/.f64 x y)) x)) (*.f64 (log.f64 (/.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 x) (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 2)) (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (log.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 (/.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 x) (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 (/.f64 x y))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) x) (cbrt.f64 (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (log.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (log.f64 (neg.f64 y))) x (*.f64 x (log.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (log.f64 (neg.f64 y))) (*.f64 x (log.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 (neg.f64 x)) x (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 (neg.f64 x)) (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 z) (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x))) (*.f64 x (log.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 z) (*.f64 x (log.f64 (neg.f64 x)))) (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) (+.f64 (*.f64 x (log.f64 (neg.f64 x))) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (neg.f64 x))) (+.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) (-.f64 (*.f64 x (log.f64 (neg.f64 x))) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (log.f64 (neg.f64 x))) (-.f64 (neg.f64 (*.f64 (log.f64 (neg.f64 y)) x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) (*.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) 0) (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) (*.f64 0 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))) (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 (/.f64 x y)) x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (*.f64 (log.f64 (/.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (log.f64 (/.f64 x y)) x) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 z (*.f64 (log.f64 (/.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (log.f64 (/.f64 x y)) x) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 z) (*.f64 (neg.f64 x) (log.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 z (*.f64 (log.f64 (/.f64 x y)) x)))) (cbrt.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 2)) (+.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) (*.f64 x z))))) (-.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))) (cbrt.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) 2)) (cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 z (*.f64 (log.f64 (/.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z (*.f64 (log.f64 (/.f64 x y)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 (neg.f64 x) (log.f64 (/.f64 x y))) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 z (*.f64 (log.f64 (/.f64 x y)) x))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z (*.f64 (log.f64 (/.f64 x y)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 z (*.f64 (log.f64 (/.f64 x y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 z (*.f64 (log.f64 (/.f64 x y)) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 2)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (*.f64 (log.f64 (/.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (*.f64 z z)) (*.f64 (log.f64 (/.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (neg.f64 (cbrt.f64 (*.f64 z z))) (*.f64 (log.f64 (/.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (log.f64 (/.f64 x y)) x) 2)) (cbrt.f64 (*.f64 (log.f64 (/.f64 x y)) x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (log.f64 (/.f64 x y)))) (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (neg.f64 x) (log.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (log.f64 (/.f64 x y)) x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (*.f64 (log.f64 (/.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 (/.f64 x y)) x) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 (neg.f64 y))) (*.f64 (neg.f64 (log.f64 (neg.f64 y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 y))) 0) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 (neg.f64 y))) (*.f64 0 (neg.f64 (log.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (log.f64 (neg.f64 y)))) (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) (pow.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) 2) (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (neg.f64 (log.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 (neg.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (log.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 (neg.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (log.f64 (neg.f64 y)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 (neg.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (pow.f64 (log.f64 (neg.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 -1 y))))))"]],"rules":[["egg-rr",21],["egg-rr",57],["egg-rr",38],["egg-rr",37]],"time":35.251953125,"type":"rewrite"},{"count":[[233,174]],"inputs":[["(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x) z)","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x) z)","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(+.f64 (log.f64 -1) (*.f64 -1 (log.f64 y)))","(+.f64 (log.f64 -1) (*.f64 -1 (log.f64 y)))","(+.f64 (log.f64 -1) (*.f64 -1 (log.f64 y)))","(+.f64 (log.f64 -1) (*.f64 -1 (log.f64 y)))","(+.f64 (log.f64 -1) (log.f64 (/.f64 1 y)))","(+.f64 (log.f64 -1) (log.f64 (/.f64 1 y)))","(+.f64 (log.f64 -1) (log.f64 (/.f64 1 y)))","(+.f64 (log.f64 -1) (log.f64 (/.f64 1 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x))))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(log.f64 (/.f64 x y))","(+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 -1)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y)))","(log.f64 (/.f64 x y))","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (log.f64 y)))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 (log.f64 -1) (+.f64 (log.f64 (/.f64 1 y)) (log.f64 (*.f64 -1 x)))) x) z)","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (+.f64 (log.f64 -1) (log.f64 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 y))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x)","(*.f64 (log.f64 (/.f64 x y)) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x))","(fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z))","(+.f64 (log.f64 -1) (*.f64 -1 (log.f64 y)))","(neg.f64 (log.f64 (neg.f64 y)))","(+.f64 (log.f64 -1) (*.f64 -1 (log.f64 y)))","(neg.f64 (log.f64 (neg.f64 y)))","(+.f64 (log.f64 -1) (*.f64 -1 (log.f64 y)))","(neg.f64 (log.f64 (neg.f64 y)))","(+.f64 (log.f64 -1) (*.f64 -1 (log.f64 y)))","(neg.f64 (log.f64 (neg.f64 y)))","(+.f64 (log.f64 -1) (log.f64 (/.f64 1 y)))","(neg.f64 (log.f64 (neg.f64 y)))","(+.f64 (log.f64 -1) (log.f64 (/.f64 1 y)))","(neg.f64 (log.f64 (neg.f64 y)))","(+.f64 (log.f64 -1) (log.f64 (/.f64 1 y)))","(neg.f64 (log.f64 (neg.f64 y)))","(+.f64 (log.f64 -1) (log.f64 (/.f64 1 y)))","(neg.f64 (log.f64 (neg.f64 y)))"]],"time":262.60498046875,"type":"simplify"},{"compiler":[[2476,897]],"time":23.18505859375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (fma.f64 x (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) (neg.f64 z))) 3)","fresh",33.933976537915484],["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","done",30.889215070395597],["(fma.f64 x (pow.f64 (cbrt.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 3) (neg.f64 z))","fresh",33.51188249149095],["(-.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) x) (cbrt.f64 (log.f64 (/.f64 x y)))) z)","fresh",14.448925048842211],["(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","fresh",33.38405128877494],["(-.f64 (fma.f64 (neg.f64 (log.f64 (neg.f64 y))) x (*.f64 x (log.f64 (neg.f64 x)))) z)","fresh",30.89585878907377],["(-.f64 (*.f64 (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x))) z)","fresh",26.651356687012274],["(-.f64 (*.f64 (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) 3) (log.f64 (*.f64 -1 x))) x) z)","fresh",30.990580267572636],["(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","done",14.3359375]],"compiler":[[17,13],[16,12],[17,13],[20,12],[14,10],[16,11],[17,11],[19,15],[11,7]],"count":[[182,9]],"kept":[{"done":[2,1],"fresh":[5,3],"new":[174,4],"picked":[1,1]}],"min-error":[0.0234375],"time":43.97705078125,"type":"prune"},{"accuracy":[0.273266359170533],"baseline":[14.3359375],"branch":[["x",0.273266359170533,2],["y",0.27326635917053305,2],["z",14.3359375,1],["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)",5.359375,3],["(*.f64 x (log.f64 (/.f64 x y)))",5.359375,3]],"compiler":[[4,3],[4,3],[4,3],[11,7],[9,6],[216,100]],"count":[[16,2]],"inputs":[["(-.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 x y)) 2)) x) (cbrt.f64 (log.f64 (/.f64 x y)))) z)","(-.f64 (fma.f64 (neg.f64 (log.f64 (neg.f64 y))) x (*.f64 x (log.f64 (neg.f64 x)))) z)","(-.f64 (*.f64 (*.f64 (log.f64 (/.f64 x y)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x))) z)","(-.f64 (*.f64 (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 (neg.f64 y)))) 3) (log.f64 (*.f64 -1 x))) x) z)","(pow.f64 (cbrt.f64 (fma.f64 x (+.f64 (log.f64 (/.f64 1 y)) (log.f64 x)) (neg.f64 z))) 3)","(fma.f64 x (pow.f64 (cbrt.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x))) 3) (neg.f64 z))","(fma.f64 x (pow.f64 (cbrt.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x)))) 3) (neg.f64 z))","(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","(fma.f64 x (*.f64 (cbrt.f64 (cbrt.f64 (log.f64 (/.f64 x y)))) (pow.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 4/3) 2)) (neg.f64 z))","(pow.f64 (cbrt.f64 (fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))) 3)","(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)","(fma.f64 x (pow.f64 (cbrt.f64 (log.f64 (/.f64 x y))) 3) (neg.f64 z))","(fma.f64 x (*.f64 (cbrt.f64 (log.f64 (/.f64 x y))) (pow.f64 (log.f64 (/.f64 x y)) 2/3)) (neg.f64 z))","(fma.f64 x (log.f64 (/.f64 x y)) (neg.f64 z))","(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)"]],"link":["."],"name":["Numeric.SpecFunctions.Extra:bd0 from math-functions-0.1.5.2"],"oracle":[64.0],"outputs":[["(-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z)","(-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z)"]],"time":61.18603515625,"times":[["x",13.571044921875],["y",10.72412109375],["z",5.9189453125],["(-.f64 (*.f64 x (log.f64 (/.f64 x y))) z)",13.614013671875],["(*.f64 x (log.f64 (/.f64 x y)))",13.427001953125]],"type":"regimes"},{"bstep":[[-1.3627538798365988e-306,7.59985283874232e-307,1.54296875]],"compiler":[[15,11],[17,13],[13,9],[4,3]],"method":["binary-search"],"time":1.702880859375,"type":"bsearch"},{"compiler":[[31,22]],"inputs":[["(if (<=.f64 x 0) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x 0) (-.f64 (*.f64 (+.f64 (log.f64 (/.f64 -1 y)) (log.f64 (*.f64 -1 x))) x) z) (-.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 y)) (log.f64 x)) x) z))","(if (<=.f64 x 0) (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)) (fma.f64 (log.f64 (/.f64 x y)) x (neg.f64 z)))"]],"stop":[["fuel",1]],"time":23.272216796875,"type":"simplify"},{"time":0.02294921875,"type":"soundness"},{"compiler":[[31,22]],"remove-preprocessing":[[]],"time":13.240966796875,"type":"end"}]
[{"compiler":[[16,10]],"method":["search"],"sampling":[[12,0.5733780198993372,0.42515785148998475,0.0014641286106780171],[11,0.4914668741994319,0.5070689971898901,0.0014641286106780171],[10,0.4212573207423702,0.5772785506469518,0.0014641286106780171],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":103.041015625,"type":"analyze"},{"outcomes":[["body",256,"valid",393.06787109375,8256]],"time":400.56201171875,"type":"sample"},{"compiler":[[15,9]],"inputs":[["0","1","2"],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))","(sqrt.f64 (+.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 z z)))","(sqrt.f64 (+.f64 (+.f64 (*.f64 z z) (*.f64 y y)) (*.f64 x x)))","(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 z z)) (*.f64 y y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))","(sqrt.f64 (fma.f64 y y (fma.f64 x x (*.f64 z z))))","(sqrt.f64 (+.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 z z)))","(sqrt.f64 (fma.f64 y y (fma.f64 x x (*.f64 z z))))","(sqrt.f64 (+.f64 (+.f64 (*.f64 z z) (*.f64 y y)) (*.f64 x x)))","(sqrt.f64 (fma.f64 y y (fma.f64 x x (*.f64 z z))))","(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 z z)) (*.f64 y y)))","(sqrt.f64 (fma.f64 y y (fma.f64 x x (*.f64 z z))))"]],"symmetry":[[]],"time":69.33203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))","(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))"]],"time":19.10498046875,"type":"simplify"},{"compiler":[[25,12]],"time":0.30810546875,"type":"eval"},{"alts":[["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","next",39.89759423361397]],"compiler":[[13,7],[13,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[39.89759423361397],"time":0.845947265625,"type":"prune"},{"compiler":[[34,7]],"locations":[["(fma.f64 x x (*.f64 y y))",0.00390625,true],["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))",36.98491961726135,true]],"time":5.76708984375,"type":"localize"},{"count":[[2,60]],"series":[["(fma.f64 x x (*.f64 y y))","y","-inf",0.158935546875],["(fma.f64 x x (*.f64 y y))","y","inf",0.238037109375],["(fma.f64 x x (*.f64 y y))","y","0",0.225830078125],["(fma.f64 x x (*.f64 y y))","x","-inf",0.301025390625],["(fma.f64 x x (*.f64 y y))","x","inf",0.31005859375],["(fma.f64 x x (*.f64 y y))","x","0",0.274169921875],["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","y","-inf",0.320068359375],["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","y","inf",0.6279296875],["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","y","0",0.637939453125],["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","x","-inf",0.364013671875],["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","x","inf",0.469970703125],["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","x","0",0.60205078125],["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","z","-inf",0.465087890625],["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","z","inf",0.511962890625],["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","z","0",0.8349609375]],"time":6.593994140625,"type":"series"},{"count":[[2,68]],"inputs":[["(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","(fma.f64 x x (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (*.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) 0) (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) 1/2) (*.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (*.f64 0 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) (*.f64 1/2 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) (cbrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (cbrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))) (fabs.f64 (cbrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) 0) (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) (pow.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y y)) (*.f64 (fma.f64 x x (*.f64 y y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 0) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x (*.f64 y y)) 1/2) (*.f64 (fma.f64 x x (*.f64 y y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x (*.f64 y y)) (*.f64 0 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x x (*.f64 y y))) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 x x (*.f64 y y))) (*.f64 1/2 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) (pow.f64 (fma.f64 x x (*.f64 y y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 2/3) (cbrt.f64 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x x (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x (*.f64 y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 4/3) (pow.f64 x 2/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (pow.f64 x 4/3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 5) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 4/3) (pow.f64 y 2/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (neg.f64 y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 5) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y 2/3) (pow.f64 y 4/3) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (*.f64 x x))))))"]],"rules":[["egg-rr",34],["egg-rr",34]],"time":27.203857421875,"type":"rewrite"},{"count":[[128,143]],"inputs":[["(sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (pow.f64 z 4))) (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (pow.f64 z 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 5))) (pow.f64 z 6))))))","z","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) z)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) z))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (pow.f64 z 5))) z)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z))))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (pow.f64 z 5))))))","(sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))","(+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (pow.f64 x 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2)))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (pow.f64 x 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 5))) (pow.f64 x 6))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2))))))","x","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) x)","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (pow.f64 x 5))) x)))","(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3)))))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1 x) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (pow.f64 x 5))))))","(sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3)))))))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 5))))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3))))))))","y","(+.f64 y (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))","(+.f64 y (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3)))))","(+.f64 y (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (pow.f64 y 5))) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))))))","(*.f64 -1 y)","(+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))) (+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (pow.f64 y 5))) (+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(+.f64 (pow.f64 y 2) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(hypot.f64 y x)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -1)) (*.f64 z z)) (hypot.f64 y x))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (pow.f64 z 4))) (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -1)) (*.f64 z z)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -3)) (pow.f64 z 4)) (hypot.f64 y x)))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (pow.f64 z 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 5))) (pow.f64 z 6))))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -1)) (*.f64 z z)) (fma.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -3))) (pow.f64 z 4) (fma.f64 1/16 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) -5)) (pow.f64 z 6)) (hypot.f64 y x))))","z","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) z)","(fma.f64 1/2 (/.f64 (pow.f64 (hypot.f64 y x) 2) z) z)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) z))","(fma.f64 -1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 2) (pow.f64 z -3)) (fma.f64 1/2 (/.f64 (pow.f64 (hypot.f64 y x) 2) z) z))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (pow.f64 z 5))) z)))","(fma.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 2) (pow.f64 z -3)) -1/8 (fma.f64 1/2 (/.f64 (pow.f64 (hypot.f64 y x) 2) z) (fma.f64 1/16 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 3) (pow.f64 z -5)) z)))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)))","(fma.f64 -1/2 (/.f64 (pow.f64 (hypot.f64 y x) 2) z) (neg.f64 z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z))))","(-.f64 (fma.f64 1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 2) (pow.f64 z -3)) (/.f64 (*.f64 -1/2 (pow.f64 (hypot.f64 y x) 2)) z)) z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (pow.f64 z 5))))))","(-.f64 (fma.f64 1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 2) (pow.f64 z -3)) (fma.f64 -1/2 (/.f64 (pow.f64 (hypot.f64 y x) 2) z) (*.f64 (*.f64 -1/16 (pow.f64 (pow.f64 (hypot.f64 y x) 2) 3)) (pow.f64 z -5)))) z)","(sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))","(hypot.f64 y z)","(+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2))))","(fma.f64 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y z) 2) -1)) (*.f64 x x)) 1/2 (hypot.f64 y z))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (pow.f64 x 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2)))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y z) 2) -3)) (pow.f64 x 4)) (fma.f64 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y z) 2) -1)) (*.f64 x x)) 1/2 (hypot.f64 y z)))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (pow.f64 x 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 5))) (pow.f64 x 6))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2))))))","(+.f64 (fma.f64 (*.f64 -1/8 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y z) 2) -3))) (pow.f64 x 4) (hypot.f64 y z)) (fma.f64 1/16 (*.f64 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y z) 2) -5)) (pow.f64 x 6)) (*.f64 (*.f64 1/2 (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 y z) 2) -1))) (*.f64 x x))))","x","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) x)","(fma.f64 1/2 (/.f64 (pow.f64 (hypot.f64 y z) 2) x) x)","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) x))","(fma.f64 (/.f64 (pow.f64 (hypot.f64 y z) 2) x) 1/2 (fma.f64 -1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y z) 2) 2) (pow.f64 x -3)) x))","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (pow.f64 x 5))) x)))","(fma.f64 1/2 (/.f64 (pow.f64 (hypot.f64 y z) 2) x) (fma.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y z) 2) 2) (pow.f64 x -3)) -1/8 (fma.f64 1/16 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y z) 2) 3) (pow.f64 x -5)) x)))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 (pow.f64 (hypot.f64 y z) 2) x) (neg.f64 x))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3)))))","(fma.f64 -1/2 (/.f64 (pow.f64 (hypot.f64 y z) 2) x) (fma.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y z) 2) 2) (pow.f64 x -3)) 1/8 (neg.f64 x)))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1 x) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (pow.f64 x 5))))))","(fma.f64 -1/2 (/.f64 (pow.f64 (hypot.f64 y z) 2) x) (-.f64 (fma.f64 1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 y z) 2) 2) (pow.f64 x -3)) (*.f64 (*.f64 -1/16 (pow.f64 (pow.f64 (hypot.f64 y z) 2) 3)) (pow.f64 x -5))) x))","(sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))","(hypot.f64 z x)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(fma.f64 (*.f64 1/2 (*.f64 y y)) (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -1)) (hypot.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3)))))))","(fma.f64 (*.f64 1/2 (*.f64 y y)) (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -1)) (fma.f64 (*.f64 -1/8 (pow.f64 y 4)) (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -3)) (hypot.f64 z x)))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 5))))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3))))))))","(fma.f64 1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -5))) (fma.f64 (*.f64 1/2 (*.f64 y y)) (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -1)) (fma.f64 (*.f64 -1/8 (pow.f64 y 4)) (sqrt.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) -3)) (hypot.f64 z x))))","y","(+.f64 y (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))","(fma.f64 (/.f64 (pow.f64 (hypot.f64 z x) 2) y) 1/2 y)","(+.f64 y (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3)))))","(+.f64 y (fma.f64 1/2 (/.f64 (pow.f64 (hypot.f64 z x) 2) y) (*.f64 (*.f64 -1/8 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 2)) (pow.f64 y -3))))","(+.f64 y (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (pow.f64 y 5))) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))))))","(+.f64 y (fma.f64 1/2 (/.f64 (pow.f64 (hypot.f64 z x) 2) y) (fma.f64 1/16 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 3) (pow.f64 y -5)) (*.f64 (*.f64 -1/8 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 2)) (pow.f64 y -3)))))","(*.f64 -1 y)","(neg.f64 y)","(+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))","(fma.f64 -1/2 (/.f64 (pow.f64 (hypot.f64 z x) 2) y) (neg.f64 y))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))) (+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y))))","(fma.f64 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 2) (pow.f64 y -3)) 1/8 (fma.f64 -1/2 (/.f64 (pow.f64 (hypot.f64 z x) 2) y) (neg.f64 y)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (pow.f64 y 5))) (+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))))","(fma.f64 1/8 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 2) (pow.f64 y -3)) (fma.f64 -1/16 (*.f64 (pow.f64 (pow.f64 (hypot.f64 z x) 2) 3) (pow.f64 y -5)) (fma.f64 -1/2 (/.f64 (pow.f64 (hypot.f64 z x) 2) y) (neg.f64 y))))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)","(+.f64 (pow.f64 y 2) (pow.f64 x 2))","(pow.f64 (hypot.f64 y x) 2)"]],"time":230.0341796875,"type":"simplify"},{"compiler":[[2849,1471]],"time":31.433837890625,"type":"eval"},{"alts":[["(hypot.f64 y x)","fresh",21.14121410049529],["(hypot.f64 y z)","next",17.835120351345072]],"compiler":[[6,4],[6,4],[6,4],[6,4]],"count":[[144,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[143,2],"picked":[1,0]}],"min-error":[0],"time":25.81494140625,"type":"prune"},{"compiler":[[8,4]],"time":2.0419921875,"type":"localize"},{"compiler":[[3,3]],"time":0.110107421875,"type":"eval"},{"alts":[["(hypot.f64 y x)","next",21.14121410049529],["(hypot.f64 y z)","done",17.835120351345072]],"compiler":[[6,4],[6,4],[6,4]],"count":[[2,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.822021484375,"type":"prune"},{"compiler":[[8,4]],"locations":[["(hypot.f64 y x)",0.00390625,true]],"time":2.054931640625,"type":"localize"},{"count":[[1,24]],"series":[["(hypot.f64 y x)","x","-inf",0.248046875],["(hypot.f64 y x)","x","inf",0.294921875],["(hypot.f64 y x)","x","0",0.2978515625],["(hypot.f64 y x)","y","-inf",0.291015625],["(hypot.f64 y x)","y","inf",0.369873046875],["(hypot.f64 y x)","y","0",0.447021484375]],"time":2.031982421875,"type":"series"},{"count":[[1,46]],"inputs":[["(hypot.f64 y x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (hypot.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 y x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (hypot.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 y x)) (sqrt.f64 (hypot.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (hypot.f64 y x) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (hypot.f64 y x) 4/3)) (cbrt.f64 (hypot.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 y x))) (pow.f64 (pow.f64 (hypot.f64 y x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (hypot.f64 y x))) (neg.f64 (sqrt.f64 (hypot.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 y x)) (pow.f64 (hypot.f64 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 y x) (pow.f64 (hypot.f64 y x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 y x) 0) (hypot.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (hypot.f64 y x) 2/3) (cbrt.f64 (hypot.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (hypot.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (hypot.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (hypot.f64 y x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (hypot.f64 y x))) (neg.f64 (pow.f64 (hypot.f64 y x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (cbrt.f64 (hypot.f64 y x)))) (fabs.f64 (pow.f64 (pow.f64 (hypot.f64 y x) 2/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 y x) (fabs.f64 (pow.f64 (hypot.f64 y x) 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (pow.f64 (hypot.f64 y x) 2/3))) (fabs.f64 (*.f64 (cbrt.f64 (pow.f64 (hypot.f64 y x) 4/3)) (cbrt.f64 (hypot.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (hypot.f64 y x) 2/3)) (fabs.f64 (cbrt.f64 (hypot.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (pow.f64 (hypot.f64 y x) 0)) (hypot.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (hypot.f64 y x))) (fabs.f64 (pow.f64 (hypot.f64 y x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (hypot.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 y x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 y x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 y x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 y x) 2) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 y x) 4) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (hypot.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (hypot.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (hypot.f64 y x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (hypot.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 y x)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 x y)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 y (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (neg.f64 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 x (neg.f64 y))))))"]],"rules":[["egg-rr",46]],"time":34.232177734375,"type":"rewrite"},{"count":[[70,76]],"inputs":[["x","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 6) (pow.f64 x 5))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) x)))","y","(+.f64 y (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3))) (+.f64 y (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3))) (+.f64 y (+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 2) y)) (*.f64 1/16 (/.f64 (pow.f64 x 6) (pow.f64 y 5))))))","(*.f64 -1 y)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 y))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 -1 y) (*.f64 1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3)))))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 x 6) (pow.f64 y 5))) (+.f64 (*.f64 -1 y) (*.f64 1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3))))))","y","(+.f64 y (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3))) (+.f64 y (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3))) (+.f64 y (+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 2) y)) (*.f64 1/16 (/.f64 (pow.f64 x 6) (pow.f64 y 5))))))","x","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 6) (pow.f64 x 5))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) x)))","(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 y 2) x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) (*.f64 -1 x)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) (+.f64 (*.f64 -1 x) (*.f64 -1/16 (/.f64 (pow.f64 y 6) (pow.f64 x 5))))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) x)","(fma.f64 1/2 (/.f64 (*.f64 y y) x) x)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) x))","(fma.f64 (/.f64 (*.f64 y y) x) 1/2 (fma.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3)) x))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 6) (pow.f64 x 5))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) x)))","(fma.f64 (/.f64 (*.f64 y y) x) 1/2 (fma.f64 (/.f64 (pow.f64 y 6) (pow.f64 x 5)) 1/16 (fma.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3)) x)))","y","(+.f64 y (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(fma.f64 (/.f64 (*.f64 x x) y) 1/2 y)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3))) (+.f64 y (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3)) (fma.f64 (/.f64 (*.f64 x x) y) 1/2 y))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3))) (+.f64 y (+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 2) y)) (*.f64 1/16 (/.f64 (pow.f64 x 6) (pow.f64 y 5))))))","(+.f64 (fma.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3)) y) (fma.f64 1/2 (/.f64 (*.f64 x x) y) (/.f64 (*.f64 1/16 (pow.f64 x 6)) (pow.f64 y 5))))","(*.f64 -1 y)","(neg.f64 y)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 y))","(fma.f64 -1/2 (/.f64 (*.f64 x x) y) (neg.f64 y))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 -1 y) (*.f64 1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3)))))","(fma.f64 (/.f64 (*.f64 x x) y) -1/2 (fma.f64 1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3)) (neg.f64 y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 x 6) (pow.f64 y 5))) (+.f64 (*.f64 -1 y) (*.f64 1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3))))))","(fma.f64 -1/2 (/.f64 (*.f64 x x) y) (fma.f64 -1/16 (/.f64 (pow.f64 x 6) (pow.f64 y 5)) (fma.f64 1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3)) (neg.f64 y))))","y","(+.f64 y (*.f64 1/2 (/.f64 (pow.f64 x 2) y)))","(fma.f64 (/.f64 (*.f64 x x) y) 1/2 y)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3))) (+.f64 y (*.f64 1/2 (/.f64 (pow.f64 x 2) y))))","(fma.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3)) (fma.f64 (/.f64 (*.f64 x x) y) 1/2 y))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3))) (+.f64 y (+.f64 (*.f64 1/2 (/.f64 (pow.f64 x 2) y)) (*.f64 1/16 (/.f64 (pow.f64 x 6) (pow.f64 y 5))))))","(+.f64 (fma.f64 -1/8 (/.f64 (pow.f64 x 4) (pow.f64 y 3)) y) (fma.f64 1/2 (/.f64 (*.f64 x x) y) (/.f64 (*.f64 1/16 (pow.f64 x 6)) (pow.f64 y 5))))","x","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) x)","(fma.f64 1/2 (/.f64 (*.f64 y y) x) x)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) x))","(fma.f64 (/.f64 (*.f64 y y) x) 1/2 (fma.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3)) x))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 y 6) (pow.f64 x 5))) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) x)))","(fma.f64 (/.f64 (*.f64 y y) x) 1/2 (fma.f64 (/.f64 (pow.f64 y 6) (pow.f64 x 5)) 1/16 (fma.f64 -1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3)) x)))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 y 2) x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 (*.f64 y y) x) (neg.f64 x))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) (*.f64 -1 x)))","(fma.f64 (/.f64 (*.f64 y y) x) -1/2 (fma.f64 1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3)) (neg.f64 x)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 y 4) (pow.f64 x 3))) (+.f64 (*.f64 -1 x) (*.f64 -1/16 (/.f64 (pow.f64 y 6) (pow.f64 x 5))))))","(fma.f64 (/.f64 (*.f64 y y) x) -1/2 (fma.f64 (/.f64 (pow.f64 y 4) (pow.f64 x 3)) 1/8 (fma.f64 (/.f64 (pow.f64 y 6) (pow.f64 x 5)) -1/16 (neg.f64 x))))"]],"time":79.324951171875,"type":"simplify"},{"compiler":[[814,438]],"time":11.2919921875,"type":"eval"},{"alts":[["(hypot.f64 y x)","done",21.14121410049529],["(hypot.f64 y z)","done",17.835120351345072]],"compiler":[[6,4],[6,4]],"count":[[78,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[76,0],"picked":[1,1]}],"min-error":[0],"time":10.537841796875,"type":"prune"},{"accuracy":[5.808074990892655],"baseline":[17.835120351345072],"branch":[["x",5.808074990892655,5],["y",13.104743602453299,4],["z",7.228583381119355,3],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))",11.655976499977509,2],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))",11.655976499977509,2],["(+.f64 (*.f64 x x) (*.f64 y y))",7.937821039194693,4],["(*.f64 x x)",6.975253381221408,2],["(*.f64 x x)",6.975253381221408,2],["(*.f64 y y)",15.38580747976494,3],["(*.f64 y y)",15.38580747976494,3],["(*.f64 z z)",6.684944515882997,4],["(*.f64 z z)",6.684944515882997,4]],"compiler":[[4,3],[4,3],[4,3],[15,9],[14,8],[10,6],[6,4],[6,4],[6,4],[6,4],[6,4],[6,4],[31,14]],"count":[[4,5]],"inputs":[["(hypot.f64 y x)","(hypot.f64 y z)","(sqrt.f64 (fma.f64 z z (fma.f64 x x (*.f64 y y))))","(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))"]],"link":["."],"name":["FRP.Yampa.Vector3:vector3Rho from Yampa-0.10.2"],"oracle":[54.712562767170404],"outputs":[["(hypot.f64 y x)","(hypot.f64 y z)","(hypot.f64 y x)","(hypot.f64 y z)","(hypot.f64 y x)"]],"time":95.51806640625,"times":[["x",13.619140625],["y",10.72216796875],["z",10.451171875],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))",4.751953125],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))",4.656982421875],["(+.f64 (*.f64 x x) (*.f64 y y))",8.926025390625],["(*.f64 x x)",6.176025390625],["(*.f64 x x)",6.10205078125],["(*.f64 y y)",6.574951171875],["(*.f64 y y)",6.317138671875],["(*.f64 z z)",7.931884765625],["(*.f64 z z)",8.090087890625]],"type":"regimes"},{"bstep":[[1.5186199444692294e+157,3.17582824437914e+162,10.492919921875],[1.3169715640039038e+137,3.421881824651144e+142,11.56201171875],[8.99323767110918e+78,6.941090702535699e+81,10.42822265625],[-7.232319708152293e+85,-9.107903525052924e+73,10.863037109375]],"compiler":[[17,11],[4,3]],"method":["binary-search","binary-search","binary-search","binary-search"],"time":43.469970703125,"type":"bsearch"},{"compiler":[[34,17]],"inputs":[["(if (<=.f64 x -72323197081522933968409955669291236133169705607004319650599031993364122068621054705664) (hypot.f64 y x) (if (<=.f64 x 8993237671109179807843292562978514908211258414739125439217885418693982737661952) (hypot.f64 y z) (if (<=.f64 x 131697156400390376529349536060731554152206945746258684042278571778923167216250682640837489322431508665589058876851216530628189609149857792) (hypot.f64 y x) (if (<=.f64 x 15186199444692294036148528246150510576484686927558091174116464251931801500991443997909168424914964561617349677821105593090101898532689201056360610610909544448) (hypot.f64 y z) (hypot.f64 y x)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x -72323197081522933968409955669291236133169705607004319650599031993364122068621054705664) (hypot.f64 y x) (if (<=.f64 x 8993237671109179807843292562978514908211258414739125439217885418693982737661952) (hypot.f64 y z) (if (<=.f64 x 131697156400390376529349536060731554152206945746258684042278571778923167216250682640837489322431508665589058876851216530628189609149857792) (hypot.f64 y x) (if (<=.f64 x 15186199444692294036148528246150510576484686927558091174116464251931801500991443997909168424914964561617349677821105593090101898532689201056360610610909544448) (hypot.f64 y z) (hypot.f64 y x)))))"]],"stop":[["done",1]],"time":20.20703125,"type":"simplify"},{"time":0.027099609375,"type":"soundness"},{"compiler":[[34,17]],"remove-preprocessing":[[]],"time":12.100830078125,"type":"end"}]
[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.5382732431708064,0.4456356379149611,0.01609111891423254],[11,0.47586475120897376,0.520720854806541,0.0034143939844852866],[10,0.4212573207423702,0.5772785506469518,0.0014641286106780171],[9,0.29644033681870496,0.702095534570617,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":79.721923828125,"type":"analyze"},{"outcomes":[["body",256,"invalid",80.3359375,2066],["body",256,"valid",317.212158203125,8256]],"time":407.31787109375,"type":"sample"},{"compiler":[[10,6]],"inputs":[["0","1","2"],["(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 y (/.f64 (-.f64 x y) z))","(+.f64 z (/.f64 (-.f64 y z) x))","(+.f64 x (/.f64 (-.f64 z x) y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 y (/.f64 (-.f64 x y) z))","(+.f64 z (/.f64 (-.f64 y z) x))","(+.f64 x (/.f64 (-.f64 z x) y))"]],"symmetry":[[]],"time":71.883056640625,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(+.f64 x (/.f64 (-.f64 y x) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (-.f64 y x) z))"]],"time":18.708984375,"type":"simplify"},{"compiler":[[10,6]],"time":0.2451171875,"type":"eval"},{"alts":[["(+.f64 x (/.f64 (-.f64 y x) z))","next",0.0234375]],"compiler":[[10,6],[10,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.0234375],"time":0.68896484375,"type":"prune"},{"compiler":[[21,6]],"locations":[["(+.f64 x (/.f64 (-.f64 y x) z))",0.0078125,true],["(/.f64 (-.f64 y x) z)",0.015625,true]],"time":5.387939453125,"type":"localize"},{"count":[[2,60]],"series":[["(+.f64 x (/.f64 (-.f64 y x) z))","z","-inf",0.156982421875],["(+.f64 x (/.f64 (-.f64 y x) z))","z","inf",0.1708984375],["(+.f64 x (/.f64 (-.f64 y x) z))","z","0",0.3310546875],["(+.f64 x (/.f64 (-.f64 y x) z))","y","-inf",0.208984375],["(+.f64 x (/.f64 (-.f64 y x) z))","y","inf",0.317138671875],["(+.f64 x (/.f64 (-.f64 y x) z))","y","0",0.302001953125],["(+.f64 x (/.f64 (-.f64 y x) z))","x","-inf",0.22900390625],["(+.f64 x (/.f64 (-.f64 y x) z))","x","inf",0.6748046875],["(+.f64 x (/.f64 (-.f64 y x) z))","x","0",0.3701171875],["(/.f64 (-.f64 y x) z)","z","-inf",0.330078125],["(/.f64 (-.f64 y x) z)","z","inf",0.306884765625],["(/.f64 (-.f64 y x) z)","z","0",0.33203125],["(/.f64 (-.f64 y x) z)","x","-inf",0.427001953125],["(/.f64 (-.f64 y x) z)","x","inf",0.345947265625],["(/.f64 (-.f64 y x) z)","x","0",0.26806640625],["(/.f64 (-.f64 y x) z)","y","-inf",0.447998046875],["(/.f64 (-.f64 y x) z)","y","inf",0.408935546875],["(/.f64 (-.f64 y x) z)","y","0",0.386962890625]],"time":6.256103515625,"type":"series"},{"count":[[2,122]],"inputs":[["(/.f64 (-.f64 y x) z)","(+.f64 x (/.f64 (-.f64 y x) z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (*.f64 (/.f64 1 z) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y x) z) (*.f64 (/.f64 (-.f64 y x) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 y x) z) 0) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (*.f64 (neg.f64 (/.f64 x z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y x) z) (*.f64 0 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 y x) z)) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y z) (*.f64 z z)) (/.f64 (*.f64 z x) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 z) (/.f64 (-.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 x z)) (/.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (/.f64 (-.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 y x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 (-.f64 y x) (cbrt.f64 (pow.f64 z -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) (cbrt.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 y x) (cbrt.f64 (pow.f64 z -2))) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) z) (cbrt.f64 (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y z (neg.f64 (*.f64 z x))) (pow.f64 z -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y x) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (cbrt.f64 (*.f64 z z))) (*.f64 z (/.f64 x (cbrt.f64 z)))) (*.f64 z (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 z)) z) (*.f64 (cbrt.f64 (*.f64 z z)) x)) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 x))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 z z))) (*.f64 (neg.f64 z) (/.f64 x (cbrt.f64 z)))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y z (neg.f64 (*.f64 z x))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) (cbrt.f64 (-.f64 x y))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) (cbrt.f64 (-.f64 y x))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (cbrt.f64 (pow.f64 (-.f64 x y) 2))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (-.f64 y x)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y x) (cbrt.f64 (pow.f64 z -2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 y x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 y x) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y z (neg.f64 (*.f64 z x))) 1) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 y z (neg.f64 (*.f64 z x))) z) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x y) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 y x) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (neg.f64 z)) (*.f64 z (neg.f64 x))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (cbrt.f64 (*.f64 z z))) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x (cbrt.f64 z)))) (*.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) z) (*.f64 (neg.f64 z) x)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (neg.f64 z)) (*.f64 (neg.f64 z) (neg.f64 x))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 y x) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y z (neg.f64 (*.f64 z x)))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 y (cbrt.f64 (pow.f64 z -2))) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (neg.f64 (/.f64 x z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y x) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 y z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (+.f64 (neg.f64 (/.f64 x z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 (-.f64 y x) z)) (*.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 0) (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 (-.f64 y x) z)) (*.f64 0 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 x (/.f64 (-.f64 y x) z))) (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (-.f64 (/.f64 x z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (/.f64 (-.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (neg.f64 x) (/.f64 (-.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 x) (/.f64 (-.f64 x y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (cbrt.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (/.f64 (*.f64 x (-.f64 y x)) z)))) (+.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) (cbrt.f64 (/.f64 (*.f64 x (-.f64 y x)) z)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 2)) (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (neg.f64 x) (/.f64 (-.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 x z) (+.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (/.f64 x z) x) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 y x) (/.f64 1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 (-.f64 y x) (cbrt.f64 (pow.f64 z -2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x y) (/.f64 -1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 y x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 x y) 2)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (-.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) (cbrt.f64 (/.f64 (-.f64 y x) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (-.f64 x y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 y (cbrt.f64 (pow.f64 z -2))) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) z) (neg.f64 (-.f64 (/.f64 x z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 y x) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 y x) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (neg.f64 (-.f64 (/.f64 x z) x)))))))"]],"rules":[["egg-rr",50],["egg-rr",72]],"time":27.18994140625,"type":"rewrite"},{"count":[[182,135]],"inputs":[["(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(-.f64 x (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(/.f64 y z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(/.f64 (-.f64 y x) z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(-.f64 x (/.f64 x z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 x (/.f64 (-.f64 y x) z))","(*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x))","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 x (/.f64 x z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(/.f64 y z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 x (/.f64 (-.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 x (/.f64 (-.f64 y x) z))","(/.f64 (-.f64 y x) z)","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","x","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))","(-.f64 (+.f64 (/.f64 y z) x) (/.f64 x z))","(+.f64 x (/.f64 (-.f64 y x) z))"]],"time":199.305908203125,"type":"simplify"},{"compiler":[[1716,545]],"time":16.09716796875,"type":"eval"},{"alts":[["(+.f64 x (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 3))","fresh",0.37640390629507237],["(+.f64 x (/.f64 (-.f64 y x) z))","done",0.0234375],["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","next",0.07421875],["(+.f64 x (/.f64 (/.f64 (fma.f64 y z (neg.f64 (*.f64 z x))) z) z))","fresh",22.970198973418626]],"compiler":[[13,9],[10,6],[15,10],[16,9],[13,9],[15,10],[16,9]],"count":[[136,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[135,3],"picked":[1,1]}],"min-error":[0],"time":37.639892578125,"type":"prune"},{"compiler":[[43,20]],"locations":[["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))",0.0078125,true],["(+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))",0.0234375,true],["(*.f64 (/.f64 1 z) (neg.f64 x))",0.23046875,true]],"time":9.31298828125,"type":"localize"},{"count":[[3,96]],"series":[["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","y","-inf",0.201904296875],["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","y","inf",0.166015625],["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","y","0",0.19189453125],["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","z","-inf",0.214111328125],["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","z","inf",0.906982421875],["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","z","0",0.172119140625],["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","x","-inf",0.192138671875],["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","x","inf",0.160888671875],["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","x","0",0.177978515625],["(+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))","y","-inf",0.175048828125],["(+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))","y","inf",0.1708984375],["(+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))","y","0",0.255859375],["(+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))","x","-inf",0.156005859375],["(+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))","x","inf",0.205078125],["(+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))","x","0",0.1650390625],["(+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))","z","-inf",0.35009765625],["(+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))","z","inf",0.274169921875],["(+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))","z","0",0.232177734375],["(*.f64 (/.f64 1 z) (neg.f64 x))","x","-inf",0.243896484375],["(*.f64 (/.f64 1 z) (neg.f64 x))","x","inf",0.422119140625],["(*.f64 (/.f64 1 z) (neg.f64 x))","x","0",0.3330078125],["(*.f64 (/.f64 1 z) (neg.f64 x))","z","-inf",0.18408203125],["(*.f64 (/.f64 1 z) (neg.f64 x))","z","inf",0.43896484375],["(*.f64 (/.f64 1 z) (neg.f64 x))","z","0",0.3759765625]],"time":6.68505859375,"type":"series"},{"count":[[3,229]],"inputs":[["(*.f64 (/.f64 1 z) (neg.f64 x))","(+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z))","(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) (*.f64 (neg.f64 (/.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (/.f64 x z)) 0) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) 0) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) (*.f64 0 (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (/.f64 x z))) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (cbrt.f64 (pow.f64 (/.f64 x z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (cbrt.f64 (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (cbrt.f64 (*.f64 x x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 z)) (*.f64 (cbrt.f64 (pow.f64 z -2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 z) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 (cbrt.f64 (pow.f64 z -2)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 1 z) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -2)) (/.f64 (neg.f64 x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x x)) z) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 z -2)) (neg.f64 x)) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 z -2)) x) (cbrt.f64 (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (/.f64 1 z) (cbrt.f64 x))) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 x z))) (cbrt.f64 (pow.f64 (/.f64 x z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 z) (cbrt.f64 x)) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 z)) x) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (cbrt.f64 (neg.f64 x))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z -2)) (neg.f64 x)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 z) (*.f64 z x)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (neg.f64 z)) (neg.f64 (*.f64 x z))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (neg.f64 x) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (/.f64 x z) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 x z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (pow.f64 (/.f64 x z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (neg.f64 (/.f64 x z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y x) z) (*.f64 (/.f64 (-.f64 y x) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 y x) z) 0) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y x) z) (*.f64 0 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 y x) z)) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 y z) 0) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 x z) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 x z)) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (+.f64 (*.f64 y (cbrt.f64 (pow.f64 z -2))) (*.f64 (cbrt.f64 (pow.f64 z -2)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (+.f64 (*.f64 (cbrt.f64 (pow.f64 z -2)) (neg.f64 x)) (*.f64 y (cbrt.f64 (pow.f64 z -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (-.f64 (*.f64 y (cbrt.f64 (pow.f64 z -2))) (*.f64 (cbrt.f64 (pow.f64 z -2)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (cbrt.f64 (*.f64 (neg.f64 (/.f64 x z)) (/.f64 y z))))) (+.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (cbrt.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (cbrt.f64 (*.f64 (neg.f64 (/.f64 x z)) (/.f64 y z))))) (+.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (neg.f64 (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) (cbrt.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (-.f64 y x) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -2)) (+.f64 (/.f64 y (cbrt.f64 z)) (/.f64 (neg.f64 x) (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -2)) (+.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 x) (neg.f64 z) (neg.f64 (*.f64 z y))) (/.f64 1 (neg.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 x) z (*.f64 z y)) (/.f64 1 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 z z))) (*.f64 z (/.f64 y (cbrt.f64 z)))) (*.f64 z (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 y))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) z) (*.f64 (cbrt.f64 (*.f64 z z)) y)) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (cbrt.f64 (*.f64 z z))) (*.f64 (neg.f64 z) (/.f64 y (cbrt.f64 z)))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 z z))) (*.f64 (neg.f64 z) (/.f64 (neg.f64 x) (cbrt.f64 z)))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) z) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 x))) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) x)) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (cbrt.f64 (*.f64 z z))) (*.f64 z (/.f64 (neg.f64 x) (cbrt.f64 z)))) (*.f64 z (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 z)) z) (*.f64 (cbrt.f64 (*.f64 z z)) x)) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 x))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 x) (neg.f64 z) (neg.f64 (*.f64 z y))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 x) z (*.f64 z y)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 x) (neg.f64 z) (neg.f64 (*.f64 z y))) (neg.f64 z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 x) z (*.f64 z y)) z) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 x) (neg.f64 z) (neg.f64 (*.f64 z y))) z) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 y) (neg.f64 x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 y) x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 y (cbrt.f64 z)) (/.f64 (neg.f64 x) (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (/.f64 y (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (neg.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x z) (*.f64 (neg.f64 z) y)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (neg.f64 z)) (*.f64 (neg.f64 z) (neg.f64 y))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z))) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 y (cbrt.f64 z)))) (*.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (neg.f64 z)) (*.f64 z x)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (neg.f64 z)) (*.f64 (neg.f64 z) x)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (cbrt.f64 (*.f64 z z))) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 (neg.f64 x) (cbrt.f64 z)))) (*.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z y) (*.f64 z x)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (neg.f64 z)) (neg.f64 (*.f64 x z))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (*.f64 z y)) (*.f64 (neg.f64 z) x)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (neg.f64 z)) (neg.f64 (neg.f64 (*.f64 x z)))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (neg.f64 x) (neg.f64 z) (neg.f64 (*.f64 z y)))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (neg.f64 x) z (*.f64 z y))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 y x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 x z) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (neg.f64 x) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 z) x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 1 z) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (*.f64 x x)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (cbrt.f64 (*.f64 x x)) z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (cbrt.f64 (neg.f64 (/.f64 x z))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 (cbrt.f64 (pow.f64 z -2)) (neg.f64 x)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 z)) (*.f64 (cbrt.f64 (pow.f64 z -2)) x) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 y (cbrt.f64 (pow.f64 z -2))) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) y (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 -1 z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (cbrt.f64 (/.f64 y z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 y z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 x z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 x z)) 1 (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) 1 (neg.f64 (/.f64 x z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 (-.f64 y x) z)) (*.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 0) (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 (-.f64 y x) z)) (*.f64 0 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 x (/.f64 (-.f64 y x) z))) (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y x) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 y z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (/.f64 y z)) 1) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) (*.f64 (+.f64 x (/.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 x (/.f64 y z)) 0) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 x z) (+.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 (/.f64 x z) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (-.f64 (/.f64 x z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (/.f64 x z)) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x (/.f64 (-.f64 y x) z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (cbrt.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) (cbrt.f64 (/.f64 (*.f64 x (-.f64 y x)) z)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (/.f64 (*.f64 x (-.f64 y x)) z)))) (+.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 2)) (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 z) x (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 1 z) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (*.f64 x x)) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x z) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (neg.f64 x) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (cbrt.f64 (*.f64 x x)) z) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (cbrt.f64 (neg.f64 (/.f64 x z))) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 z) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 (cbrt.f64 (pow.f64 z -2)) (neg.f64 x)) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1 z)) (*.f64 (cbrt.f64 (pow.f64 z -2)) x) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (-.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2)) (cbrt.f64 (/.f64 (-.f64 y x) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 (-.f64 y x) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 y (cbrt.f64 (pow.f64 z -2))) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) z) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) y (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 -1 z) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 y z) 2)) (cbrt.f64 (/.f64 y z)) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 y z)) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (/.f64 x z))) (cbrt.f64 (pow.f64 (-.f64 x (/.f64 x z)) 2)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 y x) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 x z)) 1 (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 x z)) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 y x) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (/.f64 x z)) 1 (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) 1 (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (/.f64 x z)) (/.f64 y z))))))"]],"rules":[["egg-rr",72],["egg-rr",98],["egg-rr",59]],"time":37.4140625,"type":"rewrite"},{"count":[[325,244]],"inputs":[["(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(*.f64 -1 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","x","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","x","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (-.f64 y x) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (-.f64 y x) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (-.f64 y x) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (-.f64 y x) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (-.f64 y x) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (-.f64 y x) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (-.f64 y x) z)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 z)) x) (/.f64 y z))","(+.f64 (/.f64 (-.f64 y x) z) x)","(*.f64 (-.f64 1 (/.f64 1 z)) x)","(-.f64 x (/.f64 x z))","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (/.f64 y z) (*.f64 (-.f64 1 (/.f64 1 z)) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x))","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 1 z) 1) x)) (/.f64 y z))","(+.f64 (/.f64 (-.f64 y x) z) x)","(/.f64 (+.f64 y (*.f64 -1 x)) z)","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","x","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","x","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 y) x) z)) x)","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 x z)) x)","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 (/.f64 y z) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(/.f64 y z)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (/.f64 x z)) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)"]],"time":309.14501953125,"type":"simplify"},{"compiler":[[3410,1069]],"time":30.593017578125,"type":"eval"},{"alts":[["(+.f64 x (/.f64 (-.f64 y x) z))","done",0.0234375],["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","next",0.10679628907376808],["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","done",0.07421875]],"compiler":[[10,6],[16,11],[15,10],[16,11]],"count":[[248,3]],"kept":[{"done":[1,1],"fresh":[2,0],"new":[244,1],"picked":[1,1]}],"min-error":[0],"time":102.242919921875,"type":"prune"},{"compiler":[[53,17]],"locations":[["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))",0.0078125,true],["(+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z))",0.0234375,true],["(pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3)",0.6421052735163767,true],["(cbrt.f64 (neg.f64 (/.f64 x z)))",9.558137692616418,true]],"time":10.118896484375,"type":"localize"},{"count":[[4,42]],"series":[["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","y","-inf",0.18505859375],["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","y","inf",0.205078125],["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","y","0",0.18701171875],["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","z","-inf",0.217041015625],["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","z","inf",0.197998046875],["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","z","0",0.222900390625],["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","x","-inf",0.202880859375],["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","x","inf",0.202880859375],["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","x","0",0.225830078125],["(+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z))","y","-inf",0.175048828125],["(+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z))","y","inf",0.20703125],["(+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z))","y","0",1.43212890625],["(+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z))","z","-inf",0.302978515625],["(+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z))","z","inf",0.266845703125],["(+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z))","z","0",0.278076171875],["(+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z))","x","-inf",0.278076171875],["(+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z))","x","inf",0.283935546875],["(+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z))","x","0",0.2919921875],["(pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3)","z","-inf",0.43896484375],["(pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3)","z","inf",0.6220703125],["(pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3)","z","0",0.626953125],["(pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3)","x","-inf",1.825927734375],["(pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3)","x","inf",0.56005859375],["(pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3)","x","0",0.779052734375],["(cbrt.f64 (neg.f64 (/.f64 x z)))","z","-inf",0.326904296875],["(cbrt.f64 (neg.f64 (/.f64 x z)))","z","inf",0.383056640625],["(cbrt.f64 (neg.f64 (/.f64 x z)))","z","0",0.3408203125],["(cbrt.f64 (neg.f64 (/.f64 x z)))","x","-inf",0.364990234375],["(cbrt.f64 (neg.f64 (/.f64 x z)))","x","inf",0.3740234375],["(cbrt.f64 (neg.f64 (/.f64 x z)))","x","0",0.662109375]],"time":13.028076171875,"type":"series"},{"count":[[4,271]],"inputs":[["(cbrt.f64 (neg.f64 (/.f64 x z)))","(pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3)","(+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z))","(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 0) (cbrt.f64 (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (*.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 x z)))) (cbrt.f64 (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 x z))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)) (pow.f64 (/.f64 x z) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 x z)))) (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 z -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (/.f64 x z)))) (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (neg.f64 (pow.f64 z -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 x z))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 x z))) (cbrt.f64 (neg.f64 (pow.f64 (/.f64 x z) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) 1) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (neg.f64 x)) 1) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (neg.f64 x) (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 x z)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 x z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 x z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 x z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (/.f64 x z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (/.f64 x z)) 0) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) (*.f64 (neg.f64 (/.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (/.f64 x z))) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) (*.f64 0 (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (pow.f64 (/.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x z) 2/3) (cbrt.f64 (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 x z)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)) (pow.f64 (/.f64 x z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) (neg.f64 (pow.f64 (/.f64 x z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)) (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (/.f64 x z) 2/3)) (cbrt.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)) (pow.f64 (/.f64 x z) 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (pow.f64 x 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 z -1/3)) (/.f64 x (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (neg.f64 (/.f64 (pow.f64 x 2/3) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (neg.f64 (/.f64 x (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (/.f64 x z) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 x z)))))) (+.f64 0 (cbrt.f64 (neg.f64 (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 x z) 2/3) (*.f64 0 (cbrt.f64 (/.f64 x z))))) (cbrt.f64 (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 x (cbrt.f64 z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x z) 2/3) (cbrt.f64 (neg.f64 x))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) -1) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) 1) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (neg.f64 (pow.f64 (/.f64 x z) 2/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (neg.f64 (pow.f64 (/.f64 x z) 2/3))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (pow.f64 (/.f64 x z) 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 x) (pow.f64 z 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (pow.f64 z 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) 1) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (neg.f64 x) (cbrt.f64 z))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (/.f64 x z) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 x z)) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (/.f64 x z)) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (pow.f64 (/.f64 x z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (neg.f64 (/.f64 x z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 y x) z) 0) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y x) z) (*.f64 (/.f64 (-.f64 y x) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 y x) z)) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y x) z) (*.f64 0 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 x z)) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (/.f64 y z)) (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/3) (-.f64 (/.f64 y (pow.f64 z 2/3)) (/.f64 x (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (-.f64 (neg.f64 y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (pow.f64 (/.f64 (-.f64 y x) z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 x z) 2/3) (-.f64 (pow.f64 (/.f64 y z) 2/3) (cbrt.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x y) z) z))))) (+.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (cbrt.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 y z) 2/3) (-.f64 (pow.f64 (/.f64 x z) 2/3) (cbrt.f64 (neg.f64 (/.f64 (/.f64 (*.f64 x y) z) z))))) (+.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (neg.f64 (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 y z) 2/3) (+.f64 (pow.f64 (/.f64 x z) 2/3) (*.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 x z))))) (-.f64 (cbrt.f64 (/.f64 y z)) (cbrt.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2/3) (cbrt.f64 (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (neg.f64 y) z (neg.f64 (neg.f64 (*.f64 x z)))) (/.f64 1 (neg.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y z (neg.f64 (*.f64 x z))) (/.f64 1 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (pow.f64 z 2/3)) (*.f64 (neg.f64 z) (/.f64 y (cbrt.f64 z)))) (*.f64 (neg.f64 z) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (pow.f64 z 2/3)) (*.f64 z (/.f64 y (cbrt.f64 z)))) (*.f64 z (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) z) (*.f64 (pow.f64 z 2/3) y)) (*.f64 (pow.f64 z 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (neg.f64 z)) (*.f64 (pow.f64 z 2/3) (neg.f64 y))) (*.f64 (pow.f64 z 2/3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (pow.f64 z 2/3)) (*.f64 z (/.f64 (neg.f64 x) (cbrt.f64 z)))) (*.f64 z (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (pow.f64 z 2/3)) (*.f64 (neg.f64 z) (/.f64 (neg.f64 x) (cbrt.f64 z)))) (*.f64 (neg.f64 z) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) z) (*.f64 (pow.f64 z 2/3) (neg.f64 x))) (*.f64 (pow.f64 z 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (neg.f64 z)) (*.f64 (pow.f64 z 2/3) x)) (*.f64 (pow.f64 z 2/3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (pow.f64 z 2/3)) (*.f64 z (/.f64 x (cbrt.f64 z)))) (*.f64 z (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (pow.f64 z 2/3)) (*.f64 (neg.f64 z) (/.f64 x (cbrt.f64 z)))) (*.f64 (neg.f64 z) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 z)) z) (*.f64 (pow.f64 z 2/3) x)) (*.f64 (pow.f64 z 2/3) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (neg.f64 z)) (*.f64 (pow.f64 z 2/3) (neg.f64 x))) (*.f64 (pow.f64 z 2/3) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 y) z (neg.f64 (neg.f64 (*.f64 x z)))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y z (neg.f64 (*.f64 x z))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y x) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (neg.f64 y) z (neg.f64 (neg.f64 (*.f64 x z)))) 1) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y z (neg.f64 (*.f64 x z))) 1) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 y) z (neg.f64 (neg.f64 (*.f64 x z)))) (neg.f64 z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 y z (neg.f64 (*.f64 x z))) z) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (pow.f64 z 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 y x) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (neg.f64 y) z (neg.f64 (neg.f64 (*.f64 x z)))) z) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 y (cbrt.f64 z)) (/.f64 x (cbrt.f64 z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 y) (neg.f64 x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 y (cbrt.f64 z)) (/.f64 (neg.f64 x) (cbrt.f64 z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 y) x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (/.f64 y (cbrt.f64 z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (neg.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x z) (*.f64 (neg.f64 z) y)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (neg.f64 z)) (*.f64 (neg.f64 z) (neg.f64 y))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (pow.f64 z 2/3)) (*.f64 (pow.f64 z 2/3) (/.f64 y (cbrt.f64 z)))) (*.f64 (pow.f64 z 2/3) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (neg.f64 z)) (*.f64 z x)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 y) (neg.f64 z)) (*.f64 (neg.f64 z) x)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (pow.f64 z 2/3)) (*.f64 (pow.f64 z 2/3) (/.f64 (neg.f64 x) (cbrt.f64 z)))) (*.f64 (pow.f64 z 2/3) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y z) (*.f64 z x)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y (neg.f64 z)) (neg.f64 (*.f64 x z))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (*.f64 y z)) (*.f64 (neg.f64 z) x)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 y) (neg.f64 z)) (neg.f64 (neg.f64 (*.f64 x z)))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (cbrt.f64 z)) (pow.f64 z 2/3)) (*.f64 (pow.f64 z 2/3) (/.f64 x (cbrt.f64 z)))) (*.f64 (pow.f64 z 2/3) (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 y x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (neg.f64 y) z (neg.f64 (neg.f64 (*.f64 x z))))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y z (neg.f64 (*.f64 x z)))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (-.f64 x y) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 x z) 2/3) (cbrt.f64 (neg.f64 (/.f64 x z))) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (pow.f64 (/.f64 x z) 2/3) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (pow.f64 (/.f64 y z) 2/3) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x z) -1 (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x z)) (neg.f64 (pow.f64 (/.f64 x z) 2/3)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 -1 z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 x z)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)) (pow.f64 (/.f64 x z) 2/3)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (pow.f64 y 2/3) z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 y z) 2/3) (cbrt.f64 (/.f64 y z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 y z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/3) (/.f64 y (pow.f64 z 2/3)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) y (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 -1 z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 x z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 x z)) 1 (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) 1 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 (-.f64 y x) z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y x) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 y z)) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 x (/.f64 y z)) 0) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 0) (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 (-.f64 y x) z)) (*.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 x (/.f64 (-.f64 y x) z))) (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (/.f64 (-.f64 y x) z)) (*.f64 0 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 x (/.f64 y z)) 1) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) (*.f64 (+.f64 x (/.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x (/.f64 y z)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (/.f64 (-.f64 x y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 x (/.f64 y z)) 0) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 (-.f64 x y) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y z) (-.f64 (/.f64 x z) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 x z) (+.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 x (/.f64 x z)) (neg.f64 (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (/.f64 (-.f64 x y) z) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (-.f64 x y) z) (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2/3) (cbrt.f64 (/.f64 (*.f64 x (-.f64 y x)) z)))) (+.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2/3) (-.f64 (pow.f64 x 2/3) (cbrt.f64 (/.f64 (*.f64 x (-.f64 y x)) z)))) (+.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 2/3) (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (/.f64 (-.f64 y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (/.f64 (-.f64 y x) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (/.f64 (-.f64 x y) z) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (/.f64 (-.f64 y x) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) (pow.f64 (/.f64 (-.f64 y x) z) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (pow.f64 (/.f64 x z) 2/3) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 z) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x z) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x z) -1 (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x z)) (neg.f64 (pow.f64 (/.f64 x z) 2/3)) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 x z) 2/3) (cbrt.f64 (neg.f64 (/.f64 x z))) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 -1 z) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (/.f64 x z)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2/3)) (pow.f64 (/.f64 x z) 2/3)) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (/.f64 x z))) (cbrt.f64 (pow.f64 (-.f64 x (/.f64 x z)) 2)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 (-.f64 y x) z) 2/3) (cbrt.f64 (/.f64 (-.f64 y x) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (-.f64 x y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (/.f64 (pow.f64 y 2/3) z) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 y z) 2/3) (cbrt.f64 (/.f64 y z)) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (pow.f64 (/.f64 y z) 2/3) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 y z)) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/3) (/.f64 y (pow.f64 z 2/3)) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) y (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 -1 z) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 y x) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (-.f64 y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 x z)) 1 (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 x z)) (+.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (/.f64 x z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 y x) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (/.f64 x z)) 1 (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (-.f64 x (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) 1 (-.f64 x (/.f64 x z)))))))"]],"rules":[["egg-rr",71],["egg-rr",106],["egg-rr",62],["egg-rr",32]],"time":42.258056640625,"type":"rewrite"},{"count":[[313,281]],"inputs":[["(/.f64 y z)","(/.f64 y z)","(/.f64 y z)","(/.f64 y z)","(/.f64 y z)","(/.f64 y z)","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 y z)","(+.f64 x (/.f64 y z))","x","(+.f64 (/.f64 y z) x)","x","(+.f64 (/.f64 y z) x)","(/.f64 y z)","(+.f64 x (/.f64 y z))","x","(+.f64 (/.f64 y z) x)","x","(+.f64 (/.f64 y z) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 (/.f64 y z) x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 (/.f64 y z) x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 (/.f64 y z) x))","(/.f64 y z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))","(/.f64 y z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 y z)","(/.f64 y z)","(/.f64 y z)","(/.f64 y z)","(/.f64 y z)","(/.f64 y z)","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z)))","(neg.f64 (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (/.f64 y z))","(/.f64 (-.f64 y x) z)","(/.f64 y z)","(+.f64 x (/.f64 y z))","x","(+.f64 (/.f64 y z) x)","(+.f64 x (/.f64 y z))","x","(+.f64 (/.f64 y z) x)","(+.f64 x (/.f64 y z))","(/.f64 y z)","(+.f64 x (/.f64 y z))","x","(+.f64 (/.f64 y z) x)","(+.f64 x (/.f64 y z))","x","(+.f64 (/.f64 y z) x)","(+.f64 x (/.f64 y z))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) x)","(-.f64 x (/.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 (/.f64 y z) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 (/.f64 y z) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 (/.f64 y z) x))","(+.f64 (/.f64 (-.f64 y x) z) x)","(/.f64 y z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(/.f64 y z)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (/.f64 x z))) (+.f64 x (/.f64 y z)))","(+.f64 (/.f64 (-.f64 y x) z) x)"]],"time":145.829833984375,"type":"simplify"},{"compiler":[[4032,1410]],"time":37.647216796875,"type":"eval"},{"alts":[["(+.f64 x (/.f64 (-.f64 y x) z))","done",0.0234375],["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","done",0.10679628907376808],["(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","done",0.07421875]],"compiler":[[10,6],[16,11],[15,10]],"count":[[284,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[281,0],"picked":[1,1]}],"min-error":[0],"time":123.48681640625,"type":"prune"},{"accuracy":[0.0234375],"baseline":[0.0234375],"branch":[["x",0.0234375,1],["y",0.0234375,1],["z",0.0234375,1],["(+.f64 x (/.f64 (-.f64 y x) z))",0.0234375,1]],"compiler":[[4,3],[4,3],[4,3],[10,6],[58,30]],"count":[[5,1]],"inputs":[["(+.f64 x (+.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x z))) 3) (/.f64 y z)))","(+.f64 x (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) z)) 3))","(+.f64 x (+.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (/.f64 y z)))","(+.f64 x (/.f64 (/.f64 (fma.f64 y z (neg.f64 (*.f64 z x))) z) z))","(+.f64 x (/.f64 (-.f64 y x) z))"]],"link":["."],"name":["Statistics.Sample:$swelfordMean from math-functions-0.1.5.2"],"oracle":[23.20951406133461],"outputs":[["(+.f64 x (/.f64 (-.f64 y x) z))"]],"time":14.84716796875,"times":[["x",3.369140625],["y",3.4638671875],["z",3.31396484375],["(+.f64 x (/.f64 (-.f64 y x) z))",3.458984375]],"type":"regimes"},{"compiler":[[10,6]],"inputs":[["(+.f64 x (/.f64 (-.f64 y x) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (-.f64 y x) z))"]],"stop":[["done",1]],"time":19.11181640625,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[10,6]],"remove-preprocessing":[[]],"time":7.638916015625,"type":"end"}]
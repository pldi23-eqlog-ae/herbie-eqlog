[{"compiler":[[15,11]],"method":["search"],"sampling":[[12,7.32064247131411e-7,3.576278686167819e-10,0.9999992675781251],[11,7.3170661926274e-7,7.152557372877739e-10,0.999999267578125],[10,7.309913635254522e-7,1.4305114745755479e-9,0.999999267578125],[9,7.295608520508224e-7,2.861022949205306e-9,0.999999267578125],[8,7.266998291016171e-7,5.722045898410612e-9,0.999999267578125],[7,7.209777832031523e-7,1.1444091796875434e-8,0.999999267578125],[6,7.095336914062769e-7,2.2888183593750867e-8,0.9999992675781251],[5,6.86645507812526e-7,4.5776367187501735e-8,0.9999992675781251],[4,6.408691406250243e-7,9.155273437500347e-8,0.999999267578125],[3,5.493164062500208e-7,1.8310546875000694e-7,0.999999267578125],[2,3.662109375000139e-7,3.662109375000139e-7,0.9999992675781251],[1,0.0,7.324218750000278e-7,0.999999267578125],[0,0.0,7.324218750000278e-7,0.999999267578125]],"time":0.97802734375,"type":"analyze"},{"outcomes":[["body",256,"valid",279.658935546875,8256]],"time":287.117919921875,"type":"sample"},{"compiler":[[8,6]],"inputs":[["0"],["(/.f64 10 (-.f64 1 (*.f64 x x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 10 (-.f64 1 (*.f64 x x)))","(/.f64 -10 (fma.f64 x x -1))"]],"symmetry":[[]],"time":51.1220703125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 10 (-.f64 1 (*.f64 x x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 10 (-.f64 1 (*.f64 x x)))","(/.f64 -10 (fma.f64 x x -1))"]],"time":17.869140625,"type":"simplify"},{"compiler":[[14,10]],"time":0.36279296875,"type":"eval"},{"alts":[["(/.f64 -10 (fma.f64 x x -1))","next",0.23046875]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.23046875],"time":1.7841796875,"type":"prune"},{"compiler":[[14,9]],"locations":[["(/.f64 -10 (fma.f64 x x -1))",0.23046875,true]],"time":3.660888671875,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 -10 (fma.f64 x x -1))","x","-inf",0.306884765625],["(/.f64 -10 (fma.f64 x x -1))","x","inf",0.4501953125],["(/.f64 -10 (fma.f64 x x -1))","x","0",0.409912109375]],"time":1.220947265625,"type":"series"},{"count":[[1,91]],"inputs":[["(/.f64 -10 (fma.f64 x x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -10 (fma.f64 x x -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -10 (fma.f64 x x -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -10 (+.f64 x 1)) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 x 1)) (/.f64 10 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 -10) (+.f64 x 1)) (/.f64 (cbrt.f64 100) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1)) (/.f64 -10 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 100)) (/.f64 (cbrt.f64 10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 100) (+.f64 x 1)) (/.f64 (cbrt.f64 -10) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -10) (/.f64 (cbrt.f64 100) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 10 (fma.f64 x x -1))) (neg.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 10) (/.f64 (cbrt.f64 (neg.f64 100)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 10) -1) (/.f64 (sqrt.f64 10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sqrt.f64 1000) (-.f64 1 (*.f64 x x)))) (*.f64 (sqrt.f64 10) (pow.f64 (fma.f64 x x -1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sqrt.f64 1000) (fma.f64 x x -1))) (*.f64 (sqrt.f64 10) (neg.f64 (pow.f64 (fma.f64 x x -1) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 10) (/.f64 (sqrt.f64 10) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 -10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 -10) (pow.f64 (fma.f64 x x -1) -2/3)) (cbrt.f64 (/.f64 100 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 100 (fma.f64 x x -1))) (*.f64 (cbrt.f64 -10) (pow.f64 (fma.f64 x x -1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 -1000 (fma.f64 x x -1)) (pow.f64 (fma.f64 x x -1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (*.f64 0 (cbrt.f64 (/.f64 10 (fma.f64 x x -1)))))) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 10 (/.f64 -1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -1) -1/3) (*.f64 -10 (pow.f64 (fma.f64 x x -1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -10 (pow.f64 (fma.f64 x x -1) -2/3)) (pow.f64 (fma.f64 x x -1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 (*.f64 x x)) -1/3) (*.f64 10 (pow.f64 (fma.f64 x x -1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -2/3)) (cbrt.f64 (/.f64 1000 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 -10) (fma.f64 x x -1)) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 100) (/.f64 (cbrt.f64 -10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -10 (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) -10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 x x -1)) 10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 10 (fma.f64 x x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1000 (fma.f64 x x -1))) (neg.f64 (pow.f64 (fma.f64 x x -1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 -10)) (pow.f64 (fma.f64 x x -1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 10)) (pow.f64 (-.f64 1 (*.f64 x x)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 10) (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3)) (pow.f64 (-.f64 1 (*.f64 x x)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -1/3) -10) (pow.f64 (fma.f64 x x -1) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (cbrt.f64 100)) (pow.f64 (fma.f64 x x -1) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) (pow.f64 (fma.f64 x x -1) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -1) -2/3) (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (+.f64 x 1)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (/.f64 -1000 (fma.f64 x x -1)) (pow.f64 (fma.f64 x x -1) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x -1))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 10)) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 10) (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3)) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (fma.f64 x x -1) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -10 (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 1 (*.f64 (fma.f64 x x -1) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 (*.f64 (fma.f64 x x -1) -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 (/.f64 -1000 (fma.f64 x x -1)) (pow.f64 (fma.f64 x x -1) 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 x x -1))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 -10))) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 10 (pow.f64 (fma.f64 x x -1) -2/3)) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1000 (fma.f64 x x -1))) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -1/3) -10)) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (cbrt.f64 100))) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 10 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2))) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2) 10)) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 -10) (/.f64 (fma.f64 x x -1) (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2))) (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2) (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))))) (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -1/3) -10) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (cbrt.f64 100)) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 -10)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -10 (pow.f64 (fma.f64 x x -1) -2/3)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 10 (-.f64 1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (fma.f64 x x -1) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (fma.f64 x x -1)) 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (fma.f64 x x -1)) -1/10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 x x -1) -1/3) (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 10 (fma.f64 x x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 -10 (+.f64 x 1))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 10))) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 10) (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3))) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2) -10)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 -10 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2))) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 x x -1) -2/3) (cbrt.f64 (/.f64 (fma.f64 x x -1) -1000)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 10 (fma.f64 x x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3))))))"]],"rules":[["egg-rr",91]],"time":43.72412109375,"type":"rewrite"},{"count":[[103,106]],"inputs":[["10","(+.f64 (*.f64 10 (pow.f64 x 2)) 10)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 10 (*.f64 10 (pow.f64 x 4))))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 10 (pow.f64 x 6)) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(/.f64 -10 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -10 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))"]],"method":["egg-herbie"],"outputs":[["10","(+.f64 (*.f64 10 (pow.f64 x 2)) 10)","(fma.f64 10 (*.f64 x x) 10)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 10 (*.f64 10 (pow.f64 x 4))))","(fma.f64 (*.f64 x x) 10 (fma.f64 10 (pow.f64 x 4) 10))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 10 (pow.f64 x 6)) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(+.f64 (*.f64 10 (+.f64 (*.f64 x x) (pow.f64 x 6))) (fma.f64 10 (pow.f64 x 4) 10))","(/.f64 -10 (pow.f64 x 2))","(/.f64 -10 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -10 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (*.f64 10 (+.f64 (pow.f64 x -4) (+.f64 (pow.f64 x -6) (pow.f64 x -2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(-.f64 (*.f64 -10 (pow.f64 x -4)) (*.f64 10 (+.f64 (pow.f64 x -8) (+.f64 (pow.f64 x -6) (pow.f64 x -2)))))","(/.f64 -10 (pow.f64 x 2))","(/.f64 -10 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -10 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (*.f64 10 (+.f64 (pow.f64 x -4) (+.f64 (pow.f64 x -6) (pow.f64 x -2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(-.f64 (*.f64 -10 (pow.f64 x -4)) (*.f64 10 (+.f64 (pow.f64 x -8) (+.f64 (pow.f64 x -6) (pow.f64 x -2)))))"]],"time":47.52490234375,"type":"simplify"},{"compiler":[[1420,1083]],"time":22.6630859375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 -10)) (cbrt.f64 (fma.f64 x x -1)))","fresh",22.757097186964497],["(pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 3)","fresh",0.8694079102745652],["(*.f64 10 (/.f64 -1 (fma.f64 x x -1)))","next",0.340507519536884],["(/.f64 -10 (fma.f64 x x -1))","done",0.23046875],["(/.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2) -10)) (cbrt.f64 (fma.f64 x x -1)))","fresh",0.37242128907376804],["(/.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))","fresh",0.3444137695368841],["(/.f64 (/.f64 -10 (+.f64 x 1)) (+.f64 x -1))","fresh",0.38023378907376804],["(*.f64 (/.f64 (cbrt.f64 -10) (fma.f64 x x -1)) (cbrt.f64 100))","fresh",0.7469102539794927]],"compiler":[[18,14],[10,8],[9,7],[7,5],[18,14],[11,9],[10,8],[11,9],[18,14],[10,8],[9,7],[18,14],[11,9],[10,8],[11,9]],"count":[[107,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[106,7],"picked":[1,1]}],"min-error":[0.00390625],"time":16.56884765625,"type":"prune"},{"compiler":[[22,15]],"locations":[["(/.f64 -1 (fma.f64 x x -1))",0.234375,true],["(*.f64 10 (/.f64 -1 (fma.f64 x x -1)))",0.27734375,true]],"time":5.59716796875,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 -1 (fma.f64 x x -1))","x","-inf",0.19189453125],["(/.f64 -1 (fma.f64 x x -1))","x","inf",0.27294921875],["(/.f64 -1 (fma.f64 x x -1))","x","0",0.219970703125],["(*.f64 10 (/.f64 -1 (fma.f64 x x -1)))","x","-inf",0.2109375],["(*.f64 10 (/.f64 -1 (fma.f64 x x -1)))","x","inf",0.18603515625],["(*.f64 10 (/.f64 -1 (fma.f64 x x -1)))","x","0",0.224853515625]],"time":1.391845703125,"type":"series"},{"count":[[2,143]],"inputs":[["(*.f64 10 (/.f64 -1 (fma.f64 x x -1)))","(/.f64 -1 (fma.f64 x x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -10 (fma.f64 x x -1)) (*.f64 (/.f64 -10 (fma.f64 x x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -10 (fma.f64 x x -1)) 0) (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -10 (fma.f64 x x -1)) (*.f64 0 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 -10 (fma.f64 x x -1))) (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 10) (cbrt.f64 (fma.f64 x x -1))) (/.f64 (cbrt.f64 100) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (sqrt.f64 10)) (cbrt.f64 (fma.f64 x x -1))) (/.f64 (neg.f64 (sqrt.f64 10)) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -1) -1/3) (/.f64 10 (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 100) (cbrt.f64 (-.f64 1 (*.f64 x x)))) (/.f64 (cbrt.f64 10) (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 100) (cbrt.f64 (fma.f64 x x -1))) (/.f64 (cbrt.f64 10) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -1) -1/3) (/.f64 -10 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 10)) (/.f64 (sqrt.f64 10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 10) (cbrt.f64 (-.f64 1 (*.f64 x x)))) (/.f64 (sqrt.f64 10) (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 10) (cbrt.f64 (fma.f64 x x -1))) (/.f64 (sqrt.f64 10) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 10) -1) (/.f64 (cbrt.f64 -100) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 10) (cbrt.f64 (fma.f64 x x -1))) (/.f64 (cbrt.f64 -100) (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 10) (+.f64 x 1)) (/.f64 (cbrt.f64 -100) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 -10) -1) (/.f64 (cbrt.f64 -100) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -10) (/.f64 (cbrt.f64 100) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 -10) (+.f64 x 1)) (/.f64 (cbrt.f64 100) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -10 (+.f64 x 1)) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1)) (/.f64 -10 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 10 (+.f64 x 1)) (/.f64 -1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 x 1)) (/.f64 10 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 10)) (/.f64 (neg.f64 (sqrt.f64 10)) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 10) (cbrt.f64 (fma.f64 x x -1))) (/.f64 (neg.f64 (sqrt.f64 10)) (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 10) (+.f64 x 1)) (/.f64 (neg.f64 (sqrt.f64 10)) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -10 (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1000 (fma.f64 x x -1))) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 10) (-.f64 1 (*.f64 x x))) (sqrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 -10) (fma.f64 x x -1)) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 10) (/.f64 (sqrt.f64 10) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 10) (/.f64 (cbrt.f64 -100) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2) 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 -100) (fma.f64 x x -1)) (cbrt.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2) (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 100) (/.f64 (cbrt.f64 -10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2) 10) (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2)) (cbrt.f64 (/.f64 1000 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) -10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 10) -1) (/.f64 (cbrt.f64 100) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (sqrt.f64 10)) (cbrt.f64 (-.f64 1 (*.f64 x x)))) (/.f64 (neg.f64 (sqrt.f64 10)) (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (sqrt.f64 10)) -1) (/.f64 (sqrt.f64 10) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) (/.f64 10 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -100) (/.f64 (cbrt.f64 10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) (/.f64 -10 (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 10) (fma.f64 x x -1)) (cbrt.f64 -100))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 10) (pow.f64 (fma.f64 x x -1) 2/3)) (/.f64 (cbrt.f64 -100) (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 -10) (pow.f64 (fma.f64 x x -1) 2/3)) (/.f64 (cbrt.f64 100) (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -10 (pow.f64 (fma.f64 x x -1) 2/3)) (pow.f64 (fma.f64 x x -1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 10 (pow.f64 (fma.f64 x x -1) 2/3)) (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 10) (fma.f64 x x -1)) (neg.f64 (sqrt.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 10) (pow.f64 (fma.f64 x x -1) 2/3)) (/.f64 (neg.f64 (sqrt.f64 10)) (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 10 (/.f64 -1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 x x -1)) 10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 10 (fma.f64 x x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -10 (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (+.f64 x 1)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) (*.f64 1/10 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 -10)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1000 (fma.f64 x x -1))) -1) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2) 10)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2) 10) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -10) (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 10 (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2))) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) 1) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) (cbrt.f64 (fma.f64 x x -1))) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1000 (fma.f64 x x -1))) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (pow.f64 (fma.f64 x x -1) 2/3)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 10 (-.f64 1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 10 (fma.f64 x x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (fma.f64 x x -1) 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 1 (*.f64 x x)) 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (-.f64 1 (*.f64 x x)) -10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x -1) -10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 1/10 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 1/10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (-.f64 1 (*.f64 x x)) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (fma.f64 x x -1) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (fma.f64 x x -1)) 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -10 (/.f64 -1 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 10 (fma.f64 x x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 (fma.f64 x x -1)) -10))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (fma.f64 x x -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 -1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (fma.f64 x x -1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3))) 1) (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2)) (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3))) (cbrt.f64 (fma.f64 x x -1))) (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2)) (cbrt.f64 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -1) -1/3) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 x 1)) (/.f64 1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1)) (/.f64 -1 (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2) (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2)) (pow.f64 (fma.f64 x x -1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2)) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3))) (/.f64 (pow.f64 (fma.f64 x x -1) -1/3) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3))) (/.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (+.f64 x 1)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (pow.f64 (fma.f64 x x -1) 2/3)) (*.f64 (fma.f64 x x -1) (pow.f64 (fma.f64 x x -1) -1/3))) (*.f64 (fma.f64 x x -1) (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (-.f64 1 (*.f64 x x))) (-.f64 1 (*.f64 x x))) (*.f64 (fma.f64 x x -1) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -1/3) 1) (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2) -1) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 x x -1) -1/3) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (fma.f64 x x -1)) (fma.f64 x x -1)) (pow.f64 (fma.f64 x x -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (-.f64 1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (fma.f64 x x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (*.f64 x x)) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (*.f64 x x)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (/.f64 -1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (/.f64 -1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (/.f64 -1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (/.f64 -1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (/.f64 -1 (fma.f64 x x -1)))))))"]],"rules":[["egg-rr",45],["egg-rr",98]],"time":31.80908203125,"type":"rewrite"},{"count":[[167,173]],"inputs":[["10","(+.f64 (*.f64 10 (pow.f64 x 2)) 10)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 10 (*.f64 10 (pow.f64 x 4))))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 10 (pow.f64 x 6)) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(/.f64 -10 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(/.f64 -10 (pow.f64 x 2))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","1","(+.f64 1 (pow.f64 x 2))","(+.f64 1 (+.f64 (pow.f64 x 2) (pow.f64 x 4)))","(+.f64 1 (+.f64 (pow.f64 x 2) (+.f64 (pow.f64 x 4) (pow.f64 x 6))))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6)))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6))))))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6)))))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6))))))"]],"method":["egg-herbie"],"outputs":[["10","(+.f64 (*.f64 10 (pow.f64 x 2)) 10)","(fma.f64 10 (*.f64 x x) 10)","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 10 (*.f64 10 (pow.f64 x 4))))","(fma.f64 10 (*.f64 x x) (fma.f64 (pow.f64 x 4) 10 10))","(+.f64 (*.f64 10 (pow.f64 x 2)) (+.f64 (*.f64 10 (pow.f64 x 6)) (+.f64 10 (*.f64 10 (pow.f64 x 4)))))","(+.f64 (*.f64 10 (+.f64 (pow.f64 x 6) (*.f64 x x))) (fma.f64 (pow.f64 x 4) 10 10))","(/.f64 -10 (pow.f64 x 2))","(/.f64 -10 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -10 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (*.f64 10 (+.f64 (pow.f64 x -4) (+.f64 (pow.f64 x -2) (pow.f64 x -6)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(-.f64 (*.f64 -10 (pow.f64 x -4)) (*.f64 10 (+.f64 (pow.f64 x -8) (+.f64 (pow.f64 x -2) (pow.f64 x -6)))))","(/.f64 -10 (pow.f64 x 2))","(/.f64 -10 (*.f64 x x))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -10 (+.f64 (pow.f64 x -4) (pow.f64 x -2)))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2))))))","(neg.f64 (*.f64 10 (+.f64 (pow.f64 x -4) (+.f64 (pow.f64 x -2) (pow.f64 x -6)))))","(neg.f64 (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 10 (/.f64 1 (pow.f64 x 6))) (*.f64 10 (/.f64 1 (pow.f64 x 2)))))))","(-.f64 (*.f64 -10 (pow.f64 x -4)) (*.f64 10 (+.f64 (pow.f64 x -8) (+.f64 (pow.f64 x -2) (pow.f64 x -6)))))","1","(+.f64 1 (pow.f64 x 2))","(fma.f64 x x 1)","(+.f64 1 (+.f64 (pow.f64 x 2) (pow.f64 x 4)))","(+.f64 (fma.f64 x x 1) (pow.f64 x 4))","(+.f64 1 (+.f64 (pow.f64 x 2) (+.f64 (pow.f64 x 4) (pow.f64 x 6))))","(+.f64 1 (+.f64 (fma.f64 x x (pow.f64 x 4)) (pow.f64 x 6)))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (pow.f64 x -2))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (neg.f64 (pow.f64 x -2)) (pow.f64 x -4))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6)))))","(-.f64 (-.f64 (neg.f64 (pow.f64 x -2)) (pow.f64 x -4)) (pow.f64 x -6))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6))))))","(-.f64 (neg.f64 (pow.f64 x -4)) (+.f64 (pow.f64 x -8) (+.f64 (pow.f64 x -2) (pow.f64 x -6))))","(/.f64 -1 (pow.f64 x 2))","(neg.f64 (pow.f64 x -2))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (neg.f64 (pow.f64 x -2)) (pow.f64 x -4))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6)))))","(-.f64 (-.f64 (neg.f64 (pow.f64 x -2)) (pow.f64 x -4)) (pow.f64 x -6))","(neg.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 8)) (+.f64 (/.f64 1 (pow.f64 x 2)) (/.f64 1 (pow.f64 x 6))))))","(-.f64 (neg.f64 (pow.f64 x -4)) (+.f64 (pow.f64 x -8) (+.f64 (pow.f64 x -2) (pow.f64 x -6))))"]],"time":81.508056640625,"type":"simplify"},{"compiler":[[2331,1793]],"time":36.223876953125,"type":"eval"},{"alts":[["(*.f64 10 (/.f64 (-.f64 (*.f64 0 (fma.f64 x x -1)) (fma.f64 x x -1)) (pow.f64 (fma.f64 x x -1) 2)))","fresh",0.3958587890737681],["(/.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2) -10)) (cbrt.f64 (fma.f64 x x -1)))","fresh",0.37242128907376804],["(*.f64 10 (/.f64 (-.f64 (*.f64 0 (-.f64 1 (*.f64 x x))) (-.f64 1 (*.f64 x x))) (*.f64 (fma.f64 x x -1) (-.f64 1 (*.f64 x x)))))","fresh",0.4209175293053261],["(/.f64 1 (/.f64 (fma.f64 x x -1) -10))","fresh",0.39453125],["(/.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))","next",0.3444137695368841],["(/.f64 (/.f64 -10 (+.f64 x 1)) (+.f64 x -1))","fresh",0.38023378907376804],["(/.f64 (/.f64 -1 (fma.f64 x x -1)) 1/10)","fresh",0.4896087890737681]],"compiler":[[21,15],[18,14],[27,17],[9,7],[11,9],[10,8],[9,7],[21,15],[18,14],[27,17],[9,7],[11,9],[10,8],[9,7]],"count":[[181,7]],"kept":[{"done":[1,0],"fresh":[6,3],"new":[173,4],"picked":[1,0]}],"min-error":[0],"time":29.531005859375,"type":"prune"},{"compiler":[[30,23]],"locations":[["(*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))",0.40853500976844204,true],["(/.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))",0.5325775390737681,true],["(cbrt.f64 -1/10)",1.0,true]],"time":8.962158203125,"type":"localize"},{"count":[[3,24]],"series":[["(*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))","x","-inf",0.364013671875],["(*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))","x","inf",0.65185546875],["(*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))","x","0",0.752197265625],["(/.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))","x","-inf",0.327880859375],["(/.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))","x","inf",0.421142578125],["(/.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))","x","0",0.876953125]],"time":3.5048828125,"type":"series"},{"count":[[3,151]],"inputs":[["(cbrt.f64 -1/10)","(/.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))","(*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 -1/10) 0) (cbrt.f64 -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 -1/10) (*.f64 (cbrt.f64 -1/10) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 -1/10)) (cbrt.f64 -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 -1/10) (*.f64 0 (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 -1/10)) (cbrt.f64 (cbrt.f64 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 -1/10))) (cbrt.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/100) 1/100))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/100)) (cbrt.f64 (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/10) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 -1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 -1/10 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 -1/10)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 -1/10)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 -1/10)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 -1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 -1/10)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 0) (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) (*.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))) (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) (*.f64 0 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10))) (/.f64 1 (cbrt.f64 (cbrt.f64 1/100))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))) (pow.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 2/3) (cbrt.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -100) (/.f64 (/.f64 -1 (fma.f64 x x -1)) (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cbrt.f64 100) -1/10)) (/.f64 (cbrt.f64 (cbrt.f64 10000)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 100)) (/.f64 (cbrt.f64 (/.f64 (cbrt.f64 10000) -1/10)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cbrt.f64 100)) (fma.f64 x x -1)) (cbrt.f64 (/.f64 (cbrt.f64 10000) -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 100) (/.f64 (pow.f64 -1/10 -1/3) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 -1/10 -1/3) (fma.f64 x x -1)) (cbrt.f64 100))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (pow.f64 -1/10 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) -1/3) (/.f64 (cbrt.f64 100) (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 -1/10 -1/3) (/.f64 (cbrt.f64 100) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) (cbrt.f64 (/.f64 100 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cbrt.f64 10000) -1/10)) (/.f64 (cbrt.f64 (cbrt.f64 100)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 100 -1/10)) (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (cbrt.f64 10000) -1/10)) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 100)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cbrt.f64 10000)) (fma.f64 x x -1)) (cbrt.f64 (/.f64 (cbrt.f64 100) -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 100) (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3)) (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 (fma.f64 x x -1)) (cbrt.f64 -1/10)) (cbrt.f64 -100))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 -100) (fma.f64 x x -1)) (neg.f64 (pow.f64 -1/10 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 100 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10))) (cbrt.f64 (cbrt.f64 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (cbrt.f64 100)) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 10000))) (cbrt.f64 -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 2/3) (cbrt.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)))) (cbrt.f64 (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (cbrt.f64 100) -1/10)) (cbrt.f64 (cbrt.f64 10000))) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 -1/10 -1/3) (cbrt.f64 100)) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 -1/10 -1/3) (cbrt.f64 -100)) (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 -1/10 -1/3) (cbrt.f64 (/.f64 100 (fma.f64 x x -1)))) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1))) (pow.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 2/3)) (cbrt.f64 (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -100) (pow.f64 -1/10 -1/3)) (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 100 (fma.f64 x x -1))) (pow.f64 -1/10 -1/3)) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 -100) (fma.f64 x x -1)) 1) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 100 -1/10)) 1) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10))) 1) (cbrt.f64 (cbrt.f64 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 100)) (cbrt.f64 (/.f64 (cbrt.f64 10000) -1/10))) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) -1) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 1/100))) (cbrt.f64 (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 100 (fma.f64 x x -1))) (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 100) (cbrt.f64 (*.f64 -1/10 (fma.f64 x x -1)))) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 (cbrt.f64 -1/10)))) (cbrt.f64 (cbrt.f64 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 100) (cbrt.f64 (cbrt.f64 -1/10))) (*.f64 (cbrt.f64 (cbrt.f64 1/100)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 100 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10))) (cbrt.f64 (cbrt.f64 -1/10))) (cbrt.f64 (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10))) 1) (cbrt.f64 (cbrt.f64 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (+.f64 x 1)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) -1) (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (cbrt.f64 (fma.f64 x x -1))) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (pow.f64 (fma.f64 x x -1) 2/3)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 -100) (cbrt.f64 -1/10)) (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 100 (fma.f64 x x -1))) 1) (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1))) (cbrt.f64 (cbrt.f64 10000))) (*.f64 (cbrt.f64 (cbrt.f64 -1/10)) (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 -100) (fma.f64 x x -1)) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 100 -1/10))) (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10)))) (neg.f64 (cbrt.f64 (cbrt.f64 1/100))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 -100) (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 100 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))) (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) -1/3) (cbrt.f64 100)) (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 2/3) (cbrt.f64 (cbrt.f64 -100))) (cbrt.f64 (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 2/3) (cbrt.f64 (cbrt.f64 100))) (cbrt.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))) (cbrt.f64 (cbrt.f64 10000))) (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 100) (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3)) (cbrt.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 -100)) (pow.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 2/3)) (cbrt.f64 (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 100)) (pow.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 2/3)) (cbrt.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 100 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))) 1) (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 100) -1) (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 100 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))) 1) (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10))) (cbrt.f64 (cbrt.f64 (cbrt.f64 1/100)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 -1/10)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 -100) (cbrt.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))) (neg.f64 (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 100 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))))) (neg.f64 (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 100 -1/10) (pow.f64 (fma.f64 x x -1) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (/.f64 100 -1/10) (pow.f64 (fma.f64 x x -1) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 -1/10) (*.f64 x x)) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 1/10) (*.f64 (cbrt.f64 -1/10) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 0) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) (*.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) (*.f64 0 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 -1/10) (*.f64 x x)) 1) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 (cbrt.f64 1/100)) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/10) (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/10 (fma.f64 x x -1))) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 (cbrt.f64 -1/10))) (cbrt.f64 (cbrt.f64 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x -1)) (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -1) 2/3) (cbrt.f64 (*.f64 -1/10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) (cbrt.f64 -1/10)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 1/100)) (*.f64 (fma.f64 x x -1) (cbrt.f64 (cbrt.f64 -1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 1/100)) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x x -1)) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1))) (neg.f64 (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/10) (neg.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))) (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 2/3) (cbrt.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/10) (+.f64 (pow.f64 x 6) -1)) (+.f64 (+.f64 1 (*.f64 x x)) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 6) -1) (cbrt.f64 -1/10)) (+.f64 (+.f64 1 (*.f64 x x)) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 1/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fma.f64 x x -1) 3) -1/10) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 x x -1) 3) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (cbrt.f64 -1/10) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/10) (*.f64 x x) (cbrt.f64 1/10))))))"]],"rules":[["egg-rr",41],["egg-rr",91],["egg-rr",19]],"time":32.467041015625,"type":"rewrite"},{"count":[[175,173]],"inputs":[["(*.f64 -1 (/.f64 (cbrt.f64 100) (cbrt.f64 -1/10)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 2)) (cbrt.f64 -1/10))) (*.f64 -1 (/.f64 (cbrt.f64 100) (cbrt.f64 -1/10))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 2)) (cbrt.f64 -1/10))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 4)) (cbrt.f64 -1/10))) (*.f64 -1 (/.f64 (cbrt.f64 100) (cbrt.f64 -1/10)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 2)) (cbrt.f64 -1/10))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 4)) (cbrt.f64 -1/10))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 6)) (cbrt.f64 -1/10))) (*.f64 -1 (/.f64 (cbrt.f64 100) (cbrt.f64 -1/10))))))","(/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 6)))))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 8))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 6))))))","(/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 6)))))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 8))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 6))))))","(*.f64 -1 (cbrt.f64 -1/10))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (cbrt.f64 100) (cbrt.f64 -1/10)))","(cbrt.f64 (neg.f64 -1000))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 2)) (cbrt.f64 -1/10))) (*.f64 -1 (/.f64 (cbrt.f64 100) (cbrt.f64 -1/10))))","(-.f64 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 -1000))) (cbrt.f64 -1000))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 2)) (cbrt.f64 -1/10))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 4)) (cbrt.f64 -1/10))) (*.f64 -1 (/.f64 (cbrt.f64 100) (cbrt.f64 -1/10)))))","(-.f64 (-.f64 (neg.f64 (*.f64 (*.f64 x x) (cbrt.f64 -1000))) (*.f64 (pow.f64 x 4) (cbrt.f64 -1000))) (cbrt.f64 -1000))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 2)) (cbrt.f64 -1/10))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 4)) (cbrt.f64 -1/10))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (cbrt.f64 100) (pow.f64 x 6)) (cbrt.f64 -1/10))) (*.f64 -1 (/.f64 (cbrt.f64 100) (cbrt.f64 -1/10))))))","(-.f64 (-.f64 (-.f64 (neg.f64 (*.f64 (pow.f64 x 6) (cbrt.f64 -1000))) (cbrt.f64 -1000)) (*.f64 (pow.f64 x 4) (cbrt.f64 -1000))) (*.f64 (*.f64 x x) (cbrt.f64 -1000)))","(/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(/.f64 (cbrt.f64 -1000) (*.f64 x x))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))))","(+.f64 (/.f64 (cbrt.f64 -1000) (*.f64 x x)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 6)))))","(+.f64 (/.f64 (cbrt.f64 -1000) (*.f64 x x)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 6))))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 8))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 6))))))","(+.f64 (/.f64 (cbrt.f64 -1000) (*.f64 x x)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 8)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 6)))))","(/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(/.f64 (cbrt.f64 -1000) (*.f64 x x))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))))","(+.f64 (/.f64 (cbrt.f64 -1000) (*.f64 x x)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 6)))))","(+.f64 (/.f64 (cbrt.f64 -1000) (*.f64 x x)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 6))))","(+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 8))) (+.f64 (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 4))) (/.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 6))))))","(+.f64 (/.f64 (cbrt.f64 -1000) (*.f64 x x)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 8)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 6)))))","(*.f64 -1 (cbrt.f64 -1/10))","(cbrt.f64 (neg.f64 -1/10))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1/10) (+.f64 (*.f64 x x) -1))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1/10) (+.f64 (*.f64 x x) -1))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1/10) (+.f64 (*.f64 x x) -1))","(*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))","(*.f64 (cbrt.f64 -1/10) (*.f64 x x))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1/10) (+.f64 (*.f64 x x) -1))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1/10) (+.f64 (*.f64 x x) -1))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1/10) (+.f64 (*.f64 x x) -1))","(*.f64 (cbrt.f64 -1/10) (pow.f64 x 2))","(*.f64 (cbrt.f64 -1/10) (*.f64 x x))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1/10) (+.f64 (*.f64 x x) -1))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1/10) (+.f64 (*.f64 x x) -1))","(+.f64 (*.f64 -1 (cbrt.f64 -1/10)) (*.f64 (cbrt.f64 -1/10) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1/10) (+.f64 (*.f64 x x) -1))"]],"time":82.698974609375,"type":"simplify"},{"compiler":[[2694,2238]],"time":42.970947265625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10))) (cbrt.f64 (cbrt.f64 1/100)))","fresh",0.45445253907376815],["(/.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2) -10)) (cbrt.f64 (fma.f64 x x -1)))","fresh",0.37242128907376804],["(/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))","next",0.23046875],["(/.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))","done",0.3444137695368841],["(*.f64 (/.f64 1 (fma.f64 x x -1)) (cbrt.f64 (/.f64 100 -1/10)))","fresh",0.340507519536884],["(/.f64 (/.f64 (cbrt.f64 100) (cbrt.f64 (cbrt.f64 -1/10))) (*.f64 (cbrt.f64 (cbrt.f64 1/100)) (fma.f64 x x -1)))","fresh",0.375],["(/.f64 (/.f64 -10 (+.f64 x 1)) (+.f64 x -1))","fresh",0.38023378907376804]],"compiler":[[16,14],[18,14],[10,8],[11,9],[12,10],[16,14],[10,8],[16,14],[18,14],[10,8],[12,10],[16,14],[10,8]],"count":[[180,7]],"kept":[{"done":[0,0],"fresh":[6,2],"new":[173,4],"picked":[1,1]}],"min-error":[0],"time":34.5390625,"type":"prune"},{"compiler":[[25,20]],"locations":[["(/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))",0.23046875,true]],"time":6.7109375,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))","x","-inf",0.302978515625],["(/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))","x","inf",0.31298828125],["(/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))","x","0",0.47705078125]],"time":1.149169921875,"type":"series"},{"count":[[1,101]],"inputs":[["(/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -10 (fma.f64 x x -1)) 0) (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -10 (fma.f64 x x -1)) (*.f64 (/.f64 -10 (fma.f64 x x -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 -10 (fma.f64 x x -1))) (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -10 (fma.f64 x x -1)) (*.f64 0 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 1 (*.f64 x x))) (/.f64 10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -1) -1/3) (/.f64 -10 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 10 (fma.f64 x x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -10 (pow.f64 (fma.f64 x x -1) 2/3)) (pow.f64 (fma.f64 x x -1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 100) (/.f64 1 (*.f64 (cbrt.f64 -1/10) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) (pow.f64 (cbrt.f64 (fma.f64 x x -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -10) (/.f64 (cbrt.f64 100) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 10 (/.f64 -1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 -10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 x x -1)) 10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -10 (/.f64 1 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) -10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) 1) (cbrt.f64 -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -100) (/.f64 -1 (fma.f64 x x -1))) (cbrt.f64 -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (+.f64 x 1)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (-.f64 1 (*.f64 x x)) -10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (fma.f64 x x -1) 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -100) -1) (*.f64 (cbrt.f64 1/10) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -100) (pow.f64 (fma.f64 x x -1) -1/3)) (*.f64 (cbrt.f64 1/10) (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -100) 1) (*.f64 (cbrt.f64 1/10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 100) -1) (*.f64 (cbrt.f64 -1/10) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 100) (pow.f64 (fma.f64 x x -1) -1/3)) (*.f64 (cbrt.f64 -1/10) (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -10) -1) (*.f64 (cbrt.f64 1/100) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (*.f64 (cbrt.f64 1/100) (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 -1/10 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 x x -1) -1/3) (*.f64 -1/10 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 1/10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) (cbrt.f64 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -1/3) -1) (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -1/3) 1) (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -1/3) (cbrt.f64 100)) (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -1/3) (cbrt.f64 -100)) (*.f64 (pow.f64 (fma.f64 x x -1) 2/3) (cbrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (fma.f64 x x -1) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 10) (*.f64 (-.f64 1 (*.f64 x x)) (cbrt.f64 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (-.f64 1 (*.f64 x x)) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -100) 1) (*.f64 (cbrt.f64 -1/10) (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 100) (*.f64 (cbrt.f64 -1/10) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 x x -1)) (cbrt.f64 -100)) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 x x -1)) (cbrt.f64 -10)) (cbrt.f64 1/100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 10)) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 -10)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 x x -1) -1/3) -10) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (cbrt.f64 100)) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -100) (/.f64 1 (fma.f64 x x -1))) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -10) (/.f64 1 (fma.f64 x x -1))) (cbrt.f64 1/100))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 10) (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3)) (cbrt.f64 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -10) (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) 1) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -10 (pow.f64 (fma.f64 x x -1) 2/3)) (cbrt.f64 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 100)) (/.f64 (cbrt.f64 100) (fma.f64 x x -1))) (cbrt.f64 (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 10 (cbrt.f64 (fma.f64 x x -1))) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1))) 1) (pow.f64 (fma.f64 x x -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10))) (cbrt.f64 (cbrt.f64 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x -1) -10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 100) (/.f64 (*.f64 (cbrt.f64 -1/10) (fma.f64 x x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 1 (*.f64 x x)) 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 100) (*.f64 (*.f64 (cbrt.f64 -1/10) (fma.f64 x x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 -1/10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 1/10 (-.f64 1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (fma.f64 x x -1) -1/3)) (*.f64 1/10 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (fma.f64 x x -1) -1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (-.f64 1 (*.f64 x x)) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 100) (*.f64 (-.f64 1 (*.f64 x x)) (cbrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1))) (cbrt.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (/.f64 -1000 (fma.f64 x x -1)))) (neg.f64 (pow.f64 (fma.f64 x x -1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 10 (-.f64 1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 x x -1)) -1) 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (fma.f64 x x -1)) 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 -10) (*.f64 (cbrt.f64 1/100) (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 -10) (*.f64 (fma.f64 x x -1) (cbrt.f64 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 -100) (*.f64 (fma.f64 x x -1) (cbrt.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 -100) (*.f64 (-.f64 1 (*.f64 x x)) (cbrt.f64 -1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 -100) (neg.f64 (*.f64 (cbrt.f64 -1/10) (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -10 (fma.f64 x x -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (fma.f64 x x -1)) -1/10)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -1/10 (fma.f64 x x -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x -1) -1/10) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -10 (fma.f64 x x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 10 (fma.f64 x x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 10 (/.f64 1 (fma.f64 x x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 10 (fma.f64 x x -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (fma.f64 x x -1)) 10))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 3))))))"]],"rules":[["egg-rr",101]],"time":24.599853515625,"type":"rewrite"},{"count":[[113,117]],"inputs":[["(*.f64 -1 (cbrt.f64 -1000))","(+.f64 (*.f64 -1 (cbrt.f64 -1000)) (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 2))))","(+.f64 (*.f64 -1 (cbrt.f64 -1000)) (+.f64 (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 4))) (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 2)))))","(+.f64 (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 6))) (+.f64 (*.f64 -1 (cbrt.f64 -1000)) (+.f64 (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 4))) (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 2))))))","(/.f64 (cbrt.f64 -1000) (pow.f64 x 2))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2)))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 6)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2))))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 6)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 8)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2)))))","(/.f64 (cbrt.f64 -1000) (pow.f64 x 2))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2)))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 6)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2))))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 6)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 8)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (cbrt.f64 -1000))","(cbrt.f64 1000)","(+.f64 (*.f64 -1 (cbrt.f64 -1000)) (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 2))))","(fma.f64 (cbrt.f64 1000) (*.f64 x x) (cbrt.f64 1000))","(+.f64 (*.f64 -1 (cbrt.f64 -1000)) (+.f64 (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 4))) (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 2)))))","(*.f64 (cbrt.f64 1000) (+.f64 1 (+.f64 (pow.f64 x 4) (*.f64 x x))))","(+.f64 (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 6))) (+.f64 (*.f64 -1 (cbrt.f64 -1000)) (+.f64 (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 4))) (*.f64 -1 (*.f64 (cbrt.f64 -1000) (pow.f64 x 2))))))","(+.f64 (*.f64 (cbrt.f64 1000) (+.f64 (pow.f64 x 6) (+.f64 (pow.f64 x 4) (*.f64 x x)))) (cbrt.f64 1000))","(/.f64 (cbrt.f64 -1000) (pow.f64 x 2))","(*.f64 (cbrt.f64 -1000) (pow.f64 x -2))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1000) (+.f64 (pow.f64 x -2) (pow.f64 x -4)))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 6)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2))))","(*.f64 (cbrt.f64 -1000) (+.f64 (+.f64 (pow.f64 x -2) (pow.f64 x -4)) (pow.f64 x -6)))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 6)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 8)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2)))))","(*.f64 (cbrt.f64 -1000) (+.f64 (+.f64 (pow.f64 x -6) (pow.f64 x -8)) (+.f64 (pow.f64 x -2) (pow.f64 x -4))))","(/.f64 (cbrt.f64 -1000) (pow.f64 x 2))","(*.f64 (cbrt.f64 -1000) (pow.f64 x -2))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2)))","(*.f64 (cbrt.f64 -1000) (+.f64 (pow.f64 x -2) (pow.f64 x -4)))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 6)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2))))","(*.f64 (cbrt.f64 -1000) (+.f64 (+.f64 (pow.f64 x -2) (pow.f64 x -4)) (pow.f64 x -6)))","(+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 6)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 8)) (+.f64 (/.f64 (cbrt.f64 -1000) (pow.f64 x 4)) (/.f64 (cbrt.f64 -1000) (pow.f64 x 2)))))","(*.f64 (cbrt.f64 -1000) (+.f64 (+.f64 (pow.f64 x -6) (pow.f64 x -8)) (+.f64 (pow.f64 x -2) (pow.f64 x -4))))"]],"time":68.803955078125,"type":"simplify"},{"compiler":[[1433,1109]],"time":23.47509765625,"type":"eval"},{"alts":[["(/.f64 (/.f64 (cbrt.f64 100) (cbrt.f64 (cbrt.f64 -1/10))) (*.f64 (cbrt.f64 (cbrt.f64 1/100)) (fma.f64 x x -1)))","fresh",0.375],["(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)","fresh",0.340507519536884],["(/.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10))) (cbrt.f64 (cbrt.f64 1/100)))","fresh",0.45445253907376815],["(/.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2) -10)) (cbrt.f64 (fma.f64 x x -1)))","fresh",0.37242128907376804],["(/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))","done",0.23046875],["(/.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))","done",0.3444137695368841],["(/.f64 (/.f64 -10 (+.f64 x 1)) (+.f64 x -1))","fresh",0.38023378907376804]],"compiler":[[16,14],[9,7],[16,14],[18,14],[10,8],[11,9],[10,8]],"count":[[124,7]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[117,2],"picked":[1,1]}],"min-error":[0],"time":16.64892578125,"type":"prune"},{"accuracy":[0.23046875],"baseline":[0.23046875],"branch":[["x",0.23046875,1],["(/.f64 10 (-.f64 1 (*.f64 x x)))",0.23046875,1],["(-.f64 1 (*.f64 x x))",0.23046875,1],["(*.f64 x x)",0.23046875,1]],"compiler":[[2,1],[8,6],[6,4],[4,2],[223,168]],"count":[[19,1]],"inputs":[["(*.f64 (/.f64 1 (fma.f64 x x -1)) -10)","(/.f64 (/.f64 -10 (+.f64 x 1)) (+.f64 x -1))","(/.f64 (/.f64 (/.f64 (cbrt.f64 100) (fma.f64 x x -1)) (cbrt.f64 (cbrt.f64 -1/10))) (cbrt.f64 (cbrt.f64 1/100)))","(/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))","(*.f64 (/.f64 1 (fma.f64 x x -1)) (cbrt.f64 (/.f64 100 -1/10)))","(/.f64 (/.f64 (cbrt.f64 100) (cbrt.f64 (cbrt.f64 -1/10))) (*.f64 (cbrt.f64 (cbrt.f64 1/100)) (fma.f64 x x -1)))","(*.f64 10 (/.f64 (-.f64 (*.f64 0 (fma.f64 x x -1)) (fma.f64 x x -1)) (pow.f64 (fma.f64 x x -1) 2)))","(*.f64 10 (/.f64 (-.f64 (*.f64 0 (-.f64 1 (*.f64 x x))) (-.f64 1 (*.f64 x x))) (*.f64 (fma.f64 x x -1) (-.f64 1 (*.f64 x x)))))","(/.f64 1 (/.f64 (fma.f64 x x -1) -10))","(/.f64 (/.f64 -1 (fma.f64 x x -1)) 1/10)","(/.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2/3) (cbrt.f64 -10)) (cbrt.f64 (fma.f64 x x -1)))","(pow.f64 (cbrt.f64 (/.f64 -10 (fma.f64 x x -1))) 3)","(*.f64 10 (/.f64 -1 (fma.f64 x x -1)))","(/.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 -10 (fma.f64 x x -1)) 2) -10)) (cbrt.f64 (fma.f64 x x -1)))","(/.f64 (cbrt.f64 100) (*.f64 (fma.f64 x x -1) (cbrt.f64 -1/10)))","(/.f64 (/.f64 -10 (+.f64 x 1)) (+.f64 x -1))","(*.f64 (/.f64 (cbrt.f64 -10) (fma.f64 x x -1)) (cbrt.f64 100))","(/.f64 -10 (fma.f64 x x -1))","(/.f64 10 (-.f64 1 (*.f64 x x)))"]],"link":["."],"name":["ENA, Section 1.4, Mentioned, B"],"oracle":[26.605971065952357],"outputs":[["(/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))"]],"time":30.677001953125,"times":[["x",6.31396484375],["(/.f64 10 (-.f64 1 (*.f64 x x)))",6.4541015625],["(-.f64 1 (*.f64 x x))",6.51904296875],["(*.f64 x x)",6.784912109375]],"type":"regimes"},{"compiler":[[10,8]],"inputs":[["(/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (cbrt.f64 (/.f64 100 -1/10)) (fma.f64 x x -1))","(/.f64 -10 (fma.f64 x x -1))"]],"stop":[["fuel",1]],"time":20.298095703125,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[10,8]],"remove-preprocessing":[[]],"time":9.18994140625,"type":"end"}]
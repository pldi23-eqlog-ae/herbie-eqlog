[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.343017578125,"type":"analyze"},{"outcomes":[["body",256,"valid",245.781982421875,8256]],"time":253.093017578125,"type":"sample"},{"compiler":[[8,5]],"inputs":[["0"],["(/.f64 x (+.f64 (*.f64 x x) 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 x (+.f64 (*.f64 x x) 1))","(/.f64 x (fma.f64 x x 1))"]],"symmetry":[[]],"time":52.97900390625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 x (+.f64 (*.f64 x x) 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (+.f64 (*.f64 x x) 1))","(/.f64 x (fma.f64 x x 1))"]],"time":18.926025390625,"type":"simplify"},{"compiler":[[14,8]],"time":0.31298828125,"type":"eval"},{"alts":[["(/.f64 x (fma.f64 x x 1))","next",13.932598847809244]],"compiler":[[7,4],[7,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[13.932598847809244],"time":0.788818359375,"type":"prune"},{"compiler":[[13,7]],"locations":[["(/.f64 x (fma.f64 x x 1))",13.932598847809246,true]],"time":3.52001953125,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 x (fma.f64 x x 1))","x","-inf",0.367919921875],["(/.f64 x (fma.f64 x x 1))","x","inf",0.39697265625],["(/.f64 x (fma.f64 x x 1))","x","0",0.39111328125]],"time":1.2041015625,"type":"series"},{"count":[[1,58]],"inputs":[["(/.f64 x (fma.f64 x x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (fma.f64 x x 1)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 x (-.f64 -1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (pow.f64 x 2/3) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (fma.f64 x x 1))) (pow.f64 (/.f64 x (fma.f64 x x 1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2/3) (cbrt.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 x 2/3) (fma.f64 x x 1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 x (fma.f64 x x 1)))) (pow.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 -1 (*.f64 x x)) -1/3) (*.f64 (neg.f64 (pow.f64 (fma.f64 x x 1) -2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 x (fma.f64 x x 1))) 4)) (cbrt.f64 (/.f64 x (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (-.f64 -1 (*.f64 x x)))) (neg.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 -1 (*.f64 x x)) -1/3) (*.f64 x (neg.f64 (pow.f64 (fma.f64 x x 1) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x 1) -1/3) (*.f64 x (pow.f64 (fma.f64 x x 1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (pow.f64 (fma.f64 x x 1) -2/3)) (cbrt.f64 (/.f64 (*.f64 x x) (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x x) (fma.f64 x x 1))) (*.f64 (cbrt.f64 x) (pow.f64 (fma.f64 x x 1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 -1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 x x 1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 (fma.f64 x x 1) -2/3)) (pow.f64 (fma.f64 x x 1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x 1) -1/3) (*.f64 (pow.f64 (fma.f64 x x 1) -2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 2/3)) (/.f64 (pow.f64 x 2/3) (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (fma.f64 x x 1) -2/3)) (/.f64 x (cbrt.f64 (-.f64 -1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 x (-.f64 -1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (-.f64 -1 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (fma.f64 x x 1)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (-.f64 -1 (*.f64 x x)))) (neg.f64 (pow.f64 (fma.f64 x x 1) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (cbrt.f64 (fma.f64 x x 1))) (cbrt.f64 (pow.f64 (fma.f64 x x 1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 x x 1) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2/3) (cbrt.f64 (neg.f64 x))) (pow.f64 (-.f64 -1 (*.f64 x x)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2/3) (*.f64 0 (cbrt.f64 (/.f64 x (-.f64 -1 (*.f64 x x))))))) (cbrt.f64 (/.f64 x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (pow.f64 x 2/3) (-.f64 -1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x 2/3)) (/.f64 (cbrt.f64 x) (-.f64 -1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (/.f64 (cbrt.f64 x) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (fma.f64 x x 1) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (fma.f64 x x 1)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x 1) -2/3) (/.f64 x (cbrt.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 (pow.f64 (fma.f64 x x 1) -2/3))) (cbrt.f64 (-.f64 -1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x (cbrt.f64 (fma.f64 x x 1))) (cbrt.f64 (pow.f64 (fma.f64 x x 1) 2/3)))) (neg.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (-.f64 -1 (*.f64 x x)))) (neg.f64 (pow.f64 (fma.f64 x x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2) (/.f64 x (cbrt.f64 (fma.f64 x x 1))))) (cbrt.f64 (pow.f64 (fma.f64 x x 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2) (neg.f64 x))) (cbrt.f64 (-.f64 -1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (pow.f64 (fma.f64 x x 1) -2/3)) (cbrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (cbrt.f64 (fma.f64 x x 1))) (cbrt.f64 (pow.f64 (fma.f64 x x 1) 2/3))) (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (fma.f64 x x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (-.f64 -1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (fma.f64 x x 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2/3) (cbrt.f64 (neg.f64 x))) (cbrt.f64 (-.f64 -1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (-.f64 -1 (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 2/3) (cbrt.f64 (neg.f64 x)))) (cbrt.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (fma.f64 x x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 x (-.f64 -1 (*.f64 x x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (-.f64 -1 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (fma.f64 x x 1)) 3))))))"]],"rules":[["egg-rr",58]],"time":40.7509765625,"type":"rewrite"},{"count":[[70,72]],"inputs":[["x","(+.f64 (*.f64 -1 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) (+.f64 (*.f64 -1 (pow.f64 x 7)) x)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (pow.f64 x 3)) x)","(-.f64 x (pow.f64 x 3))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) (+.f64 (*.f64 -1 (pow.f64 x 7)) x)))","(-.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) (pow.f64 x 7))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (pow.f64 x -3))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (pow.f64 x -5) (/.f64 1 x)) (pow.f64 x -3))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))","(-.f64 (+.f64 (pow.f64 x -5) (/.f64 1 x)) (+.f64 (pow.f64 x -3) (pow.f64 x -7)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (pow.f64 x -3))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 3)))","(-.f64 (+.f64 (pow.f64 x -5) (/.f64 1 x)) (pow.f64 x -3))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 7))))","(-.f64 (+.f64 (pow.f64 x -5) (/.f64 1 x)) (+.f64 (pow.f64 x -3) (pow.f64 x -7)))"]],"time":65.2119140625,"type":"simplify"},{"compiler":[[960,615]],"time":13.93212890625,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 x) (pow.f64 x -3))","next",31.626819748790457],["(/.f64 x (fma.f64 x x 1))","done",13.932598847809244],["(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","fresh",31.932740132398063]],"compiler":[[8,6],[7,4],[10,7],[8,6],[10,7]],"count":[[73,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[72,2],"picked":[1,1]}],"min-error":[0.00390625],"time":9.498046875,"type":"prune"},{"compiler":[[17,12]],"locations":[["(pow.f64 x -3)",0.00390625,true],["(-.f64 (/.f64 1 x) (pow.f64 x -3))",0.01171875,true]],"time":4.822021484375,"type":"localize"},{"count":[[2,24]],"series":[["(pow.f64 x -3)","x","-inf",0.4169921875],["(pow.f64 x -3)","x","inf",0.341064453125],["(pow.f64 x -3)","x","0",0.286865234375],["(-.f64 (/.f64 1 x) (pow.f64 x -3))","x","-inf",0.55810546875],["(-.f64 (/.f64 1 x) (pow.f64 x -3))","x","inf",0.305908203125],["(-.f64 (/.f64 1 x) (pow.f64 x -3))","x","0",0.463134765625]],"time":2.447021484375,"type":"series"},{"count":[[2,96]],"inputs":[["(-.f64 (/.f64 1 x) (pow.f64 x -3))","(pow.f64 x -3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) 0) (-.f64 (/.f64 1 x) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) (*.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (/.f64 1 x) (pow.f64 x -3))) (-.f64 (/.f64 1 x) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) (*.f64 0 (-.f64 (/.f64 1 x) (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 x) (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 x -3)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (/.f64 1 x) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 x) (pow.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (neg.f64 (pow.f64 x -3)) 0) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 x -3)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (pow.f64 x -3) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (/.f64 -1 x) (neg.f64 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (+.f64 (pow.f64 x -3) (/.f64 -1 x)))) (pow.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 x -2)) (+.f64 (pow.f64 x -2) (cbrt.f64 (pow.f64 x -4)))) (-.f64 (pow.f64 x -1/3) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3))) (pow.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) 2/3) (cbrt.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 x -3) (/.f64 -1 x))) (neg.f64 (pow.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (pow.f64 x -3) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x -3) (/.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (/.f64 -1 x) (neg.f64 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 1 x) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (pow.f64 x -3) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (pow.f64 x -3) (/.f64 -1 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 1 x) (pow.f64 x -3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) (neg.f64 (pow.f64 x -2)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 x) (pow.f64 x -2) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/3) (cbrt.f64 (pow.f64 x -2)) (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x -2)) (pow.f64 x -1/3) (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 x -1/3)) (neg.f64 (cbrt.f64 (pow.f64 x -2))) (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (/.f64 1 x) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (/.f64 1 x) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (/.f64 1 x) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 x -3) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (/.f64 1 x) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (/.f64 1 x) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 x) (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 x) (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) 1 (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 x -3)) (/.f64 1 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 x -3) 0) (pow.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -3) (*.f64 (pow.f64 x -3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 x -3)) (pow.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -3) (*.f64 0 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 x 3))) (/.f64 1 (neg.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 x -3) (/.f64 0 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (pow.f64 x 3)) (/.f64 -1 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -2) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (/.f64 -1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (pow.f64 (neg.f64 (cbrt.f64 (pow.f64 x -2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 -1 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) -1) (*.f64 (pow.f64 x 2/3) (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (/.f64 -1 x)) (*.f64 (pow.f64 x 2/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 x) (pow.f64 x -1/3)) (*.f64 (neg.f64 x) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 x -2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 x) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -2) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) (pow.f64 x -1/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -2) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (pow.f64 x -2)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 x -4)) (*.f64 (pow.f64 x 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -1/3) (*.f64 (pow.f64 x 2/3) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 x -1/3)) (*.f64 (neg.f64 (*.f64 x x)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -1/3) (*.f64 (*.f64 x x) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 x -4)) (*.f64 x (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 x (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (neg.f64 x) (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (neg.f64 (*.f64 x x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 x -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (pow.f64 x 3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (neg.f64 (pow.f64 x 3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (/.f64 (neg.f64 (pow.f64 x 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x -9) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (neg.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 -1 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 x -9))))))"]],"rules":[["egg-rr",52],["egg-rr",44]],"time":28.712890625,"type":"rewrite"},{"count":[[120,100]],"inputs":[["(/.f64 -1 (pow.f64 x 3))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(/.f64 1 (pow.f64 x 3))","(/.f64 1 (pow.f64 x 3))","(/.f64 1 (pow.f64 x 3))","(/.f64 1 (pow.f64 x 3))","(/.f64 1 (pow.f64 x 3))","(/.f64 1 (pow.f64 x 3))","(/.f64 1 (pow.f64 x 3))","(/.f64 1 (pow.f64 x 3))","(/.f64 1 (pow.f64 x 3))","(/.f64 1 (pow.f64 x 3))","(/.f64 1 (pow.f64 x 3))","(/.f64 1 (pow.f64 x 3))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1 (pow.f64 x 3))","(neg.f64 (pow.f64 x -3))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (pow.f64 x -3))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (pow.f64 x -3))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (pow.f64 x -3))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (pow.f64 x -3))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (pow.f64 x -3))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (pow.f64 x -3))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (pow.f64 x -3))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (pow.f64 x -3))","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (pow.f64 x -3))","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)","(/.f64 1 (pow.f64 x 3))","(pow.f64 x -3)"]],"time":78.135009765625,"type":"simplify"},{"compiler":[[1149,851]],"time":16.701904296875,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 x) (pow.f64 x -3))","done",31.626819748790457],["(/.f64 x (fma.f64 x x 1))","done",13.932598847809244],["(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","next",31.932740132398063]],"compiler":[[8,6],[7,4],[10,7],[10,7]],"count":[[103,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[100,0],"picked":[1,1]}],"min-error":[0.00390625],"time":16.648193359375,"type":"prune"},{"compiler":[[24,16]],"locations":[["(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))",17.128817490698864,true]],"time":7.040771484375,"type":"localize"},{"count":[[1,12]],"series":[["(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","x","-inf",0.322998046875],["(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","x","inf",0.3310546875],["(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","x","0",0.27099609375]],"time":0.97021484375,"type":"series"},{"count":[[1,67]],"inputs":[["(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) 0) (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) (*.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))) (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) (*.f64 0 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x 5) (-.f64 x (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (pow.f64 x 5) x) (neg.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (pow.f64 x 3)) (pow.f64 x 5))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (-.f64 (pow.f64 x 5) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 x 5) (pow.f64 x 3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 0 (-.f64 (pow.f64 x 3) (pow.f64 x 5))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 (pow.f64 x 5) (pow.f64 x 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (pow.f64 x 3) (+.f64 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 (pow.f64 x 3) (pow.f64 x 5)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (pow.f64 x 3)) (neg.f64 (+.f64 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 x 5) (-.f64 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 (pow.f64 x 5) x) 0) (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (pow.f64 x 3) (+.f64 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 3) (+.f64 (pow.f64 x 5) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (+.f64 (pow.f64 x 5) x)) (neg.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (-.f64 (pow.f64 x 3) (+.f64 (pow.f64 x 5) x)))) (cbrt.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (+.f64 (pow.f64 x 5) x) 2)) (+.f64 (*.f64 x x) (*.f64 (cbrt.f64 (+.f64 (pow.f64 x 5) x)) x))) (-.f64 (cbrt.f64 (+.f64 (pow.f64 x 5) x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))) (cbrt.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) 2)) (cbrt.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (pow.f64 x 3) (+.f64 (pow.f64 x 5) x))) (neg.f64 (cbrt.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (pow.f64 x 3) (+.f64 (pow.f64 x 5) x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 (pow.f64 x 3) (+.f64 (pow.f64 x 5) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 5)) (cbrt.f64 (pow.f64 x 10)) (-.f64 x (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (pow.f64 x 3))) (cbrt.f64 (pow.f64 (-.f64 x (pow.f64 x 3)) 2)) (pow.f64 x 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 1 (*.f64 x x)) (pow.f64 x 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (*.f64 x x)) x (+.f64 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 (*.f64 x x)) (+.f64 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (neg.f64 x) (+.f64 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (*.f64 x x) (+.f64 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (-.f64 (pow.f64 x 5) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (-.f64 (pow.f64 x 5) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (-.f64 (pow.f64 x 5) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (+.f64 (pow.f64 x 5) x)) (neg.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (pow.f64 x 5)) (-.f64 x (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 10)) (cbrt.f64 (pow.f64 x 5)) (-.f64 x (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 (pow.f64 x 5) x)) (cbrt.f64 (pow.f64 (+.f64 (pow.f64 x 5) x) 2)) (neg.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 (pow.f64 x 5) x) (neg.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 x 5) (-.f64 x (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (pow.f64 x 3)) (pow.f64 x 5))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 x 3) (+.f64 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (-.f64 (pow.f64 x 5) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (-.f64 (pow.f64 x 5) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 5) x) 1 (neg.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 (pow.f64 x 5) x) 2)) (cbrt.f64 (+.f64 (pow.f64 x 5) x)) (neg.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 5) 1 (-.f64 x (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)))))))"]],"rules":[["egg-rr",67]],"time":21.413818359375,"type":"rewrite"},{"count":[[79,74]],"inputs":[["x","(+.f64 (*.f64 -1 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(pow.f64 x 5)","(+.f64 (*.f64 -1 (pow.f64 x 3)) (pow.f64 x 5))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(pow.f64 x 5)","(+.f64 (*.f64 -1 (pow.f64 x 3)) (pow.f64 x 5))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (pow.f64 x 3)) x)","(-.f64 x (pow.f64 x 3))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","(pow.f64 x 5)","(+.f64 (*.f64 -1 (pow.f64 x 3)) (pow.f64 x 5))","(-.f64 (pow.f64 x 5) (pow.f64 x 3))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","(pow.f64 x 5)","(+.f64 (*.f64 -1 (pow.f64 x 3)) (pow.f64 x 5))","(-.f64 (pow.f64 x 5) (pow.f64 x 3))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 (pow.f64 x 5) x))","(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))"]],"time":48.905029296875,"type":"simplify"},{"compiler":[[920,642]],"time":13.56103515625,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 x) (pow.f64 x -3))","done",31.626819748790457],["(/.f64 x (fma.f64 x x 1))","done",13.932598847809244],["(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","done",31.932740132398063]],"compiler":[[8,6],[7,4],[10,7]],"count":[[77,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[74,0],"picked":[1,1]}],"min-error":[0.00390625],"time":10.4560546875,"type":"prune"},{"accuracy":[0.0078125],"baseline":[13.932598847809244],"branch":[["x",0.0078125,3],["(/.f64 x (+.f64 (*.f64 x x) 1))",0.07421875,3]],"compiler":[[2,1],[8,5],[30,19]],"count":[[4,3]],"inputs":[["(-.f64 (/.f64 1 x) (pow.f64 x -3))","(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","(/.f64 x (fma.f64 x x 1))","(/.f64 x (+.f64 (*.f64 x x) 1))"]],"link":["."],"name":["x / (x^2 + 1)"],"oracle":[63.551747381188534],"outputs":[["(-.f64 (/.f64 1 x) (pow.f64 x -3))","(-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3))","(-.f64 (/.f64 1 x) (pow.f64 x -3))"]],"time":16.720947265625,"times":[["x",8.469970703125],["(/.f64 x (+.f64 (*.f64 x x) 1))",7.402099609375]],"type":"regimes"},{"bstep":[[9.544882123799739e-5,210355.99389088576,6.817138671875],[-6040261615.299245,-0.0004592680025136355,6.93310546875]],"compiler":[[10,7],[2,1]],"method":["binary-search","binary-search"],"time":13.8330078125,"type":"bsearch"},{"compiler":[[32,23]],"inputs":[["(if (<=.f64 x -6333673363524021/1048576) (-.f64 (/.f64 1 x) (pow.f64 x -3)) (if (<=.f64 x 7042879910058363/73786976294838206464) (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) (-.f64 (/.f64 1 x) (pow.f64 x -3))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x -6333673363524021/1048576) (-.f64 (/.f64 1 x) (pow.f64 x -3)) (if (<=.f64 x 7042879910058363/73786976294838206464) (-.f64 (+.f64 (pow.f64 x 5) x) (pow.f64 x 3)) (-.f64 (/.f64 1 x) (pow.f64 x -3))))"]],"stop":[["done",1]],"time":22.091064453125,"type":"simplify"},{"time":0.02197265625,"type":"soundness"},{"compiler":[[32,23]],"remove-preprocessing":[[]],"time":14.81689453125,"type":"end"}]
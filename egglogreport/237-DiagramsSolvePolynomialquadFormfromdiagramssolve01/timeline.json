[{"compiler":[[14,11]],"method":["search"],"sampling":[[12,0.2866890099496686,0.3373959096686576,0.37591508038167376],[11,0.24573343709971596,0.3783514825186103,0.37591508038167376],[10,0.2106286603711851,0.41345625924714113,0.37591508038167376],[9,0.1404191069141234,0.6084827966278681,0.2510980964580085],[8,0.09361273794274894,0.6552891655992426,0.2510980964580085],[7,0.062408491961832624,0.6864934115801589,0.2510980964580085],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":76.391845703125,"type":"analyze"},{"outcomes":[["body",256,"invalid",119.53564453125,2736],["body",256,"valid",384.49951171875,8256]],"time":514.47607421875,"type":"sample"},{"compiler":[[13,10]],"inputs":[["0","1","2"],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","(*.f64 (/.f64 1 2) (+.f64 y (*.f64 x (sqrt.f64 z))))","(*.f64 (/.f64 1 2) (+.f64 z (*.f64 y (sqrt.f64 x))))","(*.f64 (/.f64 1 2) (+.f64 x (*.f64 z (sqrt.f64 y))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","(*.f64 1/2 (fma.f64 y (sqrt.f64 z) x))","(*.f64 (/.f64 1 2) (+.f64 y (*.f64 x (sqrt.f64 z))))","(*.f64 1/2 (fma.f64 x (sqrt.f64 z) y))","(*.f64 (/.f64 1 2) (+.f64 z (*.f64 y (sqrt.f64 x))))","(*.f64 1/2 (fma.f64 (sqrt.f64 x) y z))","(*.f64 (/.f64 1 2) (+.f64 x (*.f64 z (sqrt.f64 y))))","(*.f64 1/2 (fma.f64 (sqrt.f64 y) z x))"]],"symmetry":[[]],"time":72.514892578125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","(*.f64 1/2 (fma.f64 (sqrt.f64 z) y x))"]],"time":19.43798828125,"type":"simplify"},{"compiler":[[20,13]],"time":0.404052734375,"type":"eval"},{"alts":[["(*.f64 1/2 (fma.f64 (sqrt.f64 z) y x))","fresh",0.11328125],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","next",0.11328125]],"compiler":[[10,7],[13,10],[10,7],[13,10]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.109375],"time":1.34716796875,"type":"prune"},{"compiler":[[33,15]],"locations":[["(+.f64 x (*.f64 y (sqrt.f64 z)))",0.01171875,true],["(*.f64 y (sqrt.f64 z))",0.25,true]],"time":7.574951171875,"type":"localize"},{"count":[[2,25]],"series":[["(+.f64 x (*.f64 y (sqrt.f64 z)))","z","-inf",0.2890625],["(+.f64 x (*.f64 y (sqrt.f64 z)))","z","inf",0.27001953125],["(+.f64 x (*.f64 y (sqrt.f64 z)))","z","0",0.256103515625],["(+.f64 x (*.f64 y (sqrt.f64 z)))","y","-inf",0.156005859375],["(+.f64 x (*.f64 y (sqrt.f64 z)))","y","inf",0.18115234375],["(+.f64 x (*.f64 y (sqrt.f64 z)))","y","0",0.157958984375],["(+.f64 x (*.f64 y (sqrt.f64 z)))","x","-inf",0.197998046875],["(+.f64 x (*.f64 y (sqrt.f64 z)))","x","inf",0.2080078125],["(+.f64 x (*.f64 y (sqrt.f64 z)))","x","0",0.27294921875],["(*.f64 y (sqrt.f64 z))","z","-inf",0.512939453125],["(*.f64 y (sqrt.f64 z))","z","inf",0.3291015625],["(*.f64 y (sqrt.f64 z))","z","0",0.6728515625],["(*.f64 y (sqrt.f64 z))","y","-inf",0.2939453125],["(*.f64 y (sqrt.f64 z))","y","inf",0.45703125],["(*.f64 y (sqrt.f64 z))","y","0",0.544921875]],"time":4.96484375,"type":"series"},{"count":[[2,74]],"inputs":[["(*.f64 y (sqrt.f64 z))","(+.f64 x (*.f64 y (sqrt.f64 z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 z)) (*.f64 (*.f64 y (sqrt.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (sqrt.f64 z)) 1/2) (*.f64 (*.f64 y (sqrt.f64 z)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (sqrt.f64 z)) 0) (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 z)) (*.f64 0 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 y (sqrt.f64 z))) (*.f64 1/2 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (sqrt.f64 z))) (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 z) y) (cbrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) (cbrt.f64 (*.f64 z (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 (*.f64 y (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (sqrt.f64 (sqrt.f64 z))) (sqrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 z)) (*.f64 y (sqrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 y) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (sqrt.f64 z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (sqrt.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 y (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 y) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (sqrt.f64 z)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 z) y x) (*.f64 (fma.f64 (sqrt.f64 z) y x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 z) y x) 1/2) (*.f64 (fma.f64 (sqrt.f64 z) y x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 z) y x) 0) (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 z) y x) (*.f64 0 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (sqrt.f64 z) y x)) (*.f64 1/2 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (sqrt.f64 z) y x)) (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (sqrt.f64 z) y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 (*.f64 (*.f64 x y) (sqrt.f64 z))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 (*.f64 x y) (sqrt.f64 z))))) (+.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 2)) (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (sqrt.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) (cbrt.f64 (*.f64 z (*.f64 y y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 (sqrt.f64 z))) (sqrt.f64 (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (*.f64 y y))) (cbrt.f64 (*.f64 y (sqrt.f64 z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (neg.f64 y) (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sqrt.f64 z)) (*.f64 y (sqrt.f64 (sqrt.f64 z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 z)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y (sqrt.f64 z)))))))"]],"rules":[["egg-rr",42],["egg-rr",32]],"time":23.01904296875,"type":"rewrite"},{"count":[[99,75]],"inputs":[["(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","x"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x"]],"time":78.248046875,"type":"simplify"},{"compiler":[[1080,520]],"time":11.527099609375,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 2) (fma.f64 (sqrt.f64 (sqrt.f64 z)) (*.f64 y (sqrt.f64 (sqrt.f64 z))) x))","fresh",0.27380756837909415],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","done",0.11328125],["(*.f64 (/.f64 1 2) (fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x))","next",0.16863251953688402],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (cbrt.f64 y))))","fresh",16.675425169199166],["(*.f64 (/.f64 1 2) (+.f64 x (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)))","fresh",0.3139039062950723]],"compiler":[[17,11],[13,10],[16,12],[19,14],[16,13],[17,11],[16,12],[19,14],[16,13]],"count":[[77,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[75,4],"picked":[1,1]}],"min-error":[0.0234375],"time":18.080810546875,"type":"prune"},{"compiler":[[44,17]],"locations":[["(cbrt.f64 z)",0.0703125,true],["(cbrt.f64 (sqrt.f64 z))",0.12109375,true],["(fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)",0.142910009768442,true],["(*.f64 (cbrt.f64 z) y)",0.24609375,true]],"time":9.14111328125,"type":"localize"},{"count":[[4,47]],"series":[["(cbrt.f64 z)","z","-inf",3.85009765625],["(cbrt.f64 z)","z","inf",0.35302734375],["(cbrt.f64 z)","z","0",0.264892578125],["(cbrt.f64 (sqrt.f64 z))","z","-inf",1.136962890625],["(cbrt.f64 (sqrt.f64 z))","z","inf",4.39892578125],["(cbrt.f64 (sqrt.f64 z))","z","0",13.18603515625],["(fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)","x","-inf",0.26806640625],["(fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)","x","inf",0.166015625],["(fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)","x","0",1.468017578125],["(fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)","y","-inf",0.27294921875],["(fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)","y","inf",0.22412109375],["(fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)","y","0",4.177001953125],["(fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)","z","-inf",0.739990234375],["(fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)","z","inf",0.473876953125],["(fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)","z","0",0.489990234375],["(*.f64 (cbrt.f64 z) y)","y","-inf",0.2890625],["(*.f64 (cbrt.f64 z) y)","y","inf",0.31396484375],["(*.f64 (cbrt.f64 z) y)","y","0",1.5390625],["(*.f64 (cbrt.f64 z) y)","z","-inf",0.703125],["(*.f64 (cbrt.f64 z) y)","z","inf",0.416015625],["(*.f64 (cbrt.f64 z) y)","z","0",0.4990234375]],"time":35.47705078125,"type":"series"},{"count":[[4,120]],"inputs":[["(*.f64 (cbrt.f64 z) y)","(fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)","(cbrt.f64 (sqrt.f64 z))","(cbrt.f64 z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 z) y) 1/2) (*.f64 (*.f64 (cbrt.f64 z) y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 z) y) (*.f64 (*.f64 (cbrt.f64 z) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 z) y) 0) (*.f64 (cbrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cbrt.f64 z) y)) (*.f64 1/2 (*.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 z) y) (*.f64 0 (*.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 z) y)) (*.f64 (cbrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 y y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y y) z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 z) y)) (pow.f64 (*.f64 (cbrt.f64 z) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 z) y) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 (pow.f64 z 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 z 2/3)) y) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 2/3)) (*.f64 y (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 z) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 z) y x) 1/2) (*.f64 (fma.f64 (sqrt.f64 z) y x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 z) y x) (*.f64 (fma.f64 (sqrt.f64 z) y x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 z) y x) 0) (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (sqrt.f64 z) y x)) (*.f64 1/2 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 z) y x) (*.f64 0 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (sqrt.f64 z) y x)) (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) (pow.f64 (fma.f64 (sqrt.f64 z) y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 2/3) (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (sqrt.f64 z) y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 z) y)) (cbrt.f64 (*.f64 z (*.f64 y y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 z) (*.f64 (cbrt.f64 z) y))) (pow.f64 (*.f64 (cbrt.f64 z) y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 z) y) (cbrt.f64 (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z 1/18) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 z)) y) (cbrt.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 z) y) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 z) y) x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 z)) 1/2) (*.f64 (cbrt.f64 (sqrt.f64 z)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 (sqrt.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 z)) 0) (cbrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (sqrt.f64 z))) (*.f64 1/2 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 0 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/12) (pow.f64 z 1/12))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 z 1/12)) (*.f64 -1 (pow.f64 z 1/12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/18) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 1/18)) (cbrt.f64 (pow.f64 (cbrt.f64 z) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (pow.f64 z 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 1/12) 1) (*.f64 (pow.f64 z 1/12) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 1/12) -1) (*.f64 (pow.f64 z 1/12) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z z) 1/12)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 z 1/18) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 z)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 z 1/12) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (sqrt.f64 z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 z) 1/2) (*.f64 (cbrt.f64 z) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 z) 0) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 z)) (*.f64 1/2 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 z) (*.f64 0 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 z)) (pow.f64 z 1/12))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/12) (sqrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/18) (cbrt.f64 (pow.f64 z 5/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 5/6)) (pow.f64 z 1/18))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) (neg.f64 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 z)) (cbrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 z 2/3)) (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 2/3)) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 z) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 z)) 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 z 1/18) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z z) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 z)))))"]],"rules":[["egg-rr",30],["egg-rr",28],["egg-rr",34],["egg-rr",28]],"time":33.140869140625,"type":"rewrite"},{"count":[[167,125]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","x","x","x","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)","(pow.f64 z 1/6)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) y)","(*.f64 (cbrt.f64 z) y)","x","x","x","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 y (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(pow.f64 z 1/6)","(cbrt.f64 (sqrt.f64 z))","(pow.f64 z 1/6)","(cbrt.f64 (sqrt.f64 z))","(pow.f64 z 1/6)","(cbrt.f64 (sqrt.f64 z))","(pow.f64 z 1/6)","(cbrt.f64 (sqrt.f64 z))","(pow.f64 z 1/6)","(cbrt.f64 (sqrt.f64 z))","(pow.f64 z 1/6)","(cbrt.f64 (sqrt.f64 z))","(pow.f64 z 1/6)","(cbrt.f64 (sqrt.f64 z))","(pow.f64 z 1/6)","(cbrt.f64 (sqrt.f64 z))"]],"time":141.463134765625,"type":"simplify"},{"compiler":[[2003,1000]],"time":23.404052734375,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 2) (fma.f64 (sqrt.f64 (sqrt.f64 z)) (*.f64 y (sqrt.f64 (sqrt.f64 z))) x))","fresh",0.27380756837909415],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","done",0.11328125],["(*.f64 (/.f64 1 2) (fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x))","done",0.16863251953688402],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (cbrt.f64 y))))","fresh",16.675425169199166],["(*.f64 (/.f64 1 2) (fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x))","next",0.23931508791597814],["(*.f64 (/.f64 1 2) (+.f64 x (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)))","fresh",0.3139039062950723]],"compiler":[[17,11],[13,10],[16,12],[19,14],[24,15],[16,13],[17,11],[19,14],[24,15],[16,13]],"count":[[130,6]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[125,1],"picked":[1,1]}],"min-error":[0.01171875],"time":34.412841796875,"type":"prune"},{"compiler":[[80,20]],"locations":[["(cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))",0.109375,true],["(fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x)",0.142910009768442,true],["(*.f64 (cbrt.f64 z) y)",0.24609375,false],["(*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))))",0.47884750976844204,true]],"time":12.39404296875,"type":"localize"},{"count":[[3,43]],"series":[["(cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))","z","-inf",7.601806640625],["(cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))","z","inf",0.47314453125],["(cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))","z","0",0.442138671875],["(fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x)","x","-inf",0.174072265625],["(fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x)","x","inf",0.20703125],["(fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x)","x","0",1.544921875],["(fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x)","y","-inf",0.27001953125],["(fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x)","y","inf",0.277099609375],["(fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x)","y","0",1.583984375],["(fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x)","z","-inf",0.635986328125],["(fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x)","z","inf",0.39111328125],["(fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x)","z","0",0.405029296875],["(*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))))","z","-inf",0.758056640625],["(*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))))","z","inf",0.346923828125],["(*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))))","z","0",6.159912109375]],"time":21.528076171875,"type":"series"},{"count":[[3,95]],"inputs":[["(*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))))","(fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x)","(cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 z)) 0) (cbrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 (sqrt.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (sqrt.f64 z)) 1/2) (*.f64 (cbrt.f64 (sqrt.f64 z)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 0 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (sqrt.f64 z))) (*.f64 1/2 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))) (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (cbrt.f64 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))) (cbrt.f64 (neg.f64 (*.f64 (cbrt.f64 (sqrt.f64 z)) (sqrt.f64 (sqrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (cbrt.f64 (sqrt.f64 z)) (sqrt.f64 (sqrt.f64 z))))) (cbrt.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/8) (cbrt.f64 (pow.f64 z 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 z)) (sqrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 1/8)) (pow.f64 z 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 z)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z (/.f64 1/3 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z (*.f64 1/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (sqrt.f64 z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 z) y x) 0) (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 z) y x) (*.f64 (fma.f64 (sqrt.f64 z) y x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 z) y x) 1/2) (*.f64 (fma.f64 (sqrt.f64 z) y x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (sqrt.f64 z) y x)) (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 z) y x) (*.f64 0 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (sqrt.f64 z) y x)) (*.f64 1/2 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) (pow.f64 (fma.f64 (sqrt.f64 z) y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 2/3) (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (sqrt.f64 z) y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 z) (*.f64 (cbrt.f64 z) y))) (pow.f64 (*.f64 (cbrt.f64 z) y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 z) y) (cbrt.f64 (sqrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 z) y)) (cbrt.f64 (*.f64 z (*.f64 y y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (sqrt.f64 z)) y) (cbrt.f64 z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) (*.f64 (cbrt.f64 z) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 z) y) 1 x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) 0) (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) 1/2) (*.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))) (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) (*.f64 0 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 1/2 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))))) (cbrt.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 1/8)) (cbrt.f64 (neg.f64 (pow.f64 z 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))) (cbrt.f64 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (cbrt.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 z 1/8))) (cbrt.f64 (pow.f64 z 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))) (cbrt.f64 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 1/8)) (neg.f64 (cbrt.f64 (pow.f64 z 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) (neg.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 z 1/8))) (cbrt.f64 (pow.f64 z 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (*.f64 (cbrt.f64 (sqrt.f64 z)) (sqrt.f64 (sqrt.f64 z)))))) (cbrt.f64 (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))))))"]],"rules":[["egg-rr",28],["egg-rr",35],["egg-rr",32]],"time":28.968017578125,"type":"rewrite"},{"count":[[138,103]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","x","x","x","x","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z))","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z))","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z))","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","x","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","x","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (sqrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (sqrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (sqrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (sqrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (sqrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (sqrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (sqrt.f64 z))","(*.f64 (pow.f64 (*.f64 1 z) 1/6) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (sqrt.f64 z))","x","x","x","x","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z))","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","x","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(+.f64 (*.f64 (*.f64 y (pow.f64 (cbrt.f64 -1) 2)) (sqrt.f64 z)) x)","(fma.f64 y (sqrt.f64 z) x)","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(neg.f64 (pow.f64 z 1/12))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(neg.f64 (pow.f64 z 1/12))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(neg.f64 (pow.f64 z 1/12))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(neg.f64 (pow.f64 z 1/12))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(neg.f64 (pow.f64 z 1/12))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(neg.f64 (pow.f64 z 1/12))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(neg.f64 (pow.f64 z 1/12))","(*.f64 (pow.f64 (*.f64 1 z) 1/12) (cbrt.f64 -1))","(neg.f64 (pow.f64 z 1/12))"]],"time":133.89697265625,"type":"simplify"},{"compiler":[[3401,1317]],"time":28.39892578125,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 2) (fma.f64 (sqrt.f64 (sqrt.f64 z)) (*.f64 y (sqrt.f64 (sqrt.f64 z))) x))","fresh",0.27380756837909415],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","done",0.11328125],["(*.f64 (/.f64 1 2) (fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (*.f64 (cbrt.f64 (pow.f64 z 1/8)) (cbrt.f64 (neg.f64 (pow.f64 z 1/8))))) (*.f64 (cbrt.f64 z) y) x))","fresh",0.26113134768442015],["(*.f64 (/.f64 1 2) (fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x))","done",0.23931508791597814],["(*.f64 (/.f64 1 2) (fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x))","next",0.25626762698974626],["(*.f64 (/.f64 1 2) (+.f64 x (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)))","fresh",0.3139039062950723]],"compiler":[[17,11],[13,10],[29,23],[24,15],[21,15],[16,13],[17,11],[29,23],[21,15],[16,13]],"count":[[168,6]],"kept":[{"done":[2,1],"fresh":[3,2],"new":[162,2],"picked":[1,1]}],"min-error":[0],"time":54.7900390625,"type":"prune"},{"compiler":[[69,20]],"locations":[["(cbrt.f64 (cbrt.f64 (sqrt.f64 z)))",0.12109375,true],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)",0.13671875,true],["(*.f64 (cbrt.f64 z) y)",0.24609375,false],["(*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y))",0.34375,true]],"time":12.22802734375,"type":"localize"},{"count":[[3,64]],"series":[["(cbrt.f64 (cbrt.f64 (sqrt.f64 z)))","z","-inf",0.217041015625],["(cbrt.f64 (cbrt.f64 (sqrt.f64 z)))","z","inf",0.1591796875],["(cbrt.f64 (cbrt.f64 (sqrt.f64 z)))","z","0",0.193115234375],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)","x","-inf",0.1689453125],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)","x","inf",0.174072265625],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)","x","0",1.532958984375],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)","y","-inf",0.297119140625],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)","y","inf",0.23583984375],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)","y","0",0.363037109375],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)","z","-inf",12.01318359375],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)","z","inf",0.544921875],["(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)","z","0",0.531982421875],["(*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y))","y","-inf",0.330078125],["(*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y))","y","inf",0.27783203125],["(*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y))","y","0",22.11181640625],["(*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y))","z","-inf",6.281005859375],["(*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y))","z","inf",5.115966796875],["(*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y))","z","0",5.385986328125]],"time":56.2099609375,"type":"series"},{"count":[[3,101]],"inputs":[["(*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y))","(fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x)","(cbrt.f64 (cbrt.f64 (sqrt.f64 z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) 0) (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) 1/2) (*.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) (*.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)) (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)) (*.f64 1/2 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) (*.f64 0 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 z 4/3) y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 z) y)) (*.f64 (pow.f64 (*.f64 (cbrt.f64 z) y) 2/3) (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (cbrt.f64 z) y) 2/3) (cbrt.f64 (cbrt.f64 z))) (cbrt.f64 (*.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (cbrt.f64 (*.f64 (pow.f64 z 4/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 z) y) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (cbrt.f64 z) y) (pow.f64 z 1/27)) (cbrt.f64 (cbrt.f64 (pow.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 z) y))) (pow.f64 (*.f64 (cbrt.f64 z) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z 4/3)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/27) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 z 2/3))) (*.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (cbrt.f64 (pow.f64 z 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 z 2/3))) (*.f64 (*.f64 (cbrt.f64 z) y) (pow.f64 z 1/27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 z) y) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 z 2/3))) (*.f64 (cbrt.f64 z) y)) (pow.f64 z 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 z)) y) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (cbrt.f64 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 z 4/3) (pow.f64 y 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 z 4/3) (pow.f64 y 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 z) y x) 0) (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (sqrt.f64 z) y x) 1/2) (*.f64 (fma.f64 (sqrt.f64 z) y x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 z) y x) (*.f64 (fma.f64 (sqrt.f64 z) y x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (sqrt.f64 z) y x)) (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 (sqrt.f64 z) y x)) (*.f64 1/2 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 z) y x) (*.f64 0 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (sqrt.f64 z) y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) (pow.f64 (fma.f64 (sqrt.f64 z) y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 2/3) (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (sqrt.f64 z) y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (sqrt.f64 z) y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (sqrt.f64 z) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (sqrt.f64 z) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (sqrt.f64 z) y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y))) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sqrt.f64 z) y)) (cbrt.f64 (*.f64 z (*.f64 y y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 z) y)) (cbrt.f64 (cbrt.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sqrt.f64 z) 1/27) (*.f64 (pow.f64 z 1/27) (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (pow.f64 z 4/3)) y) (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 z) y) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (sqrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (sqrt.f64 z) y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) 0) (cbrt.f64 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) 1/2) (*.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (cbrt.f64 (sqrt.f64 z)))) (cbrt.f64 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (cbrt.f64 (sqrt.f64 z)))) (*.f64 1/2 (cbrt.f64 (cbrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 0 (cbrt.f64 (cbrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 z) 1/27) (pow.f64 z 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (sqrt.f64 z)) 1/9) (pow.f64 (sqrt.f64 (sqrt.f64 z)) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/27) (pow.f64 (sqrt.f64 z) 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sqrt.f64 z) 1/27)) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 z) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 z) 1/27) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z (/.f64 1/9 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 z) 1/27) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z (*.f64 1/2 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 z (*.f64 1/6 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 z) 1/27) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 z)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 z)) (*.f64 2 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (cbrt.f64 (sqrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (cbrt.f64 (sqrt.f64 z)))))))"]],"rules":[["egg-rr",28],["egg-rr",37],["egg-rr",36]],"time":30.299072265625,"type":"rewrite"},{"count":[[165,110]],"inputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/18) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/18) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/18) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/18) (*.f64 y (sqrt.f64 z))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 (pow.f64 1 4) (pow.f64 z 4)) 1/9) (*.f64 y (pow.f64 (pow.f64 (cbrt.f64 -1) 4) 1/3)))","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 z 4)) 1/9) y)","(*.f64 (pow.f64 z 4/9) y)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/18) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/18) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/18) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/18) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z)))","(*.f64 y (sqrt.f64 z))","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","x","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(+.f64 (*.f64 (pow.f64 1 1/6) (*.f64 y (sqrt.f64 z))) x)","(fma.f64 (sqrt.f64 z) y x)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)","(pow.f64 z 1/18)"]],"time":212.298828125,"type":"simplify"},{"compiler":[[2699,1296]],"time":27.003173828125,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 2) (fma.f64 (sqrt.f64 (sqrt.f64 z)) (*.f64 y (sqrt.f64 (sqrt.f64 z))) x))","fresh",0.27380756837909415],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))","done",0.11328125],["(*.f64 (/.f64 1 2) (fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (*.f64 (cbrt.f64 (pow.f64 z 1/8)) (cbrt.f64 (neg.f64 (pow.f64 z 1/8))))) (*.f64 (cbrt.f64 z) y) x))","fresh",0.26113134768442015],["(*.f64 (/.f64 1 2) (fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x))","done",0.23931508791597814],["(*.f64 (/.f64 1 2) (fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x))","done",0.25626762698974626],["(*.f64 (/.f64 1 2) (+.f64 x (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)))","fresh",0.3139039062950723]],"compiler":[[17,11],[13,10],[29,23],[24,15],[21,15],[16,13]],"count":[[145,6]],"kept":[{"done":[2,2],"fresh":[3,3],"new":[139,0],"picked":[1,1]}],"min-error":[0],"time":37.635986328125,"type":"prune"},{"accuracy":[0.11328125],"baseline":[0.11328125],"branch":[["x",0.11328125,1],["y",0.11328125,1],["z",0.11328125,1],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))",0.11328125,1],["(+.f64 x (*.f64 y (sqrt.f64 z)))",0.11328125,1],["(*.f64 y (sqrt.f64 z))",0.11328125,1],["(*.f64 y (sqrt.f64 z))",0.11328125,1],["(sqrt.f64 z)",0.11328125,1]],"compiler":[[4,3],[4,3],[4,3],[13,10],[9,6],[7,5],[7,5],[5,4],[141,76]],"count":[[9,1]],"inputs":[["(*.f64 (/.f64 1 2) (fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (*.f64 (cbrt.f64 (pow.f64 z 1/8)) (cbrt.f64 (neg.f64 (pow.f64 z 1/8))))) (*.f64 (cbrt.f64 z) y) x))","(*.f64 (/.f64 1 2) (fma.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 z))) (*.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 z) y)) x))","(*.f64 (/.f64 1 2) (fma.f64 (*.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z)))) (cbrt.f64 (neg.f64 (sqrt.f64 (sqrt.f64 z))))) (*.f64 (cbrt.f64 z) y) x))","(*.f64 (/.f64 1 2) (fma.f64 (sqrt.f64 (sqrt.f64 z)) (*.f64 y (sqrt.f64 (sqrt.f64 z))) x))","(*.f64 (/.f64 1 2) (fma.f64 (cbrt.f64 (sqrt.f64 z)) (*.f64 (cbrt.f64 z) y) x))","(*.f64 (/.f64 1 2) (+.f64 x (*.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (cbrt.f64 y))))","(*.f64 (/.f64 1 2) (+.f64 x (pow.f64 (cbrt.f64 (*.f64 y (sqrt.f64 z))) 3)))","(*.f64 1/2 (fma.f64 (sqrt.f64 z) y x))","(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))"]],"link":["."],"name":["Diagrams.Solve.Polynomial:quadForm from diagrams-solve-0.1, B"],"oracle":[16.83536408526268],"outputs":[["(*.f64 1/2 (fma.f64 (sqrt.f64 z) y x))"]],"time":36.916015625,"times":[["x",4.421875],["y",4.115966796875],["z",4.31103515625],["(*.f64 (/.f64 1 2) (+.f64 x (*.f64 y (sqrt.f64 z))))",4.31396484375],["(+.f64 x (*.f64 y (sqrt.f64 z)))",4.3291015625],["(*.f64 y (sqrt.f64 z))",4.06494140625],["(*.f64 y (sqrt.f64 z))",4.202880859375],["(sqrt.f64 z)",4.3349609375]],"type":"regimes"},{"compiler":[[10,7]],"inputs":[["(*.f64 1/2 (fma.f64 (sqrt.f64 z) y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (fma.f64 (sqrt.f64 z) y x))"]],"stop":[["fuel",1]],"time":19.52587890625,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[10,7]],"remove-preprocessing":[[]],"time":8.462158203125,"type":"end"}]
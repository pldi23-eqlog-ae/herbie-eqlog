[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.4987797737121582,0.0009760856628417969,0.500244140625],[11,0.4978036880493164,0.0019521713256835938,0.500244140625],[10,0.4958515167236328,0.0039043426513671875,0.500244140625],[9,0.4919471740722656,0.007808685302734375,0.500244140625],[8,0.48413848876953125,0.01561737060546875,0.500244140625],[7,0.4685211181640625,0.0312347412109375,0.500244140625],[6,0.437286376953125,0.062469482421875,0.500244140625],[5,0.37481689453125,0.12493896484375,0.500244140625],[4,0.2498779296875,0.2498779296875,0.500244140625],[3,0.0,0.499755859375,0.500244140625],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.5859375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.051025390625,2],["body",256,"valid",259.47412109375,8256]],"time":267.138916015625,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0"],["(sqrt.f64 (-.f64 1 (*.f64 x x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(sqrt.f64 (-.f64 1 (*.f64 x x)))","(sqrt.f64 (fma.f64 x (neg.f64 x) 1))"]],"symmetry":[[]],"time":51.3310546875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(sqrt.f64 (-.f64 1 (*.f64 x x)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (-.f64 1 (*.f64 x x)))","(sqrt.f64 (fma.f64 x (neg.f64 x) 1))"]],"time":17.525146484375,"type":"simplify"},{"compiler":[[13,9]],"time":0.346923828125,"type":"eval"},{"alts":[["(sqrt.f64 (-.f64 1 (*.f64 x x)))","next",0.00390625]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.786865234375,"type":"prune"},{"compiler":[[17,8]],"locations":[["(sqrt.f64 (-.f64 1 (*.f64 x x)))",0.00390625,true]],"time":3.60205078125,"type":"localize"},{"count":[[1,4]],"series":[["(sqrt.f64 (-.f64 1 (*.f64 x x)))","x","-inf",0.341064453125],["(sqrt.f64 (-.f64 1 (*.f64 x x)))","x","inf",0.552978515625],["(sqrt.f64 (-.f64 1 (*.f64 x x)))","x","0",0.43505859375]],"time":1.403076171875,"type":"series"},{"count":[[1,42]],"inputs":[["(sqrt.f64 (-.f64 1 (*.f64 x x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) 1/2) (*.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) (*.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) 0) (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))) (*.f64 1/2 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) (*.f64 0 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))) (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))) (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))) (cbrt.f64 (fma.f64 x (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (neg.f64 x) 1)) (cbrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))) (fabs.f64 (cbrt.f64 (fma.f64 x (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 x (neg.f64 x) 1))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) (pow.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) 0) (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))) (cbrt.f64 (-.f64 1 (pow.f64 x 6)))) (cbrt.f64 (+.f64 1 (fma.f64 x x (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 6))) (cbrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))) (cbrt.f64 (+.f64 1 (fma.f64 x x (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (neg.f64 x) 1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (neg.f64 x) 1) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (neg.f64 x) 1) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (neg.f64 x) 1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (neg.f64 x) 1) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 x (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (neg.f64 x) 1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 x (neg.f64 x) 1))))))))"]],"rules":[["egg-rr",42]],"time":19.718994140625,"type":"rewrite"},{"count":[[46,49]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/8 (pow.f64 x 4) (*.f64 (*.f64 -1/2 x) x)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 1) (fma.f64 -1/16 (pow.f64 x 6) (*.f64 -1/8 (pow.f64 x 4))))"]],"time":32.885009765625,"type":"simplify"},{"compiler":[[603,403]],"time":9.697021484375,"type":"eval"},{"alts":[["(pow.f64 (fma.f64 x (neg.f64 x) 1) 1/2)","next",0]],"compiler":[[8,6],[8,6]],"count":[[50,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[49,1],"picked":[1,0]}],"min-error":[0],"time":8.81591796875,"type":"prune"},{"compiler":[[18,10]],"time":4.919921875,"type":"localize"},{"compiler":[[1,1]],"time":0.085205078125,"type":"eval"},{"alts":[["(pow.f64 (fma.f64 x (neg.f64 x) 1) 1/2)","done",0]],"compiler":[[8,6]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.48388671875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(sqrt.f64 (-.f64 1 (*.f64 x x)))",0,1],["(-.f64 1 (*.f64 x x))",0,1],["(*.f64 x x)",0,1]],"compiler":[[2,1],[7,5],[6,4],[4,2],[14,10]],"count":[[2,1]],"inputs":[["(pow.f64 (fma.f64 x (neg.f64 x) 1) 1/2)","(sqrt.f64 (-.f64 1 (*.f64 x x)))"]],"link":["."],"name":["Diagrams.TwoD.Ellipse:ellipse from diagrams-lib-1.3.0.3"],"oracle":[0.00390625],"outputs":[["(pow.f64 (fma.f64 x (neg.f64 x) 1) 1/2)"]],"time":7.888916015625,"times":[["x",2.177978515625],["(sqrt.f64 (-.f64 1 (*.f64 x x)))",1.6669921875],["(-.f64 1 (*.f64 x x))",1.64990234375],["(*.f64 x x)",1.81689453125]],"type":"regimes"},{"compiler":[[8,6]],"inputs":[["(pow.f64 (fma.f64 x (neg.f64 x) 1) 1/2)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (fma.f64 x (neg.f64 x) 1) 1/2)","(sqrt.f64 (fma.f64 x (neg.f64 x) 1))"]],"stop":[["done",1]],"time":34.93408203125,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":8.974853515625,"type":"end"}]
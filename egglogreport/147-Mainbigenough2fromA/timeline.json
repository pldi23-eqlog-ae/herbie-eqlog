[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4319837802983102,0.09995252998794513],[11,0.40565519775191206,0.5129197933113119,0.08142500893677607],[10,0.34324670579007943,0.5928806736374099,0.06387262057251064],[9,0.2496339678473305,0.7254987190563043,0.02486731309636525],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":78.7548828125,"type":"analyze"},{"outcomes":[["body",256,"invalid",41.510986328125,1102],["body",256,"valid",305.5,8256]],"time":355.35693359375,"type":"sample"},{"compiler":[[10,6]],"inputs":[["0","1","2"],["(+.f64 x (*.f64 y (+.f64 z x)))","(+.f64 y (*.f64 x (+.f64 z y)))","(+.f64 z (*.f64 y (+.f64 x z)))","(+.f64 x (*.f64 z (+.f64 y x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 x (*.f64 y (+.f64 z x)))","(fma.f64 y (+.f64 z x) x)","(+.f64 y (*.f64 x (+.f64 z y)))","(fma.f64 (+.f64 z y) x y)","(+.f64 z (*.f64 y (+.f64 x z)))","(fma.f64 y (+.f64 z x) z)","(+.f64 x (*.f64 z (+.f64 y x)))","(fma.f64 (+.f64 y x) z x)"]],"symmetry":[[]],"time":69.173095703125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 x (*.f64 y (+.f64 z x)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (*.f64 y (+.f64 z x)))","(fma.f64 y (+.f64 z x) x)"]],"time":17.451904296875,"type":"simplify"},{"compiler":[[16,7]],"time":0.30712890625,"type":"eval"},{"alts":[["(fma.f64 y (+.f64 z x) x)","next",0.015625]],"compiler":[[9,5],[9,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.77294921875,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 y (+.f64 z x) x)",0.015625,true]],"time":3.43212890625,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 y (+.f64 z x) x)","x","-inf",0.342041015625],["(fma.f64 y (+.f64 z x) x)","x","inf",0.2900390625],["(fma.f64 y (+.f64 z x) x)","x","0",0.364990234375],["(fma.f64 y (+.f64 z x) x)","z","-inf",0.279052734375],["(fma.f64 y (+.f64 z x) x)","z","inf",0.302978515625],["(fma.f64 y (+.f64 z x) x)","z","0",0.27001953125],["(fma.f64 y (+.f64 z x) x)","y","-inf",0.387939453125],["(fma.f64 y (+.f64 z x) x)","y","inf",0.328857421875],["(fma.f64 y (+.f64 z x) x)","y","0",0.34423828125]],"time":3.02392578125,"type":"series"},{"count":[[1,40]],"inputs":[["(fma.f64 y (+.f64 z x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 y z)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1) x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (*.f64 (+.f64 y 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (+.f64 z x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (+.f64 z x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (neg.f64 (*.f64 y (+.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (+.f64 z x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 y (+.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (+.f64 z x) x)) (pow.f64 (fma.f64 y (+.f64 z x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (+.f64 z x) x) 2/3) (cbrt.f64 (fma.f64 y (+.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 y (+.f64 z x) x))) (neg.f64 (pow.f64 (fma.f64 y (+.f64 z x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y (+.f64 z x)) 2)) (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (+.f64 z x)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (+.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y (+.f64 z x)) 2)) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (*.f64 y (+.f64 z x))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (*.f64 y (+.f64 z x))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (+.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (+.f64 z x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (+.f64 z x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (+.f64 z x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 y (+.f64 z x) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (+.f64 z x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 y (+.f64 z x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (+.f64 z x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (+.f64 z x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (+.f64 z x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (+.f64 z x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (+.f64 z x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 z x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 z x) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (+.f64 z x))) (pow.f64 (+.f64 z x) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (+.f64 z x))) (cbrt.f64 (pow.f64 (*.f64 y (+.f64 z x)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (+.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (+.f64 z x)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (+.f64 z x)) x)))))"]],"rules":[["egg-rr",40]],"time":36.824951171875,"type":"rewrite"},{"count":[[76,50]],"inputs":[["x","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 (+.f64 1 y) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y x) x)","(fma.f64 y x x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(fma.f64 y x x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 z x) x)"]],"time":121.60009765625,"type":"simplify"},{"compiler":[[491,150]],"time":5.77783203125,"type":"eval"},{"alts":[["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","next",0.01953125],["(fma.f64 y (+.f64 z x) x)","done",0.015625]],"compiler":[[12,7],[9,5],[12,7]],"count":[[51,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[50,1],"picked":[1,1]}],"min-error":[0.0078125],"time":8.35205078125,"type":"prune"},{"compiler":[[26,7]],"locations":[["(+.f64 x (*.f64 y z))",0.00390625,true],["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))",0.015625,true]],"time":4.945068359375,"type":"localize"},{"count":[[2,72]],"series":[["(+.f64 x (*.f64 y z))","z","-inf",0.144775390625],["(+.f64 x (*.f64 y z))","z","inf",0.14404296875],["(+.f64 x (*.f64 y z))","z","0",0.1591796875],["(+.f64 x (*.f64 y z))","y","-inf",0.152099609375],["(+.f64 x (*.f64 y z))","y","inf",0.14599609375],["(+.f64 x (*.f64 y z))","y","0",0.16796875],["(+.f64 x (*.f64 y z))","x","-inf",0.154052734375],["(+.f64 x (*.f64 y z))","x","inf",0.175048828125],["(+.f64 x (*.f64 y z))","x","0",0.1669921875],["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","z","-inf",0.202880859375],["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","z","inf",0.2451171875],["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","z","0",0.2431640625],["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","x","-inf",0.27001953125],["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","x","inf",0.278076171875],["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","x","0",0.26904296875],["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","y","-inf",0.748779296875],["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","y","inf",0.35302734375],["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","y","0",0.375]],"time":4.60302734375,"type":"series"},{"count":[[2,103]],"inputs":[["(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","(+.f64 x (*.f64 y z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y x) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (*.f64 y (+.f64 z x)) x) 0) (+.f64 (*.f64 y (+.f64 z x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y (+.f64 z x)) x) (*.f64 (+.f64 (*.f64 y (+.f64 z x)) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (*.f64 y (+.f64 z x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x y x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (*.f64 y (+.f64 z x)) x)) (+.f64 (*.f64 y (+.f64 z x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y (+.f64 z x)) x) (*.f64 0 (+.f64 (*.f64 y (+.f64 z x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (+.f64 z x)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 y (+.f64 z x)) x)) (cbrt.f64 (pow.f64 (+.f64 (*.f64 y (+.f64 z x)) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (*.f64 y (+.f64 z x)) x) 2)) (cbrt.f64 (+.f64 (*.f64 y (+.f64 z x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (+.f64 (*.f64 y (+.f64 z x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (*.f64 y (+.f64 z x)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 z y x) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (cbrt.f64 (*.f64 (*.f64 y x) (fma.f64 z y x))))) (+.f64 (cbrt.f64 (fma.f64 z y x)) (cbrt.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 z y x) 2)) (cbrt.f64 (*.f64 (*.f64 y x) (fma.f64 z y x))))) (+.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 (fma.f64 z y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (*.f64 y (+.f64 z x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 y (+.f64 z x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (+.f64 z x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (*.f64 y (+.f64 z x)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 y (+.f64 z x)) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 y (+.f64 z x)) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 y (+.f64 z x)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (*.f64 y (+.f64 z x)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (+.f64 (*.f64 y (+.f64 z x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (*.f64 y (+.f64 z x)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 z y x)) (cbrt.f64 (pow.f64 (fma.f64 z y x) 2)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y 1) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x y x)) (cbrt.f64 (pow.f64 (fma.f64 x y x) 2)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y 1) x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 z y x)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 z y x) 2)) (cbrt.f64 (fma.f64 z y x)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y x)) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (cbrt.f64 (*.f64 y x)) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) x) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) y) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y z)) (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) z) (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (cbrt.f64 (*.f64 y z)) (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) y) (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 z y x) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x y x) 1 (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x y x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 z y x) 1 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 1 (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (fma.f64 x y x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z y x) 0) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y x) (*.f64 (fma.f64 z y x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 z y x)) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y x) (*.f64 0 (fma.f64 z y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z y x)) (cbrt.f64 (pow.f64 (fma.f64 z y x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y x) 2)) (cbrt.f64 (fma.f64 z y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (cbrt.f64 (*.f64 x (*.f64 y z))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 x (*.f64 y z))))) (+.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (pow.f64 (*.f64 y z) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (cbrt.f64 (*.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 x)))))"]],"rules":[["egg-rr",38],["egg-rr",65]],"time":24.412841796875,"type":"rewrite"},{"count":[[175,116]],"inputs":[["x","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 (+.f64 1 y) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(*.f64 y z)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","x","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","x","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","x","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(*.f64 y z)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(*.f64 y z)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","x","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(*.f64 y z)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(*.f64 y z)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)","(+.f64 (*.f64 y z) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y (+.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(fma.f64 y x x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y x) x)","(fma.f64 y x x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","x","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","x","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","x","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(*.f64 y z)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(*.f64 y z)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","x","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(*.f64 y z)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(*.f64 y z)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)","(+.f64 (*.f64 y z) x)","(fma.f64 y z x)"]],"time":221.760009765625,"type":"simplify"},{"compiler":[[1361,371]],"time":13.007080078125,"type":"eval"},{"alts":[["(fma.f64 x y (fma.f64 z y x))","next",0.0078125],["(fma.f64 y (+.f64 z x) x)","done",0.015625]],"compiler":[[10,5],[9,5],[10,5]],"count":[[118,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[116,1],"picked":[1,0]}],"min-error":[0],"time":30.493896484375,"type":"prune"},{"compiler":[[17,5]],"locations":[["(fma.f64 x y (fma.f64 z y x))",0.0078125,true]],"time":4.8681640625,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 x y (fma.f64 z y x))","z","-inf",0.2509765625],["(fma.f64 x y (fma.f64 z y x))","z","inf",0.216064453125],["(fma.f64 x y (fma.f64 z y x))","z","0",0.24609375],["(fma.f64 x y (fma.f64 z y x))","y","-inf",0.306884765625],["(fma.f64 x y (fma.f64 z y x))","y","inf",0.29296875],["(fma.f64 x y (fma.f64 z y x))","y","0",0.2587890625],["(fma.f64 x y (fma.f64 z y x))","x","-inf",0.23095703125],["(fma.f64 x y (fma.f64 z y x))","x","inf",0.22998046875],["(fma.f64 x y (fma.f64 z y x))","x","0",0.3359375]],"time":2.474853515625,"type":"series"},{"count":[[1,44]],"inputs":[["(fma.f64 x y (fma.f64 z y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 x z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (+.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y 1) x) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z y) (*.f64 (+.f64 y 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (neg.f64 (*.f64 y (+.f64 x z)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 (*.f64 y (+.f64 x z)) -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y (+.f64 x z)) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (*.f64 y (+.f64 x z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x y) (neg.f64 (fma.f64 z y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 z y x) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y (+.f64 x z)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (+.f64 y 1) x) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (neg.f64 (*.f64 y (+.f64 x z))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 y (+.f64 x z)) x)) (pow.f64 (+.f64 (*.f64 y (+.f64 x z)) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (*.f64 y (+.f64 x z)) x) 2/3) (cbrt.f64 (+.f64 (*.f64 y (+.f64 x z)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (neg.f64 (*.f64 y (+.f64 x z))) x)) (neg.f64 (pow.f64 (+.f64 (*.f64 y (+.f64 x z)) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 2/3) (-.f64 (pow.f64 (fma.f64 z y x) 2/3) (*.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (fma.f64 z y x))))) (+.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (fma.f64 z y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 z y x) 2/3) (-.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 (cbrt.f64 (fma.f64 z y x)) (cbrt.f64 (*.f64 x y))))) (+.f64 (cbrt.f64 (fma.f64 z y x)) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (neg.f64 (*.f64 y (+.f64 x z))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (neg.f64 (*.f64 y (+.f64 x z))) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (*.f64 y (+.f64 x z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 y (+.f64 x z)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 y (+.f64 x z)) x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (+.f64 x z)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (*.f64 y (+.f64 x z))) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (*.f64 y (+.f64 x z)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 y (+.f64 x z)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (*.f64 y (+.f64 x z)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (*.f64 y (+.f64 x z))) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (*.f64 y (+.f64 x z)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 z y x) 2/3) (cbrt.f64 (fma.f64 z y x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 z y x)) (pow.f64 (fma.f64 z y x) 2/3) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (*.f64 x y) 2/3) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) y) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (pow.f64 y 2/3) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (fma.f64 z y x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 z y x) 1 (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 z y x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (fma.f64 z y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (fma.f64 z y x))))))"]],"rules":[["egg-rr",44]],"time":34.901123046875,"type":"rewrite"},{"count":[[80,58]],"inputs":[["(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 (+.f64 1 y) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","x","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(+.f64 (*.f64 y x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 (+.f64 1 y) x)","(fma.f64 y x x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 y) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x))","(fma.f64 y x x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 (*.f64 -1 y) 1) x)))","(fma.f64 y (+.f64 z x) x)","x","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y (+.f64 z x)) x)","(fma.f64 y (+.f64 z x) x)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) x)","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y x) x)","(fma.f64 y x x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 (*.f64 y x) x))","(fma.f64 y (+.f64 z x) x)"]],"time":120.35302734375,"type":"simplify"},{"compiler":[[603,184]],"time":6.462890625,"type":"eval"},{"alts":[["(fma.f64 x y (fma.f64 z y x))","done",0.0078125],["(fma.f64 y (+.f64 z x) x)","done",0.015625]],"compiler":[[10,5],[9,5]],"count":[[60,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[58,0],"picked":[1,1]}],"min-error":[0],"time":10.2451171875,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["z",0.0078125,1],["(+.f64 x (*.f64 y (+.f64 z x)))",0.0078125,1]],"compiler":[[4,3],[4,3],[4,3],[10,6],[32,13]],"count":[[4,1]],"inputs":[["(fma.f64 x y (fma.f64 z y x))","(+.f64 (*.f64 y x) (+.f64 x (*.f64 y z)))","(fma.f64 y (+.f64 z x) x)","(+.f64 x (*.f64 y (+.f64 z x)))"]],"link":["."],"name":["Main:bigenough2 from A"],"oracle":[0.02734375],"outputs":[["(fma.f64 x y (fma.f64 z y x))"]],"time":12.392822265625,"times":[["x",2.861083984375],["y",2.843017578125],["z",2.972900390625],["(+.f64 x (*.f64 y (+.f64 z x)))",2.875]],"type":"regimes"},{"compiler":[[10,5]],"inputs":[["(fma.f64 x y (fma.f64 z y x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x y (fma.f64 z y x))","(+.f64 (*.f64 y (+.f64 x z)) x)"]],"stop":[["done",1]],"time":32.9970703125,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[10,5]],"remove-preprocessing":[[]],"time":8.0361328125,"type":"end"}]
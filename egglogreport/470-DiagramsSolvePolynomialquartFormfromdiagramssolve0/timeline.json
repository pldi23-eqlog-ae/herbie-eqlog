[{"compiler":[[18,14]],"method":["search"],"sampling":[[12,0.21052581434561324,0.7875224907002569,0.0019516949541298345],[11,0.1403505428970755,0.8576977621487947,0.0019516949541298345],[10,0.09356702859805033,0.9044812764478198,0.0019516949541298345],[9,0.062378019065366885,0.9356702859805033,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":166.31396484375,"type":"analyze"},{"outcomes":[["body",256,"invalid",63.070556640625,1245],["body",1024,"valid",0.1259765625,1],["body",256,"valid",420.91650390625,8255]],"time":492.93701171875,"type":"sample"},{"compiler":[[17,13]],"inputs":[["0","1","2","3"],["(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 y z) 2)) t)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) y) (/.f64 (*.f64 x z) 2)) t)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) z) (/.f64 (*.f64 y x) 2)) t)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) t) (/.f64 (*.f64 y z) 2)) x)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 z y) 2)) t)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 t z) 2)) y)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 y t) 2)) z)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 y z) 2)) t)","(+.f64 (fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2)) t)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) y) (/.f64 (*.f64 x z) 2)) t)","(+.f64 (fma.f64 1/8 y (*.f64 (*.f64 x z) -1/2)) t)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) z) (/.f64 (*.f64 y x) 2)) t)","(+.f64 (fma.f64 1/8 z (*.f64 (*.f64 y x) -1/2)) t)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) t) (/.f64 (*.f64 y z) 2)) x)","(+.f64 (fma.f64 1/8 t (*.f64 (*.f64 y z) -1/2)) x)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 z y) 2)) t)","(+.f64 (fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2)) t)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 t z) 2)) y)","(+.f64 (fma.f64 1/8 x (*.f64 (*.f64 t z) -1/2)) y)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 y t) 2)) z)","(+.f64 (fma.f64 1/8 x (*.f64 (*.f64 y t) -1/2)) z)"]],"symmetry":[[]],"time":73.30712890625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 y z) 2)) t)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 y z) 2)) t)","(+.f64 (fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2)) t)"]],"time":22.1298828125,"type":"simplify"},{"compiler":[[27,18]],"time":0.43408203125,"type":"eval"},{"alts":[["(+.f64 (fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2)) t)","next",0.00390625]],"compiler":[[14,10],[14,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.929931640625,"type":"prune"},{"compiler":[[36,18]],"locations":[["(fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))",0.00390625,true]],"time":7.60302734375,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))","z","-inf",0.241943359375],["(fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))","z","inf",0.344970703125],["(fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))","z","0",0.3359375],["(fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))","y","-inf",0.23583984375],["(fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))","y","inf",0.344970703125],["(fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))","y","0",0.49609375],["(fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))","x","-inf",0.35498046875],["(fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))","x","inf",0.39794921875],["(fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))","x","0",0.47998046875]],"time":3.35205078125,"type":"series"},{"count":[[1,48]],"inputs":[["(fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/8 x) (*.f64 (*.f64 y z) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y z) -1/2) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 1/8 x) (*.f64 1/2 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 y z) -1/2) (*.f64 -1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 (*.f64 -1/8 x) (*.f64 1/2 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x))) (pow.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)) 2/3) (cbrt.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 -1/8 x) (*.f64 1/2 (*.f64 y z)))) (neg.f64 (pow.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (*.f64 y z) -1/2) 2/3) (-.f64 (cbrt.f64 (*.f64 1/64 (*.f64 x x))) (*.f64 (cbrt.f64 (*.f64 (*.f64 y z) -1/2)) (cbrt.f64 (*.f64 1/8 x))))) (+.f64 (cbrt.f64 (*.f64 (*.f64 y z) -1/2)) (cbrt.f64 (*.f64 1/8 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 1/64 (*.f64 x x))) (-.f64 (pow.f64 (*.f64 (*.f64 y z) -1/2) 2/3) (*.f64 (cbrt.f64 (*.f64 1/8 x)) (cbrt.f64 (*.f64 (*.f64 y z) -1/2))))) (+.f64 (cbrt.f64 (*.f64 1/8 x)) (cbrt.f64 (*.f64 (*.f64 y z) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 (*.f64 -1/8 x) (*.f64 1/2 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -1/8 x) (*.f64 1/2 (*.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -1/8 x) (*.f64 1/2 (*.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 -1/8 x) (*.f64 1/2 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/2 y) z (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 -1/2) (*.f64 (cbrt.f64 1/4) (*.f64 y z)) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y z) (cbrt.f64 -1/2)) (cbrt.f64 1/4) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -1/8 (*.f64 y z))) (pow.f64 (*.f64 y z) 2/3) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 -1/2 y) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y z) -1/2)) (pow.f64 (*.f64 (*.f64 y z) -1/2) 2/3) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (*.f64 (pow.f64 (*.f64 y z) 2/3) -1/2) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 z -1/2) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 z -1/2)) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z -1/2) y (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 (*.f64 y z) -1/2) 2/3) (cbrt.f64 (*.f64 (*.f64 y z) -1/2)) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/8 x)) (cbrt.f64 (*.f64 1/64 (*.f64 x x))) (*.f64 (*.f64 y z) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/512 x)) (pow.f64 x 2/3) (*.f64 (*.f64 y z) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/8) (*.f64 (sqrt.f64 1/8) x) (*.f64 (*.f64 y z) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) -1/2 (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 1/4 x) (*.f64 (*.f64 y z) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/8 (*.f64 (*.f64 y z) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 1/2 (*.f64 y z)) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 y z) -1/2) 1 (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 y z) -1/2) (*.f64 1/8 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/8 x) 1 (*.f64 (*.f64 y z) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/8 x) (*.f64 (*.f64 y z) -1/2))))))"]],"rules":[["egg-rr",48]],"time":38.914794921875,"type":"rewrite"},{"count":[[84,51]],"inputs":[["(*.f64 -1/2 (*.f64 y z))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(*.f64 1/8 x)","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(*.f64 1/8 x)","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(*.f64 1/8 x)","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(*.f64 -1/2 (*.f64 y z))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(*.f64 -1/2 (*.f64 y z))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(*.f64 1/8 x)","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(*.f64 -1/2 (*.f64 y z))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(*.f64 -1/2 (*.f64 y z))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 (*.f64 y z))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(*.f64 1/8 x)","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(*.f64 1/8 x)","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(*.f64 1/8 x)","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(*.f64 -1/2 (*.f64 y z))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(*.f64 -1/2 (*.f64 y z))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(*.f64 1/8 x)","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(*.f64 -1/2 (*.f64 y z))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(*.f64 -1/2 (*.f64 y z))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))","(+.f64 (*.f64 -1/2 (*.f64 y z)) (*.f64 1/8 x))","(fma.f64 -1/2 (*.f64 y z) (*.f64 1/8 x))"]],"time":107.1669921875,"type":"simplify"},{"compiler":[[723,445]],"time":9.76904296875,"type":"eval"},{"alts":[["(+.f64 (fma.f64 y (*.f64 z -1/2) (*.f64 1/8 x)) t)","next",0]],"compiler":[[14,10],[14,10]],"count":[[52,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[51,1],"picked":[1,0]}],"min-error":[0],"time":9.816162109375,"type":"prune"},{"compiler":[[34,21]],"time":8.156982421875,"type":"localize"},{"compiler":[[4,4]],"time":0.094970703125,"type":"eval"},{"alts":[["(+.f64 (fma.f64 y (*.f64 z -1/2) (*.f64 1/8 x)) t)","done",0]],"compiler":[[14,10]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.52197265625,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["z",0,1],["t",0,1],["(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 y z) 2)) t)",0,1],["(-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 y z) 2))",0,1],["(*.f64 (/.f64 1 8) x)",0,1],["(/.f64 (*.f64 y z) 2)",0,1],["(*.f64 y z)",0,1],["(*.f64 y z)",0,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[17,13],[15,12],[9,8],[9,7],[7,5],[7,5],[37,24]],"count":[[3,1]],"inputs":[["(+.f64 (fma.f64 y (*.f64 z -1/2) (*.f64 1/8 x)) t)","(+.f64 (fma.f64 1/8 x (*.f64 (*.f64 y z) -1/2)) t)","(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 y z) 2)) t)"]],"link":["."],"name":["Diagrams.Solve.Polynomial:quartForm  from diagrams-solve-0.1, B"],"oracle":[0.00390625],"outputs":[["(+.f64 (fma.f64 y (*.f64 z -1/2) (*.f64 1/8 x)) t)"]],"time":25.906005859375,"times":[["x",2.329833984375],["y",2.569091796875],["z",2.468017578125],["t",2.4951171875],["(+.f64 (-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 y z) 2)) t)",2.494140625],["(-.f64 (*.f64 (/.f64 1 8) x) (/.f64 (*.f64 y z) 2))",2.472900390625],["(*.f64 (/.f64 1 8) x)",2.40185546875],["(/.f64 (*.f64 y z) 2)",2.528076171875],["(*.f64 y z)",2.564208984375],["(*.f64 y z)",2.47802734375]],"type":"regimes"},{"compiler":[[14,10]],"inputs":[["(+.f64 (fma.f64 y (*.f64 z -1/2) (*.f64 1/8 x)) t)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (fma.f64 y (*.f64 z -1/2) (*.f64 1/8 x)) t)","(fma.f64 (*.f64 y z) -1/2 (fma.f64 x 1/8 t))"]],"stop":[["done",1]],"time":17.966064453125,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[14,10]],"remove-preprocessing":[[]],"time":9.408935546875,"type":"end"}]
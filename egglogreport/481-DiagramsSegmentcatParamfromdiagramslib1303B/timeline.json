[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.6887799953110516,0.09170725150033832,0.21951275318861008],[11,0.6595117235556245,0.12097552325576544,0.21951275318861008],[10,0.6321946699172258,0.17951206676661968,0.18829326331615448],[9,0.5775605626404285,0.23414617404341698,0.18829326331615448],[8,0.5307313278317451,0.34341438859701157,0.1258542835712433],[7,0.43707285821437836,0.43707285821437836,0.1258542835712433],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.825927734375,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.8955078125,356],["body",256,"valid",275.07958984375,8256]],"time":295.6240234375,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(*.f64 (*.f64 (*.f64 x 3) y) y)","(*.f64 (*.f64 (*.f64 y 3) x) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 (*.f64 x 3) y) y)","(*.f64 3 (*.f64 x (*.f64 y y)))","(*.f64 (*.f64 (*.f64 y 3) x) x)","(*.f64 3 (*.f64 y (*.f64 x x)))"]],"symmetry":[[]],"time":74.612060546875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 (*.f64 x 3) y) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (*.f64 x 3) y) y)","(*.f64 3 (*.f64 x (*.f64 y y)))"]],"time":32.7109375,"type":"simplify"},{"compiler":[[16,10]],"time":0.30712890625,"type":"eval"},{"alts":[["(*.f64 3 (*.f64 x (*.f64 y y)))","fresh",9.377061550308433],["(*.f64 (*.f64 (*.f64 x 3) y) y)","next",0.26009750976844204]],"compiler":[[9,6],[9,6],[9,6],[9,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.15234375],"time":1.2109375,"type":"prune"},{"compiler":[[20,12]],"locations":[["(*.f64 (*.f64 (*.f64 x 3) y) y)",0.18359375,true],["(*.f64 (*.f64 x 3) y)",0.19140625,true]],"time":4.760009765625,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (*.f64 (*.f64 x 3) y) y)","y","-inf",0.174072265625],["(*.f64 (*.f64 (*.f64 x 3) y) y)","y","inf",0.388916015625],["(*.f64 (*.f64 (*.f64 x 3) y) y)","y","0",0.992919921875],["(*.f64 (*.f64 (*.f64 x 3) y) y)","x","-inf",0.277099609375],["(*.f64 (*.f64 (*.f64 x 3) y) y)","x","inf",0.776123046875],["(*.f64 (*.f64 (*.f64 x 3) y) y)","x","0",0.635986328125],["(*.f64 (*.f64 x 3) y)","y","-inf",0.27197265625],["(*.f64 (*.f64 x 3) y)","y","inf",0.429931640625],["(*.f64 (*.f64 x 3) y)","y","0",0.64697265625],["(*.f64 (*.f64 x 3) y)","x","-inf",0.263916015625],["(*.f64 (*.f64 x 3) y)","x","inf",0.5419921875],["(*.f64 (*.f64 x 3) y)","x","0",0.60693359375]],"time":6.15185546875,"type":"series"},{"count":[[2,76]],"inputs":[["(*.f64 (*.f64 x 3) y)","(*.f64 (*.f64 (*.f64 x 3) y) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) 3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 3)) (*.f64 (pow.f64 (*.f64 x 3) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 x 3))) (pow.f64 (*.f64 x 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 x 3) 2/3) y) (cbrt.f64 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 x 3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x 3) 2/3) (*.f64 y (cbrt.f64 (*.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 3 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y x) 3)) (pow.f64 (*.f64 (*.f64 y x) 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 y x) 3) 2/3) (cbrt.f64 (*.f64 (*.f64 y x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x 3) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 x 3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 y x))) (neg.f64 (pow.f64 (*.f64 (*.f64 y x) 3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 y x) 3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 y x) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y x) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y x) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 y x) 3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 3 (*.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 x (*.f64 y y))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) 3) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (*.f64 y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 3)) (pow.f64 (*.f64 y (cbrt.f64 (*.f64 x 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 (*.f64 y x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y x) 3)) (*.f64 (pow.f64 (*.f64 (*.f64 y x) 3) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (*.f64 3 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 y) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 y x) 3) 2/3) y) (cbrt.f64 (*.f64 (*.f64 y x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (cbrt.f64 (*.f64 x 3))) 2) (cbrt.f64 (*.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 y y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 (*.f64 y x) 3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 x (*.f64 y y)))) (pow.f64 (*.f64 3 (*.f64 x (*.f64 y y))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 x (*.f64 y y))) 2/3) (cbrt.f64 (*.f64 3 (*.f64 x (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 y x) 3) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 (*.f64 y x) 3))) (pow.f64 (*.f64 (*.f64 y x) 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 (*.f64 y x) 3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 y x) 3) 2/3) (*.f64 y (cbrt.f64 (*.f64 (*.f64 y x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 x (*.f64 y y)))) (neg.f64 (pow.f64 (*.f64 3 (*.f64 x (*.f64 y y))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 x (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 x (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (*.f64 y y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 3 (*.f64 x (*.f64 y y))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 x (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 x (*.f64 y y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 y y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3 (*.f64 x (*.f64 y y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 x (*.f64 y y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 x (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 3 (*.f64 x (*.f64 y y))) 3))))))"]],"rules":[["egg-rr",41],["egg-rr",35]],"time":38.7021484375,"type":"rewrite"},{"count":[[124,78]],"inputs":[["(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))"]],"time":169.678955078125,"type":"simplify"},{"compiler":[[806,438]],"time":11.56201171875,"type":"eval"},{"alts":[["(*.f64 (*.f64 3 y) (*.f64 y x))","next",0.20769501953688402],["(*.f64 3 (*.f64 (*.f64 y x) y))","fresh",0.25132753907376804],["(*.f64 (*.f64 x (*.f64 y y)) 3)","fresh",9.377061550308433],["(*.f64 (*.f64 (*.f64 x 3) y) y)","done",0.26009750976844204],["(*.f64 (*.f64 (*.f64 3 y) x) y)","fresh",0.2109375]],"compiler":[[9,6],[9,6],[9,6],[9,6],[9,6],[9,6],[9,6],[9,6],[9,6]],"count":[[80,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[78,4],"picked":[1,1]}],"min-error":[0.0078125],"time":14.583984375,"type":"prune"},{"compiler":[[18,9]],"locations":[["(*.f64 (*.f64 3 y) (*.f64 y x))",0.20769501953688402,true]],"time":4.10302734375,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (*.f64 3 y) (*.f64 y x))","x","-inf",0.154052734375],["(*.f64 (*.f64 3 y) (*.f64 y x))","x","inf",0.156005859375],["(*.f64 (*.f64 3 y) (*.f64 y x))","x","0",0.169189453125],["(*.f64 (*.f64 3 y) (*.f64 y x))","y","-inf",0.1591796875],["(*.f64 (*.f64 3 y) (*.f64 y x))","y","inf",0.203125],["(*.f64 (*.f64 3 y) (*.f64 y x))","y","0",0.182861328125]],"time":1.098876953125,"type":"series"},{"count":[[1,43]],"inputs":[["(*.f64 (*.f64 3 y) (*.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 y (*.f64 y x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 3 (*.f64 y (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 y (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 y) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 y)) (*.f64 (pow.f64 (*.f64 3 y) 2/3) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y x)) (*.f64 (pow.f64 (*.f64 y x) 2/3) (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 y y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) 3) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 y) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (*.f64 y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 (*.f64 3 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 3 y) 2/3) (*.f64 y x)) (cbrt.f64 (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y x) 2/3) (*.f64 3 y)) (cbrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 y (*.f64 y x)))) (pow.f64 (*.f64 3 (*.f64 y (*.f64 y x))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 y (*.f64 y x))) 2/3) (cbrt.f64 (*.f64 3 (*.f64 y (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) (cbrt.f64 (*.f64 3 y))) (pow.f64 (*.f64 3 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 (*.f64 y y)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 y) (cbrt.f64 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 y) 2/3) (*.f64 (*.f64 y x) (cbrt.f64 (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y x) 2/3) (*.f64 (*.f64 3 y) (cbrt.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 3 (*.f64 y y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 y (*.f64 y x)))) (neg.f64 (pow.f64 (*.f64 3 (*.f64 y (*.f64 y x))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 y (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 y (*.f64 y x))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (sqrt.f64 3) (*.f64 y (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 3) (*.f64 y (*.f64 y x))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 y (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 y (*.f64 y x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 y (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (*.f64 y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 y (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 y (*.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 3 (*.f64 y (*.f64 y x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 y (*.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 y (*.f64 y x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 y x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3 (*.f64 y (*.f64 y x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 y (*.f64 y x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 y (*.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 y (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 3 (*.f64 y (*.f64 y x))) 3))))))"]],"rules":[["egg-rr",43]],"time":34.757080078125,"type":"rewrite"},{"count":[[67,45]],"inputs":[["(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))"]],"time":102.489013671875,"type":"simplify"},{"compiler":[[468,234]],"time":6.173095703125,"type":"eval"},{"alts":[["(*.f64 3 (*.f64 (pow.f64 y 2) x))","fresh",9.377061550308433],["(*.f64 y (*.f64 (*.f64 3 y) x))","next",0.2109375],["(*.f64 (*.f64 3 y) (*.f64 y x))","done",0.20769501953688402],["(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 y (*.f64 y x))))","fresh",0.3737488281475361],["(*.f64 (*.f64 (*.f64 x 3) y) y)","done",0.26009750976844204],["(*.f64 3 (*.f64 (*.f64 x y) y))","fresh",0.25132753907376804]],"compiler":[[9,7],[9,6],[9,6],[13,10],[9,6],[9,6],[9,7],[9,6],[13,10],[9,6]],"count":[[50,6]],"kept":[{"done":[1,1],"fresh":[3,0],"new":[45,4],"picked":[1,1]}],"min-error":[0.00390625],"time":9.60791015625,"type":"prune"},{"compiler":[[20,12]],"locations":[["(*.f64 y (*.f64 (*.f64 3 y) x))",0.18359375,true],["(*.f64 (*.f64 3 y) x)",0.203125,true]],"time":5.26904296875,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 y (*.f64 (*.f64 3 y) x))","x","-inf",0.14990234375],["(*.f64 y (*.f64 (*.f64 3 y) x))","x","inf",0.15283203125],["(*.f64 y (*.f64 (*.f64 3 y) x))","x","0",0.1650390625],["(*.f64 y (*.f64 (*.f64 3 y) x))","y","-inf",0.15087890625],["(*.f64 y (*.f64 (*.f64 3 y) x))","y","inf",0.3759765625],["(*.f64 y (*.f64 (*.f64 3 y) x))","y","0",0.15185546875],["(*.f64 (*.f64 3 y) x)","x","-inf",0.14794921875],["(*.f64 (*.f64 3 y) x)","x","inf",0.2060546875],["(*.f64 (*.f64 3 y) x)","x","0",0.140869140625],["(*.f64 (*.f64 3 y) x)","y","-inf",0.152099609375],["(*.f64 (*.f64 3 y) x)","y","inf",0.193115234375],["(*.f64 (*.f64 3 y) x)","y","0",0.18896484375]],"time":2.31396484375,"type":"series"},{"count":[[2,74]],"inputs":[["(*.f64 (*.f64 3 y) x)","(*.f64 y (*.f64 (*.f64 3 y) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 y x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 y)) (*.f64 (pow.f64 (*.f64 3 y) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 3 y) 2/3) x) (cbrt.f64 (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (*.f64 3 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) (pow.f64 (*.f64 3 (*.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) (cbrt.f64 (*.f64 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (*.f64 3 y))) (pow.f64 (*.f64 3 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 y) 2/3) (*.f64 x (cbrt.f64 (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 3 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 y x))) (neg.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 y x)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (sqrt.f64 3) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 3) (*.f64 y x)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 3 (*.f64 y x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 (*.f64 y x) y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 3 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 y x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 (*.f64 y x) y))) (pow.f64 (*.f64 3 (*.f64 (*.f64 y x) y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 (*.f64 y x) y)) 2/3) (cbrt.f64 (*.f64 3 (*.f64 (*.f64 y x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 y) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 y x))) (*.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) y) (cbrt.f64 (*.f64 3 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 3 (*.f64 y x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y y) 3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (*.f64 y y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 y y) 3) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 3 (*.f64 y x)))) (pow.f64 (*.f64 3 (*.f64 y x)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 (*.f64 y x)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (*.f64 y x)) 2/3) (*.f64 y (cbrt.f64 (*.f64 3 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (*.f64 (*.f64 y y) 3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 3 (*.f64 y x)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 (*.f64 y x) y))) (neg.f64 (pow.f64 (*.f64 3 (*.f64 (*.f64 y x) y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 (*.f64 y x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 (*.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 (*.f64 y x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 3 (*.f64 (*.f64 y x) y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 (*.f64 y x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 (*.f64 y x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 3 (*.f64 (*.f64 y x) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 (*.f64 y x) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 (*.f64 y x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 3 (*.f64 (*.f64 y x) y)) 3))))))"]],"rules":[["egg-rr",37],["egg-rr",37]],"time":42.52392578125,"type":"rewrite"},{"count":[[122,75]],"inputs":[["(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 y x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 y x) y))"]],"time":179.775146484375,"type":"simplify"},{"compiler":[[789,427]],"time":11.29296875,"type":"eval"},{"alts":[["(*.f64 3 (*.f64 (pow.f64 y 2) x))","fresh",9.377061550308433],["(*.f64 (*.f64 3 y) (*.f64 y x))","done",0.20769501953688402],["(*.f64 y (*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 y x))))","fresh",0.3473625488422101],["(*.f64 (*.f64 (*.f64 x 3) y) y)","done",0.26009750976844204],["(*.f64 (*.f64 (*.f64 y x) y) 3)","next",0.25132753907376804]],"compiler":[[9,7],[9,6],[13,10],[9,6],[9,6],[9,7],[13,10],[9,6]],"count":[[81,5]],"kept":[{"done":[2,2],"fresh":[3,1],"new":[75,2],"picked":[1,0]}],"min-error":[0.00390625],"time":17.829833984375,"type":"prune"},{"compiler":[[20,7]],"locations":[["(*.f64 (*.f64 (*.f64 y x) y) 3)",0.1953125,true],["(*.f64 (*.f64 y x) y)",0.2109375,true]],"time":4.0771484375,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (*.f64 (*.f64 y x) y) 3)","x","-inf",0.18310546875],["(*.f64 (*.f64 (*.f64 y x) y) 3)","x","inf",0.1640625],["(*.f64 (*.f64 (*.f64 y x) y) 3)","x","0",0.156982421875],["(*.f64 (*.f64 (*.f64 y x) y) 3)","y","-inf",0.176025390625],["(*.f64 (*.f64 (*.f64 y x) y) 3)","y","inf",0.1650390625],["(*.f64 (*.f64 (*.f64 y x) y) 3)","y","0",0.169921875],["(*.f64 (*.f64 y x) y)","x","-inf",0.378173828125],["(*.f64 (*.f64 y x) y)","x","inf",0.1630859375],["(*.f64 (*.f64 y x) y)","x","0",0.1728515625],["(*.f64 (*.f64 y x) y)","y","-inf",0.1708984375],["(*.f64 (*.f64 y x) y)","y","inf",0.2080078125],["(*.f64 (*.f64 y x) y)","y","0",0.296875]],"time":2.583984375,"type":"series"},{"count":[[2,71]],"inputs":[["(*.f64 (*.f64 y x) y)","(*.f64 (*.f64 (*.f64 y x) y) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y x) y)) (pow.f64 (*.f64 (*.f64 y x) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 y x) y) 2/3) (cbrt.f64 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y x)) (*.f64 (pow.f64 (*.f64 y x) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y x) 2/3) y) (cbrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y 2/3) (*.f64 y x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (*.f64 y x))) (pow.f64 (*.f64 y x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y x) 2/3) (*.f64 y (cbrt.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (*.f64 y x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (*.f64 y x) y))) (neg.f64 (pow.f64 (*.f64 (*.f64 y x) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (*.f64 y x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 y x) y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 y x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 y x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 y x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 y x) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 y x) y) 3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 (*.f64 y x) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -3 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y 3) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y x)) (*.f64 (pow.f64 (*.f64 y x) 2/3) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 y x) y)) (*.f64 (pow.f64 (*.f64 (*.f64 y x) y) 2/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 y x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (*.f64 (*.f64 y x) y))) (pow.f64 (*.f64 (*.f64 y x) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 3 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (*.f64 y 3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 y x) y) 2/3) (cbrt.f64 (*.f64 27 (*.f64 (*.f64 y x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (*.f64 y 3)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (*.f64 y x) y) 2/3) 3) (cbrt.f64 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 y x) 2/3) (*.f64 y 3)) (cbrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 y x) y) 3)) (pow.f64 (*.f64 (*.f64 (*.f64 y x) y) 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (*.f64 y x) y) 3) 2/3) (cbrt.f64 (*.f64 (*.f64 (*.f64 y x) y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 y x) y) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 9) (*.f64 (*.f64 (*.f64 y x) y) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -3 (*.f64 (*.f64 y x) y))) (neg.f64 (pow.f64 (*.f64 (*.f64 (*.f64 y x) y) 3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 9) (*.f64 (*.f64 y x) y)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (*.f64 (*.f64 y x) y) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 y x) y) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -3 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -3 (*.f64 (*.f64 y x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 y x) y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 (*.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (*.f64 y x) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 y x) y) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (*.f64 y x) y) 3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 y x) y) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -3 (*.f64 (*.f64 y x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (*.f64 y x) y) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (*.f64 y x) y) 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (*.f64 y x) y) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3 (*.f64 (*.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (*.f64 y x) y) 3) 3))))))"]],"rules":[["egg-rr",41],["egg-rr",30]],"time":41.866943359375,"type":"rewrite"},{"count":[[119,75]],"inputs":[["(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 (pow.f64 y 2) x)","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (pow.f64 y 2) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 (pow.f64 y 2) x)","(*.f64 (*.f64 x y) y)","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 3 (*.f64 (*.f64 x y) y))"]],"time":167.26611328125,"type":"simplify"},{"compiler":[[787,357]],"time":8.91796875,"type":"eval"},{"alts":[["(*.f64 3 (*.f64 (pow.f64 y 2) x))","fresh",9.377061550308433],["(*.f64 (*.f64 (*.f64 x 3) y) y)","done",0.26009750976844204],["(*.f64 (*.f64 3 y) (*.f64 y x))","done",0.20769501953688402],["(*.f64 y (*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 y x))))","fresh",0.3473625488422101],["(*.f64 (*.f64 (*.f64 y x) y) 3)","done",0.25132753907376804]],"compiler":[[9,7],[9,6],[9,6],[13,10],[9,6]],"count":[[80,5]],"kept":[{"done":[2,2],"fresh":[2,1],"new":[75,1],"picked":[1,1]}],"min-error":[0.00390625],"time":13.76904296875,"type":"prune"},{"accuracy":[0.20769501953688402],"baseline":[0.20769501953688402],"branch":[["x",0.20769501953688402,1],["y",0.20769501953688402,1],["(*.f64 (*.f64 (*.f64 x 3) y) y)",0.20769501953688402,1],["(*.f64 x 3)",0.20769501953688402,1]],"compiler":[[3,2],[3,2],[9,6],[5,4],[101,57]],"count":[[13,1]],"inputs":[["(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 y (*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 y x))))","(*.f64 (*.f64 (*.f64 y x) y) 3)","(*.f64 3 (*.f64 (pow.f64 y 2) x))","(*.f64 y (*.f64 (*.f64 3 y) x))","(*.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 y (*.f64 y x))))","(*.f64 3 (*.f64 (*.f64 x y) y))","(*.f64 (*.f64 3 y) (*.f64 y x))","(*.f64 3 (*.f64 (*.f64 y x) y))","(*.f64 (*.f64 x (*.f64 y y)) 3)","(*.f64 (*.f64 (*.f64 3 y) x) y)","(*.f64 3 (*.f64 x (*.f64 y y)))","(*.f64 (*.f64 (*.f64 x 3) y) y)"]],"link":["."],"name":["Diagrams.Segment:$catParam from diagrams-lib-1.3.0.3, B"],"oracle":[9.687352907761294],"outputs":[["(*.f64 (*.f64 3 y) (*.f64 y x))"]],"time":21.7548828125,"times":[["x",4.93603515625],["y",5.071044921875],["(*.f64 (*.f64 (*.f64 x 3) y) y)",4.115966796875],["(*.f64 x 3)",5.544189453125]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(*.f64 (*.f64 3 y) (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 3 y) (*.f64 y x))","(*.f64 3 (*.f64 y (*.f64 y x)))"]],"stop":[["fuel",1]],"time":33.721923828125,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.654052734375,"type":"end"}]
[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09170725150033832,0.11024453863501549],[11,0.7687799381092191,0.12097552325576544,0.11024453863501549],[10,0.7258531395345926,0.17951206676661968,0.09463479369878769],[9,0.6712190322577953,0.23414617404341698,0.09463479369878769],[8,0.5931703075766563,0.34341438859701157,0.06341530382633209],[7,0.49951183795928955,0.43707285821437836,0.06341530382633209],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.209228515625,"type":"analyze"},{"outcomes":[["body",256,"invalid",5.630859375,153],["body",256,"valid",274.303955078125,8256]],"time":288.8359375,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0","1"],["(*.f64 x (-.f64 1 y))","(*.f64 y (-.f64 1 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 x (-.f64 1 y))","(*.f64 y (-.f64 1 x))"]],"symmetry":[[]],"time":61.48193359375,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 x (-.f64 1 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (-.f64 1 y))"]],"time":41.31103515625,"type":"simplify"},{"compiler":[[7,5]],"time":0.286865234375,"type":"eval"},{"alts":[["(*.f64 x (-.f64 1 y))","next",0.0078125]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.0078125],"time":1.97412109375,"type":"prune"},{"compiler":[[13,8]],"locations":[["(*.f64 x (-.f64 1 y))",0.0078125,true]],"time":3.241943359375,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 x (-.f64 1 y))","y","-inf",0.41015625],["(*.f64 x (-.f64 1 y))","y","inf",0.380859375],["(*.f64 x (-.f64 1 y))","y","0",0.31103515625],["(*.f64 x (-.f64 1 y))","x","-inf",0.453125],["(*.f64 x (-.f64 1 y))","x","inf",0.3837890625],["(*.f64 x (-.f64 1 y))","x","0",0.39892578125]],"time":2.446044921875,"type":"series"},{"count":[[1,61]],"inputs":[["(*.f64 x (-.f64 1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (neg.f64 (neg.f64 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (neg.f64 (neg.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 y x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (*.f64 (+.f64 y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (pow.f64 (*.f64 x (-.f64 1 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (-.f64 1 y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 y 3)) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (/.f64 x (pow.f64 (fma.f64 y y (+.f64 1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (/.f64 (-.f64 1 (pow.f64 y 3)) (pow.f64 (fma.f64 y y (+.f64 1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (-.f64 1 y))) (pow.f64 (+.f64 y -1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (-.f64 1 y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y -1) 2/3) (*.f64 x (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 (pow.f64 (+.f64 y -1) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (+.f64 y -1) 2/3) x) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 y -1) x)) (neg.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (*.f64 (pow.f64 (+.f64 y -1) 2/3) x)) (pow.f64 (fma.f64 y y (+.f64 1 y)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (pow.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 (+.f64 y -1) x))))) (cbrt.f64 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 y 3)) (/.f64 x (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (/.f64 -1 (-.f64 -1 (fma.f64 y y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 y -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 1 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 (pow.f64 y 3) -1)) (/.f64 1 (-.f64 -1 (fma.f64 y y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (*.f64 (pow.f64 (+.f64 y -1) 2/3) x))) (neg.f64 (cbrt.f64 (fma.f64 y y (+.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))) (neg.f64 (pow.f64 (fma.f64 y y (+.f64 1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (cbrt.f64 (fma.f64 y y (+.f64 1 y)))) (pow.f64 (fma.f64 y y (+.f64 1 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (*.f64 (pow.f64 (+.f64 y -1) 2/3) x)) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 y 3) -1)) (-.f64 -1 (fma.f64 y y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 y -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (pow.f64 (*.f64 x (-.f64 1 y)) 2))) (cbrt.f64 (fma.f64 y y (+.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (pow.f64 y 3))) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (+.f64 y -1) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 y x)))))))"]],"rules":[["egg-rr",61]],"time":44.344970703125,"type":"rewrite"},{"count":[[85,66]],"inputs":[["(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","x","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 -1 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","x","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 (-.f64 1 y) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 (-.f64 1 y) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 (-.f64 1 y) x)","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)"]],"time":83.838134765625,"type":"simplify"},{"compiler":[[725,463]],"time":12.143798828125,"type":"eval"},{"alts":[["(-.f64 x (*.f64 x y))","next",0.0078125],["(*.f64 x (-.f64 1 y))","done",0.0078125]],"compiler":[[7,4],[7,5],[7,4]],"count":[[67,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[66,1],"picked":[1,1]}],"min-error":[0],"time":11.72509765625,"type":"prune"},{"compiler":[[12,4]],"locations":[["(-.f64 x (*.f64 x y))",0.0078125,true]],"time":3.18505859375,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 x (*.f64 x y))","y","-inf",0.226806640625],["(-.f64 x (*.f64 x y))","y","inf",0.31298828125],["(-.f64 x (*.f64 x y))","y","0",0.240966796875],["(-.f64 x (*.f64 x y))","x","-inf",0.37890625],["(-.f64 x (*.f64 x y))","x","inf",0.464111328125],["(-.f64 x (*.f64 x y))","x","0",0.434814453125]],"time":2.18701171875,"type":"series"},{"count":[[1,63]],"inputs":[["(-.f64 x (*.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (*.f64 x y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (-.f64 9 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 9 (+.f64 9 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (-.f64 3 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 1 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x (-.f64 1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3 (+.f64 3 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 1 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 x) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) (pow.f64 (*.f64 x (-.f64 1 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (*.f64 (+.f64 1 (cbrt.f64 y)) (cbrt.f64 (*.f64 (*.f64 x x) y)))) (-.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (cbrt.f64 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (neg.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x 2/3)) (*.f64 (cbrt.f64 x) (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (-.f64 (neg.f64 (*.f64 y (cbrt.f64 x))) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 2/3) (-.f64 (pow.f64 (*.f64 x y) 2/3) (*.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (*.f64 x y)))))) (-.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (-.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 x (-.f64 1 y)))))) (+.f64 0 (cbrt.f64 (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 2/3) (-.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 x)))) (+.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 2/3) (*.f64 0 (cbrt.f64 (*.f64 x (+.f64 y -1)))))) (cbrt.f64 (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 2/3) (+.f64 (pow.f64 x 2/3) (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (neg.f64 x))))) (-.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 y -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (-.f64 1 y)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 y -1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 2 (*.f64 x (+.f64 y -1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 3 (*.f64 x (+.f64 y -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (-.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 2/3) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (neg.f64 x) (cbrt.f64 y)) (pow.f64 y 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (pow.f64 (*.f64 x y) 2/3) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (neg.f64 (pow.f64 (*.f64 x y) 2/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (neg.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (neg.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 2/3) (cbrt.f64 x) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (*.f64 x y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 x (-.f64 1 y)))))))"]],"rules":[["egg-rr",63]],"time":42.458984375,"type":"rewrite"},{"count":[[87,69]],"inputs":[["(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","x","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 -1 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(+.f64 x (*.f64 -1 (*.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(*.f64 (-.f64 1 y) x)","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(*.f64 (-.f64 1 y) x)","x","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 (-.f64 1 y) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 (-.f64 1 y) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 (-.f64 1 y) x)","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)","(+.f64 x (*.f64 -1 (*.f64 y x)))","(*.f64 (-.f64 1 y) x)"]],"time":85.885986328125,"type":"simplify"},{"compiler":[[659,378]],"time":10.44091796875,"type":"eval"},{"alts":[["(-.f64 x (*.f64 x y))","done",0.0078125],["(*.f64 x (-.f64 1 y))","done",0.0078125]],"compiler":[[7,4],[7,5]],"count":[[71,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[69,0],"picked":[1,1]}],"min-error":[0],"time":14.22998046875,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["(*.f64 x (-.f64 1 y))",0.0078125,1],["(-.f64 1 y)",0.0078125,1]],"compiler":[[3,2],[3,2],[7,5],[5,4],[12,7]],"count":[[2,1]],"inputs":[["(-.f64 x (*.f64 x y))","(*.f64 x (-.f64 1 y))"]],"link":["."],"name":["Data.Colour.RGBSpace.HSV:hsv from colour-2.3.3, H"],"oracle":[0.015625],"outputs":[["(-.f64 x (*.f64 x y))"]],"time":11.203125,"times":[["x",2.845947265625],["y",2.650146484375],["(*.f64 x (-.f64 1 y))",2.764892578125],["(-.f64 1 y)",2.248779296875]],"type":"regimes"},{"compiler":[[7,4]],"inputs":[["(-.f64 x (*.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(-.f64 x (*.f64 x y))","(*.f64 x (-.f64 1 y))"]],"stop":[["done",1]],"time":40.51904296875,"type":"simplify"},{"time":0.005859375,"type":"soundness"},{"compiler":[[7,4]],"remove-preprocessing":[[]],"time":9.14794921875,"type":"end"}]
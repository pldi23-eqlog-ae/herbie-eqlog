[{"compiler":[[13,8]],"method":["search"],"sampling":[[12,0.26523609083778865,0.6884436769539661,0.046320232208245216],[11,0.21842972186641418,0.7469516381681842,0.0346186399654016],[10,0.18722547588549787,0.7918077417657514,0.020966782348750712],[9,0.015602122990458156,0.9751326869036347,0.009265190105907095],[8,0.0,0.998535871389322,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":118.69384765625,"type":"analyze"},{"outcomes":[["body",256,"invalid",70.996826171875,1701],["body",256,"valid",343.439208984375,8256]],"time":424.400146484375,"type":"sample"},{"compiler":[[12,7]],"inputs":[["0","1","2"],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","(/.f64 (+.f64 y (*.f64 x (-.f64 z y))) z)","(/.f64 (+.f64 z (*.f64 y (-.f64 x z))) x)","(/.f64 (+.f64 x (*.f64 z (-.f64 y x))) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","(/.f64 (fma.f64 y (-.f64 z x) x) z)","(/.f64 (+.f64 y (*.f64 x (-.f64 z y))) z)","(/.f64 (fma.f64 (-.f64 z y) x y) z)","(/.f64 (+.f64 z (*.f64 y (-.f64 x z))) x)","(/.f64 (fma.f64 y (-.f64 x z) z) x)","(/.f64 (+.f64 x (*.f64 z (-.f64 y x))) y)","(/.f64 (fma.f64 (-.f64 y x) z x) y)"]],"symmetry":[[]],"time":71.330810546875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","(/.f64 (fma.f64 (-.f64 z x) y x) z)"]],"time":18.085205078125,"type":"simplify"},{"compiler":[[20,9]],"time":0.31982421875,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (-.f64 z x) y x) z)","fresh",9.83203125],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","next",9.83203125]],"compiler":[[11,6],[12,7],[11,6],[12,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[9.828125],"time":1.216064453125,"type":"prune"},{"compiler":[[30,7]],"locations":[["(+.f64 x (*.f64 y (-.f64 z x)))",0.0078125,true],["(*.f64 y (-.f64 z x))",0.01171875,true],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)",9.241925441678392,true]],"time":5.157958984375,"type":"localize"},{"count":[[3,96]],"series":[["(+.f64 x (*.f64 y (-.f64 z x)))","z","-inf",0.151123046875],["(+.f64 x (*.f64 y (-.f64 z x)))","z","inf",0.18212890625],["(+.f64 x (*.f64 y (-.f64 z x)))","z","0",0.16015625],["(+.f64 x (*.f64 y (-.f64 z x)))","y","-inf",0.155029296875],["(+.f64 x (*.f64 y (-.f64 z x)))","y","inf",0.14794921875],["(+.f64 x (*.f64 y (-.f64 z x)))","y","0",0.14599609375],["(+.f64 x (*.f64 y (-.f64 z x)))","x","-inf",0.19091796875],["(+.f64 x (*.f64 y (-.f64 z x)))","x","inf",0.156982421875],["(+.f64 x (*.f64 y (-.f64 z x)))","x","0",0.155029296875],["(*.f64 y (-.f64 z x))","x","-inf",0.177001953125],["(*.f64 y (-.f64 z x))","x","inf",0.14794921875],["(*.f64 y (-.f64 z x))","x","0",0.179931640625],["(*.f64 y (-.f64 z x))","z","-inf",0.158935546875],["(*.f64 y (-.f64 z x))","z","inf",0.157958984375],["(*.f64 y (-.f64 z x))","z","0",0.18408203125],["(*.f64 y (-.f64 z x))","y","-inf",0.19189453125],["(*.f64 y (-.f64 z x))","y","inf",0.23193359375],["(*.f64 y (-.f64 z x))","y","0",0.23193359375],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","z","-inf",0.611083984375],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","z","inf",1.02001953125],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","z","0",0.3720703125],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","y","-inf",0.77099609375],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","y","inf",0.490966796875],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","y","0",0.41796875],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","x","-inf",0.532958984375],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","x","inf",0.552978515625],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","x","0",0.589111328125]],"time":8.774169921875,"type":"series"},{"count":[[3,149]],"inputs":[["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)","(*.f64 y (-.f64 z x))","(+.f64 x (*.f64 y (-.f64 z x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) (*.f64 y (-.f64 z x))) (*.f64 (/.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) x) (*.f64 (/.f64 1 z) (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 0) (/.f64 (fma.f64 (-.f64 z x) y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) (*.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (-.f64 z x)) (/.f64 1 z)) (*.f64 x (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 1 z)) (*.f64 (*.f64 y (-.f64 z x)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 (-.f64 z x) y x) z)) (/.f64 (fma.f64 (-.f64 z x) y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) (*.f64 0 (/.f64 (fma.f64 (-.f64 z x) y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 (-.f64 z x) y x) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (/.f64 (fma.f64 (-.f64 z x) y x) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 (-.f64 z x) y x) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) -1) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) (cbrt.f64 (neg.f64 z))) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2))) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (*.f64 (-.f64 x z) y) x)) (cbrt.f64 z)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) (neg.f64 (cbrt.f64 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (*.f64 (-.f64 x z) y) x)) 1) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 (fma.f64 (-.f64 z x) y x) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) -1) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) -1) (/.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (-.f64 x z) y) x) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 z x) y x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 2)) (cbrt.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (fma.f64 (-.f64 z x) y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 (-.f64 z x) y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) z) (cbrt.f64 (fma.f64 (-.f64 z x) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (-.f64 (*.f64 (-.f64 x z) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (-.f64 z x) y x) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (-.f64 z x) y x) (neg.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (-.f64 z x) y x) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 z)) (/.f64 (-.f64 (*.f64 (-.f64 x z) y) x) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 z)) (/.f64 (fma.f64 (-.f64 z x) y x) (neg.f64 (cbrt.f64 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 (fma.f64 (-.f64 z x) y x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 z) -2)) (/.f64 (-.f64 (*.f64 (-.f64 x z) y) x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) z) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) (cbrt.f64 (*.f64 z z))) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) (/.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) (cbrt.f64 z)) (/.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (-.f64 z x) y x) -1) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (-.f64 z x) y x) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 x z) y) x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 z x) y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (-.f64 z x) y x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (fma.f64 (-.f64 z x) y x)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 2)) (cbrt.f64 (-.f64 (*.f64 (-.f64 x z) y) x))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 2)) (cbrt.f64 (fma.f64 (-.f64 z x) y x))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z)) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (-.f64 z x) y x) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (-.f64 z x) y x) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 (*.f64 (-.f64 x z) y) x)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (*.f64 (-.f64 x z) y) x) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (-.f64 z x) y x) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (-.f64 z x) y x) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 (-.f64 z x) y x) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 (-.f64 z x) y x) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 (-.f64 z x) y x) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x y)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (-.f64 z x)) 0) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 z x)) (*.f64 (*.f64 y (-.f64 z x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (-.f64 z x))) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 z x)) (*.f64 0 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y z) 1) (*.f64 (neg.f64 (*.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2)) (cbrt.f64 (*.f64 y (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 z x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (-.f64 z x))) (cbrt.f64 (pow.f64 (-.f64 z x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) y) (cbrt.f64 (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 x z) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (-.f64 z x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 z x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) (*.f64 y (cbrt.f64 (-.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 z x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 z x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (neg.f64 (*.f64 x y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x (*.f64 y z)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (+.f64 (neg.f64 (*.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (-.f64 z x) y x) 0) (fma.f64 (-.f64 z x) y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 z x) y x) (*.f64 (fma.f64 (-.f64 z x) y x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (-.f64 z x) y x)) (fma.f64 (-.f64 z x) y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (-.f64 z x) y x) (*.f64 0 (fma.f64 (-.f64 z x) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (*.f64 (-.f64 x z) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) (cbrt.f64 (fma.f64 (-.f64 z x) y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 z x) y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 z x) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 (*.f64 (-.f64 x z) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (-.f64 x z) y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 (-.f64 x z) y) x)) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 (-.f64 z x) y x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) -1) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 2)) -1) (/.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (-.f64 z x) y x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2)) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 x (*.f64 y (-.f64 z x)))))) (+.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2)) (cbrt.f64 (*.f64 x (*.f64 y (-.f64 z x)))))) (+.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (-.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 z x) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (-.f64 z x) y x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (-.f64 x z) y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 z x) y x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 z x) y x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (-.f64 x z) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 z x) y x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 z x) y x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (-.f64 z x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (-.f64 z x))) (cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 y (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (-.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (-.f64 z x)) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 z x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (-.f64 x z) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 z x)) 2)) (cbrt.f64 (*.f64 y (-.f64 z x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 z x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 z x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (-.f64 z x))) (cbrt.f64 (pow.f64 (-.f64 z x) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 y (-.f64 z x)))))))"]],"rules":[["egg-rr",49],["egg-rr",36],["egg-rr",64]],"time":30.823974609375,"type":"rewrite"},{"count":[[245,179]],"inputs":[["y","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z)","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z))","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(/.f64 x z)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(/.f64 (*.f64 y (-.f64 z x)) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (*.f64 y (-.f64 z x)) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 -1 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","x","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z)","(/.f64 (*.f64 (-.f64 1 y) x) z)","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z))","(/.f64 (*.f64 (-.f64 1 y) x) z)","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(+.f64 y (*.f64 -1 (/.f64 (*.f64 (-.f64 y 1) x) z)))","(+.f64 y (/.f64 (*.f64 (-.f64 1 y) x) z))","(/.f64 x z)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","(/.f64 (*.f64 y (-.f64 z x)) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (fma.f64 y (-.f64 z x) x) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (fma.f64 y (-.f64 z x) x) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (fma.f64 y (-.f64 z x) x) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (fma.f64 y (-.f64 z x) x) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (fma.f64 y (-.f64 z x) x) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (fma.f64 y (-.f64 z x) x) z)","(/.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)","(/.f64 (*.f64 (-.f64 1 y) x) z)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(-.f64 (+.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(-.f64 (+.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(-.f64 (+.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(-.f64 (+.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(-.f64 (+.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(-.f64 (+.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(-.f64 (+.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(-.f64 (+.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(-.f64 (+.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 -1 (*.f64 y x))","(neg.f64 (*.f64 y x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x)))","(*.f64 y (-.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 z x) x)","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(*.f64 (-.f64 1 y) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 z x) x)","(*.f64 -1 (*.f64 (-.f64 y 1) x))","(*.f64 (-.f64 1 y) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(fma.f64 y (-.f64 z x) x)","x","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y (-.f64 z x) x)","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y (-.f64 z x) x)","(*.f64 y (-.f64 z x))","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y (-.f64 z x)) x)","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(*.f64 (-.f64 1 y) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y (-.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y (-.f64 z x) x)","(*.f64 y z)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 y z) (+.f64 x (*.f64 -1 (*.f64 y x))))","(fma.f64 y (-.f64 z x) x)"]],"time":260.239990234375,"type":"simplify"},{"compiler":[[2478,759]],"time":20.630859375,"type":"eval"},{"alts":[["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","next",0.046875],["(*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 2)) (cbrt.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z)))","fresh",29.353729556906657],["(*.f64 (-.f64 (*.f64 (-.f64 x z) y) x) (/.f64 -1 z))","fresh",10.05078125],["(-.f64 (+.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))","fresh",3.2890625]],"compiler":[[13,7],[24,11],[14,9],[14,8],[13,7],[24,11],[14,9],[14,8]],"count":[[181,4]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[179,4],"picked":[1,0]}],"min-error":[0.00390625],"time":50.541015625,"type":"prune"},{"compiler":[[25,10]],"locations":[["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))",0.046875,true]],"time":5.076171875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","y","-inf",0.323974609375],["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","y","inf",0.31298828125],["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","y","0",0.341064453125],["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","z","-inf",0.3671875],["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","z","inf",0.321044921875],["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","z","0",0.9580078125],["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","x","-inf",0.39501953125],["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","x","inf",0.43798828125],["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","x","0",0.4228515625]],"time":4.02587890625,"type":"series"},{"count":[[1,47]],"inputs":[["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)) (*.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)) 0) (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)) (*.f64 0 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))) (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 z x) z) y) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x z) (*.f64 (/.f64 (-.f64 z x) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (/.f64 (-.f64 z x) z) y) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x z) (*.f64 (/.f64 (-.f64 x z) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)) 2)) (cbrt.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x z) 3)) y) z) (*.f64 (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1) x)) (*.f64 (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x z) 3)) y) (neg.f64 z)) (*.f64 (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1) (neg.f64 x))) (*.f64 (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 (/.f64 x z) 3)) y) (cbrt.f64 (*.f64 z z))) (*.f64 (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1) (/.f64 x (cbrt.f64 z)))) (*.f64 (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1)) (*.f64 z (*.f64 (-.f64 1 (pow.f64 (/.f64 x z) 3)) y))) (*.f64 z (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1)) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (-.f64 1 (pow.f64 (/.f64 x z) 3)) y))) (*.f64 (cbrt.f64 (*.f64 z z)) (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1)) (*.f64 (neg.f64 z) (*.f64 (-.f64 1 (pow.f64 (/.f64 x z) 3)) y))) (*.f64 (neg.f64 z) (fma.f64 (/.f64 (+.f64 z x) z) (/.f64 x z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (neg.f64 (/.f64 x z)) (*.f64 (/.f64 (-.f64 x z) z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 (*.f64 (/.f64 (-.f64 x z) z) y) (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x z)) (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (*.f64 (/.f64 (-.f64 z x) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 x (cbrt.f64 (pow.f64 z -2))) (*.f64 (/.f64 (-.f64 z x) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (cbrt.f64 (/.f64 x z)) (*.f64 (/.f64 (-.f64 z x) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) z) (*.f64 (/.f64 (-.f64 z x) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 x z)) (*.f64 (/.f64 (-.f64 z x) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 -1 z) (*.f64 (/.f64 (-.f64 z x) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) x (*.f64 (/.f64 (-.f64 z x) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (-.f64 z x) z) y) 1 (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 (-.f64 z x) z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 (-.f64 z x) z) y) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 (-.f64 z x) z) y)) (cbrt.f64 (pow.f64 (*.f64 (/.f64 (-.f64 z x) z) y) 2)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (-.f64 z x) z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 z x) z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)) y) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x z) (*.f64 (/.f64 (-.f64 z x) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x z) 1 (*.f64 (/.f64 (-.f64 z x) z) y))))))"]],"rules":[["egg-rr",47]],"time":21.29296875,"type":"rewrite"},{"count":[[83,62]],"inputs":[["y","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(/.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","y","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(/.f64 x z)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(*.f64 (-.f64 1 (/.f64 x z)) y)","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(*.f64 (-.f64 1 (/.f64 x z)) y)","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x)","(/.f64 (*.f64 x (-.f64 1 y)) z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x))","(/.f64 (*.f64 x (-.f64 1 y)) z)","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(/.f64 (+.f64 (*.f64 -1 (*.f64 y x)) x) z)","(/.f64 (*.f64 x (-.f64 1 y)) z)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","y","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(/.f64 x z)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(*.f64 (-.f64 1 (/.f64 x z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(*.f64 (-.f64 1 (/.f64 x z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(fma.f64 (/.f64 (-.f64 1 y) z) x y)"]],"time":129.137939453125,"type":"simplify"},{"compiler":[[1002,286]],"time":8.47802734375,"type":"eval"},{"alts":[["(fma.f64 (*.f64 (/.f64 (-.f64 z x) z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (/.f64 x z))","fresh",14.850670728518407],["(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","fresh",3.28515625],["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","next",0.19921875]],"compiler":[[19,11],[16,11],[15,9],[19,11],[16,11],[15,9]],"count":[[66,3]],"kept":[{"done":[0,0],"fresh":[3,0],"new":[62,3],"picked":[1,0]}],"min-error":[0],"time":13.10400390625,"type":"prune"},{"compiler":[[37,12]],"locations":[["(/.f64 (-.f64 z x) z)",0.01953125,true],["(*.f64 (/.f64 (-.f64 z x) z) y)",0.125,true],["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))",0.1640625,true]],"time":7.135009765625,"type":"localize"},{"count":[[3,96]],"series":[["(/.f64 (-.f64 z x) z)","x","-inf",0.237060546875],["(/.f64 (-.f64 z x) z)","x","inf",0.235107421875],["(/.f64 (-.f64 z x) z)","x","0",0.260009765625],["(/.f64 (-.f64 z x) z)","z","-inf",0.218994140625],["(/.f64 (-.f64 z x) z)","z","inf",0.2587890625],["(/.f64 (-.f64 z x) z)","z","0",0.242919921875],["(*.f64 (/.f64 (-.f64 z x) z) y)","y","-inf",0.23681640625],["(*.f64 (/.f64 (-.f64 z x) z) y)","y","inf",0.27294921875],["(*.f64 (/.f64 (-.f64 z x) z) y)","y","0",0.236083984375],["(*.f64 (/.f64 (-.f64 z x) z) y)","x","-inf",0.155029296875],["(*.f64 (/.f64 (-.f64 z x) z) y)","x","inf",0.178955078125],["(*.f64 (/.f64 (-.f64 z x) z) y)","x","0",0.15185546875],["(*.f64 (/.f64 (-.f64 z x) z) y)","z","-inf",0.181884765625],["(*.f64 (/.f64 (-.f64 z x) z) y)","z","inf",0.15087890625],["(*.f64 (/.f64 (-.f64 z x) z) y)","z","0",0.1689453125],["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","y","-inf",0.280029296875],["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","y","inf",0.34716796875],["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","y","0",0.357177734375],["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","z","-inf",0.4150390625],["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","z","inf",0.44189453125],["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","z","0",0.34716796875],["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","x","-inf",0.4189453125],["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","x","inf",0.345947265625],["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","x","0",0.468017578125]],"time":6.9140625,"type":"series"},{"count":[[3,234]],"inputs":[["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","(*.f64 (/.f64 (-.f64 z x) z) y)","(/.f64 (-.f64 z x) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) 0) (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) (*.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)) (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) (*.f64 0 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x z) (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 z x) y) z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) 2)) (cbrt.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (+.f64 (*.f64 (-.f64 z x) y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (+.f64 x (*.f64 (-.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 y (-.f64 x z)))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (neg.f64 z)) (*.f64 z (*.f64 y (-.f64 x z)))) (*.f64 z (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 (*.f64 z x)) (*.f64 (neg.f64 z) (*.f64 (-.f64 z x) y))) (*.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (-.f64 z x) y) (neg.f64 z)) (neg.f64 (*.f64 z x))) (*.f64 z (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 x))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (-.f64 x z)) z) (*.f64 (neg.f64 z) x)) (*.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) (neg.f64 z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 y (-.f64 x z)) (neg.f64 x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 x) (*.f64 y (-.f64 x z))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (cbrt.f64 (*.f64 z z))) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 z)) z) (*.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (-.f64 z x) y))) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (cbrt.f64 (*.f64 z z)) x) (*.f64 z (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)))) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (cbrt.f64 (*.f64 z z))) (*.f64 (neg.f64 z) (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 (*.f64 z z))) (*.f64 z (/.f64 x (cbrt.f64 z)))) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (-.f64 x z)) (cbrt.f64 (*.f64 z z))) (*.f64 (neg.f64 z) (/.f64 x (cbrt.f64 z)))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z))) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)) z) (*.f64 (cbrt.f64 (*.f64 z z)) x)) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) z) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)) (/.f64 x (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 x (cbrt.f64 z)) (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (*.f64 (-.f64 z x) y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 z x) (*.f64 z (*.f64 (-.f64 z x) y))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (neg.f64 z)) (*.f64 (neg.f64 z) (*.f64 y (-.f64 x z)))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (-.f64 z x) y) z) (*.f64 z x)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 y (-.f64 x z)) (neg.f64 z)) (*.f64 (neg.f64 z) (neg.f64 x))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 (*.f64 (-.f64 z x) y) x) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 z) (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x z)) (cbrt.f64 (/.f64 (*.f64 x x) (*.f64 z z))) (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) z) (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) x (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 x (cbrt.f64 (pow.f64 z -2))) (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x z)) (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 2)) (cbrt.f64 (/.f64 (*.f64 (-.f64 z x) y) z)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (-.f64 z x) z)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 (-.f64 z x) z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (*.f64 y (-.f64 x z)) z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 (-.f64 z x) z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 z x) y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 2)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 z x) y) (/.f64 1 z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (/.f64 (-.f64 z x) z))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 z x) z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)) y) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x z) 1 (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x z) (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 z x) (/.f64 y z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 1 (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 z x) (cbrt.f64 z)) (*.f64 y (cbrt.f64 (pow.f64 z -2))) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 (-.f64 z x) y) z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (/.f64 (*.f64 (-.f64 z x) y) z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 y (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 0) (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 z x) y) z) (*.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (neg.f64 (/.f64 x z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (-.f64 z x) y) z)) (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 z x) y) z) (*.f64 0 (/.f64 (*.f64 (-.f64 z x) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 z x) y) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z x) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 (-.f64 z x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 2)) (cbrt.f64 (/.f64 (*.f64 (-.f64 z x) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (-.f64 z x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 z x) z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z x) (cbrt.f64 z)) (*.f64 y (cbrt.f64 (pow.f64 z -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 z x) z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (/.f64 (-.f64 z x) z))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z x) y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (-.f64 z x) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 y (-.f64 x z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (-.f64 z x) z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y (-.f64 x z)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (/.f64 (-.f64 z x) z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)) (*.f64 y (cbrt.f64 (/.f64 (-.f64 z x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (pow.f64 z -2))) (/.f64 (-.f64 z x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)) y) (cbrt.f64 (/.f64 (-.f64 z x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 x z)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 x z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 z x) y) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 z x) y) z) (neg.f64 z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (/.f64 (*.f64 (-.f64 z x) y) z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y (-.f64 x z)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 z x) y) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 x z)) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 z x) y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 z x) (cbrt.f64 z)) y) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 z x) y) z) z) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 z x) y) z) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 (-.f64 z x) (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (*.f64 z (-.f64 z x))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 2)) (cbrt.f64 (*.f64 (-.f64 z x) y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (/.f64 (*.f64 (-.f64 z x) y) z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 (*.f64 (-.f64 z x) y) z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)) y)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 z x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)) y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (-.f64 z x)) y) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 z x) (*.f64 y (cbrt.f64 (pow.f64 z -2)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 z x) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y (-.f64 x z)) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (-.f64 z x) y) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 z x) y) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 z x) y) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 z x) y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 y (-.f64 x z)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 y (-.f64 x z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 x z) z) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 x z) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 y (/.f64 (-.f64 x z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 z x) y) (/.f64 -1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 z x) y) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 z x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 z x) z) 0) (/.f64 (-.f64 z x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 z x) z) (*.f64 (/.f64 (-.f64 z x) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 z x) z)) (/.f64 (-.f64 z x) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 z x) z) (*.f64 0 (/.f64 (-.f64 z x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (/.f64 x z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -1 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 x z) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (/.f64 (*.f64 z x) (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (neg.f64 (/.f64 x z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 z x) z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)) (cbrt.f64 (/.f64 (-.f64 z x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 z x)) (/.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x z) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 (-.f64 z x) (cbrt.f64 (pow.f64 z -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 z x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 x z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x z) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 z x) 2)) z) (cbrt.f64 (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 z x) (cbrt.f64 (pow.f64 z -2))) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (-.f64 z x)) (/.f64 1 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z x) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 z -2)) (/.f64 (-.f64 z x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 z x) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (neg.f64 (/.f64 x z)) 3)) (+.f64 1 (-.f64 (*.f64 (neg.f64 (/.f64 x z)) (neg.f64 (/.f64 x z))) (neg.f64 (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (/.f64 x z) 3)) (+.f64 1 (+.f64 (pow.f64 (/.f64 x z) 2) (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 z) z) (*.f64 (neg.f64 z) x)) (*.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 x))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z (neg.f64 z)) (neg.f64 (*.f64 z x))) (*.f64 z (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z (-.f64 z x))) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x z) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 z x) z) (neg.f64 z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (/.f64 (-.f64 z x) z)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (-.f64 z x)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (pow.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (-.f64 z x)) (cbrt.f64 z)) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z x) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (*.f64 z z)) z) (*.f64 z (/.f64 x (cbrt.f64 z)))) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 z z))) (*.f64 (neg.f64 z) (/.f64 x (cbrt.f64 z)))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (pow.f64 z 4)) (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 x (cbrt.f64 z)))) (cbrt.f64 (pow.f64 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 z x) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 z x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (-.f64 z x)) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 z x) z)) (cbrt.f64 (pow.f64 (-.f64 z x) 2))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 z x) z) z) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 z x) z) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)) (cbrt.f64 (-.f64 x z))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2)) (cbrt.f64 (-.f64 z x))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (/.f64 (-.f64 z x) z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 z z)) (/.f64 (-.f64 z x) z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x z)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 z x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 z x) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (-.f64 z x)) 1) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 z x) (cbrt.f64 (pow.f64 z -2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (-.f64 z x) (cbrt.f64 (pow.f64 z -2)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (-.f64 z x)) 1) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z (-.f64 z x)) (cbrt.f64 (pow.f64 z 4))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x z) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 z x) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 z z) (*.f64 (neg.f64 z) (neg.f64 x))) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (*.f64 z z)) z) (*.f64 (cbrt.f64 (*.f64 z z)) x)) (*.f64 (cbrt.f64 (*.f64 z z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 z x) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 z x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 z x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x z) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 -1 z) (-.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 x z) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 -1 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 1 z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 z)) (cbrt.f64 z) (neg.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (cbrt.f64 (/.f64 1 z)) (neg.f64 (/.f64 x z)))))))"]],"rules":[["egg-rr",87],["egg-rr",72],["egg-rr",75]],"time":36.447021484375,"type":"rewrite"},{"count":[[330,259]],"inputs":[["y","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(/.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","y","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(/.f64 x z)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(*.f64 (-.f64 1 (/.f64 x z)) y)","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(/.f64 (*.f64 y (-.f64 z x)) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(*.f64 -1 (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(*.f64 -1 (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(*.f64 -1 (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(*.f64 -1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","1","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","1","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","1","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(*.f64 -1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(*.f64 -1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(+.f64 1 (*.f64 -1 (/.f64 x z)))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x)","(/.f64 (*.f64 x (-.f64 1 y)) z)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 (+.f64 (*.f64 -1 (/.f64 y z)) (/.f64 1 z)) x) y)","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x))","(/.f64 (*.f64 x (-.f64 1 y)) z)","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (*.f64 -1 (*.f64 (-.f64 (/.f64 y z) (/.f64 1 z)) x)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(/.f64 (+.f64 x (*.f64 -1 (*.f64 y x))) z)","(/.f64 (*.f64 x (-.f64 1 y)) z)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) (+.f64 y (/.f64 x z)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","y","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(/.f64 x z)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (*.f64 (-.f64 1 (/.f64 x z)) y) (/.f64 x z))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(*.f64 (-.f64 1 (/.f64 x z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(+.f64 (/.f64 x z) (*.f64 (-.f64 1 (/.f64 x z)) y))","(fma.f64 x (/.f64 (-.f64 1 y) z) y)","(/.f64 (*.f64 y (-.f64 z x)) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (fma.f64 (-.f64 z x) y x) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (fma.f64 (-.f64 z x) y x) z)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) z) (/.f64 x z))","(/.f64 (fma.f64 (-.f64 z x) y x) z)","(*.f64 -1 (/.f64 (*.f64 y x) z))","(neg.f64 (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","y","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(*.f64 -1 (/.f64 (*.f64 y x) z))","(neg.f64 (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(*.f64 -1 (/.f64 (*.f64 y x) z))","(neg.f64 (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) z)) y)","(-.f64 y (/.f64 (*.f64 y x) z))","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(/.f64 (*.f64 y (-.f64 z x)) z)","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","1","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","1","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","1","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))","(+.f64 1 (*.f64 -1 (/.f64 x z)))","(-.f64 1 (/.f64 x z))"]],"time":331.514892578125,"type":"simplify"},{"compiler":[[4323,1433]],"time":35.7880859375,"type":"eval"},{"alts":[["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","done",0.19921875],["(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","next",3.28515625],["(fma.f64 (*.f64 (/.f64 (-.f64 z x) z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (/.f64 x z))","fresh",14.850670728518407]],"compiler":[[15,9],[16,11],[19,11],[16,11],[19,11]],"count":[[262,3]],"kept":[{"done":[0,0],"fresh":[2,0],"new":[259,2],"picked":[1,1]}],"min-error":[0],"time":93.2900390625,"type":"prune"},{"compiler":[[53,27]],"locations":[["(+.f64 (*.f64 y x) (*.f64 -1 x))",0.015625,true],["(/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)",3.154059219090935,true]],"time":10.7470703125,"type":"localize"},{"count":[[2,39]],"series":[["(+.f64 (*.f64 y x) (*.f64 -1 x))","x","-inf",0.18603515625],["(+.f64 (*.f64 y x) (*.f64 -1 x))","x","inf",0.141845703125],["(+.f64 (*.f64 y x) (*.f64 -1 x))","x","0",0.139892578125],["(+.f64 (*.f64 y x) (*.f64 -1 x))","y","-inf",0.176025390625],["(+.f64 (*.f64 y x) (*.f64 -1 x))","y","inf",0.147216796875],["(+.f64 (*.f64 y x) (*.f64 -1 x))","y","0",0.153076171875],["(/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)","z","-inf",0.3330078125],["(/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)","z","inf",0.376953125],["(/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)","z","0",0.51708984375],["(/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)","x","-inf",0.469970703125],["(/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)","x","inf",0.5],["(/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)","x","0",0.513916015625],["(/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)","y","-inf",1.691162109375],["(/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)","y","inf",0.2841796875],["(/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)","y","0",0.4677734375]],"time":6.264892578125,"type":"series"},{"count":[[2,151]],"inputs":[["(/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)","(+.f64 (*.f64 y x) (*.f64 -1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) (*.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 0) (/.f64 (*.f64 x (+.f64 y -1)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) (*.f64 y x)) (*.f64 (/.f64 1 z) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) (neg.f64 x)) (*.f64 (/.f64 1 z) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) (*.f64 0 (/.f64 (*.f64 x (+.f64 y -1)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x (+.f64 y -1)) z)) (/.f64 (*.f64 x (+.f64 y -1)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y x) (/.f64 1 z)) (*.f64 (neg.f64 x) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (/.f64 1 z)) (*.f64 (*.f64 y x) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 x (*.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (/.f64 (-.f64 x (*.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 x (*.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x -1) (/.f64 (neg.f64 (+.f64 y -1)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (neg.f64 z))) (/.f64 (neg.f64 (+.f64 y -1)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 x (*.f64 y x))) 1) (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 x (*.f64 y x))) (cbrt.f64 z)) (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) (neg.f64 (cbrt.f64 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 (*.f64 x (+.f64 y -1)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) (cbrt.f64 z)) (/.f64 (+.f64 y -1) (neg.f64 (cbrt.f64 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) -1) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (cbrt.f64 (neg.f64 z))) (/.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2))) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x -1) (/.f64 (+.f64 y -1) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y -1) -1) (/.f64 x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y -1) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) z) (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 z)) (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y -1)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) -1) (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y -1)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 z z))) (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y -1)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) (cbrt.f64 z)) (/.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) -1) (/.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) -1) (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (cbrt.f64 (*.f64 z z))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (*.f64 y x)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y -1)) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (+.f64 y -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (/.f64 (+.f64 y -1) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 y -1)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 2)) (cbrt.f64 (/.f64 (*.f64 x (+.f64 y -1)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x (+.f64 y -1)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (-.f64 x (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (+.f64 y -1)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (*.f64 y x)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) z) (cbrt.f64 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y -1) (cbrt.f64 (*.f64 z z))) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y -1) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (+.f64 y -1)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 z)) (/.f64 (-.f64 x (*.f64 y x)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 z)) (/.f64 (*.f64 x (+.f64 y -1)) (neg.f64 (cbrt.f64 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 (+.f64 y -1) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (*.f64 z z))) (/.f64 (+.f64 y -1) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y -1) (cbrt.f64 z)) (/.f64 x (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y -1)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) z) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 (*.f64 x (+.f64 y -1)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 z) -2)) (/.f64 (-.f64 x (*.f64 y x)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (+.f64 y -1)) -1) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (+.f64 y -1)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 y -1)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (*.f64 y x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 y -1)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 x (+.f64 y -1))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (+.f64 y -1)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 2)) (cbrt.f64 (-.f64 x (*.f64 y x)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 2)) (cbrt.f64 (*.f64 x (+.f64 y -1)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y -1)) z)) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 y -1)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (+.f64 y -1)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 x (*.f64 y x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (*.f64 y x)) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (+.f64 y -1)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 y -1)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x (+.f64 y -1)) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y -1)) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y -1)) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x (+.f64 y -1)) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x (*.f64 y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 x (*.f64 y x)) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x (+.f64 y -1)) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y -1)) (*.f64 (*.f64 x (+.f64 y -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 y -1)) 0) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y -1)) (*.f64 0 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (+.f64 y -1))) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y x) 0) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 x (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) (cbrt.f64 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 y -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 x (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y -1)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (-.f64 (*.f64 (cbrt.f64 (*.f64 x x)) y) (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 (neg.f64 x)) (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (*.f64 y x))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x -1) (/.f64 (+.f64 y -1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y -1) -1) (/.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) -1) (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) -1) (/.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) -1) (/.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x (+.f64 y -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (+.f64 y -1)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (-.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (neg.f64 (*.f64 (*.f64 y x) x))))) (+.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (*.f64 x x)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (cbrt.f64 (neg.f64 (*.f64 (*.f64 y x) x))))) (+.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (+.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 x)))) (-.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 y -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 y -1)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 y 3) -1)) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 y 3) -1) x) (fma.f64 y y (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 y -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 x (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (neg.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -1 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 x (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (neg.f64 (*.f64 x x))) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (neg.f64 x)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y x) 2)) (cbrt.f64 (*.f64 y x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 x) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) 1 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 1 (neg.f64 x))))))"]],"rules":[["egg-rr",66],["egg-rr",85]],"time":28.653076171875,"type":"rewrite"},{"count":[[190,163]],"inputs":[["(*.f64 -1 (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(*.f64 -1 (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(*.f64 -1 (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(*.f64 -1 (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(*.f64 -1 (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(*.f64 -1 x)","(*.f64 y x)","(*.f64 y x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 x z))","(neg.f64 (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 -1 (/.f64 x z)))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (+.f64 y -1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (+.f64 y -1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (+.f64 y -1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (+.f64 y -1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (+.f64 y -1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (+.f64 y -1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (+.f64 y -1) x) z)","(/.f64 (*.f64 (-.f64 y 1) x) z)","(/.f64 (*.f64 (+.f64 y -1) x) z)","(*.f64 -1 (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(*.f64 -1 (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(*.f64 -1 (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(*.f64 -1 (/.f64 (*.f64 (+.f64 1 (*.f64 -1 y)) x) z))","(/.f64 (*.f64 (+.f64 y -1) x) z)","(*.f64 -1 x)","(neg.f64 x)","(*.f64 y x)","(*.f64 y x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 y -1) x)","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 y -1) x)","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 y -1) x)","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 y -1) x)"]],"time":127.739013671875,"type":"simplify"},{"compiler":[[2757,1547]],"time":29.114013671875,"type":"eval"},{"alts":[["(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","done",0.19921875],["(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","done",3.28515625],["(fma.f64 (*.f64 (/.f64 (-.f64 z x) z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (/.f64 x z))","fresh",14.850670728518407]],"compiler":[[15,9],[16,11],[19,11]],"count":[[166,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[163,0],"picked":[1,1]}],"min-error":[0],"time":49.2099609375,"type":"prune"},{"accuracy":[0.046875],"baseline":[0.046875],"branch":[["x",0.046875,1],["y",0.046875,1],["z",0.046875,1],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)",0.046875,1]],"compiler":[[4,3],[4,3],[4,3],[12,7],[143,52]],"count":[[11,1]],"inputs":[["(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(fma.f64 (*.f64 (/.f64 (-.f64 z x) z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (/.f64 x z))","(fma.f64 (*.f64 (/.f64 (-.f64 z x) z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (/.f64 x z))","(+.f64 y (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 x)) z)))","(fma.f64 x (/.f64 1 z) (*.f64 (/.f64 (-.f64 z x) z) y))","(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","(*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z) 2)) (cbrt.f64 (/.f64 (fma.f64 (-.f64 z x) y x) z)))","(*.f64 (-.f64 (*.f64 (-.f64 x z) y) x) (/.f64 -1 z))","(-.f64 (+.f64 y (/.f64 x z)) (/.f64 (*.f64 y x) z))","(/.f64 (fma.f64 (-.f64 z x) y x) z)","(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)"]],"link":["."],"name":["Diagrams.Backend.Rasterific:rasterificRadialGradient from diagrams-rasterific-1.3.1.3"],"oracle":[29.510177717764286],"outputs":[["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))"]],"time":20.387939453125,"times":[["x",4.56298828125],["y",4.442138671875],["z",4.64208984375],["(/.f64 (+.f64 x (*.f64 y (-.f64 z x))) z)",4.135986328125]],"type":"regimes"},{"compiler":[[13,7]],"inputs":[["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 (-.f64 1 (/.f64 x z)) y (/.f64 x z))","(fma.f64 (/.f64 (-.f64 z x) z) y (/.f64 x z))"]],"stop":[["fuel",1]],"time":18.39892578125,"type":"simplify"},{"time":0.01416015625,"type":"soundness"},{"compiler":[[13,7]],"remove-preprocessing":[[]],"time":8.286865234375,"type":"end"}]
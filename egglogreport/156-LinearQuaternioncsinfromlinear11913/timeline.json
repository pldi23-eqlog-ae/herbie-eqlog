[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.46829234808683395,0.34341438859701157,0.18829326331615448],[11,0.46829234808683395,0.34341438859701157,0.18829326331615448],[10,0.43707285821437836,0.43707285821437836,0.1258542835712433],[9,0.43707285821437836,0.43707285821437836,0.1258542835712433],[8,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[7,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[6,0.0,0.9990236759185791,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":75.55419921875,"type":"analyze"},{"outcomes":[["body",512,"invalid",103.501220703125,1017],["body",256,"invalid",109.2529296875,2039],["body",512,"valid",100.496337890625,976],["body",1024,"invalid",324.802978515625,1908],["body",1024,"valid",367.0322265625,2064],["body",2048,"valid",2.024169921875,5],["body",256,"valid",259.9580078125,5211]],"time":1281.85986328125,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))","(*.f64 (cos.f64 y) (/.f64 (sinh.f64 x) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))","(*.f64 (cos.f64 y) (/.f64 (sinh.f64 x) x))"]],"symmetry":[[]],"time":57.774169921875,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))"]],"time":18.794921875,"type":"simplify"},{"compiler":[[9,6]],"time":0.240966796875,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))","next",0.02734375]],"compiler":[[9,6],[9,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.02734375],"time":0.68505859375,"type":"prune"},{"compiler":[[19,6]],"locations":[["(cos.f64 x)",0.02734375,true]],"time":4.9208984375,"type":"localize"},{"count":[[1,4]],"series":[["(cos.f64 x)","x","-inf",0.1630859375],["(cos.f64 x)","x","inf",0.2060546875],["(cos.f64 x)","x","0",0.410888671875]],"time":0.821044921875,"type":"series"},{"count":[[1,27]],"inputs":[["(cos.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (cos.f64 0)) (*.f64 (sin.f64 x) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 0) (cos.f64 x)) (*.f64 (sin.f64 0) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (pow.f64 (pow.f64 (cos.f64 x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 4) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (neg.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 x) 2/3)) (cbrt.f64 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 x)))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (neg.f64 x))))))"]],"rules":[["egg-rr",27]],"time":31.719970703125,"type":"rewrite"},{"count":[[31,34]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1/24 (*.f64 -1/2 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 1) (fma.f64 (pow.f64 x 6) -1/720 (*.f64 1/24 (pow.f64 x 4))))"]],"time":33.296142578125,"type":"simplify"},{"compiler":[[438,192]],"time":5.198974609375,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))","done",0.02734375],["(*.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (/.f64 (sinh.f64 y) y))","fresh",17.603553808610656],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 3) (/.f64 (sinh.f64 y) y))","next",0.33144384768442015]],"compiler":[[9,6],[22,15],[12,9],[22,15],[12,9]],"count":[[35,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[34,2],"picked":[1,1]}],"min-error":[0.01953125],"time":6.19580078125,"type":"prune"},{"compiler":[[31,12]],"locations":[["(cos.f64 x)",0.02734375,false],["(cbrt.f64 (cos.f64 x))",0.05078125,true],["(pow.f64 (cbrt.f64 (cos.f64 x)) 3)",0.33144384768442026,true]],"time":7.43115234375,"type":"localize"},{"count":[[2,24]],"series":[["(cbrt.f64 (cos.f64 x))","x","-inf",0.14208984375],["(cbrt.f64 (cos.f64 x))","x","inf",0.162109375],["(cbrt.f64 (cos.f64 x))","x","0",0.22021484375],["(pow.f64 (cbrt.f64 (cos.f64 x)) 3)","x","-inf",1.35400390625],["(pow.f64 (cbrt.f64 (cos.f64 x)) 3)","x","inf",1.666015625],["(pow.f64 (cbrt.f64 (cos.f64 x)) 3)","x","0",0.4599609375]],"time":4.19384765625,"type":"series"},{"count":[[2,54]],"inputs":[["(pow.f64 (cbrt.f64 (cos.f64 x)) 3)","(cbrt.f64 (cos.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (cos.f64 0)) (*.f64 (sin.f64 x) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 0) (cos.f64 x)) (*.f64 (sin.f64 0) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) -1) (cbrt.f64 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 8) (cbrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 5) (pow.f64 (cbrt.f64 (cos.f64 x)) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 4/3) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 x)))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (neg.f64 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cos.f64 x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 4/3)) (cbrt.f64 (cbrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (cbrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cos.f64 x)) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (cos.f64 x))))))"]],"rules":[["egg-rr",23],["egg-rr",31]],"time":41.861083984375,"type":"rewrite"},{"count":[[78,69]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(*.f64 (cos.f64 x) (pow.f64 1 1/3))","(*.f64 (cos.f64 x) (pow.f64 1 1/3))","(*.f64 (cos.f64 x) (pow.f64 1 1/3))","(*.f64 (cos.f64 x) (pow.f64 1 1/3))","(*.f64 (pow.f64 1 1/3) (cos.f64 x))","(*.f64 (pow.f64 1 1/3) (cos.f64 x))","(*.f64 (pow.f64 1 1/3) (cos.f64 x))","(*.f64 (pow.f64 1 1/3) (cos.f64 x))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 x 2)))","(+.f64 (*.f64 -1/72 (pow.f64 x 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 x 2))))","(+.f64 (*.f64 -1/72 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (*.f64 -23/6480 (pow.f64 x 6)))))","(pow.f64 (cos.f64 x) 1/3)","(pow.f64 (cos.f64 x) 1/3)","(pow.f64 (cos.f64 x) 1/3)","(pow.f64 (cos.f64 x) 1/3)","(pow.f64 (cos.f64 x) 1/3)","(pow.f64 (cos.f64 x) 1/3)","(pow.f64 (cos.f64 x) 1/3)","(pow.f64 (cos.f64 x) 1/3)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 -1/2 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1/24 (*.f64 (*.f64 -1/2 x) x)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 (fma.f64 -1/2 (*.f64 x x) 1) (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/720 (pow.f64 x 6))))","(*.f64 (cos.f64 x) (pow.f64 1 1/3))","(cos.f64 x)","(*.f64 (cos.f64 x) (pow.f64 1 1/3))","(cos.f64 x)","(*.f64 (cos.f64 x) (pow.f64 1 1/3))","(cos.f64 x)","(*.f64 (cos.f64 x) (pow.f64 1 1/3))","(cos.f64 x)","(*.f64 (pow.f64 1 1/3) (cos.f64 x))","(cos.f64 x)","(*.f64 (pow.f64 1 1/3) (cos.f64 x))","(cos.f64 x)","(*.f64 (pow.f64 1 1/3) (cos.f64 x))","(cos.f64 x)","(*.f64 (pow.f64 1 1/3) (cos.f64 x))","(cos.f64 x)","1","(+.f64 1 (*.f64 -1/6 (pow.f64 x 2)))","(fma.f64 -1/6 (*.f64 x x) 1)","(+.f64 (*.f64 -1/72 (pow.f64 x 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 x 2))))","(fma.f64 -1/72 (pow.f64 x 4) (fma.f64 -1/6 (*.f64 x x) 1))","(+.f64 (*.f64 -1/72 (pow.f64 x 4)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 x 2)) (*.f64 -23/6480 (pow.f64 x 6)))))","(+.f64 (fma.f64 (pow.f64 x 4) -1/72 1) (fma.f64 (pow.f64 x 6) -23/6480 (*.f64 (*.f64 -1/6 x) x)))","(pow.f64 (cos.f64 x) 1/3)","(cbrt.f64 (cos.f64 x))","(pow.f64 (cos.f64 x) 1/3)","(cbrt.f64 (cos.f64 x))","(pow.f64 (cos.f64 x) 1/3)","(cbrt.f64 (cos.f64 x))","(pow.f64 (cos.f64 x) 1/3)","(cbrt.f64 (cos.f64 x))","(pow.f64 (cos.f64 x) 1/3)","(cbrt.f64 (cos.f64 x))","(pow.f64 (cos.f64 x) 1/3)","(cbrt.f64 (cos.f64 x))","(pow.f64 (cos.f64 x) 1/3)","(cbrt.f64 (cos.f64 x))","(pow.f64 (cos.f64 x) 1/3)","(cbrt.f64 (cos.f64 x))"]],"time":109.027099609375,"type":"simplify"},{"compiler":[[1540,734]],"time":17.161865234375,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))","done",0.02734375],["(*.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (/.f64 (sinh.f64 y) y))","next",17.603553808610656],["(*.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) (/.f64 (sinh.f64 y) y))","fresh",17.62242128907377]],"compiler":[[9,6],[22,15],[18,13],[22,15],[18,13]],"count":[[106,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[103,1],"picked":[1,0]}],"min-error":[0.015625],"time":24.037109375,"type":"prune"},{"compiler":[[73,31]],"locations":[["(cbrt.f64 (cos.f64 x))",0.05078125,false],["(cbrt.f64 (cbrt.f64 (cos.f64 x)))",0.0546875,true],["(*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x))))",0.05859375,true],["(*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))",0.07421875,true]],"time":17.968994140625,"type":"localize"},{"count":[[3,36]],"series":[["(cbrt.f64 (cbrt.f64 (cos.f64 x)))","x","-inf",7.58203125],["(cbrt.f64 (cbrt.f64 (cos.f64 x)))","x","inf",7.58203125],["(cbrt.f64 (cbrt.f64 (cos.f64 x)))","x","0",0.403076171875],["(*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x))))","x","-inf",18.60498046875],["(*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x))))","x","inf",8.968994140625],["(*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x))))","x","0",0.552001953125],["(*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))","x","-inf",0.281982421875],["(*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))","x","inf",0.357177734375],["(*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))","x","0",28.2080078125]],"time":72.69189453125,"type":"series"},{"count":[[3,85]],"inputs":[["(*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))","(*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x))))","(cbrt.f64 (cbrt.f64 (cos.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 x) (cos.f64 0)) (*.f64 (sin.f64 x) (sin.f64 0)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 0) (cos.f64 x)) (*.f64 (sin.f64 0) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3))) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (pow.f64 (cbrt.f64 (cos.f64 x)) 8/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))) (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3))) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (+.f64 7/3 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 8/3) (cbrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (+.f64 7/3 1)) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 2/3) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3))) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 5/3)) (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 x) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 x)))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (neg.f64 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) 10/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) 10/3) (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 2/3) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 (cbrt.f64 (cos.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (cbrt.f64 (pow.f64 (cos.f64 x) 5/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 5/3)) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2) (cbrt.f64 (cbrt.f64 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) (+.f64 4/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 7)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (cbrt.f64 (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))))) (cbrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 8/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (cbrt.f64 (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (cos.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 5/3)))) (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (cos.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (cbrt.f64 (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (cbrt.f64 (cos.f64 x)))))))"]],"rules":[["egg-rr",21],["egg-rr",30],["egg-rr",34]],"time":49.177978515625,"type":"rewrite"},{"count":[[121,106]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","1","(+.f64 1 (*.f64 -7/18 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -7/18 (pow.f64 x 2)) (*.f64 7/648 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -7/18 (pow.f64 x 2)) (+.f64 (*.f64 -329/174960 (pow.f64 x 6)) (*.f64 7/648 (pow.f64 x 4)))))","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","1","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) 1)","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) (+.f64 (*.f64 -5/648 (pow.f64 x 4)) 1))","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) (+.f64 (*.f64 -5/648 (pow.f64 x 4)) (+.f64 1 (*.f64 -347/174960 (pow.f64 x 6)))))","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 -1/2 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/2 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 (fma.f64 -1/2 (*.f64 x x) 1) (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/720 (pow.f64 x 6))))","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","1","(+.f64 1 (*.f64 -7/18 (pow.f64 x 2)))","(fma.f64 -7/18 (*.f64 x x) 1)","(+.f64 1 (+.f64 (*.f64 -7/18 (pow.f64 x 2)) (*.f64 7/648 (pow.f64 x 4))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 7/648 (*.f64 -7/18 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -7/18 (pow.f64 x 2)) (+.f64 (*.f64 -329/174960 (pow.f64 x 6)) (*.f64 7/648 (pow.f64 x 4)))))","(+.f64 (fma.f64 -7/18 (*.f64 x x) 1) (fma.f64 -329/174960 (pow.f64 x 6) (*.f64 7/648 (pow.f64 x 4))))","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","1","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) 1)","(fma.f64 -1/18 (*.f64 x x) 1)","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) (+.f64 (*.f64 -5/648 (pow.f64 x 4)) 1))","(fma.f64 (*.f64 x x) -1/18 (fma.f64 -5/648 (pow.f64 x 4) 1))","(+.f64 (*.f64 -1/18 (pow.f64 x 2)) (+.f64 (*.f64 -5/648 (pow.f64 x 4)) (+.f64 1 (*.f64 -347/174960 (pow.f64 x 6)))))","(fma.f64 -1/18 (*.f64 x x) (fma.f64 (pow.f64 x 4) -5/648 (fma.f64 -347/174960 (pow.f64 x 6) 1)))","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)","(pow.f64 (cos.f64 x) 1/9)"]],"time":111.843017578125,"type":"simplify"},{"compiler":[[2817,1429]],"time":28.58203125,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))","done",0.02734375],["(*.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (/.f64 (sinh.f64 y) y))","done",17.603553808610656],["(*.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (/.f64 (sinh.f64 y) y))","next",17.62242128907377]],"compiler":[[9,6],[22,15],[18,13],[18,13]],"count":[[138,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[135,1],"picked":[1,1]}],"min-error":[0.015625],"time":31.5771484375,"type":"prune"},{"compiler":[[58,28]],"locations":[["(pow.f64 (cos.f64 x) 2/3)",0.041347509768442016,true],["(cbrt.f64 (cos.f64 x))",0.05078125,false],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))",0.07421875,true],["(pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)",0.11755756837909415,true]],"time":21.5869140625,"type":"localize"},{"count":[[3,36]],"series":[["(pow.f64 (cos.f64 x) 2/3)","x","-inf",4.848876953125],["(pow.f64 (cos.f64 x) 2/3)","x","inf",4.3330078125],["(pow.f64 (cos.f64 x) 2/3)","x","0",0.572998046875],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))","x","-inf",0.23583984375],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))","x","inf",0.2822265625],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))","x","0",10.801025390625],["(pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)","x","-inf",8.281005859375],["(pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)","x","inf",9.098876953125],["(pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)","x","0",0.45703125]],"time":39.0810546875,"type":"series"},{"count":[[3,69]],"inputs":[["(pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)","(*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))","(pow.f64 (cos.f64 x) 2/3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 0) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (*.f64 0 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 14/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 14/3)) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) 0) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (*.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (*.f64 0 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)) (pow.f64 (cbrt.f64 (cos.f64 x)) 14/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)) (pow.f64 (cbrt.f64 (cos.f64 x)) 14/3))) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 14/3) (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3))) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 14/3) (pow.f64 (cos.f64 x) 2/3))) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3))) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))) (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 14/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3))) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 14/3)) (cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) 0) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2/3) (*.f64 (pow.f64 (cos.f64 x) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cos.f64 x) 2/3)) (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 x) 2/3) (*.f64 0 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) (cbrt.f64 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 5))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (cbrt.f64 (pow.f64 (cos.f64 x) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 5) (cbrt.f64 (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) 4/3) 2) (cbrt.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 x) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 x))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (cos.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 2))))))"]],"rules":[["egg-rr",26],["egg-rr",26],["egg-rr",17]],"time":31.73681640625,"type":"rewrite"},{"count":[[105,90]],"inputs":[["1","(+.f64 1 (*.f64 -7/18 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -7/18 (pow.f64 x 2)) (*.f64 7/648 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -7/18 (pow.f64 x 2)) (+.f64 (*.f64 -329/174960 (pow.f64 x 6)) (*.f64 7/648 (pow.f64 x 4)))))","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","1","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) 1)","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (*.f64 -1/405 (pow.f64 x 6))))","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -1/405 (pow.f64 x 6)) (*.f64 -1/1701 (pow.f64 x 8)))))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -7/18 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -7/18 1)","(+.f64 1 (+.f64 (*.f64 -7/18 (pow.f64 x 2)) (*.f64 7/648 (pow.f64 x 4))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 7/648 (*.f64 -7/18 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -7/18 (pow.f64 x 2)) (+.f64 (*.f64 -329/174960 (pow.f64 x 6)) (*.f64 7/648 (pow.f64 x 4)))))","(+.f64 (fma.f64 (*.f64 x x) -7/18 1) (fma.f64 -329/174960 (pow.f64 x 6) (*.f64 7/648 (pow.f64 x 4))))","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","(pow.f64 (pow.f64 (cos.f64 x) 7) 1/9)","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) -1/2 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 (pow.f64 x 4) 1/24 (*.f64 -1/2 (*.f64 x x))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 1) (fma.f64 1/24 (pow.f64 x 4) (*.f64 -1/720 (pow.f64 x 6))))","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","(cos.f64 x)","1","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) 1)","(fma.f64 -1/3 (*.f64 x x) 1)","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (*.f64 -1/405 (pow.f64 x 6))))","(fma.f64 (*.f64 x x) -1/3 (fma.f64 -1/405 (pow.f64 x 6) 1))","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -1/405 (pow.f64 x 6)) (*.f64 -1/1701 (pow.f64 x 8)))))","(+.f64 (fma.f64 -1/3 (*.f64 x x) 1) (fma.f64 -1/405 (pow.f64 x 6) (*.f64 -1/1701 (pow.f64 x 8))))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))","(pow.f64 (pow.f64 (cos.f64 x) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 x) 2))"]],"time":106.89404296875,"type":"simplify"},{"compiler":[[2530,1330]],"time":28.172119140625,"type":"eval"},{"alts":[["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))","done",0.02734375],["(*.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (/.f64 (sinh.f64 y) y))","done",17.603553808610656],["(*.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (/.f64 (sinh.f64 y) y))","done",17.62242128907377]],"compiler":[[9,6],[22,15],[18,13]],"count":[[122,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[119,0],"picked":[1,1]}],"min-error":[0.015625],"time":26.56591796875,"type":"prune"},{"accuracy":[0.02734375],"baseline":[0.02734375],"branch":[["x",0.02734375,1],["y",0.02734375,1],["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))",0.02734375,1],["(cos.f64 x)",0.02734375,1],["(/.f64 (sinh.f64 y) y)",0.02734375,1]],"compiler":[[3,2],[3,2],[9,6],[4,3],[6,4],[71,33]],"count":[[5,1]],"inputs":[["(*.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (/.f64 (sinh.f64 y) y))","(*.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2/3)) (pow.f64 (cbrt.f64 (cos.f64 x)) 7/3)) (/.f64 (sinh.f64 y) y))","(*.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 x) 2/3) (cbrt.f64 (cbrt.f64 (cos.f64 x)))) (cbrt.f64 (pow.f64 (cos.f64 x) 2/3))) (/.f64 (sinh.f64 y) y))","(*.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 3) (/.f64 (sinh.f64 y) y))","(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))"]],"link":["."],"name":["Linear.Quaternion:$csin from linear-1.19.1.3"],"oracle":[17.693103857452865],"outputs":[["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))"]],"time":15.97509765625,"times":[["x",3.388916015625],["y",3.363037109375],["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))",2.973876953125],["(cos.f64 x)",2.928955078125],["(/.f64 (sinh.f64 y) y)",1.86279296875]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 x) (/.f64 (sinh.f64 y) y))"]],"stop":[["done",1]],"time":19.23583984375,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":8.18994140625,"type":"end"}]
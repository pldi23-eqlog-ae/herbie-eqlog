[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.7510979175567627,0.0014641284942626953,0.2474379539489746],[11,0.7506098747253418,0.0029282569885253906,0.2464618682861328],[10,0.7496337890625,0.005856513977050781,0.24450969696044922],[9,0.7457294464111328,0.011713027954101563,0.24255752563476563],[8,0.7418251037597656,0.023426055908203125,0.23474884033203125],[7,0.7340164184570313,0.04685211181640625,0.2191314697265625],[6,0.7183990478515625,0.0937042236328125,0.187896728515625],[5,0.687164306640625,0.187408447265625,0.12542724609375],[4,0.62469482421875,0.37481689453125,0.00048828125],[3,0.2498779296875,0.7496337890625,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.90185546875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.430908203125,12],["body",512,"valid",102.0068359375,1414],["body",1024,"valid",345.087158203125,2679],["body",2048,"valid",45.413818359375,284],["body",256,"valid",128.8154296875,3879]],"time":631.194091796875,"type":"sample"},{"compiler":[[7,5]],"inputs":[["0"],["(/.f64 (-.f64 (exp.f64 x) 1) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)"]],"symmetry":[[]],"time":56.98193359375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 (exp.f64 x) 1) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)"]],"time":19.012939453125,"type":"simplify"},{"compiler":[[11,7]],"time":0.403076171875,"type":"eval"},{"alts":[["(/.f64 (expm1.f64 x) x)","next",0.0078125]],"compiler":[[5,3],[5,3]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.85205078125,"type":"prune"},{"compiler":[[8,3]],"locations":[["(/.f64 (expm1.f64 x) x)",0.0078125,true]],"time":2.35302734375,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (expm1.f64 x) x)","x","-inf",0.517822265625],["(/.f64 (expm1.f64 x) x)","x","inf",0.4541015625],["(/.f64 (expm1.f64 x) x)","x","0",0.391845703125]],"time":1.411865234375,"type":"series"},{"count":[[1,117]],"inputs":[["(/.f64 (expm1.f64 x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 x) x) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (expm1.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (expm1.f64 x) x) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 x) (/.f64 (exp.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 x) x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (expm1.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x))) (pow.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x))) 4) (cbrt.f64 (/.f64 (expm1.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (expm1.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3)) (/.f64 (pow.f64 (expm1.f64 x) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/3) (*.f64 (pow.f64 x -2/3) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (expm1.f64 x) 2/3) (cbrt.f64 x)) (cbrt.f64 (*.f64 (expm1.f64 x) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (expm1.f64 x) (pow.f64 x -2))) (/.f64 (pow.f64 (expm1.f64 x) 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 (exp.f64 x) (neg.f64 x)) x) (/.f64 1 (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (exp.f64 x) (pow.f64 x 2/3)) (/.f64 x (cbrt.f64 x))) (/.f64 1 (*.f64 x (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (pow.f64 x 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (cbrt.f64 (expm1.f64 x))) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (expm1.f64 (*.f64 x 3)) -1) (/.f64 1 (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -1/3) (expm1.f64 (*.f64 x 3))) (/.f64 1 (*.f64 (pow.f64 x 2/3) (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 (*.f64 x 3)) (cbrt.f64 x)) (/.f64 1 (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (*.f64 0 (cbrt.f64 (/.f64 (expm1.f64 x) (neg.f64 x)))))) (cbrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) (pow.f64 (/.f64 (expm1.f64 x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (cbrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -1/3)) (*.f64 (neg.f64 (pow.f64 x -2/3)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (expm1.f64 x)) (/.f64 (pow.f64 (expm1.f64 x) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (expm1.f64 x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/3) (*.f64 (expm1.f64 x) (pow.f64 x -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (expm1.f64 x) (pow.f64 x -2/3)) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (expm1.f64 x) 2/3) x) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (expm1.f64 x) 2/3) (/.f64 (cbrt.f64 (expm1.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 x) (neg.f64 x))) (neg.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -1/3)) (*.f64 (expm1.f64 x) (neg.f64 (pow.f64 x -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (expm1.f64 x)) x) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -2/3)) (/.f64 (expm1.f64 x) (cbrt.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (expm1.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (expm1.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (*.f64 x 3)) (/.f64 1 (*.f64 x (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (*.f64 x 3)) (/.f64 1 (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (expm1.f64 x))) (pow.f64 (/.f64 (expm1.f64 x) x) 2/3)) (neg.f64 (pow.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (cbrt.f64 (neg.f64 (expm1.f64 x)))) (neg.f64 (pow.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (expm1.f64 (*.f64 x 3))) (/.f64 1 (*.f64 (neg.f64 x) (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (exp.f64 x) x) x) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) (cbrt.f64 (neg.f64 x))) (neg.f64 (pow.f64 x -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 (*.f64 x 3)) x) (/.f64 1 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 x) (expm1.f64 (*.f64 x 3))) (/.f64 1 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (expm1.f64 x))) (/.f64 (pow.f64 (expm1.f64 x) 2/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (expm1.f64 x) 2/3)) (/.f64 (cbrt.f64 (expm1.f64 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x -1/3) (expm1.f64 x)) (pow.f64 x -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) (pow.f64 (expm1.f64 x) 2/3)) (pow.f64 x -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x)) (pow.f64 x -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -2/3) (/.f64 (expm1.f64 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (expm1.f64 (*.f64 x 3))) (*.f64 (pow.f64 x 2/3) (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (expm1.f64 (*.f64 x 3)) -1) (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 (*.f64 x 3)) (cbrt.f64 x)) (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (exp.f64 x) (neg.f64 x)) x) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 x) (pow.f64 x 2/3)) (/.f64 x (cbrt.f64 x))) (*.f64 x (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (cbrt.f64 (neg.f64 (expm1.f64 x)))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 x) (expm1.f64 (*.f64 x 3))) (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (expm1.f64 x))) (pow.f64 (/.f64 (expm1.f64 x) x) 2/3)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 (*.f64 x 3)) x) (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (exp.f64 x) (neg.f64 x)) x) (*.f64 1 (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 x) (pow.f64 x 2/3)) (/.f64 x (cbrt.f64 x))) (*.f64 1 (*.f64 x (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (expm1.f64 (*.f64 x 3)) -1) (*.f64 1 (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (expm1.f64 (*.f64 x 3))) (*.f64 1 (*.f64 (pow.f64 x 2/3) (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 (*.f64 x 3)) (cbrt.f64 x)) (*.f64 1 (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 x -1/3) (expm1.f64 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 x) (cbrt.f64 (neg.f64 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) (pow.f64 (expm1.f64 x) 2/3))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 (exp.f64 x) (neg.f64 x)) x)) (neg.f64 (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (exp.f64 x) (pow.f64 x 2/3)) (/.f64 x (cbrt.f64 x)))) (neg.f64 (*.f64 x (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (expm1.f64 x) (neg.f64 (pow.f64 x -2/3))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (cbrt.f64 (expm1.f64 x)))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (expm1.f64 (*.f64 x 3)) -1)) (neg.f64 (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 x -1/3) (expm1.f64 (*.f64 x 3)))) (neg.f64 (*.f64 (pow.f64 x 2/3) (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 x 3)) (cbrt.f64 x))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2) (/.f64 (expm1.f64 x) (cbrt.f64 x)))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2) (neg.f64 (expm1.f64 x)))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x)) (pow.f64 (/.f64 (expm1.f64 x) x) 2))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (neg.f64 (expm1.f64 x)) (pow.f64 (/.f64 (expm1.f64 x) x) 2))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 x 3)) (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (expm1.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (cbrt.f64 (expm1.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) (pow.f64 (expm1.f64 x) 2/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 (*.f64 x 3))) (*.f64 (neg.f64 x) (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 x 3)) (*.f64 x (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (expm1.f64 x) (pow.f64 x -2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 x) x) x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 x 3)) (*.f64 1 (*.f64 x (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 x 3)) (*.f64 1 (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 (*.f64 x 3))) (*.f64 1 (*.f64 (neg.f64 x) (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 x) (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 (*.f64 x 3))) (neg.f64 (*.f64 x (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 (*.f64 x 3))) (neg.f64 (*.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (neg.f64 (expm1.f64 x))) (pow.f64 (/.f64 (expm1.f64 x) x) 2/3))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (cbrt.f64 (neg.f64 (expm1.f64 x))))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 x 3)) (neg.f64 (*.f64 (neg.f64 x) (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (exp.f64 x) x) x)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (expm1.f64 (*.f64 x 3)) x)) (neg.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 1 x) (expm1.f64 (*.f64 x 3)))) (neg.f64 (+.f64 (exp.f64 x) (+.f64 (pow.f64 (*.f64 (E.f64) (E.f64)) x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (expm1.f64 x) (pow.f64 (/.f64 (expm1.f64 x) x) 2))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2) (expm1.f64 x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (expm1.f64 x) (neg.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (expm1.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3))))))"]],"rules":[["egg-rr",117]],"time":49.451171875,"type":"rewrite"},{"count":[[129,125]],"inputs":[["1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(+.f64 (*.f64 x (+.f64 (*.f64 x 1/6) 1/2)) 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","(+.f64 (*.f64 x (+.f64 (*.f64 x 1/6) 1/2)) (fma.f64 (pow.f64 x 3) 1/24 1))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)"]],"time":65.4609375,"type":"simplify"},{"compiler":[[1706,814]],"time":20.614990234375,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)","next",0.23246005861065205],["(/.f64 (expm1.f64 x) x)","done",0.0078125]],"compiler":[[8,6],[5,3],[8,6]],"count":[[126,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[125,1],"picked":[1,1]}],"min-error":[0],"time":24.243896484375,"type":"prune"},{"compiler":[[21,7]],"locations":[["(/.f64 (expm1.f64 x) x)",0.0078125,false],["(cbrt.f64 (/.f64 (expm1.f64 x) x))",0.0390625,true],["(pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)",0.23636630861065208,true]],"time":5.364990234375,"type":"localize"},{"count":[[2,8]],"series":[["(cbrt.f64 (/.f64 (expm1.f64 x) x))","x","-inf",0.36083984375],["(cbrt.f64 (/.f64 (expm1.f64 x) x))","x","inf",0.62109375],["(cbrt.f64 (/.f64 (expm1.f64 x) x))","x","0",0.218017578125],["(pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)","x","-inf",1.0400390625],["(pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)","x","inf",0.947021484375],["(pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)","x","0",0.471923828125]],"time":3.760009765625,"type":"series"},{"count":[[2,121]],"inputs":[["(pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)","(cbrt.f64 (/.f64 (expm1.f64 x) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (expm1.f64 x) x) (*.f64 (/.f64 (expm1.f64 x) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (expm1.f64 x) x) 0) (/.f64 (expm1.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (expm1.f64 x) x) (*.f64 0 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (expm1.f64 x) x)) (/.f64 (expm1.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (exp.f64 x) x) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 x) x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 x)) (/.f64 (expm1.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (expm1.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (expm1.f64 x)) (/.f64 (pow.f64 (expm1.f64 x) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) (pow.f64 (/.f64 (expm1.f64 x) x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (cbrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 7/3) (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x))) (pow.f64 (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 4/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/3) (/.f64 (expm1.f64 x) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (expm1.f64 x) 2/3) x) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3)) (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 7/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) (pow.f64 x 2/3)) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 4/3) 2) (cbrt.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (cbrt.f64 (cbrt.f64 x))) (/.f64 (cbrt.f64 (expm1.f64 x)) (cbrt.f64 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (expm1.f64 x)) (cbrt.f64 (cbrt.f64 x))) (/.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (cbrt.f64 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 x) (neg.f64 x))) (/.f64 (pow.f64 (expm1.f64 x) 2/3) (neg.f64 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (neg.f64 (expm1.f64 x))) 1) (/.f64 (pow.f64 (expm1.f64 x) 2/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -1/3)) (/.f64 (neg.f64 (expm1.f64 x)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 x) (neg.f64 x))) (/.f64 (neg.f64 (pow.f64 (expm1.f64 x) 2/3)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (expm1.f64 x)) -1) (/.f64 (neg.f64 (pow.f64 (expm1.f64 x) 2/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 x -1/3)) (/.f64 (expm1.f64 x) (neg.f64 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (expm1.f64 x) 2/3) (/.f64 (cbrt.f64 (expm1.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (expm1.f64 x) 2/3) (cbrt.f64 x)) (/.f64 (cbrt.f64 (expm1.f64 x)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (expm1.f64 x) 2/3) -1) (/.f64 (cbrt.f64 (expm1.f64 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) -2) (/.f64 (expm1.f64 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (expm1.f64 x)) (pow.f64 x 2/3)) (/.f64 (pow.f64 (expm1.f64 x) 2/3) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (expm1.f64 x)) x) (pow.f64 (expm1.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (expm1.f64 x)) -1) (/.f64 (pow.f64 (expm1.f64 x) 2/3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 x) -2)) (/.f64 (neg.f64 (expm1.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (expm1.f64 x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (neg.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) -1) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (expm1.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (expm1.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) (neg.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 x) (neg.f64 x)) (neg.f64 x)) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 x) (pow.f64 x 2/3)) (*.f64 x (pow.f64 x -1/3))) (*.f64 x (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (+.f64 (exp.f64 (*.f64 x 3)) -1)) (*.f64 (neg.f64 x) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (exp.f64 (*.f64 x 3)) -1) (*.f64 x (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (+.f64 (exp.f64 (*.f64 x 3)) -1)) (*.f64 (pow.f64 x 2/3) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (exp.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 (*.f64 x 3)) -1) -1) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (exp.f64 x) 1)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 (*.f64 x 3)) -1) 1) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (exp.f64 x) 1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 (*.f64 x 3)) -1) (pow.f64 x -1/3)) (*.f64 (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (exp.f64 x) 1)) (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 x) (pow.f64 x 2/3)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) (pow.f64 (expm1.f64 x) 2/3)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 x) (+.f64 (exp.f64 (*.f64 x 3)) -1)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3) (cbrt.f64 (neg.f64 (expm1.f64 x)))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 x -1/3) (expm1.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 (*.f64 x 3)) -1) (/.f64 1 x)) (fma.f64 (exp.f64 x) (exp.f64 x) (+.f64 (exp.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (expm1.f64 x))) (pow.f64 (/.f64 (expm1.f64 x) x) 2/3)) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (expm1.f64 x))) (pow.f64 (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 4/3) 2)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (expm1.f64 x) (pow.f64 x 2/3)) 1) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (expm1.f64 x) (pow.f64 x 2/3)) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (expm1.f64 x) (pow.f64 x 2/3)) 1) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (expm1.f64 x)) (cbrt.f64 x)) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 x) -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x)) 1) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 2/3))) (pow.f64 (cbrt.f64 (pow.f64 x 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 x) x) x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (expm1.f64 x))) (/.f64 (pow.f64 (expm1.f64 x) 2/3) (cbrt.f64 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2/3) (cbrt.f64 x)) (cbrt.f64 (neg.f64 (expm1.f64 x)))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2/3) (cbrt.f64 x)) (cbrt.f64 (expm1.f64 x))) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (expm1.f64 x) (pow.f64 x 2/3))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x))) (neg.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (expm1.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (expm1.f64 x)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (expm1.f64 x) (neg.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 x) (neg.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 1 x) (/.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) (*.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 0) (cbrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) (*.f64 0 (cbrt.f64 (/.f64 (expm1.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (/.f64 (expm1.f64 x) x))) (cbrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x))) (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (expm1.f64 x)) (pow.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/3) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (expm1.f64 x))) (neg.f64 (pow.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cbrt.f64 (expm1.f64 x))) 1) (/.f64 (cbrt.f64 (pow.f64 (expm1.f64 x) 2/3)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (cbrt.f64 x))) (/.f64 (cbrt.f64 (expm1.f64 x)) (cbrt.f64 (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)))) (cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 4/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (expm1.f64 x))) (cbrt.f64 (/.f64 (pow.f64 (expm1.f64 x) 2/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 7/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -1/3)) (cbrt.f64 (/.f64 (expm1.f64 x) (pow.f64 x 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (/.f64 (expm1.f64 x) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 x) (neg.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (expm1.f64 x))) 1) (*.f64 (cbrt.f64 (neg.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (expm1.f64 x) (pow.f64 x 2/3))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (expm1.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (expm1.f64 x))) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3)) (cbrt.f64 (cbrt.f64 (expm1.f64 x)))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (expm1.f64 x))) 1) (cbrt.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (expm1.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2/3))) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (expm1.f64 x)) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (expm1.f64 x) (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 x) x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (/.f64 (expm1.f64 x) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (expm1.f64 x) x))))))"]],"rules":[["egg-rr",34],["egg-rr",87]],"time":33.698974609375,"type":"rewrite"},{"count":[[129,134]],"inputs":[["1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","1","(+.f64 1 (*.f64 1/6 x))","(+.f64 1 (+.f64 (*.f64 1/6 x) (*.f64 1/36 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 1/6 x) (+.f64 (*.f64 1/324 (pow.f64 x 3)) (*.f64 1/36 (pow.f64 x 2)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(+.f64 (*.f64 x (+.f64 1/2 (*.f64 1/6 x))) 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","(+.f64 (*.f64 x (+.f64 1/2 (*.f64 1/6 x))) (fma.f64 1/24 (pow.f64 x 3) 1))","1","(+.f64 1 (*.f64 1/6 x))","(fma.f64 x 1/6 1)","(+.f64 1 (+.f64 (*.f64 1/6 x) (*.f64 1/36 (pow.f64 x 2))))","(+.f64 1 (*.f64 x (+.f64 (*.f64 x 1/36) 1/6)))","(+.f64 1 (+.f64 (*.f64 1/6 x) (+.f64 (*.f64 1/324 (pow.f64 x 3)) (*.f64 1/36 (pow.f64 x 2)))))","(+.f64 (fma.f64 x 1/6 1) (*.f64 (*.f64 x x) (+.f64 1/36 (*.f64 x 1/324))))"]],"time":58.149169921875,"type":"simplify"},{"compiler":[[3684,1936]],"time":45.56298828125,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)","done",0.23246005861065205],["(/.f64 (expm1.f64 x) x)","done",0.0078125]],"compiler":[[8,6],[5,3]],"count":[[261,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[259,0],"picked":[1,1]}],"min-error":[0],"time":79.847900390625,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["(/.f64 (-.f64 (exp.f64 x) 1) x)",0.0078125,1]],"compiler":[[2,1],[7,5],[18,10]],"count":[[3,1]],"inputs":[["(pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)"]],"link":["."],"name":["Kahan's exp quotient"],"oracle":[40.65288624843034],"outputs":[["(/.f64 (expm1.f64 x) x)"]],"time":5.864013671875,"times":[["x",3.06689453125],["(/.f64 (-.f64 (exp.f64 x) 1) x)",2.052001953125]],"type":"regimes"},{"compiler":[[5,3]],"inputs":[["(/.f64 (expm1.f64 x) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (expm1.f64 x) x)"]],"stop":[["done",1]],"time":41.119140625,"type":"simplify"},{"time":0.02197265625,"type":"soundness"},{"compiler":[[5,3]],"remove-preprocessing":[[]],"time":7.48095703125,"type":"end"}]
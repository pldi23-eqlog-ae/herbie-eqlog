[{"compiler":[[39,31]],"method":["search"],"sampling":[[12,2.793967723814632e-12,1.8626451492097546e-13,0.9999999999970197],[11,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[10,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[9,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[8,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[7,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[6,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[5,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[4,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[3,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[2,0.0,2.9802322387356077e-12,0.9999999999970197],[1,0.0,2.9802322387356077e-12,0.9999999999970197],[0,0.0,2.9802322387356077e-12,0.9999999999970197]],"time":45.010009765625,"type":"analyze"},{"outcomes":[["body",256,"valid",758.89892578125,8256]],"time":766.383056640625,"type":"sample"},{"compiler":[[16,14]],"inputs":[["0","1","2"],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 cosTheta_i)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) cosTheta_i)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u2)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 cosTheta_i)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 cosTheta_i)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) cosTheta_i)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) cosTheta_i)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u2)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u1)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u2)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u1)))"]],"symmetry":[[]],"time":73.781005859375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))"]],"time":19.68896484375,"type":"simplify"},{"compiler":[[28,22]],"time":0.48095703125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","next",0.36471219614939776],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","fresh",11.52897205062917]],"compiler":[[15,12],[16,14],[15,12],[16,14]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.36080594614939776],"time":1.487060546875,"type":"prune"},{"compiler":[[46,12]],"locations":[["(cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))",0.08473252125455484,true],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))",0.15625,true],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)",0.23828125,true],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))",0.30859375,true]],"time":10.291015625,"type":"localize"},{"count":[[4,24]],"series":[["(cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))","u2","-inf",0.1640625],["(cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))","u2","inf",0.149169921875],["(cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))","u2","0",0.22607421875],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","-inf",0.576171875],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","inf",0.905029296875],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","0",0.464111328125],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","u2","-inf",0.251953125],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","u2","inf",0.386962890625],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","u2","0",0.390869140625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","-inf",0.486083984375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","inf",15.508056640625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","0",1.046875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","-inf",1.43017578125],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","inf",1.33203125],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","0",1.25390625]],"time":24.822998046875,"type":"series"},{"count":[[4,134]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)","(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","(cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 0) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 0 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (PI.f64) u2) (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 0) (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1/2) (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) (*.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (PI.f64) u2) 1) (*.f64 (*.f64 (PI.f64) u2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 1/2 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) (*.f64 0 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u2 (+.f64 (PI.f64) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 2)) (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (PI.f64) (PI.f64))) (*.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 u2) (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) u2) (cbrt.f64 (+.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))) (cbrt.f64 u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 u2 (cbrt.f64 (+.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 u2 u2) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 u2)) (cbrt.f64 (*.f64 u2 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) (+.f64 u2 u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 u2 u2)) (*.f64 (+.f64 (PI.f64) (PI.f64)) (cbrt.f64 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 4 (*.f64 (PI.f64) (PI.f64)))) (*.f64 u2 (cbrt.f64 (+.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) u2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (PI.f64) u2 (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 u2 (PI.f64) (*.f64 (PI.f64) u2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 0) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 1/2) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 1/2 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 0 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (fabs.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) (fabs.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 0) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 0 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 0 (neg.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 0) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 1/2 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 0 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (sin.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))"]],"rules":[["egg-rr",22],["egg-rr",42],["egg-rr",38],["egg-rr",32]],"time":36.183837890625,"type":"rewrite"},{"count":[[158,144]],"inputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","1","(+.f64 1 (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))))","(+.f64 1 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))))","(+.f64 1 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (+.f64 (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (*.f64 -4/45 (*.f64 (pow.f64 u2 6) (pow.f64 (PI.f64) 6))))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (+.f64 (PI.f64) (PI.f64)))","1","(+.f64 1 (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))))","(fma.f64 (pow.f64 (*.f64 u2 (PI.f64)) 2) -2 1)","(+.f64 1 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))))","(+.f64 (fma.f64 (pow.f64 (*.f64 u2 (PI.f64)) 2) -2 1) (*.f64 2/3 (pow.f64 (*.f64 u2 (PI.f64)) 4)))","(+.f64 1 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (+.f64 (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (*.f64 -4/45 (*.f64 (pow.f64 u2 6) (pow.f64 (PI.f64) 6))))))","(+.f64 1 (fma.f64 2/3 (pow.f64 (*.f64 u2 (PI.f64)) 4) (fma.f64 -4/45 (pow.f64 (*.f64 u2 (PI.f64)) 6) (*.f64 -2 (pow.f64 (*.f64 u2 (PI.f64)) 2)))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (+.f64 (PI.f64) (PI.f64))))"]],"time":98.5830078125,"type":"simplify"},{"compiler":[[2579,632]],"time":17.696044921875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (cbrt.f64 u2) (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))))))","fresh",0.4206951238684589],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 3)","fresh",0.8938092407374292],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (-.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (sin.f64 (*.f64 (PI.f64) u2)))))","fresh",0.46162499612160207],["(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","next",0.39596219614939776],["(*.f64 (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))","fresh",0.5346722547600499],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))","fresh",0.5834685559175877],["(*.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1/3) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",1.3638151791992448],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",0.41939969614939776],["(*.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))","fresh",0.4278759656862818],["(*.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","fresh",0.486839784065376]],"compiler":[[21,16],[18,15],[28,15],[17,14],[31,18],[18,15],[18,15],[17,14],[26,17],[22,15],[21,16],[18,15],[28,15],[17,14],[31,18],[18,15],[18,15],[17,14],[26,17],[22,15]],"count":[[146,10]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[144,10],"picked":[1,0]}],"min-error":[0.04032003162065376],"time":44.116943359375,"type":"prune"},{"compiler":[[53,22]],"locations":[["(cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))",0.08473252125455484,false],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)",0.23828125,false],["(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))",0.30859375,true],["(pow.f64 (log1p.f64 (neg.f64 u1)) 2)",0.46484375,true]],"time":15.406982421875,"type":"localize"},{"count":[[2,28]],"series":[["(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","-inf",0.453125],["(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","inf",0.443115234375],["(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","0",9.39501953125],["(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","-inf",0.927978515625],["(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","inf",0.787109375],["(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","0",19.781005859375],["(pow.f64 (log1p.f64 (neg.f64 u1)) 2)","u1","-inf",0.411865234375],["(pow.f64 (log1p.f64 (neg.f64 u1)) 2)","u1","inf",0.47705078125],["(pow.f64 (log1p.f64 (neg.f64 u1)) 2)","u1","0",0.3310546875]],"time":33.22802734375,"type":"series"},{"count":[[2,56]],"inputs":[["(pow.f64 (log1p.f64 (neg.f64 u1)) 2)","(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 0) (pow.f64 (log1p.f64 (neg.f64 u1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) (*.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (log1p.f64 (neg.f64 u1)) 2)) (pow.f64 (log1p.f64 (neg.f64 u1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) (*.f64 0 (pow.f64 (log1p.f64 (neg.f64 u1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 u1)) (log1p.f64 (neg.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 u1))) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (neg.f64 (log1p.f64 (neg.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 u1))) (+.f64 2 3)) (cbrt.f64 (log1p.f64 (neg.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 1) (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2)) (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 4)) (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log1p.f64 (neg.f64 u1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 u1))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 3) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 3) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (neg.f64 u1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 0) (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 0 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4)) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) 2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) 2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cbrt.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4)) (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2)) (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4))) (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) 2)) (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))))))"]],"rules":[["egg-rr",28],["egg-rr",28]],"time":24.983154296875,"type":"rewrite"},{"count":[[84,98]],"inputs":[["(pow.f64 u1 2)","(+.f64 (pow.f64 u1 2) (pow.f64 u1 3))","(+.f64 (pow.f64 u1 2) (+.f64 (*.f64 11/12 (pow.f64 u1 4)) (pow.f64 u1 3)))","(+.f64 (*.f64 5/6 (pow.f64 u1 5)) (+.f64 (pow.f64 u1 2) (+.f64 (*.f64 11/12 (pow.f64 u1 4)) (pow.f64 u1 3))))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) 2)","(+.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) 2) (*.f64 -2 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) u1)))","(+.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) 2) (+.f64 (*.f64 -1 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) (pow.f64 u1 2))) (+.f64 (/.f64 1 (pow.f64 u1 2)) (*.f64 -2 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) u1)))))","(+.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) 2) (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) (pow.f64 u1 2))) (+.f64 (/.f64 1 (pow.f64 u1 3)) (+.f64 (*.f64 -2/3 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) (pow.f64 u1 3))) (*.f64 -2 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) u1)))))))","(pow.f64 (log.f64 (/.f64 -1 u1)) 2)","(+.f64 (*.f64 2 (/.f64 (log.f64 (/.f64 -1 u1)) u1)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u1)) (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (*.f64 2 (/.f64 (log.f64 (/.f64 -1 u1)) u1)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u1)) (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -2/3 (log.f64 (/.f64 -1 u1))) 1) (pow.f64 u1 3))) (+.f64 (*.f64 2 (/.f64 (log.f64 (/.f64 -1 u1)) u1)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))))","(*.f64 (sqrt.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))","(+.f64 (*.f64 (sqrt.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) u1))))","(+.f64 (*.f64 (sqrt.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (*.f64 (+.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))))) 2)) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) (pow.f64 u1 2)))) (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) u1)))))","(+.f64 (*.f64 (sqrt.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (*.f64 (+.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))))) 2)) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) (pow.f64 u1 2)))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (+.f64 1/3 (*.f64 1/2 (/.f64 (+.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))))) 2)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))))) (pow.f64 u1 3)))) (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) u1))))))","(sqrt.f64 (log.f64 (-.f64 1 u1)))","(+.f64 (*.f64 -2 (*.f64 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(+.f64 (*.f64 -2 (*.f64 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (sqrt.f64 (log.f64 (-.f64 1 u1)))))","(+.f64 (*.f64 -2 (*.f64 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (+.f64 (*.f64 -4/45 (*.f64 (*.f64 (pow.f64 u2 6) (pow.f64 (PI.f64) 6)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (sqrt.f64 (log.f64 (-.f64 1 u1))))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 u1 2)","(*.f64 u1 u1)","(+.f64 (pow.f64 u1 2) (pow.f64 u1 3))","(fma.f64 u1 u1 (pow.f64 u1 3))","(+.f64 (pow.f64 u1 2) (+.f64 (*.f64 11/12 (pow.f64 u1 4)) (pow.f64 u1 3)))","(fma.f64 u1 u1 (fma.f64 11/12 (pow.f64 u1 4) (pow.f64 u1 3)))","(+.f64 (*.f64 5/6 (pow.f64 u1 5)) (+.f64 (pow.f64 u1 2) (+.f64 (*.f64 11/12 (pow.f64 u1 4)) (pow.f64 u1 3))))","(fma.f64 (pow.f64 u1 5) 5/6 (fma.f64 u1 u1 (fma.f64 11/12 (pow.f64 u1 4) (pow.f64 u1 3))))","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (log.f64 u1)) 2)","(+.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) 2) (*.f64 -2 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) u1)))","(fma.f64 -2 (/.f64 (+.f64 (log.f64 -1) (log.f64 u1)) u1) (pow.f64 (+.f64 (log.f64 -1) (log.f64 u1)) 2))","(+.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) 2) (+.f64 (*.f64 -1 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) (pow.f64 u1 2))) (+.f64 (/.f64 1 (pow.f64 u1 2)) (*.f64 -2 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) u1)))))","(+.f64 (/.f64 (+.f64 (neg.f64 (+.f64 (log.f64 -1) (log.f64 u1))) 1) (*.f64 u1 u1)) (fma.f64 -2 (/.f64 (+.f64 (log.f64 -1) (log.f64 u1)) u1) (pow.f64 (+.f64 (log.f64 -1) (log.f64 u1)) 2)))","(+.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) 2) (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) (pow.f64 u1 2))) (+.f64 (/.f64 1 (pow.f64 u1 3)) (+.f64 (*.f64 -2/3 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) (pow.f64 u1 3))) (*.f64 -2 (/.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))) u1)))))))","(+.f64 (pow.f64 (+.f64 (log.f64 -1) (log.f64 u1)) 2) (+.f64 (/.f64 (+.f64 (neg.f64 (+.f64 (log.f64 -1) (log.f64 u1))) 1) (*.f64 u1 u1)) (+.f64 (/.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (log.f64 -1) (log.f64 u1)))) (pow.f64 u1 3)) (/.f64 (*.f64 -2 (+.f64 (log.f64 -1) (log.f64 u1))) u1))))","(pow.f64 (log.f64 (/.f64 -1 u1)) 2)","(pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)","(+.f64 (*.f64 2 (/.f64 (log.f64 (/.f64 -1 u1)) u1)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))","(fma.f64 2 (/.f64 (neg.f64 (log.f64 (neg.f64 u1))) u1) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u1)) (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (*.f64 2 (/.f64 (log.f64 (/.f64 -1 u1)) u1)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))))","(+.f64 (*.f64 (pow.f64 u1 -2) (+.f64 (neg.f64 (log.f64 (neg.f64 u1))) 1)) (fma.f64 2 (/.f64 (neg.f64 (log.f64 (neg.f64 u1))) u1) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))","(+.f64 (/.f64 (log.f64 (/.f64 -1 u1)) (pow.f64 u1 2)) (+.f64 (/.f64 1 (pow.f64 u1 2)) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -2/3 (log.f64 (/.f64 -1 u1))) 1) (pow.f64 u1 3))) (+.f64 (*.f64 2 (/.f64 (log.f64 (/.f64 -1 u1)) u1)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))))","(+.f64 (*.f64 (pow.f64 u1 -2) (+.f64 (neg.f64 (log.f64 (neg.f64 u1))) 1)) (-.f64 (fma.f64 2 (/.f64 (neg.f64 (log.f64 (neg.f64 u1))) u1) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)) (*.f64 (fma.f64 -2/3 (neg.f64 (log.f64 (neg.f64 u1))) -1) (pow.f64 u1 -3))))","(*.f64 (sqrt.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))","(*.f64 (sqrt.f64 (+.f64 (log.f64 -1) (log.f64 u1))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))","(+.f64 (*.f64 (sqrt.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) u1))))","(fma.f64 (sqrt.f64 (+.f64 (log.f64 -1) (log.f64 u1))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (log.f64 u1)))) (/.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) u1))))","(+.f64 (*.f64 (sqrt.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (*.f64 (+.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))))) 2)) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) (pow.f64 u1 2)))) (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) u1)))))","(fma.f64 (sqrt.f64 (+.f64 (log.f64 -1) (log.f64 u1))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (*.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (log.f64 u1))))) (+.f64 (*.f64 (*.f64 (+.f64 1/2 (*.f64 (*.f64 -1/2 -1/2) (/.f64 1 (+.f64 (log.f64 -1) (log.f64 u1))))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) (pow.f64 u1 -2)) (/.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) u1))))","(+.f64 (*.f64 (sqrt.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (*.f64 (+.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))))) 2)) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) (pow.f64 u1 2)))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (+.f64 1/3 (*.f64 1/2 (/.f64 (+.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1))))))) 2)) (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))))) (pow.f64 u1 3)))) (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 1 u1)))))) (/.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) u1))))))","(fma.f64 (sqrt.f64 (+.f64 (log.f64 -1) (log.f64 u1))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (*.f64 -1/2 (+.f64 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (log.f64 u1)))) (+.f64 (*.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (fma.f64 1/2 (/.f64 (+.f64 1/2 (*.f64 (*.f64 -1/2 -1/2) (/.f64 1 (+.f64 (log.f64 -1) (log.f64 u1))))) (+.f64 (log.f64 -1) (log.f64 u1))) 1/3)) (pow.f64 u1 -3)) (/.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) u1))) (*.f64 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (log.f64 -1) (log.f64 u1)))) (*.f64 (+.f64 1/2 (*.f64 (*.f64 -1/2 -1/2) (/.f64 1 (+.f64 (log.f64 -1) (log.f64 u1))))) (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))) (pow.f64 u1 -2)))))","(sqrt.f64 (log.f64 (-.f64 1 u1)))","(sqrt.f64 (log1p.f64 (neg.f64 u1)))","(+.f64 (*.f64 -2 (*.f64 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (sqrt.f64 (log1p.f64 (neg.f64 u1))) (+.f64 1 (*.f64 -2 (pow.f64 (*.f64 u2 (PI.f64)) 2))))","(+.f64 (*.f64 -2 (*.f64 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (sqrt.f64 (log.f64 (-.f64 1 u1)))))","(+.f64 (*.f64 (sqrt.f64 (log1p.f64 (neg.f64 u1))) (+.f64 (*.f64 -2 (pow.f64 (*.f64 u2 (PI.f64)) 2)) (*.f64 2/3 (pow.f64 (*.f64 u2 (PI.f64)) 4)))) (sqrt.f64 (log1p.f64 (neg.f64 u1))))","(+.f64 (*.f64 -2 (*.f64 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (+.f64 (*.f64 -4/45 (*.f64 (*.f64 (pow.f64 u2 6) (pow.f64 (PI.f64) 6)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (+.f64 (*.f64 2/3 (*.f64 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4)) (sqrt.f64 (log.f64 (-.f64 1 u1))))) (sqrt.f64 (log.f64 (-.f64 1 u1))))))","(+.f64 (*.f64 (sqrt.f64 (log1p.f64 (neg.f64 u1))) (+.f64 (*.f64 -2 (pow.f64 (*.f64 u2 (PI.f64)) 2)) (*.f64 -4/45 (pow.f64 (*.f64 u2 (PI.f64)) 6)))) (*.f64 (sqrt.f64 (log1p.f64 (neg.f64 u1))) (+.f64 1 (*.f64 2/3 (pow.f64 (*.f64 u2 (PI.f64)) 4)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log1p.f64 (neg.f64 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log1p.f64 (neg.f64 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log1p.f64 (neg.f64 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log1p.f64 (neg.f64 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log1p.f64 (neg.f64 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log1p.f64 (neg.f64 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log1p.f64 (neg.f64 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log.f64 (-.f64 1 u1))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (sqrt.f64 (log1p.f64 (neg.f64 u1))))"]],"time":113.7568359375,"type":"simplify"},{"compiler":[[3921,2123]],"time":41.087158203125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (cbrt.f64 u2) (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))))))","fresh",0.4206951238684589],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 3)","fresh",0.8938092407374292],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (-.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (sin.f64 (*.f64 (PI.f64) u2)))))","fresh",0.46162499612160207],["(*.f64 (pow.f64 (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 u1))) 6) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",0.47342978638070365],["(*.f64 (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))","fresh",0.5346722547600499],["(*.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1/3) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",1.3638151791992448],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","next",0.41939969614939776],["(*.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))","fresh",0.4278759656862818],["(*.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","fresh",0.486839784065376]],"compiler":[[21,16],[18,15],[28,15],[18,15],[31,18],[18,15],[17,14],[26,17],[22,15],[21,16],[18,15],[28,15],[18,15],[31,18],[18,15],[17,14],[26,17],[22,15]],"count":[[178,9]],"kept":[{"done":[0,0],"fresh":[9,8],"new":[168,1],"picked":[1,0]}],"min-error":[0.03641378162065376],"time":40.02978515625,"type":"prune"},{"compiler":[[57,20]],"locations":[["(cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))",0.16015625,true],["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)",0.23828125,false],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))",0.30859375,true],["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)",0.36166000976844204,true]],"time":17.76318359375,"type":"localize"},{"count":[[3,12]],"series":[["(cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u1","-inf",0.590087890625],["(cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u1","inf",0.868896484375],["(cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u1","0",0.47998046875],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","-inf",0.201904296875],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","inf",0.18505859375],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u2","0",0.239990234375],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","-inf",0.345947265625],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","inf",0.47998046875],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","u1","0",0.341064453125],["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)","u1","-inf",1.19580078125],["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)","u1","inf",2.154052734375],["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)","u1","0",0.501953125]],"time":7.8349609375,"type":"series"},{"count":[[3,71]],"inputs":[["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 0) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (*.f64 0 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 2/3)) (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 2/3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 0) (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 0 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2/3) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))) (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2/3) (cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 0) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (*.f64 0 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 2/3) (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))"]],"rules":[["egg-rr",19],["egg-rr",28],["egg-rr",24]],"time":30.324951171875,"type":"rewrite"},{"count":[[83,94]],"inputs":[["(sqrt.f64 (pow.f64 u1 3))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (+.f64 (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7)))))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (+.f64 (*.f64 63/128 (sqrt.f64 (pow.f64 u1 9))) (+.f64 (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7))))))","(sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (+.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (+.f64 (*.f64 9/8 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (*.f64 3/4 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))))) (pow.f64 u1 2)))))","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (+.f64 (*.f64 -1 (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (-.f64 (+.f64 (*.f64 1/4 (-.f64 (*.f64 3 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (*.f64 2 (/.f64 1 (log.f64 (/.f64 -1 u1))))))) (*.f64 -9/8 (/.f64 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (log.f64 (/.f64 -1 u1))))) (*.f64 9/16 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))) (pow.f64 u1 3)))) (+.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (+.f64 (*.f64 9/8 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (*.f64 3/4 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))))) (pow.f64 u1 2))))))","(sqrt.f64 (log.f64 (/.f64 -1 u1)))","(+.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 1 u1))))","(+.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 1 u1))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 (-.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))))) 2)) (pow.f64 u1 2))))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 (+.f64 (*.f64 -1/2 (/.f64 (-.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))))) 2)) (log.f64 (/.f64 -1 u1)))) 1/3) (pow.f64 u1 3)))) (+.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 1 u1))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 (-.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))))) 2)) (pow.f64 u1 2)))))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (pow.f64 u1 3))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))))","(fma.f64 3/4 (sqrt.f64 (pow.f64 u1 5)) (sqrt.f64 (pow.f64 u1 3)))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (+.f64 (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7)))))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (fma.f64 3/4 (sqrt.f64 (pow.f64 u1 5)) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7)))))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (+.f64 (*.f64 63/128 (sqrt.f64 (pow.f64 u1 9))) (+.f64 (*.f64 3/4 (sqrt.f64 (pow.f64 u1 5))) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7))))))","(+.f64 (sqrt.f64 (pow.f64 u1 3)) (fma.f64 63/128 (sqrt.f64 (pow.f64 u1 9)) (fma.f64 3/4 (sqrt.f64 (pow.f64 u1 5)) (*.f64 19/32 (sqrt.f64 (pow.f64 u1 7))))))","(sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))","(pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3/2)","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))","(fma.f64 3/2 (/.f64 (sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1)))) u1) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3/2))","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (+.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (+.f64 (*.f64 9/8 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (*.f64 3/4 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))))) (pow.f64 u1 2)))))","(fma.f64 3/2 (/.f64 (sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1)))) u1) (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3/2) (+.f64 (*.f64 (fma.f64 9/8 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2) (*.f64 3/4 (-.f64 (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2)))) (pow.f64 u1 -2)) 1)))","(+.f64 (*.f64 3/2 (*.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (/.f64 1 u1))) (+.f64 (*.f64 -1 (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (-.f64 (+.f64 (*.f64 1/4 (-.f64 (*.f64 3 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (+.f64 (*.f64 2 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (*.f64 2 (/.f64 1 (log.f64 (/.f64 -1 u1))))))) (*.f64 -9/8 (/.f64 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (log.f64 (/.f64 -1 u1))))) (*.f64 9/16 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))) (pow.f64 u1 3)))) (+.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (/.f64 (+.f64 (*.f64 9/8 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (*.f64 3/4 (-.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))) (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 2))))) (pow.f64 u1 2))))))","(fma.f64 3/2 (/.f64 (sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1)))) u1) (-.f64 (*.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3/2) (+.f64 (*.f64 (fma.f64 9/8 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2) (*.f64 3/4 (-.f64 (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2)))) (pow.f64 u1 -2)) 1)) (pow.f64 (*.f64 (sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1)))) (/.f64 (cbrt.f64 (fma.f64 (fma.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2) (*.f64 -2 (+.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3) (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1))))))) 1/4 (fma.f64 -9/8 (-.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -2) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 -9/16 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3))))) u1)) 3)))","(sqrt.f64 (log.f64 (/.f64 -1 u1)))","(sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1))))","(+.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 1 u1))))","(fma.f64 (/.f64 (sqrt.f64 (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1))))) u1) 1/2 (sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1)))))","(+.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 1 u1))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 (-.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))))) 2)) (pow.f64 u1 2))))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1))))) (+.f64 (/.f64 1 u1) (*.f64 (-.f64 1/2 (*.f64 (*.f64 -1/2 -1/2) (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))))) (pow.f64 u1 -2)))) (sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1)))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 (+.f64 (*.f64 -1/2 (/.f64 (-.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))))) 2)) (log.f64 (/.f64 -1 u1)))) 1/3) (pow.f64 u1 3)))) (+.f64 (sqrt.f64 (log.f64 (/.f64 -1 u1))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 1 u1))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1)))) (/.f64 (-.f64 1/2 (pow.f64 (*.f64 -1/2 (sqrt.f64 (/.f64 1 (log.f64 (/.f64 -1 u1))))) 2)) (pow.f64 u1 2)))))))","(fma.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))))) (*.f64 (fma.f64 -1/2 (/.f64 (-.f64 1/2 (*.f64 (*.f64 -1/2 -1/2) (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))))) (neg.f64 (log.f64 (neg.f64 u1)))) 1/3) (pow.f64 u1 -3)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1))))) (+.f64 (/.f64 1 u1) (*.f64 (-.f64 1/2 (*.f64 (*.f64 -1/2 -1/2) (/.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))))) (pow.f64 u1 -2)))) (sqrt.f64 (neg.f64 (log.f64 (neg.f64 u1))))))"]],"time":57.59912109375,"type":"simplify"},{"compiler":[[3161,1518]],"time":29.94287109375,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 3) 1/3)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",1.4085779349869336],["(*.f64 (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))","fresh",0.5346722547600499],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (cbrt.f64 u2) (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))))))","fresh",0.4206951238684589],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 3)","fresh",0.8938092407374292],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (-.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (sin.f64 (*.f64 (PI.f64) u2)))))","fresh",0.46162499612160207],["(*.f64 (pow.f64 (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 u1))) 6) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",0.47342978638070365],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","done",0.41939969614939776],["(*.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))","fresh",0.4278759656862818],["(cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))","next",0.3077396863809557]],"compiler":[[21,18],[31,18],[21,16],[18,15],[28,15],[18,15],[17,14],[26,17],[19,16],[21,18],[31,18],[21,16],[18,15],[28,15],[18,15],[26,17],[19,16]],"count":[[142,9]],"kept":[{"done":[0,0],"fresh":[8,6],"new":[133,2],"picked":[1,1]}],"min-error":[0.02860128162065376],"time":31.572998046875,"type":"prune"},{"compiler":[[76,27]],"locations":[["(*.f64 (+.f64 (PI.f64) (PI.f64)) u2)",0.23828125,false],["(*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))",0.29296875,true],["(pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)",0.36166000976844204,false],["(pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)",0.6673813476844203,true]],"time":19.81201171875,"type":"localize"},{"count":[[2,16]],"series":[["(*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u1","-inf",2.06982421875],["(*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u1","inf",2.98486328125],["(*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u1","0",0.801025390625],["(*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u2","-inf",8.26513671875],["(*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u2","inf",1.032958984375],["(*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))","u2","0",0.89111328125],["(pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)","u2","-inf",0.489990234375],["(pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)","u2","inf",0.51708984375],["(pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)","u2","0",0.761962890625]],"time":18.070068359375,"type":"series"},{"count":[[2,59]],"inputs":[["(pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)","(*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 0) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 1/2) (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 1/2 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (*.f64 0 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (*.f64 1/2 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)) (cos.f64 0))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)) (cos.f64 0)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 0) (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (*.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 1/2) (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 1/2 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (*.f64 0 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) (*.f64 (*.f64 1/2 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4))) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))) (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (*.f64 2 3/2))) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (pow.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) 2) (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)) (cos.f64 0))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)) (cos.f64 0)) (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) 3))))))"]],"rules":[["egg-rr",32],["egg-rr",27]],"time":27.015869140625,"type":"rewrite"},{"count":[[75,75]],"inputs":[["1","(+.f64 1 (*.f64 (pow.f64 u2 2) (+.f64 (*.f64 -4 (pow.f64 (PI.f64) 2)) (*.f64 -2 (pow.f64 (PI.f64) 2)))))","(+.f64 (*.f64 (pow.f64 u2 4) (+.f64 (*.f64 4/3 (pow.f64 (PI.f64) 4)) (+.f64 (*.f64 2/3 (pow.f64 (PI.f64) 4)) (+.f64 (*.f64 4 (pow.f64 (PI.f64) 4)) (*.f64 8 (pow.f64 (PI.f64) 4)))))) (+.f64 1 (*.f64 (pow.f64 u2 2) (+.f64 (*.f64 -4 (pow.f64 (PI.f64) 2)) (*.f64 -2 (pow.f64 (PI.f64) 2))))))","(+.f64 (*.f64 (pow.f64 u2 4) (+.f64 (*.f64 4/3 (pow.f64 (PI.f64) 4)) (+.f64 (*.f64 2/3 (pow.f64 (PI.f64) 4)) (+.f64 (*.f64 4 (pow.f64 (PI.f64) 4)) (*.f64 8 (pow.f64 (PI.f64) 4)))))) (+.f64 1 (+.f64 (*.f64 (pow.f64 u2 2) (+.f64 (*.f64 -4 (pow.f64 (PI.f64) 2)) (*.f64 -2 (pow.f64 (PI.f64) 2)))) (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 -16/3 (pow.f64 (PI.f64) 6)) (+.f64 (*.f64 -8/45 (pow.f64 (PI.f64) 6)) (+.f64 (*.f64 -2 (*.f64 (+.f64 (*.f64 4/3 (pow.f64 (PI.f64) 4)) (*.f64 4 (pow.f64 (PI.f64) 4))) (pow.f64 (PI.f64) 2))) (*.f64 -4/45 (pow.f64 (PI.f64) 6)))))))))","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3))","(+.f64 (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) u1))))","(+.f64 (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (pow.f64 u1 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) u1)))))","(+.f64 (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (pow.f64 u1 2)))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 1 (+.f64 (*.f64 1/3 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 -1 u1))) 1))) (*.f64 2 (log.f64 (/.f64 -1 u1))))))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2)) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (pow.f64 u1 3)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) u1))))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 (pow.f64 u2 2) (+.f64 (*.f64 -4 (pow.f64 (PI.f64) 2)) (*.f64 -2 (pow.f64 (PI.f64) 2)))))","(fma.f64 (*.f64 u2 u2) (*.f64 (*.f64 (PI.f64) (PI.f64)) -6) 1)","(+.f64 (*.f64 (pow.f64 u2 4) (+.f64 (*.f64 4/3 (pow.f64 (PI.f64) 4)) (+.f64 (*.f64 2/3 (pow.f64 (PI.f64) 4)) (+.f64 (*.f64 4 (pow.f64 (PI.f64) 4)) (*.f64 8 (pow.f64 (PI.f64) 4)))))) (+.f64 1 (*.f64 (pow.f64 u2 2) (+.f64 (*.f64 -4 (pow.f64 (PI.f64) 2)) (*.f64 -2 (pow.f64 (PI.f64) 2))))))","(fma.f64 (pow.f64 u2 4) (fma.f64 4/3 (pow.f64 (PI.f64) 4) (*.f64 (pow.f64 (PI.f64) 4) (+.f64 2/3 12))) (fma.f64 (*.f64 u2 u2) (*.f64 (*.f64 (PI.f64) (PI.f64)) -6) 1))","(+.f64 (*.f64 (pow.f64 u2 4) (+.f64 (*.f64 4/3 (pow.f64 (PI.f64) 4)) (+.f64 (*.f64 2/3 (pow.f64 (PI.f64) 4)) (+.f64 (*.f64 4 (pow.f64 (PI.f64) 4)) (*.f64 8 (pow.f64 (PI.f64) 4)))))) (+.f64 1 (+.f64 (*.f64 (pow.f64 u2 2) (+.f64 (*.f64 -4 (pow.f64 (PI.f64) 2)) (*.f64 -2 (pow.f64 (PI.f64) 2)))) (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 -16/3 (pow.f64 (PI.f64) 6)) (+.f64 (*.f64 -8/45 (pow.f64 (PI.f64) 6)) (+.f64 (*.f64 -2 (*.f64 (+.f64 (*.f64 4/3 (pow.f64 (PI.f64) 4)) (*.f64 4 (pow.f64 (PI.f64) 4))) (pow.f64 (PI.f64) 2))) (*.f64 -4/45 (pow.f64 (PI.f64) 6)))))))))","(+.f64 (fma.f64 (pow.f64 u2 4) (fma.f64 4/3 (pow.f64 (PI.f64) 4) (*.f64 (pow.f64 (PI.f64) 4) (+.f64 2/3 12))) 1) (fma.f64 (*.f64 u2 u2) (*.f64 (*.f64 (PI.f64) (PI.f64)) -6) (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 (pow.f64 (PI.f64) 6) (+.f64 -16/3 -8/45)) (fma.f64 -2 (*.f64 (*.f64 (pow.f64 (PI.f64) 4) 16/3) (*.f64 (PI.f64) (PI.f64))) (*.f64 -4/45 (pow.f64 (PI.f64) 6)))))))","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)","(*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3))","(*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3))","(+.f64 (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) u1))))","(fma.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (/.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)))) u1))","(+.f64 (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (pow.f64 u1 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) u1)))))","(fma.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (*.f64 (*.f64 1/2 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3))) (+.f64 (/.f64 (*.f64 (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) u1) (/.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (+.f64 (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) 2) (fma.f64 -1/2 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) (fma.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 u1)))) (+.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))) (*.f64 -2 (neg.f64 (log.f64 (neg.f64 u1)))))))) (neg.f64 (*.f64 u1 u1))))))","(+.f64 (*.f64 (sqrt.f64 (pow.f64 (log.f64 (/.f64 -1 u1)) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (pow.f64 u1 2)))) (+.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 1 (+.f64 (*.f64 1/3 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 -1 u1))) 1))) (*.f64 2 (log.f64 (/.f64 -1 u1))))))) (*.f64 -1/2 (/.f64 (*.f64 (-.f64 (*.f64 -1 (+.f64 (*.f64 -1/2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (+.f64 (*.f64 -1 (*.f64 (log.f64 (/.f64 -1 u1)) (+.f64 1 (log.f64 (/.f64 -1 u1))))) (*.f64 -2 (log.f64 (/.f64 -1 u1)))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)))) 2)) (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2))) (pow.f64 (log.f64 (/.f64 -1 u1)) 3)))) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) (pow.f64 u1 3)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (log.f64 (/.f64 -1 u1)) 3))) (/.f64 (*.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (log.f64 (/.f64 -1 u1)) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) u1))))))","(+.f64 (fma.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 3)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (*.f64 (*.f64 1/2 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3))) (+.f64 (/.f64 (*.f64 (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)) (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3)) u1) (/.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) 3) (+.f64 (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) 2) (fma.f64 -1/2 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) (fma.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 u1)))) (+.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))) (*.f64 -2 (neg.f64 (log.f64 (neg.f64 u1)))))))) (neg.f64 (*.f64 u1 u1)))))) (*.f64 (*.f64 -1/2 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3))) (pow.f64 (/.f64 (*.f64 (cos.f64 (*.f64 2 (*.f64 u2 (PI.f64)))) (cbrt.f64 (neg.f64 (fma.f64 -1/2 (*.f64 (*.f64 (-.f64 (neg.f64 (fma.f64 -1/2 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) (fma.f64 (neg.f64 (neg.f64 (log.f64 (neg.f64 u1)))) (+.f64 1 (neg.f64 (log.f64 (neg.f64 u1)))) (*.f64 -2 (neg.f64 (log.f64 (neg.f64 u1))))))) (pow.f64 (*.f64 -1/2 (*.f64 (sqrt.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2)))) 2)) (*.f64 3 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2))) (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) -3)) (+.f64 1 (fma.f64 (pow.f64 (neg.f64 (log.f64 (neg.f64 u1))) 2) 1/3 (fma.f64 2 (neg.f64 (log.f64 (neg.f64 u1))) (neg.f64 (*.f64 (neg.f64 (log.f64 (neg.f64 u1))) (fma.f64 -2/3 (neg.f64 (log.f64 (neg.f64 u1))) -1)))))))))) u1) 3)))"]],"time":83.0341796875,"type":"simplify"},{"compiler":[[4621,2534]],"time":45.246826171875,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 3) 1/3)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",1.4085779349869336],["(cbrt.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)) (cos.f64 0))) 2))","fresh",0.291817188976809],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (cbrt.f64 u2) (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))))))","fresh",0.4206951238684589],["(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 3)","fresh",0.8938092407374292],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (-.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (sin.f64 (*.f64 (PI.f64) u2)))))","fresh",0.46162499612160207],["(*.f64 (pow.f64 (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 u1))) 6) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","fresh",0.47342978638070365],["(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","done",0.41939969614939776],["(*.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))","fresh",0.4278759656862818],["(cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))","done",0.3077396863809557]],"compiler":[[21,18],[29,24],[21,16],[18,15],[28,15],[18,15],[17,14],[26,17],[19,16]],"count":[[162,9]],"kept":[{"done":[1,1],"fresh":[7,6],"new":[153,1],"picked":[1,1]}],"min-error":[0.02860128162065376],"time":42.192138671875,"type":"prune"},{"accuracy":[0.291817188976809],"baseline":[0.291817188976809],"branch":[["cosTheta_i",0.291817188976809,1],["u1",0.291817188976809,1],["u2",0.2918171889768091,1],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",0.291817188976809,1],["(sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1))))",0.291817188976809,1],["(neg.f64 (log.f64 (-.f64 1 u1)))",0.291817188976809,1],["(log.f64 (-.f64 1 u1))",0.2918171889768091,1],["(-.f64 1 u1)",0.2918171889768091,1],["(cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",0.2918171889768091,1],["(*.f64 (*.f64 2 (PI.f64)) u2)",0.2918171889768091,1]],"compiler":[[4,3],[4,3],[4,3],[16,14],[9,8],[8,7],[7,6],[6,5],[9,8],[8,7],[289,104]],"count":[[16,1]],"inputs":[["(cbrt.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)) (cos.f64 0))) 2))","(*.f64 (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 3) 1/3)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 3) (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)))","(*.f64 (pow.f64 (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 u1))) 6) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (cbrt.f64 u2) (*.f64 (cbrt.f64 (*.f64 u2 u2)) (+.f64 (PI.f64) (PI.f64))))))","(pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))) 3)","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (-.f64 (*.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (sin.f64 (*.f64 (PI.f64) u2)))))","(*.f64 (pow.f64 (pow.f64 (log1p.f64 (neg.f64 u1)) 2) 1/4) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (cbrt.f64 (*.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2))) (cbrt.f64 (*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) 3))","(*.f64 (pow.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) 1/3) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2)) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (cbrt.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (*.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) 2)) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))))","(*.f64 (cbrt.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))) (*.f64 (cbrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"link":["."],"name":["Beckmann Sample, near normal, slope_x"],"oracle":[11.635174577619168],"outputs":[["(cbrt.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)) (cos.f64 0))) 2))"]],"time":61.199951171875,"times":[["cosTheta_i",5.56396484375],["u1",5.548095703125],["u2",5.406005859375],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",5.760986328125],["(sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1))))",5.635009765625],["(neg.f64 (log.f64 (-.f64 1 u1)))",5.64501953125],["(log.f64 (-.f64 1 u1))",5.669921875],["(-.f64 1 u1)",5.489013671875],["(cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",5.658935546875],["(*.f64 (*.f64 2 (PI.f64)) u2)",5.76123046875]],"type":"regimes"},{"compiler":[[29,24]],"inputs":[["(cbrt.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)) (cos.f64 0))) 2))"]],"method":["egg-herbie"],"outputs":[["(cbrt.f64 (/.f64 (*.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2))) (+.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)) (cos.f64 0))) 2))","(cbrt.f64 (*.f64 (pow.f64 (neg.f64 (log1p.f64 (neg.f64 u1))) 3/2) (/.f64 (*.f64 (cos.f64 (*.f64 (+.f64 (PI.f64) (PI.f64)) u2)) (+.f64 (cos.f64 (*.f64 (*.f64 (PI.f64) u2) 4)) 1)) 2)))"]],"stop":[["fuel",1]],"time":24.864013671875,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[29,24]],"remove-preprocessing":[[]],"time":14.053955078125,"type":"end"}]
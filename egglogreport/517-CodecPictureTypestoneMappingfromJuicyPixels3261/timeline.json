[{"compiler":[[14,10]],"method":["search"],"sampling":[[12,0.797072600806132,0.14243892254307866,0.06048847665078938],[11,0.7512189750559628,0.2165852109901607,0.032195813953876495],[10,0.7219507033005357,0.2575607914477587,0.020488505251705647],[9,0.6321946699172258,0.36682900600135326,0.0009763240814208984],[8,0.5775605626404285,0.42146311327815056,0.0009763240814208984],[7,0.40585336834192276,0.5931703075766563,0.0009763240814208984],[6,0.31219489872455597,0.6868287771940231,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":41.37890625,"type":"analyze"},{"outcomes":[["body",256,"invalid",27.078369140625,631],["body",256,"valid",342.5986328125,8256]],"time":377.634033203125,"type":"sample"},{"compiler":[[13,9]],"inputs":[["0","1"],["(/.f64 (*.f64 x (+.f64 (/.f64 x y) 1)) (+.f64 x 1))","(/.f64 (*.f64 y (+.f64 (/.f64 y x) 1)) (+.f64 y 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (*.f64 x (+.f64 (/.f64 x y) 1)) (+.f64 x 1))","(/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1))","(/.f64 (*.f64 y (+.f64 (/.f64 y x) 1)) (+.f64 y 1))","(/.f64 (fma.f64 (/.f64 y x) y y) (+.f64 y 1))"]],"symmetry":[[]],"time":62.51708984375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (*.f64 x (+.f64 (/.f64 x y) 1)) (+.f64 x 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (+.f64 (/.f64 x y) 1)) (+.f64 x 1))","(/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))"]],"time":20.91796875,"type":"simplify"},{"compiler":[[23,13]],"time":0.373046875,"type":"eval"},{"alts":[["(/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))","next",11.056972509768443]],"compiler":[[12,7],[12,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[11.056972509768443],"time":2.19482421875,"type":"prune"},{"compiler":[[27,10]],"locations":[["(fma.f64 (/.f64 x y) x x)",0.078125,true],["(/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))",10.308381557259253,true]],"time":5.72900390625,"type":"localize"},{"count":[[2,48]],"series":[["(fma.f64 (/.f64 x y) x x)","y","-inf",0.148193359375],["(fma.f64 (/.f64 x y) x x)","y","inf",0.171142578125],["(fma.f64 (/.f64 x y) x x)","y","0",0.156982421875],["(fma.f64 (/.f64 x y) x x)","x","-inf",0.404052734375],["(fma.f64 (/.f64 x y) x x)","x","inf",0.699951171875],["(fma.f64 (/.f64 x y) x x)","x","0",0.31884765625],["(/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))","y","-inf",0.52001953125],["(/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))","y","inf",0.443115234375],["(/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))","y","0",0.654052734375],["(/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))","x","-inf",0.4228515625],["(/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))","x","inf",0.408935546875],["(/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))","x","0",0.475830078125]],"time":4.9921875,"type":"series"},{"count":[[2,94]],"inputs":[["(/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))","(fma.f64 (/.f64 x y) x x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 x 1)) (/.f64 (*.f64 x x) y)) (*.f64 (/.f64 1 (+.f64 x 1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 x 1)) x) (*.f64 (/.f64 1 (+.f64 x 1)) (/.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) (*.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 0) (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x x) y) (/.f64 1 (+.f64 x 1))) (*.f64 x (/.f64 1 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 1 (+.f64 x 1))) (*.f64 (/.f64 (*.f64 x x) y) (/.f64 1 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) (*.f64 0 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))) (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 (/.f64 x y) x x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 x)) (/.f64 (fma.f64 (/.f64 x y) x x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 (/.f64 x y) x x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 2)) (cbrt.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (/.f64 x y) x x)) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 x y) x x)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 x y) x x) 2)) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 x y) x x) (/.f64 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1)) (fma.f64 (/.f64 x y) x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) (/.f64 (fma.f64 (/.f64 x y) x x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 x y) x x) 2)) (+.f64 x 1)) (cbrt.f64 (fma.f64 (/.f64 x y) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (/.f64 1 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 x)) (neg.f64 (fma.f64 (/.f64 x y) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (/.f64 x y) x x)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 2)) (cbrt.f64 (fma.f64 (/.f64 x y) x x))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 2)) (cbrt.f64 (neg.f64 (fma.f64 (/.f64 x y) x x)))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 x y) x x) 2))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) (fma.f64 (/.f64 x y) x x)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (/.f64 x y) x x)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 2))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (fma.f64 (/.f64 x y) x x))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (cbrt.f64 (+.f64 x 1))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (fma.f64 (/.f64 x y) x x)) (cbrt.f64 (+.f64 x 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 (pow.f64 x 3) 1)) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (/.f64 x y) x x) -1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (cbrt.f64 (+.f64 x 1))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (cbrt.f64 (+.f64 x 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (-.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x x) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x y) x x) (*.f64 (fma.f64 (/.f64 x y) x x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (/.f64 x y) x x) 0) (fma.f64 (/.f64 x y) x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (neg.f64 (/.f64 (*.f64 x x) y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 x y) x x) (*.f64 0 (fma.f64 (/.f64 x y) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (/.f64 x y) x x)) (fma.f64 (/.f64 x y) x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (/.f64 (*.f64 x x) y)) -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 (/.f64 x y) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 x y) x x)) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 x y) x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 x y) x x) 2)) (cbrt.f64 (fma.f64 (/.f64 x y) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 x y) x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 x y) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (/.f64 x y) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (/.f64 x y) x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (cbrt.f64 x) (*.f64 (/.f64 x y) (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 (/.f64 x y) (cbrt.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 (/.f64 x y) x x))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 x y) x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (/.f64 x y) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (/.f64 x y) x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (/.f64 x y) x x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 x y) x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 x y) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) x x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) x x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (/.f64 x y) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 x y) x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 x x) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x x) y) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) -1 (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 x x) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x x) y) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (*.f64 x x) y))))))"]],"rules":[["egg-rr",43],["egg-rr",51]],"time":26.19287109375,"type":"rewrite"},{"count":[[142,121]],"inputs":[["x","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x))","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 4)) (+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)))","(/.f64 x y)","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 1 x)))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (/.f64 1 (pow.f64 x 2))))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y (pow.f64 x 2))) (/.f64 1 x))))","(/.f64 x y)","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(-.f64 (+.f64 1 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 (-.f64 1 (/.f64 1 y)) x)))) (/.f64 1 y))","(-.f64 (+.f64 1 (+.f64 (/.f64 x y) (+.f64 (/.f64 1 (pow.f64 x 2)) (*.f64 -1 (/.f64 (-.f64 1 (/.f64 1 y)) x))))) (+.f64 (/.f64 1 y) (/.f64 1 (*.f64 y (pow.f64 x 2)))))","(/.f64 (pow.f64 x 2) (*.f64 y (+.f64 1 x)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(/.f64 (pow.f64 x 2) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(/.f64 (pow.f64 x 2) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(/.f64 (pow.f64 x 2) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)","(fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x))","(fma.f64 (+.f64 1 (/.f64 -1 y)) (pow.f64 x 3) (fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x))","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 4)) (+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)))","(fma.f64 (+.f64 (/.f64 1 y) -1) (pow.f64 x 4) (fma.f64 (+.f64 1 (/.f64 -1 y)) (pow.f64 x 3) (fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x)))","(/.f64 x y)","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(+.f64 1 (/.f64 (-.f64 x 1) y))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 1 x)))","(-.f64 (+.f64 (+.f64 1 (/.f64 1 (*.f64 y x))) (/.f64 (-.f64 x 1) y)) (/.f64 1 x))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (/.f64 1 (pow.f64 x 2))))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y (pow.f64 x 2))) (/.f64 1 x))))","(-.f64 (+.f64 (+.f64 (/.f64 x y) (pow.f64 x -2)) (+.f64 1 (/.f64 1 (*.f64 y x)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 (pow.f64 x -2) y) (/.f64 1 x))))","(/.f64 x y)","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(+.f64 1 (/.f64 (-.f64 x 1) y))","(-.f64 (+.f64 1 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 (-.f64 1 (/.f64 1 y)) x)))) (/.f64 1 y))","(+.f64 1 (+.f64 (/.f64 (+.f64 (/.f64 1 y) -1) x) (/.f64 (-.f64 x 1) y)))","(-.f64 (+.f64 1 (+.f64 (/.f64 x y) (+.f64 (/.f64 1 (pow.f64 x 2)) (*.f64 -1 (/.f64 (-.f64 1 (/.f64 1 y)) x))))) (+.f64 (/.f64 1 y) (/.f64 1 (*.f64 y (pow.f64 x 2)))))","(-.f64 (+.f64 1 (+.f64 (+.f64 (/.f64 x y) (pow.f64 x -2)) (/.f64 (+.f64 (/.f64 1 y) -1) x))) (+.f64 (/.f64 1 y) (/.f64 (pow.f64 x -2) y)))","(/.f64 (pow.f64 x 2) (*.f64 y (+.f64 1 x)))","(/.f64 (*.f64 x x) (*.f64 y (+.f64 1 x)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(/.f64 (pow.f64 x 2) y)","(/.f64 (*.f64 x x) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(/.f64 (pow.f64 x 2) y)","(/.f64 (*.f64 x x) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(/.f64 (pow.f64 x 2) y)","(/.f64 (*.f64 x x) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)"]],"time":153.669921875,"type":"simplify"},{"compiler":[[1963,958]],"time":20.543212890625,"type":"eval"},{"alts":[["(/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1))","next",11.056972509768443],["(pow.f64 (cbrt.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))) 3)","fresh",11.546363964905726],["(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","fresh",12.621457274653537],["(+.f64 1 (+.f64 (/.f64 (+.f64 (/.f64 1 y) -1) x) (/.f64 (-.f64 x 1) y)))","fresh",37.88046441422377]],"compiler":[[13,8],[15,10],[17,12],[17,13],[13,8],[15,10],[17,12],[17,13]],"count":[[122,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[121,4],"picked":[1,0]}],"min-error":[0],"time":26.370849609375,"type":"prune"},{"compiler":[[34,11]],"locations":[["(/.f64 (+.f64 x y) y)",0.0078125,true],["(*.f64 (/.f64 (+.f64 x y) y) x)",0.078125,true],["(/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1))",10.308381557259253,true]],"time":6.14697265625,"type":"localize"},{"count":[[3,72]],"series":[["(/.f64 (+.f64 x y) y)","y","-inf",0.30908203125],["(/.f64 (+.f64 x y) y)","y","inf",0.219970703125],["(/.f64 (+.f64 x y) y)","y","0",0.239013671875],["(/.f64 (+.f64 x y) y)","x","-inf",0.185791015625],["(/.f64 (+.f64 x y) y)","x","inf",0.20703125],["(/.f64 (+.f64 x y) y)","x","0",0.19677734375],["(*.f64 (/.f64 (+.f64 x y) y) x)","y","-inf",0.23681640625],["(*.f64 (/.f64 (+.f64 x y) y) x)","y","inf",0.14697265625],["(*.f64 (/.f64 (+.f64 x y) y) x)","y","0",0.2548828125],["(*.f64 (/.f64 (+.f64 x y) y) x)","x","-inf",0.943115234375],["(*.f64 (/.f64 (+.f64 x y) y) x)","x","inf",0.2451171875],["(*.f64 (/.f64 (+.f64 x y) y) x)","x","0",0.317138671875],["(/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1))","y","-inf",0.591064453125],["(/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1))","y","inf",0.492919921875],["(/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1))","y","0",0.39697265625],["(/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1))","x","-inf",0.385986328125],["(/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1))","x","inf",0.26904296875],["(/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1))","x","0",0.30908203125]],"time":6.162109375,"type":"series"},{"count":[[3,214]],"inputs":[["(/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1))","(*.f64 (/.f64 (+.f64 x y) y) x)","(/.f64 (+.f64 x y) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 0) (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1)))) (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) (*.f64 0 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 x)) (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) y) (/.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 x y) y) (cbrt.f64 (+.f64 x 1))) (/.f64 x (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 2)) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 (+.f64 x y) y) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (+.f64 x 1))) (/.f64 (/.f64 (+.f64 x y) y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (/.f64 -1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 (*.f64 (+.f64 x y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 x y) y) (+.f64 x 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (/.f64 (/.f64 (+.f64 x y) y) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 x 1)) (/.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 x)) (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 x y) y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (/.f64 x (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 2)) (+.f64 x 1)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (/.f64 -1 (-.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) x) (/.f64 1 (*.f64 y (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) 1) (*.f64 y (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) x) -1) (*.f64 y (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (/.f64 -1 (-.f64 -1 x)))) (*.f64 y (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y)) -1) (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y)) 1) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y)) (cbrt.f64 (/.f64 -1 (-.f64 -1 x)))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) -1) (*.f64 (neg.f64 y) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) 1) (*.f64 (neg.f64 y) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (/.f64 -1 (-.f64 -1 x)))) (*.f64 (neg.f64 y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (neg.f64 (*.f64 (+.f64 x y) x))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (*.f64 (+.f64 x y) x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (*.f64 (+.f64 x y) x))) (*.f64 (-.f64 -1 x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y))) (*.f64 (-.f64 -1 x) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (neg.f64 (*.f64 y (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (+.f64 x y) y) (cbrt.f64 (+.f64 x 1))) x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 x))) (/.f64 (*.f64 (+.f64 x y) x) y)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 2))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (-.f64 -1 x)) (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (-.f64 -1 x)) (neg.f64 (*.f64 (+.f64 x y) x))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 x 1))) (/.f64 (+.f64 x y) y)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 2)) (cbrt.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y)))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) y))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 2)) (+.f64 x 1))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (cbrt.f64 (+.f64 x 1))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y)) (/.f64 -1 (-.f64 -1 x))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (/.f64 -1 (-.f64 -1 x))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 2))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) (/.f64 x (+.f64 x 1))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 x y)) (/.f64 x (+.f64 x 1))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (/.f64 (+.f64 x y) y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (/.f64 1 (-.f64 -1 x))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) y) (/.f64 x (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) (cbrt.f64 (+.f64 x 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (cbrt.f64 (+.f64 x 1))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) -1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (+.f64 (pow.f64 x 3) 1)) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) x) (/.f64 (*.f64 y (+.f64 x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) x) (*.f64 (*.f64 y (+.f64 x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (*.f64 (+.f64 x 1) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y)) (*.f64 (+.f64 x 1) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (*.f64 (-.f64 -1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (cbrt.f64 (+.f64 x 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (-.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (+.f64 x y) y)) (/.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 y (+.f64 x 1))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 0) (/.f64 (*.f64 (+.f64 x y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (*.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (+.f64 x y) x) y)) (/.f64 (*.f64 (+.f64 x y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (*.f64 0 (/.f64 (*.f64 (+.f64 x y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) (/.f64 x (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) x) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 (+.f64 x y) y))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (+.f64 x y) y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x y) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (+.f64 x y) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) (*.f64 x (cbrt.f64 (/.f64 (+.f64 x y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (*.f64 y y))) (/.f64 (+.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 (+.f64 x y) y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) x) (cbrt.f64 (/.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (+.f64 x y) y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (+.f64 x y) y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (/.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 2)) (cbrt.f64 (*.f64 (+.f64 x y) x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) x) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) x) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (+.f64 x y) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (*.f64 (+.f64 x y) x))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) x)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (/.f64 x (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (+.f64 x y) x)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (+.f64 x y) y) 0) (/.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x y) y) (*.f64 (/.f64 (+.f64 x y) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (*.f64 (/.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (+.f64 x y) y)) (/.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (+.f64 x y) y) (*.f64 0 (/.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (*.f64 y (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 1 y)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (neg.f64 (/.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x y) y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) (cbrt.f64 (/.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (+.f64 x y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) y) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 x y) y)) (cbrt.f64 (pow.f64 (+.f64 x y) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) (cbrt.f64 (+.f64 x y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) (cbrt.f64 (neg.f64 (+.f64 x y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (+.f64 x y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (+.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) y) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (+.f64 x y)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 x y) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 x y) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 3))))))"]],"rules":[["egg-rr",51],["egg-rr",64],["egg-rr",99]],"time":37.24609375,"type":"rewrite"},{"count":[[286,244]],"inputs":[["x","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x))","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 4)) (+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)))","(/.f64 x y)","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 1 x)))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (/.f64 1 (pow.f64 x 2))))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y (pow.f64 x 2))) (/.f64 1 x))))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))","(-.f64 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))) (/.f64 1 x))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2))) (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1))))) (/.f64 1 x))","(/.f64 (pow.f64 x 2) (*.f64 y (+.f64 1 x)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(/.f64 (pow.f64 x 2) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(/.f64 (pow.f64 x 2) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(/.f64 (pow.f64 x 2) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","1","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(/.f64 x y)","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(/.f64 x y)","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(/.f64 x y)","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","1","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","1","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)","(fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x))","(fma.f64 (+.f64 1 (/.f64 -1 y)) (pow.f64 x 3) (fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x))","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 4)) (+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)))","(fma.f64 (pow.f64 x 4) (+.f64 (/.f64 1 y) -1) (fma.f64 (+.f64 1 (/.f64 -1 y)) (pow.f64 x 3) (fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x)))","(/.f64 x y)","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(+.f64 1 (/.f64 (-.f64 x 1) y))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 1 x)))","(+.f64 (+.f64 1 (/.f64 (-.f64 x 1) y)) (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 -1 x)))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (/.f64 1 (pow.f64 x 2))))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y (pow.f64 x 2))) (/.f64 1 x))))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (pow.f64 x -2)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 (pow.f64 x -2) y) (/.f64 1 x))))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))","(+.f64 1 (/.f64 (-.f64 x 1) y))","(-.f64 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))) (/.f64 1 x))","(+.f64 (+.f64 1 (/.f64 (-.f64 x 1) y)) (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 -1 x)))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2))) (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1))))) (/.f64 1 x))","(+.f64 (*.f64 (+.f64 1 (/.f64 -1 y)) (pow.f64 x -2)) (+.f64 (+.f64 1 (/.f64 (-.f64 x 1) y)) (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 -1 x))))","(/.f64 (pow.f64 x 2) (*.f64 y (+.f64 1 x)))","(/.f64 (*.f64 x x) (*.f64 y (+.f64 1 x)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(/.f64 (pow.f64 x 2) y)","(/.f64 (*.f64 x x) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(/.f64 (pow.f64 x 2) y)","(/.f64 (*.f64 x x) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(/.f64 (pow.f64 x 2) y)","(/.f64 (*.f64 x x) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","1","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(/.f64 x y)","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(/.f64 x y)","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(/.f64 x y)","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","1","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","1","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))","(+.f64 1 (/.f64 x y))"]],"time":217.02294921875,"type":"simplify"},{"compiler":[[4124,1839]],"time":36.8349609375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","next",6.638188556190989],["(/.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) (cbrt.f64 (+.f64 x y))) (cbrt.f64 y)) x) (+.f64 x 1))","fresh",14.375663769536883],["(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))","fresh",11.056972509768443]],"compiler":[[13,8],[24,15],[13,9],[13,8],[24,15],[13,9]],"count":[[248,3]],"kept":[{"done":[0,0],"fresh":[3,0],"new":[244,3],"picked":[1,0]}],"min-error":[0],"time":78.015869140625,"type":"prune"},{"compiler":[[36,18]],"locations":[["(*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1)))",0.015625,true],["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)",6.6460010561909915,true]],"time":7.943115234375,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1)))","y","-inf",0.255126953125],["(*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1)))","y","inf",0.237060546875],["(*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1)))","y","0",0.260986328125],["(*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1)))","x","-inf",0.306884765625],["(*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1)))","x","inf",0.24609375],["(*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1)))","x","0",0.320068359375],["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","y","-inf",0.177001953125],["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","y","inf",0.197998046875],["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","y","0",0.35302734375],["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","x","-inf",0.218017578125],["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","x","inf",0.205078125],["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","x","0",0.301025390625]],"time":3.24609375,"type":"series"},{"count":[[2,177]],"inputs":[["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","(*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) (/.f64 (*.f64 x y) (+.f64 x 1))) (*.f64 (/.f64 1 y) (/.f64 (*.f64 x x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 y) (/.f64 (*.f64 x x) (+.f64 x 1))) (*.f64 (/.f64 1 y) (/.f64 (*.f64 x y) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 0) (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x y) (+.f64 x 1)) (/.f64 1 y)) (*.f64 (/.f64 (*.f64 x x) (+.f64 x 1)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x x) (+.f64 x 1)) (/.f64 1 y)) (*.f64 (/.f64 (*.f64 x y) (+.f64 x 1)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) (*.f64 0 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y))) (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 (/.f64 x (+.f64 x 1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) (/.f64 (/.f64 x (+.f64 x 1)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 x 1)) (/.f64 (+.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (+.f64 x 1)) (cbrt.f64 y)) (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 2)) y) (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (+.f64 x 1)) y) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) y) (/.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (+.f64 x 1)) (cbrt.f64 (*.f64 y y))) (/.f64 (+.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 y y))) (/.f64 (/.f64 x (+.f64 x 1)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (/.f64 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) x) (/.f64 1 (*.f64 (+.f64 x 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (cbrt.f64 (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (*.f64 (+.f64 x y) x)) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (neg.f64 (*.f64 (+.f64 x y) x))) (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1)))) (*.f64 (neg.f64 y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (*.f64 (+.f64 x y) x))) (*.f64 (neg.f64 y) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) -1) (*.f64 (-.f64 -1 x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) 1) (*.f64 (-.f64 -1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (/.f64 1 y))) (*.f64 (-.f64 -1 x) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) x) -1) (*.f64 (+.f64 x 1) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (/.f64 1 y))) (*.f64 (+.f64 x 1) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1))) -1) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1))) 1) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (/.f64 1 y))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) 1) (*.f64 (+.f64 x 1) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (neg.f64 (*.f64 (+.f64 x 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (neg.f64 (*.f64 (+.f64 x y) x))) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 y)) (/.f64 x (+.f64 x 1))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 x (+.f64 x 1)) (cbrt.f64 y)) (+.f64 x y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (+.f64 x 1)) (/.f64 (+.f64 x y) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (/.f64 1 y)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1))) (/.f64 1 y)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (/.f64 (/.f64 x (+.f64 x 1)) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (/.f64 -1 y)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 1) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (+.f64 x y) y)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 (+.f64 x y) y)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 x 1))) (/.f64 (+.f64 x y) y)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 2)) y)) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) 1) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) -1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) y) (+.f64 (pow.f64 x 3) 1)) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) x) (/.f64 (*.f64 (+.f64 x 1) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (*.f64 (neg.f64 y) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1))) (*.f64 y (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (*.f64 y (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) x) (*.f64 (*.f64 (+.f64 x 1) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) y)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x (-.f64 -1 x)) (/.f64 (+.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (*.f64 (+.f64 x 1) y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) (+.f64 x 1)) (/.f64 (*.f64 x x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x x) (+.f64 x 1)) (/.f64 (*.f64 x y) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 0) (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x y) (+.f64 x 1)) 1) (*.f64 (/.f64 (*.f64 x x) (+.f64 x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x x) (+.f64 x 1)) 1) (*.f64 (/.f64 (*.f64 x y) (+.f64 x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) (*.f64 0 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))) (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 x 1))) (/.f64 x (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 x 1)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) x) (/.f64 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) (cbrt.f64 (/.f64 x (+.f64 x 1)))) (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (+.f64 x 1)) (cbrt.f64 (+.f64 x y))) (cbrt.f64 (pow.f64 (+.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (+.f64 x 1))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x 1)) 2)) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (+.f64 x y) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (/.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (/.f64 x (+.f64 x 1))) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1)) (*.f64 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x 1)) 2)) (+.f64 x y)) (cbrt.f64 (/.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x 1)) 2)) (*.f64 (+.f64 x y) (cbrt.f64 (/.f64 x (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x y) 2)) (*.f64 (/.f64 x (+.f64 x 1)) (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (+.f64 x 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (-.f64 -1 x)) (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (/.f64 x (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 x 1))) x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (*.f64 (+.f64 x y) x))) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (/.f64 x (cbrt.f64 (+.f64 x 1)))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 2)) (cbrt.f64 (*.f64 (+.f64 x y) x))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (+.f64 x y) x) -1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x 1)) 2)) (+.f64 x y))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x 1)) 2)) (+.f64 x y))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (+.f64 x y) x)) 1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 x 1))) (+.f64 x y)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 2))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (/.f64 x (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (+.f64 x y) x)) (cbrt.f64 (+.f64 x 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (+.f64 x y) x)) 1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) -1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 (pow.f64 x 3) 1)) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 x 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (+.f64 x y) x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x y) x) (+.f64 x 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (+.f64 x 1)) x (/.f64 (*.f64 x y) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 x (+.f64 x 1)) (/.f64 (*.f64 x x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (+.f64 x 1)) y (/.f64 (*.f64 x x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 x (+.f64 x 1)) (/.f64 (*.f64 x y) (+.f64 x 1)))))))"]],"rules":[["egg-rr",74],["egg-rr",103]],"time":32.98193359375,"type":"rewrite"},{"count":[[225,222]],"inputs":[["x","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x))","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 4)) (+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)))","(/.f64 x y)","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 1 x)))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (/.f64 1 (pow.f64 x 2))))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y (pow.f64 x 2))) (/.f64 1 x))))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))","(-.f64 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))) (/.f64 1 x))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2))) (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1))))) (/.f64 1 x))","(/.f64 (pow.f64 x 2) (*.f64 y (+.f64 1 x)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 y) (pow.f64 x 2)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 (-.f64 y 1) (pow.f64 x 3)) (*.f64 (-.f64 1 y) (pow.f64 x 2))))","(+.f64 (*.f64 (-.f64 1 y) (pow.f64 x 4)) (+.f64 (*.f64 y x) (+.f64 (*.f64 (-.f64 y 1) (pow.f64 x 3)) (*.f64 (-.f64 1 y) (pow.f64 x 2)))))","x","(-.f64 (+.f64 y x) 1)","(-.f64 (+.f64 y (+.f64 (/.f64 1 x) x)) (+.f64 1 (/.f64 y x)))","(-.f64 (+.f64 y (+.f64 (/.f64 y (pow.f64 x 2)) (+.f64 (/.f64 1 x) x))) (+.f64 1 (+.f64 (/.f64 y x) (/.f64 1 (pow.f64 x 2)))))","x","(+.f64 (*.f64 -1 (+.f64 1 (*.f64 -1 y))) x)","(+.f64 (*.f64 -1 (+.f64 1 (*.f64 -1 y))) (+.f64 (/.f64 1 x) (+.f64 (*.f64 -1 (/.f64 y x)) x)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 y)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (+.f64 1 (*.f64 -1 y))) (+.f64 (/.f64 1 x) (+.f64 (*.f64 -1 (/.f64 y x)) x))))","(/.f64 (pow.f64 x 2) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(/.f64 (*.f64 y x) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(/.f64 (*.f64 y x) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)","(fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x))","(fma.f64 (pow.f64 x 3) (+.f64 1 (/.f64 -1 y)) (fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x))","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 4)) (+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)))","(fma.f64 (+.f64 (/.f64 1 y) -1) (pow.f64 x 4) (fma.f64 (pow.f64 x 3) (+.f64 1 (/.f64 -1 y)) (fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x)))","(/.f64 x y)","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(+.f64 1 (/.f64 (+.f64 x -1) y))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 1 x)))","(+.f64 (+.f64 1 (/.f64 (+.f64 x -1) y)) (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 -1 x)))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (/.f64 1 (pow.f64 x 2))))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y (pow.f64 x 2))) (/.f64 1 x))))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (pow.f64 x -2)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 (pow.f64 x -2) y) (/.f64 1 x))))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))","(+.f64 1 (/.f64 (+.f64 x -1) y))","(-.f64 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))) (/.f64 1 x))","(+.f64 (+.f64 1 (/.f64 (+.f64 x -1) y)) (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 -1 x)))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2))) (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1))))) (/.f64 1 x))","(+.f64 (*.f64 (+.f64 1 (/.f64 -1 y)) (pow.f64 x -2)) (+.f64 (+.f64 1 (/.f64 (+.f64 x -1) y)) (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 -1 x))))","(/.f64 (pow.f64 x 2) (*.f64 y (+.f64 1 x)))","(/.f64 (*.f64 x x) (*.f64 (+.f64 1 x) y))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 x (/.f64 (*.f64 x x) y)) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 x (/.f64 (*.f64 x x) y)) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 x (/.f64 (*.f64 x x) y)) (+.f64 1 x))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 x (/.f64 (*.f64 x x) y)) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 x (/.f64 (*.f64 x x) y)) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 x (/.f64 (*.f64 x x) y)) (+.f64 1 x))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 x (/.f64 (*.f64 x x) y)) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 x (/.f64 (*.f64 x x) y)) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 x (/.f64 (*.f64 x x) y)) (+.f64 1 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 y) (pow.f64 x 2)))","(fma.f64 y x (*.f64 (-.f64 1 y) (*.f64 x x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 (-.f64 y 1) (pow.f64 x 3)) (*.f64 (-.f64 1 y) (pow.f64 x 2))))","(fma.f64 y x (fma.f64 (+.f64 y -1) (pow.f64 x 3) (*.f64 (-.f64 1 y) (*.f64 x x))))","(+.f64 (*.f64 (-.f64 1 y) (pow.f64 x 4)) (+.f64 (*.f64 y x) (+.f64 (*.f64 (-.f64 y 1) (pow.f64 x 3)) (*.f64 (-.f64 1 y) (pow.f64 x 2)))))","(fma.f64 (-.f64 1 y) (pow.f64 x 4) (fma.f64 y x (fma.f64 (+.f64 y -1) (pow.f64 x 3) (*.f64 (-.f64 1 y) (*.f64 x x)))))","x","(-.f64 (+.f64 y x) 1)","(+.f64 (+.f64 y x) -1)","(-.f64 (+.f64 y (+.f64 (/.f64 1 x) x)) (+.f64 1 (/.f64 y x)))","(-.f64 (+.f64 y (+.f64 (/.f64 y (pow.f64 x 2)) (+.f64 (/.f64 1 x) x))) (+.f64 1 (+.f64 (/.f64 y x) (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (+.f64 y (fma.f64 y (pow.f64 x -2) (/.f64 1 x))) x) (+.f64 1 (+.f64 (/.f64 y x) (pow.f64 x -2))))","x","(+.f64 (*.f64 -1 (+.f64 1 (*.f64 -1 y))) x)","(+.f64 (+.f64 y x) -1)","(+.f64 (*.f64 -1 (+.f64 1 (*.f64 -1 y))) (+.f64 (/.f64 1 x) (+.f64 (*.f64 -1 (/.f64 y x)) x)))","(+.f64 (/.f64 (-.f64 1 y) x) (+.f64 (+.f64 y x) -1))","(+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 y)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (+.f64 1 (*.f64 -1 y))) (+.f64 (/.f64 1 x) (+.f64 (*.f64 -1 (/.f64 y x)) x))))","(+.f64 (+.f64 (+.f64 (/.f64 (/.f64 (+.f64 y -1) x) x) (+.f64 y -1)) (/.f64 (-.f64 1 y) x)) x)","(/.f64 (pow.f64 x 2) (+.f64 1 x))","(/.f64 (*.f64 x x) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(/.f64 (*.f64 x (+.f64 y x)) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(/.f64 (*.f64 x (+.f64 y x)) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(/.f64 (*.f64 x (+.f64 y x)) (+.f64 1 x))","(/.f64 (*.f64 y x) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(/.f64 (*.f64 x (+.f64 y x)) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(/.f64 (*.f64 x (+.f64 y x)) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(/.f64 (*.f64 x (+.f64 y x)) (+.f64 1 x))","(/.f64 (*.f64 y x) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(/.f64 (*.f64 x (+.f64 y x)) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(/.f64 (*.f64 x (+.f64 y x)) (+.f64 1 x))","(+.f64 (/.f64 (pow.f64 x 2) (+.f64 1 x)) (/.f64 (*.f64 y x) (+.f64 1 x)))","(/.f64 (*.f64 x (+.f64 y x)) (+.f64 1 x))"]],"time":162.85888671875,"type":"simplify"},{"compiler":[[3839,1963]],"time":37.738037109375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","done",6.638188556190989],["(/.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) (cbrt.f64 (+.f64 x y))) (cbrt.f64 y)) x) (+.f64 x 1))","fresh",14.375663769536883],["(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))","next",11.056972509768443]],"compiler":[[13,8],[24,15],[13,9],[24,15],[13,9]],"count":[[225,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[222,0],"picked":[1,1]}],"min-error":[0],"time":62.74609375,"type":"prune"},{"compiler":[[34,17]],"locations":[["(*.f64 (+.f64 1 (/.f64 x y)) x)",0.078125,true],["(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))",10.308381557259253,true]],"time":7.31689453125,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (+.f64 1 (/.f64 x y)) x)","y","-inf",0.1640625],["(*.f64 (+.f64 1 (/.f64 x y)) x)","y","inf",0.14208984375],["(*.f64 (+.f64 1 (/.f64 x y)) x)","y","0",0.1748046875],["(*.f64 (+.f64 1 (/.f64 x y)) x)","x","-inf",0.278076171875],["(*.f64 (+.f64 1 (/.f64 x y)) x)","x","inf",0.259765625],["(*.f64 (+.f64 1 (/.f64 x y)) x)","x","0",0.203125],["(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))","y","-inf",0.3291015625],["(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))","y","inf",0.31103515625],["(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))","y","0",0.283935546875],["(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))","x","-inf",0.2880859375],["(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))","x","inf",0.2119140625],["(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))","x","0",0.2890625]],"time":3.094970703125,"type":"series"},{"count":[[2,128]],"inputs":[["(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))","(*.f64 (+.f64 1 (/.f64 x y)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) (*.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 0) (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (+.f64 x 1)) (*.f64 (/.f64 1 (+.f64 x 1)) (/.f64 (*.f64 x x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (+.f64 x 1)) (/.f64 (*.f64 x x) y)) (/.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) (*.f64 0 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1))) (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (+.f64 x 1)) (*.f64 (/.f64 (*.f64 x x) y) (/.f64 1 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x x) y) (/.f64 1 (+.f64 x 1))) (/.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 x (/.f64 x y) x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 x)) (/.f64 (fma.f64 x (/.f64 x y) x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 x (/.f64 x y) x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 2)) (cbrt.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (/.f64 x y) x)) (/.f64 1 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y x) y) (/.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 y x) y) (cbrt.f64 (+.f64 x 1))) (/.f64 x (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 (+.f64 y x) y) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (+.f64 x 1))) (/.f64 (/.f64 (+.f64 y x) y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (/.f64 x y) x)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x (/.f64 x y) x) 2)) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (/.f64 x y) x) (/.f64 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1)) (fma.f64 x (/.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) (/.f64 (fma.f64 x (/.f64 x y) x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (/.f64 (/.f64 (+.f64 y x) y) (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 x 1)) (/.f64 (+.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 y x) y) (+.f64 x 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (-.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 y x) y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (/.f64 x (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (fma.f64 x (/.f64 x y) x) 2)) (+.f64 x 1)) (cbrt.f64 (fma.f64 x (/.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (/.f64 1 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 x)) (neg.f64 (fma.f64 x (/.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3))) (*.f64 (+.f64 x 1) (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3)))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3)))) (*.f64 (-.f64 -1 x) (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3))) -1) (*.f64 (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3))) 1) (*.f64 (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3))) (cbrt.f64 (/.f64 1 (+.f64 x 1)))) (*.f64 (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x (/.f64 x y) x)) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 2)) (cbrt.f64 (neg.f64 (fma.f64 x (/.f64 x y) x)))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 2)) (cbrt.f64 (fma.f64 x (/.f64 x y) x))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (+.f64 y x) y) (cbrt.f64 (+.f64 x 1))) x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1))) (cbrt.f64 (pow.f64 (fma.f64 x (/.f64 x y) x) 2))) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 x 1))) (/.f64 (+.f64 y x) y)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 x 1)) (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3)))) (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) (fma.f64 x (/.f64 x y) x)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (fma.f64 x (/.f64 x y) x))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 2))) (cbrt.f64 (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x (/.f64 x y) x)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 2))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (cbrt.f64 (+.f64 x 1))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (/.f64 (+.f64 y x) y) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 (/.f64 x y) 3)) (/.f64 x (+.f64 x 1))) (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 (/.f64 x y) 3)) -1) (/.f64 x (+.f64 x 1))) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3))) (/.f64 1 (+.f64 x 1))) (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 y x) y) (/.f64 x (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (fma.f64 x (/.f64 x y) x)) (cbrt.f64 (+.f64 x 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (/.f64 x y) x) -1) (-.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 (pow.f64 x 3) 1)) (/.f64 1 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (cbrt.f64 (+.f64 x 1))) 1) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (cbrt.f64 (+.f64 x 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (-.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (-.f64 -1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x x) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (/.f64 x y) x) (*.f64 (fma.f64 x (/.f64 x y) x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x (/.f64 x y) x) 0) (fma.f64 x (/.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (/.f64 x y) x) (*.f64 0 (fma.f64 x (/.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x (/.f64 x y) x)) (fma.f64 x (/.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (/.f64 (*.f64 x x) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x x) y) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (fma.f64 x (/.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 y x) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (+.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (/.f64 x y) x)) (cbrt.f64 (pow.f64 (fma.f64 x (/.f64 x y) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x (/.f64 x y) x) 2)) (cbrt.f64 (fma.f64 x (/.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 (+.f64 y x) y))) (cbrt.f64 (pow.f64 (/.f64 (+.f64 y x) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (+.f64 y x) y) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 y x) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 y x) y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (+.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (/.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (/.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 x (/.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (+.f64 y x) y)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (/.f64 x y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 y x) y) 2)) x) (cbrt.f64 (/.f64 (+.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 y x) y) 2)) (*.f64 x (cbrt.f64 (/.f64 (+.f64 y x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 (+.f64 y x) y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (neg.f64 (/.f64 (+.f64 y x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (+.f64 y x) y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 x (/.f64 x y) x))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x (/.f64 x y) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3))) (/.f64 1 (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3))) (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (/.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (neg.f64 (pow.f64 (/.f64 x y) 3)) -1)) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (neg.f64 (pow.f64 (/.f64 x y) 3)) -1) x) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3))) 1) (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 1 (pow.f64 (/.f64 x y) 3))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 y x) y) 2)) x)) (cbrt.f64 (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3))) 1) (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3))) (cbrt.f64 (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x (/.f64 x y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (/.f64 x y) x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (+.f64 1 (pow.f64 (/.f64 x y) 3)))) (neg.f64 (fma.f64 (/.f64 x y) (/.f64 (-.f64 x y) y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (/.f64 x y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (/.f64 x y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (/.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (/.f64 x y) x)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (/.f64 x y) x)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 x (/.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (/.f64 x y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 x y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) -1 (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 x) (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (/.f64 (*.f64 x x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 x x) y))))))"]],"rules":[["egg-rr",55],["egg-rr",73]],"time":30.007080078125,"type":"rewrite"},{"count":[[176,155]],"inputs":[["x","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x))","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 4)) (+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)))","(/.f64 x y)","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 1 x)))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (/.f64 1 (pow.f64 x 2))))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y (pow.f64 x 2))) (/.f64 1 x))))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))","(-.f64 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))) (/.f64 1 x))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2))) (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1))))) (/.f64 1 x))","(/.f64 (pow.f64 x 2) (*.f64 y (+.f64 1 x)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(/.f64 (pow.f64 x 2) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(/.f64 (pow.f64 x 2) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(/.f64 (pow.f64 x 2) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 x (/.f64 (pow.f64 x 2) y))","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)","(fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x)","(+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x))","(fma.f64 (+.f64 1 (/.f64 -1 y)) (pow.f64 x 3) (fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x))","(+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 4)) (+.f64 (*.f64 (-.f64 1 (/.f64 1 y)) (pow.f64 x 3)) (+.f64 (*.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2)) x)))","(fma.f64 (pow.f64 x 4) (+.f64 (/.f64 1 y) -1) (fma.f64 (+.f64 1 (/.f64 -1 y)) (pow.f64 x 3) (fma.f64 (+.f64 (/.f64 1 y) -1) (*.f64 x x) x)))","(/.f64 x y)","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(+.f64 1 (/.f64 (-.f64 x 1) y))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 1 x)))","(+.f64 (+.f64 1 (/.f64 (-.f64 x 1) y)) (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 -1 x)))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (/.f64 1 (pow.f64 x 2))))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y (pow.f64 x 2))) (/.f64 1 x))))","(-.f64 (+.f64 1 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (pow.f64 x -2)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 (pow.f64 x -2) y) (/.f64 1 x))))","(/.f64 x y)","(+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))","(+.f64 1 (/.f64 (-.f64 x 1) y))","(-.f64 (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1)))) (/.f64 1 x))","(+.f64 (+.f64 1 (/.f64 (-.f64 x 1) y)) (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 -1 x)))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 y) 1) (pow.f64 x 2))) (+.f64 (/.f64 1 (*.f64 y x)) (+.f64 (/.f64 x y) (*.f64 -1 (-.f64 (/.f64 1 y) 1))))) (/.f64 1 x))","(+.f64 (*.f64 (+.f64 1 (/.f64 -1 y)) (pow.f64 x -2)) (+.f64 (+.f64 1 (/.f64 (-.f64 x 1) y)) (+.f64 (/.f64 1 (*.f64 y x)) (/.f64 -1 x))))","(/.f64 (pow.f64 x 2) (*.f64 y (+.f64 1 x)))","(/.f64 (*.f64 x x) (*.f64 y (+.f64 1 x)))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(/.f64 x (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(/.f64 (+.f64 (/.f64 (*.f64 x x) y) x) (+.f64 1 x))","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(/.f64 (pow.f64 x 2) y)","(/.f64 (*.f64 x x) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(/.f64 (pow.f64 x 2) y)","(/.f64 (*.f64 x x) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(/.f64 (pow.f64 x 2) y)","(/.f64 (*.f64 x x) y)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 x (/.f64 (pow.f64 x 2) y))","(+.f64 (/.f64 (*.f64 x x) y) x)","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","x","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)","(+.f64 (/.f64 (pow.f64 x 2) y) x)","(+.f64 (/.f64 (*.f64 x x) y) x)"]],"time":148.612060546875,"type":"simplify"},{"compiler":[[2737,1332]],"time":26.7958984375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","done",6.638188556190989],["(/.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) (cbrt.f64 (+.f64 x y))) (cbrt.f64 y)) x) (+.f64 x 1))","fresh",14.375663769536883],["(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))","done",11.056972509768443]],"compiler":[[13,8],[24,15],[13,9]],"count":[[158,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[155,0],"picked":[1,1]}],"min-error":[0],"time":36.7919921875,"type":"prune"},{"accuracy":[0.01953125],"baseline":[6.638188556190989],"branch":[["x",0.0234375,3],["y",1.9969422245547168,4],["(/.f64 (*.f64 x (+.f64 (/.f64 x y) 1)) (+.f64 x 1))",0.01953125,3]],"compiler":[[3,2],[3,2],[13,9],[121,68]],"count":[[9,3]],"inputs":[["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","(/.f64 (*.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) y) 2)) (cbrt.f64 (+.f64 x y))) (cbrt.f64 y)) x) (+.f64 x 1))","(/.f64 (*.f64 (+.f64 1 (/.f64 x y)) x) (+.f64 x 1))","(/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1))","(pow.f64 (cbrt.f64 (/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))) 3)","(+.f64 (/.f64 x (+.f64 1 x)) (/.f64 (pow.f64 x 2) (*.f64 (+.f64 1 x) y)))","(+.f64 1 (+.f64 (/.f64 (+.f64 (/.f64 1 y) -1) x) (/.f64 (-.f64 x 1) y)))","(/.f64 (fma.f64 (/.f64 x y) x x) (+.f64 x 1))","(/.f64 (*.f64 x (+.f64 (/.f64 x y) 1)) (+.f64 x 1))"]],"link":["."],"name":["Codec.Picture.Types:toneMapping from JuicyPixels-3.2.6.1"],"oracle":[53.84904371991144],"outputs":[["(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)","(/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1))","(/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)"]],"time":39.426025390625,"times":[["x",11.23095703125],["y",14.461181640625],["(/.f64 (*.f64 x (+.f64 (/.f64 x y) 1)) (+.f64 x 1))",11.64306640625]],"type":"regimes"},{"bstep":[[2.9928166466414843e-18,1.0475311535240587e-15,0.031982421875],[-9.213461972018014e+111,-2.561301162710745e+109,0.098876953125]],"compiler":[[5,4],[13,9]],"method":["left-value","left-value"],"time":0.2509765625,"type":"bsearch"},{"compiler":[[63,37]],"inputs":[["(if (<=.f64 (/.f64 (*.f64 x (+.f64 (/.f64 x y) 1)) (+.f64 x 1)) -4999999999999999650599673463152198642336665750694884246307948430823614916415456951880981793447127233788614017024) (/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y) (if (<=.f64 (/.f64 (*.f64 x (+.f64 (/.f64 x y) 1)) (+.f64 x 1)) 6490371073168535/1298074214633706907132624082305024) (/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1)) (/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (/.f64 (*.f64 x (+.f64 (/.f64 x y) 1)) (+.f64 x 1)) -4999999999999999650599673463152198642336665750694884246307948430823614916415456951880981793447127233788614017024) (/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y) (if (<=.f64 (/.f64 (*.f64 x (+.f64 (/.f64 x y) 1)) (+.f64 x 1)) 6490371073168535/1298074214633706907132624082305024) (/.f64 (*.f64 (/.f64 (+.f64 x y) y) x) (+.f64 x 1)) (/.f64 (*.f64 (+.f64 x y) (/.f64 x (+.f64 x 1))) y)))","(if (<=.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) -4999999999999999650599673463152198642336665750694884246307948430823614916415456951880981793447127233788614017024) (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) (if (<=.f64 (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) 6490371073168535/1298074214633706907132624082305024) (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1)) (/.f64 (fma.f64 x (/.f64 x y) x) (+.f64 x 1))))"]],"stop":[["fuel",1]],"time":24.256103515625,"type":"simplify"},{"time":0.017822265625,"type":"soundness"},{"compiler":[[63,37]],"remove-preprocessing":[[]],"time":17.358154296875,"type":"end"}]
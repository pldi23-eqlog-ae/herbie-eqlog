[{"compiler":[[18,15]],"method":["search"],"sampling":[[12,0.4992678165435791,0.5002439022064209,0.00048828125],[11,0.4987797737121582,0.5007319450378418,0.00048828125],[10,0.4978036880493164,0.5017080307006836,0.00048828125],[9,0.4958515167236328,0.5036602020263672,0.00048828125],[8,0.4919471740722656,0.5075645446777344,0.00048828125],[7,0.48413848876953125,0.5153732299804688,0.00048828125],[6,0.4685211181640625,0.5309906005859375,0.00048828125],[5,0.437286376953125,0.562225341796875,0.00048828125],[4,0.37481689453125,0.62469482421875,0.00048828125],[3,0.0,0.99951171875,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":165.006103515625,"type":"analyze"},{"outcomes":[["body",1024,"valid",751.46337890625,2037],["body",512,"valid",219.022216796875,1042],["body",2048,"valid",5.02490234375,6],["body",256,"valid",497.00048828125,5171]],"time":1481.0478515625,"type":"sample"},{"compiler":[[17,14]],"inputs":[["0"],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","(/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))"]],"symmetry":[[]],"time":54.712158203125,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","(/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))"]],"time":20.476806640625,"type":"simplify"},{"compiler":[[28,22]],"time":0.527099609375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","next",14.359669141861522],["(/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))","fresh",14.400201311312854]],"compiler":[[17,14],[12,10],[17,14],[12,10]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[14.218674073482426],"time":1.580078125,"type":"prune"},{"compiler":[[54,43]],"locations":[["(sin.f64 (*.f64 x 1/2))",0.03125,true],["(*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))",0.2265625,true],["(*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2)))",0.30859375,true],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))",14.190002784408655,true]],"time":16.995849609375,"type":"localize"},{"count":[[4,48]],"series":[["(sin.f64 (*.f64 x 1/2))","x","-inf",0.1591796875],["(sin.f64 (*.f64 x 1/2))","x","inf",0.14306640625],["(sin.f64 (*.f64 x 1/2))","x","0",0.18896484375],["(*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))","x","-inf",0.29296875],["(*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))","x","inf",0.307861328125],["(*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))","x","0",0.261962890625],["(*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2)))","x","-inf",0.267822265625],["(*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2)))","x","inf",0.548095703125],["(*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2)))","x","0",0.23779296875],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","x","-inf",0.75390625],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","x","inf",1.23095703125],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","x","0",0.6328125]],"time":5.215087890625,"type":"series"},{"count":[[4,271]],"inputs":[["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","(*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2)))","(*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))","(sin.f64 (*.f64 x 1/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) 0) (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) (*.f64 0 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))) (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sin.f64 x))) (/.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) (pow.f64 (cbrt.f64 (sin.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))) (cbrt.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) 2)) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (/.f64 (*.f64 (cbrt.f64 64/9) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 4)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (/.f64 -1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 512/27 (sin.f64 x))) (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sin.f64 x))) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (/.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 x)) (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) -1/3) (/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (sin.f64 x)) (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (/.f64 1 (sin.f64 x))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x))) -3/8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x))) 3/4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (pow.f64 (sin.f64 x) -1/3)) (*.f64 3 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1) (*.f64 3 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1) (*.f64 3 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (pow.f64 (sin.f64 x) -1/3)) (*.f64 3/8 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) -1) (*.f64 3/8 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (*.f64 3/8 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (pow.f64 (sin.f64 x) -1/3)) (*.f64 -3 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1) (*.f64 -3 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1) (*.f64 -3 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) 1) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 -3/8 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 512 3)) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 (cbrt.f64 9) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (/.f64 64 3)) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 (sqrt.f64 3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 3 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 3/4 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (*.f64 (sin.f64 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (*.f64 (sin.f64 x) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (*.f64 (sin.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (*.f64 (neg.f64 (sin.f64 x)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 (neg.f64 (sin.f64 x)) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (*.f64 (neg.f64 (sin.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 x) -1/3) (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 x) -1/3) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 x) -1/3) (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sin.f64 x))) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) 2)) (cbrt.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) 2)) (cbrt.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))) (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 x) -1/3) (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 512/27 (sin.f64 x))) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (sin.f64 x)) (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (sin.f64 x)) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 3/8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))) (*.f64 (cbrt.f64 64/9) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 4))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (/.f64 1 (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)) 3/8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) 1) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (cbrt.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (cbrt.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) 2))) (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) 3/8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 512 3)) (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (/.f64 64 3)) (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 -3 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (sin.f64 x) -3) (*.f64 512/27 (pow.f64 (sin.f64 (*.f64 x 1/2)) 6))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 x) -3) (*.f64 512/27 (pow.f64 (sin.f64 (*.f64 x 1/2)) 6))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (*.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 0) (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (*.f64 0 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 64 3)) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 512 3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 8/3) (*.f64 (cbrt.f64 64/9) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8/3 (sin.f64 (*.f64 x 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 1/3)) (cbrt.f64 (/.f64 1 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 2)) (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 8/3)) (cbrt.f64 64/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 8/3)) (sqrt.f64 8/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 512/27 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 8/3) (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 8/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8 (*.f64 1/3 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8/3 (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) 8/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -8/3 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) 3/2) 4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) -3) -8)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (sin.f64 (*.f64 x 1/2))) 8)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) -1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 2)) (cbrt.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) -3/8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) 2) 3/4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 2))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 9))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (cbrt.f64 64/9) (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (*.f64 (cbrt.f64 64/9) (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (sin.f64 (*.f64 x 1/2))) 3/4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 1/3)) 1) (*.f64 (cbrt.f64 9) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 1/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 x 1/2)) 3/8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 512 3)) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (/.f64 64 3)) (sin.f64 (*.f64 x 1/2))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (/.f64 512 3))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (/.f64 64 3))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (*.f64 (cbrt.f64 64/9) (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 1/3)) 1) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) 1) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 1/3))) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8/3 (sin.f64 (*.f64 x 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -8/3 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 0) (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 0 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 8/3 (/.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) 2) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/2 3/8) (/.f64 (*.f64 1/2 (cos.f64 (*.f64 x (+.f64 1/2 1/2)))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 2)) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (*.f64 (cbrt.f64 64/9) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 64/9) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 4)) (cbrt.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 4) 3/8) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) (cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 8/3) (*.f64 (sqrt.f64 8/3) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 8/3) (*.f64 (cbrt.f64 64/9) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (+.f64 2 3)) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) 8/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8 (*.f64 1/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) 3/2) 4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) -3) -8)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 8)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8/3 (sin.f64 (*.f64 x 1/2))) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -8/3 (neg.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (neg.f64 (*.f64 (cbrt.f64 64/9) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 -8/3 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 8/3)) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 8/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 8/3)) (sin.f64 (*.f64 x 1/2))) (*.f64 (neg.f64 (sqrt.f64 8/3)) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2)))) (*.f64 -1 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2)))) (*.f64 1 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) -1) (*.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 1) (*.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (neg.f64 (sqrt.f64 8/3))) (*.f64 (sin.f64 (*.f64 x 1/2)) (neg.f64 (sqrt.f64 8/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) 3/8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8/3 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 1/3))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 (*.f64 x 1/2)) -8)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) -8) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) -1) -3/8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (cbrt.f64 (/.f64 512 3))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sqrt.f64 (/.f64 64 3))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) 8) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) 2) 3/4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 2)) (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (cbrt.f64 64/9) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (cbrt.f64 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2 (*.f64 (cbrt.f64 64/9) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (*.f64 (cbrt.f64 64/9) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2)))) 8/3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 1/3)) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 (*.f64 x 1/2))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -3/8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 512 3)) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (/.f64 64 3)) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 3/4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2)))) (*.f64 3/8 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2))))) (*.f64 -3 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2))))) (*.f64 -3/8 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 512 3)) (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2))))) (*.f64 (cbrt.f64 9) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 (/.f64 64 3)) (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2))))) (*.f64 (sqrt.f64 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2))))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2))))) (*.f64 3/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2)))) 1) (*.f64 2 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2)))) -1) (*.f64 2 -3/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2)))) (cbrt.f64 (/.f64 512 3))) (*.f64 2 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2)))) (sqrt.f64 (/.f64 64 3))) (*.f64 2 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2)))) 2) (*.f64 2 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2)))) 8) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (cos.f64 0) (cos.f64 (*.f64 x (+.f64 1/2 1/2)))) -8) (*.f64 2 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 512/27 (pow.f64 (sin.f64 (*.f64 x 1/2)) 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 512/27 (pow.f64 (sin.f64 (*.f64 x 1/2)) 6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 (*.f64 x 1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) 0) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 0 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 (*.f64 x 1/2))))))"]],"rules":[["egg-rr",19],["egg-rr",94],["egg-rr",63],["egg-rr",95]],"time":44.72607421875,"type":"rewrite"},{"count":[[319,305]],"inputs":[["(*.f64 2/3 x)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 4/3 x)","(+.f64 (*.f64 4/3 x) (*.f64 -1/18 (pow.f64 x 3)))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3))))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 -1/241920 (pow.f64 x 7)) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3)))))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 2/3 (pow.f64 x 2))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (*.f64 2/3 (pow.f64 x 2)))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (+.f64 (*.f64 2/3 (pow.f64 x 2)) (*.f64 1/540 (pow.f64 x 6))))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (+.f64 (*.f64 2/3 (pow.f64 x 2)) (+.f64 (*.f64 -1/30240 (pow.f64 x 8)) (*.f64 1/540 (pow.f64 x 6)))))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 1/2 x)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2/3 x)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(fma.f64 1/18 (pow.f64 x 3) (*.f64 2/3 x))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(fma.f64 (pow.f64 x 3) 1/18 (fma.f64 (pow.f64 x 5) 1/180 (*.f64 2/3 x)))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 (pow.f64 x 7) 17/30240 (fma.f64 (pow.f64 x 5) 1/180 (*.f64 2/3 x))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 4/3 x)","(+.f64 (*.f64 4/3 x) (*.f64 -1/18 (pow.f64 x 3)))","(fma.f64 -1/18 (pow.f64 x 3) (*.f64 4/3 x))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3))))","(fma.f64 4/3 x (fma.f64 1/1440 (pow.f64 x 5) (*.f64 -1/18 (pow.f64 x 3))))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 -1/241920 (pow.f64 x 7)) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3)))))","(fma.f64 4/3 x (fma.f64 -1/241920 (pow.f64 x 7) (fma.f64 1/1440 (pow.f64 x 5) (*.f64 -1/18 (pow.f64 x 3)))))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (*.f64 x x))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (*.f64 2/3 (pow.f64 x 2)))","(fma.f64 -1/18 (pow.f64 x 4) (*.f64 2/3 (*.f64 x x)))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (+.f64 (*.f64 2/3 (pow.f64 x 2)) (*.f64 1/540 (pow.f64 x 6))))","(fma.f64 -1/18 (pow.f64 x 4) (fma.f64 1/540 (pow.f64 x 6) (*.f64 2/3 (*.f64 x x))))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (+.f64 (*.f64 2/3 (pow.f64 x 2)) (+.f64 (*.f64 -1/30240 (pow.f64 x 8)) (*.f64 1/540 (pow.f64 x 6)))))","(fma.f64 (pow.f64 x 4) -1/18 (fma.f64 2/3 (*.f64 x x) (fma.f64 -1/30240 (pow.f64 x 8) (*.f64 1/540 (pow.f64 x 6)))))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 1/2 x)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(fma.f64 -1/48 (pow.f64 x 3) (*.f64 1/2 x))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(fma.f64 -1/48 (pow.f64 x 3) (fma.f64 1/3840 (pow.f64 x 5) (*.f64 1/2 x)))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","(fma.f64 -1/645120 (pow.f64 x 7) (fma.f64 -1/48 (pow.f64 x 3) (fma.f64 1/3840 (pow.f64 x 5) (*.f64 1/2 x))))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))"]],"time":143.48486328125,"type":"simplify"},{"compiler":[[5946,4598]],"time":81.828125,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))","fresh",0.4242363769897463],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) (cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 2))) (sin.f64 x))","fresh",14.419960499314385],["(pow.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))) 3)","fresh",14.591032875283052],["(/.f64 (pow.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 2) (sin.f64 x))","fresh",14.432930421166848],["(/.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 512/27 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","fresh",14.386055421166846],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","done",14.359669141861522],["(/.f64 (*.f64 (sqrt.f64 (/.f64 64 3)) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 (sqrt.f64 3) (sin.f64 x)))","fresh",14.38245058838389],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)","next",0.3004875488422101],["(*.f64 (/.f64 1 (sin.f64 x)) (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))","fresh",14.425310432282005],["(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sin.f64 x))) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))","fresh",15.52561170899768]],"compiler":[[21,18],[26,22],[15,13],[13,11],[24,20],[17,14],[18,16],[17,14],[14,12],[22,17],[21,18],[26,22],[15,13],[13,11],[24,20],[18,16],[17,14],[14,12],[22,17]],"count":[[334,10]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[332,9],"picked":[1,1]}],"min-error":[0],"time":106.492919921875,"type":"prune"},{"compiler":[[57,41]],"locations":[["(sin.f64 (*.f64 x 1/2))",0.03125,false],["(/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))",0.12109375,true],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)",0.12109375,true],["(*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))",0.23503876953688402,true]],"time":17.721923828125,"type":"localize"},{"count":[[3,36]],"series":[["(/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))","x","-inf",0.369140625],["(/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))","x","inf",0.3818359375],["(/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))","x","0",0.242919921875],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)","x","-inf",0.170166015625],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)","x","inf",0.18896484375],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)","x","0",0.197021484375],["(*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","x","-inf",0.316162109375],["(*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","x","inf",0.322021484375],["(*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","x","0",0.310791015625]],"time":2.63818359375,"type":"series"},{"count":[[3,223]],"inputs":[["(*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)","(/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (*.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 0) (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (*.f64 0 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) 2)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (*.f64 (sin.f64 (*.f64 x 1/2)) -8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 (sin.f64 x))) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (*.f64 (sin.f64 (*.f64 x 1/2)) -8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2)) (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)) -8)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (/.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) 2)) (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 x)) (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (*.f64 (sin.f64 (*.f64 x 1/2)) -8)) (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x))) (cbrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) 2)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (*.f64 8 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (/.f64 -1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) (pow.f64 (cbrt.f64 (sin.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2)) (*.f64 -2 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 (sin.f64 x))) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 x 1/2)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (*.f64 (sin.f64 (*.f64 x 1/2)) -8))) (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (*.f64 (sin.f64 (*.f64 x 1/2)) -8))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (*.f64 (sin.f64 (*.f64 x 1/2)) -8)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) 1) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -2 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) 1) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)) (/.f64 1 -8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) (*.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 0) (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) (*.f64 0 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))) (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 3) (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (sqrt.f64 3)) (/.f64 1 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 2)) (cbrt.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 -3)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 -1/3)) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 -1/3)) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x)) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) -1/3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/3) (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2)) -1/3) (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) -1/3) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) -1/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -3) (*.f64 (sin.f64 (*.f64 x 1/2)) -8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 9)) (cbrt.f64 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 9)) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2) 9)) (cbrt.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x)) (cbrt.f64 9)) (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 9)) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (/.f64 1 (*.f64 -3 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 -3)) (cbrt.f64 (/.f64 1 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (/.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 2)) (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 2)) (cbrt.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 9))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x)) (cbrt.f64 9))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2) 9))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 2))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2) 9))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 2))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 9))) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (neg.f64 (sqrt.f64 3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 -3)) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 9)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (sqrt.f64 3)) (sqrt.f64 (sqrt.f64 3))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (sqrt.f64 3)) (cbrt.f64 (sqrt.f64 3))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 -3)) (cbrt.f64 3)) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 -3)) (cbrt.f64 (cbrt.f64 9))) (pow.f64 (cbrt.f64 (cbrt.f64 9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 9)) (cbrt.f64 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)) (/.f64 -3 -8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 -3))) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (sqrt.f64 3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 -3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 -3 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 -1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/3 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/3 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 -1/3) (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 -1/3)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 -3)) (*.f64 (sin.f64 (*.f64 x 1/2)) -8)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1/3) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (sqrt.f64 3)) 1) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) 1) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 -3)) 1) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) -1/3)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) -1/3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) -1/3)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) -1/3) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -2 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2)) -1/3)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) -1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) 1) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (sqrt.f64 3)) 1) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 -3)) 1) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (/.f64 (sin.f64 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 3 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 -3 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (cbrt.f64 (sin.f64 x))) (*.f64 -3 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (neg.f64 (*.f64 -3 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 0) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (*.f64 0 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sin.f64 x))) (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 -1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) -1/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (pow.f64 (sin.f64 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) (cbrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sin.f64 x)) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (pow.f64 (cbrt.f64 (sin.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (cbrt.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))))) (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (cbrt.f64 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 x) -1/3) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2))) (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (pow.f64 (sin.f64 x) 2)))) (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (pow.f64 (sin.f64 x) 2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) 1) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sin.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) 1) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 3))))))"]],"rules":[["egg-rr",49],["egg-rr",104],["egg-rr",70]],"time":41.64501953125,"type":"rewrite"},{"count":[[259,249]],"inputs":[["(*.f64 -2 x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (*.f64 -2 x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/60 (pow.f64 x 5)) (*.f64 -2 x)))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -17/10080 (pow.f64 x 7)) (*.f64 -2 x))))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 2/3 x)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","1/2","(+.f64 1/2 (*.f64 1/16 (pow.f64 x 2)))","(+.f64 1/2 (+.f64 (*.f64 5/768 (pow.f64 x 4)) (*.f64 1/16 (pow.f64 x 2))))","(+.f64 1/2 (+.f64 (*.f64 61/92160 (pow.f64 x 6)) (+.f64 (*.f64 5/768 (pow.f64 x 4)) (*.f64 1/16 (pow.f64 x 2)))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -2 x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (*.f64 -2 x))","(fma.f64 -1/6 (pow.f64 x 3) (*.f64 -2 x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/60 (pow.f64 x 5)) (*.f64 -2 x)))","(fma.f64 (pow.f64 x 3) -1/6 (fma.f64 -1/60 (pow.f64 x 5) (*.f64 -2 x)))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/60 (pow.f64 x 5)) (+.f64 (*.f64 -17/10080 (pow.f64 x 7)) (*.f64 -2 x))))","(fma.f64 (pow.f64 x 3) -1/6 (fma.f64 -1/60 (pow.f64 x 5) (fma.f64 -17/10080 (pow.f64 x 7) (*.f64 -2 x))))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 -8 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 2/3 x)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(fma.f64 1/18 (pow.f64 x 3) (*.f64 2/3 x))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 1/180 (pow.f64 x 5) (*.f64 2/3 x)))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(fma.f64 (pow.f64 x 3) 1/18 (fma.f64 17/30240 (pow.f64 x 7) (fma.f64 1/180 (pow.f64 x 5) (*.f64 2/3 x))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(/.f64 (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x))","1/2","(+.f64 1/2 (*.f64 1/16 (pow.f64 x 2)))","(fma.f64 (*.f64 x x) 1/16 1/2)","(+.f64 1/2 (+.f64 (*.f64 5/768 (pow.f64 x 4)) (*.f64 1/16 (pow.f64 x 2))))","(+.f64 1/2 (fma.f64 5/768 (pow.f64 x 4) (*.f64 1/16 (*.f64 x x))))","(+.f64 1/2 (+.f64 (*.f64 61/92160 (pow.f64 x 6)) (+.f64 (*.f64 5/768 (pow.f64 x 4)) (*.f64 1/16 (pow.f64 x 2)))))","(+.f64 1/2 (fma.f64 (pow.f64 x 6) 61/92160 (fma.f64 5/768 (pow.f64 x 4) (*.f64 1/16 (*.f64 x x)))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))","(/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x))"]],"time":112.90380859375,"type":"simplify"},{"compiler":[[6155,4772]],"time":81.982177734375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (*.f64 (sin.f64 (*.f64 x 1/2)) -8)) (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) -3)","fresh",0.5863839356003985],["(/.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 512/27 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","fresh",14.386055421166846],["(/.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))","next",0.4242363769897463],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) -3)","fresh",15.456256604686498],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (*.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (pow.f64 (sin.f64 x) 2))))) -3)","fresh",15.433433851931632],["(/.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 -1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 9))","fresh",0.4837875976844202],["(/.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)","fresh",0.6531602539794928],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3) (sin.f64 x))) -3)","fresh",0.7253367672202963],["(/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 -3 (sin.f64 x)))","fresh",14.324948720146269],["(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x)) (cbrt.f64 9))) (cbrt.f64 -3))","fresh",0.49911889652663044],["(/.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2))) -3)","fresh",14.396457051587928]],"compiler":[[29,23],[24,20],[21,18],[24,19],[31,25],[21,18],[20,17],[20,17],[14,12],[21,18],[30,25],[29,23],[24,20],[21,18],[24,19],[31,25],[21,18],[20,17],[20,17],[14,12],[21,18],[30,25]],"count":[[313,11]],"kept":[{"done":[1,0],"fresh":[8,2],"new":[303,9],"picked":[1,0]}],"min-error":[0],"time":110.953857421875,"type":"prune"},{"compiler":[[78,61]],"locations":[["(/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))",0.12109375,false],["(*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))",0.209316259768442,true],["(*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))",0.37890625,true],["(/.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))",0.3984375,true]],"time":24.43310546875,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","x","-inf",0.7158203125],["(*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","x","inf",0.596923828125],["(*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","x","0",0.68896484375],["(*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))","x","-inf",0.4189453125],["(*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))","x","inf",0.424072265625],["(*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))","x","0",0.3662109375],["(/.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))","x","-inf",0.926025390625],["(/.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))","x","inf",1.1708984375],["(/.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))","x","0",1.843017578125]],"time":7.370849609375,"type":"series"},{"count":[[3,238]],"inputs":[["(/.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))","(*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))","(*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) 1/2) (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) 0) (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 0 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x))) (*.f64 1/2 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x))) (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (*.f64 (sin.f64 x) (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sqrt.f64 3))) (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (*.f64 (sin.f64 x) (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (*.f64 (sin.f64 x) (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x))) (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2) 1/3)) (cbrt.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)) (neg.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))) (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 (sqrt.f64 3))) (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 3))) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 3))) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sqrt.f64 3))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sqrt.f64 1/3))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 (sqrt.f64 27)))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2)) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 3 (neg.f64 1/4)) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/3)) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (/.f64 1 (*.f64 (sin.f64 x) (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (/.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))) (pow.f64 3 (neg.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (cbrt.f64 (sqrt.f64 3))) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))) (neg.f64 (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (neg.f64 (sqrt.f64 (sqrt.f64 3)))) (neg.f64 (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))) (pow.f64 3 1/8)) (pow.f64 3 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) -1) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) 1) (*.f64 (neg.f64 (sin.f64 x)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (pow.f64 3 (neg.f64 1/4))) (*.f64 (neg.f64 (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (neg.f64 (sin.f64 x)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) -1) (*.f64 (sin.f64 x) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (pow.f64 3 (neg.f64 1/4))) (*.f64 (sin.f64 x) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (sin.f64 x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) -1) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) 1) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) (pow.f64 3 (neg.f64 1/4))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) 1) (*.f64 (sin.f64 x) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 3 (neg.f64 1/4)) (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))) (*.f64 (sqrt.f64 (sqrt.f64 3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 3 (neg.f64 1/4)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x)))) (*.f64 (sqrt.f64 (sqrt.f64 3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 3 (neg.f64 1/4)) (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2))))) (*.f64 (sqrt.f64 (sqrt.f64 3)) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2))))) (*.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))) (*.f64 (cbrt.f64 3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x)))) (*.f64 (cbrt.f64 3) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2))))) (*.f64 (cbrt.f64 3) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (neg.f64 (*.f64 (sin.f64 x) (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3)))) (neg.f64 (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (cbrt.f64 (sqrt.f64 3))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 (sin.f64 x) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2))))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 3 (neg.f64 1/4)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sqrt.f64 1/3))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 3))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 (sqrt.f64 27)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 3))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 (sqrt.f64 3))) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2) 1/3)) (cbrt.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)))) (neg.f64 (cbrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2) 1/3)) (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)))) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sqrt.f64 3))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 1/3))) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2)) (sqrt.f64 1/3))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (cbrt.f64 3)) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 3)))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (neg.f64 (sqrt.f64 1/3))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 1/3)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) (sqrt.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3)))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2)) (sqrt.f64 (sqrt.f64 3)))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 3))) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sin.f64 x))) (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2) 1/3))) (neg.f64 (cbrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))) (cbrt.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2) 1/3))) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sqrt.f64 1/3))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sqrt.f64 1/3))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sqrt.f64 1/3))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3)))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (cbrt.f64 (sqrt.f64 3))) 1) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))) 1) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) 1) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (cbrt.f64 3))) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) 1) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) -1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (cbrt.f64 (sqrt.f64 3))) (cbrt.f64 (cbrt.f64 3))) (cbrt.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (cbrt.f64 (sqrt.f64 3))) 1) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)) (cbrt.f64 (sqrt.f64 3))) (neg.f64 (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) -1) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))) 1) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))) (cbrt.f64 (sqrt.f64 (sqrt.f64 3)))) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (/.f64 (*.f64 (sin.f64 x) (sqrt.f64 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 (sqrt.f64 3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) (*.f64 (sqrt.f64 3) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (*.f64 (sqrt.f64 3) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (*.f64 (neg.f64 (sqrt.f64 3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 1 (*.f64 (sin.f64 x) (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 (*.f64 (sin.f64 x) (sqrt.f64 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (cbrt.f64 (sqrt.f64 3)))) (neg.f64 (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (*.f64 (sin.f64 x) (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (*.f64 (sin.f64 x) (sqrt.f64 3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sqrt.f64 1/3)) (sin.f64 x)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1/2) (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 0) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (*.f64 0 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 1/2 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) 2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (*.f64 8 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (*.f64 1/3 (pow.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 8)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/3 (pow.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) 2))) (cbrt.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/27) (*.f64 8 (sin.f64 (*.f64 x 1/2))))) (cbrt.f64 (pow.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 1/3 64)) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 1/3)) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (cbrt.f64 1/3) (*.f64 8 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 8) (*.f64 (sqrt.f64 8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (*.f64 64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 4 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 1/8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 1/2) (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 0) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) (*.f64 0 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))) (*.f64 1/2 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) 2)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (sin.f64 x))) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2)) (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (cbrt.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))) (cbrt.f64 (*.f64 1/3 (pow.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (/.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (/.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 (cbrt.f64 (*.f64 1/3 (pow.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) 2))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (neg.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (*.f64 -8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sin.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) (pow.f64 (cbrt.f64 (sin.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (/.f64 -1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2)) (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (sin.f64 x))) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2))))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) -1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) 1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) 1) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 (*.f64 x 1/2)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))) (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) -1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) 1) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (sin.f64 x))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) 1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x))) 1) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 -8 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x)) 3))))))"]],"rules":[["egg-rr",71],["egg-rr",37],["egg-rr",130]],"time":52.968994140625,"type":"rewrite"},{"count":[[274,266]],"inputs":[["(*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3)))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (pow.f64 x 5))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3)))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (pow.f64 x 5))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/80640 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/20160 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 -1/6 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))))))) (pow.f64 x 7))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3))))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 4 (*.f64 (sqrt.f64 1/3) x))","(+.f64 (*.f64 4 (*.f64 (sqrt.f64 1/3) x)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))))","(+.f64 (*.f64 1/480 (*.f64 (sqrt.f64 1/3) (pow.f64 x 5))) (+.f64 (*.f64 4 (*.f64 (sqrt.f64 1/3) x)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3)))))","(+.f64 (*.f64 -1/80640 (*.f64 (sqrt.f64 1/3) (pow.f64 x 7))) (+.f64 (*.f64 1/480 (*.f64 (sqrt.f64 1/3) (pow.f64 x 5))) (+.f64 (*.f64 4 (*.f64 (sqrt.f64 1/3) x)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 2 (*.f64 (sqrt.f64 1/3) x))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (*.f64 2 (*.f64 (sqrt.f64 1/3) x)))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 1/3) x)) (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3)))))) (pow.f64 x 5)))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 1/3) x)) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/80640 (sqrt.f64 1/3)) (+.f64 (*.f64 -1/20160 (sqrt.f64 1/3)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))))))) (*.f64 1/120 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))))))) (pow.f64 x 7))) (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3)))))) (pow.f64 x 5))))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (sin.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3)))","(*.f64 2 (*.f64 (/.f64 x 1) (sqrt.f64 1/9)))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3))))","(fma.f64 (*.f64 8 (*.f64 (sqrt.f64 1/9) 1/48)) (pow.f64 x 3) (*.f64 2 (*.f64 (/.f64 x 1) (sqrt.f64 1/9))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (pow.f64 x 5))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3)))))","(+.f64 (*.f64 8 (+.f64 (*.f64 (*.f64 (sqrt.f64 1/9) 1/48) (pow.f64 x 3)) (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/9)) (fma.f64 -1/6 (*.f64 (sqrt.f64 1/9) 1/48) (*.f64 1/480 (sqrt.f64 1/9)))) (pow.f64 x 5)))) (*.f64 2 (*.f64 (/.f64 x 1) (sqrt.f64 1/9))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (pow.f64 x 5))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/80640 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/20160 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 -1/6 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))))))) (pow.f64 x 7))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3))))))","(+.f64 (*.f64 8 (+.f64 (*.f64 (*.f64 (sqrt.f64 1/9) 1/48) (pow.f64 x 3)) (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/9)) (fma.f64 -1/6 (*.f64 (sqrt.f64 1/9) 1/48) (*.f64 1/480 (sqrt.f64 1/9)))) (pow.f64 x 5)))) (fma.f64 8 (*.f64 (-.f64 (*.f64 (sqrt.f64 1/9) (-.f64 -1/80640 -1/20160)) (fma.f64 1/120 (*.f64 (sqrt.f64 1/9) 1/48) (*.f64 -1/6 (-.f64 (*.f64 1/1440 (sqrt.f64 1/9)) (fma.f64 -1/6 (*.f64 (sqrt.f64 1/9) 1/48) (*.f64 1/480 (sqrt.f64 1/9))))))) (pow.f64 x 7)) (*.f64 2 (*.f64 (/.f64 x 1) (sqrt.f64 1/9)))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (*.f64 (sqrt.f64 1/9) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (*.f64 (sqrt.f64 1/9) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (*.f64 (sqrt.f64 1/9) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (*.f64 (sqrt.f64 1/9) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (*.f64 (sqrt.f64 1/9) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (*.f64 (sqrt.f64 1/9) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (*.f64 (sqrt.f64 1/9) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (*.f64 (sqrt.f64 1/9) (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x))))","(*.f64 4 (*.f64 (sqrt.f64 1/3) x))","(+.f64 (*.f64 4 (*.f64 (sqrt.f64 1/3) x)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))))","(fma.f64 4 (*.f64 (sqrt.f64 1/3) x) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))))","(+.f64 (*.f64 1/480 (*.f64 (sqrt.f64 1/3) (pow.f64 x 5))) (+.f64 (*.f64 4 (*.f64 (sqrt.f64 1/3) x)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3)))))","(fma.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 x 5)) 1/480 (fma.f64 4 (*.f64 (sqrt.f64 1/3) x) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3)))))","(+.f64 (*.f64 -1/80640 (*.f64 (sqrt.f64 1/3) (pow.f64 x 7))) (+.f64 (*.f64 1/480 (*.f64 (sqrt.f64 1/3) (pow.f64 x 5))) (+.f64 (*.f64 4 (*.f64 (sqrt.f64 1/3) x)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))))))","(fma.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 x 7)) -1/80640 (fma.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 x 5)) 1/480 (fma.f64 4 (*.f64 (sqrt.f64 1/3) x) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 8 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))))","(*.f64 2 (*.f64 (sqrt.f64 1/3) x))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (*.f64 2 (*.f64 (sqrt.f64 1/3) x)))","(fma.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) 1/48)) (pow.f64 x 3) (*.f64 2 (*.f64 (sqrt.f64 1/3) x)))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 1/3) x)) (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3)))))) (pow.f64 x 5)))))","(fma.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) 1/48)) (pow.f64 x 3) (fma.f64 2 (*.f64 (sqrt.f64 1/3) x) (*.f64 8 (*.f64 (-.f64 (*.f64 (sqrt.f64 1/3) (-.f64 1/1440 1/480)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) 1/48))) (pow.f64 x 5)))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 1/3) x)) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/80640 (sqrt.f64 1/3)) (+.f64 (*.f64 -1/20160 (sqrt.f64 1/3)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))))))) (*.f64 1/120 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))))))) (pow.f64 x 7))) (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3)))))) (pow.f64 x 5))))))","(fma.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) 1/48)) (pow.f64 x 3) (fma.f64 8 (fma.f64 (pow.f64 x 7) (-.f64 (*.f64 (sqrt.f64 1/3) (-.f64 -1/80640 -1/20160)) (fma.f64 -1/6 (-.f64 (*.f64 (sqrt.f64 1/3) (-.f64 1/1440 1/480)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) 1/48))) (*.f64 1/120 (*.f64 (sqrt.f64 1/3) 1/48)))) (*.f64 (-.f64 (*.f64 (sqrt.f64 1/3) (-.f64 1/1440 1/480)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) 1/48))) (pow.f64 x 5))) (*.f64 2 (*.f64 (sqrt.f64 1/3) x))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))"]],"time":136.607177734375,"type":"simplify"},{"compiler":[[8962,7335]],"time":119.72998046875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)","fresh",0.6531602539794928],["(/.f64 (*.f64 (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 3))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 3))","fresh",0.4831238281475362],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (*.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (pow.f64 (sin.f64 x) 2))))) -3)","fresh",15.433433851931632],["(/.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 -1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 9))","fresh",0.4837875976844202],["(/.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 512/27 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","fresh",14.386055421166846],["(/.f64 (*.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))","fresh",0.49292763675818835],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) -3)","fresh",15.456256604686498],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 3))","next",0.4235726074528623],["(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x)) (cbrt.f64 9))) (cbrt.f64 -3))","fresh",0.49911889652663044],["(/.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2))) -3)","fresh",14.396457051587928]],"compiler":[[20,17],[25,22],[31,25],[21,18],[24,20],[25,22],[24,19],[21,18],[21,18],[30,25],[20,17],[25,22],[31,25],[21,18],[24,20],[25,22],[24,19],[21,18],[21,18],[30,25]],"count":[[334,10]],"kept":[{"done":[0,0],"fresh":[10,7],"new":[323,3],"picked":[1,0]}],"min-error":[0],"time":120.1328125,"type":"prune"},{"compiler":[[79,62]],"locations":[["(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))",0.265625,true],["(*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))",0.35546875,true],["(*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))",0.37890625,true],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 3))",0.3984375,true]],"time":23.986083984375,"type":"localize"},{"count":[[4,48]],"series":[["(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))","x","-inf",0.494873046875],["(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))","x","inf",0.403076171875],["(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))","x","0",2.2138671875],["(*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))","x","-inf",0.5751953125],["(*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))","x","inf",0.171142578125],["(*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))","x","0",0.304931640625],["(*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))","x","-inf",0.15478515625],["(*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))","x","inf",0.157958984375],["(*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))","x","0",0.26708984375],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 3))","x","-inf",0.659912109375],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 3))","x","inf",0.225830078125],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 3))","x","0",0.468017578125]],"time":6.333984375,"type":"series"},{"count":[[4,267]],"inputs":[["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 3))","(*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))","(*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (*.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1/2) (*.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 0) (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (*.f64 0 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 1/2 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sqrt.f64 3))) (/.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sqrt.f64 (sqrt.f64 3)) 8)) (pow.f64 3 (neg.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2) 1/3)) (cbrt.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (neg.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (cbrt.f64 (sqrt.f64 3))) (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (/.f64 (sqrt.f64 (sqrt.f64 3)) 8)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (/.f64 (cbrt.f64 (sqrt.f64 3)) 8)) (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (sqrt.f64 (sqrt.f64 27)))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2)) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sqrt.f64 3))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sqrt.f64 1/3))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 3 (neg.f64 1/4)) (/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sqrt.f64 (sqrt.f64 3)) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 1/3)) (/.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (/.f64 1 (*.f64 (sin.f64 x) (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sqrt.f64 3) 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1) (*.f64 (neg.f64 (sin.f64 x)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (pow.f64 3 (neg.f64 1/4))) (*.f64 (neg.f64 (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (neg.f64 (sin.f64 x)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) -1) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))) 1) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))) (pow.f64 3 (neg.f64 1/4))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))) -1) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (pow.f64 3 (neg.f64 1/4))) (*.f64 (sin.f64 x) (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sqrt.f64 1/3))) (*.f64 (sin.f64 x) (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) -1) (*.f64 (sin.f64 x) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1) (*.f64 (sin.f64 x) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x)))) (*.f64 (neg.f64 (sqrt.f64 3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 3 (neg.f64 1/4)) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))) (*.f64 (sqrt.f64 (sqrt.f64 3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 3 (neg.f64 1/4)) (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x)))) (*.f64 (sqrt.f64 (sqrt.f64 3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 3 (neg.f64 1/4)) (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 (sqrt.f64 (sqrt.f64 3)) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))) (*.f64 (cbrt.f64 3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x)))) (*.f64 (cbrt.f64 3) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 (cbrt.f64 3) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))) (*.f64 (sqrt.f64 3) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sqrt.f64 (sqrt.f64 3)) 8))) (neg.f64 (sqrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (neg.f64 (*.f64 (sin.f64 x) (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 1/3)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sqrt.f64 (sqrt.f64 3)) 8)) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (*.f64 (sin.f64 x) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (sqrt.f64 (sqrt.f64 27)))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sqrt.f64 3))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (/.f64 (cbrt.f64 (sqrt.f64 3)) 8)) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sqrt.f64 1/3))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (/.f64 (sqrt.f64 (sqrt.f64 3)) 8)) (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 3 (neg.f64 1/4)) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2) 1/3)) (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))))) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2) 1/3)) (cbrt.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))) (neg.f64 (cbrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (cbrt.f64 (sqrt.f64 3))) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 1/3))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3))) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (neg.f64 (sqrt.f64 1/3))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sqrt.f64 3)))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (sqrt.f64 3)))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2)) (sqrt.f64 1/3))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2)) (sqrt.f64 (sqrt.f64 3)))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sqrt.f64 (sqrt.f64 3)) 8)) 1) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 1/3)) 1) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (cbrt.f64 (sqrt.f64 1/3))) 1) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (sin.f64 x))) (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 1/3))) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sqrt.f64 1/3)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))) (sqrt.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 1/3))) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (cbrt.f64 3))) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (cbrt.f64 1/3)) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2) 1/3))) (cbrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)))) (cbrt.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2) 1/3))) (neg.f64 (cbrt.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sqrt.f64 (sqrt.f64 3)))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (/.f64 (*.f64 (sin.f64 x) (sqrt.f64 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (*.f64 1 (*.f64 (sin.f64 x) (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (*.f64 (*.f64 (sin.f64 x) (sqrt.f64 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (*.f64 (neg.f64 (sqrt.f64 3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (*.f64 (sqrt.f64 3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (*.f64 (sqrt.f64 3) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 1/3))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (cbrt.f64 (sqrt.f64 1/3)))) (neg.f64 (cbrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (sqrt.f64 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 1/2) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 0) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 0 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (*.f64 1/2 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 1/3)) (*.f64 (cbrt.f64 1/3) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 1/3)) (*.f64 (sqrt.f64 (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) 1/3)) (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (sqrt.f64 1/3))) (sqrt.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sqrt.f64 1/27) (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (neg.f64 (cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (neg.f64 (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 1/3)) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (sqrt.f64 3))) (sqrt.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3) (sqrt.f64 27)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 1/2) (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 0) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) (*.f64 0 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))) (*.f64 1/2 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) 2)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 2)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (sin.f64 x))) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2)) (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (cbrt.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))))) (cbrt.f64 (pow.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sin.f64 (*.f64 x 1/2))) 8)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (/.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/8) (cbrt.f64 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (neg.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (*.f64 -8 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))) (pow.f64 (cbrt.f64 (sin.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (/.f64 -1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2)) (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (sin.f64 x))) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) -1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (sin.f64 x)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 8)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) 8)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 2)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 2)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))) (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2))))) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) 1) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))) 1) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sin.f64 (*.f64 x 1/2))) 1/8)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) 8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))) 1) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 -8 (sin.f64 (*.f64 x 1/2))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/2) (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 0) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 0 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (*.f64 1/2 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sin.f64 x))) (neg.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (/.f64 (cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) 1/3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (/.f64 -1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sqrt.f64 1/27) (sin.f64 x))) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (/.f64 (sqrt.f64 1/3) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (sqrt.f64 1/3) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (/.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 x)) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 2)) (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) -1/3) (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (sin.f64 x))) (pow.f64 (cbrt.f64 (sin.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (sqrt.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 2)) (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 2)) (cbrt.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))))) (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) 1/3))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sqrt.f64 1/27) (sin.f64 x))) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 x) -1/3) (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 2))) (cbrt.f64 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (sin.f64 x))) 1) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 1/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (sqrt.f64 1/3) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (sin.f64 x))) 1) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (sin.f64 x)))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) 3))))))"]],"rules":[["egg-rr",49],["egg-rr",61],["egg-rr",37],["egg-rr",120]],"time":55.3701171875,"type":"rewrite"},{"count":[[315,305]],"inputs":[["(*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3)))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (pow.f64 x 5))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3)))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (pow.f64 x 5))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/80640 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/20160 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 -1/6 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))))))) (pow.f64 x 7))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3))))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 1/2 (*.f64 (sqrt.f64 1/3) x))","(+.f64 (*.f64 -1/48 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))) (*.f64 1/2 (*.f64 (sqrt.f64 1/3) x)))","(+.f64 (*.f64 -1/48 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))) (+.f64 (*.f64 1/3840 (*.f64 (sqrt.f64 1/3) (pow.f64 x 5))) (*.f64 1/2 (*.f64 (sqrt.f64 1/3) x))))","(+.f64 (*.f64 -1/48 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))) (+.f64 (*.f64 1/3840 (*.f64 (sqrt.f64 1/3) (pow.f64 x 5))) (+.f64 (*.f64 -1/645120 (*.f64 (sqrt.f64 1/3) (pow.f64 x 7))) (*.f64 1/2 (*.f64 (sqrt.f64 1/3) x)))))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3))","(*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3))","(*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3))","(*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3))","(*.f64 2 (*.f64 (sqrt.f64 1/3) x))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (*.f64 2 (*.f64 (sqrt.f64 1/3) x)))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 1/3) x)) (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3)))))) (pow.f64 x 5)))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 1/3) x)) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/80640 (sqrt.f64 1/3)) (+.f64 (*.f64 -1/20160 (sqrt.f64 1/3)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))))))) (*.f64 1/120 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))))))) (pow.f64 x 7))) (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3)))))) (pow.f64 x 5))))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(*.f64 1/2 (sqrt.f64 1/3))","(+.f64 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3))) (pow.f64 x 2)) (*.f64 1/2 (sqrt.f64 1/3)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3))) (pow.f64 x 2)) (+.f64 (*.f64 1/2 (sqrt.f64 1/3)) (*.f64 (-.f64 (*.f64 1/3840 (sqrt.f64 1/3)) (+.f64 (*.f64 1/240 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3)))))) (pow.f64 x 4))))","(+.f64 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3))) (pow.f64 x 2)) (+.f64 (*.f64 1/2 (sqrt.f64 1/3)) (+.f64 (*.f64 (-.f64 (*.f64 -1/645120 (sqrt.f64 1/3)) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/10080 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 1/3840 (sqrt.f64 1/3)) (+.f64 (*.f64 1/240 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3)))))))))) (pow.f64 x 6)) (*.f64 (-.f64 (*.f64 1/3840 (sqrt.f64 1/3)) (+.f64 (*.f64 1/240 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3)))))) (pow.f64 x 4)))))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3)) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3)) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3)) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3)) (sin.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3)))","(*.f64 2 (*.f64 (/.f64 x 1) (sqrt.f64 1/9)))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3))))","(fma.f64 (*.f64 8 (*.f64 (sqrt.f64 1/9) 1/48)) (pow.f64 x 3) (*.f64 2 (*.f64 (/.f64 x 1) (sqrt.f64 1/9))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (pow.f64 x 5))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3)))))","(+.f64 (*.f64 8 (+.f64 (*.f64 (*.f64 (sqrt.f64 1/9) 1/48) (pow.f64 x 3)) (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/9)) (fma.f64 -1/6 (*.f64 (sqrt.f64 1/9) 1/48) (*.f64 1/480 (sqrt.f64 1/9)))) (pow.f64 x 5)))) (*.f64 2 (*.f64 (/.f64 x 1) (sqrt.f64 1/9))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3)))) (pow.f64 x 3))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (pow.f64 x 5))) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/80640 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/20160 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 -1/6 (-.f64 (*.f64 1/1440 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 -1/48 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))) (*.f64 -1/24 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))) (*.f64 1/480 (/.f64 (sqrt.f64 1/3) (sqrt.f64 3))))))))) (pow.f64 x 7))) (*.f64 2 (/.f64 (*.f64 (sqrt.f64 1/3) x) (sqrt.f64 3))))))","(+.f64 (*.f64 8 (+.f64 (*.f64 (*.f64 (sqrt.f64 1/9) 1/48) (pow.f64 x 3)) (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/9)) (fma.f64 -1/6 (*.f64 (sqrt.f64 1/9) 1/48) (*.f64 1/480 (sqrt.f64 1/9)))) (pow.f64 x 5)))) (fma.f64 8 (*.f64 (-.f64 (*.f64 (sqrt.f64 1/9) (-.f64 -1/80640 -1/20160)) (fma.f64 1/120 (*.f64 (sqrt.f64 1/9) 1/48) (*.f64 -1/6 (-.f64 (*.f64 1/1440 (sqrt.f64 1/9)) (fma.f64 -1/6 (*.f64 (sqrt.f64 1/9) 1/48) (*.f64 1/480 (sqrt.f64 1/9))))))) (pow.f64 x 7)) (*.f64 2 (*.f64 (/.f64 x 1) (sqrt.f64 1/9)))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/9)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/9)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/9)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/9)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/9)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/9)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/9)) (sin.f64 x)))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/3)) (*.f64 (sin.f64 x) (sqrt.f64 3))))","(*.f64 8 (/.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sqrt.f64 1/9)) (sin.f64 x)))","(*.f64 1/2 (*.f64 (sqrt.f64 1/3) x))","(+.f64 (*.f64 -1/48 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))) (*.f64 1/2 (*.f64 (sqrt.f64 1/3) x)))","(fma.f64 -1/48 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3)) (*.f64 1/2 (*.f64 (sqrt.f64 1/3) x)))","(+.f64 (*.f64 -1/48 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))) (+.f64 (*.f64 1/3840 (*.f64 (sqrt.f64 1/3) (pow.f64 x 5))) (*.f64 1/2 (*.f64 (sqrt.f64 1/3) x))))","(fma.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (pow.f64 x 3) (fma.f64 1/3840 (*.f64 (sqrt.f64 1/3) (pow.f64 x 5)) (*.f64 1/2 (*.f64 (sqrt.f64 1/3) x))))","(+.f64 (*.f64 -1/48 (*.f64 (sqrt.f64 1/3) (pow.f64 x 3))) (+.f64 (*.f64 1/3840 (*.f64 (sqrt.f64 1/3) (pow.f64 x 5))) (+.f64 (*.f64 -1/645120 (*.f64 (sqrt.f64 1/3) (pow.f64 x 7))) (*.f64 1/2 (*.f64 (sqrt.f64 1/3) x)))))","(fma.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (pow.f64 x 3) (fma.f64 (*.f64 1/3840 (sqrt.f64 1/3)) (pow.f64 x 5) (fma.f64 -1/645120 (*.f64 (sqrt.f64 1/3) (pow.f64 x 7)) (*.f64 1/2 (*.f64 (sqrt.f64 1/3) x)))))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3))","(*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x)))","(*.f64 2 (*.f64 (sqrt.f64 1/3) x))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (*.f64 2 (*.f64 (sqrt.f64 1/3) x)))","(fma.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) 1/48)) (pow.f64 x 3) (*.f64 2 (*.f64 (sqrt.f64 1/3) x)))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 1/3) x)) (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3)))))) (pow.f64 x 5)))))","(fma.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) 1/48)) (pow.f64 x 3) (fma.f64 2 (*.f64 (sqrt.f64 1/3) x) (*.f64 8 (*.f64 (-.f64 (*.f64 (sqrt.f64 1/3) (-.f64 1/1440 1/480)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) 1/48))) (pow.f64 x 5)))))","(+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))) (pow.f64 x 3))) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 1/3) x)) (+.f64 (*.f64 8 (*.f64 (-.f64 (*.f64 -1/80640 (sqrt.f64 1/3)) (+.f64 (*.f64 -1/20160 (sqrt.f64 1/3)) (+.f64 (*.f64 -1/6 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))))))) (*.f64 1/120 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3))))))) (pow.f64 x 7))) (*.f64 8 (*.f64 (-.f64 (*.f64 1/1440 (sqrt.f64 1/3)) (+.f64 (*.f64 1/480 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/24 (sqrt.f64 1/3)))))) (pow.f64 x 5))))))","(fma.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) 1/48)) (pow.f64 x 3) (fma.f64 2 (*.f64 (sqrt.f64 1/3) x) (*.f64 8 (fma.f64 (-.f64 (*.f64 (sqrt.f64 1/3) (-.f64 -1/80640 -1/20160)) (fma.f64 -1/6 (-.f64 (*.f64 (sqrt.f64 1/3) (-.f64 1/1440 1/480)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) 1/48))) (*.f64 1/120 (*.f64 (sqrt.f64 1/3) 1/48)))) (pow.f64 x 7) (*.f64 (-.f64 (*.f64 (sqrt.f64 1/3) (-.f64 1/1440 1/480)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) 1/48))) (pow.f64 x 5))))))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 8 (/.f64 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2)) (sin.f64 x)))","(/.f64 (*.f64 8 (*.f64 (sqrt.f64 1/3) (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))) (sin.f64 x))","(*.f64 1/2 (sqrt.f64 1/3))","(+.f64 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3))) (pow.f64 x 2)) (*.f64 1/2 (sqrt.f64 1/3)))","(fma.f64 (*.f64 (sqrt.f64 1/3) 1/16) (*.f64 x x) (*.f64 1/2 (sqrt.f64 1/3)))","(+.f64 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3))) (pow.f64 x 2)) (+.f64 (*.f64 1/2 (sqrt.f64 1/3)) (*.f64 (-.f64 (*.f64 1/3840 (sqrt.f64 1/3)) (+.f64 (*.f64 1/240 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3)))))) (pow.f64 x 4))))","(fma.f64 (*.f64 x x) (*.f64 (sqrt.f64 1/3) 1/16) (fma.f64 1/2 (sqrt.f64 1/3) (*.f64 (-.f64 (*.f64 (sqrt.f64 1/3) (-.f64 1/3840 1/240)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) 1/16))) (pow.f64 x 4))))","(+.f64 (*.f64 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3))) (pow.f64 x 2)) (+.f64 (*.f64 1/2 (sqrt.f64 1/3)) (+.f64 (*.f64 (-.f64 (*.f64 -1/645120 (sqrt.f64 1/3)) (+.f64 (*.f64 1/120 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3)))) (+.f64 (*.f64 -1/10080 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 1/3840 (sqrt.f64 1/3)) (+.f64 (*.f64 1/240 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3)))))))))) (pow.f64 x 6)) (*.f64 (-.f64 (*.f64 1/3840 (sqrt.f64 1/3)) (+.f64 (*.f64 1/240 (sqrt.f64 1/3)) (*.f64 -1/6 (-.f64 (*.f64 -1/48 (sqrt.f64 1/3)) (*.f64 -1/12 (sqrt.f64 1/3)))))) (pow.f64 x 4)))))","(fma.f64 (*.f64 x x) (*.f64 (sqrt.f64 1/3) 1/16) (fma.f64 1/2 (sqrt.f64 1/3) (fma.f64 (-.f64 (*.f64 -1/645120 (sqrt.f64 1/3)) (fma.f64 (*.f64 (sqrt.f64 1/3) 1/16) 1/120 (fma.f64 -1/10080 (sqrt.f64 1/3) (*.f64 -1/6 (-.f64 (*.f64 (sqrt.f64 1/3) (-.f64 1/3840 1/240)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) 1/16))))))) (pow.f64 x 6) (*.f64 (-.f64 (*.f64 (sqrt.f64 1/3) (-.f64 1/3840 1/240)) (*.f64 -1/6 (*.f64 (sqrt.f64 1/3) 1/16))) (pow.f64 x 4)))))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3)) (sin.f64 x))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3)) (sin.f64 x))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3)) (sin.f64 x))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 1/3)) (sin.f64 x))","(/.f64 (*.f64 (sqrt.f64 1/3) (sin.f64 (*.f64 1/2 x))) (sin.f64 x))"]],"time":188.64990234375,"type":"simplify"},{"compiler":[[8642,7129]],"time":113.678955078125,"type":"eval"},{"alts":[["(/.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)","fresh",0.6531602539794928],["(/.f64 (*.f64 (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 3))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 3))","fresh",0.4831238281475362],["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (*.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (pow.f64 (sin.f64 x) 2))))) -3)","fresh",15.433433851931632],["(/.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 -1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 9))","fresh",0.4837875976844202],["(/.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2))) -3)","fresh",14.396457051587928],["(*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sqrt.f64 3)))","fresh",0.4626351074528623],["(*.f64 (/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sqrt.f64 (sqrt.f64 3)) 8)) (pow.f64 3 (neg.f64 1/4)))","fresh",0.47273261722130433],["(/.f64 (*.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))","fresh",0.49292763675818835],["(/.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (sin.f64 x))) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 3))","fresh",15.51131424807145],["(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x)) (cbrt.f64 9))) (cbrt.f64 -3))","fresh",0.49911889652663044]],"compiler":[[20,17],[25,22],[31,25],[21,18],[30,25],[21,18],[27,24],[25,22],[28,23],[21,18]],"count":[[315,10]],"kept":[{"done":[0,0],"fresh":[9,7],"new":[305,3],"picked":[1,0]}],"min-error":[0],"time":103.864013671875,"type":"prune"},{"accuracy":[0.3004875488422101],"baseline":[0.3004875488422101],"branch":[["x",0.3004875488422101,1],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))",0.3004875488422101,1]],"compiler":[[2,1],[17,14],[531,416]],"count":[[26,1]],"inputs":[["(*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sqrt.f64 3)))","(*.f64 (/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sqrt.f64 (sqrt.f64 3)) 8)) (pow.f64 3 (neg.f64 1/4)))","(/.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (sin.f64 x))) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 3))","(/.f64 (*.f64 (/.f64 (*.f64 8 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3))) (cbrt.f64 (sqrt.f64 3))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 3))","(/.f64 (*.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sqrt.f64 1/3))) (cbrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))","(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 1/3)) (sin.f64 x)) (*.f64 8 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 3))","(/.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 2)) (*.f64 (sin.f64 (*.f64 x 1/2)) -8)) (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) -3)","(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 2)))) -3)","(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (*.f64 (cbrt.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (pow.f64 (sin.f64 x) 2))))) -3)","(/.f64 (*.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (cbrt.f64 -1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (cbrt.f64 9))","(/.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)","(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3) (sin.f64 x))) -3)","(/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 -3 (sin.f64 x)))","(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (sin.f64 x)) (cbrt.f64 9))) (cbrt.f64 -3))","(/.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (sin.f64 x)) 2))) -3)","(/.f64 (*.f64 (*.f64 (*.f64 8 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 1/3)) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) (sqrt.f64 3))","(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) (cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 2))) (sin.f64 x))","(pow.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))) 3)","(/.f64 (pow.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 2) (sin.f64 x))","(/.f64 (*.f64 (*.f64 (cbrt.f64 (*.f64 512/27 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","(/.f64 (*.f64 (sqrt.f64 (/.f64 64 3)) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) (*.f64 (sqrt.f64 3) (sin.f64 x)))","(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)","(*.f64 (/.f64 1 (sin.f64 x)) (*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))","(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sin.f64 x))) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))))","(/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 (sin.f64 x) 8/3))","(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))"]],"link":["."],"name":["Graphics.Rasterific.Svg.PathConverter:segmentToBezier from rasterific-svg-0.2.3.1, A"],"oracle":[16.1937400694519],"outputs":[["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)"]],"time":26.052001953125,"times":[["x",9.343017578125],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))",7.0849609375]],"type":"regimes"},{"compiler":[[17,14]],"inputs":[["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -3)","(/.f64 (*.f64 (*.f64 -8 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/3) (sin.f64 x))"]],"stop":[["fuel",1]],"time":20.212158203125,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[17,14]],"remove-preprocessing":[[]],"time":10.947021484375,"type":"end"}]
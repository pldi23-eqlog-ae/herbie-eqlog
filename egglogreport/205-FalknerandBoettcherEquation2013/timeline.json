[{"compiler":[[31,22]],"method":["search"],"sampling":[[12,0.43902407633140683,0.06048776162788272,0.5004881620407104],[11,0.4097558045759797,0.08975603338330984,0.5004881620407104],[10,0.38243875093758106,0.11707308702170849,0.5004881620407104],[9,0.32780464366078377,0.17170719429850578,0.5004881620407104],[8,0.2809754088521004,0.21853642910718918,0.5004881620407104],[7,0.18731693923473358,0.31219489872455597,0.5004881620407104],[6,0.12487795948982239,0.37463387846946716,0.5004881620407104],[5,0.0,0.49951183795928955,0.5004881620407104],[4,0.0,0.49951183795928955,0.5004881620407104],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":31.6318359375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.671142578125,11],["body",256,"valid",516.430908203125,8256]],"time":524.650146484375,"type":"sample"},{"compiler":[[30,21]],"inputs":[["0","1"],["(/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 2 (-.f64 1 (*.f64 3 (*.f64 v v)))))) (-.f64 1 (*.f64 v v))))","(/.f64 (-.f64 1 (*.f64 5 (*.f64 t t))) (*.f64 (*.f64 (*.f64 (PI.f64) v) (sqrt.f64 (*.f64 2 (-.f64 1 (*.f64 3 (*.f64 t t)))))) (-.f64 1 (*.f64 t t))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 2 (-.f64 1 (*.f64 3 (*.f64 v v)))))) (-.f64 1 (*.f64 v v))))","(/.f64 (fma.f64 (*.f64 5 v) v -1) (*.f64 (fma.f64 v v -1) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (+.f64 2 (*.f64 2 (*.f64 (*.f64 -3 v) v)))))))","(/.f64 (-.f64 1 (*.f64 5 (*.f64 t t))) (*.f64 (*.f64 (*.f64 (PI.f64) v) (sqrt.f64 (*.f64 2 (-.f64 1 (*.f64 3 (*.f64 t t)))))) (-.f64 1 (*.f64 t t))))","(/.f64 (/.f64 (fma.f64 (*.f64 t t) 5 -1) (fma.f64 t t -1)) (*.f64 (*.f64 (PI.f64) v) (sqrt.f64 (+.f64 2 (*.f64 2 (*.f64 -3 (*.f64 t t)))))))"]],"symmetry":[[]],"time":72.453857421875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 2 (-.f64 1 (*.f64 3 (*.f64 v v)))))) (-.f64 1 (*.f64 v v))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 2 (-.f64 1 (*.f64 3 (*.f64 v v)))))) (-.f64 1 (*.f64 v v))))","(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1)))))"]],"time":26.26904296875,"type":"simplify"},{"compiler":[[55,37]],"time":0.695068359375,"type":"eval"},{"alts":[["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1)))))","next",0.38185502930532605]],"compiler":[[27,20],[27,20]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.38185502930532605],"time":1.182861328125,"type":"prune"},{"compiler":[[100,66]],"locations":[["(/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))",0.0078125,true],["(*.f64 (PI.f64) t)",0.2421875,true],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1)))))",0.30859375,true],["(*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1))))",0.4739837890737681,true]],"time":26.739990234375,"type":"localize"},{"count":[[4,24]],"series":[["(/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))","v","-inf",0.217041015625],["(/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))","v","inf",0.29296875],["(/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))","v","0",0.218994140625],["(*.f64 (PI.f64) t)","t","-inf",0.24609375],["(*.f64 (PI.f64) t)","t","inf",0.282958984375],["(*.f64 (PI.f64) t)","t","0",0.27197265625],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1)))))","t","-inf",0.633056640625],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1)))))","t","inf",0.64306640625],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1)))))","t","0",1.822021484375],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1)))))","v","-inf",0.98095703125],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1)))))","v","inf",1.9208984375],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1)))))","v","0",1.37109375],["(*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1))))","v","-inf",0.578857421875],["(*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1))))","v","inf",0.785888671875],["(*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1))))","v","0",1.02294921875],["(*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1))))","t","-inf",0.35009765625],["(*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1))))","t","inf",0.488037109375],["(*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1))))","t","0",1.4228515625]],"time":13.93701171875,"type":"series"},{"count":[[4,250]],"inputs":[["(*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1))))","(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1)))))","(*.f64 (PI.f64) t)","(/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) 0) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) 1/2) (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (*.f64 1/2 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (*.f64 0 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (*.f64 (cbrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)) (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (PI.f64) t)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (PI.f64) t) 2)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (PI.f64)) (*.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)) (*.f64 (PI.f64) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (PI.f64) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (cbrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)) (cbrt.f64 (*.f64 (PI.f64) t))) (cbrt.f64 (pow.f64 (*.f64 (PI.f64) t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)) (PI.f64)) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t (*.f64 (PI.f64) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (neg.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (neg.f64 (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))) (pow.f64 (cbrt.f64 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (PI.f64) t)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2))) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 0) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 1/2) (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (*.f64 1/2 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (*.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 5 (*.f64 v v)) (*.f64 (fma.f64 v v -1) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (/.f64 1 (*.f64 (fma.f64 v v -1) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 2)) (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (/.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v))) (/.f64 -1 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (PI.f64)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (*.f64 (PI.f64) t)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)) (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2) (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t)) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (/.f64 (/.f64 1 (fma.f64 v v -1)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (*.f64 (PI.f64) t)) (/.f64 (/.f64 1 (fma.f64 v v -1)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (/.f64 (/.f64 1 (fma.f64 v v -1)) (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (/.f64 (/.f64 1 (fma.f64 v v -1)) (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t)) (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (PI.f64)) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 (PI.f64) t)) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t))) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (neg.f64 (*.f64 (PI.f64) t))) (neg.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (/.f64 1 (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (pow.f64 (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (PI.f64)) (/.f64 1 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (/.f64 1 (cbrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 1 (*.f64 (-.f64 1 (*.f64 v v)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (/.f64 1 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (/.f64 1 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (/.f64 -1 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 1 (*.f64 (fma.f64 v v -1) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (neg.f64 (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))) (neg.f64 (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (PI.f64))) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (neg.f64 (cbrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (*.f64 (-.f64 1 (*.f64 v v)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (neg.f64 (*.f64 (PI.f64) t))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v))) (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (-.f64 1 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (fma.f64 v v -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (*.f64 (PI.f64) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (cbrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 (-.f64 1 (*.f64 v v)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (*.f64 (fma.f64 v v -1) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (-.f64 1 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (fma.f64 v v -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (PI.f64)) (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (*.f64 (PI.f64) t)) (/.f64 1 (fma.f64 v v -1))) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (PI.f64)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (/.f64 1 (fma.f64 v v -1))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t)) (fma.f64 (*.f64 5 v) v -1)) (fma.f64 v v -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t)) (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (fma.f64 v v -1)))) (cbrt.f64 (pow.f64 (fma.f64 v v -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t)) (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (-.f64 1 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (*.f64 (PI.f64) t)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2))) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (/.f64 1 (fma.f64 v v -1))) (*.f64 (PI.f64) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t))) (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2))) (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 2)) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v))))) (cbrt.f64 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 2)) (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 2)) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)))) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (*.f64 (PI.f64) t)) (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2))) (*.f64 (PI.f64) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (*.f64 (PI.f64) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (cbrt.f64 (*.f64 (PI.f64) t)))) (cbrt.f64 (pow.f64 (*.f64 (PI.f64) t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) t)) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v)))) (neg.f64 (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (PI.f64))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (/.f64 1 (fma.f64 v v -1))) (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) 1) (*.f64 (PI.f64) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (PI.f64)) 1) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) 1) (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (neg.f64 (*.f64 (PI.f64) t))) 1) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 1) (-.f64 1 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 1) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 1) (fma.f64 v v -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 1) (cbrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (/.f64 1 (fma.f64 v v -1)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (*.f64 (PI.f64) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (/.f64 1 (fma.f64 v v -1)) (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2))))) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (fma.f64 v v -1))) (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t))) (cbrt.f64 (pow.f64 (fma.f64 v v -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 -1 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (fma.f64 v v -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 -1 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (-.f64 1 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (*.f64 (PI.f64) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v)))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2) (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2))))) (cbrt.f64 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v)))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 2))) (cbrt.f64 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2) (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2))))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 2))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2) (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2))))) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 2))) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (/.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (*.f64 (PI.f64) t))) (cbrt.f64 (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (/.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))) (*.f64 (PI.f64) t))) (cbrt.f64 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (cbrt.f64 (*.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) (pow.f64 (*.f64 (PI.f64) t) 2)))) (cbrt.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (/.f64 1 (fma.f64 v v -1)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (cbrt.f64 (*.f64 (PI.f64) t))) (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2)) (cbrt.f64 (pow.f64 (*.f64 (PI.f64) t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) t) (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2)) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v))) (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2)) (neg.f64 (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (PI.f64)) (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2)) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (*.f64 (fma.f64 v v -1) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 (*.f64 (-.f64 1 (*.f64 v v)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (fma.f64 v v -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 5 (*.f64 v v)) 3) -1) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t)) (fma.f64 v v -1))) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v))) (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (*.f64 (PI.f64) t)) (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (PI.f64) t) 0) (*.f64 (PI.f64) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (PI.f64) t) 1/2) (*.f64 (*.f64 (PI.f64) t) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (PI.f64) t) (*.f64 (*.f64 (PI.f64) t) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (PI.f64) t)) (*.f64 (PI.f64) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (PI.f64) t)) (*.f64 1/2 (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (PI.f64) t) (*.f64 0 (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (PI.f64)) (*.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64))) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 t) (*.f64 (cbrt.f64 (*.f64 t t)) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (PI.f64) t)) (cbrt.f64 (pow.f64 (*.f64 (PI.f64) t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (PI.f64) t) 2)) (cbrt.f64 (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t (cbrt.f64 (PI.f64))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (PI.f64) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (PI.f64) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (PI.f64) t)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (PI.f64) t)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (PI.f64) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (PI.f64) t)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (PI.f64) t) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 v v -1)) -1) (*.f64 (/.f64 1 (fma.f64 v v -1)) (*.f64 5 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (fma.f64 v v -1)) (*.f64 5 (*.f64 v v))) (*.f64 (/.f64 1 (fma.f64 v v -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 0) (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 1/2) (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (fma.f64 v v -1)) (*.f64 (*.f64 5 (*.f64 v v)) (/.f64 1 (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 5 (*.f64 v v)) (/.f64 1 (fma.f64 v v -1))) (/.f64 -1 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (*.f64 1/2 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 0 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 5 (*.f64 v v)) (fma.f64 v v -1)) (/.f64 1 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 1 (*.f64 v v))) (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2)) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 -1 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2) (pow.f64 (fma.f64 v v -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 1 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 v v -1)) (fma.f64 (*.f64 5 v) v -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 v v -1) (neg.f64 1/3)) (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (pow.f64 (fma.f64 v v -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v))))) (pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v)))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (fma.f64 v v -1))) (pow.f64 (cbrt.f64 (fma.f64 v v -1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (-.f64 1 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (fma.f64 v v -1))) (cbrt.f64 (pow.f64 (fma.f64 v v -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)) (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1))) (cbrt.f64 (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2)) (cbrt.f64 (fma.f64 (*.f64 5 v) v -1))) (cbrt.f64 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 v v -1) (neg.f64 1/3)) (fma.f64 (*.f64 5 v) v -1)) (cbrt.f64 (pow.f64 (fma.f64 v v -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2))) (cbrt.f64 (pow.f64 (fma.f64 v v -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (fma.f64 v v -1))) 1) (cbrt.f64 (pow.f64 (fma.f64 v v -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (pow.f64 (fma.f64 v v -1) 2))) (cbrt.f64 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2))) (cbrt.f64 (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2) (pow.f64 (fma.f64 v v -1) 2)))) (cbrt.f64 (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 2))) (cbrt.f64 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2) (pow.f64 (fma.f64 v v -1) 2)))) (cbrt.f64 (fma.f64 v v -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (fma.f64 v v -1)))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 v v -1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 v v -1)) (+.f64 (pow.f64 (*.f64 5 (*.f64 v v)) 3) -1)) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 5 (*.f64 v v)) 3) -1) (/.f64 1 (fma.f64 v v -1))) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (-.f64 1 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) 3))))))"]],"rules":[["egg-rr",53],["egg-rr",25],["egg-rr",132],["egg-rr",40]],"time":54.8701171875,"type":"rewrite"},{"count":[[274,264]],"inputs":[["(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","1","(+.f64 (*.f64 -4 (pow.f64 v 2)) 1)","(+.f64 (*.f64 -4 (pow.f64 v 2)) (+.f64 (*.f64 -4 (pow.f64 v 4)) 1))","(+.f64 (*.f64 -4 (pow.f64 v 2)) (+.f64 (*.f64 -4 (pow.f64 v 4)) (+.f64 1 (*.f64 -4 (pow.f64 v 6)))))","5","(+.f64 5 (*.f64 4 (/.f64 1 (pow.f64 v 2))))","(+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4)))))","(+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 6))) (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4))))))","5","(+.f64 5 (*.f64 4 (/.f64 1 (pow.f64 v 2))))","(+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4)))))","(+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 6))) (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","(*.f64 t (PI.f64))","1","(+.f64 (*.f64 -4 (pow.f64 v 2)) 1)","(fma.f64 -4 (*.f64 v v) 1)","(+.f64 (*.f64 -4 (pow.f64 v 2)) (+.f64 (*.f64 -4 (pow.f64 v 4)) 1))","(+.f64 (*.f64 -4 (+.f64 (*.f64 v v) (pow.f64 v 4))) 1)","(+.f64 (*.f64 -4 (pow.f64 v 2)) (+.f64 (*.f64 -4 (pow.f64 v 4)) (+.f64 1 (*.f64 -4 (pow.f64 v 6)))))","(+.f64 (*.f64 -4 (+.f64 (+.f64 (*.f64 v v) (pow.f64 v 4)) (pow.f64 v 6))) 1)","5","(+.f64 5 (*.f64 4 (/.f64 1 (pow.f64 v 2))))","(fma.f64 4 (pow.f64 v -2) 5)","(+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4)))))","(fma.f64 4 (+.f64 (pow.f64 v -2) (pow.f64 v -4)) 5)","(+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 6))) (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4))))))","(+.f64 5 (*.f64 4 (+.f64 (+.f64 (pow.f64 v -2) (pow.f64 v -4)) (pow.f64 v -6))))","5","(+.f64 5 (*.f64 4 (/.f64 1 (pow.f64 v 2))))","(fma.f64 4 (pow.f64 v -2) 5)","(+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4)))))","(fma.f64 4 (+.f64 (pow.f64 v -2) (pow.f64 v -4)) 5)","(+.f64 5 (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 6))) (+.f64 (*.f64 4 (/.f64 1 (pow.f64 v 2))) (*.f64 4 (/.f64 1 (pow.f64 v 4))))))","(+.f64 5 (*.f64 4 (+.f64 (+.f64 (pow.f64 v -2) (pow.f64 v -4)) (pow.f64 v -6))))"]],"time":112.507080078125,"type":"simplify"},{"compiler":[[8876,5728]],"time":96.93798828125,"type":"eval"},{"alts":[["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (fma.f64 v v -1))","next",0.25390625],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))","fresh",0.3795700195368841],["(/.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (/.f64 1 (fma.f64 v v -1)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (*.f64 (PI.f64) t))","fresh",0.34994125976844204],["(*.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)))","fresh",0.6830827149057247],["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (cbrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))","fresh",0.393573779305326]],"compiler":[[27,20],[27,20],[29,22],[28,21],[38,28],[27,20],[27,20],[29,22],[28,21],[38,28]],"count":[[265,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[264,5],"picked":[1,0]}],"min-error":[0],"time":88.8349609375,"type":"prune"},{"compiler":[[112,71]],"locations":[["(/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))",0.0078125,true],["(*.f64 3 (*.f64 v v))",0.1484375,true],["(*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))",0.37890625,true],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))",0.4140625,true]],"time":26.348876953125,"type":"localize"},{"count":[[4,56]],"series":[["(/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))","v","-inf",0.509033203125],["(/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))","v","inf",0.529052734375],["(/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))","v","0",0.552001953125],["(*.f64 3 (*.f64 v v))","v","-inf",0.19921875],["(*.f64 3 (*.f64 v v))","v","inf",0.3349609375],["(*.f64 3 (*.f64 v v))","v","0",0.408935546875],["(*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))","v","-inf",0.343994140625],["(*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))","v","inf",0.613037109375],["(*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))","v","0",0.534912109375],["(*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))","t","-inf",0.2919921875],["(*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))","t","inf",0.4130859375],["(*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))","t","0",0.56494140625],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","t","-inf",0.5029296875],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","t","inf",0.4169921875],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","t","0",1.30615234375],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","v","-inf",0.544921875],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","v","inf",2.8662109375],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","v","0",1.131103515625]],"time":12.678955078125,"type":"series"},{"count":[[4,248]],"inputs":[["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","(*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))","(*.f64 3 (*.f64 v v))","(/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 0) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1/2) (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (*.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (*.f64 1/2 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 5 v) v) (*.f64 (PI.f64) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (/.f64 1 (*.f64 (PI.f64) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2)) (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (/.f64 -1 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 (/.f64 1 (PI.f64)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) t) (/.f64 (/.f64 1 (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (/.f64 (pow.f64 (PI.f64) -3) (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) t) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2) (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 1 (*.f64 (PI.f64) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (neg.f64 t)) (neg.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 1 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 1 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (pow.f64 (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 -1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 1 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (neg.f64 t)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (neg.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (*.f64 (PI.f64) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 t))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64)))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2))) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) t) (/.f64 1 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) t) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 1 (PI.f64))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (/.f64 1 (PI.f64))) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2)) (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2)) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2)) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))))) (cbrt.f64 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (fma.f64 (*.f64 5 v) v -1)) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64)))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (/.f64 (pow.f64 (PI.f64) -3) (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 t)) (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2) (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2) (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2))) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64)))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2) (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2))) (cbrt.f64 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (/.f64 1 (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 -1 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 -1 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (neg.f64 t)) 1) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) 1) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (*.f64 (PI.f64) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 (*.f64 (neg.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 125 (pow.f64 v 6)) -1) (/.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (PI.f64))) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 (*.f64 5 v) v))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 0) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (*.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1/2) (*.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (*.f64 0 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (*.f64 1/2 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) t)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (*.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 t) (*.f64 (cbrt.f64 (*.f64 t t)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 t) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 t (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 (*.f64 v v)) 0) (*.f64 3 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 v v)) (*.f64 (*.f64 3 (*.f64 v v)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3 (*.f64 v v)) 1/2) (*.f64 (*.f64 3 (*.f64 v v)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 3 (*.f64 v v))) (*.f64 3 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 v v)) (*.f64 0 (*.f64 3 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 3 (*.f64 v v))) (*.f64 1/2 (*.f64 3 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 v v)) (*.f64 (cbrt.f64 (pow.f64 v 4)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 v (sqrt.f64 3)) (*.f64 v (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 3) v) (*.f64 (sqrt.f64 3) v))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 3 (*.f64 v v))) (cbrt.f64 (*.f64 9 (pow.f64 v 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9 (pow.f64 v 4))) (cbrt.f64 (*.f64 3 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 v) v)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 3 v) (cbrt.f64 v)) (cbrt.f64 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 3) (*.f64 (cbrt.f64 9) (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 v (*.f64 3 v))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 3 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 v) (sqrt.f64 3)) (*.f64 (neg.f64 v) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 v (neg.f64 (sqrt.f64 3))) (*.f64 v (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 v) (neg.f64 (sqrt.f64 3))) (*.f64 (neg.f64 v) (neg.f64 (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 3)) v) (*.f64 (neg.f64 (sqrt.f64 3)) v))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 3) (neg.f64 v)) (*.f64 (sqrt.f64 3) (neg.f64 v)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 v)) (*.f64 (neg.f64 (sqrt.f64 3)) (neg.f64 v)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 v (sqrt.f64 3)) 1) (*.f64 (*.f64 v (sqrt.f64 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 3) v) 1) (*.f64 (*.f64 (sqrt.f64 3) v) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 v (sqrt.f64 3)) -1) (*.f64 (*.f64 v (sqrt.f64 3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sqrt.f64 3) v) -1) (*.f64 (*.f64 (sqrt.f64 3) v) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (*.f64 v (sqrt.f64 3))) (*.f64 1 (*.f64 v (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (*.f64 v (sqrt.f64 3))) (*.f64 -1 (*.f64 v (sqrt.f64 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (*.f64 (sqrt.f64 3) v)) (*.f64 1 (*.f64 (sqrt.f64 3) v)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (*.f64 (sqrt.f64 3) v)) (*.f64 -1 (*.f64 (sqrt.f64 3) v)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (*.f64 v v))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 v v) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 v v) (sqrt.f64 3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 v v) (cbrt.f64 3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 3) (*.f64 (sqrt.f64 3) (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 3 (*.f64 v v)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 v v)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (*.f64 v v))) (cbrt.f64 (pow.f64 v 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 v v)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 v 6) 27) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (*.f64 v v)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 v v))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 v v))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 3 (*.f64 v v))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 v (sqrt.f64 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 3) v) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 3 (*.f64 v v)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 3 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 3 (*.f64 v v)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 v 6) 27))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 0) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 1/2) (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (PI.f64)) -1) (*.f64 (/.f64 1 (PI.f64)) (*.f64 (*.f64 5 v) v)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 (PI.f64)) (*.f64 (*.f64 5 v) v)) (*.f64 (/.f64 1 (PI.f64)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 0 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (*.f64 1/2 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (PI.f64)) (*.f64 (*.f64 (*.f64 5 v) v) (/.f64 1 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 5 v) v) (/.f64 1 (PI.f64))) (/.f64 -1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (PI.f64))) (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 5 v) v) (PI.f64)) (/.f64 1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (/.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2)) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 -1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2) (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (PI.f64)) (fma.f64 (*.f64 5 v) v -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (PI.f64))) (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64)))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) (pow.f64 (cbrt.f64 (PI.f64)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (cbrt.f64 (fma.f64 (*.f64 5 v) v -1))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (cbrt.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (PI.f64))) (fma.f64 (*.f64 5 v) v -1)) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2) (*.f64 (PI.f64) (PI.f64))))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2) (*.f64 (PI.f64) (PI.f64))))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) 1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64)))) (neg.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (PI.f64)) (+.f64 (*.f64 125 (pow.f64 v 6)) -1)) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 (*.f64 5 v) v))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 125 (pow.f64 v 6)) -1) (/.f64 1 (PI.f64))) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 (*.f64 5 v) v))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 3))))))"]],"rules":[["egg-rr",51],["egg-rr",50],["egg-rr",32],["egg-rr",115]],"time":53.237060546875,"type":"rewrite"},{"count":[[304,273]],"inputs":[["(*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))","(+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))","(+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (/.f64 (-.f64 27/2 (*.f64 3/4 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (pow.f64 (sqrt.f64 1/2) 2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 5/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))) (pow.f64 v 6)) (+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 (sqrt.f64 2) t)","(+.f64 (*.f64 -3 (/.f64 (*.f64 (pow.f64 v 2) t) (sqrt.f64 2))) (*.f64 (sqrt.f64 2) t))","(+.f64 (*.f64 -9/2 (/.f64 (*.f64 (pow.f64 v 4) t) (pow.f64 (sqrt.f64 2) 3))) (+.f64 (*.f64 -3 (/.f64 (*.f64 (pow.f64 v 2) t) (sqrt.f64 2))) (*.f64 (sqrt.f64 2) t)))","(+.f64 (*.f64 -27/2 (/.f64 (*.f64 (pow.f64 v 6) t) (pow.f64 (sqrt.f64 2) 5))) (+.f64 (*.f64 -9/2 (/.f64 (*.f64 (pow.f64 v 4) t) (pow.f64 (sqrt.f64 2) 3))) (+.f64 (*.f64 -3 (/.f64 (*.f64 (pow.f64 v 2) t) (sqrt.f64 2))) (*.f64 (sqrt.f64 2) t))))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (pow.f64 v 2))","(/.f64 -1 (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))","(/.f64 (sqrt.f64 1/2) (neg.f64 (*.f64 t (PI.f64))))","(+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))","(fma.f64 (fma.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 v v) (/.f64 (sqrt.f64 1/2) (neg.f64 (*.f64 t (PI.f64)))))","(+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))))))","(fma.f64 (pow.f64 v 4) (/.f64 (+.f64 15/4 (*.f64 -1/2 (-.f64 9/2 (*.f64 (*.f64 3/4 3/4) 2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (fma.f64 (fma.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 v v) (/.f64 (sqrt.f64 1/2) (neg.f64 (*.f64 t (PI.f64))))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (/.f64 (-.f64 27/2 (*.f64 3/4 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (pow.f64 (sqrt.f64 1/2) 2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 5/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))) (pow.f64 v 6)) (+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))))","(fma.f64 (/.f64 (+.f64 (*.f64 5/2 (-.f64 9/2 (*.f64 (*.f64 3/4 3/4) 2))) (*.f64 -1/2 (+.f64 27/2 (*.f64 -3/4 (-.f64 9 (*.f64 (*.f64 (*.f64 3/4 3/4) 2) 2)))))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (pow.f64 v 6) (fma.f64 (pow.f64 v 4) (/.f64 (+.f64 15/4 (*.f64 -1/2 (-.f64 9/2 (*.f64 (*.f64 3/4 3/4) 2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (fma.f64 (fma.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 v v) (/.f64 (sqrt.f64 1/2) (neg.f64 (*.f64 t (PI.f64)))))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (pow.f64 (fma.f64 -6 (*.f64 v v) 2) -1/2))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 t (sqrt.f64 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2)))","(*.f64 t (sqrt.f64 (fma.f64 -6 (*.f64 v v) 2)))","(*.f64 (sqrt.f64 2) t)","(+.f64 (*.f64 -3 (/.f64 (*.f64 (pow.f64 v 2) t) (sqrt.f64 2))) (*.f64 (sqrt.f64 2) t))","(fma.f64 -3 (/.f64 (*.f64 (*.f64 v v) t) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) t))","(+.f64 (*.f64 -9/2 (/.f64 (*.f64 (pow.f64 v 4) t) (pow.f64 (sqrt.f64 2) 3))) (+.f64 (*.f64 -3 (/.f64 (*.f64 (pow.f64 v 2) t) (sqrt.f64 2))) (*.f64 (sqrt.f64 2) t)))","(fma.f64 -9/2 (/.f64 (*.f64 (pow.f64 v 4) t) (pow.f64 2 3/2)) (fma.f64 -3 (/.f64 (*.f64 (*.f64 v v) t) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) t)))","(+.f64 (*.f64 -27/2 (/.f64 (*.f64 (pow.f64 v 6) t) (pow.f64 (sqrt.f64 2) 5))) (+.f64 (*.f64 -9/2 (/.f64 (*.f64 (pow.f64 v 4) t) (pow.f64 (sqrt.f64 2) 3))) (+.f64 (*.f64 -3 (/.f64 (*.f64 (pow.f64 v 2) t) (sqrt.f64 2))) (*.f64 (sqrt.f64 2) t))))","(fma.f64 -27/2 (/.f64 (*.f64 (pow.f64 v 6) t) (pow.f64 2 5/2)) (fma.f64 -9/2 (/.f64 (*.f64 (pow.f64 v 4) t) (pow.f64 2 3/2)) (fma.f64 -3 (/.f64 (*.f64 (*.f64 v v) t) (sqrt.f64 2)) (*.f64 (sqrt.f64 2) t))))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(*.f64 3 (pow.f64 v 2))","(*.f64 3 (*.f64 v v))","(/.f64 -1 (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64)))","(/.f64 (*.f64 5 (*.f64 v v)) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64)))","(/.f64 (*.f64 5 (*.f64 v v)) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))"]],"time":208.72802734375,"type":"simplify"},{"compiler":[[8718,5685]],"time":106.09912109375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 1 t)) (fma.f64 v v -1))","fresh",0.30306625976844204],["(/.f64 (/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))) (fma.f64 v v -1))","fresh",0.31087875976844204],["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) (fma.f64 v v -1))","next",0.09765625],["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (fma.f64 v v -1))","fresh",0.25],["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (fma.f64 v v -1))","fresh",0.24609375]],"compiler":[[27,20],[34,24],[25,18],[25,18],[33,24],[27,20],[34,24],[25,18],[25,18],[33,24]],"count":[[278,5]],"kept":[{"done":[0,0],"fresh":[4,0],"new":[273,5],"picked":[1,0]}],"min-error":[0],"time":113.47998046875,"type":"prune"},{"compiler":[[103,63]],"locations":[["(sqrt.f64 (fma.f64 (*.f64 v v) -6 2))",0.0078125,true],["(/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))",0.0078125,false],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))",0.015625,true],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)",0.0859375,true]],"time":26.0419921875,"type":"localize"},{"count":[[3,24]],"series":[["(sqrt.f64 (fma.f64 (*.f64 v v) -6 2))","v","-inf",0.31298828125],["(sqrt.f64 (fma.f64 (*.f64 v v) -6 2))","v","inf",0.404052734375],["(sqrt.f64 (fma.f64 (*.f64 v v) -6 2))","v","0",0.294921875],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))","v","-inf",0.47900390625],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))","v","inf",0.7490234375],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))","v","0",1.13818359375],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)","t","-inf",0.29296875],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)","t","inf",0.274169921875],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)","t","0",0.643798828125],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)","v","-inf",0.517822265625],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)","v","inf",0.8720703125],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)","v","0",0.5009765625]],"time":6.998046875,"type":"series"},{"count":[[3,256]],"inputs":[["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)","(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))","(sqrt.f64 (fma.f64 (*.f64 v v) -6 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 1/2) (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 0) (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)) (*.f64 1/2 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)) (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) (*.f64 0 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 t)) (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 2)) (cbrt.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 -1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2) (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 t)) (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (pow.f64 (cbrt.f64 t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 t)) (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) t) (neg.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (/.f64 1 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (/.f64 1 (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (neg.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) t) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 t)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 2)) (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 2)) (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 t)) (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 t) (fma.f64 (*.f64 5 v) v -1)) (*.f64 (PI.f64) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 t) (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 t) (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (*.f64 (neg.f64 (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 t) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 t) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64)))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 t)) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) t)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (/.f64 -1 t)) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (/.f64 -1 t)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 1 t)) (*.f64 (PI.f64) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 1 t)) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 1 t)) (*.f64 (neg.f64 (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 1 t)) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 1 t)) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 1 t)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (pow.f64 (cbrt.f64 t) -2))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (*.f64 t t))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64)))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2)) t)) (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2)) t)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 2))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2) (*.f64 t t)))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 2))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2) (*.f64 t t)))) (cbrt.f64 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) t) 1) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) t) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) t) 1) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) t) (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) t) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) t) -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 t)) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 t)) 1) (cbrt.f64 (*.f64 t t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 t)) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) -1) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) -1) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (/.f64 (neg.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (/.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) t) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 t))) (neg.f64 (cbrt.f64 (*.f64 t t))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (neg.f64 t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 t) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1/2) (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 0) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (*.f64 1/2 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (*.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 5 v) v) (*.f64 (PI.f64) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 1 (*.f64 (PI.f64) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (neg.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 (/.f64 1 (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (/.f64 (pow.f64 (PI.f64) -3) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2)) (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) (neg.f64 1/4)) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 1 (*.f64 (neg.f64 (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (pow.f64 (fma.f64 (*.f64 v v) -6 2) (neg.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (pow.f64 (fma.f64 (*.f64 v v) -6 2) (neg.f64 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 -1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 1 (*.f64 (PI.f64) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (*.f64 (PI.f64) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 (neg.f64 (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) (neg.f64 1/4)) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (fma.f64 (*.f64 5 v) v -1)) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64)))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 1 (PI.f64))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2)) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))))) (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2)) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 1 (PI.f64))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2))) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (neg.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (/.f64 1 (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64)))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2) (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2))) (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2) (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (/.f64 (pow.f64 (PI.f64) -3) (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) -1) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (PI.f64))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) -1) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (PI.f64))) (neg.f64 (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (neg.f64 (PI.f64)))) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) -1) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (pow.f64 (fma.f64 (*.f64 v v) -6 2) 1/8)) (pow.f64 (fma.f64 (*.f64 v v) -6 2) 1/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (*.f64 (PI.f64) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 (*.f64 (neg.f64 (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (*.f64 1 (*.f64 (neg.f64 (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (*.f64 1 (*.f64 (PI.f64) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (*.f64 (neg.f64 (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (neg.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 125 (pow.f64 v 6)) -1) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (PI.f64))) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 (*.f64 5 v) v))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) 1/2) (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) 0) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) (*.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (*.f64 1/2 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) (*.f64 0 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) -1) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (fabs.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) (pow.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) 0) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 v v) -6 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 v v) -6 2) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 v v) -6 2) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (*.f64 v v) -6 2) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))"]],"rules":[["egg-rr",46],["egg-rr",107],["egg-rr",103]],"time":54.921875,"type":"rewrite"},{"count":[[280,281]],"inputs":[["(*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))","(+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))","(+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (/.f64 (-.f64 27/2 (*.f64 3/4 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (pow.f64 (sqrt.f64 1/2) 2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 5/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))) (pow.f64 v 6)) (+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 -1 (/.f64 (sqrt.f64 1/2) (PI.f64)))","(+.f64 (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (PI.f64))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (PI.f64)))))) (*.f64 -1 (/.f64 (sqrt.f64 1/2) (PI.f64))))","(+.f64 (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (PI.f64))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (PI.f64)))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (PI.f64))) (*.f64 (pow.f64 v 4) (+.f64 (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (PI.f64)))) (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (PI.f64))))))))","(+.f64 (*.f64 (pow.f64 v 6) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 27/2 (*.f64 3/4 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (pow.f64 (sqrt.f64 1/2) 2)))) (*.f64 (sqrt.f64 1/2) (PI.f64)))) (*.f64 5/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (PI.f64)))))) (+.f64 (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (PI.f64))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (PI.f64)))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (PI.f64))) (*.f64 (pow.f64 v 4) (+.f64 (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (PI.f64)))) (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (PI.f64)))))))))","(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 -3 (/.f64 (pow.f64 v 2) (sqrt.f64 2))))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 -9/2 (/.f64 (pow.f64 v 4) (pow.f64 (sqrt.f64 2) 3))) (*.f64 -3 (/.f64 (pow.f64 v 2) (sqrt.f64 2)))))","(+.f64 (*.f64 -27/2 (/.f64 (pow.f64 v 6) (pow.f64 (sqrt.f64 2) 5))) (+.f64 (sqrt.f64 2) (+.f64 (*.f64 -9/2 (/.f64 (pow.f64 v 4) (pow.f64 (sqrt.f64 2) 3))) (*.f64 -3 (/.f64 (pow.f64 v 2) (sqrt.f64 2))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))","(neg.f64 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))","(+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))","(fma.f64 (fma.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 v v) (neg.f64 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))","(+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))))))","(fma.f64 (pow.f64 v 4) (/.f64 (+.f64 15/4 (*.f64 -1/2 (-.f64 9/2 (/.f64 (*.f64 -3/4 3/4) -1/2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (fma.f64 (fma.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 v v) (neg.f64 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (/.f64 (-.f64 27/2 (*.f64 3/4 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (pow.f64 (sqrt.f64 1/2) 2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 5/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))) (pow.f64 v 6)) (+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))))","(fma.f64 (/.f64 (+.f64 (*.f64 5/2 (-.f64 9/2 (/.f64 (*.f64 -3/4 3/4) -1/2))) (*.f64 -1/2 (+.f64 27/2 (*.f64 -3/4 (-.f64 9 (/.f64 (/.f64 (*.f64 -3/4 3/4) -1/2) 1/2)))))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (pow.f64 v 6) (fma.f64 (pow.f64 v 4) (/.f64 (+.f64 15/4 (*.f64 -1/2 (-.f64 9/2 (/.f64 (*.f64 -3/4 3/4) -1/2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (fma.f64 (fma.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 v v) (neg.f64 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 -1 (/.f64 (sqrt.f64 1/2) (PI.f64)))","(neg.f64 (/.f64 (sqrt.f64 1/2) (PI.f64)))","(+.f64 (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (PI.f64))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (PI.f64)))))) (*.f64 -1 (/.f64 (sqrt.f64 1/2) (PI.f64))))","(fma.f64 (fma.f64 5 (/.f64 (sqrt.f64 1/2) (PI.f64)) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (PI.f64)))) (*.f64 v v) (neg.f64 (/.f64 (sqrt.f64 1/2) (PI.f64))))","(+.f64 (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (PI.f64))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (PI.f64)))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (PI.f64))) (*.f64 (pow.f64 v 4) (+.f64 (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (PI.f64)))) (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (PI.f64))))))))","(fma.f64 (fma.f64 5 (/.f64 (sqrt.f64 1/2) (PI.f64)) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (PI.f64)))) (*.f64 v v) (fma.f64 (/.f64 (+.f64 15/4 (*.f64 -1/2 (-.f64 9/2 (/.f64 (*.f64 -3/4 3/4) -1/2)))) (*.f64 (sqrt.f64 1/2) (PI.f64))) (pow.f64 v 4) (neg.f64 (/.f64 (sqrt.f64 1/2) (PI.f64)))))","(+.f64 (*.f64 (pow.f64 v 6) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 27/2 (*.f64 3/4 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (pow.f64 (sqrt.f64 1/2) 2)))) (*.f64 (sqrt.f64 1/2) (PI.f64)))) (*.f64 5/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (PI.f64)))))) (+.f64 (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (PI.f64))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (PI.f64)))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (PI.f64))) (*.f64 (pow.f64 v 4) (+.f64 (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (PI.f64)))) (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (PI.f64)))))))))","(fma.f64 (pow.f64 v 6) (/.f64 (+.f64 (*.f64 -1/2 (+.f64 27/2 (*.f64 -3/4 (-.f64 9 (/.f64 (/.f64 (*.f64 -3/4 3/4) -1/2) 1/2))))) (*.f64 5/2 (-.f64 9/2 (/.f64 (*.f64 -3/4 3/4) -1/2)))) (*.f64 (sqrt.f64 1/2) (PI.f64))) (fma.f64 (fma.f64 5 (/.f64 (sqrt.f64 1/2) (PI.f64)) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (PI.f64)))) (*.f64 v v) (fma.f64 (/.f64 (+.f64 15/4 (*.f64 -1/2 (-.f64 9/2 (/.f64 (*.f64 -3/4 3/4) -1/2)))) (*.f64 (sqrt.f64 1/2) (PI.f64))) (pow.f64 v 4) (neg.f64 (/.f64 (sqrt.f64 1/2) (PI.f64))))))","(sqrt.f64 2)","(+.f64 (sqrt.f64 2) (*.f64 -3 (/.f64 (pow.f64 v 2) (sqrt.f64 2))))","(fma.f64 -3 (/.f64 (*.f64 v v) (sqrt.f64 2)) (sqrt.f64 2))","(+.f64 (sqrt.f64 2) (+.f64 (*.f64 -9/2 (/.f64 (pow.f64 v 4) (pow.f64 (sqrt.f64 2) 3))) (*.f64 -3 (/.f64 (pow.f64 v 2) (sqrt.f64 2)))))","(+.f64 (fma.f64 -3 (/.f64 (*.f64 v v) (sqrt.f64 2)) (sqrt.f64 2)) (/.f64 (*.f64 -9/2 (pow.f64 v 4)) (pow.f64 2 3/2)))","(+.f64 (*.f64 -27/2 (/.f64 (pow.f64 v 6) (pow.f64 (sqrt.f64 2) 5))) (+.f64 (sqrt.f64 2) (+.f64 (*.f64 -9/2 (/.f64 (pow.f64 v 4) (pow.f64 (sqrt.f64 2) 3))) (*.f64 -3 (/.f64 (pow.f64 v 2) (sqrt.f64 2))))))","(+.f64 (fma.f64 (/.f64 (pow.f64 v 6) (pow.f64 2 5/2)) -27/2 (sqrt.f64 2)) (fma.f64 -9/2 (/.f64 (pow.f64 v 4) (pow.f64 2 3/2)) (/.f64 (*.f64 (*.f64 v v) -3) (sqrt.f64 2))))"]],"time":104.220947265625,"type":"simplify"},{"compiler":[[10859,7008]],"time":132.067138671875,"type":"eval"},{"alts":[["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (fma.f64 v v -1))","fresh",0.25],["(/.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2)) t)) (fma.f64 v v -1))","fresh",0.24837875976844204],["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) (fma.f64 v v -1))","done",0.09765625],["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (fma.f64 v v -1))","next",0.24609375]],"compiler":[[25,18],[46,33],[25,18],[33,24],[25,18],[46,33],[33,24]],"count":[[342,4]],"kept":[{"done":[0,0],"fresh":[4,1],"new":[337,2],"picked":[1,1]}],"min-error":[0],"time":167.245849609375,"type":"prune"},{"compiler":[[150,82]],"locations":[["(*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))",0.37890625,false],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))",0.4140625,true],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64)))",0.98828125,true],["(/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))",0.99609375,true]],"time":34.55908203125,"type":"localize"},{"count":[[3,40]],"series":[["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","t","-inf",0.201904296875],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","t","inf",0.22900390625],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","t","0",0.655029296875],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","v","-inf",0.344970703125],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","v","inf",0.358154296875],["(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))","v","0",0.343017578125],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64)))","v","-inf",0.220947265625],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64)))","v","inf",0.220947265625],["(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64)))","v","0",0.282958984375],["(/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))","v","-inf",0.27197265625],["(/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))","v","inf",0.342041015625],["(/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))","v","0",1.504150390625]],"time":5.258056640625,"type":"series"},{"count":[[3,260]],"inputs":[["(/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64))))","(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64)))","(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 1/2) (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 0) (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (*.f64 5 (*.f64 v v))) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) -1) (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (*.f64 5 (*.f64 v v))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (*.f64 1/2 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (*.f64 0 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 5 (*.f64 v v)) (cbrt.f64 (pow.f64 (PI.f64) -2))) (neg.f64 (cbrt.f64 (pow.f64 (PI.f64) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cbrt.f64 (pow.f64 (PI.f64) -2))) (*.f64 (*.f64 5 (*.f64 v v)) (cbrt.f64 (pow.f64 (PI.f64) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (pow.f64 (PI.f64) 2/3))) (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 5 (*.f64 v v)) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (pow.f64 (PI.f64) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (neg.f64 (cbrt.f64 (pow.f64 (PI.f64) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2/3) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2/3) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (pow.f64 (PI.f64) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (fma.f64 (*.f64 5 v) v -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) -1/3) (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (PI.f64))) -2) (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) (pow.f64 (PI.f64) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)))) (neg.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))))) (pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (pow.f64 (PI.f64) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (PI.f64) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (neg.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (pow.f64 (PI.f64) 2/3))) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2/3)) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3) (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1))) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3) (cbrt.f64 (fma.f64 (*.f64 5 v) v -1))) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2/3)) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (PI.f64))) -2) (fma.f64 (*.f64 5 v) v -1)) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (PI.f64) -1/3) (fma.f64 (*.f64 5 v) v -1)) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64))))) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2/3) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64)))))) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3)) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2/3) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64)))))) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3)) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/3)) (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64)))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 2/3) (cbrt.f64 (PI.f64)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) 1) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (pow.f64 (PI.f64) 2/3))) 1) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (cbrt.f64 (PI.f64))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))) (neg.f64 (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (+.f64 (pow.f64 (*.f64 5 (*.f64 v v)) 3) -1)) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 5 (*.f64 v v)) 3) -1) (cbrt.f64 (pow.f64 (PI.f64) -2))) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 3) (*.f64 (PI.f64) (PI.f64))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 5 v) v -1) 3) (*.f64 (PI.f64) (PI.f64))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 1/2) (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 0) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (*.f64 1/2 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 0 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (neg.f64 (PI.f64)))) (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 5 (*.f64 v v)) (PI.f64)) (/.f64 1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3) (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) (neg.f64 (pow.f64 (PI.f64) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (cbrt.f64 (PI.f64)))) (pow.f64 (pow.f64 (PI.f64) 2/3) (-.f64 -1 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 1 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3) (cbrt.f64 (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (pow.f64 (PI.f64) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) -1/3) (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/3)) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))) (neg.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)))) (pow.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (cbrt.f64 (PI.f64))) (neg.f64 (cbrt.f64 (pow.f64 (PI.f64) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) (cbrt.f64 (pow.f64 (PI.f64) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 1 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (cbrt.f64 (PI.f64)))) (pow.f64 (cbrt.f64 (cbrt.f64 (PI.f64))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (cbrt.f64 (PI.f64))) (neg.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (cbrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) (pow.f64 (PI.f64) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)))) (cbrt.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))))) (cbrt.f64 (cbrt.f64 (neg.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (PI.f64) -1/3)) (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (cbrt.f64 (PI.f64)))) (neg.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3)) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (cbrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (PI.f64) -2))) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (PI.f64) -1/3) (fma.f64 (*.f64 5 v) v -1)) (pow.f64 (PI.f64) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (PI.f64) -1/3) (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (neg.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (PI.f64) -1/3) (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3)) (cbrt.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))) (cbrt.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3)))) (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3)))) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))) (cbrt.f64 (cbrt.f64 (neg.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (pow.f64 (PI.f64) 2/3) (-.f64 -1 1/3))) (cbrt.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (pow.f64 (PI.f64) 2/3))) (cbrt.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3) (cbrt.f64 (PI.f64)))) (cbrt.f64 (neg.f64 (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 (*.f64 5 v) v -1)) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) 2/3) (cbrt.f64 (PI.f64)))) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (cbrt.f64 (PI.f64))) 1) (neg.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) 1) (pow.f64 (PI.f64) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (cbrt.f64 (PI.f64)))) 1) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) -1/3))) (neg.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (neg.f64 (pow.f64 (PI.f64) -1/3))) (pow.f64 (PI.f64) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (pow.f64 (PI.f64) 2/3))) (pow.f64 (PI.f64) -1/3)) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (cbrt.f64 (PI.f64)))) (pow.f64 (PI.f64) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (cbrt.f64 (PI.f64))))) (neg.f64 (cbrt.f64 (pow.f64 (PI.f64) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 5 (*.f64 v v)) 3) -1) (/.f64 1 (PI.f64))) (+.f64 (*.f64 25 (pow.f64 v 4)) (+.f64 1 (*.f64 5 (*.f64 v v)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1/2) (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 0) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (*.f64 1/2 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (*.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2/3) (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)) (/.f64 -1 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) t) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (/.f64 (/.f64 1 (PI.f64)) (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) t) (/.f64 (pow.f64 (PI.f64) -1/3) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (/.f64 (/.f64 (pow.f64 (PI.f64) -1/3) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 (pow.f64 (PI.f64) -1/3) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) -1/3) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)) t) (neg.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (pow.f64 (PI.f64) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 1 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) (pow.f64 (PI.f64) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 1 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (/.f64 1 (*.f64 (cbrt.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (pow.f64 (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) (/.f64 1 (*.f64 (cbrt.f64 (neg.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (neg.f64 (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)) t) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (neg.f64 (*.f64 (cbrt.f64 (neg.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) (*.f64 (cbrt.f64 (neg.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (*.f64 (cbrt.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3)) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) t) (pow.f64 (PI.f64) -1/3)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) -1/3) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2/3) (cbrt.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)))) (cbrt.f64 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2/3) (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2/3) (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)))) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3)) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 t))) (pow.f64 t 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64))) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (pow.f64 (PI.f64) -1/3)) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (cbrt.f64 (PI.f64)))) (neg.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64)))) (pow.f64 (PI.f64) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3)))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (fma.f64 (*.f64 5 v) v -1)) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (+.f64 (*.f64 -5 (*.f64 v v)) 1)) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (cbrt.f64 (PI.f64))))) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (pow.f64 (PI.f64) -1/3)) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) t) (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 1) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) 1) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1) (sqrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)) t) 1) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) 1) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3))) (/.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)) (cbrt.f64 (cbrt.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3)))) (/.f64 (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t)) (cbrt.f64 (cbrt.f64 (neg.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) (/.f64 -1 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (/.f64 -1 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (neg.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (/.f64 (pow.f64 (PI.f64) -1/3) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) t)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64))) (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2/3)) (cbrt.f64 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64))) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t)) (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2/3)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t)) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 2/3)) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64))) (/.f64 (pow.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) 2/3) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (cbrt.f64 t)) (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)) (pow.f64 t 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)) (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2)) (neg.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (cbrt.f64 (PI.f64))) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)) (neg.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)) (pow.f64 (PI.f64) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)) (neg.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (cbrt.f64 (PI.f64)))) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)) (cbrt.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (cbrt.f64 (/.f64 (/.f64 1 (PI.f64)) (*.f64 (*.f64 t t) (fma.f64 (*.f64 v v) -6 2))))) (cbrt.f64 (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (/.f64 (pow.f64 (PI.f64) -1/3) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (pow.f64 (PI.f64) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (/.f64 (/.f64 (pow.f64 (PI.f64) -1/3) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (neg.f64 (pow.f64 (PI.f64) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (PI.f64))) (/.f64 (/.f64 (pow.f64 (PI.f64) -1/3) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (pow.f64 (PI.f64) 2/3))) (/.f64 (/.f64 (pow.f64 (PI.f64) -1/3) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (*.f64 (PI.f64) (cbrt.f64 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) (/.f64 (*.f64 (cbrt.f64 (neg.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (pow.f64 (PI.f64) 2/3)) (/.f64 (*.f64 (cbrt.f64 (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 (neg.f64 t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64)) (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (neg.f64 (pow.f64 (PI.f64) 2/3))) (/.f64 (/.f64 (pow.f64 (PI.f64) -1/3) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 (*.f64 v v) -6 2) -1/2) t) (/.f64 (+.f64 (*.f64 -5 (*.f64 v v)) 1) (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (neg.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) 3))))))"]],"rules":[["egg-rr",125],["egg-rr",71],["egg-rr",64]],"time":52.885986328125,"type":"rewrite"},{"count":[[300,281]],"inputs":[["(*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(/.f64 -1 (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))","(+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))","(+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (/.f64 (-.f64 27/2 (*.f64 3/4 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (pow.f64 (sqrt.f64 1/2) 2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 5/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))) (pow.f64 v 6)) (+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))","(cbrt.f64 (neg.f64 (pow.f64 (PI.f64) -2)))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (fma.f64 5 (*.f64 v v) -1))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (fma.f64 5 (*.f64 v v) -1))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (fma.f64 5 (*.f64 v v) -1))","(*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 (*.f64 5 (*.f64 v v)) (cbrt.f64 (pow.f64 (PI.f64) -2)))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (fma.f64 5 (*.f64 v v) -1))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (fma.f64 5 (*.f64 v v) -1))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (fma.f64 5 (*.f64 v v) -1))","(*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 (*.f64 5 (*.f64 v v)) (cbrt.f64 (pow.f64 (PI.f64) -2)))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (fma.f64 5 (*.f64 v v) -1))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (fma.f64 5 (*.f64 v v) -1))","(+.f64 (*.f64 5 (*.f64 (pow.f64 v 2) (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3))) (*.f64 -1 (pow.f64 (/.f64 1 (pow.f64 (PI.f64) 2)) 1/3)))","(*.f64 (cbrt.f64 (pow.f64 (PI.f64) -2)) (fma.f64 5 (*.f64 v v) -1))","(/.f64 -1 (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64)))","(/.f64 (*.f64 5 (*.f64 v v)) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64)))","(/.f64 (*.f64 5 (*.f64 v v)) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(-.f64 (*.f64 5 (/.f64 (pow.f64 v 2) (PI.f64))) (/.f64 1 (PI.f64)))","(/.f64 (fma.f64 5 (*.f64 v v) -1) (PI.f64))","(*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))","(/.f64 (sqrt.f64 1/2) (neg.f64 (*.f64 t (PI.f64))))","(+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))","(fma.f64 (*.f64 v v) (fma.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (/.f64 (sqrt.f64 1/2) (neg.f64 (*.f64 t (PI.f64)))))","(+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))))))","(fma.f64 (pow.f64 v 4) (/.f64 (+.f64 15/4 (*.f64 -1/2 (-.f64 9/2 (*.f64 (*.f64 3/4 3/4) 2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (fma.f64 (*.f64 v v) (fma.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (/.f64 (sqrt.f64 1/2) (neg.f64 (*.f64 t (PI.f64))))))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (/.f64 (-.f64 27/2 (*.f64 3/4 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (pow.f64 (sqrt.f64 1/2) 2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 5/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))))) (pow.f64 v 6)) (+.f64 (*.f64 (pow.f64 v 4) (+.f64 (*.f64 -1/2 (/.f64 (-.f64 9/2 (pow.f64 (/.f64 3/4 (sqrt.f64 1/2)) 2)) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (*.f64 15/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))) (+.f64 (*.f64 -1 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 (pow.f64 v 2) (-.f64 (*.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (*.f64 3/4 (/.f64 1 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))))))))","(fma.f64 (/.f64 (+.f64 (*.f64 5/2 (-.f64 9/2 (*.f64 (*.f64 3/4 3/4) 2))) (*.f64 -1/2 (+.f64 27/2 (*.f64 -3/4 (-.f64 9 (*.f64 (*.f64 (*.f64 3/4 3/4) 2) 2)))))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (pow.f64 v 6) (fma.f64 (pow.f64 v 4) (/.f64 (+.f64 15/4 (*.f64 -1/2 (-.f64 9/2 (*.f64 (*.f64 3/4 3/4) 2)))) (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64)))) (fma.f64 (*.f64 v v) (fma.f64 5 (/.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))) (/.f64 -3/4 (*.f64 (sqrt.f64 1/2) (*.f64 t (PI.f64))))) (/.f64 (sqrt.f64 1/2) (neg.f64 (*.f64 t (PI.f64)))))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))","(*.f64 (/.f64 (-.f64 (*.f64 5 (pow.f64 v 2)) 1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 -6 (pow.f64 v 2)) 2))))","(*.f64 (/.f64 (fma.f64 5 (*.f64 v v) -1) (*.f64 t (PI.f64))) (sqrt.f64 (/.f64 1 (fma.f64 -6 (*.f64 v v) 2))))"]],"time":139.035888671875,"type":"simplify"},{"compiler":[[11297,7182]],"time":126.532958984375,"type":"eval"},{"alts":[["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) (fma.f64 v v -1))","done",0.09765625],["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (fma.f64 v v -1))","fresh",0.25],["(/.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2)) t)) (fma.f64 v v -1))","fresh",0.24837875976844204],["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (fma.f64 v v -1))","done",0.24609375]],"compiler":[[25,18],[25,18],[46,33],[33,24]],"count":[[326,4]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[322,1],"picked":[1,1]}],"min-error":[0],"time":94.412109375,"type":"prune"},{"accuracy":[0.09765625],"baseline":[0.09765625],"branch":[["v",0.09765625,1],["t",0.09765625,1],["(/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 2 (-.f64 1 (*.f64 3 (*.f64 v v)))))) (-.f64 1 (*.f64 v v))))",0.09765625,1],["(*.f64 v v)",0.09765625,1],["(*.f64 (PI.f64) t)",0.09765625,1],["(*.f64 (PI.f64) t)",0.09765625,1]],"compiler":[[3,2],[3,2],[30,21],[5,3],[5,4],[5,4],[418,265]],"count":[[15,1]],"inputs":[["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (fma.f64 v v -1))","(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (fma.f64 v v -1))","(/.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) 2)) t)) (fma.f64 v v -1))","(/.f64 (*.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (/.f64 1 t)) (fma.f64 v v -1))","(/.f64 (/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 v v) -6 2)))) (cbrt.f64 (fma.f64 (*.f64 v v) -6 2))) (fma.f64 v v -1))","(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) (fma.f64 v v -1))","(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) t) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) (fma.f64 v v -1))","(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (cbrt.f64 (*.f64 (PI.f64) (PI.f64)))) (cbrt.f64 (PI.f64))) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (fma.f64 v v -1))","(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (*.f64 t (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (fma.f64 v v -1))","(/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))","(/.f64 (*.f64 (fma.f64 (*.f64 5 v) v -1) (/.f64 (/.f64 1 (fma.f64 v v -1)) (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (*.f64 (PI.f64) t))","(*.f64 (pow.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2) -1/2) (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)))","(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (PI.f64) t)) (cbrt.f64 (sqrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))) (cbrt.f64 (fma.f64 (*.f64 3 (*.f64 v v)) -2 2)))","(/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (fma.f64 v v -1)) (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 -2 (fma.f64 (*.f64 3 v) v -1)))))","(/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 2 (-.f64 1 (*.f64 3 (*.f64 v v)))))) (-.f64 1 (*.f64 v v))))"]],"link":["."],"name":["Falkner and Boettcher, Equation (20:1,3)"],"oracle":[1.0272027832848187],"outputs":[["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) (fma.f64 v v -1))"]],"time":40.3798828125,"times":[["v",5.35791015625],["t",8.3662109375],["(/.f64 (-.f64 1 (*.f64 5 (*.f64 v v))) (*.f64 (*.f64 (*.f64 (PI.f64) t) (sqrt.f64 (*.f64 2 (-.f64 1 (*.f64 3 (*.f64 v v)))))) (-.f64 1 (*.f64 v v))))",5.780029296875],["(*.f64 v v)",2.77392578125],["(*.f64 (PI.f64) t)",5.445068359375],["(*.f64 (PI.f64) t)",5.35693359375]],"type":"regimes"},{"compiler":[[25,18]],"inputs":[["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) (fma.f64 v v -1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 (/.f64 (/.f64 (fma.f64 (*.f64 5 v) v -1) (PI.f64)) (sqrt.f64 (fma.f64 (*.f64 v v) -6 2))) t) (fma.f64 v v -1))"]],"stop":[["fuel",1]],"time":22.897216796875,"type":"simplify"},{"time":0.016845703125,"type":"soundness"},{"compiler":[[25,18]],"remove-preprocessing":[[]],"time":12.70703125,"type":"end"}]
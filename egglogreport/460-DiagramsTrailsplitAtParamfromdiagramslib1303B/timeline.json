[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.850731099024415,0.14829257689416409,0.0009763240814208984],[11,0.8234140453860164,0.17560963053256273,0.0009763240814208984],[10,0.7180482670664787,0.2809754088521004,0.0009763240814208984],[9,0.6712190322577953,0.32780464366078377,0.0009763240814208984],[8,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[7,0.43707285821437836,0.5619508177042007,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":36.260986328125,"type":"analyze"},{"outcomes":[["body",256,"valid",294.1279296875,8256]],"time":302.212890625,"type":"sample"},{"compiler":[[9,6]],"inputs":[["0","1"],["(/.f64 (*.f64 x y) (+.f64 y 1))","(/.f64 (*.f64 y x) (+.f64 x 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (*.f64 x y) (+.f64 y 1))","(/.f64 (*.f64 y x) (+.f64 x 1))","(/.f64 (*.f64 x y) (+.f64 x 1))"]],"symmetry":[[]],"time":57.255126953125,"type":"preprocess"},{"count":[[1,1]],"inputs":[["(/.f64 (*.f64 x y) (+.f64 y 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x y) (+.f64 y 1))"]],"time":20.576904296875,"type":"simplify"},{"compiler":[[9,6]],"time":0.2431640625,"type":"eval"},{"alts":[["(/.f64 (*.f64 x y) (+.f64 y 1))","next",8.0546875]],"compiler":[[9,6],[9,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[8.0546875],"time":0.673828125,"type":"prune"},{"compiler":[[18,9]],"locations":[["(/.f64 (*.f64 x y) (+.f64 y 1))",7.515728617390936,true]],"time":4.162109375,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (*.f64 x y) (+.f64 y 1))","y","-inf",1.35791015625],["(/.f64 (*.f64 x y) (+.f64 y 1))","y","inf",0.306884765625],["(/.f64 (*.f64 x y) (+.f64 y 1))","y","0",0.375],["(/.f64 (*.f64 x y) (+.f64 y 1))","x","-inf",0.424072265625],["(/.f64 (*.f64 x y) (+.f64 y 1))","x","inf",0.453857421875],["(/.f64 (*.f64 x y) (+.f64 y 1))","x","0",0.72900390625]],"time":3.73388671875,"type":"series"},{"count":[[1,57]],"inputs":[["(/.f64 (*.f64 x y) (+.f64 y 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 0) (/.f64 (*.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) (*.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x y) (+.f64 y 1))) (/.f64 (*.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) (*.f64 0 (/.f64 (*.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 y)) (/.f64 (*.f64 x y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 x y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) (+.f64 y 1))) (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 2/3) (cbrt.f64 (/.f64 (*.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x y)) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (/.f64 x (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (+.f64 y 1))) (/.f64 y (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (/.f64 (pow.f64 (*.f64 x y) 2/3) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y 1) -1/3) (/.f64 (*.f64 x y) (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (pow.f64 (+.f64 y 1) 2/3)) (/.f64 x (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (+.f64 y 1) 2/3)) (/.f64 y (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (pow.f64 (+.f64 y 1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 x y) 2/3) (+.f64 y 1)) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 y 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 y)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (+.f64 y 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (+.f64 y 1))) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 y 1) -1/3) (*.f64 x y)) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y 1))) y) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 2/3) (cbrt.f64 (*.f64 x y))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 2/3) (cbrt.f64 (neg.f64 (*.f64 x y)))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 x y) (+.f64 y 1))) (pow.f64 (*.f64 x y) 2/3)) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) x) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 y (pow.f64 (+.f64 y 1) 2/3))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x y) (cbrt.f64 (+.f64 y 1))) 1) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 2/3)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 x y))) (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 2/3)) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 x (pow.f64 (+.f64 y 1) 2/3))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x y) (cbrt.f64 (+.f64 y 1))) 1) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x y)) (cbrt.f64 (+.f64 y 1))) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x y) (cbrt.f64 (+.f64 y 1)))) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 x y) (-.f64 -1 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 3))))))"]],"rules":[["egg-rr",57]],"time":23.51611328125,"type":"rewrite"},{"count":[[81,72]],"inputs":[["(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 (pow.f64 y 3) x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 (pow.f64 y 3) x) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 (pow.f64 y 3) x)))","(*.f64 x (+.f64 y (*.f64 (*.f64 y y) (+.f64 -1 y))))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 (pow.f64 y 3) x) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","(*.f64 x (+.f64 (-.f64 (pow.f64 y 3) (pow.f64 y 4)) (*.f64 y (-.f64 1 y))))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(-.f64 x (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (/.f64 (-.f64 (/.f64 x y) x) y) x)","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(+.f64 (/.f64 (-.f64 x (/.f64 x y)) (*.f64 y y)) (-.f64 x (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(-.f64 x (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (/.f64 (-.f64 (/.f64 x y) x) y) x)","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(+.f64 (/.f64 (-.f64 x (/.f64 x y)) (*.f64 y y)) (-.f64 x (/.f64 x y)))"]],"time":103.890869140625,"type":"simplify"},{"compiler":[[920,540]],"time":11.537109375,"type":"eval"},{"alts":[["(/.f64 (*.f64 x y) (+.f64 y 1))","done",8.0546875],["(*.f64 (/.f64 y (+.f64 y 1)) x)","next",0.0078125],["(*.f64 (/.f64 1 (+.f64 y 1)) (*.f64 x y))","fresh",8.10546875]],"compiler":[[9,6],[9,6],[11,8],[9,6],[11,8]],"count":[[73,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[72,2],"picked":[1,1]}],"min-error":[0],"time":13.30908203125,"type":"prune"},{"compiler":[[20,12]],"locations":[["(*.f64 (/.f64 y (+.f64 y 1)) x)",0.00390625,true],["(/.f64 y (+.f64 y 1))",0.00390625,true]],"time":4.885009765625,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 (/.f64 y (+.f64 y 1)) x)","x","-inf",0.153076171875],["(*.f64 (/.f64 y (+.f64 y 1)) x)","x","inf",0.173095703125],["(*.f64 (/.f64 y (+.f64 y 1)) x)","x","0",0.173095703125],["(*.f64 (/.f64 y (+.f64 y 1)) x)","y","-inf",0.16796875],["(*.f64 (/.f64 y (+.f64 y 1)) x)","y","inf",0.192138671875],["(*.f64 (/.f64 y (+.f64 y 1)) x)","y","0",0.16796875],["(/.f64 y (+.f64 y 1))","y","-inf",0.183837890625],["(/.f64 y (+.f64 y 1))","y","inf",0.244140625],["(/.f64 y (+.f64 y 1))","y","0",0.23095703125]],"time":1.810791015625,"type":"series"},{"count":[[2,104]],"inputs":[["(/.f64 y (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (+.f64 y 1)) 0) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 y (+.f64 y 1))) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 0 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (-.f64 -1 y)) (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (pow.f64 (/.f64 y (+.f64 y 1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2/3) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (/.f64 (pow.f64 y 2/3) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y 1) -1/3) (/.f64 y (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y 2/3) (+.f64 y 1)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (pow.f64 (+.f64 y 1) 2/3)) (pow.f64 (+.f64 y 1) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (+.f64 y 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (+.f64 y 1) -1/3) y) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2/3) (cbrt.f64 (neg.f64 y))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2/3) (cbrt.f64 y)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (pow.f64 y 2/3)) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (pow.f64 (/.f64 y (+.f64 y 1)) 2/3)) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (pow.f64 (/.f64 y (+.f64 y 1)) 2/3)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) 1) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) 1) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 y) (cbrt.f64 (+.f64 y 1))) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y (cbrt.f64 (+.f64 y 1)))) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 y (-.f64 -1 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) 0) (/.f64 (*.f64 y x) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) (*.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 y x) (+.f64 y 1))) (/.f64 (*.f64 y x) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) (*.f64 0 (/.f64 (*.f64 y x) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 y x) (+.f64 y 1))) (pow.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) 2/3) (cbrt.f64 (/.f64 (*.f64 y x) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (*.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (/.f64 x (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 y (+.f64 y 1)))) (pow.f64 (/.f64 y (+.f64 y 1)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (+.f64 y 1)) (cbrt.f64 x)) (pow.f64 x 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2/3) (*.f64 x (cbrt.f64 (/.f64 y (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (+.f64 y 1) 2/3)) (/.f64 y (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 2/3) (*.f64 (/.f64 y (+.f64 y 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2/3) x) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 y 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 2/3) (/.f64 y (+.f64 y 1))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y x) (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (+.f64 y 1)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 y x)) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 y x) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 y x) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 y x) (+.f64 y 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y x)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (cbrt.f64 (+.f64 y 1))) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 y (cbrt.f64 (+.f64 y 1)))) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) x) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) 2/3) (cbrt.f64 (*.f64 y x))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 y x)) (pow.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) 2/3)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 y)) (*.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2/3) x)) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (*.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2/3) x)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 y x)) 1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 y x) (cbrt.f64 (+.f64 y 1))) 1) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (/.f64 x (pow.f64 (+.f64 y 1) 2/3))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) (cbrt.f64 (+.f64 y 1))) 1) (pow.f64 (+.f64 y 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 y x) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (pow.f64 (+.f64 y 1) 2/3)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 y x)) (cbrt.f64 (+.f64 y 1))) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 y x)) 1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 y x) (cbrt.f64 (+.f64 y 1)))) (neg.f64 (pow.f64 (+.f64 y 1) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 y x) (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 y x) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 y (-.f64 -1 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (/.f64 y (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 y x) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 y x) (+.f64 y 1)) 3))))))"]],"rules":[["egg-rr",59],["egg-rr",45]],"time":28.192138671875,"type":"rewrite"},{"count":[[140,133]],"inputs":[["y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 (pow.f64 y 3) x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 (pow.f64 y 3) x) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(-.f64 y (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(+.f64 (*.f64 (*.f64 y y) (+.f64 -1 y)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","(+.f64 (*.f64 (*.f64 y y) (+.f64 -1 y)) (-.f64 y (pow.f64 y 4)))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 (+.f64 1 (/.f64 -1 y)) (pow.f64 y -2))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 (pow.f64 y -2) 1) (+.f64 (/.f64 1 y) (pow.f64 y -3)))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 (+.f64 1 (/.f64 -1 y)) (pow.f64 y -2))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 (pow.f64 y -2) 1) (+.f64 (/.f64 1 y) (pow.f64 y -3)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (-.f64 y (*.f64 y y)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 (pow.f64 y 3) x)))","(fma.f64 y x (*.f64 x (*.f64 (*.f64 y y) (+.f64 -1 y))))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 (pow.f64 y 3) x) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","(+.f64 (*.f64 x (-.f64 y (*.f64 y y))) (*.f64 x (+.f64 (neg.f64 (pow.f64 y 4)) (pow.f64 y 3))))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(-.f64 x (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(fma.f64 x (pow.f64 y -2) (-.f64 x (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(-.f64 (fma.f64 x (pow.f64 y -2) (-.f64 x (/.f64 x y))) (*.f64 x (pow.f64 y -3)))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(-.f64 x (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(fma.f64 x (pow.f64 y -2) (-.f64 x (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(-.f64 (fma.f64 x (pow.f64 y -2) (-.f64 x (/.f64 x y))) (*.f64 x (pow.f64 y -3)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))"]],"time":109.722900390625,"type":"simplify"},{"compiler":[[1667,1051]],"time":21.6220703125,"type":"eval"},{"alts":[["(/.f64 (*.f64 x y) (+.f64 y 1))","done",8.0546875],["(*.f64 (/.f64 y (+.f64 y 1)) x)","done",0.0078125],["(*.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) x)","next",0.07259750976844201]],"compiler":[[9,6],[9,6],[11,8],[11,8]],"count":[[136,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[133,1],"picked":[1,1]}],"min-error":[0],"time":32.22509765625,"type":"prune"},{"compiler":[[29,20]],"locations":[["(*.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) x)",0.00390625,true],["(/.f64 1 (+.f64 y 1))",0.0078125,true],["(*.f64 y (/.f64 1 (+.f64 y 1)))",0.0703125,true]],"time":6.949951171875,"type":"localize"},{"count":[[3,48]],"series":[["(*.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) x)","x","-inf",0.176025390625],["(*.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) x)","x","inf",0.14990234375],["(*.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) x)","x","0",0.14697265625],["(*.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) x)","y","-inf",0.18505859375],["(*.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) x)","y","inf",0.160888671875],["(*.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) x)","y","0",0.198974609375],["(/.f64 1 (+.f64 y 1))","y","-inf",0.198974609375],["(/.f64 1 (+.f64 y 1))","y","inf",0.275146484375],["(/.f64 1 (+.f64 y 1))","y","0",0.18701171875],["(*.f64 y (/.f64 1 (+.f64 y 1)))","y","-inf",0.1640625],["(*.f64 y (/.f64 1 (+.f64 y 1)))","y","inf",0.19189453125],["(*.f64 y (/.f64 1 (+.f64 y 1)))","y","0",0.201904296875]],"time":2.3828125,"type":"series"},{"count":[[3,169]],"inputs":[["(*.f64 y (/.f64 1 (+.f64 y 1)))","(/.f64 1 (+.f64 y 1))","(*.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (+.f64 y 1)) 0) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 y (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 y (+.f64 y 1))) (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y 1)) (*.f64 0 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (/.f64 (cbrt.f64 (*.f64 y y)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 y) (+.f64 (pow.f64 y 3) 1)) (/.f64 -1 (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 (pow.f64 y 3) 1)) (/.f64 (neg.f64 y) (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 y) (+.f64 (pow.f64 y 3) 1)) (/.f64 (cbrt.f64 (*.f64 y y)) (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 y) -1) (/.f64 (cbrt.f64 (*.f64 y y)) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (/.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (pow.f64 y 3) 1)) (/.f64 (cbrt.f64 y) (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (pow.f64 y 3) 1)) (/.f64 y (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 -1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 -1 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 y) (+.f64 y 1)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (/.f64 (cbrt.f64 y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y) (cbrt.f64 (/.f64 -1 (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (+.f64 y 1)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (/.f64 y (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 y) (cbrt.f64 (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (/.f64 1 (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) (/.f64 (neg.f64 y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (/.f64 (neg.f64 y) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y -1) (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (+.f64 y 1))) (/.f64 (cbrt.f64 y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) -1) (/.f64 (cbrt.f64 y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) (/.f64 y (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (-.f64 -1 y))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (cbrt.f64 y)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y)) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) 1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 y) (cbrt.f64 (+.f64 y 1))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 y (cbrt.f64 (+.f64 y 1)))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (-.f64 -1 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 y (/.f64 1 (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 -1 (-.f64 -1 y)) 0) (/.f64 -1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (-.f64 -1 y)) (*.f64 (/.f64 -1 (-.f64 -1 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 -1 (-.f64 -1 y))) (/.f64 -1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 (-.f64 -1 y)) (*.f64 0 (/.f64 -1 (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 -1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 -1 (-.f64 -1 y)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (-.f64 -1 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 (pow.f64 y 3) 1)) (/.f64 -1 (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y)))) (cbrt.f64 (+.f64 y 1))) (/.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y))) (/.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y)))) 1) (/.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y))) (cbrt.f64 (pow.f64 (+.f64 y 1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (cbrt.f64 (/.f64 -1 (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (cbrt.f64 (/.f64 1 (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2)) (/.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y))) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 y 1))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 0 (-.f64 -1 y)) (-.f64 -1 y)) (*.f64 (-.f64 -1 y) (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) -1) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) -1) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2))) (cbrt.f64 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 1 (-.f64 -1 y))) (neg.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y 1) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 y 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (-.f64 -1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 y 1)) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y 1) 3) (neg.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 y 1) -3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 0) (/.f64 (*.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) (*.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 x y) (+.f64 y 1))) (/.f64 (*.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) (*.f64 0 (/.f64 (*.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y (+.f64 y 1)) (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (*.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (/.f64 y (+.f64 y 1))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 y (+.f64 y 1)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x y) (+.f64 y 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 y y)) (/.f64 x (+.f64 y 1))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) x) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 (pow.f64 y 3) 1)) (/.f64 y (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 x y) (+.f64 y 1))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 (*.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 x (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 y 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 y (+.f64 y 1)))) (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (/.f64 -1 (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 -1 y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) (*.f64 x (cbrt.f64 (/.f64 y (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 (pow.f64 y 3) 1)) (/.f64 x (/.f64 1 (fma.f64 y y (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) (/.f64 x (cbrt.f64 (pow.f64 (+.f64 y 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y -1) (/.f64 x (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y) (/.f64 x (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (+.f64 y 1))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 y 1) -2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x -1) (/.f64 y (-.f64 -1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (/.f64 y (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (neg.f64 x)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (cbrt.f64 (/.f64 -1 (-.f64 -1 y)))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) 1) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 y)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 y (cbrt.f64 (+.f64 y 1)))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (-.f64 -1 y))) (*.f64 x y)) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 x y)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) y) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2)) x)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) x) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 y (cbrt.f64 (+.f64 y 1))) x) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) 1) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (+.f64 (pow.f64 y 3) 1)) (/.f64 1 (fma.f64 y y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (+.f64 y 1))) (cbrt.f64 (pow.f64 (+.f64 y 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) -1) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x y) (cbrt.f64 (pow.f64 (+.f64 y 1) 2))) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x y)) (-.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) (+.f64 y 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) (+.f64 y 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 x y) (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (*.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (-.f64 -1 y)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 x y) (/.f64 1 (-.f64 -1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 x y) (+.f64 y 1)) 3))))))"]],"rules":[["egg-rr",63],["egg-rr",43],["egg-rr",63]],"time":31.0380859375,"type":"rewrite"},{"count":[[217,211]],"inputs":[["y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","1","(+.f64 1 (*.f64 -1 y))","(+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 -1 y)))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 y 3)) (+.f64 (pow.f64 y 2) (*.f64 -1 y))))","(/.f64 1 y)","(-.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 4))))","(/.f64 1 y)","(-.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 4))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 (pow.f64 y 3) x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 (pow.f64 y 3) x) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(-.f64 y (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(+.f64 (*.f64 (*.f64 y y) (+.f64 -1 y)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","(+.f64 (*.f64 (*.f64 y y) (+.f64 -1 y)) (-.f64 y (pow.f64 y 4)))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 1 (+.f64 (pow.f64 y -2) (/.f64 -1 y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 (pow.f64 y -2) 1) (+.f64 (/.f64 1 y) (pow.f64 y -3)))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 1 (+.f64 (pow.f64 y -2) (/.f64 -1 y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 (pow.f64 y -2) 1) (+.f64 (/.f64 1 y) (pow.f64 y -3)))","1","(+.f64 1 (*.f64 -1 y))","(-.f64 1 y)","(+.f64 1 (+.f64 (pow.f64 y 2) (*.f64 -1 y)))","(+.f64 1 (*.f64 y (+.f64 -1 y)))","(+.f64 1 (+.f64 (*.f64 -1 (pow.f64 y 3)) (+.f64 (pow.f64 y 2) (*.f64 -1 y))))","(+.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 y (+.f64 -1 y)))","(/.f64 1 y)","(-.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(-.f64 (/.f64 1 y) (pow.f64 y -2))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (pow.f64 y -3)) (pow.f64 y -2))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 4))))","(-.f64 (+.f64 (/.f64 1 y) (pow.f64 y -3)) (+.f64 (pow.f64 y -2) (pow.f64 y -4)))","(/.f64 1 y)","(-.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(-.f64 (/.f64 1 y) (pow.f64 y -2))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (/.f64 1 (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (pow.f64 y -3)) (pow.f64 y -2))","(-.f64 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 4))))","(-.f64 (+.f64 (/.f64 1 y) (pow.f64 y -3)) (+.f64 (pow.f64 y -2) (pow.f64 y -4)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 x (-.f64 y (*.f64 y y)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 (pow.f64 y 3) x)))","(fma.f64 y x (*.f64 x (*.f64 (*.f64 y y) (+.f64 -1 y))))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 (pow.f64 y 3) x) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","(+.f64 (*.f64 x (-.f64 y (*.f64 y y))) (*.f64 x (+.f64 (pow.f64 y 3) (neg.f64 (pow.f64 y 4)))))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(-.f64 x (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(fma.f64 x (pow.f64 y -2) (-.f64 x (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(-.f64 (fma.f64 x (pow.f64 y -2) (-.f64 x (/.f64 x y))) (*.f64 x (pow.f64 y -3)))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(-.f64 x (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(fma.f64 x (pow.f64 y -2) (-.f64 x (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(-.f64 (fma.f64 x (pow.f64 y -2) (-.f64 x (/.f64 x y))) (*.f64 x (pow.f64 y -3)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))"]],"time":150.338134765625,"type":"simplify"},{"compiler":[[2894,1918]],"time":37.92578125,"type":"eval"},{"alts":[["(/.f64 (*.f64 x y) (+.f64 y 1))","done",8.0546875],["(*.f64 (/.f64 y (+.f64 y 1)) x)","done",0.0078125],["(*.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) x)","done",0.07259750976844201]],"compiler":[[9,6],[9,6],[11,8]],"count":[[214,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[211,0],"picked":[1,1]}],"min-error":[0],"time":70.218017578125,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["(/.f64 (*.f64 x y) (+.f64 y 1))",0.0078125,1]],"compiler":[[3,2],[3,2],[9,6],[34,21]],"count":[[4,1]],"inputs":[["(*.f64 (*.f64 y (/.f64 1 (+.f64 y 1))) x)","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 (/.f64 1 (+.f64 y 1)) (*.f64 x y))","(/.f64 (*.f64 x y) (+.f64 y 1))"]],"link":["."],"name":["Diagrams.Trail:splitAtParam  from diagrams-lib-1.3.0.3, B"],"oracle":[8.158535009768443],"outputs":[["(*.f64 (/.f64 y (+.f64 y 1)) x)"]],"time":9.841064453125,"times":[["x",3.055908203125],["y",3.136962890625],["(/.f64 (*.f64 x y) (+.f64 y 1))",2.8271484375]],"type":"regimes"},{"compiler":[[9,6]],"inputs":[["(*.f64 (/.f64 y (+.f64 y 1)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 y (+.f64 y 1)) x)","(/.f64 (*.f64 y x) (+.f64 y 1))"]],"stop":[["done",1]],"time":21.02001953125,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.867919921875,"type":"end"}]
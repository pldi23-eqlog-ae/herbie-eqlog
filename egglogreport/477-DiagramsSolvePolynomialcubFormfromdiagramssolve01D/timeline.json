[{"compiler":[[24,20]],"method":["search"],"sampling":[[12,0.06627664525695232,0.6578931698300414,0.27583018491300626],[11,0.046783514299025164,0.6920061490064139,0.26121033669456095],[10,0.031189009532683443,0.7134485930601338,0.2553623974071828],[9,0.031189009532683443,0.7173472192517192,0.2514637712155974],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":181.6611328125,"type":"analyze"},{"outcomes":[["body",256,"invalid",1043.1220703125,15656],["body",256,"valid",588.90576171875,8256]],"time":1654.493896484375,"type":"sample"},{"compiler":[[23,19]],"inputs":[["0","1","2","3"],["(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 t))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 y (*.f64 x 27))) (*.f64 z 2)) (sqrt.f64 t))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 z (*.f64 y 27))) (*.f64 x 2)) (sqrt.f64 t))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 t (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 x))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 z 27))) (*.f64 y 2)) (sqrt.f64 t))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 t 27))) (*.f64 z 2)) (sqrt.f64 y))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 t 2)) (sqrt.f64 z))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 3 z) (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) 2) (sqrt.f64 t)))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 y (*.f64 x 27))) (*.f64 z 2)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 3 z) (*.f64 (/.f64 (/.f64 y (*.f64 x 27)) 2) (sqrt.f64 t)))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 z (*.f64 y 27))) (*.f64 x 2)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 (/.f64 (*.f64 3 z) (*.f64 y 27)) x) 2) (sqrt.f64 t))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 t (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 x))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 3 z) (*.f64 (/.f64 t (*.f64 2 (*.f64 y 27))) (sqrt.f64 x)))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 z 27))) (*.f64 y 2)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 (/.f64 (*.f64 3 x) (*.f64 z 27)) y) 2) (sqrt.f64 t))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 t 27))) (*.f64 z 2)) (sqrt.f64 y))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 (/.f64 (*.f64 3 x) (*.f64 t 27)) 2) z) (sqrt.f64 y))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 t 2)) (sqrt.f64 z))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 3 t) (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) 2) (sqrt.f64 z)))))"]],"symmetry":[[]],"time":72.44287109375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 t))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))"]],"time":22.80419921875,"type":"simplify"},{"compiler":[[38,29]],"time":0.599853515625,"type":"eval"},{"alts":[["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","next",0.9765625]],"compiler":[[19,15],[19,15]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.9765625],"time":2.416015625,"type":"prune"},{"compiler":[[73,46]],"locations":[["(/.f64 x (*.f64 y 27))",0.41290607011726244,true],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))",0.9765625,true],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))",2.18644673330373,true],["(/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2))",3.285026065858281,true]],"time":17.05615234375,"type":"localize"},{"count":[[4,140]],"series":[["(/.f64 x (*.f64 y 27))","y","-inf",0.27392578125],["(/.f64 x (*.f64 y 27))","y","inf",0.27294921875],["(/.f64 x (*.f64 y 27))","y","0",0.408935546875],["(/.f64 x (*.f64 y 27))","x","-inf",0.3330078125],["(/.f64 x (*.f64 y 27))","x","inf",0.39013671875],["(/.f64 x (*.f64 y 27))","x","0",0.4541015625],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","t","-inf",0.433837890625],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","t","inf",0.35595703125],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","t","0",0.22412109375],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","z","-inf",0.349853515625],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","z","inf",0.35302734375],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","z","0",0.22509765625],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","y","-inf",0.35498046875],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","y","inf",0.364013671875],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","y","0",0.22705078125],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","x","-inf",0.366943359375],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","x","inf",0.380126953125],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","x","0",0.343017578125],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","t","-inf",0.71484375],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","t","inf",0.453125],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","t","0",2.031982421875],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","z","-inf",0.296875],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","z","inf",0.2939453125],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","z","0",0.4599609375],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","y","-inf",0.299072265625],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","y","inf",0.321044921875],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","y","0",0.471923828125],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","x","-inf",0.281005859375],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","x","inf",0.47998046875],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","x","0",0.60302734375],["(/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2))","z","-inf",0.260986328125],["(/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2))","z","inf",0.407958984375],["(/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2))","z","0",0.97705078125],["(/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2))","y","-inf",0.2939453125],["(/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2))","y","inf",0.501953125],["(/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2))","y","0",0.60302734375],["(/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2))","x","-inf",0.625],["(/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2))","x","inf",0.677978515625],["(/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2))","x","0",0.845947265625]],"time":18.533935546875,"type":"series"},{"count":[[4,225]],"inputs":[["(/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2))","(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","(/.f64 x (*.f64 y 27))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 0) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 1/2) (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (*.f64 0 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (*.f64 1/2 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 z -2/3)) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2/3) (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (cbrt.f64 3/2)) (cbrt.f64 9/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y 27))) (/.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2/3) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 -27 y)) (/.f64 1 (*.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (/.f64 (/.f64 1/27 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (*.f64 z 2/3))) (/.f64 (/.f64 1/27 y) (pow.f64 (*.f64 z 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 1/27 y) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 x (*.f64 y 27))) z) (*.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2/3) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (/.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2/3) (pow.f64 (*.f64 z 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y 27)) (/.f64 1 (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 z 2/3)) (/.f64 x (*.f64 y 27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (sqrt.f64 3/2)) (sqrt.f64 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 (*.f64 x 1/27) (*.f64 2/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z 2/3) -1/3) (/.f64 (/.f64 x (*.f64 y 27)) (pow.f64 (*.f64 z 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 -27 y)) z) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3/2 (/.f64 (/.f64 x (*.f64 y 27)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) -1) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x (*.f64 z 2/3))) (/.f64 -1/27 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 (*.f64 z 2/3))) (pow.f64 (cbrt.f64 (*.f64 z 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 (*.f64 27 (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (*.f64 (*.f64 -27 y) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (*.f64 z 2/3)) 1/27)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/27) (*.f64 2/3 y)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (*.f64 (*.f64 y 27) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 z 2/3)) (/.f64 1/27 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 (*.f64 z 2/3)))) (neg.f64 (pow.f64 (*.f64 z 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) (neg.f64 (*.f64 27 (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (neg.f64 (*.f64 (*.f64 -27 y) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (*.f64 -27 y)) z) -2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x y) (*.f64 z 2/3))) -27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 -27 y)) (*.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/27) (*.f64 2/3 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (*.f64 z 2/3)) 27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 z 2/3)) (*.f64 y 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x (*.f64 z 2/3))) (*.f64 -27 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 (*.f64 z 2/3))) (pow.f64 (*.f64 z 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) (*.f64 27 (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 (*.f64 y 27) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (*.f64 -27 y) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) (/.f64 (*.f64 z 2/3) 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 (*.f64 (*.f64 y 27) (*.f64 z 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) (/.f64 (*.f64 27 (*.f64 z 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (/.f64 (*.f64 (*.f64 -27 y) (*.f64 z 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 z)) (*.f64 2/3 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (/.f64 x (*.f64 z 2/3)))) (*.f64 y 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x 1/27) (*.f64 2/3 y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z -2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -3/2 (/.f64 (/.f64 x (*.f64 y 27)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x (*.f64 -27 y)) (/.f64 1 (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 (*.f64 z 2/3)) (/.f64 x (*.f64 -27 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 z 2/3) -3) (pow.f64 (/.f64 x (*.f64 y 27)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 27/8 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 0) (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) (*.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 1/2) (*.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) (*.f64 0 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (*.f64 1/2 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (*.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2/3) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 t)) (*.f64 (cbrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (*.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2/3) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2/3) (cbrt.f64 t)) (cbrt.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 t) (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)))) (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 (sqrt.f64 t))) (sqrt.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (cbrt.f64 (sqrt.f64 t))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 t)) (*.f64 (sqrt.f64 (sqrt.f64 t)) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 (*.f64 z 2/3))) (/.f64 (sqrt.f64 t) (pow.f64 (*.f64 z 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (cbrt.f64 (*.f64 z 2/3))) (pow.f64 (cbrt.f64 (*.f64 z 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) z)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (sqrt.f64 (*.f64 9/4 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (*.f64 (sqrt.f64 t) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y 27)) (/.f64 (sqrt.f64 t) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (/.f64 1 (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y 27)) (*.f64 (/.f64 1 (*.f64 z 2/3)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 t) (/.f64 x (*.f64 -27 y))) z) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) z) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) z) 1) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) z) -1) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 t) (/.f64 x (*.f64 -27 y))) (/.f64 1 (*.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) z)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (cbrt.f64 (*.f64 z 2/3)))) (neg.f64 (pow.f64 (*.f64 z 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) z)) -2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (*.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (/.f64 x (*.f64 -27 y))) (*.f64 z -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (cbrt.f64 (*.f64 z 2/3))) (pow.f64 (*.f64 z 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) z) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z -2/3)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x (*.f64 -27 y)) (*.f64 (/.f64 1 (*.f64 z 2/3)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) z) -3/2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) z)) -3/2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (sqrt.f64 t) (/.f64 x (*.f64 -27 y))) z) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (*.f64 z -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 3) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 0) (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) (*.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 1/2) (*.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) (*.f64 0 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (*.f64 1/2 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) (*.f64 (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2/3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 1/9) (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (pow.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 2/3) (cbrt.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (cbrt.f64 1/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (*.f64 (sqrt.f64 1/3) (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 3) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (*.f64 y 27)) 0) (/.f64 x (*.f64 y 27)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (*.f64 y 27)) (*.f64 (/.f64 x (*.f64 y 27)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (*.f64 y 27)) 1/2) (*.f64 (/.f64 x (*.f64 y 27)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 x (*.f64 y 27))) (/.f64 x (*.f64 y 27)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (*.f64 y 27)) (*.f64 0 (/.f64 x (*.f64 y 27))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 x (*.f64 y 27))) (*.f64 1/2 (/.f64 x (*.f64 y 27))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 x (*.f64 -27 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -27 y)) (/.f64 x (*.f64 -27 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (/.f64 1/27 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 -1/27 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x 19683)) (/.f64 (pow.f64 x 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 x) y) (*.f64 (pow.f64 x 2/3) 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y 27))) (/.f64 (pow.f64 x 2/3) (pow.f64 (*.f64 y 27) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1/27 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y 27))) (pow.f64 (/.f64 x (*.f64 y 27)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/27 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2/3) (cbrt.f64 (/.f64 x (*.f64 y 27))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) 1/27)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/27 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/27 y)) (/.f64 x (pow.f64 (*.f64 y 27) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 y 27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y 27)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 x (*.f64 -27 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 -1/27 y))) (neg.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 x (*.f64 -27 y)))) (pow.f64 (/.f64 x (*.f64 y 27)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 1/27 y))) (pow.f64 (cbrt.f64 (*.f64 y 27)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/27) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (sqrt.f64 27)) (/.f64 1 (sqrt.f64 27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) 3) (/.f64 1 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) -1/27)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 -27 y))) (neg.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 -27 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) 27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (sqrt.f64 27)) (sqrt.f64 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) 3) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/27) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 (/.f64 1/27 y))) (pow.f64 (*.f64 y 27) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) -27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 y 27)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (*.f64 27 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (cbrt.f64 (/.f64 1/27 y)))) (neg.f64 (pow.f64 (*.f64 y 27) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x 1/27)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x y) (sqrt.f64 27))) (neg.f64 (sqrt.f64 27)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x y) 3)) (neg.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 -27 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 y 27))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 y 27)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 y 27))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 y 27))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 x (*.f64 -27 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (*.f64 -27 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 -1 (pow.f64 (/.f64 x (*.f64 -27 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/19683 (pow.f64 (/.f64 x y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 1/27 y) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 3) 1))))))"]],"rules":[["egg-rr",60],["egg-rr",31],["egg-rr",57],["egg-rr",77]],"time":42.97607421875,"type":"rewrite"},{"count":[[365,232]],"inputs":[["(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))","(*.f64 1/27 (/.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/3 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)","(*.f64 1/27 (/.f64 x y))","(/.f64 (*.f64 1/27 x) y)"]],"time":397.615966796875,"type":"simplify"},{"compiler":[[4538,3163]],"time":54.887939453125,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2/3))","next",0.0078125],["(pow.f64 (cbrt.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) 3)","fresh",0.98046875],["(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","done",0.9765625]],"compiler":[[36,27],[22,18],[19,15],[36,27],[22,18]],"count":[[233,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[232,2],"picked":[1,1]}],"min-error":[0],"time":42.205078125,"type":"prune"},{"compiler":[[136,89]],"locations":[["(/.f64 x (*.f64 y 27))",0.41290607011726244,false],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))",0.97265625,true],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))",2.18644673330373,true],["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))",3.285026065858281,true]],"time":34.2080078125,"type":"localize"},{"count":[[3,116]],"series":[["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","t","-inf",0.294921875],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","t","inf",0.298095703125],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","t","0",0.23095703125],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","z","-inf",0.2919921875],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","z","inf",1.8330078125],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","z","0",0.223876953125],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","y","-inf",0.31005859375],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","y","inf",0.288818359375],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","y","0",0.22802734375],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","x","-inf",0.31396484375],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","x","inf",0.2890625],["(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))","x","0",0.325927734375],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","t","-inf",0.285888671875],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","t","inf",0.23193359375],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","t","0",0.27001953125],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","z","-inf",0.158935546875],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","z","inf",0.156982421875],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","z","0",0.18212890625],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","y","-inf",0.158935546875],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","y","inf",0.185791015625],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","y","0",0.157958984375],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","x","-inf",0.162109375],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","x","inf",0.189208984375],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","x","0",0.166015625],["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))","z","-inf",0.182861328125],["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))","z","inf",0.156005859375],["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))","z","0",0.14990234375],["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))","y","-inf",0.177978515625],["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))","y","inf",0.14990234375],["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))","y","0",0.15380859375],["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))","x","-inf",0.17822265625],["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))","x","inf",0.157958984375],["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))","x","0",0.227783203125]],"time":9.23876953125,"type":"series"},{"count":[[3,205]],"inputs":[["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))","(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 1/2) (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 0) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (*.f64 1/2 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (*.f64 0 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 -2/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 -2/3 z)) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 -2/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2)) (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 -27 y)) (neg.f64 (/.f64 3/2 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (cbrt.f64 (/.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2) (*.f64 (*.f64 z z) 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) 8/27)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 x (*.f64 y 27))) z) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y 27))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2)) (/.f64 3/2 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 3/2 z))) (/.f64 (/.f64 1/27 y) (cbrt.f64 (*.f64 (*.f64 z z) 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 3/2) (/.f64 (/.f64 1/27 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (/.f64 (/.f64 -1/27 y) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 1/27 y) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y 27)) (/.f64 3/2 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 3/2 z) (/.f64 x (*.f64 y 27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 3/2 z)) (/.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 (*.f64 (*.f64 z z) 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 (*.f64 x 1/27) (*.f64 2/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 -2/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3/2 (/.f64 (/.f64 x (*.f64 y 27)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (cbrt.f64 2/3)) (/.f64 1 (cbrt.f64 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (sqrt.f64 2/3)) (/.f64 1 (sqrt.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 x 3/2) z)) (/.f64 -1/27 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 (*.f64 27 (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (*.f64 (*.f64 y 27) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 -27 y)) z) -3/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 3/2) z) (/.f64 1/27 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/27) (*.f64 2/3 y)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 (/.f64 3/2 z))) (pow.f64 (cbrt.f64 (*.f64 z 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (*.f64 (*.f64 -27 y) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) (*.f64 z 2/3)) 1/27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (*.f64 -27 y)) z) -2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 -27 y)) (*.f64 -2/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (cbrt.f64 2/3))) (neg.f64 (cbrt.f64 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (sqrt.f64 2/3))) (neg.f64 (sqrt.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 x y) (*.f64 z 2/3))) -27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) (neg.f64 (*.f64 27 (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x 1/27) (*.f64 2/3 y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 (/.f64 3/2 z)))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 z z) 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (neg.f64 (*.f64 (*.f64 -27 y) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (*.f64 z 2/3)) 27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x 3/2) z)) (*.f64 -27 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 3/2) z) (*.f64 y 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 (/.f64 3/2 z))) (cbrt.f64 (*.f64 (*.f64 z z) 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/27) (*.f64 2/3 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (cbrt.f64 2/3)) (cbrt.f64 4/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (sqrt.f64 2/3)) (sqrt.f64 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) (*.f64 27 (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (*.f64 -27 y) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 (*.f64 y 27) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (cbrt.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2))) (cbrt.f64 (*.f64 (*.f64 z z) 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 x (*.f64 y 27))) z) (cbrt.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x 3/2) (/.f64 1/27 y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (neg.f64 (/.f64 (*.f64 x 3/2) z))) (*.f64 -27 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (*.f64 x 3/2) z)) (*.f64 y 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (/.f64 x y) (*.f64 z 2/3))) 27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 3/2 z) (/.f64 (/.f64 x y) 3)) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 3/2 z) (neg.f64 x)) (*.f64 -27 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 3/2 z) (*.f64 x (cbrt.f64 (/.f64 1/27 y)))) (cbrt.f64 (*.f64 (*.f64 y y) 729)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 3/2 z) x) (*.f64 y 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 3/2 z) (/.f64 (/.f64 x y) (sqrt.f64 27))) (sqrt.f64 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 3/2 z) (*.f64 x 1/27)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 3/2 z) (/.f64 x y)) 27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 3/2 z) (neg.f64 (/.f64 x y))) -27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (cbrt.f64 (/.f64 3/2 z))) (/.f64 1/27 y)) (cbrt.f64 (*.f64 (*.f64 z z) 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 z) (/.f64 x (*.f64 y 27))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x z) (/.f64 1/27 y)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3/2 (/.f64 x (*.f64 y 27))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3/2 (/.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3/2 (/.f64 x (*.f64 -27 y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2)) (cbrt.f64 (/.f64 x (*.f64 -27 y)))) (cbrt.f64 (*.f64 -2/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2)) (cbrt.f64 (/.f64 x (*.f64 y 27)))) (cbrt.f64 (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2)) (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) z))) (cbrt.f64 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) 8/27)) (cbrt.f64 (pow.f64 (/.f64 x (*.f64 y 27)) 2))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) 3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 3/2 z)) (/.f64 x (*.f64 y 27))) (cbrt.f64 (*.f64 (*.f64 z z) 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) (/.f64 (*.f64 z 2/3) 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 (*.f64 (*.f64 y 27) (*.f64 z 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) (/.f64 (*.f64 27 (*.f64 z 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (/.f64 (*.f64 (*.f64 -27 y) (*.f64 z 2/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 z)) (*.f64 2/3 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (/.f64 (*.f64 x 3/2) z))) (*.f64 y 27))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 -2/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 -2/3 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x (*.f64 -27 y)) (/.f64 3/2 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 3/2 z) (/.f64 x (*.f64 -27 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 3/2 z) 3) (pow.f64 (/.f64 x (*.f64 y 27)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 3) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 1/2) (*.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 0) (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) (*.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (*.f64 1/2 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) (*.f64 0 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (cbrt.f64 (*.f64 t (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 t (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2))) (cbrt.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (cbrt.f64 (sqrt.f64 t))) (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 (sqrt.f64 t))) (sqrt.f64 (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 t) (cbrt.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 t)) (*.f64 (cbrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 t)) (*.f64 (sqrt.f64 (sqrt.f64 t)) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 (/.f64 3/2 z))) (/.f64 (sqrt.f64 t) (cbrt.f64 (*.f64 (*.f64 z z) 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/27) (*.f64 2/3 y)) (/.f64 (sqrt.f64 t) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sqrt.f64 t) (/.f64 x (*.f64 -27 y))) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) 3/2) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (cbrt.f64 (/.f64 3/2 z))) (pow.f64 (cbrt.f64 (*.f64 z 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (sqrt.f64 (/.f64 t 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y 27)) (*.f64 (sqrt.f64 t) (/.f64 3/2 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (/.f64 3/2 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y 27)) (*.f64 (/.f64 3/2 z) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) z)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 t) (/.f64 x (*.f64 -27 y))) (neg.f64 (/.f64 3/2 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) 3/2) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (neg.f64 x)) (*.f64 (*.f64 -27 y) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (cbrt.f64 2/3))) (cbrt.f64 4/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 x (*.f64 -27 y)) z)) -2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (/.f64 (*.f64 x 1/27) (*.f64 2/3 y))) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) x) (*.f64 (*.f64 y 27) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (/.f64 x y)) (*.f64 27 (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x 1/27) (*.f64 2/3 y)) (sqrt.f64 t)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) 3/2)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) z))) -2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (cbrt.f64 (/.f64 3/2 z)))) (neg.f64 (cbrt.f64 (*.f64 (*.f64 z z) 4/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (*.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) z)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (/.f64 x (*.f64 -27 y))) (*.f64 -2/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (cbrt.f64 (/.f64 3/2 z))) (cbrt.f64 (*.f64 (*.f64 z z) 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 (/.f64 3/2 z))) (sqrt.f64 t)) (cbrt.f64 (*.f64 (*.f64 z z) 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) -1) (*.f64 -2/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (neg.f64 (/.f64 (*.f64 x 3/2) z))) (*.f64 -27 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (/.f64 (*.f64 x 3/2) z)) (*.f64 y 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 (/.f64 x (*.f64 y 27)) z) (sqrt.f64 2/3))) (sqrt.f64 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 x y) (*.f64 z 2/3))) 27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sqrt.f64 t) (*.f64 (/.f64 x (*.f64 y 27)) (cbrt.f64 (/.f64 3/2 z)))) (cbrt.f64 (*.f64 (*.f64 z z) 4/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 t (pow.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) 2))) (cbrt.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)))) (cbrt.f64 (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sqrt.f64 t) (/.f64 x (*.f64 -27 y))) (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (/.f64 (*.f64 (sqrt.f64 t) (/.f64 x (*.f64 -27 y))) (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 -2/3 z)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x (*.f64 -27 y)) (*.f64 (/.f64 3/2 z) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 t) (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 -2/3 z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (/.f64 x (*.f64 y 27)) (sqrt.f64 t)) (*.f64 -2/3 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)) 3) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 1/2) (*.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 0) (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) (*.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (*.f64 1/2 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) (*.f64 0 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (cbrt.f64 (pow.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 2)) (cbrt.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/19683 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (cbrt.f64 (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (*.f64 (cbrt.f64 1/729) (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) (*.f64 (cbrt.f64 (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2)) 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 1/3) (cbrt.f64 1/729))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (sqrt.f64 1/27)) (sqrt.f64 1/27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/27) (*.f64 (sqrt.f64 1/27) (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 1/27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 27)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t)))) 3) 1))))))"]],"rules":[["egg-rr",31],["egg-rr",67],["egg-rr",107]],"time":39.7900390625,"type":"rewrite"},{"count":[[321,211]],"inputs":[["(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 1/18 x) (*.f64 y z))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))","(*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))","(*.f64 1/27 (acos.f64 (*.f64 1/18 (*.f64 (/.f64 x (*.f64 y z)) (sqrt.f64 t)))))","(*.f64 1/27 (acos.f64 (*.f64 (/.f64 (*.f64 1/18 x) (*.f64 y z)) (sqrt.f64 t))))"]],"time":338.984130859375,"type":"simplify"},{"compiler":[[18621,12968]],"time":195.98193359375,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (*.f64 (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (sqrt.f64 1/27)) (sqrt.f64 1/27))) (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2/3))","next",0]],"compiler":[[40,31],[40,31]],"count":[[514,1]],"kept":[{"done":[1,0],"fresh":[1,0],"new":[511,1],"picked":[1,0]}],"min-error":[0],"time":496.3310546875,"type":"prune"},{"compiler":[[166,114]],"locations":[["(*.f64 z 2/3)",0.3671875,true],["(/.f64 x (*.f64 y 27))",0.41290607011726244,false],["(*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))",2.18644673330373,false],["(/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3))",3.285026065858281,false]],"time":41.051025390625,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 z 2/3)","z","-inf",0.30908203125],["(*.f64 z 2/3)","z","inf",0.3310546875],["(*.f64 z 2/3)","z","0",0.324951171875]],"time":1.0068359375,"type":"series"},{"count":[[1,41]],"inputs":[["(*.f64 z 2/3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 -2/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z 2/3)) (pow.f64 (*.f64 z 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z 2/3) 2/3) (cbrt.f64 (*.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (cbrt.f64 2/3)) (cbrt.f64 4/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 4/9) (*.f64 z (cbrt.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 2/3) (pow.f64 (*.f64 z 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 z 2/3))) (pow.f64 (pow.f64 (*.f64 z 2/3) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 z)) (*.f64 (cbrt.f64 (pow.f64 z 2/3)) (*.f64 (pow.f64 z 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 z 2/3) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 z 2/3))) 4) (cbrt.f64 (*.f64 z 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8/27 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 2/3) (cbrt.f64 (*.f64 8/27 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 z 2/3) 2/3) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -2/3 z)) (neg.f64 (pow.f64 (*.f64 z 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 2/3)) (*.f64 (cbrt.f64 (cbrt.f64 4/9)) (*.f64 (cbrt.f64 4/9) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 2/3)) (*.f64 (sqrt.f64 (sqrt.f64 2/3)) (*.f64 z (sqrt.f64 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 2/3)) (*.f64 (neg.f64 (sqrt.f64 2/3)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2/3) (*.f64 z (sqrt.f64 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2/3 z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2/3) (*.f64 (cbrt.f64 4/9) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 4/9) z) (cbrt.f64 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2/3) (*.f64 (cbrt.f64 z) (pow.f64 (*.f64 z 2/3) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2/3)) (*.f64 (cbrt.f64 (sqrt.f64 2/3)) (*.f64 (cbrt.f64 4/9) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 2/3)) (*.f64 (cbrt.f64 2/3) (*.f64 z (sqrt.f64 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (sqrt.f64 2/3)) (sqrt.f64 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 -2/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -2/3 z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 z 2/3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -2/3 z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z 2/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -2/3 z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z 2/3) 3))))))"]],"rules":[["egg-rr",41]],"time":34.59521484375,"type":"rewrite"},{"count":[[53,41]],"inputs":[["(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)","(*.f64 2/3 z)"]],"time":64.489990234375,"type":"simplify"},{"compiler":[[22576,16448]],"time":241.27294921875,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (*.f64 (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (sqrt.f64 1/27)) (sqrt.f64 1/27))) (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2/3))","done",0]],"compiler":[[40,31]],"count":[[561,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[560,0],"picked":[1,1]}],"min-error":[0],"time":564.77490234375,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["z",0,1],["t",0,1],["(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 t))))",0,1],["(acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 t)))",0,1],["(*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 t))",0,1],["(/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2))",0,1],["(*.f64 3 (/.f64 x (*.f64 y 27)))",0,1],["(/.f64 x (*.f64 y 27))",0,1],["(*.f64 y 27)",0,1],["(*.f64 z 2)",0,1],["(sqrt.f64 t)",0,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[23,19],[19,15],[18,14],[15,12],[11,9],[9,7],[7,6],[7,6],[6,5],[124,90]],"count":[[5,1]],"inputs":[["(*.f64 (cbrt.f64 (*.f64 (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (sqrt.f64 1/27)) (sqrt.f64 1/27))) (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2/3))","(*.f64 (cbrt.f64 (*.f64 1/27 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2/3))","(pow.f64 (cbrt.f64 (*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))))) 3)","(*.f64 1/3 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (/.f64 z 3/2)) (sqrt.f64 t))))","(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 t))))"]],"link":["."],"name":["Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, D"],"oracle":[0.98828125],"outputs":[["(*.f64 (cbrt.f64 (*.f64 (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (sqrt.f64 1/27)) (sqrt.f64 1/27))) (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2/3))"]],"time":41.591064453125,"times":[["x",3.1279296875],["y",3.06591796875],["z",3.14794921875],["t",3.051025390625],["(*.f64 (/.f64 1 3) (acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 t))))",1.98388671875],["(acos.f64 (*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 t)))",1.906005859375],["(*.f64 (/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2)) (sqrt.f64 t))",2.716064453125],["(/.f64 (*.f64 3 (/.f64 x (*.f64 y 27))) (*.f64 z 2))",4.43310546875],["(*.f64 3 (/.f64 x (*.f64 y 27)))",2.947998046875],["(/.f64 x (*.f64 y 27))",2.867919921875],["(*.f64 y 27)",3.14208984375],["(*.f64 z 2)",3.23095703125],["(sqrt.f64 t)",3.10009765625]],"type":"regimes"},{"compiler":[[40,31]],"inputs":[["(*.f64 (cbrt.f64 (*.f64 (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (sqrt.f64 1/27)) (sqrt.f64 1/27))) (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2/3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cbrt.f64 (*.f64 (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) (sqrt.f64 1/27)) (sqrt.f64 1/27))) (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2/3))","(*.f64 (cbrt.f64 (*.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 1/27)) (pow.f64 (acos.f64 (*.f64 (/.f64 (/.f64 x (*.f64 y 27)) (*.f64 z 2/3)) (sqrt.f64 t))) 2/3))"]],"stop":[["done",1]],"time":23.572021484375,"type":"simplify"},{"time":0.016845703125,"type":"soundness"},{"compiler":[[40,31]],"remove-preprocessing":[[]],"time":15.821044921875,"type":"end"}]
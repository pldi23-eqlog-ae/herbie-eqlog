[{"compiler":[[14,11]],"method":["search"],"sampling":[[12,0.7024385221302509,0.10536577831953764,0.19219569955021143],[11,0.6868287771940231,0.13463405007496476,0.1785371727310121],[10,0.6556092873215675,0.20292668417096138,0.14146402850747108],[9,0.6243897974491119,0.2575607914477587,0.11804941110312939],[8,0.5619508177042007,0.37463387846946716,0.06341530382633209],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":30.8330078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",26.6572265625,636],["body",256,"valid",361.78076171875,8256]],"time":397.131103515625,"type":"sample"},{"compiler":[[13,10]],"inputs":[["0","1"],["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(/.f64 (*.f64 (-.f64 1 y) (-.f64 3 y)) (*.f64 x 3))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(/.f64 (*.f64 (-.f64 1 y) (-.f64 3 y)) (*.f64 x 3))","(/.f64 (*.f64 (*.f64 (-.f64 1 y) (-.f64 3 y)) 1/3) x)"]],"symmetry":[[]],"time":62.218994140625,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x)) y)"]],"time":20.06787109375,"type":"simplify"},{"compiler":[[24,18]],"time":0.43896484375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","fresh",6.41418824639842],["(/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x)) y)","next",6.123378759768443]],"compiler":[[13,10],[13,10],[13,10],[13,10]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[6.03125],"time":2.761962890625,"type":"prune"},{"compiler":[[38,28]],"locations":[["(*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x))",0.078125,true],["(*.f64 (-.f64 3 x) 1/3)",0.1328125,true],["(/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x)) y)",5.6316661810864765,true]],"time":8.863037109375,"type":"localize"},{"count":[[3,48]],"series":[["(*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x))","x","-inf",0.2041015625],["(*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x))","x","inf",0.197998046875],["(*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x))","x","0",0.23388671875],["(*.f64 (-.f64 3 x) 1/3)","x","-inf",0.205810546875],["(*.f64 (-.f64 3 x) 1/3)","x","inf",0.258056640625],["(*.f64 (-.f64 3 x) 1/3)","x","0",0.5],["(/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x)) y)","y","-inf",0.2900390625],["(/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x)) y)","y","inf",0.48388671875],["(/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x)) y)","y","0",0.64892578125],["(/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x)) y)","x","-inf",0.467041015625],["(/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x)) y)","x","inf",0.4609375],["(/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x)) y)","x","0",0.5341796875]],"time":4.66796875,"type":"series"},{"count":[[3,263]],"inputs":[["(/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x)) y)","(*.f64 (-.f64 3 x) 1/3)","(*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 0) (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) y) (*.f64 (/.f64 1 y) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y)) (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) (*.f64 0 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) y) (*.f64 (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 3 x) (/.f64 (*.f64 1/3 (-.f64 1 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 2)) (cbrt.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (cbrt.f64 y)) (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) 1/3) (/.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 y)) (/.f64 (-.f64 1 x) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (cbrt.f64 y)) (/.f64 (*.f64 1/3 (-.f64 1 x)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/3 (-.f64 1 x)) y) (-.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/3 (-.f64 1 x)) (cbrt.f64 (*.f64 y y))) (/.f64 (-.f64 3 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 (*.f64 y y))) (/.f64 (-.f64 1 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) y) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 2)) y) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (cbrt.f64 (*.f64 y y))) (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) y) (*.f64 (-.f64 3 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 (*.f64 y y))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (/.f64 y 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3)))) (*.f64 (cbrt.f64 (*.f64 y y)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x)))) (*.f64 (cbrt.f64 (*.f64 y y)) (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3))) (*.f64 y (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x))) (*.f64 y (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3)))) (*.f64 (neg.f64 y) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x)))) (*.f64 (neg.f64 y) (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x))) 1) (*.f64 (fma.f64 x (+.f64 3 x) 9) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x))) -1) (*.f64 (fma.f64 x (+.f64 3 x) 9) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x))) (pow.f64 y -1/3)) (*.f64 (fma.f64 x (+.f64 3 x) 9) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 3 x) (cbrt.f64 y)) (*.f64 1/3 (-.f64 1 x))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) (cbrt.f64 y)) (*.f64 (-.f64 3 x) 1/3)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 y)) (-.f64 1 x)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 2)) (cbrt.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 2)) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3)))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x)))) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (/.f64 (-.f64 1 x) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) (/.f64 (-.f64 1 x) y)) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (/.f64 (*.f64 1/3 (-.f64 1 x)) y)) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3) 27) (/.f64 (*.f64 1/3 (-.f64 1 x)) y)) (neg.f64 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 3 x) (/.f64 (*.f64 1/3 (-.f64 1 x)) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 (*.f64 (-.f64 3 x) 1/3) y)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3))) (/.f64 1 y)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x))) (/.f64 1 y)) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3))) 1) (*.f64 (fma.f64 x x (+.f64 1 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3))) -1) (*.f64 (fma.f64 x x (+.f64 1 x)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3))) (pow.f64 y -1/3)) (*.f64 (fma.f64 x x (+.f64 1 x)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (/.f64 (*.f64 1/3 (-.f64 1 x)) y)) (+.f64 9 (*.f64 (neg.f64 x) (-.f64 (neg.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 (*.f64 (-.f64 3 x) 1/3) y)) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 x -3) 1/3) (/.f64 (-.f64 1 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x -3) (/.f64 (*.f64 1/3 (-.f64 1 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x -1) (/.f64 (*.f64 (-.f64 3 x) 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 y) (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (-.f64 3 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) 0) (*.f64 (-.f64 3 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 3 x) 1/3) (*.f64 (*.f64 (-.f64 3 x) 1/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (-.f64 3 x) 1/3)) (*.f64 (-.f64 3 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 3 x) 1/3) (*.f64 0 (*.f64 (-.f64 3 x) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (neg.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (*.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (neg.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (neg.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 x -3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 1/9) (-.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2)) (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/27 (-.f64 3 x))) (cbrt.f64 (pow.f64 (-.f64 3 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) (cbrt.f64 1/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 3 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (*.f64 (-.f64 3 x) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 3 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (-.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 3 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 x -3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) (cbrt.f64 (*.f64 1/27 (-.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 1/9) (-.f64 3 x)) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -3) 1/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/9) (*.f64 (-.f64 3 x) (cbrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) 1/3) (cbrt.f64 (-.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (+.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 3 x) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (-.f64 (pow.f64 x 3) 27)) (neg.f64 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 3 x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 27 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) 1/3)) (cbrt.f64 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3) 27) 1/3) (neg.f64 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x (+.f64 3 x) 9))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 3 x) 9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 3)) (/.f64 (fma.f64 x (+.f64 3 x) 9) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (neg.f64 (*.f64 x 1/3)) 3)) (+.f64 1 (-.f64 (*.f64 (neg.f64 (*.f64 x 1/3)) (neg.f64 (*.f64 x 1/3))) (neg.f64 (*.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 (fma.f64 x (+.f64 3 x) 9) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3) 27) 1) (*.f64 (neg.f64 (fma.f64 x (+.f64 3 x) 9)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 (+.f64 9 (*.f64 (neg.f64 x) (-.f64 (neg.f64 x) 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) 27) (*.f64 3 (neg.f64 (fma.f64 x (+.f64 3 x) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 3 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 3 (+.f64 9 (*.f64 (neg.f64 x) (-.f64 (neg.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x -3) 1/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3)))) (neg.f64 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) (+.f64 9 (*.f64 (neg.f64 x) (-.f64 (neg.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 3 x) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x -3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 3 (neg.f64 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 1/3 (neg.f64 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (neg.f64 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (neg.f64 (*.f64 x 1/3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 3 x) 1/3) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))) (*.f64 (-.f64 3 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/3 (-.f64 1 x)) 3) (*.f64 (*.f64 1/3 (-.f64 1 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/3 (-.f64 1 x)) (neg.f64 x)) (*.f64 (*.f64 1/3 (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 0) (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (*.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 x) (*.f64 (-.f64 1 x) (neg.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 3 x) 1/3) (*.f64 (-.f64 3 x) (neg.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 (*.f64 1/3 (-.f64 1 x))) (*.f64 (neg.f64 x) (*.f64 1/3 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 x) (*.f64 1/3 (-.f64 1 x))) (*.f64 3 (*.f64 1/3 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)) (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (*.f64 0 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 x) (*.f64 (neg.f64 (*.f64 x 1/3)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 3 x) 1/3) (*.f64 (neg.f64 (*.f64 x 1/3)) (-.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 3 x) 1/3) (*.f64 (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 (neg.f64 (*.f64 x 1/3)) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (*.f64 (-.f64 3 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 3 x) (*.f64 1/3 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)) (cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (-.f64 1 x)) (-.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 2)) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (*.f64 (-.f64 3 x) 1/3))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (-.f64 3 x) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 3 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) (*.f64 1/3 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (-.f64 3 x) 1/3)) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2)) (-.f64 1 x)) (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2)) (*.f64 (-.f64 1 x) (cbrt.f64 (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) (*.f64 1/3 (-.f64 1 x))) (cbrt.f64 (-.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -3) 1/3) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (*.f64 (+.f64 x -3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -3) (*.f64 -1/3 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x))) (/.f64 1 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x))) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (*.f64 1/3 (-.f64 27 (pow.f64 x 3)))) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 3 x) (*.f64 1/3 (-.f64 1 (pow.f64 x 3)))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 1 x)) (-.f64 (pow.f64 x 3) 27)) (neg.f64 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) (-.f64 1 x)) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 1 (pow.f64 x 3))) (-.f64 3 x)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 27 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) (*.f64 1/3 (-.f64 1 x)))) (cbrt.f64 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3) 27) (*.f64 1/3 (-.f64 1 x))) (neg.f64 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x))) 1) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 1/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x))) (cbrt.f64 (fma.f64 x (+.f64 3 x) 9))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 3 x) 9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x))) 1) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 (pow.f64 x 3)))) (*.f64 (fma.f64 x (+.f64 3 x) 9) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3) 27) (*.f64 1/3 (-.f64 1 (pow.f64 x 3)))) (*.f64 (neg.f64 (fma.f64 x (+.f64 3 x) 9)) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 (pow.f64 x 3)))) (*.f64 (+.f64 9 (*.f64 (neg.f64 x) (-.f64 (neg.f64 x) 3))) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) (-.f64 1 (pow.f64 x 3))) (*.f64 (fma.f64 x (+.f64 3 x) 9) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) (+.f64 -1 (pow.f64 x 3))) (*.f64 (fma.f64 x (+.f64 3 x) 9) (neg.f64 (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 1 (pow.f64 x 3))) (-.f64 (pow.f64 x 3) 27)) (*.f64 (fma.f64 x x (+.f64 1 x)) (neg.f64 (fma.f64 x (+.f64 3 x) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 1 (pow.f64 x 3))) (-.f64 27 (pow.f64 x 3))) (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 1 (pow.f64 x 3))) (-.f64 27 (pow.f64 x 3))) (*.f64 (fma.f64 x x (+.f64 1 x)) (+.f64 9 (*.f64 (neg.f64 x) (-.f64 (neg.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 1/3 (-.f64 27 (pow.f64 x 3)))) (*.f64 (fma.f64 x x (+.f64 1 x)) (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (*.f64 1/3 (-.f64 27 (pow.f64 x 3)))) (*.f64 (neg.f64 (fma.f64 x x (+.f64 1 x))) (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x)))) (neg.f64 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 1/3 (-.f64 1 x))) (+.f64 9 (*.f64 (neg.f64 x) (-.f64 (neg.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 -1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (-.f64 3 x) 1/3))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (*.f64 (-.f64 3 x) 1/3)) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 (pow.f64 x 3)))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 3 x) (*.f64 -1/3 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/27 (-.f64 3 x))) (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 1/9) (-.f64 3 x)) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2)) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 3 x) (sqrt.f64 1/3)) (sqrt.f64 1/3) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/3) (*.f64 (-.f64 3 x) (sqrt.f64 1/3)) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 3 x) 1/3 (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (+.f64 x -3) 1/3) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 3 x) (cbrt.f64 1/3)) (cbrt.f64 1/9) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2)) (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 3 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) 1/3) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (-.f64 3 x) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 3 x) 1/3) 1 (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (-.f64 3 x) 1/3) (neg.f64 (*.f64 x (*.f64 (-.f64 3 x) 1/3))))))))"]],"rules":[["egg-rr",103],["egg-rr",66],["egg-rr",94]],"time":41.715087890625,"type":"rewrite"},{"count":[[311,286]],"inputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","1","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","1","(+.f64 1 (*.f64 -4/3 x))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(*.f64 1/3 (pow.f64 x 2))","(+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(*.f64 1/3 (pow.f64 x 2))","(+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(/.f64 (fma.f64 -4/3 x 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3))) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3))) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 x x) (*.f64 y 3))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(/.f64 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3)) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3))) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3))) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 x x) (*.f64 y 3))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(/.f64 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3)) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3))) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))","1","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","1","(+.f64 1 (*.f64 -4/3 x))","(fma.f64 -4/3 x 1)","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3)))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3)))","(*.f64 1/3 (pow.f64 x 2))","(*.f64 (*.f64 1/3 x) x)","(+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2)))","(*.f64 x (+.f64 (*.f64 1/3 x) -4/3))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3)))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3)))","(*.f64 1/3 (pow.f64 x 2))","(*.f64 (*.f64 1/3 x) x)","(+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2)))","(*.f64 x (+.f64 (*.f64 1/3 x) -4/3))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3)))","(+.f64 1 (+.f64 (*.f64 -4/3 x) (*.f64 1/3 (pow.f64 x 2))))","(+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3)))"]],"time":186.583984375,"type":"simplify"},{"compiler":[[5066,3742]],"time":65.91015625,"type":"eval"},{"alts":[["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) y))","next",0.12957001953688405],["(/.f64 (+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3))) y)","fresh",6.11328125],["(/.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 3) y)","fresh",6.115566259768443],["(/.f64 (*.f64 (/.f64 (-.f64 3 x) 3) (-.f64 1 x)) y)","fresh",6.09765625],["(*.f64 (*.f64 (-.f64 3 x) 1/3) (/.f64 (-.f64 1 x) y))","fresh",0.16082001953688405]],"compiler":[[13,10],[13,10],[13,10],[13,10],[13,10],[13,10],[13,10],[13,10],[13,10],[13,10]],"count":[[288,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[286,5],"picked":[1,0]}],"min-error":[0.021816259768442016],"time":108.8818359375,"type":"prune"},{"compiler":[[36,26]],"locations":[["(/.f64 (*.f64 (-.f64 3 x) 1/3) y)",0.10546875,true],["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) y))",0.12890625,true],["(*.f64 (-.f64 3 x) 1/3)",0.1328125,false]],"time":8.6259765625,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 (*.f64 (-.f64 3 x) 1/3) y)","y","-inf",0.27294921875],["(/.f64 (*.f64 (-.f64 3 x) 1/3) y)","y","inf",0.43896484375],["(/.f64 (*.f64 (-.f64 3 x) 1/3) y)","y","0",0.4599609375],["(/.f64 (*.f64 (-.f64 3 x) 1/3) y)","x","-inf",0.3359375],["(/.f64 (*.f64 (-.f64 3 x) 1/3) y)","x","inf",0.35107421875],["(/.f64 (*.f64 (-.f64 3 x) 1/3) y)","x","0",0.4072265625],["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) y))","y","-inf",0.204833984375],["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) y))","y","inf",0.1689453125],["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) y))","y","0",0.179931640625],["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) y))","x","-inf",0.18701171875],["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) y))","x","inf",0.199951171875],["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) y))","x","0",0.252197265625]],"time":3.6181640625,"type":"series"},{"count":[[2,217]],"inputs":[["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) y))","(/.f64 (*.f64 (-.f64 3 x) 1/3) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)) (/.f64 (-.f64 3 x) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) (*.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) 0) (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (*.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) (*.f64 0 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3))) (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 y) (-.f64 (/.f64 x (*.f64 y 3)) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 x -1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) 2)) (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (cbrt.f64 y)) (/.f64 (-.f64 3 x) (cbrt.f64 (/.f64 (*.f64 y y) 1/27))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 (-.f64 3 x) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (/.f64 (-.f64 3 x) (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) 1/3) (/.f64 (-.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 x -1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (-.f64 1 x)) (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) y) (*.f64 (-.f64 3 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (*.f64 (-.f64 1 x) (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (/.f64 (-.f64 3 x) (*.f64 y 3))) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (cbrt.f64 (/.f64 (*.f64 y y) 1/27))) (/.f64 (-.f64 1 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 x -1)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (neg.f64 y)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (*.f64 y -3)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (/.f64 (-.f64 3 x) (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 3 x) 1/3)) (/.f64 1 (*.f64 y (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) (-.f64 1 (pow.f64 x 3))) (/.f64 1 (*.f64 (*.f64 y 3) (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 -1/3 (-.f64 3 x)) (-.f64 1 (pow.f64 x 3))) (/.f64 1 (*.f64 (neg.f64 y) (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 x -1)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (-.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -1/3 (-.f64 3 x)) (-.f64 1 (pow.f64 x 3))) (*.f64 (neg.f64 y) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 3 x) 1/3)) (*.f64 y (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 3 x) (-.f64 1 (pow.f64 x 3))) (*.f64 (*.f64 y 3) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 -1/3 (-.f64 3 x)) (-.f64 1 (pow.f64 x 3))) 1) (*.f64 (neg.f64 y) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 3 x) 1/3)) 1) (*.f64 y (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 3 x) (-.f64 1 (pow.f64 x 3))) 1) (*.f64 (*.f64 y 3) (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x -3) (-.f64 1 x)) (*.f64 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 3 x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (-.f64 1 x))) (cbrt.f64 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (cbrt.f64 y)) (cbrt.f64 (/.f64 (*.f64 y y) 1/27)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (cbrt.f64 (*.f64 y 3))) (pow.f64 (cbrt.f64 (*.f64 y 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (cbrt.f64 3)) (/.f64 y (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (sqrt.f64 3)) (*.f64 y (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 (cbrt.f64 y) (sqrt.f64 3))) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (-.f64 1 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x x (+.f64 1 x)))) (pow.f64 (cbrt.f64 (fma.f64 x x (+.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 1 x) (-.f64 3 x))) (*.f64 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 3 x) (-.f64 1 (pow.f64 x 3)))) (neg.f64 (*.f64 (*.f64 y 3) (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 3 x) 1/3)) (neg.f64 (*.f64 (neg.f64 y) (fma.f64 x x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 x -1)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (-.f64 1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) 2)) (cbrt.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 1 x) (cbrt.f64 y)) (*.f64 (-.f64 3 x) 1/3)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (/.f64 (-.f64 3 x) (cbrt.f64 (/.f64 (*.f64 y y) 1/27)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (-.f64 3 x) 1/3)) (/.f64 1 y)) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 x -1)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1) (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 y)) (-.f64 1 x)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) (/.f64 (-.f64 1 x) y)) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/3 (-.f64 3 x))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (-.f64 1 x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (-.f64 1 x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1) (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (cbrt.f64 (*.f64 y 3))) (cbrt.f64 (/.f64 (*.f64 y y) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (-.f64 1 (pow.f64 x 3))) 1) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 x -1)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 x -1)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 1/3) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (+.f64 -1 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (/.f64 (-.f64 3 x) (*.f64 y 3)))) (cbrt.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) (/.f64 (-.f64 3 x) (*.f64 y 3))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (-.f64 1 (pow.f64 x 3)))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 x -1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 x -1)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (+.f64 x -1)) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y -3)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 -1/3 (-.f64 3 x)) (/.f64 (-.f64 1 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 x) (/.f64 (-.f64 3 x) (*.f64 y -3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (-.f64 1 x) (+.f64 x -3)) (*.f64 y -3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (/.f64 (-.f64 3 x) y) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (*.f64 (-.f64 3 x) 1/3) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (-.f64 3 x) (*.f64 y -3)) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 3 x) (/.f64 1/3 y) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/27 y)) (/.f64 (-.f64 3 x) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2)) y) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y -1/3) (/.f64 (-.f64 3 x) (cbrt.f64 (/.f64 (*.f64 y y) 1/27))) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/3 (-.f64 3 x)) (/.f64 -1 y) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 3 x) y) 1/3 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2) (*.f64 y y))) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 3 x) 1/3) (/.f64 1 y) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 3 x) (cbrt.f64 y)) (cbrt.f64 (/.f64 1/27 (*.f64 y y))) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (-.f64 3 x) (*.f64 y 3)) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 1 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 y) (*.f64 (/.f64 1 y) (neg.f64 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 0) (/.f64 (-.f64 3 x) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 y) (*.f64 (neg.f64 (*.f64 x 1/3)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (*.f64 0 (/.f64 (-.f64 3 x) (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (-.f64 3 x) (*.f64 y 3))) (/.f64 (-.f64 3 x) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 y) (neg.f64 (/.f64 x (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 y) (/.f64 x (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (-.f64 3 x) (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (*.f64 y -3)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 y 3)) (/.f64 (-.f64 3 x) (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 27 (fma.f64 x (+.f64 3 x) 9)) (*.f64 y 3)) (/.f64 (/.f64 (pow.f64 x 3) (fma.f64 x (+.f64 3 x) 9)) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (-.f64 3 x) (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (cbrt.f64 y)) (cbrt.f64 (/.f64 1/27 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 3 x) (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/27 y)) (/.f64 (-.f64 3 x) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 (-.f64 3 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) 1/3) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (-.f64 3 x) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/3 (-.f64 3 x)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (-.f64 3 x) (cbrt.f64 (/.f64 (*.f64 y y) 1/27))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 3 x) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (-.f64 3 x) (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (*.f64 y -3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 y) (-.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (/.f64 1/27 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2)) y) (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (cbrt.f64 (/.f64 (*.f64 y y) 1/27))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (*.f64 -1/3 (-.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2) (*.f64 y y))) (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/27 (*.f64 y y))) (/.f64 (-.f64 3 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (neg.f64 y)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -3) (/.f64 1 (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (cbrt.f64 (-.f64 3 x))) (cbrt.f64 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 3 x)) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2) (*.f64 y y)))) (cbrt.f64 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 3 x)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2))) (cbrt.f64 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 x) (cbrt.f64 y)) (cbrt.f64 (/.f64 (*.f64 y y) 1/27)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 x) (cbrt.f64 (*.f64 y 3))) (pow.f64 (cbrt.f64 (*.f64 y 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 x) (cbrt.f64 3)) (/.f64 y (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 x) (sqrt.f64 3)) (*.f64 y (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 x) (*.f64 (cbrt.f64 y) (sqrt.f64 3))) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 3 (*.f64 y 3)) (*.f64 (*.f64 y 3) x)) (*.f64 (*.f64 y 3) (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 3 x) (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/3 (-.f64 3 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 3 x) 1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x -3) (*.f64 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 3 x) y) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (*.f64 1/3 (-.f64 27 (pow.f64 x 3)))) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (*.f64 (-.f64 3 x) 1/3)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (cbrt.f64 (*.f64 -1/3 (-.f64 3 x)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2)) (cbrt.f64 (*.f64 (-.f64 3 x) 1/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (-.f64 3 x) (cbrt.f64 y)) 1/3) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))) (cbrt.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/27 y)) (-.f64 3 x)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (/.f64 (-.f64 3 x) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 x) (cbrt.f64 (/.f64 (*.f64 y y) 1/27))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3) 27) (/.f64 1/3 y)) (neg.f64 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (/.f64 1/3 y)) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 x) y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 1/3 (-.f64 27 (pow.f64 x 3))) (/.f64 1 y)) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 3 x) (cbrt.f64 (/.f64 1/27 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/3 (-.f64 3 x))) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2) (*.f64 y y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 -1/3 (-.f64 3 x))) (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (-.f64 3 x) 1/3) 2) (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (-.f64 3 x) 1/3)) (cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 x) (cbrt.f64 (*.f64 y 3))) (cbrt.f64 (/.f64 (*.f64 y y) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/3 (-.f64 3 x)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (-.f64 3 x) 1/3) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) (/.f64 1/3 y)) (+.f64 9 (*.f64 (neg.f64 x) (-.f64 (neg.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 3 x) (*.f64 y 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 3 x) (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (-.f64 3 x) (*.f64 y -3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 -1/3 (-.f64 3 x)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 y) (*.f64 -1/3 (-.f64 3 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) 3))))))"]],"rules":[["egg-rr",92],["egg-rr",125]],"time":37.177978515625,"type":"rewrite"},{"count":[[265,233]],"inputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 1 y)","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(*.f64 -1/3 (/.f64 x y))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(*.f64 -1/3 (/.f64 x y))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(/.f64 (+.f64 (*.f64 -4/3 x) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x))) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x))) 1) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 1/3 (*.f64 x x)) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(/.f64 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x))) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x))) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x))) 1) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 1/3 (*.f64 x x)) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(/.f64 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x))) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x))) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x))) 1) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 1/3 (*.f64 (-.f64 1 x) (-.f64 3 x))) y)","(/.f64 1 y)","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 -1/3 (/.f64 x y))","(/.f64 (*.f64 -1/3 x) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 -1/3 (/.f64 x y))","(/.f64 (*.f64 -1/3 x) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (*.f64 1/3 (-.f64 3 x)) y)"]],"time":180.60888671875,"type":"simplify"},{"compiler":[[5219,3774]],"time":67.635009765625,"type":"eval"},{"alts":[["(*.f64 (*.f64 (-.f64 3 x) 1/3) (/.f64 (-.f64 1 x) y))","fresh",0.16082001953688405],["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (*.f64 (cbrt.f64 1/9) (-.f64 3 x)) (cbrt.f64 1/3)) y))","fresh",0.557636279305326],["(*.f64 (-.f64 1 x) (+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y))))","fresh",0.16472626953688402],["(/.f64 (*.f64 (/.f64 (-.f64 3 x) 3) (-.f64 1 x)) y)","fresh",6.09765625],["(-.f64 (/.f64 1 y) (-.f64 (/.f64 x (*.f64 y 3)) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x))))","fresh",0.22559436266242372],["(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))","next",0.14453125]],"compiler":[[13,10],[17,14],[15,11],[13,10],[22,16],[13,10],[13,10],[17,14],[15,11],[13,10],[22,16],[13,10]],"count":[[308,6]],"kept":[{"done":[0,0],"fresh":[4,1],"new":[303,5],"picked":[1,0]}],"min-error":[0.0078125],"time":126.946044921875,"type":"prune"},{"compiler":[[35,25]],"locations":[["(/.f64 (-.f64 3 x) 3)",0.01171875,true],["(/.f64 (/.f64 (-.f64 3 x) 3) y)",0.10546875,true],["(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))",0.12890625,true]],"time":8.4169921875,"type":"localize"},{"count":[[3,60]],"series":[["(/.f64 (-.f64 3 x) 3)","x","-inf",0.155029296875],["(/.f64 (-.f64 3 x) 3)","x","inf",0.136962890625],["(/.f64 (-.f64 3 x) 3)","x","0",0.135986328125],["(/.f64 (/.f64 (-.f64 3 x) 3) y)","y","-inf",0.159912109375],["(/.f64 (/.f64 (-.f64 3 x) 3) y)","y","inf",0.142822265625],["(/.f64 (/.f64 (-.f64 3 x) 3) y)","y","0",0.162109375],["(/.f64 (/.f64 (-.f64 3 x) 3) y)","x","-inf",0.1689453125],["(/.f64 (/.f64 (-.f64 3 x) 3) y)","x","inf",0.14892578125],["(/.f64 (/.f64 (-.f64 3 x) 3) y)","x","0",0.18310546875],["(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))","y","-inf",0.157958984375],["(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))","y","inf",0.159912109375],["(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))","y","0",0.389892578125],["(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))","x","-inf",0.840087890625],["(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))","x","inf",0.18798828125],["(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))","x","0",0.234130859375]],"time":3.555908203125,"type":"series"},{"count":[[3,275]],"inputs":[["(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))","(/.f64 (/.f64 (-.f64 3 x) 3) y)","(/.f64 (-.f64 3 x) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)) (/.f64 (*.f64 (+.f64 -3 x) -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y) (*.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y) 0) (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (*.f64 (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y) (*.f64 0 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y)) (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 y) (-.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 x -1) (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1))) (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (+.f64 -3 x) -1/3)) (/.f64 1 (*.f64 (fma.f64 x x (+.f64 1 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 2)) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 x) (cbrt.f64 y)) (/.f64 (*.f64 (+.f64 -3 x) -1/3) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 x) (/.f64 (*.f64 (+.f64 -3 x) -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (cbrt.f64 (-.f64 1 x))) (cbrt.f64 (pow.f64 (-.f64 1 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -3 x) -1/3) (*.f64 (/.f64 1 y) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (-.f64 1 x)) (*.f64 (+.f64 -3 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 2)) (*.f64 (-.f64 1 x) (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 2)) (-.f64 1 x)) (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) (cbrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) (cbrt.f64 (*.f64 y y))) (/.f64 (-.f64 1 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 1 x) 2)) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 3 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y)) 9) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) (*.f64 3 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x 1/3 -1) y) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1) (/.f64 (fma.f64 x 1/3 -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (fma.f64 x 1/3 -1)) (/.f64 1 (*.f64 (fma.f64 x x (+.f64 1 x)) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 x) (fma.f64 x 1/3 -1)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 x -1) (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x -1) (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (-.f64 1 (pow.f64 x 3))) (/.f64 1 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (fma.f64 x 1/3 -1)) (*.f64 (fma.f64 x x (+.f64 1 x)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (+.f64 -3 x) -1/3)) (*.f64 (fma.f64 x x (+.f64 1 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 x 3)) (*.f64 (+.f64 -3 x) -1/3)) (neg.f64 (*.f64 (fma.f64 x x (+.f64 1 x)) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (fma.f64 x 1/3 -1)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1))) (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 3 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)))) (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 3 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (-.f64 1 (pow.f64 x 3))) (fma.f64 x x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (-.f64 1 (pow.f64 x 3)))) (neg.f64 (fma.f64 x x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 x -1) (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (-.f64 1 x) (fma.f64 x 1/3 -1)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 x 1/3 -1) y) (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (+.f64 x -1) (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 x 1/3 -1) (*.f64 (/.f64 1 y) (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 1 x) (/.f64 (fma.f64 x 1/3 -1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (-.f64 1 x) (fma.f64 x 1/3 -1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 x -1) (fma.f64 x 1/3 -1)) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 -3 x) -1/3)) (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -1)) 2) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 3 x) (cbrt.f64 y)) (cbrt.f64 (/.f64 1/27 (*.f64 y y))) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y -1/3) (/.f64 (*.f64 (+.f64 -3 x) -1/3) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (+.f64 -3 x) -1/3) 2) (*.f64 y y))) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 2)) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 3 x) (/.f64 1/3 y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) (*.f64 (+.f64 -3 x) -1/3) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x 1/3 -1) (/.f64 -1 y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 -3 x) -1/3) (/.f64 1 y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 (fma.f64 x 1/3 -1) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 1 (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 y) (*.f64 (/.f64 1 y) (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 0) (/.f64 (*.f64 (+.f64 -3 x) -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 y) (*.f64 (*.f64 x -1/3) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (*.f64 0 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) (/.f64 (*.f64 (+.f64 -3 x) -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 y) (neg.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 y) (/.f64 (*.f64 x 1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (fma.f64 x 1/3 -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 27 (fma.f64 x (+.f64 3 x) 9)) (*.f64 3 y)) (/.f64 (/.f64 (pow.f64 x 3) (fma.f64 x (+.f64 3 x) 9)) (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 3 y)) (/.f64 (fma.f64 x 1/3 -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (fma.f64 x 1/3 -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 2)) (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (cbrt.f64 y)) (cbrt.f64 (/.f64 1/27 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 3 x) (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) (cbrt.f64 (/.f64 (pow.f64 (*.f64 (+.f64 -3 x) -1/3) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 -3 x) -1/3)) (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -1)) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -3 x) -1/3) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (+.f64 -3 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (*.f64 (+.f64 -3 x) -1/3) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 1/3 -1) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -1)) 2) y) (cbrt.f64 (*.f64 (+.f64 -3 x) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/27 (*.f64 y y))) (/.f64 (-.f64 3 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) (cbrt.f64 (*.f64 y y))) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (*.f64 (+.f64 -3 x) -1/3) 2) (*.f64 y y))) (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 y) (-.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (fma.f64 x 1/3 -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (-.f64 3 x) y) 9) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) (*.f64 3 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 -3 x) y) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -3 x) (/.f64 1 (*.f64 -3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (fma.f64 x 1/3 -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x 1/3 -1) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (+.f64 -3 x) y) 3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 y) (*.f64 (neg.f64 y) (*.f64 x 1/3))) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 y -1/3) y) (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 x 1/3))) (*.f64 (cbrt.f64 (*.f64 y y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -3 x) -1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -3 x) (*.f64 -3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 3 x) (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x 1/3 -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 3 x) y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 -3 x) y) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -3 x) (/.f64 (*.f64 -3 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -3 x) (/.f64 (neg.f64 y) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -3 x) (/.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y (*.f64 y (*.f64 x 1/3))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 x 1/3 -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (fma.f64 x 1/3 -1) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 -3 x) (/.f64 1/3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 x 1/3 -1) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 y) (fma.f64 x 1/3 -1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (/.f64 (*.f64 x 1/3) y) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y -1/3) (pow.f64 (pow.f64 y -1/3) 2) (neg.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 y -1/3)) (neg.f64 (pow.f64 (cbrt.f64 y) -2)) (neg.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 y -1/3) (pow.f64 (cbrt.f64 y) -2) (neg.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 -1 y) (neg.f64 (/.f64 (*.f64 x 1/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 y) (neg.f64 (/.f64 (*.f64 x 1/3) y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 -3 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 -3 x) -1/3) (*.f64 (*.f64 (+.f64 -3 x) -1/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 -3 x) -1/3) 0) (*.f64 (+.f64 -3 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 -3 x) -1/3) (*.f64 0 (*.f64 (+.f64 -3 x) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (+.f64 -3 x) -1/3)) (*.f64 (+.f64 -3 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 1/3 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (*.f64 x -1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (fma.f64 x 1/3 -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 27 (fma.f64 x (+.f64 3 x) 9)) 3) (/.f64 (/.f64 (pow.f64 x 3) (fma.f64 x (+.f64 3 x) 9)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 27 (*.f64 3 (fma.f64 x (+.f64 3 x) 9))) (/.f64 (pow.f64 x 3) (*.f64 3 (fma.f64 x (+.f64 3 x) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (*.f64 x 1/3) 2) (*.f64 x 1/3)))) (/.f64 (pow.f64 (*.f64 x 1/3) 3) (+.f64 1 (+.f64 (pow.f64 (*.f64 x 1/3) 2) (*.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (/.f64 (*.f64 x 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x -1/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 -3 x) -1/3)) (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -1)) 2) (cbrt.f64 (*.f64 (+.f64 -3 x) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 3 x)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (-.f64 3 x)) (sqrt.f64 1/3)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 -3 x) -1/3)) (cbrt.f64 (/.f64 (pow.f64 (-.f64 3 x) 2) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (*.f64 (-.f64 3 x) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (/.f64 (-.f64 3 x) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -3 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (-.f64 3 x) 2) 9)) (cbrt.f64 (*.f64 (+.f64 -3 x) -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) (sqrt.f64 1/3)) (*.f64 (cbrt.f64 (-.f64 3 x)) (sqrt.f64 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) (cbrt.f64 9)) (cbrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (-.f64 3 x) 2)) 1/3) (cbrt.f64 (-.f64 3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (+.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) -3) -3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) 27) 27)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 3 x) 9) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) 9) 9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 1/3 -1)) (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 x 1/3 -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (+.f64 -3 x)) (/.f64 1 -9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 3 x) (cbrt.f64 1/3)) (cbrt.f64 (/.f64 1 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 27 (pow.f64 x 3)) (/.f64 1 (*.f64 3 (fma.f64 x (+.f64 3 x) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (*.f64 x 1/3) 3)) (/.f64 1 (+.f64 1 (+.f64 (pow.f64 (*.f64 x 1/3) 2) (*.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) 1/3) (/.f64 1 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3 (-.f64 3 x)) (/.f64 1 9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 3 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (-.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 -3 x) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -3 x) -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (fma.f64 x 1/3 -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 1/3 -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) 1/3) (fma.f64 x (+.f64 3 x) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 3 x) (sqrt.f64 1/3)) (sqrt.f64 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 3 x) (cbrt.f64 1/3)) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 3 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (*.f64 x 1/3) 3)) (+.f64 1 (+.f64 (pow.f64 (*.f64 x 1/3) 2) (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (-.f64 3 x)) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (+.f64 -3 x)) -9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 3 x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -3 x) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 3)) (/.f64 (*.f64 3 (fma.f64 x (+.f64 3 x) 9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 3)) (/.f64 (fma.f64 x (+.f64 3 x) 9) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -27 (pow.f64 x 3)) (*.f64 -3 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3 (-.f64 27 (pow.f64 x 3))) (*.f64 3 (*.f64 3 (fma.f64 x (+.f64 3 x) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (pow.f64 x 3)) (*.f64 3 (+.f64 9 (*.f64 (neg.f64 x) (-.f64 (neg.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -27 (pow.f64 x 3)) (*.f64 3 (neg.f64 (fma.f64 x (+.f64 3 x) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 x -1/3) 3)) (+.f64 1 (-.f64 (*.f64 (*.f64 x -1/3) (*.f64 x -1/3)) (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 27 (sqrt.f64 3)) (*.f64 27 (*.f64 x (sqrt.f64 1/3)))) (*.f64 27 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 27 (cbrt.f64 9)) (*.f64 27 (*.f64 x (cbrt.f64 1/3)))) (*.f64 27 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 27 -3) (*.f64 27 (neg.f64 x))) (*.f64 27 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 81 (*.f64 27 x)) 81)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 27 3)) (sqrt.f64 3)) (*.f64 (cbrt.f64 9) (*.f64 x (sqrt.f64 1/3)))) (*.f64 (cbrt.f64 9) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 27 3)) (cbrt.f64 9)) (*.f64 (cbrt.f64 9) (*.f64 x (cbrt.f64 1/3)))) (cbrt.f64 81))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 27 3)) -3) (*.f64 (cbrt.f64 9) (neg.f64 x))) (*.f64 (cbrt.f64 9) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 (/.f64 27 3)) 3) (*.f64 (cbrt.f64 9) x)) (cbrt.f64 (*.f64 9 27)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 3) (sqrt.f64 3)) (*.f64 (cbrt.f64 3) (*.f64 x (sqrt.f64 1/3)))) (*.f64 (cbrt.f64 3) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 3 (*.f64 (cbrt.f64 3) (*.f64 x (cbrt.f64 1/3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (cbrt.f64 3) -3) (*.f64 (cbrt.f64 3) (neg.f64 x))) (*.f64 (cbrt.f64 3) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 81) (*.f64 (cbrt.f64 3) x)) (cbrt.f64 81))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -3 (sqrt.f64 3)) (*.f64 -3 (*.f64 x (sqrt.f64 1/3)))) (*.f64 -3 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -3 (cbrt.f64 9)) (*.f64 -3 (*.f64 x (cbrt.f64 1/3)))) (*.f64 -3 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 9 (*.f64 -3 (neg.f64 x))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -9 (*.f64 -3 x)) -9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 27) (*.f64 3 (*.f64 x (sqrt.f64 1/3)))) (sqrt.f64 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 (*.f64 9 27)) (*.f64 3 (*.f64 x (cbrt.f64 1/3)))) (cbrt.f64 (*.f64 9 27)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -9 (neg.f64 (*.f64 3 x))) -9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cbrt.f64 9) (*.f64 x (cbrt.f64 1/3))) (cbrt.f64 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 9 (sqrt.f64 3)) (*.f64 9 (*.f64 x (sqrt.f64 1/3)))) (*.f64 9 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 9 (cbrt.f64 9)) (*.f64 9 (*.f64 x (cbrt.f64 1/3)))) (*.f64 9 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 -27 (*.f64 9 (neg.f64 x))) -27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27 (*.f64 9 x)) 27)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 3 (*.f64 (sqrt.f64 3) (*.f64 x (sqrt.f64 1/3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sqrt.f64 3) (cbrt.f64 9)) (*.f64 (sqrt.f64 3) (*.f64 x (cbrt.f64 1/3)))) (*.f64 (sqrt.f64 3) (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (sqrt.f64 3) -3) (*.f64 (sqrt.f64 3) (neg.f64 x))) (*.f64 (sqrt.f64 3) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (sqrt.f64 27) (*.f64 (sqrt.f64 3) x)) (sqrt.f64 27))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x 1/3 -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 3 x) (cbrt.f64 1/3))) (neg.f64 (cbrt.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -27 (pow.f64 x 3)) (neg.f64 (*.f64 3 (fma.f64 x (+.f64 3 x) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (*.f64 x 1/3) 3))) (neg.f64 (+.f64 1 (+.f64 (pow.f64 (*.f64 x 1/3) 2) (*.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 3 x) (sqrt.f64 1/3))) (neg.f64 (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 27 (pow.f64 x 3)) 1/3)) (neg.f64 (fma.f64 x (+.f64 3 x) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -3 x) -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 -3 x) -1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 -3 x) -1/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 -3 x) -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 -3 x) -1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 -3 x) -1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 x 1/3 -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (fma.f64 x 1/3 -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 -3 x) -1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 (+.f64 -3 x) -1/3) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3) (cbrt.f64 1/3) (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 3) (cbrt.f64 1/3)) (/.f64 (sqrt.f64 3) (cbrt.f64 9)) (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 3) (sqrt.f64 1/3)) (*.f64 (cbrt.f64 9) (sqrt.f64 1/3)) (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3) (sqrt.f64 1/3) (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/3) (sqrt.f64 3) (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/3) (cbrt.f64 (/.f64 27 9)) (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 1/3 (*.f64 x -1/3))))))"]],"rules":[["egg-rr",120],["egg-rr",71],["egg-rr",84]],"time":41.20703125,"type":"rewrite"},{"count":[[335,296]],"inputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 1 y)","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(*.f64 -1/3 (/.f64 x y))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(*.f64 -1/3 (/.f64 x y))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","1","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 -4/3 (/.f64 x y)))","(/.f64 (+.f64 (*.f64 -4/3 x) 1) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x)))) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x)))) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 (*.f64 1/3 x) x) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(/.f64 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x))) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x)))) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x)))) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 (*.f64 1/3 x) x) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y)))","(/.f64 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x))) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x)))) y)","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -4/3 (/.f64 x y))))","(/.f64 (+.f64 1 (*.f64 x (+.f64 -4/3 (*.f64 1/3 x)))) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) y))","(/.f64 (*.f64 (fma.f64 -1/3 x 1) (-.f64 1 x)) y)","(/.f64 1 y)","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(/.f64 (fma.f64 -1/3 x 1) y)","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(/.f64 (fma.f64 -1/3 x 1) y)","(+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 -1/3 (/.f64 x y))","(/.f64 (*.f64 -1/3 x) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (fma.f64 -1/3 x 1) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (fma.f64 -1/3 x 1) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 -1/3 (/.f64 x y))","(/.f64 (*.f64 -1/3 x) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (fma.f64 -1/3 x 1) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (fma.f64 -1/3 x 1) y)","(+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y)))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","(*.f64 1/3 (/.f64 (-.f64 3 x) y))","(/.f64 (fma.f64 -1/3 x 1) y)","1","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)"]],"time":219.658935546875,"type":"simplify"},{"compiler":[[4820,3616]],"time":64.80615234375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (/.f64 (-.f64 3 x) 3) (-.f64 1 x)) y)","fresh",6.09765625],["(-.f64 (/.f64 1 y) (-.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))))","next",0.12728500976844204],["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (*.f64 3 (-.f64 3 x)) (/.f64 1 9)) y))","fresh",0.17482377930532605],["(neg.f64 (*.f64 (fma.f64 x 1/3 -1) (*.f64 (/.f64 1 y) (-.f64 1 x))))","fresh",0.15691376953688405],["(*.f64 (-.f64 1 x) (+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y)))","fresh",0.16472626953688402],["(*.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 2)))","fresh",25.146383931344772],["(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))","done",0.14453125]],"compiler":[[13,10],[22,16],[17,14],[15,12],[15,11],[25,20],[13,10],[13,10],[22,16],[17,14],[15,12],[15,11],[25,20]],"count":[[302,7]],"kept":[{"done":[0,0],"fresh":[5,1],"new":[296,5],"picked":[1,1]}],"min-error":[0.00390625],"time":130.873046875,"type":"prune"},{"compiler":[[82,54]],"locations":[["(*.f64 (+.f64 -3 x) -1/3)",0.1328125,true],["(/.f64 (*.f64 x 1/3) y)",0.20703125,true],["(*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))",0.2421875,true],["(*.f64 x 1/3)",0.3359375,true]],"time":18.68701171875,"type":"localize"},{"count":[[4,72]],"series":[["(*.f64 (+.f64 -3 x) -1/3)","x","-inf",0.14013671875],["(*.f64 (+.f64 -3 x) -1/3)","x","inf",0.22509765625],["(*.f64 (+.f64 -3 x) -1/3)","x","0",0.202880859375],["(/.f64 (*.f64 x 1/3) y)","y","-inf",0.26513671875],["(/.f64 (*.f64 x 1/3) y)","y","inf",0.27099609375],["(/.f64 (*.f64 x 1/3) y)","y","0",0.379150390625],["(/.f64 (*.f64 x 1/3) y)","x","-inf",0.316162109375],["(/.f64 (*.f64 x 1/3) y)","x","inf",0.36181640625],["(/.f64 (*.f64 x 1/3) y)","x","0",0.426025390625],["(*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))","y","-inf",0.2939453125],["(*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))","y","inf",0.572998046875],["(*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))","y","0",0.616943359375],["(*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))","x","-inf",0.30615234375],["(*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))","x","inf",0.455078125],["(*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))","x","0",0.4560546875],["(*.f64 x 1/3)","x","-inf",0.299072265625],["(*.f64 x 1/3)","x","inf",0.291015625],["(*.f64 x 1/3)","x","0",0.336181640625]],"time":6.427978515625,"type":"series"},{"count":[[4,267]],"inputs":[["(*.f64 x 1/3)","(*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))","(/.f64 (*.f64 x 1/3) y)","(*.f64 (+.f64 -3 x) -1/3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/3 0) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/3) (*.f64 (*.f64 x 1/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 1/3) 0) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 -1/3) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/3) (*.f64 0 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x 1/3)) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) 1/27)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 (*.f64 (*.f64 x x) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/9)) (cbrt.f64 (*.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sqrt.f64 1/3)) (sqrt.f64 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 1/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/27 x)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/3) (*.f64 (cbrt.f64 1/9) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 1/3) (*.f64 (sqrt.f64 1/3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x -1/3)) (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -1/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) -1/3) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) -3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 1/3)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 1/3)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 -1/27 (neg.f64 (pow.f64 x 3))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (fma.f64 x -1/3 1) y) 0) (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))) (*.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))) 0) (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (fma.f64 x -1/3 1) y)) (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))) (*.f64 0 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y)))) (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x -1/3 1) y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 (fma.f64 x -1/3 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y)))) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y))) 2) (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (cbrt.f64 (/.f64 (fma.f64 x -1/3 1) y))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x -1/3 1) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (cbrt.f64 (neg.f64 x))) y) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 x -1/3 1) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x -1/3 1) y) 2)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (fma.f64 x -1/3 1)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x -1/3 1) (cbrt.f64 y)) (/.f64 (neg.f64 x) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 1/3 (+.f64 -3 x)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 x (+.f64 -3 x))) (neg.f64 y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (*.f64 x (+.f64 -3 x))) y) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (cbrt.f64 x)) y)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (/.f64 (fma.f64 x -1/3 1) y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x -1/3 1) y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y)))) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (+.f64 -3 x)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (cbrt.f64 x)) y) (neg.f64 (cbrt.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (*.f64 1/3 (+.f64 -3 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y))) (neg.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x -1/3 1) x) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (+.f64 -3 x))) (/.f64 -1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 (fma.f64 x -1/3 1) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (fma.f64 x -1/3 1) (cbrt.f64 y)) (neg.f64 x)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x (+.f64 -3 x))) (cbrt.f64 (*.f64 y -3))) (cbrt.f64 (/.f64 (*.f64 y y) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x (+.f64 -3 x))) (cbrt.f64 -3)) (/.f64 y (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x (+.f64 -3 x))) (cbrt.f64 y)) (cbrt.f64 (/.f64 (*.f64 y y) -1/27)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) (cbrt.f64 y)) 1) (*.f64 (cbrt.f64 (*.f64 y y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x -1/3 1) x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (+.f64 -3 x))) (*.f64 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (neg.f64 (+.f64 -3 x))) (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (+.f64 -3 x) x)) (*.f64 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (neg.f64 (*.f64 x (+.f64 -3 x)))) (*.f64 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y))) 2) (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 1/3 (+.f64 -3 x))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x -1/3 1) y) 2)) (neg.f64 x))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 x -1/3 1)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x -1/3 1) y) 2)) (neg.f64 x))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -3 x)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x -1/3 1) y) 2)) (neg.f64 x))) (cbrt.f64 (*.f64 y -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -1/3 (+.f64 -27 (pow.f64 x 3))) (neg.f64 (/.f64 x y))) (fma.f64 x (+.f64 x 3) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 -3 x)) (neg.f64 x)) (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x))) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y))) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 (neg.f64 x) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 x (+.f64 -3 x))) 1) (*.f64 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (fma.f64 x -1/3 1) x) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) x) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) x) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x (+.f64 -3 x))) (cbrt.f64 (*.f64 y -3))) (pow.f64 (cbrt.f64 (*.f64 y -3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x (+.f64 -3 x))) y) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 x (+.f64 -3 x))) 1) (*.f64 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 x (+.f64 -3 x)))) (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 x)) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 1/3 (+.f64 -3 x)) y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 x) (/.f64 (*.f64 1/3 (+.f64 -3 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (*.f64 (fma.f64 x -1/3 1) (/.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 0 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 0 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 1 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 3 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 0 0 (*.f64 (fma.f64 x -1/3 1) (neg.f64 (/.f64 x y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (*.f64 3 y)) (*.f64 (/.f64 x (*.f64 3 y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (*.f64 3 y)) 0) (/.f64 x (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (*.f64 3 y)) (*.f64 0 (/.f64 x (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 x (*.f64 3 y))) (/.f64 x (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (*.f64 y -3)) (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 3 y))) (cbrt.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 x y)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2)) (cbrt.f64 (/.f64 x (*.f64 3 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 3 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 3 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x 1/3)) (/.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/9)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/27 y)) (/.f64 x (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (cbrt.f64 (/.f64 1/27 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x 1/3) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 x (cbrt.f64 (/.f64 (*.f64 y y) 1/27))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x -1/3) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 -1/3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) 1/3) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1/27 y)) x) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 3 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (*.f64 x 1/3)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 x (*.f64 3 y))) (cbrt.f64 (*.f64 (*.f64 x x) 1/9))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (sqrt.f64 3)) (*.f64 y (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (*.f64 (cbrt.f64 y) (sqrt.f64 3))) (*.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (cbrt.f64 (/.f64 (*.f64 y y) 1/27)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (*.f64 y 3))) (cbrt.f64 (/.f64 (*.f64 y y) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 3)) (/.f64 y (cbrt.f64 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 (*.f64 y -3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) 1/9))) (*.f64 (cbrt.f64 (*.f64 y 3)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 3 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y)) 1) (*.f64 (cbrt.f64 (*.f64 y y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -1/3) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x 1/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 y -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2)) (cbrt.f64 (*.f64 x -1/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2)) (cbrt.f64 x)) (cbrt.f64 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2)) (cbrt.f64 (*.f64 x 1/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) 1) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x -1/3)) (cbrt.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2))) (cbrt.f64 (*.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x 1/3)) (cbrt.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (/.f64 x (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (/.f64 (*.f64 y y) 1/27))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 (/.f64 1/27 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) 3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x 1/3) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x -1/3) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 (*.f64 y 3))) (pow.f64 (cbrt.f64 (*.f64 y 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x 1/3) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 3 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 3 y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 3 y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 3 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x -1/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 x -1/3) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 -1/3 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x y) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x (*.f64 3 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 3 y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -1/3 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x -1/3) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x -1/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -1/3 1) (*.f64 (fma.f64 x -1/3 1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 x -1/3 1) 0) (fma.f64 x -1/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x -1/3 1) (*.f64 0 (fma.f64 x -1/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 x -1/3 1)) (fma.f64 x -1/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 x -1/3) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 x -1/3 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (*.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 1/3 (+.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 x -1/3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 -3 x)) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -3 x) 2)) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x -1/3 1)) (cbrt.f64 (pow.f64 (fma.f64 x -1/3 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x -1/3 1) 2)) (cbrt.f64 (fma.f64 x -1/3 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 -1/27 (+.f64 -3 x))) (cbrt.f64 (pow.f64 (+.f64 -3 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 -1/3) (*.f64 (cbrt.f64 1/9) (+.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -3 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/3 (+.f64 -3 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x -1/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x -1/3 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 1/3 (+.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 -3 x) (cbrt.f64 -1/3)) (cbrt.f64 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 -3 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (neg.f64 (+.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/3 (+.f64 -3 x))) (neg.f64 (cbrt.f64 (pow.f64 (fma.f64 x -1/3 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1/3 (+.f64 -27 (pow.f64 x 3))) (/.f64 1 (fma.f64 x (+.f64 x 3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/3 (+.f64 -27 (pow.f64 x 3))) (fma.f64 x (+.f64 x 3) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x -1/3 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 -1/3 (+.f64 -27 (pow.f64 x 3)))) (fma.f64 x (+.f64 x 3) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/3 (+.f64 27 (neg.f64 (pow.f64 x 3)))) (neg.f64 (fma.f64 x (+.f64 x 3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -1/3 (+.f64 -27 (pow.f64 x 3))) 1) (fma.f64 x (+.f64 x 3) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 27 (neg.f64 (pow.f64 x 3))) -1/3) (neg.f64 (fma.f64 x (+.f64 x 3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (+.f64 -27 (pow.f64 x 3))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 -3 x) 2)) -1/3)) (cbrt.f64 (fma.f64 x (+.f64 x 3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -1/3 (+.f64 -27 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x (+.f64 x 3) 9))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 x 3) 9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/3 (+.f64 -3 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -3 x) -3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x -1/3 1) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x -1/3 1) -3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -27 (pow.f64 x 3)) (/.f64 (fma.f64 x (+.f64 x 3) 9) -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (*.f64 x -1/3) 3)) (+.f64 1 (-.f64 (*.f64 (*.f64 x -1/3) (*.f64 x -1/3)) (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x -1/3) 3) 1) (+.f64 (*.f64 (*.f64 x -1/3) (*.f64 x -1/3)) (-.f64 1 (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 -1/3 (+.f64 -27 (pow.f64 x 3))) 1) (*.f64 (fma.f64 x (+.f64 x 3) 9) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/3 (+.f64 -27 (pow.f64 x 3))) (*.f64 (fma.f64 x (+.f64 x 3) 9) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 27 (neg.f64 (pow.f64 x 3))) -1/3) (*.f64 (neg.f64 (fma.f64 x (+.f64 x 3) 9)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 -1/3 (+.f64 -27 (pow.f64 x 3)))) (neg.f64 (fma.f64 x (+.f64 x 3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x -1/3 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x -1/3 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -1/3 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -1/3 1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x -1/3 1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1/3 (+.f64 -3 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x -1/3 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/3 -3 (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -3 -1/3 (*.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) 1/3 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x -1/3)) (cbrt.f64 (*.f64 (*.f64 x x) 1/9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 1/3)) (neg.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/9))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -1/3 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/3 x 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (neg.f64 x) 1)))))"]],"rules":[["egg-rr",67],["egg-rr",73],["egg-rr",90],["egg-rr",37]],"time":41.47802734375,"type":"rewrite"},{"count":[[339,279]],"inputs":[["(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 -1 (/.f64 x y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","(*.f64 1/3 (/.f64 x y))","1","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))","(+.f64 1 (*.f64 -1/3 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 1/3 x)","(*.f64 -1 (/.f64 x y))","(neg.f64 (/.f64 x y))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(/.f64 (fma.f64 (*.f64 1/3 x) x (neg.f64 x)) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(/.f64 (fma.f64 (*.f64 1/3 x) x (neg.f64 x)) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(/.f64 (fma.f64 (*.f64 1/3 x) x (neg.f64 x)) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 1/3 (*.f64 x x)) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(/.f64 (fma.f64 (*.f64 1/3 x) x (neg.f64 x)) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(/.f64 (fma.f64 (*.f64 1/3 x) x (neg.f64 x)) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(/.f64 (fma.f64 (*.f64 1/3 x) x (neg.f64 x)) y)","(*.f64 1/3 (/.f64 (pow.f64 x 2) y))","(/.f64 (*.f64 1/3 (*.f64 x x)) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(/.f64 (fma.f64 (*.f64 1/3 x) x (neg.f64 x)) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(/.f64 (fma.f64 (*.f64 1/3 x) x (neg.f64 x)) y)","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 x 2) y)) (*.f64 -1 (/.f64 x y)))","(/.f64 (fma.f64 (*.f64 1/3 x) x (neg.f64 x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 (*.f64 (-.f64 x 3) x) y))","(/.f64 (*.f64 1/3 (*.f64 (+.f64 x -3) x)) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","(*.f64 1/3 (/.f64 x y))","(/.f64 (*.f64 1/3 x) y)","1","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(*.f64 -1/3 x)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)","(+.f64 1 (*.f64 -1/3 x))","(fma.f64 -1/3 x 1)"]],"time":234.719970703125,"type":"simplify"},{"compiler":[[6800,4454]],"time":72.116943359375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (/.f64 (-.f64 3 x) 3) (-.f64 1 x)) y)","fresh",6.09765625],["(-.f64 (/.f64 1 y) (-.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))))","done",0.12728500976844204],["(*.f64 (-.f64 1 x) (/.f64 (*.f64 (*.f64 3 (-.f64 3 x)) (/.f64 1 9)) y))","fresh",0.17482377930532605],["(neg.f64 (*.f64 (fma.f64 x 1/3 -1) (*.f64 (/.f64 1 y) (-.f64 1 x))))","fresh",0.15691376953688405],["(-.f64 (/.f64 1 y) (-.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 (*.f64 (neg.f64 x) (cbrt.f64 (/.f64 (fma.f64 x -1/3 1) y))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x -1/3 1) y) 2)))))","fresh",16.352056233344854],["(*.f64 (-.f64 1 x) (+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y)))","fresh",0.16472626953688402],["(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))","done",0.14453125]],"compiler":[[13,10],[22,16],[17,14],[15,12],[32,24],[15,11],[13,10]],"count":[[286,7]],"kept":[{"done":[1,1],"fresh":[5,4],"new":[279,1],"picked":[1,1]}],"min-error":[0.00390625],"time":138.39599609375,"type":"prune"},{"accuracy":[0.127285009768442],"baseline":[0.12728500976844204],"branch":[["x",0.127285009768442,1],["y",0.12728500976844204,1],["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))",0.12728500976844204,1],["(*.f64 (-.f64 1 x) (-.f64 3 x))",0.12728500976844204,1],["(*.f64 (-.f64 1 x) (-.f64 3 x))",0.12728500976844204,1],["(*.f64 y 3)",0.12728500976844204,1]],"compiler":[[3,2],[3,2],[13,10],[9,7],[9,7],[5,4],[263,191]],"count":[[18,1]],"inputs":[["(-.f64 (/.f64 1 y) (-.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 (*.f64 (neg.f64 x) (cbrt.f64 (/.f64 (fma.f64 x -1/3 1) y))) (cbrt.f64 (pow.f64 (/.f64 (fma.f64 x -1/3 1) y) 2)))))","(-.f64 (/.f64 1 y) (-.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))))","(*.f64 (-.f64 1 x) (/.f64 (*.f64 (*.f64 3 (-.f64 3 x)) (/.f64 1 9)) y))","(neg.f64 (*.f64 (fma.f64 x 1/3 -1) (*.f64 (/.f64 1 y) (-.f64 1 x))))","(*.f64 (-.f64 1 x) (+.f64 (*.f64 -1/3 (/.f64 x y)) (/.f64 1 y)))","(*.f64 (*.f64 (-.f64 1 x) (cbrt.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) 2)))","(*.f64 (*.f64 (-.f64 3 x) 1/3) (/.f64 (-.f64 1 x) y))","(*.f64 (-.f64 1 x) (/.f64 (*.f64 (*.f64 (cbrt.f64 1/9) (-.f64 3 x)) (cbrt.f64 1/3)) y))","(*.f64 (-.f64 1 x) (+.f64 (/.f64 1 y) (*.f64 -1/3 (/.f64 x y))))","(-.f64 (/.f64 1 y) (-.f64 (/.f64 x (*.f64 y 3)) (*.f64 (/.f64 (-.f64 3 x) (*.f64 y 3)) (neg.f64 x))))","(*.f64 (-.f64 1 x) (/.f64 (/.f64 (-.f64 3 x) 3) y))","(*.f64 (-.f64 1 x) (/.f64 (*.f64 (-.f64 3 x) 1/3) y))","(/.f64 (+.f64 1 (*.f64 x (+.f64 (*.f64 1/3 x) -4/3))) y)","(/.f64 (/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) 3) y)","(/.f64 (*.f64 (/.f64 (-.f64 3 x) 3) (-.f64 1 x)) y)","(*.f64 (*.f64 (-.f64 3 x) 1/3) (/.f64 (-.f64 1 x) y))","(/.f64 (*.f64 (*.f64 (-.f64 3 x) 1/3) (-.f64 1 x)) y)","(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))"]],"link":["."],"name":["Diagrams.TwoD.Arc:bezierFromSweepQ1 from diagrams-lib-1.3.0.3"],"oracle":[31.36358125619204],"outputs":[["(-.f64 (/.f64 1 y) (-.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))))"]],"time":38.5400390625,"times":[["x",6.5361328125],["y",6.4541015625],["(/.f64 (*.f64 (-.f64 1 x) (-.f64 3 x)) (*.f64 y 3))",6.760009765625],["(*.f64 (-.f64 1 x) (-.f64 3 x))",3.13818359375],["(*.f64 (-.f64 1 x) (-.f64 3 x))",3.303955078125],["(*.f64 y 3)",6.93017578125]],"type":"regimes"},{"compiler":[[22,16]],"inputs":[["(-.f64 (/.f64 1 y) (-.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 1 y) (-.f64 (/.f64 (*.f64 x 1/3) y) (*.f64 (/.f64 (*.f64 (+.f64 -3 x) -1/3) y) (neg.f64 x))))","(/.f64 (-.f64 1 (*.f64 x (-.f64 1/3 (*.f64 1/3 (+.f64 -3 x))))) y)"]],"stop":[["fuel",1]],"time":52.787841796875,"type":"simplify"},{"time":0.0419921875,"type":"soundness"},{"compiler":[[22,16]],"remove-preprocessing":[[]],"time":20.884033203125,"type":"end"}]
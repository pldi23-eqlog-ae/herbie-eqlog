[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.6279854503659408,0.3705504210233812,0.0014641286106780171],[11,0.5480245700398427,0.45051130134947925,0.0014641286106780171],[10,0.47586475120897376,0.5226711201803482,0.0014641286106780171],[9,0.3588488287805376,0.6396870426087844,0.0014641286106780171],[8,0.2496339678473305,0.7489019035419915,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":107.33203125,"type":"analyze"},{"outcomes":[["body",512,"invalid",6.92626953125,60],["body",256,"invalid",40.447509765625,673],["body",1024,"invalid",4.03125,22],["body",512,"valid",98.616455078125,841],["body",1024,"valid",269.99755859375,1415],["body",2048,"valid",1.107177734375,3],["body",256,"valid",355.5546875,5997]],"time":786.675048828125,"type":"sample"},{"compiler":[[11,7]],"inputs":[["0","1","2"],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","(/.f64 (*.f64 y (/.f64 (sin.f64 x) x)) z)","(/.f64 (*.f64 z (/.f64 (sin.f64 y) y)) x)","(/.f64 (*.f64 x (/.f64 (sin.f64 z) z)) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","(/.f64 (*.f64 x (sin.f64 y)) (*.f64 y z))","(/.f64 (*.f64 y (/.f64 (sin.f64 x) x)) z)","(/.f64 (*.f64 y (sin.f64 x)) (*.f64 x z))","(/.f64 (*.f64 z (/.f64 (sin.f64 y) y)) x)","(/.f64 (*.f64 z (sin.f64 y)) (*.f64 y x))","(/.f64 (*.f64 x (/.f64 (sin.f64 z) z)) y)","(/.f64 (*.f64 x (sin.f64 z)) (*.f64 z y))"]],"symmetry":[[]],"time":67.1318359375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","(/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)"]],"time":17.3701171875,"type":"simplify"},{"compiler":[[19,10]],"time":0.35791015625,"type":"eval"},{"alts":[["(/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)","fresh",8.947915919846334],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","next",3.967228939535031]],"compiler":[[11,7],[11,7],[11,7],[11,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[3.869557424310406],"time":1.2041015625,"type":"prune"},{"compiler":[[26,7]],"locations":[["(sin.f64 y)",0.0390625,true],["(*.f64 x (/.f64 (sin.f64 y) y))",0.11166000976844201,true],["(/.f64 (sin.f64 y) y)",0.13671875,true],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)",3.910256429766589,true]],"time":6.570068359375,"type":"localize"},{"count":[[4,68]],"series":[["(sin.f64 y)","y","-inf",0.152099609375],["(sin.f64 y)","y","inf",0.136962890625],["(sin.f64 y)","y","0",0.22314453125],["(*.f64 x (/.f64 (sin.f64 y) y))","y","-inf",0.60107421875],["(*.f64 x (/.f64 (sin.f64 y) y))","y","inf",0.154052734375],["(*.f64 x (/.f64 (sin.f64 y) y))","y","0",0.27685546875],["(*.f64 x (/.f64 (sin.f64 y) y))","x","-inf",0.2919921875],["(*.f64 x (/.f64 (sin.f64 y) y))","x","inf",0.3310546875],["(*.f64 x (/.f64 (sin.f64 y) y))","x","0",0.316162109375],["(/.f64 (sin.f64 y) y)","y","-inf",1.078857421875],["(/.f64 (sin.f64 y) y)","y","inf",0.26708984375],["(/.f64 (sin.f64 y) y)","y","0",0.217041015625],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","z","-inf",0.343994140625],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","z","inf",0.48193359375],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","z","0",0.716064453125],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","y","-inf",0.841064453125],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","y","inf",0.943115234375],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","y","0",0.526123046875],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","x","-inf",0.3388671875],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","x","inf",0.72802734375],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","x","0",1.126953125]],"time":10.33984375,"type":"series"},{"count":[[4,233]],"inputs":[["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","(/.f64 (sin.f64 y) y)","(*.f64 x (/.f64 (sin.f64 y) y))","(sin.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 0) (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) (*.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)) (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) (*.f64 0 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 2)) (cbrt.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) (/.f64 x (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 z)) (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (*.f64 z z))) (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 (*.f64 z z))) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2)) z) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (neg.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sin.f64 y)) (/.f64 1 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (sin.f64 y)) z) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y))) (*.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 x (sin.f64 y))) (*.f64 (cbrt.f64 (*.f64 z z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 (neg.f64 x) (sin.f64 y))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (neg.f64 x) (sin.f64 y))) (*.f64 (neg.f64 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 (/.f64 1 z))) (*.f64 y (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (sin.f64 y)) -1) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (/.f64 1 z))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) 1) (*.f64 (cbrt.f64 (*.f64 y y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) -1) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (cbrt.f64 (/.f64 1 z))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) 1) (*.f64 (neg.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) -1) (*.f64 (neg.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) 1) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (neg.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 z) (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 z) (*.f64 (neg.f64 x) (sin.f64 y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 2)) (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 2)) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) x) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (/.f64 (sin.f64 y) y)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (*.f64 (sin.f64 y) (/.f64 x y))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (/.f64 1 z)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (/.f64 1 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (/.f64 x z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 x z)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (/.f64 -1 z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 x (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2)) z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (sin.f64 y)) z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) z) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) z) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) (/.f64 (*.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (*.f64 z (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (*.f64 z (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) (*.f64 (*.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x (sin.f64 y)) z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 y) y) 0) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 y) y) (*.f64 (/.f64 (sin.f64 y) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sin.f64 y) y)) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 y) y) (*.f64 0 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 (sin.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) y) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 (*.f64 y y))) (cbrt.f64 (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (cbrt.f64 (sin.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (cbrt.f64 (neg.f64 (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 y)) (sin.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) y) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 y) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 0) (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (*.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 y) (/.f64 x y))) (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (*.f64 0 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (sin.f64 y) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2)) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (sin.f64 y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 x)) y) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 (*.f64 y y))) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sin.f64 y)) y) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) x) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (sin.f64 y) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 (neg.f64 x) (sin.f64 y))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (sin.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2)) (cbrt.f64 (*.f64 x (sin.f64 y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (sin.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) x)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) x)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) x) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (sin.f64 y) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 x (sin.f64 y))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 x (sin.f64 y)) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) 0) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 (sin.f64 y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 y)) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 y) (*.f64 0 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (neg.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))))"]],"rules":[["egg-rr",23],["egg-rr",65],["egg-rr",47],["egg-rr",98]],"time":36.548095703125,"type":"rewrite"},{"count":[[301,263]],"inputs":[["(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(/.f64 (fma.f64 -1/6 (*.f64 (*.f64 y y) x) x) z)","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(+.f64 (/.f64 (*.f64 x (fma.f64 (pow.f64 y 4) 1/120 (*.f64 -1/6 (*.f64 y y)))) z) (/.f64 x z))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(+.f64 (/.f64 (*.f64 x (+.f64 (*.f64 1/120 (pow.f64 y 4)) (*.f64 -1/5040 (pow.f64 y 6)))) z) (/.f64 (fma.f64 -1/6 (*.f64 (*.f64 y y) x) x) z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(fma.f64 (*.f64 y y) -1/6 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 1 (fma.f64 (pow.f64 y 4) 1/120 (*.f64 -1/6 (*.f64 y y))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 (fma.f64 (pow.f64 y 6) -1/5040 1) (fma.f64 (pow.f64 y 4) 1/120 (*.f64 -1/6 (*.f64 y y))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 x (fma.f64 (pow.f64 y 4) 1/120 (*.f64 -1/6 (*.f64 y y)))) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(+.f64 (*.f64 x (fma.f64 (pow.f64 y 4) 1/120 (*.f64 -1/6 (*.f64 y y)))) (*.f64 x (fma.f64 (pow.f64 y 6) -1/5040 1)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 (pow.f64 y 7) -1/5040 y)))"]],"time":200.740966796875,"type":"simplify"},{"compiler":[[3628,1251]],"time":35.138916015625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","next",2.668632519536884],["(/.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) x) (cbrt.f64 (/.f64 (sin.f64 y) y))) z)","fresh",10.856458756520379],["(/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)","fresh",8.947915919846334],["(/.f64 (*.f64 x (*.f64 (/.f64 1 y) (sin.f64 y))) z)","fresh",4.054493978608799],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)) z)","fresh",4.08906282629322],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","fresh",3.1981597428421957],["(/.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (/.f64 -1 z)) y)","fresh",11.317839451214288],["(/.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 x z)) (cbrt.f64 (*.f64 y y)))","fresh",26.99213623211308]],"compiler":[[11,7],[20,12],[11,7],[13,9],[14,10],[11,7],[14,10],[17,11],[11,7],[20,12],[11,7],[13,9],[14,10],[11,7],[14,10],[17,11]],"count":[[265,8]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[263,8],"picked":[1,0]}],"min-error":[0],"time":98.398193359375,"type":"prune"},{"compiler":[[23,7]],"locations":[["(sin.f64 y)",0.0390625,false],["(/.f64 (sin.f64 y) y)",0.13671875,false],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))",2.5119564457704664,true]],"time":5.412841796875,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","z","-inf",0.183837890625],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","z","inf",0.160888671875],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","z","0",0.154052734375],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","x","-inf",0.18310546875],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","x","inf",0.165771484375],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","x","0",0.175048828125],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","y","-inf",0.1669921875],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","y","inf",0.1708984375],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","y","0",0.260009765625]],"time":1.72802734375,"type":"series"},{"count":[[1,106]],"inputs":[["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 0) (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) (*.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))) (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2)) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 (/.f64 x z) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) (/.f64 x (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 x z))) y) (cbrt.f64 (pow.f64 (/.f64 x z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 x z)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x z) (cbrt.f64 (*.f64 y y))) (/.f64 (sin.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (sin.f64 y) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 x z))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (*.f64 (/.f64 x z) (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x z) y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (sin.f64 y)) y) (cbrt.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (*.f64 z z))) (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (/.f64 x z)) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (/.f64 x z)) (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) x) (/.f64 1 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 y z)) (*.f64 (sin.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (neg.f64 x)) (/.f64 1 (neg.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) x) (cbrt.f64 y)) (*.f64 (cbrt.f64 (*.f64 y y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) x) (cbrt.f64 (*.f64 y z))) (pow.f64 (cbrt.f64 (*.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 x)) (neg.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (/.f64 x z)) (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 x (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2)) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x z)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2)) (cbrt.f64 (*.f64 (sin.f64 y) x))) (cbrt.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2)) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (/.f64 x z)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) x) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 x z)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (/.f64 x y)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (/.f64 (sin.f64 y) y)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (sin.f64 y)) y)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (sin.f64 y)) y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 x (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x z))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) x)) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2))) (cbrt.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 (/.f64 x z)) (sin.f64 y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) (cbrt.f64 (*.f64 y y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (neg.f64 x)) (/.f64 1 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (/.f64 x z))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (/.f64 x z))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (/.f64 x z)) (sin.f64 y)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 (/.f64 x z)) (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) (cbrt.f64 y)) 1) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) (cbrt.f64 y))) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (neg.f64 x)) 1) (neg.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 x z)) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) y) (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 y) x) (neg.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 3))))))"]],"rules":[["egg-rr",106]],"time":23.85400390625,"type":"rewrite"},{"count":[[142,114]],"inputs":[["(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(/.f64 (+.f64 x (*.f64 (*.f64 -1/6 x) (*.f64 y y))) z)","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(/.f64 (+.f64 x (*.f64 x (+.f64 (*.f64 1/120 (pow.f64 y 4)) (*.f64 -1/6 (*.f64 y y))))) z)","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(/.f64 (+.f64 (+.f64 x (*.f64 (*.f64 -1/6 x) (*.f64 y y))) (*.f64 x (+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (*.f64 1/120 (pow.f64 y 4))))) z)","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))"]],"time":142.594970703125,"type":"simplify"},{"compiler":[[2731,875]],"time":23.176025390625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","fresh",3.1981597428421957],["(/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) y)","fresh",7.3198483625787505],["(/.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (/.f64 x z))) (cbrt.f64 y))","fresh",11.240286039128636],["(*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 x z))) y))","fresh",21.49119139712849],["(/.f64 (*.f64 x (*.f64 (/.f64 1 y) (sin.f64 y))) z)","fresh",4.054493978608799],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","done",2.668632519536884],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","next",2.7999001465266304],["(/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)","fresh",8.947915919846334]],"compiler":[[11,7],[11,7],[21,14],[19,12],[13,9],[11,7],[14,10],[11,7],[11,7],[11,7],[21,14],[19,12],[13,9],[14,10],[11,7]],"count":[[206,8]],"kept":[{"done":[0,0],"fresh":[7,2],"new":[198,5],"picked":[1,1]}],"min-error":[0],"time":62.591064453125,"type":"prune"},{"compiler":[[39,13]],"locations":[["(cbrt.f64 (/.f64 (sin.f64 y) y))",0.06640625,true],["(/.f64 (sin.f64 y) y)",0.13671875,false],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)",0.43566142583195644,true],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))",2.5119564457704664,true]],"time":8.240966796875,"type":"localize"},{"count":[[3,44]],"series":[["(cbrt.f64 (/.f64 (sin.f64 y) y))","y","-inf",0.346923828125],["(cbrt.f64 (/.f64 (sin.f64 y) y))","y","inf",0.27294921875],["(cbrt.f64 (/.f64 (sin.f64 y) y))","y","0",0.2041015625],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","y","-inf",2.302001953125],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","y","inf",0.779052734375],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","y","0",0.301025390625],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","z","-inf",0.2578125],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","z","inf",0.425048828125],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","z","0",0.343994140625],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","x","-inf",0.23681640625],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","x","inf",0.4189453125],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","x","0",0.4951171875],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","y","-inf",2.31396484375],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","y","inf",0.800048828125],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","y","0",0.3720703125]],"time":10.072021484375,"type":"series"},{"count":[[3,201]],"inputs":[["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","(cbrt.f64 (/.f64 (sin.f64 y) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 0) (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) (*.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))) (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) (*.f64 0 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x z)) (/.f64 (*.f64 (pow.f64 (/.f64 x z) 2/3) (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) (/.f64 x (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (/.f64 x z) 2/3) (sin.f64 y)) y) (cbrt.f64 (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 z 2/3)) (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (neg.f64 x) (sin.f64 y))) (/.f64 1 (neg.f64 (neg.f64 (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) z) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (*.f64 (/.f64 x z) (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 x z))) y) (pow.f64 (/.f64 x z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (sin.f64 y)) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x z) (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 (/.f64 x z) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 x z) 2/3) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 x z))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 (/.f64 x z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x z) y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (/.f64 1 (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) x) (/.f64 1 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) x) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (neg.f64 x) (sin.f64 y))) (neg.f64 (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) 1) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) x) 1) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (neg.f64 x) (sin.f64 y))) 1) (neg.f64 (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (cbrt.f64 (pow.f64 z 2/3))) (pow.f64 (cbrt.f64 (pow.f64 z 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (*.f64 (neg.f64 x) (sin.f64 y)))) (neg.f64 (neg.f64 (neg.f64 (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x z) (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x z) (cbrt.f64 (/.f64 (sin.f64 y) y))) (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x z) (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 (sin.f64 y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x z) (sin.f64 y)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x z) (sin.f64 y)) (pow.f64 y -1/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x z) (sin.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (/.f64 x y)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) x) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x z) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (neg.f64 (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 x z) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (sin.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 x (cbrt.f64 z))) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2/3) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) (cbrt.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 x)) (/.f64 (*.f64 (pow.f64 (/.f64 x z) 2/3) (sin.f64 y)) y)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 x) (/.f64 (*.f64 (pow.f64 (/.f64 x z) 2/3) (sin.f64 y)) y)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) z) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) 1) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)) (*.f64 (/.f64 x z) (cbrt.f64 (/.f64 (sin.f64 y) y)))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) (*.f64 (/.f64 x z) (cbrt.f64 (/.f64 (sin.f64 y) y)))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (*.f64 (/.f64 x z) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (/.f64 x z) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (/.f64 1 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) x) (/.f64 1 z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 z)) (/.f64 (sin.f64 y) y)) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 x (pow.f64 z 2/3))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 x z)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (/.f64 x z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) 1) (pow.f64 z 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (pow.f64 z 2/3)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (cbrt.f64 z)) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) z) (cbrt.f64 (neg.f64 y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) z) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) z) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) z) -1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x z) (sin.f64 y)) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x z) (sin.f64 y)) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x z) (sin.f64 y)) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x z) (sin.f64 y)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (neg.f64 x) (sin.f64 y)) z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z))) (neg.f64 (pow.f64 z 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (/.f64 x z)) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) y) (neg.f64 (/.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 x z) y)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 y) y) 0) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 y) y) (*.f64 (/.f64 (sin.f64 y) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (sin.f64 y) y)) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 y) y) (*.f64 0 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 y)) (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (/.f64 (pow.f64 (sin.f64 y) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (/.f64 (sin.f64 y) (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) y) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (cbrt.f64 (pow.f64 y 2/3))) (pow.f64 (cbrt.f64 (pow.f64 y 2/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) y) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 y -1/3) (sin.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (sin.f64 y) 2/3)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3) (cbrt.f64 (neg.f64 (sin.f64 y)))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 y)) (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 y) 2/3) (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) 1) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) 1) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3)) 1) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 y)) (cbrt.f64 y)) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (neg.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 y) (cbrt.f64 y))) (neg.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 0) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 0 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 y -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/3) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (neg.f64 (pow.f64 y -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 y) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -1/3)) (cbrt.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (+.f64 2 1/3))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3)) (cbrt.f64 (cbrt.f64 (sin.f64 y)))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (sin.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2/3))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) 1) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (sin.f64 y) (cbrt.f64 y))) (cbrt.f64 (pow.f64 y 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (sin.f64 y) (pow.f64 y 2/3))) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (sin.f64 y) y))))))"]],"rules":[["egg-rr",33],["egg-rr",61],["egg-rr",107]],"time":33.827880859375,"type":"rewrite"},{"count":[[245,222]],"inputs":[["(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","1","(+.f64 1 (*.f64 -1/18 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (*.f64 -1/18 (pow.f64 y 2))))","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (+.f64 (*.f64 -53/1224720 (pow.f64 y 6)) (*.f64 -1/18 (pow.f64 y 2)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(/.f64 (+.f64 (*.f64 -1/6 (*.f64 (*.f64 y y) x)) x) z)","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(fma.f64 1/120 (*.f64 (pow.f64 y 4) (/.f64 x z)) (/.f64 (+.f64 (*.f64 -1/6 (*.f64 (*.f64 y y) x)) x) z))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(+.f64 (/.f64 (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) (*.f64 1/120 (*.f64 (pow.f64 y 4) x))) z) (/.f64 (+.f64 (*.f64 -1/6 (*.f64 (*.f64 y y) x)) x) z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(fma.f64 (*.f64 y y) -1/6 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 1 (fma.f64 1/120 (pow.f64 y 4) (*.f64 -1/6 (*.f64 y y))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 (fma.f64 (pow.f64 y 6) -1/5040 1) (fma.f64 1/120 (pow.f64 y 4) (*.f64 -1/6 (*.f64 y y))))","1","(+.f64 1 (*.f64 -1/18 (pow.f64 y 2)))","(fma.f64 (*.f64 y y) -1/18 1)","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (*.f64 -1/18 (pow.f64 y 2))))","(+.f64 1 (fma.f64 -1/3240 (pow.f64 y 4) (*.f64 -1/18 (*.f64 y y))))","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (+.f64 (*.f64 -53/1224720 (pow.f64 y 6)) (*.f64 -1/18 (pow.f64 y 2)))))","(+.f64 1 (fma.f64 (pow.f64 y 4) -1/3240 (fma.f64 -53/1224720 (pow.f64 y 6) (*.f64 -1/18 (*.f64 y y)))))"]],"time":128.406982421875,"type":"simplify"},{"compiler":[[4096,1561]],"time":39.51318359375,"type":"eval"},{"alts":[["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","next",3.1981597428421957],["(/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) y)","fresh",7.3198483625787505],["(/.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (/.f64 x z))) (cbrt.f64 y))","fresh",11.240286039128636],["(*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 x z))) y))","fresh",21.49119139712849],["(/.f64 (*.f64 x (*.f64 (/.f64 1 y) (sin.f64 y))) z)","fresh",4.054493978608799],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","done",2.668632519536884],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","done",2.7999001465266304],["(/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)","fresh",8.947915919846334]],"compiler":[[11,7],[11,7],[21,14],[19,12],[13,9],[11,7],[14,10],[11,7],[11,7],[11,7],[21,14],[19,12],[13,9],[11,7]],"count":[[284,8]],"kept":[{"done":[1,1],"fresh":[6,6],"new":[276,0],"picked":[1,1]}],"min-error":[0],"time":98.972900390625,"type":"prune"},{"compiler":[[26,7]],"locations":[["(sin.f64 y)",0.0390625,false],["(/.f64 (/.f64 (sin.f64 y) y) z)",0.13671875,true],["(/.f64 (sin.f64 y) y)",0.13671875,false],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)",3.1216559830737545,true]],"time":5.551025390625,"type":"localize"},{"count":[[2,60]],"series":[["(/.f64 (/.f64 (sin.f64 y) y) z)","z","-inf",0.2548828125],["(/.f64 (/.f64 (sin.f64 y) y) z)","z","inf",0.35693359375],["(/.f64 (/.f64 (sin.f64 y) y) z)","z","0",0.284912109375],["(/.f64 (/.f64 (sin.f64 y) y) z)","y","-inf",0.4609375],["(/.f64 (/.f64 (sin.f64 y) y) z)","y","inf",0.330078125],["(/.f64 (/.f64 (sin.f64 y) y) z)","y","0",0.47216796875],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","x","-inf",0.161865234375],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","x","inf",0.177978515625],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","x","0",0.153076171875],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","z","-inf",0.166015625],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","z","inf",0.181884765625],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","z","0",0.156005859375],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","y","-inf",0.19384765625],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","y","inf",0.177001953125],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","y","0",0.241943359375]],"time":3.944091796875,"type":"series"},{"count":[[2,175]],"inputs":[["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","(/.f64 (/.f64 (sin.f64 y) y) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) (*.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) 0) (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) (*.f64 0 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))) (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) 2)) (cbrt.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sin.f64 y)) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (sin.f64 y) y) z)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) (/.f64 x (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 x)) (*.f64 y z)) (cbrt.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 (/.f64 (sin.f64 y) y) z))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2)) x) (cbrt.f64 (/.f64 (/.f64 (sin.f64 y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2)) (*.f64 x (cbrt.f64 (/.f64 (/.f64 (sin.f64 y) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (sin.f64 y)) (*.f64 y z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (*.f64 z z))) (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 x)) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 y) x)) (neg.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 y) x)) -1) (*.f64 (neg.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 y) x)) 1) (neg.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 y) x)) (cbrt.f64 (/.f64 1 z))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) x) -1) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) x) 1) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) x) (cbrt.f64 (/.f64 1 z))) (*.f64 y (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (/.f64 x y)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) 2)) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (sin.f64 y) (neg.f64 z))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (sin.f64 y) z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) x) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2)) x)) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2)) x)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 z)) x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) z) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 y) x)) (/.f64 1 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 y) x) (/.f64 1 z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (/.f64 x z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 x z)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (/.f64 x (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) (cbrt.f64 z)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (sin.f64 y) y) (neg.f64 z)) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 y) (neg.f64 (/.f64 x y))) z))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 x (/.f64 (/.f64 (sin.f64 y) y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (sin.f64 y) y) z) (*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 0) (/.f64 (/.f64 (sin.f64 y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (/.f64 (sin.f64 y) y) z) (*.f64 0 (/.f64 (/.f64 (sin.f64 y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (/.f64 (sin.f64 y) y) z)) (/.f64 (/.f64 (sin.f64 y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (/.f64 (sin.f64 y) y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 z)) (/.f64 (/.f64 (sin.f64 y) y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 (sin.f64 y) y) z)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2)) (cbrt.f64 (/.f64 (/.f64 (sin.f64 y) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (/.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 (/.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (cbrt.f64 z)) (/.f64 (/.f64 1 y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 (sin.f64 y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (/.f64 (sin.f64 y) y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) z) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) (neg.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 (*.f64 z z))) (cbrt.f64 (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 y) (cbrt.f64 (*.f64 z z))) (/.f64 (sin.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 z) (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 y) z) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (/.f64 1 (neg.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (neg.f64 z)) (/.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) z) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (sin.f64 y)) (*.f64 (cbrt.f64 (*.f64 z z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (neg.f64 (sin.f64 y))) (*.f64 (cbrt.f64 (*.f64 z z)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (sin.f64 y) (cbrt.f64 y))) (*.f64 (neg.f64 z) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (cbrt.f64 z)) (*.f64 y (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (cbrt.f64 (/.f64 1 z))) (*.f64 (neg.f64 y) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) -1) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) 1) (*.f64 (cbrt.f64 (*.f64 y y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (cbrt.f64 (/.f64 1 z))) (*.f64 (cbrt.f64 (*.f64 y y)) (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) (neg.f64 (neg.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) y) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (neg.f64 (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2)) (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y)))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2)) (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 z)) (/.f64 1 y)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 1 z)) (/.f64 (sin.f64 y) y)) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 (sin.f64 y) y) z)) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 z) (/.f64 (sin.f64 y) (cbrt.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) (neg.f64 y))) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2))) (cbrt.f64 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 2))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) z)) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (/.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) z)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 z)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 1 z)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 (/.f64 1 y) (cbrt.f64 (*.f64 z z)))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (/.f64 -1 z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 -1 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (cbrt.f64 z)) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (neg.f64 z)) (cbrt.f64 y)) (neg.f64 (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (neg.f64 z)) -1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (neg.f64 z)) (cbrt.f64 (neg.f64 y))) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) (neg.f64 z)) 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) z) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) z) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 y) y) -1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)) 1) (cbrt.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) (/.f64 (*.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (/.f64 (neg.f64 (*.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (*.f64 (neg.f64 (*.f64 y z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) (*.f64 (*.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) (*.f64 (neg.f64 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (*.f64 z (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) (*.f64 (neg.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 y) (neg.f64 z))) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z))) (neg.f64 (cbrt.f64 (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (sin.f64 y) y) z)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (sin.f64 y) y) z)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 (sin.f64 y) y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (sin.f64 y) y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (/.f64 (sin.f64 y) y) (neg.f64 z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (sin.f64 y) (neg.f64 y)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 1 z) (/.f64 (sin.f64 y) (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 (sin.f64 y) y) z) 3))))))"]],"rules":[["egg-rr",97],["egg-rr",78]],"time":29.2080078125,"type":"rewrite"},{"count":[[235,189]],"inputs":[["(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 1 z)","(+.f64 (*.f64 -1/6 (/.f64 (pow.f64 y 2) z)) (/.f64 1 z))","(+.f64 (*.f64 -1/6 (/.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 1/120 (/.f64 (pow.f64 y 4) z)) (/.f64 1 z)))","(+.f64 (*.f64 -1/5040 (/.f64 (pow.f64 y 6) z)) (+.f64 (*.f64 -1/6 (/.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 1/120 (/.f64 (pow.f64 y 4) z)) (/.f64 1 z))))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(/.f64 (+.f64 x (*.f64 -1/6 (*.f64 (*.f64 x y) y))) z)","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(fma.f64 1/120 (*.f64 (pow.f64 y 4) (/.f64 x z)) (/.f64 (+.f64 x (*.f64 -1/6 (*.f64 (*.f64 x y) y))) z))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(+.f64 (/.f64 (+.f64 (*.f64 (*.f64 -1/5040 x) (pow.f64 y 6)) (*.f64 (*.f64 1/120 x) (pow.f64 y 4))) z) (/.f64 (+.f64 x (*.f64 -1/6 (*.f64 (*.f64 x y) y))) z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 1 z)","(+.f64 (*.f64 -1/6 (/.f64 (pow.f64 y 2) z)) (/.f64 1 z))","(/.f64 (+.f64 (*.f64 -1/6 (*.f64 y y)) 1) z)","(+.f64 (*.f64 -1/6 (/.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 1/120 (/.f64 (pow.f64 y 4) z)) (/.f64 1 z)))","(fma.f64 -1/6 (/.f64 (*.f64 y y) z) (/.f64 (+.f64 1 (*.f64 1/120 (pow.f64 y 4))) z))","(+.f64 (*.f64 -1/5040 (/.f64 (pow.f64 y 6) z)) (+.f64 (*.f64 -1/6 (/.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 1/120 (/.f64 (pow.f64 y 4) z)) (/.f64 1 z))))","(+.f64 (/.f64 (+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (*.f64 -1/6 (*.f64 y y))) z) (/.f64 (+.f64 1 (*.f64 1/120 (pow.f64 y 4))) z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))","(/.f64 (sin.f64 y) (*.f64 y z))"]],"time":168.138916015625,"type":"simplify"},{"compiler":[[3769,1348]],"time":33.755859375,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","done",2.7999001465266304],["(/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)","fresh",8.947915919846334],["(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","done",3.1981597428421957],["(/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) y)","fresh",7.3198483625787505],["(/.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (/.f64 x z))) (cbrt.f64 y))","fresh",11.240286039128636],["(*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 x z))) y))","fresh",21.49119139712849],["(/.f64 (*.f64 x (*.f64 (/.f64 1 y) (sin.f64 y))) z)","fresh",4.054493978608799],["(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","done",2.668632519536884]],"compiler":[[14,10],[11,7],[11,7],[11,7],[21,14],[19,12],[13,9],[11,7]],"count":[[281,8]],"kept":[{"done":[2,2],"fresh":[5,4],"new":[273,1],"picked":[1,1]}],"min-error":[0],"time":100.218017578125,"type":"prune"},{"accuracy":[0.146816259768442],"baseline":[2.668632519536884],"branch":[["x",0.150722509768442,3],["y",1.1477004651852925,2],["z",0.185878759768442,3],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)",0.9186325195368841,2],["(*.f64 x (/.f64 (sin.f64 y) y))",0.146816259768442,3],["(/.f64 (sin.f64 y) y)",1.6124228832554086,3],["(/.f64 (sin.f64 y) y)",1.6124228832554086,3]],"compiler":[[4,3],[4,3],[4,3],[11,7],[9,6],[7,5],[7,5],[175,61]],"count":[[16,3]],"inputs":[["(/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)","(/.f64 (*.f64 (sin.f64 y) (/.f64 x z)) y)","(/.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (/.f64 x z))) (cbrt.f64 y))","(*.f64 (cbrt.f64 (pow.f64 (/.f64 x z) 2)) (/.f64 (*.f64 (sin.f64 y) (cbrt.f64 (/.f64 x z))) y))","(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3) (/.f64 x z))","(/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(/.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) x) (cbrt.f64 (/.f64 (sin.f64 y) y))) z)","(/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)","(/.f64 (*.f64 x (*.f64 (/.f64 1 y) (sin.f64 y))) z)","(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)) z)","(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","(/.f64 (*.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (/.f64 -1 z)) y)","(/.f64 (*.f64 (/.f64 (sin.f64 y) (cbrt.f64 y)) (/.f64 x z)) (cbrt.f64 (*.f64 y y)))","(/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)","(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)"]],"link":["."],"name":["Linear.Quaternion:$ctanh from linear-1.19.1.3"],"oracle":[40.71492449664768],"outputs":[["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","(*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x)","(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)"]],"time":95.26611328125,"times":[["x",15.27294921875],["y",10.590087890625],["z",15.426025390625],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)",8.906005859375],["(*.f64 x (/.f64 (sin.f64 y) y))",14.98779296875],["(/.f64 (sin.f64 y) y)",13.39501953125],["(/.f64 (sin.f64 y) y)",13.4580078125]],"type":"regimes"},{"bstep":[[1.0478e-319,4.541761643601979e-301,0.031982421875],[-8.581279932091765e-285,-4.181801992125311e-287,0.10498046875]],"compiler":[[8,6],[9,6]],"method":["left-value","left-value"],"time":0.26708984375,"type":"bsearch"},{"compiler":[[45,15]],"inputs":[["(if (<=.f64 (*.f64 x (/.f64 (sin.f64 y) y)) -6696928794914171/1339385758982834151185531311325002263201756014631917009304687985462938813906170153116497973519619822659493341146941433531483931607115392554498072196837321850491820971853028873177634325632796392734744272769130809372947742658424845944895692993259632864321399559710817770957553728956578048354650708508672) (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z) (if (<=.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 1265/6325070415853456823515479584966165845298645305129441198653167438357198111499854590373761990669910140474596183259900372230931523043306046152094168748148078435047419508642698792639590866940413010663742739952273283392562733857021646831815729864036236135650314266011211548510419206725953204130822734645187695728365866909171712) (*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x) (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 x (/.f64 (sin.f64 y) y)) -6696928794914171/1339385758982834151185531311325002263201756014631917009304687985462938813906170153116497973519619822659493341146941433531483931607115392554498072196837321850491820971853028873177634325632796392734744272769130809372947742658424845944895692993259632864321399559710817770957553728956578048354650708508672) (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z) (if (<=.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 1265/6325070415853456823515479584966165845298645305129441198653167438357198111499854590373761990669910140474596183259900372230931523043306046152094168748148078435047419508642698792639590866940413010663742739952273283392562733857021646831815729864036236135650314266011211548510419206725953204130822734645187695728365866909171712) (*.f64 (/.f64 (/.f64 (sin.f64 y) y) z) x) (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)))","(if (<=.f64 (*.f64 (sin.f64 y) (/.f64 x y)) -6696928794914171/1339385758982834151185531311325002263201756014631917009304687985462938813906170153116497973519619822659493341146941433531483931607115392554498072196837321850491820971853028873177634325632796392734744272769130809372947742658424845944895692993259632864321399559710817770957553728956578048354650708508672) (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) (if (<=.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1265/6325070415853456823515479584966165845298645305129441198653167438357198111499854590373761990669910140474596183259900372230931523043306046152094168748148078435047419508642698792639590866940413010663742739952273283392562733857021646831815729864036236135650314266011211548510419206725953204130822734645187695728365866909171712) (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z) (/.f64 (*.f64 (sin.f64 y) (/.f64 x y)) z)))"]],"stop":[["fuel",1]],"time":20.406005859375,"type":"simplify"},{"time":0.005859375,"type":"soundness"},{"compiler":[[45,15]],"remove-preprocessing":[[]],"time":10.611083984375,"type":"end"}]
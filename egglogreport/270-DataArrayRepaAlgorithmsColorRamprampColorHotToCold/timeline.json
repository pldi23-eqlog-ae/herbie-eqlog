[{"compiler":[[17,13]],"method":["search"],"sampling":[[12,0.39200334013526117,0.5158451913720228,0.09215146849271605],[11,0.25353449859494503,0.6981950038230025,0.048270497582052485],[10,0.2106286603711851,0.745001372794377,0.044369966834437946],[9,0.15602122990458156,0.8191114569990532,0.02486731309636525],[8,0.0,0.998535871389322,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":127.68798828125,"type":"analyze"},{"outcomes":[["body",256,"invalid",58.23486328125,1245],["body",256,"valid",390.250244140625,8256]],"time":457.4130859375,"type":"sample"},{"compiler":[[16,12]],"inputs":[["0","1","2"],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 y (*.f64 x 3/4)) z)) x))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 z (*.f64 y 3/4)) x)) y))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 z 3/4)) y)) z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))","(+.f64 1 (*.f64 (-.f64 (fma.f64 3/4 y x) z) (/.f64 4 y)))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 y (*.f64 x 3/4)) z)) x))","(+.f64 1 (*.f64 (-.f64 (fma.f64 3/4 x y) z) (/.f64 4 x)))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 z (*.f64 y 3/4)) x)) y))","(+.f64 1 (*.f64 (-.f64 (fma.f64 3/4 y z) x) (/.f64 4 y)))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 z 3/4)) y)) z))","(+.f64 1 (*.f64 (-.f64 (fma.f64 3/4 z x) y) (/.f64 4 z)))"]],"symmetry":[[]],"time":83.116943359375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))","(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)"]],"time":21.56103515625,"type":"simplify"},{"compiler":[[27,19]],"time":0.48193359375,"type":"eval"},{"alts":[["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","next",0.26171875],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))","fresh",0.5625]],"compiler":[[14,10],[16,12],[14,10],[16,12]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0234375],"time":1.52099609375,"type":"prune"},{"compiler":[[32,17]],"locations":[["(fma.f64 y 3/4 (-.f64 x z))",0.0546875,true],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)",0.25390625,true]],"time":7.489013671875,"type":"localize"},{"count":[[2,72]],"series":[["(fma.f64 y 3/4 (-.f64 x z))","z","-inf",0.158935546875],["(fma.f64 y 3/4 (-.f64 x z))","z","inf",0.7021484375],["(fma.f64 y 3/4 (-.f64 x z))","z","0",0.156982421875],["(fma.f64 y 3/4 (-.f64 x z))","x","-inf",0.14794921875],["(fma.f64 y 3/4 (-.f64 x z))","x","inf",0.177001953125],["(fma.f64 y 3/4 (-.f64 x z))","x","0",0.156982421875],["(fma.f64 y 3/4 (-.f64 x z))","y","-inf",0.156982421875],["(fma.f64 y 3/4 (-.f64 x z))","y","inf",0.177001953125],["(fma.f64 y 3/4 (-.f64 x z))","y","0",0.156982421875],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","z","-inf",0.2919921875],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","z","inf",0.359130859375],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","z","0",0.4150390625],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","x","-inf",0.56494140625],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","x","inf",0.3349609375],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","x","0",0.531005859375],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","y","-inf",0.632080078125],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","y","inf",0.513916015625],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","y","0",0.6708984375]],"time":6.531982421875,"type":"series"},{"count":[[2,97]],"inputs":[["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","(fma.f64 y 3/4 (-.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) 0) (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) (*.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)) (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) (*.f64 0 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 0) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 0 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 3) 1) (/.f64 1 (+.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 2) (neg.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)) (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) 2)) (cbrt.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 3) 1) (+.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 2) (neg.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 3) 1) 1) (+.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 2) (neg.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 3) 1) (+.f64 1 (-.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 2) (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 3) 1) 1) (*.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 2) (neg.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 3) 1)) (neg.f64 (+.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 2) (neg.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) 4) 1) y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) -4) 1) (neg.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 y (*.f64 (fma.f64 y 3/4 (-.f64 x z)) 4)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (neg.f64 y) (*.f64 (fma.f64 y 3/4 (-.f64 x z)) -4)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) 4) (/.f64 1 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (cbrt.f64 (/.f64 4 y))) (cbrt.f64 (/.f64 16 (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 4 y) (fma.f64 y 3/4 (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y))) (cbrt.f64 (pow.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y 3/4 (-.f64 x z))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 y 3/4 (-.f64 x z)) 2)) (/.f64 4 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y 3/4 (-.f64 x z)) 0) (fma.f64 y 3/4 (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 3/4 (-.f64 x z)) (*.f64 (fma.f64 y 3/4 (-.f64 x z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y 3/4) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y 3/4 (-.f64 x z))) (fma.f64 y 3/4 (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 3/4 (-.f64 x z)) (*.f64 0 (fma.f64 y 3/4 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x z) (*.f64 y 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y 3/4 x) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (fma.f64 y 3/4 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y 3/4) (neg.f64 z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (+.f64 (neg.f64 z) (*.f64 y 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 y 3/4) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y 3/4 x) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y 3/4) 0) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 y 3/4) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 z (*.f64 y 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (-.f64 z x) (*.f64 y 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (*.f64 y 3/4) z) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 y 3/4 x) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 y 3/4 x) 0) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y 3/4 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y 3/4 (-.f64 x z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y 3/4 (-.f64 x z))) (cbrt.f64 (pow.f64 (fma.f64 y 3/4 (-.f64 x z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y 3/4 (-.f64 x z)) 2)) (cbrt.f64 (fma.f64 y 3/4 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y 3/4 (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y 3/4 (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y 3/4 (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y 3/4 (-.f64 x z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 3/4 (-.f64 x z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 3/4 (-.f64 x z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y 3/4 (-.f64 x z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y 3/4 (-.f64 x z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y 3/4 (-.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 z (fma.f64 y 3/4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (-.f64 z x) (*.f64 y 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y 3/4 (-.f64 x z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 3/4 (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (cbrt.f64 (*.f64 (*.f64 y y) 27/64)) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 3/4)) (sqrt.f64 3/4) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3/4 y (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y 3/4)) (cbrt.f64 (*.f64 (*.f64 y y) 9/16)) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 3/4)) (cbrt.f64 9/16) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (-.f64 z x) (*.f64 y 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x z)) (cbrt.f64 (pow.f64 (-.f64 x z) 2)) (*.f64 y 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 x z) 2)) (cbrt.f64 (-.f64 x z)) (*.f64 y 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y 3/4) (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y 3/4) 1 (-.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x z) 1 (*.f64 y 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x z) (*.f64 y 3/4))))))"]],"rules":[["egg-rr",48],["egg-rr",49]],"time":26.4140625,"type":"rewrite"},{"count":[[169,124]],"inputs":[["(*.f64 4 (/.f64 (-.f64 x z) y))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","4","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","4","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) 1)","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(*.f64 4 (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(*.f64 4 (/.f64 x y))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) 1)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(*.f64 -4 (/.f64 z y))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(*.f64 -4 (/.f64 z y))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(-.f64 x z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(*.f64 3/4 y)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(*.f64 3/4 y)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (*.f64 3/4 y) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","x","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","x","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(+.f64 (*.f64 3/4 y) x)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 4 (/.f64 (-.f64 x z) y))","(/.f64 (*.f64 4 (-.f64 x z)) y)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 (/.f64 (-.f64 x z) y) 4 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 (/.f64 (-.f64 x z) y) 4 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 (/.f64 (-.f64 x z) y) 4 4)","4","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 (/.f64 (-.f64 x z) y) 4 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 (/.f64 (-.f64 x z) y) 4 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 (/.f64 (-.f64 x z) y) 4 4)","4","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 (/.f64 (-.f64 x z) y) 4 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 (/.f64 (-.f64 x z) y) 4 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 (/.f64 (-.f64 x z) y) 4 4)","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) 1)","(fma.f64 4 (-.f64 3/4 (/.f64 z y)) 1)","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(*.f64 4 (/.f64 x y))","(/.f64 (*.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(*.f64 4 (/.f64 x y))","(/.f64 (*.f64 4 x) y)","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (-.f64 (*.f64 3/4 y) z) y)) (+.f64 1 (*.f64 4 (/.f64 x y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) 1)","(fma.f64 4 (/.f64 (fma.f64 3/4 y x) y) 1)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(*.f64 -4 (/.f64 z y))","(/.f64 (*.f64 -4 z) y)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(*.f64 -4 (/.f64 z y))","(/.f64 (*.f64 -4 z) y)","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(+.f64 1 (+.f64 (*.f64 4 (/.f64 (+.f64 (*.f64 3/4 y) x) y)) (*.f64 -4 (/.f64 z y))))","(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(-.f64 x z)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(*.f64 3/4 y)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(*.f64 3/4 y)","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (*.f64 3/4 y) z)","(fma.f64 3/4 y (neg.f64 z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","x","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","x","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(-.f64 (+.f64 (*.f64 3/4 y) x) z)","(fma.f64 3/4 y (-.f64 x z))","(+.f64 (*.f64 3/4 y) x)","(fma.f64 3/4 y x)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(fma.f64 3/4 y (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(fma.f64 3/4 y (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(fma.f64 3/4 y (-.f64 x z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(fma.f64 3/4 y (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(fma.f64 3/4 y (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(fma.f64 3/4 y (-.f64 x z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(fma.f64 3/4 y (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(fma.f64 3/4 y (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 3/4 y) x))","(fma.f64 3/4 y (-.f64 x z))"]],"time":272.966796875,"type":"simplify"},{"compiler":[[1867,1156]],"time":25.552001953125,"type":"eval"},{"alts":[["(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","next",0.00390625],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","done",0.26171875]],"compiler":[[16,12],[14,10],[16,12]],"count":[[126,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[124,1],"picked":[1,1]}],"min-error":[0],"time":29.31201171875,"type":"prune"},{"compiler":[[53,25]],"locations":[["(+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))",0.00390625,true]],"time":9.833984375,"type":"localize"},{"count":[[1,36]],"series":[["(+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))","x","-inf",0.2119140625],["(+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))","x","inf",0.267822265625],["(+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))","x","0",0.344970703125],["(+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))","y","-inf",0.369140625],["(+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))","y","inf",0.359130859375],["(+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))","y","0",0.346923828125],["(+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))","z","-inf",0.19384765625],["(+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))","z","inf",0.363037109375],["(+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))","z","0",0.47216796875]],"time":3.067138671875,"type":"series"},{"count":[[1,93]],"inputs":[["(+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) (*.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) 0) (+.f64 3/4 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) (*.f64 0 (+.f64 3/4 (/.f64 (-.f64 x z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 3/4 (/.f64 (-.f64 x z) y))) (+.f64 3/4 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x y) (-.f64 3/4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 x y) 3/4) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 3/4 (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 z y)) (+.f64 (/.f64 x y) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 x z) y) 3/4)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 x y) 3/4) 1) (neg.f64 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 3/4 (*.f64 (/.f64 (-.f64 x z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 27/64 (+.f64 9/16 (*.f64 (/.f64 (-.f64 z x) y) (+.f64 3/4 (/.f64 (-.f64 z x) y))))) (/.f64 (pow.f64 (/.f64 (-.f64 z x) y) 3) (+.f64 9/16 (*.f64 (/.f64 (-.f64 z x) y) (+.f64 3/4 (/.f64 (-.f64 z x) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x y) (+.f64 (/.f64 z y) -3/4))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 3/4 (/.f64 (-.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 x y) (/.f64 27/64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))) (/.f64 (pow.f64 (/.f64 z y) 3) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 x y) 0) (+.f64 (/.f64 z y) -3/4))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 27/64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (-.f64 (/.f64 (pow.f64 (/.f64 z y) 3) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (+.f64 (/.f64 z y) -3/4) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 3/4 (/.f64 z y)) (neg.f64 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (-.f64 x z) y) -3/4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (+.f64 -3/4 (/.f64 (-.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 x y) 3/4) (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 (/.f64 x y) 3/4) 0) (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 27/64 (pow.f64 (/.f64 (-.f64 z x) y) 3)) (/.f64 1 (+.f64 9/16 (*.f64 (/.f64 (-.f64 z x) y) (+.f64 3/4 (/.f64 (-.f64 z x) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 27/64 (pow.f64 (/.f64 z y) 3)) (neg.f64 y) (*.f64 (neg.f64 x) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))) (/.f64 1 (*.f64 (neg.f64 y) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y))) (cbrt.f64 (pow.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (-.f64 3/4 (/.f64 z y)) 2)) (-.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (*.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))) (+.f64 (cbrt.f64 (-.f64 3/4 (/.f64 z y))) (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (-.f64 (cbrt.f64 (pow.f64 (-.f64 3/4 (/.f64 z y)) 2)) (cbrt.f64 (*.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))) (+.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 (-.f64 3/4 (/.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) 2)) (cbrt.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 3/4 (/.f64 (-.f64 x z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (+.f64 -3/4 (/.f64 (-.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -3/4 (/.f64 (-.f64 z x) y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16) (*.f64 y (-.f64 27/64 (pow.f64 (/.f64 z y) 3)))) (/.f64 1 (*.f64 y (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 27/64 (pow.f64 (/.f64 (-.f64 z x) y) 3)) (+.f64 9/16 (*.f64 (/.f64 (-.f64 z x) y) (+.f64 3/4 (/.f64 (-.f64 z x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 27/64 (pow.f64 (/.f64 (-.f64 z x) y) 3)) 1) (+.f64 9/16 (*.f64 (/.f64 (-.f64 z x) y) (+.f64 3/4 (/.f64 (-.f64 z x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 27/64 (pow.f64 (/.f64 (-.f64 x z) y) 3)) (+.f64 9/16 (-.f64 (pow.f64 (/.f64 (-.f64 z x) y) 2) (*.f64 3/4 (/.f64 (-.f64 x z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (pow.f64 (/.f64 z y) 3) 27/64) (neg.f64 y)) (*.f64 (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (neg.f64 x))) (*.f64 (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (pow.f64 (/.f64 z y) 3) 27/64) (cbrt.f64 (*.f64 y y))) (*.f64 (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (/.f64 x (cbrt.f64 y)))) (*.f64 (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 (pow.f64 (/.f64 z y) 3) 27/64) y) (*.f64 (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) x)) (*.f64 (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))) (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 (pow.f64 (/.f64 z y) 3) 27/64))) (*.f64 (cbrt.f64 (*.f64 y y)) (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (neg.f64 x) (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))) (*.f64 (neg.f64 y) (-.f64 (pow.f64 (/.f64 z y) 3) 27/64))) (*.f64 (neg.f64 y) (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 x (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))) (*.f64 y (-.f64 (pow.f64 (/.f64 z y) 3) 27/64))) (*.f64 y (neg.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 27/64 (pow.f64 (/.f64 (-.f64 z x) y) 3))) (neg.f64 (+.f64 9/16 (*.f64 (/.f64 (-.f64 z x) y) (+.f64 3/4 (/.f64 (-.f64 z x) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (-.f64 27/64 (pow.f64 (/.f64 z y) 3)) (neg.f64 y) (*.f64 (neg.f64 x) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)))) (neg.f64 (*.f64 (neg.f64 y) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16) (*.f64 y (-.f64 27/64 (pow.f64 (/.f64 z y) 3)))) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (-.f64 27/64 (pow.f64 (/.f64 z y) 3)) (neg.f64 y) (*.f64 (neg.f64 x) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (-.f64 27/64 (pow.f64 (/.f64 z y) 3)) (neg.f64 y) (*.f64 (neg.f64 x) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))) (*.f64 (neg.f64 y) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16) (*.f64 y (-.f64 27/64 (pow.f64 (/.f64 z y) 3)))) 1) (*.f64 y (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 (-.f64 27/64 (pow.f64 (/.f64 z y) 3)) (neg.f64 y) (*.f64 (neg.f64 x) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))) 1) (*.f64 (neg.f64 y) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (-.f64 27/64 (pow.f64 (/.f64 z y) 3)) (cbrt.f64 (*.f64 y y))) (*.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16) (/.f64 x (cbrt.f64 y)))) (*.f64 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16) (cbrt.f64 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 27/64 (pow.f64 (/.f64 z y) 3)))) (*.f64 (cbrt.f64 (*.f64 y y)) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16) (*.f64 y (-.f64 27/64 (pow.f64 (/.f64 z y) 3)))) (*.f64 y (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 (pow.f64 (/.f64 z y) 3) 27/64))) (*.f64 (cbrt.f64 (*.f64 y y)) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 x) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (*.f64 (neg.f64 y) (-.f64 (pow.f64 (/.f64 z y) 3) 27/64))) (*.f64 (neg.f64 y) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (*.f64 y (-.f64 (pow.f64 (/.f64 z y) 3) 27/64))) (*.f64 y (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16) (*.f64 y (-.f64 27/64 (pow.f64 (/.f64 z y) 3))))) (*.f64 (neg.f64 y) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (-.f64 27/64 (pow.f64 (/.f64 z y) 3)) (neg.f64 y) (*.f64 (neg.f64 x) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))) (neg.f64 y)) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16) (*.f64 y (-.f64 27/64 (pow.f64 (/.f64 z y) 3)))) y) (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (+.f64 -3/4 (/.f64 (-.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 -3/4 (/.f64 (-.f64 z x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 (/.f64 z y) -3/4) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 x y)) (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (-.f64 3/4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 y) (-.f64 3/4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 3/4 (/.f64 z y))) (cbrt.f64 (pow.f64 (-.f64 3/4 (/.f64 z y)) 2)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 3/4) (cbrt.f64 9/16) (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 3/4) (sqrt.f64 3/4) (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (/.f64 (cbrt.f64 (*.f64 x x)) y) (-.f64 3/4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x y) 2)) (cbrt.f64 (/.f64 x y)) (-.f64 3/4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1 y)) (/.f64 x (cbrt.f64 (*.f64 y y))) (-.f64 3/4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (/.f64 x y)) (-.f64 3/4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 -1 y) (-.f64 3/4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) x (-.f64 3/4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 3/4)) (neg.f64 (sqrt.f64 3/4)) (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 9/16) (cbrt.f64 3/4) (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -3/4 (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 (/.f64 z y) -3/4) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 3/4 (/.f64 z y)) 2)) (cbrt.f64 (-.f64 3/4 (/.f64 z y))) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 x y) (-.f64 3/4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 3/4 (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) 1 (-.f64 3/4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3/4 1 (/.f64 (-.f64 x z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 3/4 (/.f64 z y)) 1 (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 27/64 (pow.f64 (/.f64 z y) 3)) (/.f64 1 (fma.f64 (/.f64 z y) (+.f64 3/4 (/.f64 z y)) 9/16)) (/.f64 x y))))))"]],"rules":[["egg-rr",93]],"time":28.243896484375,"type":"rewrite"},{"count":[[129,103]],"inputs":[["(+.f64 3/4 (/.f64 x y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(*.f64 -1 (/.f64 z y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(*.f64 -1 (/.f64 z y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(/.f64 (-.f64 x z) y)","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","3/4","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","3/4","(+.f64 3/4 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y)))","(+.f64 3/4 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y)))","(+.f64 3/4 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y)))","(-.f64 3/4 (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(/.f64 x y)","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(/.f64 x y)","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 3/4 (/.f64 x y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(*.f64 -1 (/.f64 z y))","(neg.f64 (/.f64 z y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(+.f64 3/4 (+.f64 (/.f64 x y) (*.f64 -1 (/.f64 z y))))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(/.f64 (-.f64 x z) y)","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","3/4","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","3/4","(+.f64 3/4 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y)))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(+.f64 3/4 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y)))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(+.f64 3/4 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 x) (*.f64 -1 z)) y)))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(-.f64 3/4 (/.f64 z y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(/.f64 x y)","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(/.f64 x y)","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))","(-.f64 (+.f64 3/4 (/.f64 x y)) (/.f64 z y))","(+.f64 3/4 (/.f64 (-.f64 x z) y))"]],"time":132.10107421875,"type":"simplify"},{"compiler":[[2360,1293]],"time":24.195068359375,"type":"eval"},{"alts":[["(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","done",0.00390625],["(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","done",0.26171875]],"compiler":[[16,12],[14,10]],"count":[[105,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[103,0],"picked":[1,1]}],"min-error":[0],"time":27.1279296875,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))",0.00390625,1],["(/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y)",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[16,12],[14,10],[40,28]],"count":[[3,1]],"inputs":[["(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(fma.f64 (fma.f64 y 3/4 (-.f64 x z)) (/.f64 4 y) 1)","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))"]],"link":["."],"name":["Data.Array.Repa.Algorithms.ColorRamp:rampColorHotToCold from repa-algorithms-3.4.0.1, A"],"oracle":[0.8046875],"outputs":[["(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))"]],"time":15.218017578125,"times":[["x",2.7529296875],["y",2.705078125],["z",2.68798828125],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))",2.72900390625],["(/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y)",3.162841796875]],"type":"regimes"},{"compiler":[[16,12]],"inputs":[["(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 1 (*.f64 4 (+.f64 (-.f64 3/4 (/.f64 z y)) (/.f64 x y))))","(fma.f64 (+.f64 3/4 (/.f64 (-.f64 x z) y)) 4 1)"]],"stop":[["done",1]],"time":27.64501953125,"type":"simplify"},{"time":0.02490234375,"type":"soundness"},{"compiler":[[16,12]],"remove-preprocessing":[[]],"time":11.3271484375,"type":"end"}]
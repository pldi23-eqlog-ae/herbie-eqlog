[{"compiler":[[16,12]],"method":["search"],"sampling":[[12,0.25938529471636684,0.21842972186641418,0.522184983417219],[11,0.21842972186641418,0.2671863562115959,0.5143839219219899],[10,0.18722547588549787,0.3003408675663195,0.5124336565481826],[9,0.1404191069141234,0.3900530747614539,0.4695278183244227],[8,0.09361273794274894,0.4680636897137447,0.4383235723435064],[7,0.062408491961832624,0.499267935694661,0.4383235723435064],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":66.902099609375,"type":"analyze"},{"outcomes":[["body",256,"invalid",44.06591796875,804],["body",256,"valid",465.316162109375,8256]],"time":518.81494140625,"type":"sample"},{"compiler":[[15,11]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","(+.f64 (*.f64 y 1/2) (*.f64 x (+.f64 (-.f64 1 z) (log.f64 z))))","(+.f64 (*.f64 z 1/2) (*.f64 y (+.f64 (-.f64 1 x) (log.f64 x))))","(+.f64 (*.f64 x 1/2) (*.f64 z (+.f64 (-.f64 1 y) (log.f64 y))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","(+.f64 (*.f64 y 1/2) (*.f64 x (+.f64 (-.f64 1 z) (log.f64 z))))","(fma.f64 x (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 y 1/2))","(+.f64 (*.f64 z 1/2) (*.f64 y (+.f64 (-.f64 1 x) (log.f64 x))))","(fma.f64 y (+.f64 (-.f64 1 x) (log.f64 x)) (*.f64 z 1/2))","(+.f64 (*.f64 x 1/2) (*.f64 z (+.f64 (-.f64 1 y) (log.f64 y))))","(fma.f64 (+.f64 (-.f64 1 y) (log.f64 y)) z (*.f64 x 1/2))"]],"symmetry":[[]],"time":76.993896484375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))"]],"time":20.343017578125,"type":"simplify"},{"compiler":[[26,17]],"time":0.440185546875,"type":"eval"},{"alts":[["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","next",0.09375]],"compiler":[[14,10],[14,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.09375],"time":0.948974609375,"type":"prune"},{"compiler":[[33,19]],"locations":[["(+.f64 (-.f64 1 z) (log.f64 z))",0.00390625,true],["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))",0.09375,true]],"time":8.620849609375,"type":"localize"},{"count":[[2,48]],"series":[["(+.f64 (-.f64 1 z) (log.f64 z))","z","-inf",0.173828125],["(+.f64 (-.f64 1 z) (log.f64 z))","z","inf",0.18017578125],["(+.f64 (-.f64 1 z) (log.f64 z))","z","0",0.16015625],["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","x","-inf",0.2900390625],["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","x","inf",0.2939453125],["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","x","0",1.15087890625],["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","z","-inf",1.426025390625],["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","z","inf",0.987060546875],["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","z","0",2.43798828125],["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","y","-inf",0.3349609375],["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","y","inf",0.3408203125],["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","y","0",4.27001953125]],"time":12.251953125,"type":"series"},{"count":[[2,106]],"inputs":[["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","(+.f64 (-.f64 1 z) (log.f64 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (log.f64 z))) (*.f64 y (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 1 z)) (+.f64 (*.f64 y (log.f64 z)) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 y (-.f64 1 z)) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)) 0) (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)) (*.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))) (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)) (*.f64 0 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)) 2)) (cbrt.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (+.f64 (-.f64 1 z) (log.f64 z)))) (cbrt.f64 (pow.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 2)) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) (cbrt.f64 (pow.f64 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))) 2)) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (-.f64 1 z) (log.f64 z))) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 1/2)) (cbrt.f64 (*.f64 (*.f64 x x) 1/4)) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 1/2)) (sqrt.f64 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x 1/2)) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/4)) (cbrt.f64 (*.f64 x 1/2)) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/8 x)) (cbrt.f64 (*.f64 x x)) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 (*.f64 x x) 1/8)) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/2 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 1/2)) (cbrt.f64 1/4) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/2) (*.f64 x (sqrt.f64 1/2)) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) x) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))) 1 (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x 1/2) 1 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 0) (+.f64 (-.f64 1 z) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (+.f64 (-.f64 1 z) (log.f64 z))) (+.f64 (-.f64 1 z) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 0 (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 1 z) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 z) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (log.f64 z) 1) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (+.f64 (log.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 (-.f64 1 z) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 (log.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log.f64 z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (+.f64 0 (-.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (-.f64 (log.f64 z) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 1 z) (neg.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (-.f64 (log.f64 z) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 1 (*.f64 (-.f64 z (log.f64 z)) (-.f64 (+.f64 1 z) (log.f64 z))))) (/.f64 (pow.f64 (-.f64 z (log.f64 z)) 3) (+.f64 1 (*.f64 (-.f64 z (log.f64 z)) (-.f64 (+.f64 1 z) (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 z) (+.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 z (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (log.f64 z) 0) (+.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (log.f64 z) (/.f64 1 (fma.f64 z z (+.f64 1 z)))) (/.f64 (pow.f64 z 3) (fma.f64 z z (+.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (+.f64 z -1) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 -1 (-.f64 (log.f64 z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (+.f64 0 (-.f64 z (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 z (+.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (log.f64 z) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (fma.f64 z z (+.f64 1 z))) (-.f64 (/.f64 (pow.f64 z 3) (fma.f64 z z (+.f64 1 z))) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (-.f64 z (+.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z (+.f64 (log.f64 z) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (-.f64 z (log.f64 z)) 3)) (/.f64 1 (+.f64 1 (*.f64 (-.f64 z (log.f64 z)) (-.f64 (+.f64 1 z) (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (-.f64 1 z) (log.f64 z))) (cbrt.f64 (pow.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (-.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (cbrt.f64 (*.f64 (-.f64 1 z) (log.f64 z))))) (+.f64 (cbrt.f64 (-.f64 1 z)) (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (-.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (cbrt.f64 (*.f64 (-.f64 1 z) (log.f64 z))))) (+.f64 (cbrt.f64 (log.f64 z)) (cbrt.f64 (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 2)) (cbrt.f64 (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (-.f64 1 z) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (-.f64 z (log.f64 z)) 3)) (+.f64 1 (*.f64 (-.f64 z (log.f64 z)) (-.f64 (+.f64 1 z) (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 (-.f64 z (log.f64 z)) 3)) 1) (+.f64 1 (*.f64 (-.f64 z (log.f64 z)) (-.f64 (+.f64 1 z) (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (-.f64 z (log.f64 z)) 3))) (neg.f64 (+.f64 1 (*.f64 (-.f64 z (log.f64 z)) (-.f64 (+.f64 1 z) (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (-.f64 (log.f64 z) z) 3)) (+.f64 1 (*.f64 (-.f64 z (log.f64 z)) (-.f64 (+.f64 1 z) (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (-.f64 1 z) (log.f64 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (-.f64 1 z) (log.f64 z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (-.f64 1 z) (log.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 z (+.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (-.f64 z (+.f64 (log.f64 z) 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (+.f64 z -1) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 z)) (cbrt.f64 (pow.f64 (log.f64 z) 2)) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 z)) (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 -1 (-.f64 (log.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 z -1) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (cbrt.f64 (-.f64 1 z)) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (cbrt.f64 (log.f64 z)) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (log.f64 z)) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 z) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 z) (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 1 (-.f64 (log.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 z) 1 (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 z 3)) (/.f64 1 (fma.f64 z z (+.f64 1 z))) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 z) 1 (-.f64 1 z))))))"]],"rules":[["egg-rr",62],["egg-rr",44]],"time":27.55615234375,"type":"rewrite"},{"count":[[154,124]],"inputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 (+.f64 1 (log.f64 z)) y))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (+.f64 1 (log.f64 z)) y)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (+.f64 1 (log.f64 z)) y)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (+.f64 1 (log.f64 z)) y)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 (/.f64 1 z))))) (*.f64 -1 (*.f64 y z))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 (/.f64 1 z))))) (*.f64 -1 (*.f64 y z))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 (/.f64 1 z))))) (*.f64 -1 (*.f64 y z))))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 1 (log.f64 z))","(+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))","(+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))","(+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) 1))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) 1))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) 1))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(+.f64 (*.f64 -1 z) (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(+.f64 (*.f64 -1 z) (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 (+.f64 1 (log.f64 z)) y))","(fma.f64 1/2 x (*.f64 (+.f64 1 (log.f64 z)) y))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (+.f64 1 (log.f64 z)) y)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (+.f64 1 (log.f64 z)) y)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 (+.f64 1 (log.f64 z)) y)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 (/.f64 1 z))))) (*.f64 -1 (*.f64 y z))))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 (/.f64 1 z))))) (*.f64 -1 (*.f64 y z))))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 (/.f64 1 z))))) (*.f64 -1 (*.f64 y z))))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 (+.f64 (-.f64 1 z) (log.f64 z)) y (*.f64 1/2 x))","(+.f64 1 (log.f64 z))","(+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))","(+.f64 (-.f64 1 z) (log.f64 z))","(+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))","(+.f64 (-.f64 1 z) (log.f64 z))","(+.f64 (*.f64 -1 z) (+.f64 1 (log.f64 z)))","(+.f64 (-.f64 1 z) (log.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) 1))","(+.f64 (-.f64 1 z) (log.f64 z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) 1))","(+.f64 (-.f64 1 z) (log.f64 z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) 1))","(+.f64 (-.f64 1 z) (log.f64 z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(+.f64 (-.f64 1 z) (log.f64 z))","(+.f64 (*.f64 -1 z) (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(+.f64 (-.f64 1 z) (log.f64 z))","(+.f64 (*.f64 -1 z) (+.f64 1 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(+.f64 (-.f64 1 z) (log.f64 z))"]],"time":176.6689453125,"type":"simplify"},{"compiler":[[1948,1168]],"time":24.1630859375,"type":"eval"},{"alts":[["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","next",0.12337875976844202],["(fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (-.f64 1 z) (log.f64 z))) (*.f64 x 1/2))","fresh",17.25041380875324],["(fma.f64 y (*.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (-.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (cbrt.f64 (*.f64 (-.f64 1 z) (log.f64 z))))) (+.f64 (cbrt.f64 (log.f64 z)) (cbrt.f64 (-.f64 1 z)))) (*.f64 x 1/2))","fresh",13.714256347684422],["(fma.f64 (*.f64 y (cbrt.f64 (+.f64 (-.f64 1 z) (log.f64 z)))) (cbrt.f64 (pow.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 2)) (*.f64 x 1/2))","fresh",13.740272558610652],["(fma.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) x) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","fresh",0.3491887399327296],["(pow.f64 (cbrt.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))) 3)","fresh",0.7163240235163768]],"compiler":[[17,12],[20,14],[37,27],[25,18],[18,14],[17,13],[17,12],[20,14],[37,27],[25,18],[18,14],[17,13]],"count":[[125,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[124,6],"picked":[1,0]}],"min-error":[0.01953125],"time":36.60498046875,"type":"prune"},{"compiler":[[48,27]],"locations":[["(*.f64 y (-.f64 1 z))",0.00390625,true],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))",0.09994125976844201,true],["(*.f64 y (log.f64 z))",0.2578125,true]],"time":11.662841796875,"type":"localize"},{"count":[[3,56]],"series":[["(*.f64 y (-.f64 1 z))","z","-inf",0.14697265625],["(*.f64 y (-.f64 1 z))","z","inf",0.1669921875],["(*.f64 y (-.f64 1 z))","z","0",0.14599609375],["(*.f64 y (-.f64 1 z))","y","-inf",0.216064453125],["(*.f64 y (-.f64 1 z))","y","inf",0.203125],["(*.f64 y (-.f64 1 z))","y","0",0.25],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","z","-inf",0.303955078125],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","z","inf",0.337890625],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","z","0",0.2939453125],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","y","-inf",0.39208984375],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","y","inf",0.299072265625],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","y","0",0.280029296875],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","x","-inf",0.199951171875],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","x","inf",0.330078125],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","x","0",0.35205078125],["(*.f64 y (log.f64 z))","z","-inf",5.66796875],["(*.f64 y (log.f64 z))","z","inf",5.375],["(*.f64 y (log.f64 z))","z","0",4.85791015625],["(*.f64 y (log.f64 z))","y","-inf",0.26611328125],["(*.f64 y (log.f64 z))","y","inf",0.3330078125],["(*.f64 y (log.f64 z))","y","0",17.718017578125]],"time":38.405029296875,"type":"series"},{"count":[[3,108]],"inputs":[["(*.f64 y (log.f64 z))","(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","(*.f64 y (-.f64 1 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (log.f64 z)) 0) (*.f64 y (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (log.f64 z)) (*.f64 (*.f64 y (log.f64 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (log.f64 z))) (*.f64 y (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (log.f64 z)) (*.f64 0 (*.f64 y (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (log.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (log.f64 z))) (cbrt.f64 (pow.f64 (*.f64 y (log.f64 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (log.f64 z)) 2)) (cbrt.f64 (*.f64 y (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (log.f64 z))) (cbrt.f64 (pow.f64 (log.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (log.f64 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (log.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (log.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (log.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (log.f64 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (log.f64 z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (log.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (log.f64 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (log.f64 z)) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y (log.f64 z)) (*.f64 x 1/2)) (*.f64 y (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 1 z)) (+.f64 (*.f64 y (log.f64 z)) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (+.f64 (neg.f64 (*.f64 z y)) (+.f64 (*.f64 y (log.f64 z)) (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 0) (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) (*.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 1 z)) (*.f64 (+.f64 (*.f64 y (log.f64 z)) (*.f64 x 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))) (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) (*.f64 0 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) (*.f64 y (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (log.f64 z)) (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (*.f64 y (log.f64 z)) (*.f64 x 1/2)) y) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (*.f64 y (log.f64 z)) (*.f64 x 1/2)) 1) (*.f64 y (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 y (log.f64 z)) (*.f64 x 1/2)) (*.f64 (+.f64 z -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))) (cbrt.f64 (pow.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 2)) (cbrt.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y (log.f64 z)) 2)) (cbrt.f64 (*.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) (*.f64 y (log.f64 z)))))) (+.f64 (cbrt.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2))) (cbrt.f64 (*.f64 y (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y (log.f64 z)) 2)) (-.f64 (cbrt.f64 (pow.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) 2)) (cbrt.f64 (*.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) (*.f64 y (log.f64 z)))))) (+.f64 (cbrt.f64 (*.f64 y (log.f64 z))) (cbrt.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (log.f64 z) (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 z) y (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (log.f64 z))) (cbrt.f64 (pow.f64 (*.f64 y (log.f64 z)) 2)) (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (*.f64 x 1/2) 2)) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2))) (cbrt.f64 (pow.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) 2)) (*.f64 y (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (log.f64 z)) (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/2 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) (*.f64 y (log.f64 z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (-.f64 1 z)) 0) (*.f64 y (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 1 z)) (*.f64 (*.f64 y (-.f64 1 z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 1 (neg.f64 (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 y (-.f64 1 z))) (*.f64 y (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 1 z)) (*.f64 0 (*.f64 y (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (neg.f64 (*.f64 z y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (*.f64 z y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (+.f64 z -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 z)) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (-.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) 1) (/.f64 y (+.f64 1 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (pow.f64 z 3)) (cbrt.f64 (+.f64 1 (fma.f64 z z z)))) (/.f64 y (pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 z z z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 (+.f64 1 (fma.f64 z z z)))) (/.f64 (-.f64 1 (pow.f64 z 3)) (pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 z z z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (-.f64 1 z))) (cbrt.f64 (pow.f64 (*.f64 y (-.f64 1 z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (-.f64 1 z)) 2)) (cbrt.f64 (*.f64 y (-.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (-.f64 1 z))) (cbrt.f64 (pow.f64 (-.f64 1 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (+.f64 z -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (+.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 z -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) y) (/.f64 1 (+.f64 1 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) y) (cbrt.f64 (+.f64 1 (fma.f64 z z z)))) (pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 z z z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) y) (+.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (*.f64 (-.f64 1 (pow.f64 z 3)) y)) (+.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) y) 1) (+.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) y) 1) (+.f64 1 (fma.f64 z z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 -1 (pow.f64 z 3))) (neg.f64 (+.f64 1 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 z 3)) y) (neg.f64 (+.f64 1 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (-.f64 1 (pow.f64 z 3))) (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) y)) (cbrt.f64 (+.f64 1 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (-.f64 1 (pow.f64 z 3)) y)) (neg.f64 (+.f64 1 (fma.f64 z z z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 1 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 1 z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 1 z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 1 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (+.f64 z -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 1 z)) 3))))))"]],"rules":[["egg-rr",43],["egg-rr",42],["egg-rr",23]],"time":31.39599609375,"type":"rewrite"},{"count":[[164,131]],"inputs":[["(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(+.f64 (*.f64 y (log.f64 z)) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(*.f64 1/2 x)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(*.f64 1/2 x)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z)))))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","y","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(*.f64 -1 (*.f64 y z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 -1 (*.f64 y z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(+.f64 y (*.f64 -1 (*.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))))","(+.f64 (*.f64 y (log.f64 z)) (*.f64 y (-.f64 1 z)))","(*.f64 y (+.f64 (log.f64 z) (-.f64 1 z)))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 1/2 x)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 1/2 x)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (+.f64 (log.f64 z) (-.f64 1 z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z)))))","(*.f64 y (+.f64 (log.f64 z) (-.f64 1 z)))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) y))","(fma.f64 y (log.f64 z) (fma.f64 1/2 x y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (fma.f64 1/2 x y) (fma.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) (neg.f64 (*.f64 y z))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (fma.f64 1/2 x y) (fma.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) (neg.f64 (*.f64 y z))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (fma.f64 1/2 x y) (fma.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) (neg.f64 (*.f64 y z))))","y","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(*.f64 y (-.f64 1 z))","(+.f64 (*.f64 -1 (*.f64 y z)) y)","(*.f64 y (-.f64 1 z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))","(+.f64 y (*.f64 -1 (*.f64 y z)))","(*.f64 y (-.f64 1 z))"]],"time":165.501953125,"type":"simplify"},{"compiler":[[2373,1331]],"time":25.938232421875,"type":"eval"},{"alts":[["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)))","next",0.15205004884221007],["(fma.f64 y (*.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (-.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (cbrt.f64 (*.f64 (-.f64 1 z) (log.f64 z))))) (+.f64 (cbrt.f64 (log.f64 z)) (cbrt.f64 (-.f64 1 z)))) (*.f64 x 1/2))","fresh",13.714256347684422],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","done",0.12337875976844202],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (*.f64 (log.f64 z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y))))","fresh",12.514178333512419],["(fma.f64 (*.f64 y (cbrt.f64 (+.f64 (-.f64 1 z) (log.f64 z)))) (cbrt.f64 (pow.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 2)) (*.f64 x 1/2))","fresh",13.740272558610652],["(fma.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) x) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","fresh",0.3491887399327296],["(pow.f64 (cbrt.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))) 3)","fresh",0.7163240235163768]],"compiler":[[24,17],[37,27],[17,12],[23,16],[25,18],[18,14],[17,13],[24,17],[37,27],[23,16],[25,18],[18,14],[17,13]],"count":[[137,7]],"kept":[{"done":[0,0],"fresh":[5,4],"new":[131,2],"picked":[1,1]}],"min-error":[0.015625],"time":43.10986328125,"type":"prune"},{"compiler":[[82,47]],"locations":[["(cbrt.f64 (pow.f64 (log.f64 z) 2))",0.140625,true],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)",0.2734375,true],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y))",0.30859375,true],["(pow.f64 (log.f64 z) 2)",0.5084762695368841,true]],"time":21.948974609375,"type":"localize"},{"count":[[4,68]],"series":[["(cbrt.f64 (pow.f64 (log.f64 z) 2))","z","-inf",0.80908203125],["(cbrt.f64 (pow.f64 (log.f64 z) 2))","z","inf",0.794921875],["(cbrt.f64 (pow.f64 (log.f64 z) 2))","z","0",0.796875],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","y","-inf",0.301025390625],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","y","inf",0.340087890625],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","y","0",1.258056640625],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","z","-inf",1.35595703125],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","z","inf",0.968017578125],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","z","0",1.255859375],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y))","y","-inf",0.27392578125],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y))","y","inf",0.242919921875],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y))","y","0",1.469970703125],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y))","z","-inf",0.35595703125],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y))","z","inf",0.321044921875],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y))","z","0",1.39697265625],["(pow.f64 (log.f64 z) 2)","z","-inf",0.379150390625],["(pow.f64 (log.f64 z) 2)","z","inf",0.36279296875],["(pow.f64 (log.f64 z) 2)","z","0",0.47509765625]],"time":13.39501953125,"type":"series"},{"count":[[4,118]],"inputs":[["(pow.f64 (log.f64 z) 2)","(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(cbrt.f64 (pow.f64 (log.f64 z) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 z) 2) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 2/3) (pow.f64 (log.f64 z) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 4/3) (pow.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 z)) (pow.f64 (log.f64 z) 5/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3)) (pow.f64 (pow.f64 (log.f64 z) 4/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 z) 4/3) 4/3) (cbrt.f64 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 5/3) (cbrt.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (log.f64 z) 2/3) 5/3) (pow.f64 (pow.f64 (log.f64 z) 2/3) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 z)) (neg.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)) (neg.f64 (pow.f64 (log.f64 z) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 z) (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 z) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 z) 2) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 z) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 z) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 z) 3) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 z)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 z) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 z) 2/3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 z) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (log.f64 z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 z) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 z) 6))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (log.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 z) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 y) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (log.f64 z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) (cbrt.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y)) (cbrt.f64 (*.f64 (*.f64 (pow.f64 (log.f64 z) 4/3) (*.f64 y y)) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 z) (*.f64 (pow.f64 (log.f64 z) 2/3) y))) (pow.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 z)) y) (pow.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3)) (*.f64 (pow.f64 (log.f64 z) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 2/3) (*.f64 (cbrt.f64 (log.f64 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3)) (*.f64 (pow.f64 (log.f64 z) 2/3) y)) (cbrt.f64 (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 2/3) (cbrt.f64 (*.f64 (log.f64 z) (*.f64 (pow.f64 (log.f64 z) 2/3) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (pow.f64 (log.f64 z) 4/3) (*.f64 y y)) (log.f64 z))) (cbrt.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 z) y)) (pow.f64 (*.f64 (log.f64 z) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 z) y) 2/3) (cbrt.f64 (*.f64 (log.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) (cbrt.f64 (cbrt.f64 (log.f64 z)))) (cbrt.f64 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 z) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (log.f64 z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3)) (*.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) (cbrt.f64 (cbrt.f64 (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 y) (log.f64 z))) (neg.f64 (pow.f64 (*.f64 (log.f64 z) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 y) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 y) (log.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (log.f64 z) y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) (log.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 y) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 z) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 (log.f64 z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 0)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 2/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (pow.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y)) (pow.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 2/3) (cbrt.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (pow.f64 (*.f64 (log.f64 z) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 z) 2/3))) (cbrt.f64 (pow.f64 (log.f64 z) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 4/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 z) 4/3)) (*.f64 y (cbrt.f64 (pow.f64 (log.f64 z) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 4/3)) y) (cbrt.f64 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 z) y) 2/3) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 2/3) (*.f64 (pow.f64 (log.f64 z) 2/3) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)) y)) (neg.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (log.f64 z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) (pow.f64 (log.f64 z) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 (log.f64 z) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 z) 2/3) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 z)) (cbrt.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) (cbrt.f64 (pow.f64 (log.f64 z) 5/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 z) 5/3)) (cbrt.f64 (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3)) (cbrt.f64 (pow.f64 (log.f64 z) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 z) 4/3)) (cbrt.f64 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (log.f64 z))) (cbrt.f64 (neg.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3))) (cbrt.f64 (pow.f64 (pow.f64 (log.f64 z) 4/3) 4/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (log.f64 z) 2/3) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3))) (neg.f64 (cbrt.f64 (pow.f64 (log.f64 z) 4/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 z) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 z) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 z) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (neg.f64 (log.f64 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 z) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 z) 2))))))"]],"rules":[["egg-rr",27],["egg-rr",28],["egg-rr",34],["egg-rr",29]],"time":52.06591796875,"type":"rewrite"},{"count":[[186,127]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 z)) 2)","(pow.f64 (log.f64 (/.f64 1 z)) 2)","(pow.f64 (log.f64 (/.f64 1 z)) 2)","(pow.f64 (log.f64 (/.f64 1 z)) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 z)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 z)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 z)) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 z)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 z)) 2)","(pow.f64 (log.f64 z) 2)","(pow.f64 (log.f64 (/.f64 1 z)) 2)","(pow.f64 (log.f64 z) 2)","(pow.f64 (log.f64 (/.f64 1 z)) 2)","(pow.f64 (log.f64 z) 2)","(pow.f64 (log.f64 (/.f64 1 z)) 2)","(pow.f64 (log.f64 z) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)","(pow.f64 (log.f64 z) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)","(pow.f64 (log.f64 z) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)","(pow.f64 (log.f64 z) 2)","(pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)","(pow.f64 (log.f64 z) 2)","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (log.f64 z))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (log.f64 z))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (log.f64 z))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (log.f64 z) 2/3) y)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 z)) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 z)) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 z)) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)","(pow.f64 (pow.f64 (log.f64 (/.f64 1 z)) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (log.f64 z) 2/3)"]],"time":201.39501953125,"type":"simplify"},{"compiler":[[2929,1723]],"time":29.63720703125,"type":"eval"},{"alts":[["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","next",0.25111020513728227],["(fma.f64 y (*.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (-.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (cbrt.f64 (*.f64 (-.f64 1 z) (log.f64 z))))) (+.f64 (cbrt.f64 (log.f64 z)) (cbrt.f64 (-.f64 1 z)))) (*.f64 x 1/2))","fresh",13.714256347684422],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 6) y)))","fresh",0.334470282478859],["(fma.f64 (*.f64 y (cbrt.f64 (+.f64 (-.f64 1 z) (log.f64 z)))) (cbrt.f64 (pow.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 2)) (*.f64 x 1/2))","fresh",13.740272558610652],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","done",0.12337875976844202],["(fma.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) x) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","fresh",0.3491887399327296],["(pow.f64 (cbrt.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))) 3)","fresh",0.7163240235163768]],"compiler":[[24,16],[37,27],[25,17],[25,18],[17,12],[18,14],[17,13],[24,16],[37,27],[25,17],[25,18],[18,14],[17,13]],"count":[[134,7]],"kept":[{"done":[1,1],"fresh":[5,4],"new":[127,2],"picked":[1,0]}],"min-error":[0.01171875],"time":34.743896484375,"type":"prune"},{"compiler":[[78,41]],"locations":[["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))",0.09994125976844201,true],["(*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)",0.2734375,true],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y))",0.30859375,true],["(pow.f64 (cbrt.f64 (log.f64 z)) 2)",0.46484375,true]],"time":18.81396484375,"type":"localize"},{"count":[[4,96]],"series":[["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","z","-inf",0.22998046875],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","z","inf",0.197998046875],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","z","0",0.221923828125],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","y","-inf",0.208984375],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","y","inf",0.221923828125],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","y","0",0.177001953125],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","x","-inf",0.211181640625],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","x","inf",0.182861328125],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","x","0",0.55419921875],["(*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)","y","-inf",0.25],["(*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)","y","inf",0.22607421875],["(*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)","y","0",1.072998046875],["(*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)","z","-inf",0.97314453125],["(*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)","z","inf",0.94091796875],["(*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)","z","0",0.953857421875],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y))","y","-inf",0.1630859375],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y))","y","inf",0.177001953125],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y))","y","0",0.14501953125],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y))","z","-inf",0.199951171875],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y))","z","inf",0.1689453125],["(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y))","z","0",0.16796875],["(pow.f64 (cbrt.f64 (log.f64 z)) 2)","z","-inf",9.866943359375],["(pow.f64 (cbrt.f64 (log.f64 z)) 2)","z","inf",1.264892578125],["(pow.f64 (cbrt.f64 (log.f64 z)) 2)","z","0",1.223876953125]],"time":20.35498046875,"type":"series"},{"count":[[4,115]],"inputs":[["(pow.f64 (cbrt.f64 (log.f64 z)) 2)","(*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y))","(*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)","(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) 0) (pow.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 z) 2/3) (*.f64 (pow.f64 (log.f64 z) 2/3) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (pow.f64 (log.f64 z) 2/3)) (pow.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log.f64 z) 2/3) (*.f64 0 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 z)) (cbrt.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (log.f64 z))) (neg.f64 (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (cbrt.f64 (log.f64 z))) -1) (*.f64 (neg.f64 (cbrt.f64 (log.f64 z))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 4) (cbrt.f64 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 z) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 z) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 z) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 z) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (cbrt.f64 (log.f64 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (pow.f64 (log.f64 z) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 z) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 z) y) 0) (*.f64 (log.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 z) y) (*.f64 (*.f64 (log.f64 z) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (log.f64 z) y)) (*.f64 (log.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 z) y) (*.f64 0 (*.f64 (log.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3)) (*.f64 (pow.f64 (log.f64 z) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y)) (*.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 2/3) (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (log.f64 z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) (cbrt.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 z) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (log.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 z) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 z)) y) (pow.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 2/3) (*.f64 y (cbrt.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (log.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (log.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (log.f64 z) y)) (pow.f64 (*.f64 (log.f64 z) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (log.f64 z) y) 2/3) (cbrt.f64 (*.f64 (log.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) (cbrt.f64 (cbrt.f64 (log.f64 z)))) (cbrt.f64 (pow.f64 (log.f64 z) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (log.f64 z)) (cbrt.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y))) (pow.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 y) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (log.f64 z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (log.f64 z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 y) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (log.f64 z) y) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 0) (*.f64 (pow.f64 (log.f64 z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) (*.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (pow.f64 (log.f64 z) 2/3) y)) (*.f64 (pow.f64 (log.f64 z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) (*.f64 0 (*.f64 (pow.f64 (log.f64 z) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 z) 2/3) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (pow.f64 (log.f64 z) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (log.f64 z))) (cbrt.f64 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) (cbrt.f64 y)) (pow.f64 y 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (log.f64 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (pow.f64 (log.f64 z) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 z) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y)) (pow.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 2/3) (cbrt.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2/3)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (pow.f64 (*.f64 (log.f64 z) y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) (pow.f64 (log.f64 z) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 z) 2/3)) y))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 (log.f64 z) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))) (*.f64 x 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 (log.f64 z) y) (*.f64 x 1/2)) (*.f64 y (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 1 z)) (+.f64 (*.f64 (log.f64 z) y) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (+.f64 (neg.f64 (*.f64 z y)) (+.f64 (*.f64 (log.f64 z) y) (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 0) (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) (*.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))) (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) (*.f64 0 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (*.f64 (log.f64 z) y) (*.f64 x 1/2)) 1) (*.f64 y (-.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) (*.f64 (log.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 z) y) (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 (*.f64 (log.f64 z) y) (*.f64 x 1/2)) y) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 1 z)) (*.f64 (+.f64 (*.f64 (log.f64 z) y) (*.f64 x 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (log.f64 z) y) (*.f64 x 1/2)) (*.f64 (+.f64 z -1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))) (pow.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 2/3) (cbrt.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) 2/3) (-.f64 (pow.f64 (*.f64 (log.f64 z) y) 2/3) (cbrt.f64 (*.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) (*.f64 (log.f64 z) y))))) (+.f64 (cbrt.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2))) (cbrt.f64 (*.f64 (log.f64 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (log.f64 z) y) 2/3) (-.f64 (pow.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) 2/3) (cbrt.f64 (*.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) (*.f64 (log.f64 z) y))))) (+.f64 (cbrt.f64 (*.f64 (log.f64 z) y)) (cbrt.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 z) y (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (log.f64 z) 2/3) y) (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (pow.f64 (log.f64 z) 2/3) y) (cbrt.f64 (log.f64 z)) (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (log.f64 z) y)) (pow.f64 (*.f64 (log.f64 z) y) 2/3) (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 1/2)) (pow.f64 (*.f64 x 1/2) 2/3) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2))) (pow.f64 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) 2/3) (*.f64 (log.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (log.f64 z) y) (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/2 (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y (-.f64 1 z) (*.f64 x 1/2)) (*.f64 (log.f64 z) y))))))"]],"rules":[["egg-rr",41],["egg-rr",23],["egg-rr",26],["egg-rr",25]],"time":36.68212890625,"type":"rewrite"},{"count":[[211,143]],"inputs":[["(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(+.f64 (*.f64 y (log.f64 z)) (*.f64 y (-.f64 1 z)))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(*.f64 1/2 x)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(*.f64 1/2 x)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z)))))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(pow.f64 (pow.f64 (log.f64 z) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(cbrt.f64 (pow.f64 (log.f64 z) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(cbrt.f64 (pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(cbrt.f64 (pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(cbrt.f64 (pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) 2))","(pow.f64 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2) 1/3)","(cbrt.f64 (pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) 2))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z))))","(*.f64 y (log.f64 z))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))))","(*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(*.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 y (log.f64 z))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 z)) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z)))) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 z) 2)) 1/3) y)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)","(+.f64 (*.f64 y (log.f64 z)) (*.f64 y (-.f64 1 z)))","(*.f64 y (+.f64 (log.f64 z) (-.f64 1 z)))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 1/2 x)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 1/2 x)","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 1 z))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z))","(*.f64 y (+.f64 (log.f64 z) (-.f64 1 z)))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 y (-.f64 (+.f64 1 (log.f64 z)) z)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z)))))","(*.f64 y (+.f64 (log.f64 z) (-.f64 1 z)))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (-.f64 1 z)) (*.f64 -1 (log.f64 z))))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) y))","(fma.f64 y (log.f64 z) (fma.f64 1/2 x y))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 y (log.f64 z)) (+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1 (*.f64 y z)) y)))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(+.f64 (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 z)))) (+.f64 (*.f64 1/2 x) (+.f64 y (*.f64 -1 (*.f64 y z)))))","(fma.f64 y (+.f64 (log.f64 z) (-.f64 1 z)) (*.f64 1/2 x))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 y z))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (fma.f64 1/2 x y) (fma.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) (neg.f64 (*.f64 y z))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (fma.f64 1/2 x y) (fma.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) (neg.f64 (*.f64 y z))))","(+.f64 (*.f64 1/2 x) (+.f64 y (+.f64 (*.f64 -1 (*.f64 y z)) (*.f64 y (+.f64 (log.f64 -1) (*.f64 -1 (log.f64 (/.f64 -1 z))))))))","(+.f64 (fma.f64 1/2 x y) (fma.f64 y (-.f64 (log.f64 -1) (neg.f64 (log.f64 (neg.f64 z)))) (neg.f64 (*.f64 y z))))"]],"time":268.921875,"type":"simplify"},{"compiler":[[2891,1650]],"time":29.748046875,"type":"eval"},{"alts":[["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","done",0.25111020513728227],["(fma.f64 y (*.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (-.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (cbrt.f64 (*.f64 (-.f64 1 z) (log.f64 z))))) (+.f64 (cbrt.f64 (log.f64 z)) (cbrt.f64 (-.f64 1 z)))) (*.f64 x 1/2))","fresh",13.714256347684422],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 6) y)))","fresh",0.334470282478859],["(pow.f64 (cbrt.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))) 3)","fresh",0.7186090332848188],["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","done",0.12337875976844202],["(fma.f64 (*.f64 y (cbrt.f64 (+.f64 (-.f64 1 z) (log.f64 z)))) (cbrt.f64 (pow.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 2)) (*.f64 x 1/2))","fresh",13.740272558610652],["(fma.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) x) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","fresh",0.3491887399327296]],"compiler":[[24,16],[37,27],[25,17],[17,13],[17,12],[25,18],[18,14]],"count":[[150,7]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[143,2],"picked":[1,1]}],"min-error":[0.01171875],"time":38.671875,"type":"prune"},{"accuracy":[0.09375],"baseline":[0.09375],"branch":[["x",0.09375,1],["y",0.09375,1],["z",0.09375,1],["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))",0.09375,1],["(*.f64 x 1/2)",0.09375,1],["(*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))",0.09375,1],["(*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))",0.09375,1],["(+.f64 (-.f64 1 z) (log.f64 z))",0.09375,1]],"compiler":[[4,3],[4,3],[4,3],[15,11],[6,5],[11,8],[11,8],[9,7],[262,155]],"count":[[14,1]],"inputs":[["(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 6) y)))","(pow.f64 (cbrt.f64 (fma.f64 1/2 x (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))) 3)","(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (log.f64 z)) 2) y)))","(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 z))) 6) y)))","(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (cbrt.f64 (log.f64 z)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) y)))","(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 (*.f64 (log.f64 z) (cbrt.f64 y)) (cbrt.f64 (*.f64 y y))))","(+.f64 (+.f64 (*.f64 x 1/2) (*.f64 y (-.f64 1 z))) (*.f64 y (log.f64 z)))","(fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (-.f64 1 z) (log.f64 z))) (*.f64 x 1/2))","(fma.f64 y (*.f64 (+.f64 (cbrt.f64 (pow.f64 (log.f64 z) 2)) (-.f64 (cbrt.f64 (pow.f64 (-.f64 1 z) 2)) (cbrt.f64 (*.f64 (-.f64 1 z) (log.f64 z))))) (+.f64 (cbrt.f64 (log.f64 z)) (cbrt.f64 (-.f64 1 z)))) (*.f64 x 1/2))","(fma.f64 (*.f64 y (cbrt.f64 (+.f64 (-.f64 1 z) (log.f64 z)))) (cbrt.f64 (pow.f64 (+.f64 (-.f64 1 z) (log.f64 z)) 2)) (*.f64 x 1/2))","(fma.f64 (cbrt.f64 1/2) (*.f64 (cbrt.f64 1/4) x) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))","(pow.f64 (cbrt.f64 (fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))) 3)","(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))","(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))"]],"link":["."],"name":["System.Random.MWC.Distributions:gamma from mwc-random-0.13.3.2"],"oracle":[27.51117775516077],"outputs":[["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))"]],"time":50.7861328125,"times":[["x",5.4140625],["y",5.27685546875],["z",5.452880859375],["(+.f64 (*.f64 x 1/2) (*.f64 y (+.f64 (-.f64 1 z) (log.f64 z))))",7.93310546875],["(*.f64 x 1/2)",5.36083984375],["(*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))",5.512939453125],["(*.f64 y (+.f64 (-.f64 1 z) (log.f64 z)))",5.54296875],["(+.f64 (-.f64 1 z) (log.f64 z))",5.305908203125]],"type":"regimes"},{"compiler":[[14,10]],"inputs":[["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y (+.f64 (-.f64 1 z) (log.f64 z)) (*.f64 x 1/2))"]],"stop":[["fuel",1]],"time":19.488037109375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[14,10]],"remove-preprocessing":[[]],"time":9.35888671875,"type":"end"}]
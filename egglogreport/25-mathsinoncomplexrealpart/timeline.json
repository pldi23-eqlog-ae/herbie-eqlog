[{"compiler":[[15,12]],"method":["search"],"sampling":[[12,0.49951183795928955,0.28780467226170003,0.21268348977901042],[11,0.49951183795928955,0.2946339356712997,0.20585422636941075],[10,0.49951183795928955,0.3239022074267268,0.17658595461398363],[9,0.49951183795928955,0.33560951612889767,0.16487864591181278],[8,0.49951183795928955,0.39024362340569496,0.11024453863501549],[7,0.49951183795928955,0.40585336834192276,0.09463479369878769],[6,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[5,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":75.77099609375,"type":"analyze"},{"outcomes":[["body",512,"invalid",127.9716796875,1024],["body",2048,"invalid",0.76513671875,2],["body",256,"invalid",111.057861328125,1675],["body",512,"valid",141.01123046875,1001],["body",1024,"valid",598.127197265625,2074],["body",1024,"invalid",406.586181640625,2006],["body",2048,"valid",4.830078125,8],["body",256,"valid",345.0146484375,5173]],"time":1749.02783203125,"type":"sample"},{"compiler":[[14,11]],"inputs":[["0","1"],["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 im)) (+.f64 (exp.f64 (-.f64 0 re)) (exp.f64 re)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 im)) (+.f64 (exp.f64 (-.f64 0 re)) (exp.f64 re)))","(*.f64 1/2 (*.f64 (sin.f64 im) (+.f64 (exp.f64 (neg.f64 re)) (exp.f64 re))))"]],"symmetry":[[]],"time":63.864013671875,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))"]],"time":20.08203125,"type":"simplify"},{"compiler":[[25,17]],"time":0.447021484375,"type":"eval"},{"alts":[["(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","next",0.021816259768442016]],"compiler":[[13,10],[13,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.021816259768442016],"time":0.907958984375,"type":"prune"},{"compiler":[[40,11]],"locations":[["(*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))",0.00390625,true],["(sin.f64 re)",0.015625,true]],"time":7.967041015625,"type":"localize"},{"count":[[2,28]],"series":[["(*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","im","-inf",0.35107421875],["(*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","im","inf",0.60302734375],["(*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","im","0",0.534912109375],["(*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","re","-inf",0.31787109375],["(*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","re","inf",0.39404296875],["(*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","re","0",0.43798828125],["(sin.f64 re)","re","-inf",0.16015625],["(sin.f64 re)","re","inf",0.18603515625],["(sin.f64 re)","re","0",0.343994140625]],"time":3.4599609375,"type":"series"},{"count":[[2,71]],"inputs":[["(sin.f64 re)","(*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 re) (*.f64 (sin.f64 re) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) 0) (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 re) (*.f64 0 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sin.f64 re)) (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 re)) (cbrt.f64 (pow.f64 (sin.f64 re) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (cbrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 re)) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 re)) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 re) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 re)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 re) (exp.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 0) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 0 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)) (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (sin.f64 re))) (cbrt.f64 (pow.f64 (sin.f64 re) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 re)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)) (*.f64 (sin.f64 re) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)) (sin.f64 re)) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (+.f64 (/.f64 (cbrt.f64 (sin.f64 re)) (exp.f64 im)) (*.f64 (exp.f64 im) (cbrt.f64 (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (+.f64 (*.f64 (exp.f64 im) (cbrt.f64 (sin.f64 re))) (/.f64 (cbrt.f64 (sin.f64 re)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 im)) (*.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (sin.f64 re)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 im) (cbrt.f64 (sin.f64 re))) (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 re) (exp.f64 im))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (exp.f64 im)) 2)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 (+.f64 im im))) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 re)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 im) (sin.f64 re) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (cbrt.f64 (exp.f64 (*.f64 im -2))) (sin.f64 re)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (sin.f64 re)) (exp.f64 im)) (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 re)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (exp.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (sin.f64 re) (exp.f64 im))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 2)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 im)) (sin.f64 re) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 re) (exp.f64 (neg.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 1 (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (sin.f64 re) (exp.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im -2))) (*.f64 (sin.f64 re) (exp.f64 im)))))))"]],"rules":[["egg-rr",51],["egg-rr",20]],"time":25.615966796875,"type":"rewrite"},{"count":[[99,94]],"inputs":[["re","(+.f64 re (*.f64 -1/6 (pow.f64 re 3)))","(+.f64 (*.f64 1/120 (pow.f64 re 5)) (+.f64 re (*.f64 -1/6 (pow.f64 re 3))))","(+.f64 (*.f64 1/120 (pow.f64 re 5)) (+.f64 re (+.f64 (*.f64 -1/6 (pow.f64 re 3)) (*.f64 -1/5040 (pow.f64 re 7)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 re 7) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2))))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 1/360 (*.f64 (sin.f64 re) (pow.f64 im 6))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))"]],"method":["egg-herbie"],"outputs":[["re","(+.f64 re (*.f64 -1/6 (pow.f64 re 3)))","(fma.f64 -1/6 (pow.f64 re 3) re)","(+.f64 (*.f64 1/120 (pow.f64 re 5)) (+.f64 re (*.f64 -1/6 (pow.f64 re 3))))","(fma.f64 1/120 (pow.f64 re 5) (fma.f64 -1/6 (pow.f64 re 3) re))","(+.f64 (*.f64 1/120 (pow.f64 re 5)) (+.f64 re (+.f64 (*.f64 -1/6 (pow.f64 re 3)) (*.f64 -1/5040 (pow.f64 re 7)))))","(+.f64 (fma.f64 (pow.f64 re 5) 1/120 re) (fma.f64 -1/6 (pow.f64 re 3) (*.f64 -1/5040 (pow.f64 re 7))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (fma.f64 -1/6 (pow.f64 re 3) re))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re)))","(fma.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (fma.f64 (pow.f64 re 5) 1/120 re)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 re 7) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re))))","(+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/120 (pow.f64 re 5)) (*.f64 -1/5040 (pow.f64 re 7)))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (fma.f64 -1/6 (pow.f64 re 3) re)))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))","(*.f64 (sin.f64 re) (+.f64 2 (*.f64 im im)))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2))))","(fma.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4)) (*.f64 (sin.f64 re) (+.f64 2 (*.f64 im im))))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 1/360 (*.f64 (sin.f64 re) (pow.f64 im 6))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))))","(fma.f64 (*.f64 1/12 (sin.f64 re)) (pow.f64 im 4) (fma.f64 1/360 (*.f64 (sin.f64 re) (pow.f64 im 6)) (*.f64 (sin.f64 re) (+.f64 2 (*.f64 im im)))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))"]],"time":90.697998046875,"type":"simplify"},{"compiler":[[1661,639]],"time":15.2880859375,"type":"eval"},{"alts":[["(*.f64 1/2 (fma.f64 (exp.f64 im) (sin.f64 re) (/.f64 (sin.f64 re) (exp.f64 im))))","next",0.014003759768442016],["(*.f64 1/2 (/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im)))","fresh",0.01953125],["(*.f64 1/2 (*.f64 (pow.f64 (cbrt.f64 (sin.f64 re)) 3) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","fresh",0.7029840332848188]],"compiler":[[14,8],[19,12],[16,13],[14,8],[19,12],[16,13]],"count":[[95,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[94,3],"picked":[1,0]}],"min-error":[0.0078125],"time":21.026123046875,"type":"prune"},{"compiler":[[36,9]],"locations":[["(sin.f64 re)",0.015625,false],["(/.f64 (sin.f64 re) (exp.f64 im))",0.0234375,true]],"time":6.727783203125,"type":"localize"},{"count":[[1,8]],"series":[["(/.f64 (sin.f64 re) (exp.f64 im))","im","-inf",0.367919921875],["(/.f64 (sin.f64 re) (exp.f64 im))","im","inf",0.37109375],["(/.f64 (sin.f64 re) (exp.f64 im))","im","0",0.39599609375],["(/.f64 (sin.f64 re) (exp.f64 im))","re","-inf",0.362060546875],["(/.f64 (sin.f64 re) (exp.f64 im))","re","inf",0.35302734375],["(/.f64 (sin.f64 re) (exp.f64 im))","re","0",0.656982421875]],"time":2.5810546875,"type":"series"},{"count":[[1,52]],"inputs":[["(/.f64 (sin.f64 re) (exp.f64 im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 re)) (/.f64 (pow.f64 (sin.f64 re) 2/3) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 re) (exp.f64 im))) (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 2/3) (cbrt.f64 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 re) 2/3) (exp.f64 im)) (cbrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) (pow.f64 (exp.f64 im) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 im)))) (*.f64 (sin.f64 re) (neg.f64 (pow.f64 (exp.f64 im) -2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (/.f64 (sin.f64 re) (exp.f64 im)))) (neg.f64 (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 re)) (neg.f64 (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 re) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 im)) (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (neg.f64 im))) (neg.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (pow.f64 (exp.f64 im) -2/3)) (cbrt.f64 (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (exp.f64 im) -2/3)) (/.f64 (neg.f64 (sin.f64 re)) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 re) (pow.f64 (*.f64 (E.f64) (E.f64)) im))) (/.f64 (pow.f64 (sin.f64 re) 2/3) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 re) 2/3) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (/.f64 (sin.f64 re) (pow.f64 (*.f64 (E.f64) (E.f64)) im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (sin.f64 re) (exp.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 2/3) (cbrt.f64 (neg.f64 (sin.f64 re)))) (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (pow.f64 (exp.f64 im) 2/3))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 im) 2/3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (sin.f64 re)) (cbrt.f64 (exp.f64 im))) (neg.f64 (pow.f64 (exp.f64 im) -2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 0 (+.f64 (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 2/3) (*.f64 0 (cbrt.f64 (neg.f64 (/.f64 (sin.f64 re) (exp.f64 im))))))) (cbrt.f64 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (sin.f64 re) 2/3)) (/.f64 (cbrt.f64 (sin.f64 re)) (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sin.f64 re))) (/.f64 (pow.f64 (sin.f64 re) 2/3) (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (pow.f64 (exp.f64 im) -2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 im) -2/3) (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (sin.f64 re)) (exp.f64 im)) (pow.f64 (sin.f64 re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 re) 2/3) (/.f64 (cbrt.f64 (sin.f64 re)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 re) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (sin.f64 re)) (cbrt.f64 (exp.f64 im))) (neg.f64 (pow.f64 (exp.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (neg.f64 (pow.f64 (exp.f64 im) -2/3))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (pow.f64 (exp.f64 im) 2/3)))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 2) (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))))) (cbrt.f64 (pow.f64 (exp.f64 im) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 2) (neg.f64 (sin.f64 re)))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (pow.f64 (exp.f64 im) -2/3)) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (pow.f64 (exp.f64 im) 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 re)) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (pow.f64 (exp.f64 im) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 2/3) (cbrt.f64 (neg.f64 (sin.f64 re)))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (sin.f64 re) (exp.f64 im))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 2/3) (cbrt.f64 (neg.f64 (sin.f64 re))))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 re) (exp.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (neg.f64 (/.f64 (sin.f64 re) (exp.f64 im))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 3))))))"]],"rules":[["egg-rr",52]],"time":41.217041015625,"type":"rewrite"},{"count":[[60,66]],"inputs":[["(/.f64 re (exp.f64 im))","(+.f64 (/.f64 re (exp.f64 im)) (*.f64 -1/6 (/.f64 (pow.f64 re 3) (exp.f64 im))))","(+.f64 (/.f64 re (exp.f64 im)) (+.f64 (*.f64 1/120 (/.f64 (pow.f64 re 5) (exp.f64 im))) (*.f64 -1/6 (/.f64 (pow.f64 re 3) (exp.f64 im)))))","(+.f64 (*.f64 -1/5040 (/.f64 (pow.f64 re 7) (exp.f64 im))) (+.f64 (/.f64 re (exp.f64 im)) (+.f64 (*.f64 1/120 (/.f64 (pow.f64 re 5) (exp.f64 im))) (*.f64 -1/6 (/.f64 (pow.f64 re 3) (exp.f64 im))))))","(sin.f64 re)","(+.f64 (sin.f64 re) (*.f64 -1 (*.f64 (sin.f64 re) im)))","(+.f64 (sin.f64 re) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))) (pow.f64 im 2))) (*.f64 -1 (*.f64 (sin.f64 re) im))))","(+.f64 (sin.f64 re) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 -1 (*.f64 (sin.f64 re) im)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re)))) (+.f64 (*.f64 1/6 (sin.f64 re)) (*.f64 -1/2 (sin.f64 re)))) (pow.f64 im 3))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 re (exp.f64 im))","(+.f64 (/.f64 re (exp.f64 im)) (*.f64 -1/6 (/.f64 (pow.f64 re 3) (exp.f64 im))))","(/.f64 (+.f64 (*.f64 -1/6 (pow.f64 re 3)) re) (exp.f64 im))","(+.f64 (/.f64 re (exp.f64 im)) (+.f64 (*.f64 1/120 (/.f64 (pow.f64 re 5) (exp.f64 im))) (*.f64 -1/6 (/.f64 (pow.f64 re 3) (exp.f64 im)))))","(fma.f64 re (exp.f64 (neg.f64 im)) (/.f64 (+.f64 (*.f64 -1/6 (pow.f64 re 3)) (*.f64 1/120 (pow.f64 re 5))) (exp.f64 im)))","(+.f64 (*.f64 -1/5040 (/.f64 (pow.f64 re 7) (exp.f64 im))) (+.f64 (/.f64 re (exp.f64 im)) (+.f64 (*.f64 1/120 (/.f64 (pow.f64 re 5) (exp.f64 im))) (*.f64 -1/6 (/.f64 (pow.f64 re 3) (exp.f64 im))))))","(+.f64 (/.f64 (+.f64 (*.f64 -1/5040 (pow.f64 re 7)) re) (exp.f64 im)) (/.f64 (+.f64 (*.f64 -1/6 (pow.f64 re 3)) (*.f64 1/120 (pow.f64 re 5))) (exp.f64 im)))","(sin.f64 re)","(+.f64 (sin.f64 re) (*.f64 -1 (*.f64 (sin.f64 re) im)))","(fma.f64 (neg.f64 (sin.f64 re)) im (sin.f64 re))","(+.f64 (sin.f64 re) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))) (pow.f64 im 2))) (*.f64 -1 (*.f64 (sin.f64 re) im))))","(+.f64 (sin.f64 re) (neg.f64 (fma.f64 (*.f64 (sin.f64 re) -1/2) (*.f64 im im) (*.f64 (sin.f64 re) im))))","(+.f64 (sin.f64 re) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 -1 (*.f64 (sin.f64 re) im)) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re)))) (+.f64 (*.f64 1/6 (sin.f64 re)) (*.f64 -1/2 (sin.f64 re)))) (pow.f64 im 3))))))","(+.f64 (sin.f64 re) (-.f64 (neg.f64 (fma.f64 (*.f64 (sin.f64 re) -1/2) (*.f64 im im) (*.f64 (sin.f64 re) im))) (*.f64 (fma.f64 (sin.f64 re) -1/3 (*.f64 (neg.f64 -1/2) (sin.f64 re))) (pow.f64 im 3))))"]],"time":35.779052734375,"type":"simplify"},{"compiler":[[2265,946]],"time":21.1240234375,"type":"eval"},{"alts":[["(*.f64 1/2 (fma.f64 (exp.f64 im) (sin.f64 re) (/.f64 (sin.f64 re) (exp.f64 im))))","done",0.014003759768442016],["(*.f64 1/2 (/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im)))","next",0.01953125],["(*.f64 1/2 (*.f64 (pow.f64 (cbrt.f64 (sin.f64 re)) 3) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","fresh",0.7029840332848188]],"compiler":[[14,8],[19,12],[16,13],[19,12],[16,13]],"count":[[123,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[120,0],"picked":[1,1]}],"min-error":[0.0078125],"time":30.411865234375,"type":"prune"},{"compiler":[[73,13]],"locations":[["(*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))",0.00390625,false],["(/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im))",0.0078125,true],["(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im))",0.0078125,true],["(sin.f64 re)",0.015625,false]],"time":10.733154296875,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im))","im","-inf",0.16796875],["(/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im))","im","inf",0.169189453125],["(/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im))","im","0",0.192138671875],["(/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im))","re","-inf",0.16796875],["(/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im))","re","inf",0.18798828125],["(/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im))","re","0",0.226806640625],["(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im))","im","-inf",1.177978515625],["(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im))","im","inf",0.510009765625],["(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im))","im","0",0.326904296875],["(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im))","re","-inf",0.468017578125],["(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im))","re","inf",0.35791015625],["(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im))","re","0",0.475830078125]],"time":4.64501953125,"type":"series"},{"count":[[2,165]],"inputs":[["(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im))","(/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 re) (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (exp.f64 im))) (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (exp.f64 (neg.f64 im))) (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (exp.f64 im))) (*.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (*.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 0) (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 (neg.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im))) (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (exp.f64 im))) (*.f64 (exp.f64 (neg.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sin.f64 re) (*.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (exp.f64 im))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (*.f64 0 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 re)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (fma.f64 (exp.f64 im) (exp.f64 im) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1) (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 2)) (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 im) (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)) (*.f64 (exp.f64 im) (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)) (exp.f64 im)) (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 re)) (neg.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 im)) (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)))) (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 im)) (*.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (exp.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 im)))) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)))) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)) (exp.f64 im))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (exp.f64 im)) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 (*.f64 im -2)))) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 (neg.f64 im)))) (pow.f64 (cbrt.f64 (exp.f64 im)) (-.f64 3 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (exp.f64 (neg.f64 im))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 re) (exp.f64 im)) (exp.f64 im) (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im)) (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (exp.f64 im))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 re) (exp.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 re) (exp.f64 im)) (*.f64 (exp.f64 (neg.f64 im)) (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 0) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 re) (exp.f64 im)) (*.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (exp.f64 im))) (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 0 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (exp.f64 im))) (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (/.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 2)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 re)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (neg.f64 (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 im) (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (pow.f64 (cbrt.f64 (exp.f64 im)) (-.f64 3 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (*.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1) (cbrt.f64 (exp.f64 (*.f64 im -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 im)) (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)) (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 (*.f64 im -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)) (sin.f64 re)) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 (neg.f64 im))) (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (*.f64 im -2))) (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 (*.f64 im -2)))) (cbrt.f64 (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 2)) (exp.f64 im)) (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 im)) (-.f64 3 2)) (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1) (cbrt.f64 (exp.f64 (*.f64 im -2)))) (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (sin.f64 re))) (cbrt.f64 (pow.f64 (sin.f64 re) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im -2)))) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2)) (*.f64 (sin.f64 re) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (+.f64 (*.f64 (exp.f64 im) (cbrt.f64 (sin.f64 re))) (/.f64 (cbrt.f64 (sin.f64 re)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (+.f64 (/.f64 (cbrt.f64 (sin.f64 re)) (exp.f64 im)) (*.f64 (exp.f64 im) (cbrt.f64 (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)) (cbrt.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2)) (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) 2))) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (*.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1) (cbrt.f64 (exp.f64 (*.f64 im -2))))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (pow.f64 (cbrt.f64 (exp.f64 im)) (-.f64 3 2))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 im))) 1) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im -2))))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 (*.f64 im -2)))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) -1) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im -2)))) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 (neg.f64 im)))) (pow.f64 (cbrt.f64 (exp.f64 im)) (-.f64 3 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 im))) 1) (cbrt.f64 (exp.f64 (+.f64 im im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 im))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 2)) (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (pow.f64 (cbrt.f64 (exp.f64 im)) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (exp.f64 im)) (*.f64 (neg.f64 (exp.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)))) (*.f64 (exp.f64 im) (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 im)))) (pow.f64 (cbrt.f64 (exp.f64 im)) (+.f64 2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (cbrt.f64 (exp.f64 im))) (neg.f64 (cbrt.f64 (exp.f64 (+.f64 im im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (exp.f64 im)) (exp.f64 (+.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))) (exp.f64 (+.f64 im im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1)) (cbrt.f64 (exp.f64 im)))) (neg.f64 (cbrt.f64 (exp.f64 (+.f64 im im)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 im)) (sin.f64 re) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 re) (exp.f64 (neg.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im -2))) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (sin.f64 re) (exp.f64 im))) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 re) (exp.f64 im))) 2) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 re)) (/.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (exp.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (cbrt.f64 (exp.f64 (*.f64 im -2))) (sin.f64 re)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 re) (exp.f64 im))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (exp.f64 im))) 2) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 im)) (*.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (sin.f64 re)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 re)) (*.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 im) (sin.f64 re) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (sin.f64 re)) (exp.f64 im)) (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (sin.f64 re) (exp.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 im) (cbrt.f64 (sin.f64 re))) (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 (+.f64 im im))) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 1 (*.f64 (sin.f64 re) (exp.f64 im)))))))"]],"rules":[["egg-rr",103],["egg-rr",62]],"time":34.8388671875,"type":"rewrite"},{"count":[[213,198]],"inputs":[["(*.f64 (exp.f64 im) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 (exp.f64 im) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 -1/6 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))))","(+.f64 (*.f64 (exp.f64 im) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/6 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (*.f64 1/120 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5))))))","(+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7)))) (+.f64 (*.f64 (exp.f64 im) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/6 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (*.f64 1/120 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))))))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 2 (*.f64 (sin.f64 re) im)) (*.f64 2 (sin.f64 re)))","(+.f64 (*.f64 2 (*.f64 (sin.f64 re) im)) (+.f64 (*.f64 2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 2 (sin.f64 re))))","(+.f64 (*.f64 2 (*.f64 (sin.f64 re) im)) (+.f64 (*.f64 (+.f64 (sin.f64 re) (*.f64 1/3 (sin.f64 re))) (pow.f64 im 3)) (+.f64 (*.f64 2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 2 (sin.f64 re)))))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 re 7) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2))))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 1/360 (*.f64 (sin.f64 re) (pow.f64 im 6))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (exp.f64 im) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 (exp.f64 im) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 -1/6 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))))","(fma.f64 (*.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1) (pow.f64 re 3)) -1/6 (*.f64 (exp.f64 im) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(+.f64 (*.f64 (exp.f64 im) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/6 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (*.f64 1/120 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5))))))","(fma.f64 (*.f64 (exp.f64 im) re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (fma.f64 -1/6 (*.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1) (pow.f64 re 3)) (*.f64 1/120 (*.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1) (pow.f64 re 5)))))","(+.f64 (*.f64 -1/5040 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7)))) (+.f64 (*.f64 (exp.f64 im) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/6 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (*.f64 1/120 (*.f64 (exp.f64 im) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))))))","(fma.f64 (*.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1) (pow.f64 re 7)) -1/5040 (fma.f64 (*.f64 (exp.f64 im) re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (fma.f64 -1/6 (*.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1) (pow.f64 re 3)) (*.f64 1/120 (*.f64 (fma.f64 (exp.f64 im) (exp.f64 im) 1) (pow.f64 re 5))))))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (sin.f64 re) (*.f64 (exp.f64 im) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 2 (*.f64 (sin.f64 re) im)) (*.f64 2 (sin.f64 re)))","(*.f64 2 (*.f64 (sin.f64 re) (+.f64 im 1)))","(+.f64 (*.f64 2 (*.f64 (sin.f64 re) im)) (+.f64 (*.f64 2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 2 (sin.f64 re))))","(*.f64 2 (+.f64 (*.f64 (sin.f64 re) im) (*.f64 (sin.f64 re) (+.f64 (*.f64 im im) 1))))","(+.f64 (*.f64 2 (*.f64 (sin.f64 re) im)) (+.f64 (*.f64 (+.f64 (sin.f64 re) (*.f64 1/3 (sin.f64 re))) (pow.f64 im 3)) (+.f64 (*.f64 2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 2 (sin.f64 re)))))","(+.f64 (*.f64 2 (+.f64 (*.f64 (sin.f64 re) im) (*.f64 (sin.f64 re) (+.f64 (*.f64 im im) 1)))) (*.f64 (*.f64 4/3 (sin.f64 re)) (pow.f64 im 3)))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (sin.f64 re) (fma.f64 (exp.f64 im) (exp.f64 im) 1))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re)","(*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 -1/6 (pow.f64 re 3)) re))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re)))","(fma.f64 -1/6 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 re (*.f64 1/120 (pow.f64 re 5)))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 re 7) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) re))))","(+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 -1/6 (pow.f64 re 3)) (*.f64 1/120 (pow.f64 re 5)))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 re (*.f64 -1/5040 (pow.f64 re 7)))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))","(*.f64 (sin.f64 re) (+.f64 2 (*.f64 im im)))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2))))","(fma.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4)) (*.f64 (sin.f64 re) (+.f64 2 (*.f64 im im))))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 1/360 (*.f64 (sin.f64 re) (pow.f64 im 6))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))))","(fma.f64 (*.f64 (sin.f64 re) (pow.f64 im 4)) 1/12 (fma.f64 1/360 (*.f64 (sin.f64 re) (pow.f64 im 6)) (*.f64 (sin.f64 re) (+.f64 2 (*.f64 im im)))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))"]],"time":150.775146484375,"type":"simplify"},{"compiler":[[6422,2370]],"time":51.434814453125,"type":"eval"},{"alts":[["(*.f64 1/2 (*.f64 (pow.f64 (cbrt.f64 (sin.f64 re)) 3) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","fresh",0.7029840332848188],["(*.f64 1/2 (fma.f64 (exp.f64 im) (sin.f64 re) (/.f64 (sin.f64 re) (exp.f64 im))))","done",0.014003759768442016],["(*.f64 1/2 (/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im)))))","next",0.025722509768442016]],"compiler":[[16,13],[14,8],[26,17],[16,13],[26,17]],"count":[[295,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[292,1],"picked":[1,0]}],"min-error":[0.00390625],"time":137.244140625,"type":"prune"},{"compiler":[[119,18]],"locations":[["(/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))",0.01171875,true],["(sin.f64 re)",0.015625,false],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im))))",0.015625,true],["(*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im))",0.02734375,true]],"time":16.636962890625,"type":"localize"},{"count":[[3,72]],"series":[["(/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))","im","-inf",1.498046875],["(/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))","im","inf",1.475830078125],["(/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))","im","0",0.343017578125],["(/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))","re","-inf",0.320068359375],["(/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))","re","inf",1.157958984375],["(/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))","re","0",0.68505859375],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im))))","im","-inf",1.754150390625],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im))))","im","inf",3.506103515625],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im))))","im","0",0.407958984375],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im))))","re","-inf",0.348876953125],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im))))","re","inf",1.31005859375],["(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im))))","re","0",0.88916015625],["(*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im))","im","-inf",1.47998046875],["(*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im))","im","inf",1.487060546875],["(*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im))","im","0",0.35400390625],["(*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im))","re","-inf",0.40087890625],["(*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im))","re","inf",1.64404296875],["(*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im))","re","0",0.943115234375]],"time":20.408935546875,"type":"series"},{"count":[[3,201]],"inputs":[["(*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im))","(/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im))))","(/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 0) (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (*.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))) (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (*.f64 0 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))) (*.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 2/3) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 im) (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))) (pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 2/3) (cbrt.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 im) (cbrt.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))))) (pow.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 im)) (/.f64 (*.f64 (exp.f64 (*.f64 im 2/3)) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (/.f64 (exp.f64 im) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (neg.f64 (exp.f64 im)))) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3)))) (neg.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 im)) (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (neg.f64 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (cbrt.f64 (pow.f64 (exp.f64 (neg.f64 im)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 2/3) (cbrt.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) -1) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (exp.f64 im)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (exp.f64 im)) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (/.f64 (exp.f64 im) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (*.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 2/3) (exp.f64 im))) (cbrt.f64 (cbrt.f64 (neg.f64 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 2/3) (exp.f64 im))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) 1) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) 1) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 2/3)) (cbrt.f64 (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))) (cbrt.f64 (neg.f64 (exp.f64 (*.f64 im 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3) (pow.f64 (*.f64 (E.f64) (E.f64)) im)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3) (pow.f64 (*.f64 (E.f64) (E.f64)) im)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (sin.f64 re) (exp.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 (neg.f64 (/.f64 (sin.f64 re) (exp.f64 im)))) (*.f64 -1 (neg.f64 (*.f64 (sin.f64 re) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 0) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (neg.f64 (/.f64 (sin.f64 re) (exp.f64 im))) -1) (*.f64 (neg.f64 (*.f64 (sin.f64 re) (exp.f64 im))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 0 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (neg.f64 (exp.f64 (*.f64 im 2/3)))) (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3) (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 re)) (*.f64 (pow.f64 (sin.f64 re) 2/3) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))) (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 2/3) (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3))) (neg.f64 (pow.f64 (exp.f64 (neg.f64 im)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 2/3) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 im) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))) (/.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 im) (/.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))) (/.f64 (exp.f64 im) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (pow.f64 (exp.f64 im) (-.f64 1 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (pow.f64 (exp.f64 (neg.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (neg.f64 im)) 2/3) (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (sin.f64 re))) (pow.f64 (sin.f64 re) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (pow.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) 2/3) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (neg.f64 im)) 2/3)) (/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 re) 2/3) (+.f64 (/.f64 (cbrt.f64 (sin.f64 re)) (exp.f64 im)) (*.f64 (exp.f64 im) (cbrt.f64 (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 re) 2/3) (+.f64 (*.f64 (exp.f64 im) (cbrt.f64 (sin.f64 re))) (/.f64 (cbrt.f64 (sin.f64 re)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (neg.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 re)) (neg.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (neg.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3))) (cbrt.f64 (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))) (pow.f64 (cbrt.f64 (exp.f64 (*.f64 im 2/3))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (exp.f64 (*.f64 im 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3))) (neg.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1 (/.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3)))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (neg.f64 im)) 2/3)) (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 2/3)) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (exp.f64 (neg.f64 im)) 2/3) (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (exp.f64 (neg.f64 im)) 2/3) (neg.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (exp.f64 (neg.f64 im)) 2/3) (/.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (exp.f64 im) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))) (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))) (exp.f64 im)) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3) (cbrt.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3))))) (cbrt.f64 (neg.f64 (exp.f64 (*.f64 im 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3) (cbrt.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (pow.f64 (exp.f64 im) (-.f64 1 2/3))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (pow.f64 (exp.f64 im) (-.f64 1 2/3))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (pow.f64 (exp.f64 im) (-.f64 1 2/3))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (pow.f64 (exp.f64 (neg.f64 im)) 2/3)) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (pow.f64 (exp.f64 (neg.f64 im)) 2/3)) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 2/3) (exp.f64 (*.f64 im 2/3)))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4)) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3))) 1) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))) 1) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (/.f64 (exp.f64 im) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (neg.f64 (pow.f64 (exp.f64 (neg.f64 im)) 2/3))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (exp.f64 im) (/.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3)))) (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3)) (cbrt.f64 (neg.f64 (exp.f64 (*.f64 im 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3)))) (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 2/3) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4))) (cbrt.f64 (neg.f64 (exp.f64 (*.f64 im 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))) (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3)) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3)))) (/.f64 (pow.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) 2/3) (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (exp.f64 im) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (exp.f64 (*.f64 im 2/3)))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))) (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (exp.f64 im))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (neg.f64 (exp.f64 im)))) (pow.f64 (exp.f64 im) (-.f64 1 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 re) (exp.f64 (neg.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 im)) (sin.f64 re) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (sin.f64 re) (exp.f64 im))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (exp.f64 im))) 2) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 im)) (*.f64 (exp.f64 (*.f64 im 2/3)) (sin.f64 re)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 re)) (*.f64 (pow.f64 (sin.f64 re) 2/3) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 im) (sin.f64 re) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 im) (cbrt.f64 (sin.f64 re))) (pow.f64 (sin.f64 re) 2/3) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (exp.f64 (*.f64 im 2/3)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (pow.f64 (exp.f64 (neg.f64 im)) 2/3) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sin.f64 re)) (/.f64 (pow.f64 (sin.f64 re) 2/3) (exp.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (sin.f64 re) (exp.f64 im))) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 re) (exp.f64 im))) 2) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (sin.f64 re)) (exp.f64 im)) (pow.f64 (sin.f64 re) 2/3) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (/.f64 (sin.f64 re) (exp.f64 (*.f64 im 2/3))) (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sin.f64 re) (exp.f64 im)) 1 (*.f64 (sin.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (sin.f64 re) (exp.f64 im)) (*.f64 (sin.f64 re) (exp.f64 im)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) (exp.f64 im))) (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 0) (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (cbrt.f64 (exp.f64 (neg.f64 im)))) (*.f64 (/.f64 (sin.f64 re) (exp.f64 im)) (cbrt.f64 (exp.f64 (neg.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (sin.f64 re) (exp.f64 im)) (cbrt.f64 (exp.f64 (neg.f64 im)))) (*.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (cbrt.f64 (exp.f64 (neg.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))) (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (*.f64 0 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 0 (cbrt.f64 (neg.f64 (exp.f64 im)))) (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (neg.f64 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (neg.f64 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (/.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 re) (/.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 re) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (/.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))) (pow.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 2/3) (cbrt.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (neg.f64 im)))) (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (neg.f64 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (cbrt.f64 (pow.f64 (exp.f64 (neg.f64 im)) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (neg.f64 (exp.f64 (neg.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 re) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))) (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3)) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 2/3) (cbrt.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))) (cbrt.f64 (cbrt.f64 (neg.f64 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 2/3) (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (cbrt.f64 (exp.f64 (neg.f64 im)))) (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) (sin.f64 re)) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (neg.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))) (pow.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 2/3)) (cbrt.f64 (cbrt.f64 (neg.f64 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (pow.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 2/3)) (cbrt.f64 (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (cbrt.f64 (exp.f64 im)))) 1) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (/.f64 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)) (cbrt.f64 (exp.f64 (*.f64 im 2/3))))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (cbrt.f64 (exp.f64 im))))) (cbrt.f64 (neg.f64 (exp.f64 (*.f64 im 2/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (neg.f64 (exp.f64 im)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3) (exp.f64 im)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (neg.f64 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 3) (exp.f64 im)))))))"]],"rules":[["egg-rr",51],["egg-rr",100],["egg-rr",50]],"time":47.656982421875,"type":"rewrite"},{"count":[[273,254]],"inputs":[["(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7)))) (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 2 (sin.f64 re)) (*.f64 4/3 (*.f64 (sin.f64 re) im)))","(+.f64 (*.f64 (+.f64 (sin.f64 re) (*.f64 4/9 (sin.f64 re))) (pow.f64 im 2)) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 4/3 (*.f64 (sin.f64 re) im))))","(+.f64 (*.f64 (+.f64 (*.f64 8/81 (sin.f64 re)) (*.f64 2/3 (sin.f64 re))) (pow.f64 im 3)) (+.f64 (*.f64 (+.f64 (sin.f64 re) (*.f64 4/9 (sin.f64 re))) (pow.f64 im 2)) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 4/3 (*.f64 (sin.f64 re) im)))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (+.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3))))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (+.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7)))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2))))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 1/360 (*.f64 (sin.f64 re) (pow.f64 im 6))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (neg.f64 (*.f64 -2 im)))) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (neg.f64 (*.f64 -2 im)))) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (neg.f64 (*.f64 -2 im)))) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (neg.f64 (*.f64 -2 im)))) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7)))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 -2/3 (*.f64 (sin.f64 re) im)) (*.f64 2 (sin.f64 re)))","(+.f64 (*.f64 (+.f64 (sin.f64 re) (*.f64 1/9 (sin.f64 re))) (pow.f64 im 2)) (+.f64 (*.f64 -2/3 (*.f64 (sin.f64 re) im)) (*.f64 2 (sin.f64 re))))","(+.f64 (*.f64 (+.f64 (sin.f64 re) (*.f64 1/9 (sin.f64 re))) (pow.f64 im 2)) (+.f64 (*.f64 -2/3 (*.f64 (sin.f64 re) im)) (+.f64 (*.f64 (+.f64 (*.f64 -1/81 (sin.f64 re)) (*.f64 -1/3 (sin.f64 re))) (pow.f64 im 3)) (*.f64 2 (sin.f64 re)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cbrt.f64 (exp.f64 (*.f64 2 im))) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(fma.f64 -1/6 (*.f64 (cbrt.f64 (exp.f64 (*.f64 2 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3))) (*.f64 (cbrt.f64 (exp.f64 (*.f64 2 im))) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))","(fma.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 2 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5))) 1/120 (fma.f64 -1/6 (*.f64 (cbrt.f64 (exp.f64 (*.f64 2 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3))) (*.f64 (cbrt.f64 (exp.f64 (*.f64 2 im))) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7)))) (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))","(fma.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 2 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5))) 1/120 (fma.f64 -1/6 (*.f64 (cbrt.f64 (exp.f64 (*.f64 2 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3))) (fma.f64 -1/5040 (*.f64 (cbrt.f64 (exp.f64 (*.f64 2 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7))) (*.f64 (cbrt.f64 (exp.f64 (*.f64 2 im))) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 2 (sin.f64 re)) (*.f64 4/3 (*.f64 (sin.f64 re) im)))","(fma.f64 2 (sin.f64 re) (*.f64 (*.f64 4/3 (sin.f64 re)) im))","(+.f64 (*.f64 (+.f64 (sin.f64 re) (*.f64 4/9 (sin.f64 re))) (pow.f64 im 2)) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 4/3 (*.f64 (sin.f64 re) im))))","(fma.f64 (*.f64 13/9 (sin.f64 re)) (*.f64 im im) (fma.f64 2 (sin.f64 re) (*.f64 (*.f64 4/3 (sin.f64 re)) im)))","(+.f64 (*.f64 (+.f64 (*.f64 8/81 (sin.f64 re)) (*.f64 2/3 (sin.f64 re))) (pow.f64 im 3)) (+.f64 (*.f64 (+.f64 (sin.f64 re) (*.f64 4/9 (sin.f64 re))) (pow.f64 im 2)) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 4/3 (*.f64 (sin.f64 re) im)))))","(fma.f64 (pow.f64 im 3) (*.f64 (sin.f64 re) 62/81) (fma.f64 (*.f64 13/9 (sin.f64 re)) (*.f64 im im) (fma.f64 2 (sin.f64 re) (*.f64 (*.f64 4/3 (sin.f64 re)) im))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (*.f64 2 im))))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(+.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))))","(fma.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)) -1/6 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (+.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3))))))","(fma.f64 1/120 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)) (fma.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)) -1/6 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(+.f64 (*.f64 1/120 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (+.f64 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7)))) (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))))))","(fma.f64 1/120 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)) (fma.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (fma.f64 -1/5040 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7)) (*.f64 -1/6 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3))))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))","(*.f64 (sin.f64 re) (+.f64 2 (*.f64 im im)))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2))))","(fma.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4)) (*.f64 (sin.f64 re) (+.f64 2 (*.f64 im im))))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4))) (+.f64 (*.f64 1/360 (*.f64 (sin.f64 re) (pow.f64 im 6))) (+.f64 (*.f64 2 (sin.f64 re)) (*.f64 (sin.f64 re) (pow.f64 im 2)))))","(fma.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 4)) (fma.f64 1/360 (*.f64 (sin.f64 re) (pow.f64 im 6)) (*.f64 (sin.f64 re) (+.f64 2 (*.f64 im im)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (*.f64 2 im))) 1/3))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (neg.f64 (*.f64 -2 im)))) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (neg.f64 (*.f64 -2 im)))) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (neg.f64 (*.f64 -2 im)))) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (pow.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 1) (exp.f64 (neg.f64 (*.f64 -2 im)))) 1/3) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))))","(*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(fma.f64 -1/6 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3))) (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))","(fma.f64 -1/6 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3))) (fma.f64 1/120 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5))) (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7)))) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))) (*.f64 (pow.f64 (/.f64 1 (exp.f64 im)) 1/3) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))","(fma.f64 -1/6 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3))) (fma.f64 -1/5040 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7))) (fma.f64 1/120 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5))) (*.f64 (cbrt.f64 (exp.f64 (neg.f64 im))) (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 2 (sin.f64 re))","(+.f64 (*.f64 -2/3 (*.f64 (sin.f64 re) im)) (*.f64 2 (sin.f64 re)))","(fma.f64 -2/3 (*.f64 (sin.f64 re) im) (*.f64 2 (sin.f64 re)))","(+.f64 (*.f64 (+.f64 (sin.f64 re) (*.f64 1/9 (sin.f64 re))) (pow.f64 im 2)) (+.f64 (*.f64 -2/3 (*.f64 (sin.f64 re) im)) (*.f64 2 (sin.f64 re))))","(fma.f64 (*.f64 10/9 (sin.f64 re)) (*.f64 im im) (fma.f64 -2/3 (*.f64 (sin.f64 re) im) (*.f64 2 (sin.f64 re))))","(+.f64 (*.f64 (+.f64 (sin.f64 re) (*.f64 1/9 (sin.f64 re))) (pow.f64 im 2)) (+.f64 (*.f64 -2/3 (*.f64 (sin.f64 re) im)) (+.f64 (*.f64 (+.f64 (*.f64 -1/81 (sin.f64 re)) (*.f64 -1/3 (sin.f64 re))) (pow.f64 im 3)) (*.f64 2 (sin.f64 re)))))","(fma.f64 (*.f64 10/9 (sin.f64 re)) (*.f64 im im) (fma.f64 -2/3 (*.f64 (sin.f64 re) im) (fma.f64 (*.f64 (sin.f64 re) -28/81) (pow.f64 im 3) (*.f64 2 (sin.f64 re)))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (*.f64 -1 im)))) (pow.f64 (/.f64 1 (exp.f64 im)) 1/3))","(*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (cbrt.f64 (exp.f64 (neg.f64 im))))"]],"time":243.650146484375,"type":"simplify"},{"compiler":[[8160,2826]],"time":56.826904296875,"type":"eval"},{"alts":[["(*.f64 1/2 (/.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 (sin.f64 re)) 3) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im)))))","fresh",0.6967927735163769],["(*.f64 1/2 (fma.f64 (exp.f64 im) (sin.f64 re) (/.f64 (sin.f64 re) (exp.f64 im))))","done",0.014003759768442016],["(*.f64 1/2 (/.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3) (cbrt.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))))) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))))","fresh",34.82441815982637]],"compiler":[[29,20],[14,8],[37,23]],"count":[[284,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[281,2],"picked":[1,0]}],"min-error":[0],"time":126.570068359375,"type":"prune"},{"accuracy":[0.014003759768442016],"baseline":[0.014003759768442016],"branch":[["re",0.014003759768442016,1],["im",0.014003759768442016,1],["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))",0.014003759768442016,1],["(*.f64 1/2 (sin.f64 re))",0.014003759768442016,1],["(sin.f64 re)",0.014003759768442016,1],["(+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im))",0.014003759768442016,1]],"compiler":[[3,2],[3,2],[14,11],[6,5],[4,3],[9,7],[154,63]],"count":[[8,1]],"inputs":[["(*.f64 1/2 (/.f64 (*.f64 (/.f64 (*.f64 (pow.f64 (cbrt.f64 (sin.f64 re)) 3) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im)))))","(*.f64 1/2 (/.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) 2/3) (cbrt.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 (*.f64 im 2/3))))) (cbrt.f64 (exp.f64 (*.f64 im 2/3)))))","(*.f64 1/2 (/.f64 (*.f64 (/.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (cbrt.f64 (exp.f64 im))) (exp.f64 im)) (cbrt.f64 (exp.f64 (+.f64 im im)))))","(*.f64 1/2 (fma.f64 (exp.f64 im) (sin.f64 re) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (/.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (exp.f64 im)) (exp.f64 im)))","(*.f64 1/2 (*.f64 (pow.f64 (cbrt.f64 (sin.f64 re)) 3) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))"]],"link":["."],"name":["math.sin on complex, real part"],"oracle":[34.94750321843703],"outputs":[["(*.f64 1/2 (fma.f64 (exp.f64 im) (sin.f64 re) (/.f64 (sin.f64 re) (exp.f64 im))))"]],"time":23.60595703125,"times":[["re",3.739013671875],["im",3.802001953125],["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))",3.924072265625],["(*.f64 1/2 (sin.f64 re))",4.00390625],["(sin.f64 re)",3.740966796875],["(+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im))",1.81201171875]],"type":"regimes"},{"compiler":[[14,8]],"inputs":[["(*.f64 1/2 (fma.f64 (exp.f64 im) (sin.f64 re) (/.f64 (sin.f64 re) (exp.f64 im))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (fma.f64 (exp.f64 im) (sin.f64 re) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))"]],"stop":[["fuel",1]],"time":20.696044921875,"type":"simplify"},{"time":0.015869140625,"type":"soundness"},{"compiler":[[14,8]],"remove-preprocessing":[[]],"time":9.004150390625,"type":"end"}]
[{"compiler":[[18,12]],"method":["search"],"sampling":[[12,0.1823498124509797,0.5928806736374099,0.22476951391161037],[11,0.13651857616650886,0.7069711980051352,0.15651022582835594],[10,0.10531433018559255,0.7586532304110278,0.1360324394033796],[9,0.0702095534570617,0.8815199489608858,0.048270497582052485],[8,0.04680636897137447,0.9517295024179475,0.0014641286106780171],[7,0.031204245980916312,0.9673316254084057,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":139.2919921875,"type":"analyze"},{"outcomes":[["body",256,"invalid",209.88671875,4568],["body",256,"valid",420.620361328125,8256]],"time":642.48681640625,"type":"sample"},{"compiler":[[17,11]],"inputs":[["0","1","2"],["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 y x) (*.f64 y z)) (*.f64 x z))))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 z y) (*.f64 z x)) (*.f64 y x))))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x z) (*.f64 x y)) (*.f64 z y))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))","(sqrt.f64 (*.f64 (fma.f64 y z (*.f64 x (+.f64 z y))) 4))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 y x) (*.f64 y z)) (*.f64 x z))))","(sqrt.f64 (*.f64 (fma.f64 y z (*.f64 x (+.f64 z y))) 4))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 z y) (*.f64 z x)) (*.f64 y x))))","(sqrt.f64 (*.f64 (fma.f64 y z (*.f64 x (+.f64 z y))) 4))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x z) (*.f64 x y)) (*.f64 z y))))","(sqrt.f64 (*.f64 (fma.f64 y z (*.f64 x (+.f64 z y))) 4))"]],"symmetry":[[]],"time":70.480224609375,"type":"preprocess"},{"count":[[1,2]],"inputs":[["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))","(sqrt.f64 (*.f64 (fma.f64 x (+.f64 y z) (*.f64 y z)) 4))"]],"time":19.477783203125,"type":"simplify"},{"compiler":[[28,16]],"time":0.416015625,"type":"eval"},{"alts":[["(sqrt.f64 (*.f64 (fma.f64 x (+.f64 y z) (*.f64 y z)) 4))","fresh",22.610201684835417],["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))","next",22.602389184835417]],"compiler":[[14,9],[17,11],[14,9],[17,11]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[22.598482934835417],"time":1.360107421875,"type":"prune"},{"compiler":[[60,12]],"locations":[["(+.f64 (*.f64 x y) (*.f64 x z))",0.8046875000000001,true],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))",1.5976562500000002,true],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))",21.40391162531258,true]],"time":8.60986328125,"type":"localize"},{"count":[[3,84]],"series":[["(+.f64 (*.f64 x y) (*.f64 x z))","z","-inf",0.178955078125],["(+.f64 (*.f64 x y) (*.f64 x z))","z","inf",0.152099609375],["(+.f64 (*.f64 x y) (*.f64 x z))","z","0",0.14892578125],["(+.f64 (*.f64 x y) (*.f64 x z))","y","-inf",0.18896484375],["(+.f64 (*.f64 x y) (*.f64 x z))","y","inf",0.154052734375],["(+.f64 (*.f64 x y) (*.f64 x z))","y","0",0.177978515625],["(+.f64 (*.f64 x y) (*.f64 x z))","x","-inf",0.26806640625],["(+.f64 (*.f64 x y) (*.f64 x z))","x","inf",0.2919921875],["(+.f64 (*.f64 x y) (*.f64 x z))","x","0",0.295166015625],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","z","-inf",0.261962890625],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","z","inf",0.27783203125],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","z","0",0.2529296875],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","y","-inf",0.282958984375],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","y","inf",0.305908203125],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","y","0",0.31298828125],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","x","-inf",0.31103515625],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","x","inf",0.333984375],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","x","0",0.337890625],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","z","-inf",1.070068359375],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","z","inf",0.899169921875],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","z","0",0.559814453125],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","y","-inf",0.802001953125],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","y","inf",0.72216796875],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","y","0",1.15087890625],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","x","-inf",0.795166015625],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","x","inf",0.7099609375],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","x","0",0.8798828125]],"time":12.482177734375,"type":"series"},{"count":[[3,192]],"inputs":[["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))","(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))","(+.f64 (*.f64 x y) (*.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2) (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 0 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 1/2 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (*.f64 1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (fabs.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 z x)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2) (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 (*.f64 y (+.f64 z x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 0 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 1/2 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 z y (*.f64 x (+.f64 y z)))) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (+.f64 x y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (+.f64 z x)) 1) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (*.f64 1 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 1) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (cbrt.f64 (*.f64 (*.f64 x (+.f64 y z)) (*.f64 y z))))) (+.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (cbrt.f64 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2)) (cbrt.f64 (*.f64 (*.f64 x (+.f64 y z)) (*.f64 y z))))) (+.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2)) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2)) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2) (*.f64 2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2) (+.f64 1/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 1 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y z) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2)) (cbrt.f64 (*.f64 x (+.f64 y z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x (+.f64 y z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y z) x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (+.f64 x y))) (cbrt.f64 (pow.f64 (*.f64 z (+.f64 x y)) 2)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (+.f64 x y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x y)) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) y) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (cbrt.f64 (*.f64 x y)) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) x) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (cbrt.f64 (*.f64 y z)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) y) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 y z)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) z) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) x) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x z) 2)) (cbrt.f64 (*.f64 x z)) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x z)) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x z)) (cbrt.f64 (pow.f64 (*.f64 x z) 2)) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y z)) 1 (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (+.f64 x y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 z (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x z) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x z) 1 (*.f64 y (+.f64 z x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 (*.f64 x (+.f64 y z)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 y z)) 1/2) (*.f64 (*.f64 x (+.f64 y z)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 y z)) 0) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 0 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (*.f64 x (+.f64 y z))) (*.f64 1/2 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (*.f64 x (+.f64 y z))) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y z) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (*.f64 x (+.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 y z)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 z (cbrt.f64 x)) (*.f64 y (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 y (cbrt.f64 x)) (*.f64 z (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x z) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (cbrt.f64 (*.f64 (*.f64 x y) (*.f64 x z))))) (+.f64 (cbrt.f64 (*.f64 x z)) (cbrt.f64 (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (-.f64 (cbrt.f64 (pow.f64 (*.f64 x z) 2)) (cbrt.f64 (*.f64 (*.f64 x y) (*.f64 x z))))) (+.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (*.f64 x z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2)) (cbrt.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x z)) (cbrt.f64 (pow.f64 (*.f64 x z) 2)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x y)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x y) 2)) (cbrt.f64 (*.f64 x y)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (cbrt.f64 (*.f64 y y)) x) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (*.f64 x x)) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x z) 2)) (cbrt.f64 (*.f64 x z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 z)) (cbrt.f64 (*.f64 z z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x z) 1 (*.f64 x y))))))"]],"rules":[["egg-rr",52],["egg-rr",98],["egg-rr",42]],"time":35.8828125,"type":"rewrite"},{"count":[[276,235]],"inputs":[["(sqrt.f64 (*.f64 y z))","(+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))","(+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3)))) (+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))))","(sqrt.f64 (*.f64 y x))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))))","(*.f64 y z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 y z) x)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))","(+.f64 (*.f64 z x) (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 y z))","(+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))","(fma.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 (*.f64 y z)))) (*.f64 x (+.f64 y z)) (sqrt.f64 (*.f64 y z)))","(+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (sqrt.f64 (*.f64 y z)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 3))) (pow.f64 (*.f64 x (+.f64 y z)) 2)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 x (+.f64 y z))))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3)))) (+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(+.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 5))) (pow.f64 (*.f64 x (+.f64 y z)) 3)) 1/16 (sqrt.f64 (*.f64 y z))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 3))) (pow.f64 (*.f64 x (+.f64 y z)) 2)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 x (+.f64 y z))))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(fma.f64 (*.f64 1/2 (*.f64 y (+.f64 z x))) (sqrt.f64 (/.f64 1 (*.f64 z x))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(fma.f64 (*.f64 -1/8 (pow.f64 (*.f64 y (+.f64 z x)) 2)) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 3))) (fma.f64 (*.f64 1/2 (*.f64 y (+.f64 z x))) (sqrt.f64 (/.f64 1 (*.f64 z x))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 (*.f64 -1/8 (pow.f64 (*.f64 y (+.f64 z x)) 2)) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 3))) (fma.f64 (*.f64 1/16 (pow.f64 (*.f64 y (+.f64 z x)) 3)) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 5))) (fma.f64 (*.f64 1/2 (*.f64 y (+.f64 z x))) (sqrt.f64 (/.f64 1 (*.f64 z x))) (sqrt.f64 (*.f64 z x)))))","(sqrt.f64 (*.f64 y x))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(fma.f64 (*.f64 1/2 (*.f64 (+.f64 y x) z)) (sqrt.f64 (/.f64 1 (*.f64 y x))) (sqrt.f64 (*.f64 y x)))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y x) z) 2)) (fma.f64 (*.f64 1/2 (*.f64 (+.f64 y x) z)) (sqrt.f64 (/.f64 1 (*.f64 y x))) (sqrt.f64 (*.f64 y x))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y x) z) 2)) (fma.f64 (*.f64 1/16 (pow.f64 (*.f64 (+.f64 y x) z) 3)) (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 5))) (fma.f64 (*.f64 1/2 (*.f64 (+.f64 y x) z)) (sqrt.f64 (/.f64 1 (*.f64 y x))) (sqrt.f64 (*.f64 y x)))))","(*.f64 y z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (neg.f64 x) (neg.f64 (+.f64 y z)))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 y z (*.f64 (neg.f64 x) (neg.f64 (+.f64 y z))))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 y z (*.f64 (neg.f64 x) (neg.f64 (+.f64 y z))))","(+.f64 (*.f64 y z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 y z (*.f64 (neg.f64 x) (neg.f64 (+.f64 y z))))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 (neg.f64 y) (neg.f64 (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(fma.f64 (neg.f64 y) (neg.f64 (+.f64 z x)) (*.f64 z x))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(fma.f64 (neg.f64 y) (neg.f64 (+.f64 z x)) (*.f64 z x))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(fma.f64 (neg.f64 y) (neg.f64 (+.f64 z x)) (*.f64 z x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 z x (*.f64 y (+.f64 z x)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 (neg.f64 z) (neg.f64 (+.f64 y x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(fma.f64 y x (*.f64 (neg.f64 z) (neg.f64 (+.f64 y x))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(fma.f64 y x (*.f64 (neg.f64 z) (neg.f64 (+.f64 y x))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(fma.f64 y x (*.f64 (neg.f64 z) (neg.f64 (+.f64 y x))))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 y z) x)","(*.f64 x (+.f64 y z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (neg.f64 x) (neg.f64 (+.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (neg.f64 x) (neg.f64 (+.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (neg.f64 x) (neg.f64 (+.f64 y z)))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (neg.f64 x) (neg.f64 (+.f64 y z)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 y x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))","(+.f64 (*.f64 z x) (*.f64 y x))","(*.f64 x (+.f64 y z))"]],"time":260.132080078125,"type":"simplify"},{"compiler":[[4442,1672]],"time":35.491943359375,"type":"eval"},{"alts":[["(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)))","fresh",22.794459204372302],["(*.f64 2 (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","next",22.73358044460386],["(*.f64 2 (sqrt.f64 (*.f64 y (+.f64 z x))))","fresh",34.06567628183427],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 z (+.f64 x y)))))","fresh",33.46244847564017],["(*.f64 2 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2))","fresh",22.89344299344607],["(*.f64 2 (sqrt.f64 (*.f64 y x)))","fresh",48.01673368989411],["(*.f64 2 (sqrt.f64 (*.f64 x (+.f64 y z))))","fresh",36.7904284734424],["(*.f64 2 (sqrt.f64 (*.f64 (+.f64 y x) z)))","fresh",38.008845537487616],["(*.f64 2 (sqrt.f64 (fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) y) (*.f64 x (+.f64 y z)))))","fresh",29.534438081253846],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 z (+.f64 x y)))))","fresh",29.034861114407217],["(*.f64 2 (sqrt.f64 (*.f64 z x)))","fresh",51.864397373895535]],"compiler":[[17,12],[25,12],[11,8],[20,13],[17,12],[9,7],[11,8],[11,8],[20,13],[20,13],[9,7],[17,12],[25,12],[11,8],[20,13],[17,12],[9,7],[11,8],[11,8],[20,13],[20,13],[9,7]],"count":[[237,11]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[235,11],"picked":[1,0]}],"min-error":[22.10846737790345],"time":91.675048828125,"type":"prune"},{"compiler":[[93,13]],"locations":[["(*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))",0.35384750976844204,true],["(fma.f64 z y (*.f64 x (+.f64 y z)))",1.5038897356333614,true],["(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))",21.40391162531258,true],["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))",21.70657160114625,true]],"time":10.8779296875,"type":"localize"},{"count":[[4,72]],"series":[["(*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))","x","-inf",0.31689453125],["(*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))","x","inf",0.30908203125],["(*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))","x","0",0.242919921875],["(*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))","y","-inf",0.35498046875],["(*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))","y","inf",0.322021484375],["(*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))","y","0",0.248046875],["(*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))","z","-inf",0.35693359375],["(*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))","z","inf",0.296875],["(*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))","z","0",0.283935546875],["(fma.f64 z y (*.f64 x (+.f64 y z)))","x","-inf",0.23583984375],["(fma.f64 z y (*.f64 x (+.f64 y z)))","x","inf",0.2138671875],["(fma.f64 z y (*.f64 x (+.f64 y z)))","x","0",0.260986328125],["(fma.f64 z y (*.f64 x (+.f64 y z)))","y","-inf",0.291015625],["(fma.f64 z y (*.f64 x (+.f64 y z)))","y","inf",0.31005859375],["(fma.f64 z y (*.f64 x (+.f64 y z)))","y","0",0.2509765625],["(fma.f64 z y (*.f64 x (+.f64 y z)))","z","-inf",0.2919921875],["(fma.f64 z y (*.f64 x (+.f64 y z)))","z","inf",0.30712890625],["(fma.f64 z y (*.f64 x (+.f64 y z)))","z","0",0.27880859375],["(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","x","-inf",0.3759765625],["(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","x","inf",0.2900390625],["(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","x","0",0.2548828125],["(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","y","-inf",0.298095703125],["(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","y","inf",0.293212890625],["(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","y","0",0.22216796875],["(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","z","-inf",0.3291015625],["(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","z","inf",0.298828125],["(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","z","0",0.23193359375],["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","x","-inf",0.330078125],["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","x","inf",0.31298828125],["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","x","0",0.9169921875],["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","y","-inf",0.344970703125],["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","y","inf",0.330078125],["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","y","0",0.9169921875],["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","z","-inf",0.35595703125],["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","z","inf",0.43798828125],["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","z","0",1.7080078125]],"time":13.923095703125,"type":"series"},{"count":[[4,229]],"inputs":[["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))","(fma.f64 z y (*.f64 x (+.f64 y z)))","(*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2) (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 1/2 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 0 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 2 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (/.f64 2/3 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 2 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 2/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/6 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/2 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2) (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 1/2 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 0 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1 1/6))) (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 2/3 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 2/3 1/2))) (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4) (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (fabs.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2)))) (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (fabs.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1 1/6)))) (fabs.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 2/3 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1 1/4))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/6 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/6 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2) (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 z y (*.f64 x (+.f64 y z)))) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 1/2 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 0 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 z x)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y z) (*.f64 x z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (+.f64 (*.f64 x z) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (+.f64 z x)) 1) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 1) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2)) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 2/3 1/2))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 2/3 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 2 3)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1 1/6))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1 1/6)))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (pow.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 2/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y z) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (+.f64 y z))) (pow.f64 (+.f64 y z) 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2/3) (cbrt.f64 (*.f64 x (+.f64 y z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y z) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (pow.f64 (*.f64 x (+.f64 y z)) 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y z) x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x (+.f64 y z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y z)) (*.f64 (pow.f64 (+.f64 y z) 2/3) x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 z)) (pow.f64 z 2/3) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) y) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y z)) 1 (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 (*.f64 x (+.f64 y z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2) (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 1/2 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 0 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1 1/6))) (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 2/3 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 2/3 1/2))) (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4) (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (fabs.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2)))) (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (fabs.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1 1/6)))) (fabs.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (fabs.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 2/3 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (neg.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1 1/4))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 2 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/6 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/6 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))"]],"rules":[["egg-rr",58],["egg-rr",76],["egg-rr",58],["egg-rr",37]],"time":42.0,"type":"rewrite"},{"count":[[301,235]],"inputs":[["(pow.f64 (*.f64 y x) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (pow.f64 (*.f64 y x) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (+.f64 (pow.f64 (*.f64 y x) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (+.f64 (pow.f64 (*.f64 y x) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))))) (pow.f64 z 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))))))","(pow.f64 (*.f64 z x) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (pow.f64 (*.f64 z x) 1/3))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (pow.f64 (*.f64 z x) 1/3)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3)))))))) (pow.f64 (*.f64 z x) 1/3))))","(pow.f64 (*.f64 y z) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (pow.f64 (*.f64 y z) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (+.f64 (pow.f64 (*.f64 y z) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 z 7))) 1/9) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2))))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (+.f64 (pow.f64 (*.f64 y z) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))))) (pow.f64 x 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 z 7))) 1/9) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))))))","(sqrt.f64 (*.f64 y x))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))))","(sqrt.f64 (*.f64 y z))","(+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))","(+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3)))) (+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(*.f64 y z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(sqrt.f64 (*.f64 y x))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))))","(sqrt.f64 (*.f64 y z))","(+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))","(+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3)))) (+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (*.f64 y x) 1/3)","(cbrt.f64 (*.f64 y x))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (pow.f64 (*.f64 y x) 1/3))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 2)) 1/9) (*.f64 (+.f64 y x) z)) (cbrt.f64 (*.f64 y x)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (+.f64 (pow.f64 (*.f64 y x) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))))","(fma.f64 (*.f64 1/3 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 2)) 1/9)) (*.f64 (+.f64 y x) z) (fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 7)) 1/9) (pow.f64 (*.f64 (+.f64 y x) z) 2)) (cbrt.f64 (*.f64 y x))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (+.f64 (pow.f64 (*.f64 y x) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))))) (pow.f64 z 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 2)) 1/9) (*.f64 (+.f64 y x) z)) (cbrt.f64 (*.f64 y x))) (fma.f64 -1/3 (*.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y x) (neg.f64 2))) (pow.f64 (+.f64 y x) 3)) (+.f64 1/27 -2/9)) (*.f64 (pow.f64 z 3) (cbrt.f64 (pow.f64 (*.f64 y x) (neg.f64 2))))) (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 7)) 1/9)) (pow.f64 (*.f64 (+.f64 y x) z) 2))))","(pow.f64 (*.f64 z x) 1/3)","(cbrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (pow.f64 (*.f64 z x) 1/3))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 2)) 1/9) (*.f64 y (+.f64 z x))) (cbrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (pow.f64 (*.f64 z x) 1/3)))","(fma.f64 (*.f64 -1/9 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 7)) 1/9)) (pow.f64 (*.f64 y (+.f64 z x)) 2) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 2)) 1/9) (*.f64 y (+.f64 z x))) (cbrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3)))))))) (pow.f64 (*.f64 z x) 1/3))))","(fma.f64 (*.f64 -1/9 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 7)) 1/9)) (pow.f64 (*.f64 y (+.f64 z x)) 2) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 2)) 1/9) (*.f64 y (+.f64 z x))) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) (neg.f64 2))) (pow.f64 y 3)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) (neg.f64 2))) (pow.f64 (+.f64 z x) 3)) (+.f64 -2/9 1/27))) (cbrt.f64 (*.f64 z x)))))","(pow.f64 (*.f64 y z) 1/3)","(cbrt.f64 (*.f64 y z))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (pow.f64 (*.f64 y z) 1/3))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 2)) 1/9) (*.f64 (+.f64 y z) x)) (cbrt.f64 (*.f64 y z)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (+.f64 (pow.f64 (*.f64 y z) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 z 7))) 1/9) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2))))))","(fma.f64 (*.f64 1/3 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 2)) 1/9)) (*.f64 (+.f64 y z) x) (fma.f64 (*.f64 -1/9 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 7)) 1/9)) (pow.f64 (*.f64 (+.f64 y z) x) 2) (cbrt.f64 (*.f64 y z))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (+.f64 (pow.f64 (*.f64 y z) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))))) (pow.f64 x 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 z 7))) 1/9) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 2)) 1/9) (*.f64 (+.f64 y z) x)) (cbrt.f64 (*.f64 y z))) (fma.f64 -1/3 (*.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y z) (neg.f64 2))) (pow.f64 (+.f64 y z) 3)) (+.f64 -2/9 1/27)) (*.f64 (pow.f64 x 3) (cbrt.f64 (pow.f64 (*.f64 y z) (neg.f64 2))))) (*.f64 (*.f64 -1/9 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 7)) 1/9)) (pow.f64 (*.f64 (+.f64 y z) x) 2))))","(sqrt.f64 (*.f64 y x))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(fma.f64 (*.f64 1/2 (*.f64 (+.f64 y x) z)) (sqrt.f64 (/.f64 1 (*.f64 y x))) (sqrt.f64 (*.f64 y x)))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y x) z) 2)) (fma.f64 (*.f64 1/2 (*.f64 (+.f64 y x) z)) (sqrt.f64 (/.f64 1 (*.f64 y x))) (sqrt.f64 (*.f64 y x))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y x) z) 2)) (fma.f64 (*.f64 1/16 (pow.f64 (*.f64 (+.f64 y x) z) 3)) (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 5))) (fma.f64 (*.f64 1/2 (*.f64 (+.f64 y x) z)) (sqrt.f64 (/.f64 1 (*.f64 y x))) (sqrt.f64 (*.f64 y x)))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(fma.f64 (*.f64 1/2 (*.f64 y (+.f64 z x))) (sqrt.f64 (/.f64 1 (*.f64 z x))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(fma.f64 (*.f64 -1/8 (pow.f64 (*.f64 y (+.f64 z x)) 2)) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 3))) (fma.f64 (*.f64 1/2 (*.f64 y (+.f64 z x))) (sqrt.f64 (/.f64 1 (*.f64 z x))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 (*.f64 -1/8 (pow.f64 (*.f64 y (+.f64 z x)) 2)) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 3))) (fma.f64 (*.f64 1/16 (pow.f64 (*.f64 y (+.f64 z x)) 3)) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 5))) (fma.f64 (*.f64 1/2 (*.f64 y (+.f64 z x))) (sqrt.f64 (/.f64 1 (*.f64 z x))) (sqrt.f64 (*.f64 z x)))))","(sqrt.f64 (*.f64 y z))","(+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))","(fma.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 (*.f64 y z)))) (*.f64 (+.f64 y z) x) (sqrt.f64 (*.f64 y z)))","(+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (sqrt.f64 (*.f64 y z)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y z) x) 2)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3)))) (+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(+.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 5))) (pow.f64 (*.f64 (+.f64 y z) x) 3)) 1/16 (sqrt.f64 (*.f64 y z))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y z) x) 2)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y x) (*.f64 (+.f64 y x) z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 (neg.f64 z) (neg.f64 (+.f64 y x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(fma.f64 y x (*.f64 (neg.f64 z) (neg.f64 (+.f64 y x))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(fma.f64 y x (*.f64 (neg.f64 z) (neg.f64 (+.f64 y x))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z)))","(fma.f64 y x (*.f64 (neg.f64 z) (neg.f64 (+.f64 y x))))","(*.f64 z x)","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(*.f64 y (+.f64 z x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 z x) (*.f64 y (+.f64 z x)))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))","(*.f64 (neg.f64 y) (neg.f64 (+.f64 z x)))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(fma.f64 (neg.f64 y) (neg.f64 (+.f64 z x)) (*.f64 z x))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(fma.f64 (neg.f64 y) (neg.f64 (+.f64 z x)) (*.f64 z x))","(+.f64 (*.f64 z x) (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))","(fma.f64 (neg.f64 y) (neg.f64 (+.f64 z x)) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 y z))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 y z) (*.f64 (+.f64 y z) x))","(fma.f64 y z (*.f64 (+.f64 y z) x))","(sqrt.f64 (*.f64 y x))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(fma.f64 (*.f64 1/2 (*.f64 (+.f64 y x) z)) (sqrt.f64 (/.f64 1 (*.f64 y x))) (sqrt.f64 (*.f64 y x)))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y x) z) 2)) (fma.f64 (*.f64 1/2 (*.f64 (+.f64 y x) z)) (sqrt.f64 (/.f64 1 (*.f64 y x))) (sqrt.f64 (*.f64 y x))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y x) z) 2)) (fma.f64 (*.f64 1/16 (pow.f64 (*.f64 (+.f64 y x) z) 3)) (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 5))) (fma.f64 (*.f64 1/2 (*.f64 (+.f64 y x) z)) (sqrt.f64 (/.f64 1 (*.f64 y x))) (sqrt.f64 (*.f64 y x)))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(fma.f64 (*.f64 1/2 (*.f64 y (+.f64 z x))) (sqrt.f64 (/.f64 1 (*.f64 z x))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(fma.f64 (*.f64 -1/8 (pow.f64 (*.f64 y (+.f64 z x)) 2)) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 3))) (fma.f64 (*.f64 1/2 (*.f64 y (+.f64 z x))) (sqrt.f64 (/.f64 1 (*.f64 z x))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 (*.f64 -1/8 (pow.f64 (*.f64 y (+.f64 z x)) 2)) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 3))) (fma.f64 (*.f64 1/16 (pow.f64 (*.f64 y (+.f64 z x)) 3)) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 5))) (fma.f64 (*.f64 1/2 (*.f64 y (+.f64 z x))) (sqrt.f64 (/.f64 1 (*.f64 z x))) (sqrt.f64 (*.f64 z x)))))","(sqrt.f64 (*.f64 y z))","(+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))","(fma.f64 (*.f64 1/2 (sqrt.f64 (/.f64 1 (*.f64 y z)))) (*.f64 (+.f64 y z) x) (sqrt.f64 (*.f64 y z)))","(+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (sqrt.f64 (*.f64 y z)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y z) x) 2)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3)))) (+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(+.f64 (fma.f64 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 5))) (pow.f64 (*.f64 (+.f64 y z) x) 3)) 1/16 (sqrt.f64 (*.f64 y z))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y z) x) 2)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))"]],"time":261.637939453125,"type":"simplify"},{"compiler":[[10558,3217]],"time":62.924072265625,"type":"eval"},{"alts":[["(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)))","next",22.794459204372302],["(*.f64 2 (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","done",22.73358044460386],["(*.f64 2 (sqrt.f64 (*.f64 y (+.f64 z x))))","fresh",34.06567628183427],["(*.f64 2 (*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","fresh",22.84037673367763],["(*.f64 2 (sqrt.f64 (*.f64 z x)))","fresh",51.864397373895535],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 z (+.f64 x y)))))","fresh",33.46244847564017],["(*.f64 2 (sqrt.f64 (*.f64 y x)))","fresh",48.01673368989411],["(*.f64 2 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","fresh",25.942526176637806],["(*.f64 2 (sqrt.f64 (*.f64 x (+.f64 y z))))","fresh",36.7904284734424],["(*.f64 2 (sqrt.f64 (*.f64 (+.f64 y x) z)))","fresh",38.008845537487616],["(*.f64 2 (sqrt.f64 (fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) y) (*.f64 x (+.f64 y z)))))","fresh",29.534438081253846],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 z (+.f64 x y)))))","fresh",29.034861114407217]],"compiler":[[17,12],[25,12],[11,8],[29,15],[9,7],[20,13],[9,7],[41,18],[11,8],[11,8],[20,13],[20,13],[17,12],[11,8],[29,15],[9,7],[20,13],[9,7],[41,18],[11,8],[11,8],[20,13],[20,13]],"count":[[341,12]],"kept":[{"done":[0,0],"fresh":[10,9],"new":[330,2],"picked":[1,1]}],"min-error":[22.10846737790282],"time":143.48291015625,"type":"prune"},{"compiler":[[70,19]],"locations":[["(pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)",0.49425517583195644,true],["(fma.f64 z y (*.f64 x (+.f64 y z)))",1.5038897356333614,false],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3))",21.40391162531258,true],["(cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))",21.70657160114625,false]],"time":11.653076171875,"type":"localize"},{"count":[[2,24]],"series":[["(pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)","x","-inf",0.41796875],["(pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)","x","inf",0.489990234375],["(pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)","x","0",1.666015625],["(pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)","y","-inf",0.4189453125],["(pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)","y","inf",0.492919921875],["(pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)","y","0",3.009033203125],["(pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)","z","-inf",0.39794921875],["(pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)","z","inf",0.677001953125],["(pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)","z","0",2.2470703125],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3))","x","-inf",0.27880859375],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3))","x","inf",0.302978515625],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3))","x","0",0.22705078125],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3))","y","-inf",0.3408203125],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3))","y","inf",0.31396484375],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3))","y","0",0.23095703125],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3))","z","-inf",0.35205078125],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3))","z","inf",0.2958984375],["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3))","z","0",0.35595703125]],"time":12.860107421875,"type":"series"},{"count":[[2,111]],"inputs":[["(sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3))","(pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2) (*.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 0 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 1/2 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (*.f64 -1 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) -1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 1) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (fabs.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fabs.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (fabs.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/4 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 3/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2) (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 z y (*.f64 x (+.f64 y z)))) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 0 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 1/2 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 z x)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y z) (*.f64 x z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (+.f64 (*.f64 x z) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (+.f64 z x)) 1) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 1) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2)) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 2 1/3)) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 2 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 z)) (pow.f64 z 2/3) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) y) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (pow.f64 (*.f64 x (+.f64 y z)) 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y z) x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2/3) (cbrt.f64 (*.f64 x (+.f64 y z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y z) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y z)) (*.f64 (pow.f64 (+.f64 y z) 2/3) x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x (+.f64 y z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y z) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (+.f64 y z))) (pow.f64 (+.f64 y z) 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y z)) 1 (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 (*.f64 x (+.f64 y z)))))))"]],"rules":[["egg-rr",73],["egg-rr",38]],"time":28.50390625,"type":"rewrite"},{"count":[[135,156]],"inputs":[["(sqrt.f64 (*.f64 y x))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))))","(sqrt.f64 (*.f64 y z))","(+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))","(+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3)))) (+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(*.f64 (pow.f64 1 1/3) (*.f64 y x))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x)))) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y x)) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2))))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y x)) 1/9) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y x)) 1/9) (pow.f64 (+.f64 y x) 2))))) (pow.f64 z 2)) (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x)))) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x))))","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y x)) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2))))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y x)) 1/9) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y x)) 1/9) (pow.f64 (+.f64 y x) 2))))) (pow.f64 z 2)) (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x)))) z) (+.f64 (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y x)) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))))) (pow.f64 (/.f64 1 (*.f64 y x)) 1/3))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (+.f64 y x) 3) (*.f64 y x)))))) (+.f64 (*.f64 -1/3 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))))) (pow.f64 1 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2)))))))))) (pow.f64 z 3)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))))","(*.f64 (pow.f64 1 1/3) (*.f64 z x))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x)))) y) (*.f64 (pow.f64 1 1/3) (*.f64 z x)))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9) (pow.f64 (+.f64 z x) 2))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 z x)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9) (pow.f64 (+.f64 z x) 2)))))) (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x)))) y) (*.f64 (pow.f64 1 1/3) (*.f64 z x))))","(+.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 z x)) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (+.f64 z x) 3) (*.f64 z x)))))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 z x) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))))))))))) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9) (pow.f64 (+.f64 z x) 2))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 z x)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9) (pow.f64 (+.f64 z x) 2)))))) (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x)))) y) (*.f64 (pow.f64 1 1/3) (*.f64 z x)))))","(*.f64 (pow.f64 1 1/3) (*.f64 y z))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z)))) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z)))) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y z)) 1/9) (pow.f64 (+.f64 y z) 2))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y z)) 1/9) (pow.f64 (+.f64 y z) 2))) (*.f64 (pow.f64 (*.f64 1 (*.f64 y z)) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2))))))) (pow.f64 x 2)) (*.f64 (pow.f64 1 1/3) (*.f64 y z))))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2)))) (+.f64 y z)))) (+.f64 (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (+.f64 y z) 3) (*.f64 y z)))) (*.f64 -2/3 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))))) (pow.f64 (/.f64 1 (*.f64 y z)) 1/3)))) (pow.f64 (*.f64 1 (*.f64 y z)) 1/3)) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3)))) (*.f64 -1/3 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))))) (pow.f64 1 1/3)))))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z)))) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y z)) 1/9) (pow.f64 (+.f64 y z) 2))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y z)) 1/9) (pow.f64 (+.f64 y z) 2))) (*.f64 (pow.f64 (*.f64 1 (*.f64 y z)) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2))))))) (pow.f64 x 2)) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (*.f64 y x))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (/.f64 (*.f64 (+.f64 y x) z) 2) (sqrt.f64 (/.f64 1 (*.f64 y x)))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y x) z) 2)) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (/.f64 (*.f64 (+.f64 y x) z) 2) (sqrt.f64 (/.f64 1 (*.f64 y x))))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 (+.f64 y x) 3) (pow.f64 z 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 x 5)))))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 1/2 (*.f64 (*.f64 (+.f64 y x) z) (sqrt.f64 (/.f64 1 (*.f64 y x))))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y x) z) 2)) (fma.f64 1/16 (*.f64 (pow.f64 (*.f64 (+.f64 y x) z) 3) (sqrt.f64 (pow.f64 (*.f64 y x) (neg.f64 5)))) (+.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (/.f64 (*.f64 (+.f64 y x) z) 2) (sqrt.f64 (/.f64 1 (*.f64 y x)))))))","(sqrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))","(fma.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x)))) (sqrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x))))","(fma.f64 -1/8 (*.f64 (pow.f64 (*.f64 y (+.f64 z x)) 2) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 3)))) (fma.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x)))) (sqrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 y 3) (pow.f64 (+.f64 z x) 3)) (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 z 5) (pow.f64 x 5)))))) (+.f64 (*.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x))))) (sqrt.f64 (*.f64 z x)))))","(fma.f64 -1/8 (*.f64 (pow.f64 (*.f64 y (+.f64 z x)) 2) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 3)))) (fma.f64 1/16 (*.f64 (pow.f64 (*.f64 y (+.f64 z x)) 3) (sqrt.f64 (pow.f64 (*.f64 z x) (neg.f64 5)))) (fma.f64 1/2 (*.f64 (*.f64 y (+.f64 z x)) (sqrt.f64 (/.f64 1 (*.f64 z x)))) (sqrt.f64 (*.f64 z x)))))","(sqrt.f64 (*.f64 y z))","(+.f64 (sqrt.f64 (*.f64 y z)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))","(+.f64 (sqrt.f64 (*.f64 y z)) (/.f64 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)) 2))","(+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)))))","(+.f64 (sqrt.f64 (*.f64 y z)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y z) x) 2)) (/.f64 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)) 2)))","(+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 5) (pow.f64 z 5)))) (*.f64 (pow.f64 (+.f64 y z) 3) (pow.f64 x 3)))) (+.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x))))))","(fma.f64 1/16 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 5))) (pow.f64 (*.f64 (+.f64 y z) x) 3)) (+.f64 (sqrt.f64 (*.f64 y z)) (fma.f64 -1/8 (*.f64 (sqrt.f64 (pow.f64 (*.f64 y z) (neg.f64 3))) (pow.f64 (*.f64 (+.f64 y z) x) 2)) (/.f64 (*.f64 (sqrt.f64 (/.f64 1 (*.f64 y z))) (*.f64 (+.f64 y z) x)) 2))))","(*.f64 (pow.f64 1 1/3) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x)))) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))","(fma.f64 (*.f64 (pow.f64 (*.f64 y x) 4/9) (+.f64 y x)) z (*.f64 y x))","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y x)) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2))))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y x)) 1/9) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y x)) 1/9) (pow.f64 (+.f64 y x) 2))))) (pow.f64 z 2)) (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x)))) z) (*.f64 (pow.f64 1 1/3) (*.f64 y x))))","(fma.f64 (fma.f64 (cbrt.f64 (*.f64 y x)) (*.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 4)) 1/9) (pow.f64 (+.f64 y x) 2)) -1/9) (*.f64 (*.f64 (pow.f64 (/.f64 1 (*.f64 y x)) 1/9) (pow.f64 (+.f64 y x) 2)) 1/9)) (*.f64 z z) (fma.f64 (*.f64 (pow.f64 (*.f64 y x) 4/9) (+.f64 y x)) z (*.f64 y x)))","(+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y x)) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2))))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y x)) 1/9) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y x)) 1/9) (pow.f64 (+.f64 y x) 2))))) (pow.f64 z 2)) (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (+.f64 y x)))) z) (+.f64 (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 y x)) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))))) (pow.f64 (/.f64 1 (*.f64 y x)) 1/3))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (+.f64 y x) 3) (*.f64 y x)))))) (+.f64 (*.f64 -1/3 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))))) (pow.f64 1 1/3))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 y x) 2)))))))))) (pow.f64 z 3)) (*.f64 (pow.f64 1 1/3) (*.f64 y x)))))","(fma.f64 (fma.f64 (cbrt.f64 (*.f64 y x)) (*.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 4)) 1/9) (pow.f64 (+.f64 y x) 2)) -1/9) (*.f64 (*.f64 (pow.f64 (/.f64 1 (*.f64 y x)) 1/9) (pow.f64 (+.f64 y x) 2)) 1/9)) (*.f64 z z) (fma.f64 (*.f64 (pow.f64 (*.f64 y x) 4/9) (+.f64 y x)) z (fma.f64 (fma.f64 -2/27 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y x) (neg.f64 2))) (pow.f64 (+.f64 y x) 3)) (fma.f64 (cbrt.f64 (*.f64 y x)) (fma.f64 -2/3 (*.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y x) (neg.f64 2))) (pow.f64 (+.f64 y x) 3)) (+.f64 1/27 -2/9)) (cbrt.f64 (/.f64 1 (*.f64 y x)))) (/.f64 (*.f64 -2/27 (pow.f64 (+.f64 y x) 3)) (*.f64 y x))) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y x) (neg.f64 2))) (pow.f64 (+.f64 y x) 3)) (+.f64 1/27 -2/9)) (*.f64 (*.f64 1/3 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 2)) 1/9)) (*.f64 (+.f64 y x) (*.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 4)) 1/9) (pow.f64 (+.f64 y x) 2)) -1/9)))))) (pow.f64 z 3) (*.f64 y x))))","(*.f64 (pow.f64 1 1/3) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x)))) y) (*.f64 (pow.f64 1 1/3) (*.f64 z x)))","(fma.f64 (*.f64 (pow.f64 (*.f64 z x) 4/9) (+.f64 z x)) y (*.f64 z x))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9) (pow.f64 (+.f64 z x) 2))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 z x)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9) (pow.f64 (+.f64 z x) 2)))))) (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x)))) y) (*.f64 (pow.f64 1 1/3) (*.f64 z x))))","(fma.f64 (*.f64 y y) (fma.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9) (pow.f64 (+.f64 z x) 2)) (fma.f64 (cbrt.f64 (*.f64 z x)) (*.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 4)) 1/9) (pow.f64 (+.f64 z x) 2)) -1/9) (*.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9)) (pow.f64 (+.f64 z x) 2)))) (fma.f64 (*.f64 (pow.f64 (*.f64 z x) 4/9) (+.f64 z x)) y (*.f64 z x)))","(+.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))))))) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3)))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 z x)) 1/3) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (+.f64 z x) 3) (*.f64 z x)))))) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 z x) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))))))))))) (+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9) (pow.f64 (+.f64 z x) 2))) (+.f64 (*.f64 (pow.f64 (*.f64 1 (*.f64 z x)) 1/3) (+.f64 (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))) (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (pow.f64 (+.f64 z x) 2))))) (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9) (pow.f64 (+.f64 z x) 2)))))) (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 z 4) (pow.f64 x 4))) 1/9) (+.f64 z x)))) y) (*.f64 (pow.f64 1 1/3) (*.f64 z x)))))","(fma.f64 (pow.f64 y 3) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) (neg.f64 2))) (pow.f64 (+.f64 z x) 3)) (+.f64 1/27 -2/9)) (fma.f64 -2/27 (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) (neg.f64 2))) (pow.f64 (+.f64 z x) 3)) (fma.f64 (cbrt.f64 (*.f64 z x)) (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 z x))) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) (neg.f64 2))) (pow.f64 (+.f64 z x) 3)) (+.f64 1/27 -2/9))) (/.f64 (*.f64 -2/27 (pow.f64 (+.f64 z x) 3)) (*.f64 z x))) (*.f64 (*.f64 1/3 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 2)) 1/9)) (*.f64 (+.f64 z x) (*.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 4)) 1/9) (pow.f64 (+.f64 z x) 2)) -1/9)))))) (fma.f64 (*.f64 y y) (fma.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9) (pow.f64 (+.f64 z x) 2)) (fma.f64 (cbrt.f64 (*.f64 z x)) (*.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 4)) 1/9) (pow.f64 (+.f64 z x) 2)) -1/9) (*.f64 (*.f64 2/9 (pow.f64 (/.f64 1 (*.f64 z x)) 1/9)) (pow.f64 (+.f64 z x) 2)))) (fma.f64 (*.f64 (pow.f64 (*.f64 z x) 4/9) (+.f64 z x)) y (*.f64 z x))))","(*.f64 (pow.f64 1 1/3) (*.f64 y z))","(*.f64 y z)","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z)))) x) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))","(fma.f64 (*.f64 (pow.f64 (*.f64 y z) 4/9) (+.f64 y z)) x (*.f64 y z))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z)))) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y z)) 1/9) (pow.f64 (+.f64 y z) 2))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y z)) 1/9) (pow.f64 (+.f64 y z) 2))) (*.f64 (pow.f64 (*.f64 1 (*.f64 y z)) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2))))))) (pow.f64 x 2)) (*.f64 (pow.f64 1 1/3) (*.f64 y z))))","(fma.f64 (*.f64 (pow.f64 (*.f64 y z) 4/9) (+.f64 y z)) x (fma.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (*.f64 y z)) 1/9) (pow.f64 (+.f64 y z) 2)) 1/9) (*.f64 (cbrt.f64 (*.f64 y z)) (*.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 4)) 1/9) (pow.f64 (+.f64 y z) 2)) -1/9))) (*.f64 x x) (*.f64 y z)))","(+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2)))) (+.f64 y z)))) (+.f64 (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 (pow.f64 (+.f64 y z) 3) (*.f64 y z)))) (*.f64 -2/3 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))))) (pow.f64 (/.f64 1 (*.f64 y z)) 1/3)))) (pow.f64 (*.f64 1 (*.f64 y z)) 1/3)) (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3)))) (*.f64 -1/3 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))))) (pow.f64 1 1/3)))))) (pow.f64 x 3)) (+.f64 (*.f64 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z))) (*.f64 1/3 (*.f64 (pow.f64 (*.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (+.f64 y z)))) x) (+.f64 (*.f64 (+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y z)) 1/9) (pow.f64 (+.f64 y z) 2))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 y z)) 1/9) (pow.f64 (+.f64 y z) 2))) (*.f64 (pow.f64 (*.f64 1 (*.f64 y z)) 1/3) (+.f64 (*.f64 -2/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 4) (pow.f64 z 4))) 1/9) (pow.f64 (+.f64 y z) 2))))))) (pow.f64 x 2)) (*.f64 (pow.f64 1 1/3) (*.f64 y z)))))","(fma.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 2)) 1/9) (*.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 4)) 1/9) (pow.f64 (+.f64 y z) 2)) -1/9) (+.f64 y z))) (fma.f64 (fma.f64 -2/27 (/.f64 (pow.f64 (+.f64 y z) 3) (*.f64 y z)) (*.f64 -2/3 (*.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y z) (neg.f64 2))) (pow.f64 (+.f64 y z) 3)) (+.f64 1/27 -2/9)) (cbrt.f64 (/.f64 1 (*.f64 y z)))))) (cbrt.f64 (*.f64 y z)) (fma.f64 -2/27 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y z) (neg.f64 2))) (pow.f64 (+.f64 y z) 3)) (*.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y z) (neg.f64 2))) (pow.f64 (+.f64 y z) 3)) (+.f64 1/27 -2/9)))))) (pow.f64 x 3) (fma.f64 (*.f64 (pow.f64 (*.f64 y z) 4/9) (+.f64 y z)) x (fma.f64 (+.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (*.f64 y z)) 1/9) (pow.f64 (+.f64 y z) 2)) 1/9) (*.f64 (cbrt.f64 (*.f64 y z)) (*.f64 (*.f64 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 4)) 1/9) (pow.f64 (+.f64 y z) 2)) -1/9))) (*.f64 x x) (*.f64 y z))))"]],"time":120.22607421875,"type":"simplify"},{"compiler":[[9035,4512]],"time":80.824951171875,"type":"eval"},{"alts":[["(*.f64 2 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","fresh",25.942526176637806],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 (pow.f64 (*.f64 z x) 4/9) (+.f64 z x)) y (*.f64 z x))))","fresh",54.92394128585315],["(*.f64 2 (sqrt.f64 (pow.f64 (pow.f64 (*.f64 z x) 1/3) 3)))","fresh",52.686659515767346],["(*.f64 2 (sqrt.f64 (*.f64 x (+.f64 y z))))","fresh",36.7904284734424],["(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 3)))","fresh",51.88783487422692],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 (pow.f64 (*.f64 y x) 4/9) (+.f64 y x)) z (*.f64 y x))))","fresh",51.81311332384189],["(*.f64 2 (sqrt.f64 (pow.f64 (pow.f64 (*.f64 y x) 1/3) 3)))","fresh",49.19440077993789],["(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)))","done",22.794459204372302],["(*.f64 2 (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","done",22.73358044460386],["(*.f64 2 (sqrt.f64 (*.f64 y (+.f64 z x))))","fresh",34.06567628183427],["(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 3)))","fresh",48.1072412094257],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 z (+.f64 x y)))))","fresh",33.46244847564017],["(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 y x) z)) 3)))","fresh",38.094808140432896],["(*.f64 2 (sqrt.f64 (*.f64 (+.f64 y x) z)))","fresh",38.008845537487616],["(*.f64 2 (sqrt.f64 (fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) y) (*.f64 x (+.f64 y z)))))","fresh",29.534438081253846],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 z (+.f64 x y)))))","fresh",29.034861114407217],["(*.f64 2 (*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","next",22.84037673367763]],"compiler":[[41,18],[20,12],[13,11],[11,8],[12,10],[20,12],[13,11],[17,12],[25,12],[11,8],[12,10],[20,13],[14,11],[11,8],[20,13],[20,13],[29,15],[41,18],[20,12],[13,11],[11,8],[12,10],[20,12],[13,11],[11,8],[12,10],[20,13],[14,11],[11,8],[20,13],[20,13],[29,15]],"count":[[324,17]],"kept":[{"done":[1,1],"fresh":[10,8],"new":[312,7],"picked":[1,1]}],"min-error":[22.07362125153006],"time":126.7890625,"type":"prune"},{"compiler":[[128,26]],"locations":[["(pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)",0.597221582127029,true],["(fma.f64 z y (*.f64 x (+.f64 y z)))",1.5038897356333614,false],["(sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))",21.40391162531258,false],["(cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))",21.70657160114625,true]],"time":16.9150390625,"type":"localize"},{"count":[[2,48]],"series":[["(pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)","x","-inf",2.991943359375],["(pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)","x","inf",6.31201171875],["(pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)","x","0",2.281982421875],["(pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)","y","-inf",3.219970703125],["(pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)","y","inf",3.484130859375],["(pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)","y","0",1.923828125],["(pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)","z","-inf",5.173828125],["(pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)","z","inf",3.659912109375],["(pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)","z","0",2.18505859375],["(cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))","x","-inf",0.23095703125],["(cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))","x","inf",0.240966796875],["(cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))","x","0",0.27880859375],["(cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))","y","-inf",0.2490234375],["(cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))","y","inf",0.22998046875],["(cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))","y","0",0.301025390625],["(cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))","z","-inf",0.241943359375],["(cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))","z","inf",0.2861328125],["(cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))","z","0",0.410888671875]],"time":34.673828125,"type":"series"},{"count":[[2,134]],"inputs":[["(cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4))","(pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2) (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 1/2 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 0 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (*.f64 -1 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) -1) (*.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8)) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8))) (*.f64 (neg.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8)) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (cbrt.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (cbrt.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8) 4/3) (pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8) 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 4 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 1 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 2/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 1/2 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 2 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 4/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) (/.f64 1/3 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) (*.f64 1/2 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8) (*.f64 2 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/2 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/4 4/3))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (+.f64 z x)) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 y (+.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y z) (*.f64 x z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (+.f64 (*.f64 x z) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2) (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (+.f64 z x)) 1) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 0 (fma.f64 z y (*.f64 x (+.f64 y z)))) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 1/2 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 0 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2)) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3) (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2/3)) (cbrt.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2)) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8)) (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3/2)) (*.f64 (neg.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8)) (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 1) (*.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (*.f64 (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))) (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (*.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (neg.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3/2) (neg.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8))) (*.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3/2) (neg.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 0) (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 4) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 4 (fma.f64 z y (*.f64 x (+.f64 y z)))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (fma.f64 z y (*.f64 x (+.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2)) (+.f64 1/3 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2)) (+.f64 1 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 2/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (*.f64 6 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 4/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) (*.f64 12 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3/2) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8) 8)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 2 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 2/3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (+.f64 1 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 1/3 3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (*.f64 3 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 z)) (pow.f64 z 2/3) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (*.f64 (pow.f64 y 2/3) z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y z)) (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (cbrt.f64 y)) (pow.f64 y 2/3) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (*.f64 (pow.f64 z 2/3) y) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y z))) (pow.f64 (*.f64 x (+.f64 y z)) 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y z) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (neg.f64 (*.f64 x (+.f64 y z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 (+.f64 y z))) (pow.f64 (+.f64 y z) 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y z) x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y z)) (*.f64 (pow.f64 (+.f64 y z) 2/3) x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (*.f64 x (+.f64 y z)) 2/3) (cbrt.f64 (*.f64 x (+.f64 y z))) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y z) (cbrt.f64 x)) (pow.f64 x 2/3) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (pow.f64 x 2/3) (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (*.f64 x (+.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y z)) 1 (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y z)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) 1 (*.f64 x (+.f64 y z)))))))"]],"rules":[["egg-rr",86],["egg-rr",48]],"time":31.802001953125,"type":"rewrite"},{"count":[[182,227]],"inputs":[["(pow.f64 (*.f64 y x) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (pow.f64 (*.f64 y x) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (+.f64 (pow.f64 (*.f64 y x) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (+.f64 (pow.f64 (*.f64 y x) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))))) (pow.f64 z 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))))))","(pow.f64 (*.f64 z x) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (pow.f64 (*.f64 z x) 1/3))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (pow.f64 (*.f64 z x) 1/3)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3)))))))) (pow.f64 (*.f64 z x) 1/3))))","(pow.f64 (*.f64 y z) 1/3)","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (pow.f64 (*.f64 y z) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (+.f64 (pow.f64 (*.f64 y z) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 z 7))) 1/9) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2))))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (+.f64 (pow.f64 (*.f64 y z) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))))) (pow.f64 x 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 z 7))) 1/9) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))))))","(*.f64 y x)","(+.f64 (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) x))) (*.f64 y x))","(+.f64 (*.f64 (+.f64 (*.f64 1/4 (*.f64 y (*.f64 x (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2))))))))))) (pow.f64 z 2)) (+.f64 (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) x))) (*.f64 y x)))","(+.f64 (*.f64 (+.f64 (*.f64 1/4 (*.f64 y (*.f64 x (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2))))))))))) (pow.f64 z 2)) (+.f64 (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) x))) (+.f64 (*.f64 y x) (*.f64 (pow.f64 z 3) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2))))) (+.f64 (/.f64 1 y) (/.f64 1 x))))) (*.f64 2 (*.f64 (+.f64 (*.f64 1/384 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 3)) (+.f64 (*.f64 1/12 (/.f64 (pow.f64 (+.f64 y x) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 (+.f64 y x) 2) (+.f64 (/.f64 1 y) (/.f64 1 x))) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))))) (sqrt.f64 (*.f64 y x))))))) (*.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))))))) (+.f64 (/.f64 1 y) (/.f64 1 x)))))))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 4)","(+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) z)) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 4))","(+.f64 (/.f64 (pow.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x)))) 2) (pow.f64 z 2)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) z)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 y x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) (pow.f64 z 2))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 4))))","(+.f64 (/.f64 (pow.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x)))) 2) (pow.f64 z 2)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 y x) 2)))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x))))) (pow.f64 z 3))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) z)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2)))) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x))) (+.f64 y x))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2)))) (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)))) (+.f64 y x))) (*.f64 2 (*.f64 (+.f64 (*.f64 1/384 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 y x) 3))) (+.f64 (*.f64 1/12 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 y x) 3))) (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 y x) 3))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) (pow.f64 z 3))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 y x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) (pow.f64 z 2))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 4))))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) x)) (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) x)) (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))) (+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2)) (pow.f64 z 2))) (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) (pow.f64 x 2))) (*.f64 (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2) (pow.f64 z 2)))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) x)) (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))) (+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (+.f64 (*.f64 1/384 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 3))) (+.f64 (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 3))) (*.f64 1/12 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 3))))))) (*.f64 1/2 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2)))) x))) (+.f64 (*.f64 -1 x) (*.f64 -1 y))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2))) (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (*.f64 (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))))))) x))) (+.f64 (*.f64 -1 x) (*.f64 -1 y)))) (pow.f64 z 3))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2)) (pow.f64 z 2))) (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) (pow.f64 x 2))) (*.f64 (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2) (pow.f64 z 2))))))))","(*.f64 z x)","(+.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (*.f64 y (*.f64 z x))) (*.f64 z x))","(+.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (*.f64 y (*.f64 z x))) (+.f64 (*.f64 z x) (*.f64 (+.f64 (*.f64 1/4 (*.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2) (*.f64 z x))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 z x)) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 z x) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))) (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2))) (sqrt.f64 (*.f64 z x)))) (*.f64 1/16 (*.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2) (sqrt.f64 (*.f64 z x)))))))) (pow.f64 y 2))))","(+.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (*.f64 y (*.f64 z x))) (+.f64 (*.f64 z x) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (*.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2) (*.f64 z x))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 z x)) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 z x) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))) (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2))) (sqrt.f64 (*.f64 z x)))) (*.f64 1/16 (*.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2) (sqrt.f64 (*.f64 z x)))))))) (pow.f64 y 2)) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 z x) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))) (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2))) (sqrt.f64 (*.f64 z x)))) (*.f64 1/16 (*.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2) (sqrt.f64 (*.f64 z x)))))) (sqrt.f64 (*.f64 z x))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 z x)) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 z x)) (+.f64 (*.f64 -1/32 (/.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (pow.f64 (+.f64 z x) 2)) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))) (+.f64 (*.f64 1/384 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 3)) (*.f64 1/12 (/.f64 (pow.f64 (+.f64 z x) 3) (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))))) (*.f64 1/2 (*.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 z x) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))) (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2)))) (sqrt.f64 (*.f64 z x))))))))))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4)","(+.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 z x)) (*.f64 y (+.f64 z x))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4))","(+.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 z x)) (*.f64 y (+.f64 z x))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2)))))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 z x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2)) (pow.f64 y 2))))))","(+.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 z x)) (*.f64 y (+.f64 z x))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2)))) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (*.f64 z x))) (+.f64 z x))) (*.f64 2 (*.f64 (+.f64 (*.f64 1/12 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 z x) 3))) (+.f64 (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 z x) 3))) (*.f64 1/384 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 z x) 3))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2)) (pow.f64 y 3))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2)))))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 z x) 2)))) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (*.f64 z x))) (*.f64 (pow.f64 y 3) (+.f64 z x))) (+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2)))))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 z x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2)) (pow.f64 y 2))))))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4)","(+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 z x)) (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))))","(+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 z x)) (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))) (+.f64 (*.f64 2 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))))) (pow.f64 y 2))) (*.f64 1/4 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (+.f64 (*.f64 1/384 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 3))) (+.f64 (*.f64 1/12 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 3))) (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 3))))))) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (*.f64 z x))) (+.f64 (*.f64 -1 z) (*.f64 -1 x))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2))) (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (*.f64 z x))) (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) (pow.f64 y 3))) (+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 z x)) (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (*.f64 2 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))))) (pow.f64 y 2)))))))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) x))))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) x))) (*.f64 (+.f64 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))) (sqrt.f64 (*.f64 y z))) (*.f64 1/4 (*.f64 y (*.f64 z (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))))) (pow.f64 x 2))))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) x))) (+.f64 (*.f64 (+.f64 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))) (sqrt.f64 (*.f64 y z))) (*.f64 1/4 (*.f64 y (*.f64 z (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))))) (pow.f64 x 2)) (*.f64 (+.f64 (*.f64 1/2 (*.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))) (+.f64 (/.f64 1 y) (/.f64 1 z))) (sqrt.f64 (*.f64 y z)))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 y z)) (*.f64 (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))) (+.f64 (/.f64 1 y) (/.f64 1 z))))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 y z)) (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2)))))))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/384 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 3)) (+.f64 (*.f64 1/12 (/.f64 (pow.f64 (+.f64 y z) 3) (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 -1/32 (/.f64 (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) (pow.f64 (+.f64 y z) 2)) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))))))))) (pow.f64 x 3)))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4)","(+.f64 (/.f64 (*.f64 y (*.f64 z (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))) (*.f64 (+.f64 y z) x)) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))","(+.f64 (/.f64 (*.f64 y (*.f64 z (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))) (*.f64 (+.f64 y z) x)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2)) (pow.f64 x 2))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))))","(+.f64 (/.f64 (*.f64 y (*.f64 z (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))) (*.f64 (+.f64 y z) x)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))) (+.f64 (*.f64 1/12 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))) (*.f64 1/384 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (*.f64 y (*.f64 z (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2)))) (+.f64 y z)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2)) (pow.f64 x 3))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2)) (pow.f64 x 2))) (+.f64 (/.f64 (*.f64 y (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (pow.f64 (+.f64 y z) 2)))) (*.f64 z (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2)))) (*.f64 (+.f64 y z) (pow.f64 x 3))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4)","(+.f64 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4) z)) (*.f64 (+.f64 y z) x)) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4))","(+.f64 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4) z)) (*.f64 (+.f64 y z) x)) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4) (pow.f64 z 2))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) (pow.f64 z 2))) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2)) (pow.f64 x 2))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4))))","(+.f64 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4) z)) (*.f64 (+.f64 y z) x)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/384 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))) (+.f64 (*.f64 -1/12 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2))) (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) z))) (+.f64 y z)))))) (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) (pow.f64 z 2))) (pow.f64 (+.f64 y z) 2)))) (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) z))) (+.f64 y z)))) (pow.f64 x 3))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4) (pow.f64 z 2))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) (pow.f64 z 2))) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2)) (pow.f64 x 2))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4)))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (*.f64 y x) 1/3)","(cbrt.f64 (*.f64 y x))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (pow.f64 (*.f64 y x) 1/3))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 2)) 1/9) (*.f64 (+.f64 y x) z)) (cbrt.f64 (*.f64 y x)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (+.f64 (pow.f64 (*.f64 y x) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2))))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 2)) 1/9) (*.f64 (+.f64 y x) z)) (cbrt.f64 (*.f64 y x))) (*.f64 -1/9 (*.f64 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 7)) 1/9) (pow.f64 (*.f64 (+.f64 y x) z) 2))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/9) (*.f64 (+.f64 y x) z))) (+.f64 (pow.f64 (*.f64 y x) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 y x) 3))))) (pow.f64 z 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 x 2))) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 (+.f64 y x) 2) (pow.f64 z 2)))))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 2)) 1/9) (*.f64 (+.f64 y x) z)) (cbrt.f64 (*.f64 y x))) (fma.f64 -1/3 (*.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y x) (neg.f64 2))) (pow.f64 (+.f64 y x) 3)) (+.f64 1/27 -2/9)) (*.f64 (pow.f64 z 3) (cbrt.f64 (pow.f64 (*.f64 y x) (neg.f64 2))))) (*.f64 -1/9 (*.f64 (pow.f64 (pow.f64 (*.f64 y x) (neg.f64 7)) 1/9) (pow.f64 (*.f64 (+.f64 y x) z) 2)))))","(pow.f64 (*.f64 z x) 1/3)","(cbrt.f64 (*.f64 z x))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (pow.f64 (*.f64 z x) 1/3))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 2)) 1/9) (*.f64 y (+.f64 z x))) (cbrt.f64 (*.f64 z x)))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (pow.f64 (*.f64 z x) 1/3)))","(fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 7)) 1/9) (pow.f64 (*.f64 y (+.f64 z x)) 2)) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 2)) 1/9) (*.f64 y (+.f64 z x))) (cbrt.f64 (*.f64 z x))))","(+.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 7) (pow.f64 x 7))) 1/9) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/9) (*.f64 y (+.f64 z x)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 z 2) (pow.f64 x 2))) 1/3) (pow.f64 (+.f64 z x) 3)))))))) (pow.f64 (*.f64 z x) 1/3))))","(fma.f64 -1/9 (*.f64 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 7)) 1/9) (pow.f64 (*.f64 y (+.f64 z x)) 2)) (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 z x) (neg.f64 2)) 1/9) (*.f64 y (+.f64 z x))) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) (neg.f64 2))) (pow.f64 y 3)) (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 z x) (neg.f64 2))) (pow.f64 (+.f64 z x) 3)) (+.f64 1/27 -2/9))) (cbrt.f64 (*.f64 z x)))))","(pow.f64 (*.f64 y z) 1/3)","(cbrt.f64 (*.f64 y z))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (pow.f64 (*.f64 y z) 1/3))","(fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 2)) 1/9) (*.f64 (+.f64 y z) x)) (cbrt.f64 (*.f64 y z)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (+.f64 (pow.f64 (*.f64 y z) 1/3) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 z 7))) 1/9) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2))))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 2)) 1/9) (*.f64 (+.f64 y z) x)) (cbrt.f64 (*.f64 y z))) (*.f64 -1/9 (*.f64 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 7)) 1/9) (pow.f64 (*.f64 (+.f64 y z) x) 2))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/9) (*.f64 (+.f64 y z) x))) (+.f64 (pow.f64 (*.f64 y z) 1/3) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 1/27 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3) (pow.f64 (+.f64 y z) 3))))) (pow.f64 x 3)) (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 2) (pow.f64 z 2))) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (*.f64 (pow.f64 y 7) (pow.f64 z 7))) 1/9) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 2)) 1/9) (*.f64 (+.f64 y z) x)) (cbrt.f64 (*.f64 y z))) (fma.f64 -1/3 (*.f64 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (*.f64 y z) (neg.f64 2))) (pow.f64 (+.f64 y z) 3)) (+.f64 -2/9 1/27)) (*.f64 (pow.f64 x 3) (cbrt.f64 (pow.f64 (*.f64 y z) (neg.f64 2))))) (*.f64 -1/9 (*.f64 (pow.f64 (pow.f64 (*.f64 y z) (neg.f64 7)) 1/9) (pow.f64 (*.f64 (+.f64 y z) x) 2)))))","(*.f64 y x)","(+.f64 (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) x))) (*.f64 y x))","(*.f64 y (+.f64 (*.f64 z (*.f64 (/.f64 (+.f64 y x) (*.f64 y x)) x)) x))","(+.f64 (*.f64 (+.f64 (*.f64 1/4 (*.f64 y (*.f64 x (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2))))))))))) (pow.f64 z 2)) (+.f64 (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) x))) (*.f64 y x)))","(fma.f64 (fma.f64 1/4 (*.f64 y (*.f64 x (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2))) (*.f64 (*.f64 2 (sqrt.f64 (*.f64 y x))) (fma.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2)) (*.f64 (*.f64 2 (sqrt.f64 (*.f64 y x))) (fma.f64 1/32 (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2) (*.f64 -1/8 (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2))))))) (*.f64 z z) (*.f64 y (+.f64 (*.f64 z (*.f64 (/.f64 (+.f64 y x) (*.f64 y x)) x)) x)))","(+.f64 (*.f64 (+.f64 (*.f64 1/4 (*.f64 y (*.f64 x (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2))))))))))) (pow.f64 z 2)) (+.f64 (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) x))) (+.f64 (*.f64 y x) (*.f64 (pow.f64 z 3) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2))))) (+.f64 (/.f64 1 y) (/.f64 1 x))))) (*.f64 2 (*.f64 (+.f64 (*.f64 1/384 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 3)) (+.f64 (*.f64 1/12 (/.f64 (pow.f64 (+.f64 y x) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 (+.f64 y x) 2) (+.f64 (/.f64 1 y) (/.f64 1 x))) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))))) (sqrt.f64 (*.f64 y x))))))) (*.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y x) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))))))) (+.f64 (/.f64 1 y) (/.f64 1 x)))))))))","(+.f64 (fma.f64 (fma.f64 1/4 (*.f64 y (*.f64 x (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2))) (*.f64 (*.f64 2 (sqrt.f64 (*.f64 y x))) (fma.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2)) (*.f64 (*.f64 2 (sqrt.f64 (*.f64 y x))) (fma.f64 1/32 (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2) (*.f64 -1/8 (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2))))))) (*.f64 z z) (*.f64 y (+.f64 (*.f64 z (*.f64 (/.f64 (+.f64 y x) (*.f64 y x)) x)) x))) (*.f64 (pow.f64 z 3) (fma.f64 2 (*.f64 (sqrt.f64 (*.f64 y x)) (fma.f64 1/2 (*.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (fma.f64 1/32 (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2) (*.f64 -1/8 (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2))) (/.f64 (+.f64 y x) (*.f64 y x)))) (*.f64 2 (*.f64 (fma.f64 1/384 (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 3) (fma.f64 1/12 (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 3) (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 (+.f64 y x) 2) (/.f64 (+.f64 y x) (*.f64 y x))) (pow.f64 (*.f64 y x) 2))))) (sqrt.f64 (*.f64 y x)))))) (*.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (fma.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2)) (*.f64 (*.f64 2 (sqrt.f64 (*.f64 y x))) (fma.f64 1/32 (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2) (*.f64 -1/8 (pow.f64 (/.f64 (+.f64 y x) (*.f64 y x)) 2))))) (/.f64 (+.f64 y x) (*.f64 y x)))))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 4)","(exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 4))","(+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) z)) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 4))","(fma.f64 2 (/.f64 (*.f64 (*.f64 2 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2) x)) (+.f64 y x)))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2)) z) (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 4)))","(+.f64 (/.f64 (pow.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x)))) 2) (pow.f64 z 2)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) z)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 y x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) (pow.f64 z 2))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 4))))","(+.f64 (+.f64 (/.f64 (pow.f64 (*.f64 2 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2) x)) (+.f64 y x)))) 2) (*.f64 z z)) (*.f64 2 (+.f64 (/.f64 (*.f64 (*.f64 2 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2) x)) (+.f64 y x)))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2)) z) (/.f64 (*.f64 (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y x) 2) (pow.f64 (+.f64 y x) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) x) y) 2)) (pow.f64 (+.f64 y x) 2))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2)) (*.f64 z z))))) (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 4)))","(+.f64 (/.f64 (pow.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x)))) 2) (pow.f64 z 2)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 y x) 2)))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x))))) (pow.f64 z 3))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (+.f64 y x))) (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x)) (+.f64 y x)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) z)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2)))) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) x))) (+.f64 y x))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2)))) (*.f64 x (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)))) (+.f64 y x))) (*.f64 2 (*.f64 (+.f64 (*.f64 1/384 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 y x) 3))) (+.f64 (*.f64 1/12 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 y x) 3))) (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 y x) 3))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) (pow.f64 z 3))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 y x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 y x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 2)) (pow.f64 z 2))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 y x))))) 4))))))","(+.f64 (+.f64 (/.f64 (pow.f64 (*.f64 2 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2) x)) (+.f64 y x)))) 2) (*.f64 z z)) (*.f64 2 (+.f64 (/.f64 (*.f64 (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y x) 2) (pow.f64 (+.f64 y x) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) x) y) 2)) (pow.f64 (+.f64 y x) 2))) (*.f64 2 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2) x)) (+.f64 y x))))) (pow.f64 z 3)) (/.f64 (*.f64 (*.f64 2 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2) x)) (+.f64 y x)))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2)) z)))) (+.f64 (*.f64 2 (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 1/4 (/.f64 (*.f64 y (*.f64 (*.f64 x (*.f64 (/.f64 (pow.f64 (*.f64 y x) 2) (pow.f64 (+.f64 y x) 2)) -3/32)) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2))) (+.f64 y x)))) (*.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (+.f64 y x) 3)) (+.f64 1/384 5/96)) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2)))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2)) (pow.f64 z 3)) (/.f64 (*.f64 (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y x) 2) (pow.f64 (+.f64 y x) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) x) y) 2)) (pow.f64 (+.f64 y x) 2))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 2)) (*.f64 z z)))) (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 z) (log.f64 (+.f64 y x)))) 4))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4)","(exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 4))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) x)) (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4))","(-.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 4)) (/.f64 (*.f64 y (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 4)) x)) (*.f64 (neg.f64 (+.f64 y x)) z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) x)) (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))) (+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2)) (pow.f64 z 2))) (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) (pow.f64 x 2))) (*.f64 (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2) (pow.f64 z 2)))))))","(+.f64 (-.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 4)) (/.f64 (*.f64 y (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 4)) x)) (*.f64 (neg.f64 (+.f64 y x)) z))) (fma.f64 2 (/.f64 (*.f64 (fma.f64 1/16 (*.f64 (pow.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) x)) 2) (pow.f64 (+.f64 y x) (neg.f64 2))) (*.f64 (*.f64 2 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 2)) (*.f64 (/.f64 (pow.f64 (*.f64 y x) 2) (pow.f64 (+.f64 y x) 2)) -3/32))) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 2)) (*.f64 z z)) (*.f64 1/4 (/.f64 (*.f64 (*.f64 y y) (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 4)) (*.f64 x x))) (pow.f64 (*.f64 (neg.f64 (+.f64 y x)) z) 2)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) x)) (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))) (+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (+.f64 (*.f64 1/384 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 3))) (+.f64 (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 3))) (*.f64 1/12 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 3))))))) (*.f64 1/2 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2)))) x))) (+.f64 (*.f64 -1 x) (*.f64 -1 y))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2))) (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (*.f64 (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))))))) x))) (+.f64 (*.f64 -1 x) (*.f64 -1 y)))) (pow.f64 z 3))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2))))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 2)) (pow.f64 z 2))) (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y))) (*.f64 -1 (log.f64 (/.f64 -1 z)))))) 4) (pow.f64 x 2))) (*.f64 (pow.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) 2) (pow.f64 z 2))))))))","(+.f64 (-.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 4)) (/.f64 (*.f64 y (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 4)) x)) (*.f64 (neg.f64 (+.f64 y x)) z))) (-.f64 (fma.f64 2 (/.f64 (*.f64 (fma.f64 1/16 (*.f64 (pow.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) x)) 2) (pow.f64 (+.f64 y x) (neg.f64 2))) (*.f64 (*.f64 2 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 2)) (*.f64 (/.f64 (pow.f64 (*.f64 y x) 2) (pow.f64 (+.f64 y x) 2)) -3/32))) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 2)) (*.f64 z z)) (*.f64 1/4 (/.f64 (*.f64 (*.f64 y y) (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 4)) (*.f64 x x))) (pow.f64 (*.f64 (neg.f64 (+.f64 y x)) z) 2)))) (/.f64 (fma.f64 2 (*.f64 (fma.f64 2 (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 2) (*.f64 (/.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (neg.f64 (+.f64 y x)) 3)) (+.f64 5/96 1/384))) (*.f64 1/2 (/.f64 (*.f64 y (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 2) (*.f64 x (*.f64 (/.f64 (pow.f64 (*.f64 y x) 2) (pow.f64 (+.f64 y x) 2)) -3/32)))) (neg.f64 (+.f64 y x))))) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 2)) (/.f64 (*.f64 (neg.f64 (*.f64 y (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 2))) (*.f64 (fma.f64 1/16 (*.f64 (pow.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) x)) 2) (pow.f64 (+.f64 y x) (neg.f64 2))) (*.f64 (*.f64 2 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y x))) (neg.f64 (log.f64 (neg.f64 z))))) 2)) (*.f64 (/.f64 (pow.f64 (*.f64 y x) 2) (pow.f64 (+.f64 y x) 2)) -3/32))) x)) (+.f64 y x))) (pow.f64 z 3))))","(*.f64 z x)","(+.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (*.f64 y (*.f64 z x))) (*.f64 z x))","(*.f64 (+.f64 (*.f64 (/.f64 (+.f64 z x) (*.f64 z x)) y) 1) (*.f64 z x))","(+.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (*.f64 y (*.f64 z x))) (+.f64 (*.f64 z x) (*.f64 (+.f64 (*.f64 1/4 (*.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2) (*.f64 z x))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 z x)) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 z x) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))) (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2))) (sqrt.f64 (*.f64 z x)))) (*.f64 1/16 (*.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2) (sqrt.f64 (*.f64 z x)))))))) (pow.f64 y 2))))","(+.f64 (*.f64 (+.f64 (*.f64 (/.f64 (+.f64 z x) (*.f64 z x)) y) 1) (*.f64 z x)) (*.f64 (fma.f64 1/4 (*.f64 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2) (*.f64 z x)) (*.f64 (*.f64 2 (sqrt.f64 (*.f64 z x))) (*.f64 (sqrt.f64 (*.f64 z x)) (+.f64 (*.f64 2 (fma.f64 -1/8 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2) (*.f64 1/32 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2)))) (*.f64 1/16 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2)))))) (*.f64 y y)))","(+.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (*.f64 y (*.f64 z x))) (+.f64 (*.f64 z x) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (*.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2) (*.f64 z x))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 z x)) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 z x) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))) (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2))) (sqrt.f64 (*.f64 z x)))) (*.f64 1/16 (*.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2) (sqrt.f64 (*.f64 z x)))))))) (pow.f64 y 2)) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 z x) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))) (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2))) (sqrt.f64 (*.f64 z x)))) (*.f64 1/16 (*.f64 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2) (sqrt.f64 (*.f64 z x)))))) (sqrt.f64 (*.f64 z x))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 z x)) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 z x)) (+.f64 (*.f64 -1/32 (/.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (pow.f64 (+.f64 z x) 2)) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))) (+.f64 (*.f64 1/384 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 3)) (*.f64 1/12 (/.f64 (pow.f64 (+.f64 z x) 3) (*.f64 (pow.f64 z 3) (pow.f64 x 3)))))))) (*.f64 1/2 (*.f64 (*.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 z x) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2)))) (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 z)) 2)))) (sqrt.f64 (*.f64 z x))))))))))))","(+.f64 (*.f64 (+.f64 (*.f64 (/.f64 (+.f64 z x) (*.f64 z x)) y) 1) (*.f64 z x)) (fma.f64 (fma.f64 1/4 (*.f64 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2) (*.f64 z x)) (*.f64 (*.f64 2 (sqrt.f64 (*.f64 z x))) (*.f64 (sqrt.f64 (*.f64 z x)) (+.f64 (*.f64 2 (fma.f64 -1/8 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2) (*.f64 1/32 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2)))) (*.f64 1/16 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2)))))) (*.f64 y y) (*.f64 (pow.f64 y 3) (fma.f64 (*.f64 (/.f64 (+.f64 z x) (*.f64 z x)) (*.f64 (sqrt.f64 (*.f64 z x)) (+.f64 (*.f64 2 (fma.f64 -1/8 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2) (*.f64 1/32 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2)))) (*.f64 1/16 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2))))) (sqrt.f64 (*.f64 z x)) (*.f64 (*.f64 2 (sqrt.f64 (*.f64 z x))) (fma.f64 2 (*.f64 (sqrt.f64 (*.f64 z x)) (fma.f64 -1/32 (/.f64 (*.f64 (/.f64 (+.f64 z x) (*.f64 z x)) (pow.f64 (+.f64 z x) 2)) (pow.f64 (*.f64 z x) 2)) (fma.f64 1/384 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 3) (*.f64 1/12 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 3))))) (*.f64 1/2 (*.f64 (*.f64 (/.f64 (+.f64 z x) (*.f64 z x)) (fma.f64 -1/8 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2) (*.f64 1/32 (pow.f64 (/.f64 (+.f64 z x) (*.f64 z x)) 2)))) (sqrt.f64 (*.f64 z x))))))))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4)","(exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 4))","(+.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 z x)) (*.f64 y (+.f64 z x))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 4)) (*.f64 z x)) (*.f64 y (+.f64 z x))) (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 4)))","(+.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 z x)) (*.f64 y (+.f64 z x))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2)))))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 z x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2)) (pow.f64 y 2))))))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 4)) (*.f64 z x)) (*.f64 y (+.f64 z x))) (fma.f64 1/4 (/.f64 (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 4)) (pow.f64 (*.f64 z x) 2)) (pow.f64 (*.f64 y (+.f64 z x)) 2)) (+.f64 (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 4)) (/.f64 (/.f64 (*.f64 2 (*.f64 (fma.f64 2 (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 2) (*.f64 (/.f64 (pow.f64 (*.f64 z x) 2) (pow.f64 (+.f64 z x) 2)) -3/32)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) (*.f64 z x)) 2)) (pow.f64 (+.f64 z x) 2))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 2))) y) y))))","(+.f64 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 z x)) (*.f64 y (+.f64 z x))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 z x) 2)))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 1/2 (/.f64 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2)))) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (*.f64 z x))) (+.f64 z x))) (*.f64 2 (*.f64 (+.f64 (*.f64 1/12 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 z x) 3))) (+.f64 (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 z x) 3))) (*.f64 1/384 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 z x) 3))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2)) (pow.f64 y 3))) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2)))))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 z x) 2)))) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (*.f64 z x))) (*.f64 (pow.f64 y 3) (+.f64 z x))) (+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 4) (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 z x) 2)))))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 z x) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 (+.f64 z x))))) 2)) (pow.f64 y 2))))))))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 4)) (*.f64 z x)) (*.f64 y (+.f64 z x))) (fma.f64 1/4 (/.f64 (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 4)) (pow.f64 (*.f64 z x) 2)) (pow.f64 (*.f64 y (+.f64 z x)) 2)) (fma.f64 2 (/.f64 (*.f64 (fma.f64 1/2 (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 z x) 2) (pow.f64 (+.f64 z x) 2)) -3/32) (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 2) (*.f64 z x))) (+.f64 z x)) (*.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 z x) 3) (pow.f64 (+.f64 z x) 3)) (+.f64 1/12 -11/384)) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 2)))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 2)) (pow.f64 y 3)) (+.f64 (/.f64 (*.f64 (fma.f64 2 (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 2) (*.f64 (/.f64 (pow.f64 (*.f64 z x) 2) (pow.f64 (+.f64 z x) 2)) -3/32)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) (*.f64 z x)) 2)) (pow.f64 (+.f64 z x) 2))) (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 2) (*.f64 z x))) (*.f64 (pow.f64 y 3) (+.f64 z x))) (+.f64 (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 4)) (/.f64 (/.f64 (*.f64 2 (*.f64 (fma.f64 2 (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 2) (*.f64 (/.f64 (pow.f64 (*.f64 z x) 2) (pow.f64 (+.f64 z x) 2)) -3/32)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) (*.f64 z x)) 2)) (pow.f64 (+.f64 z x) 2))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 y) (log.f64 (+.f64 z x)))) 2))) y) y))))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4)","(exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 4))","(+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 -1 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 z x)) (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))))","(-.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 4)) (/.f64 (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 4)) (*.f64 z x)) (neg.f64 (*.f64 y (+.f64 z x)))))","(+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 z x)) (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))) (+.f64 (*.f64 2 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))))) (pow.f64 y 2))) (*.f64 1/4 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))))))","(+.f64 (-.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 4)) (/.f64 (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 4)) (*.f64 z x)) (neg.f64 (*.f64 y (+.f64 z x))))) (fma.f64 1/4 (*.f64 (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 4)) (pow.f64 (*.f64 z x) 2)) (pow.f64 (*.f64 y (+.f64 z x)) (neg.f64 2))) (/.f64 (/.f64 (*.f64 2 (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 2) (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 z x) 2) (pow.f64 (+.f64 z x) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 2)) (*.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 z x) (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y)))))) 2)) (pow.f64 (+.f64 z x) (neg.f64 2)))))) y) y)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (+.f64 (*.f64 1/384 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 3))) (+.f64 (*.f64 1/12 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 3))) (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 3))))))) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (*.f64 z x))) (+.f64 (*.f64 -1 z) (*.f64 -1 x))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2))) (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (*.f64 z x))) (+.f64 (*.f64 -1 z) (*.f64 -1 x)))) (pow.f64 y 3))) (+.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (+.f64 (*.f64 -1 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 z x)) (*.f64 y (+.f64 (*.f64 -1 z) (*.f64 -1 x))))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 4) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 (pow.f64 y 2) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (*.f64 2 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 1/32 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))) (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 z 2) (pow.f64 x 2)) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)))))) 2) (*.f64 (pow.f64 z 2) (pow.f64 x 2))) (pow.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 x)) 2))))) (pow.f64 y 2)))))))","(-.f64 (+.f64 (-.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 4)) (/.f64 (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 4)) (*.f64 z x)) (neg.f64 (*.f64 y (+.f64 z x))))) (fma.f64 1/4 (*.f64 (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 4)) (pow.f64 (*.f64 z x) 2)) (pow.f64 (*.f64 y (+.f64 z x)) (neg.f64 2))) (/.f64 (/.f64 (*.f64 2 (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 2) (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 z x) 2) (pow.f64 (+.f64 z x) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 2)) (*.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 z x) (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y)))))) 2)) (pow.f64 (+.f64 z x) (neg.f64 2)))))) y) y))) (/.f64 (fma.f64 2 (*.f64 (fma.f64 2 (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 2) (*.f64 (/.f64 (pow.f64 (*.f64 z x) 3) (pow.f64 (neg.f64 (+.f64 z x)) 3)) (+.f64 1/384 5/96))) (*.f64 1/2 (/.f64 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 z x) 2) (pow.f64 (+.f64 z x) 2)) -3/32) (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 2) (*.f64 z x))) (neg.f64 (+.f64 z x))))) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 2)) (/.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 2) (*.f64 (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 z x) 2) (pow.f64 (+.f64 z x) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y))))) 2)) (*.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 z x) (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 z x))) (neg.f64 (log.f64 (neg.f64 y)))))) 2)) (pow.f64 (+.f64 z x) (neg.f64 2)))) (*.f64 z x))) (neg.f64 (+.f64 z x)))) (pow.f64 y 3)))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) x))))","(*.f64 y (+.f64 z (*.f64 z (*.f64 (/.f64 (+.f64 y z) (*.f64 y z)) x))))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) x))) (*.f64 (+.f64 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))) (sqrt.f64 (*.f64 y z))) (*.f64 1/4 (*.f64 y (*.f64 z (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))))) (pow.f64 x 2))))","(+.f64 (*.f64 y (+.f64 z (*.f64 z (*.f64 (/.f64 (+.f64 y z) (*.f64 y z)) x)))) (*.f64 (+.f64 (*.f64 2 (*.f64 (fma.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (fma.f64 1/32 (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2) (*.f64 -1/8 (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2)))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2)))) (sqrt.f64 (*.f64 y z)))) (*.f64 1/4 (*.f64 y (*.f64 z (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2))))) (*.f64 x x)))","(+.f64 (*.f64 y z) (+.f64 (*.f64 y (*.f64 z (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) x))) (+.f64 (*.f64 (+.f64 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2))))) (+.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))) (sqrt.f64 (*.f64 y z))) (*.f64 1/4 (*.f64 y (*.f64 z (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))))) (pow.f64 x 2)) (*.f64 (+.f64 (*.f64 1/2 (*.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))) (+.f64 (/.f64 1 y) (/.f64 1 z))) (sqrt.f64 (*.f64 y z)))) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 y z)) (*.f64 (+.f64 (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)))) (+.f64 (/.f64 1 y) (/.f64 1 z))))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (*.f64 y z)) (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) (+.f64 (*.f64 1/32 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 2)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 y z) 2) (*.f64 (pow.f64 y 2) (pow.f64 z 2)))))))) (*.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (+.f64 (*.f64 1/384 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) 3)) (+.f64 (*.f64 1/12 (/.f64 (pow.f64 (+.f64 y z) 3) (*.f64 (pow.f64 y 3) (pow.f64 z 3)))) (*.f64 -1/32 (/.f64 (*.f64 (+.f64 (/.f64 1 y) (/.f64 1 z)) (pow.f64 (+.f64 y z) 2)) (*.f64 (pow.f64 y 2) (pow.f64 z 2))))))))))))) (pow.f64 x 3)))))","(+.f64 (*.f64 y (+.f64 z (*.f64 z (*.f64 (/.f64 (+.f64 y z) (*.f64 y z)) x)))) (fma.f64 (+.f64 (*.f64 2 (*.f64 (fma.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (fma.f64 1/32 (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2) (*.f64 -1/8 (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2)))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2)))) (sqrt.f64 (*.f64 y z)))) (*.f64 1/4 (*.f64 y (*.f64 z (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2))))) (*.f64 x x) (*.f64 (+.f64 (*.f64 2 (*.f64 (*.f64 1/2 (sqrt.f64 (*.f64 y z))) (*.f64 (fma.f64 2 (*.f64 (sqrt.f64 (*.f64 y z)) (fma.f64 1/32 (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2) (*.f64 -1/8 (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2)))) (*.f64 1/16 (*.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2)))) (/.f64 (+.f64 y z) (*.f64 y z))))) (*.f64 (*.f64 2 (sqrt.f64 (*.f64 y z))) (fma.f64 1/2 (*.f64 (sqrt.f64 (*.f64 y z)) (*.f64 (/.f64 (+.f64 y z) (*.f64 y z)) (fma.f64 1/32 (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2) (*.f64 -1/8 (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 2))))) (*.f64 (*.f64 2 (sqrt.f64 (*.f64 y z))) (fma.f64 1/384 (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 3) (fma.f64 1/12 (pow.f64 (/.f64 (+.f64 y z) (*.f64 y z)) 3) (*.f64 -1/32 (/.f64 (*.f64 (/.f64 (+.f64 y z) (*.f64 y z)) (pow.f64 (+.f64 y z) 2)) (pow.f64 (*.f64 y z) 2))))))))) (pow.f64 x 3))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4)","(exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 4))","(+.f64 (/.f64 (*.f64 y (*.f64 z (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))) (*.f64 (+.f64 y z) x)) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))","(+.f64 (/.f64 (*.f64 y (*.f64 z (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 4)))) (*.f64 (+.f64 y z) x)) (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 4)))","(+.f64 (/.f64 (*.f64 y (*.f64 z (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))) (*.f64 (+.f64 y z) x)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2)) (pow.f64 x 2))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))))","(+.f64 (/.f64 (*.f64 y (*.f64 z (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 4)))) (*.f64 (+.f64 y z) x)) (fma.f64 2 (/.f64 (/.f64 (*.f64 (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (+.f64 y z) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 2)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 z (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x)))) y) 2)) (pow.f64 (+.f64 y z) 2))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 2)) x) x) (fma.f64 1/4 (/.f64 (*.f64 (pow.f64 (*.f64 y z) 2) (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 4))) (pow.f64 (*.f64 (+.f64 y z) x) 2)) (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 4)))))","(+.f64 (/.f64 (*.f64 y (*.f64 z (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))) (*.f64 (+.f64 y z) x)) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/32 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))) (+.f64 (*.f64 1/12 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))) (*.f64 1/384 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (*.f64 1/2 (/.f64 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (*.f64 y (*.f64 z (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2)))) (+.f64 y z)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2)) (pow.f64 x 3))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2)) (pow.f64 x 2))) (+.f64 (/.f64 (*.f64 y (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2))) (pow.f64 (+.f64 y z) 2)))) (*.f64 z (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 2)))) (*.f64 (+.f64 y z) (pow.f64 x 3))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 z 2) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x)))))) 4))))))","(+.f64 (+.f64 (/.f64 (*.f64 y (*.f64 z (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 4)))) (*.f64 (+.f64 y z) x)) (*.f64 2 (+.f64 (/.f64 (*.f64 (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (+.f64 y z) 3)) (+.f64 11/128 -1/32)) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 2)) (/.f64 (*.f64 1/2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (+.f64 y z) 2)) -3/32) (*.f64 y (*.f64 z (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 2))))) (+.f64 y z))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 2)) (pow.f64 x 3)) (/.f64 (/.f64 (*.f64 (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (+.f64 y z) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 2)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 z (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x)))) y) 2)) (pow.f64 (+.f64 y z) 2))) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 2)) x) x)))) (+.f64 (/.f64 (*.f64 y (*.f64 (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (+.f64 y z) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 2)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 z (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x)))) y) 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 z (pow.f64 (pow.f64 (exp.f64 1/4) (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 2)))) (*.f64 (+.f64 y z) (pow.f64 x 3))) (fma.f64 1/4 (/.f64 (*.f64 (pow.f64 (*.f64 y z) 2) (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 4))) (pow.f64 (*.f64 (+.f64 y z) x) 2)) (exp.f64 (*.f64 (*.f64 1/4 (+.f64 (log.f64 (+.f64 y z)) (log.f64 x))) 4)))))","(pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4)","(exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 4))","(+.f64 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4) z)) (*.f64 (+.f64 y z) x)) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4))","(+.f64 (/.f64 (*.f64 y (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 4)) z)) (*.f64 (+.f64 y z) x)) (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 4)))","(+.f64 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4) z)) (*.f64 (+.f64 y z) x)) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4) (pow.f64 z 2))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) (pow.f64 z 2))) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2)) (pow.f64 x 2))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4))))","(+.f64 (/.f64 (*.f64 y (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 4)) z)) (*.f64 (+.f64 y z) x)) (fma.f64 1/4 (/.f64 (*.f64 (*.f64 y y) (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 4)) (*.f64 z z))) (pow.f64 (*.f64 (+.f64 y z) x) 2)) (fma.f64 2 (/.f64 (/.f64 (*.f64 (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (+.f64 y z) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 2)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) z) y) 2)) (pow.f64 (+.f64 y z) 2))) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 2)) x) x) (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 4)))))","(+.f64 (/.f64 (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4) z)) (*.f64 (+.f64 y z) x)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 2 (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/384 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))) (+.f64 (*.f64 -1/12 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 z 3)) (pow.f64 (+.f64 y z) 3))))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2))) (*.f64 -1/2 (/.f64 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) z))) (+.f64 y z)))))) (*.f64 -1 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) (pow.f64 z 2))) (pow.f64 (+.f64 y z) 2)))) (*.f64 y (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) z))) (+.f64 y z)))) (pow.f64 x 3))) (+.f64 (*.f64 1/4 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4) (pow.f64 z 2))) (*.f64 (pow.f64 (+.f64 y z) 2) (pow.f64 x 2)))) (+.f64 (*.f64 2 (/.f64 (*.f64 (+.f64 (*.f64 2 (*.f64 (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2))) (*.f64 1/32 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 z 2)) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2))) (*.f64 1/16 (/.f64 (*.f64 (pow.f64 y 2) (*.f64 (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2) (pow.f64 z 2))) (pow.f64 (+.f64 y z) 2)))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 2)) (pow.f64 x 2))) (pow.f64 (exp.f64 (*.f64 1/4 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (+.f64 y z)))))) 4)))))","(+.f64 (/.f64 (*.f64 y (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 4)) z)) (*.f64 (+.f64 y z) x)) (-.f64 (fma.f64 1/4 (/.f64 (*.f64 (*.f64 y y) (*.f64 (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 4)) (*.f64 z z))) (pow.f64 (*.f64 (+.f64 y z) x) 2)) (fma.f64 2 (/.f64 (/.f64 (*.f64 (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (+.f64 y z) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 2)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) z) y) 2)) (pow.f64 (+.f64 y z) 2))) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 2)) x) x) (exp.f64 (*.f64 (*.f64 1/4 (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 4)))) (/.f64 (fma.f64 2 (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 2) (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (+.f64 y z) 3)) (+.f64 -1/384 -5/96)) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 2)) (/.f64 (*.f64 -1/2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (+.f64 y z) 2)) -3/32) (*.f64 y (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 2) z)))) (+.f64 y z)))) (/.f64 (*.f64 (neg.f64 (*.f64 y (*.f64 (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 2) z))) (fma.f64 2 (*.f64 (*.f64 (/.f64 (pow.f64 (*.f64 y z) 2) (pow.f64 (+.f64 y z) 2)) -3/32) (pow.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) 2)) (/.f64 (*.f64 1/16 (pow.f64 (*.f64 (*.f64 (pow.f64 (exp.f64 1/4) (-.f64 (log.f64 (neg.f64 (+.f64 y z))) (neg.f64 (log.f64 (neg.f64 x))))) z) y) 2)) (pow.f64 (+.f64 y z) 2)))) (+.f64 y z))) (pow.f64 x 3))))"]],"time":256.3740234375,"type":"simplify"},{"compiler":[[28952,12413]],"time":204.455078125,"type":"eval"},{"alts":[["(*.f64 2 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","fresh",25.942526176637806],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 (pow.f64 (*.f64 z x) 4/9) (+.f64 z x)) y (*.f64 z x))))","fresh",54.92394128585315],["(*.f64 2 (sqrt.f64 (pow.f64 (pow.f64 (*.f64 z x) 1/3) 3)))","fresh",52.686659515767346],["(*.f64 2 (sqrt.f64 (*.f64 x (+.f64 y z))))","fresh",36.7904284734424],["(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 3)))","fresh",51.88783487422692],["(*.f64 2 (sqrt.f64 (fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) y) (*.f64 x (+.f64 y z)))))","fresh",29.534438081253846],["(*.f64 2 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8) 8)) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","fresh",22.9670743411305],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 (pow.f64 (*.f64 y x) 4/9) (+.f64 y x)) z (*.f64 y x))))","fresh",51.81311332384189],["(*.f64 2 (sqrt.f64 (pow.f64 (pow.f64 (*.f64 y x) 1/3) 3)))","fresh",49.19440077993789],["(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)))","done",22.794459204372302],["(*.f64 2 (sqrt.f64 (*.f64 y (+.f64 z x))))","fresh",34.06567628183427],["(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 3)))","fresh",48.1072412094257],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 z (+.f64 x y)))))","fresh",33.46244847564017],["(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 y x) z)) 3)))","fresh",38.094808140432896],["(*.f64 2 (sqrt.f64 (*.f64 (+.f64 y x) z)))","fresh",38.008845537487616],["(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 z (+.f64 x y)))))","fresh",29.034861114407217],["(*.f64 2 (*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","done",22.84037673367763]],"compiler":[[41,18],[20,12],[13,11],[11,8],[12,10],[20,13],[29,16],[20,12],[13,11],[17,12],[11,8],[12,10],[20,13],[14,11],[11,8],[20,13],[29,15]],"count":[[592,17]],"kept":[{"done":[2,1],"fresh":[14,14],"new":[575,1],"picked":[1,1]}],"min-error":[22.06971500153006],"time":326.51904296875,"type":"prune"},{"accuracy":[22.60238918483542],"baseline":[22.602389184835417],"branch":[["x",22.60238918483542,1],["y",22.60238918483542,1],["z",22.60238918483542,1],["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))",22.60238918483542,1],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))",22.60238918483542,1],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))",22.60238918483542,1]],"compiler":[[4,3],[4,3],[4,3],[17,11],[15,9],[14,8],[338,151]],"count":[[23,1]],"inputs":[["(*.f64 2 (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) 1/8) 8)) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 (pow.f64 (*.f64 z x) 4/9) (+.f64 z x)) y (*.f64 z x))))","(*.f64 2 (sqrt.f64 (pow.f64 (pow.f64 (*.f64 z x) 1/3) 3)))","(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 3)))","(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 (pow.f64 (*.f64 y x) 4/9) (+.f64 y x)) z (*.f64 y x))))","(*.f64 2 (sqrt.f64 (pow.f64 (pow.f64 (*.f64 y x) 1/3) 3)))","(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 3)))","(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 y x) z)) 3)))","(*.f64 2 (*.f64 (cbrt.f64 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 4)) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","(*.f64 2 (*.f64 (*.f64 (cbrt.f64 (pow.f64 (fma.f64 z y (*.f64 x (+.f64 y z))) (+.f64 1/3 1/2))) (cbrt.f64 (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","(*.f64 2 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) 3)))","(*.f64 2 (*.f64 (cbrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))) (cbrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z)))))))","(*.f64 2 (sqrt.f64 (*.f64 y (+.f64 z x))))","(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 x (cbrt.f64 y)) (cbrt.f64 (*.f64 y y)) (*.f64 z (+.f64 x y)))))","(*.f64 2 (pow.f64 (sqrt.f64 (sqrt.f64 (fma.f64 z y (*.f64 x (+.f64 y z))))) 2))","(*.f64 2 (sqrt.f64 (*.f64 y x)))","(*.f64 2 (sqrt.f64 (*.f64 x (+.f64 y z))))","(*.f64 2 (sqrt.f64 (*.f64 (+.f64 y x) z)))","(*.f64 2 (sqrt.f64 (fma.f64 (cbrt.f64 z) (*.f64 (cbrt.f64 (*.f64 z z)) y) (*.f64 x (+.f64 y z)))))","(*.f64 2 (sqrt.f64 (fma.f64 (*.f64 y (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) (*.f64 z (+.f64 x y)))))","(*.f64 2 (sqrt.f64 (*.f64 z x)))","(sqrt.f64 (*.f64 (fma.f64 x (+.f64 y z) (*.f64 y z)) 4))","(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))"]],"link":["."],"name":["Diagrams.TwoD.Apollonian:descartes from diagrams-contrib-1.3.0.5"],"oracle":[63.17031347911625],"outputs":[["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))"]],"time":47.44189453125,"times":[["x",7.26513671875],["y",7.225830078125],["z",7.232177734375],["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))",6.410888671875],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z)))",6.795166015625],["(+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))",6.6640625]],"type":"regimes"},{"compiler":[[17,11]],"inputs":[["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (sqrt.f64 (+.f64 (+.f64 (*.f64 x y) (*.f64 x z)) (*.f64 y z))))","(sqrt.f64 (*.f64 4 (fma.f64 x (+.f64 y z) (*.f64 y z))))"]],"stop":[["fuel",1]],"time":20.136962890625,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[17,11]],"remove-preprocessing":[[]],"time":8.77783203125,"type":"end"}]
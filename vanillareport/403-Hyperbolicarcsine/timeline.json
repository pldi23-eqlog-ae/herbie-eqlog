[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.7486577033996582,0.2508540153503418,0.00048828125],[11,0.7476816177368164,0.2518301010131836,0.00048828125],[10,0.7457294464111328,0.2537822723388672,0.00048828125],[9,0.7418251037597656,0.2576866149902344,0.00048828125],[8,0.7340164184570313,0.26549530029296875,0.00048828125],[7,0.7183990478515625,0.2811126708984375,0.00048828125],[6,0.687164306640625,0.312347412109375,0.00048828125],[5,0.62469482421875,0.37481689453125,0.00048828125],[4,0.499755859375,0.499755859375,0.00048828125],[3,0.2498779296875,0.7496337890625,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":42.777099609375,"type":"analyze"},{"outcomes":[["body",4096,"valid",12.999267578125,39],["body",512,"valid",159.055908203125,1325],["body",1024,"valid",599.42919921875,2557],["body",256,"valid",151.11181640625,3103],["body",2048,"valid",280.57568359375,1232]],"time":1211.593994140625,"type":"sample"},{"compiler":[[10,7]],"egraph":[[0,1,1,1.041e-6],[2,14,9,0.000131125],[1,13,9,8.8166e-5],[0,8,12,4.6333e-5]],"inputs":[["0"],["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))","(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x 1))))","(log.f64 (+.f64 x (hypot.f64 1 x)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":21.739990234375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[2,14,9,0.00012779099999999998],[1,13,9,8.4624e-5],[0,8,12,4.3041e-5]],"inputs":[["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))"]],"method":["egg-herbie"],"outputs":[["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))","(log.f64 (+.f64 x (sqrt.f64 (fma.f64 x x 1))))","(log.f64 (+.f64 x (hypot.f64 1 x)))"]],"stop":[["saturated",1]],"time":10.23388671875,"type":"simplify"},{"compiler":[[16,11]],"time":0.321044921875,"type":"eval"},{"alts":[["(log.f64 (+.f64 x (hypot.f64 1 x)))","next",48.17984498102247]],"compiler":[[7,5],[7,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[48.17984498102247],"time":0.802978515625,"type":"prune"},{"compiler":[[17,11]],"locations":[["(hypot.f64 1 x)",0.00390625,true],["(+.f64 x (hypot.f64 1 x))",0.5972800031692478,true],["(log.f64 (+.f64 x (hypot.f64 1 x)))",2.5492698461609593,true]],"time":4.81103515625,"type":"localize"},{"count":[[3,36]],"series":[["(hypot.f64 1 x)","x","-inf",0.177978515625],["(hypot.f64 1 x)","x","inf",0.18310546875],["(hypot.f64 1 x)","x","0",0.19384765625],["(+.f64 x (hypot.f64 1 x))","x","-inf",0.26806640625],["(+.f64 x (hypot.f64 1 x))","x","inf",0.23779296875],["(+.f64 x (hypot.f64 1 x))","x","0",0.173095703125],["(log.f64 (+.f64 x (hypot.f64 1 x)))","x","-inf",0.737060546875],["(log.f64 (+.f64 x (hypot.f64 1 x)))","x","inf",0.57080078125],["(log.f64 (+.f64 x (hypot.f64 1 x)))","x","0",0.77685546875]],"time":3.444091796875,"type":"series"},{"count":[[3,73]],"egraph":[[2,1559,20,0.016554375],[1,121,20,0.0021215],[0,6,20,0.000176625]],"inputs":[["(log.f64 (+.f64 x (hypot.f64 1 x)))","(+.f64 x (hypot.f64 1 x))","(hypot.f64 1 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x))) 2)) (log.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (+.f64 x (hypot.f64 1 x)))) (log.f64 (sqrt.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log.f64 (+.f64 x (hypot.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x)))) (log.f64 (-.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (+.f64 (pow.f64 x 3) (pow.f64 (hypot.f64 1 x) 3))) (log.f64 (fma.f64 x x (*.f64 (hypot.f64 1 x) (-.f64 (hypot.f64 1 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) (pow.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) 2) (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) (sqrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (+.f64 x (hypot.f64 1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x (hypot.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (hypot.f64 1 x))) (/.f64 (+.f64 1 (*.f64 x x)) (-.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (hypot.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (hypot.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x))) (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x))) 2) (cbrt.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x (hypot.f64 1 x))) (sqrt.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (hypot.f64 1 x) 3)) (/.f64 1 (fma.f64 x x (*.f64 (hypot.f64 1 x) (-.f64 (hypot.f64 1 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (/.f64 1 (-.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (hypot.f64 1 x) (-.f64 (hypot.f64 1 x) x))) (+.f64 (pow.f64 x 3) (pow.f64 (hypot.f64 1 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (hypot.f64 1 x)) (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (hypot.f64 1 x) 3)) (fma.f64 x x (*.f64 (hypot.f64 1 x) (-.f64 (hypot.f64 1 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (hypot.f64 1 x) 3)) (+.f64 (+.f64 1 (*.f64 x x)) (-.f64 (*.f64 x x) (*.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (-.f64 x (hypot.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (hypot.f64 1 x) 3))) (neg.f64 (fma.f64 x x (*.f64 (hypot.f64 1 x) (-.f64 (hypot.f64 1 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x)))) (neg.f64 (-.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 1 (*.f64 x x)) (*.f64 x x)) (-.f64 (hypot.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (hypot.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (hypot.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (hypot.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) 2)) (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x))))) (sqrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (hypot.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (hypot.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (hypot.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 1 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (hypot.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (hypot.f64 1 x)) 2) (cbrt.f64 (hypot.f64 1 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (hypot.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (hypot.f64 1 x)) (sqrt.f64 (hypot.f64 1 x)) x)))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (hypot.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 1 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 1 x)) (pow.f64 (cbrt.f64 (hypot.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (hypot.f64 1 x)) 2) (cbrt.f64 (hypot.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 1 x)) (sqrt.f64 (hypot.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 1 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (*.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 1 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 1 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 1 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (+.f64 1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (hypot.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 1 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (hypot.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (hypot.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (hypot.f64 1 x)))))))"]],"rules":[["egg-rr",17],["egg-rr",36],["egg-rr",20]],"stop":[["node limit",1]],"time":39.69677734375,"type":"rewrite"},{"count":[[109,137]],"egraph":[[4,7621,537,0.030154123999999997],[3,2574,537,0.017587666],[2,882,537,0.0061919159999999996],[1,332,540,0.002077125],[0,110,560,0.000554875]],"inputs":[["x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) (+.f64 (*.f64 -5/112 (pow.f64 x 7)) x)))","(+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 x))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","1","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/8 (pow.f64 x 4)) x)))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 2 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 2 x) (*.f64 1/16 (/.f64 1 (pow.f64 x 5))))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/2 (/.f64 1 x))))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 5/128 (/.f64 1 (pow.f64 x 7)))) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/2 (/.f64 1 x))))","1","(+.f64 1 (*.f64 1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","x","(+.f64 (*.f64 1/2 (/.f64 1 x)) x)","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) x) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(*.f64 -1 x)","(-.f64 (*.f64 -1 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/16 (/.f64 1 (pow.f64 x 5)))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) x))","(fma.f64 -1/6 (pow.f64 x 3) (fma.f64 3/40 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) (+.f64 (*.f64 -5/112 (pow.f64 x 7)) x)))","(fma.f64 -1/6 (pow.f64 x 3) (fma.f64 3/40 (pow.f64 x 5) (fma.f64 -5/112 (pow.f64 x 7) x)))","(+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 x))))","(+.f64 (log.f64 2) (neg.f64 (neg.f64 (log.f64 x))))","(+.f64 (log.f64 2) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(fma.f64 -1 (neg.f64 (log.f64 x)) (+.f64 (log.f64 2) (/.f64 1/4 (*.f64 x x))))","(+.f64 (log.f64 2) (+.f64 (/.f64 1/4 (*.f64 x x)) (log.f64 x)))","(+.f64 (log.f64 2) (+.f64 (log.f64 x) (/.f64 1/4 (*.f64 x x))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(-.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (+.f64 (log.f64 2) (/.f64 1/4 (*.f64 x x)))) (/.f64 3/32 (pow.f64 x 4)))","(+.f64 (+.f64 (log.f64 2) (/.f64 1/4 (*.f64 x x))) (-.f64 (log.f64 x) (/.f64 3/32 (pow.f64 x 4))))","(+.f64 (log.f64 2) (-.f64 (+.f64 (log.f64 x) (/.f64 1/4 (*.f64 x x))) (/.f64 3/32 (pow.f64 x 4))))","(+.f64 (-.f64 (log.f64 2) (/.f64 3/32 (pow.f64 x 4))) (+.f64 (log.f64 x) (/.f64 1/4 (*.f64 x x))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(-.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (+.f64 (log.f64 2) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 5/96 (pow.f64 x 6))))) (/.f64 3/32 (pow.f64 x 4)))","(+.f64 (log.f64 x) (+.f64 (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 5/96 (pow.f64 x 6))) (-.f64 (log.f64 2) (/.f64 3/32 (pow.f64 x 4)))))","(+.f64 (+.f64 (log.f64 2) (/.f64 1/4 (*.f64 x x))) (+.f64 (/.f64 5/96 (pow.f64 x 6)) (-.f64 (log.f64 x) (/.f64 3/32 (pow.f64 x 4)))))","(+.f64 (log.f64 2) (+.f64 (/.f64 1/4 (*.f64 x x)) (+.f64 (/.f64 5/96 (pow.f64 x 6)) (-.f64 (log.f64 x) (/.f64 3/32 (pow.f64 x 4))))))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(+.f64 (log.f64 (/.f64 -1 x)) (-.f64 (log.f64 1/2) (/.f64 1/4 (*.f64 x x))))","(+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (/.f64 -1/4 (*.f64 x x))))","(-.f64 (log.f64 1/2) (-.f64 (/.f64 1/4 (*.f64 x x)) (log.f64 (/.f64 -1 x))))","(+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (/.f64 (/.f64 -1/4 x) x)))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(+.f64 (log.f64 (/.f64 -1 x)) (-.f64 (+.f64 (/.f64 3/32 (pow.f64 x 4)) (log.f64 1/2)) (/.f64 1/4 (*.f64 x x))))","(+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (/.f64 3/32 (pow.f64 x 4)) (+.f64 (log.f64 1/2) (/.f64 -1/4 (*.f64 x x)))))","(+.f64 (/.f64 3/32 (pow.f64 x 4)) (-.f64 (log.f64 1/2) (-.f64 (/.f64 1/4 (*.f64 x x)) (log.f64 (/.f64 -1 x)))))","(+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (+.f64 (/.f64 3/32 (pow.f64 x 4)) (/.f64 (/.f64 -1/4 x) x))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (/.f64 3/32 (pow.f64 x 4)) (log.f64 1/2))) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 5/96 (pow.f64 x 6))))","(+.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (-.f64 (/.f64 3/32 (pow.f64 x 4)) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 5/96 (pow.f64 x 6)))))","(+.f64 (/.f64 3/32 (pow.f64 x 4)) (-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 5/96 (pow.f64 x 6)))))","(+.f64 (/.f64 3/32 (pow.f64 x 4)) (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (+.f64 (/.f64 (/.f64 -1/4 x) x) (/.f64 -5/96 (pow.f64 x 6))))))","(-.f64 (log.f64 (/.f64 -1 x)) (+.f64 (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 5/96 (pow.f64 x 6))) (-.f64 (/.f64 -3/32 (pow.f64 x 4)) (log.f64 1/2))))","1","(+.f64 1 x)","(+.f64 x 1)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) x))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) x))","(+.f64 x (fma.f64 (*.f64 x x) 1/2 1))","(+.f64 x (fma.f64 x (*.f64 x 1/2) 1))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/8 (pow.f64 x 4)) x)))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) (fma.f64 -1/8 (pow.f64 x 4) x)))","(+.f64 1 (fma.f64 (*.f64 x x) 1/2 (fma.f64 (pow.f64 x 4) -1/8 x)))","(+.f64 x (fma.f64 x (*.f64 x 1/2) (fma.f64 (pow.f64 x 4) -1/8 1)))","(*.f64 2 x)","(*.f64 x 2)","(+.f64 (*.f64 2 x) (*.f64 1/2 (/.f64 1 x)))","(fma.f64 2 x (/.f64 1/2 x))","(fma.f64 x 2 (/.f64 1/2 x))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 2 x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(-.f64 (fma.f64 2 x (/.f64 1/2 x)) (/.f64 1/8 (pow.f64 x 3)))","(-.f64 (fma.f64 x 2 (/.f64 1/2 x)) (/.f64 1/8 (pow.f64 x 3)))","(+.f64 (fma.f64 x 2 (/.f64 1/2 x)) (/.f64 -1/8 (pow.f64 x 3)))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 2 x) (*.f64 1/16 (/.f64 1 (pow.f64 x 5))))) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(-.f64 (+.f64 (fma.f64 2 x (/.f64 1/2 x)) (/.f64 1/16 (pow.f64 x 5))) (/.f64 1/8 (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1/2 x) (fma.f64 x 2 (/.f64 1/16 (pow.f64 x 5)))) (/.f64 1/8 (pow.f64 x 3)))","(-.f64 (fma.f64 x 2 (/.f64 1/16 (pow.f64 x 5))) (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))","(+.f64 (/.f64 1/2 x) (-.f64 (fma.f64 x 2 (/.f64 1/16 (pow.f64 x 5))) (/.f64 1/8 (pow.f64 x 3))))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/2 (/.f64 1 x))))","(-.f64 (/.f64 1/8 (pow.f64 x 3)) (+.f64 (/.f64 1/2 x) (/.f64 1/16 (pow.f64 x 5))))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (+.f64 (/.f64 -1/2 x) (/.f64 -1/16 (pow.f64 x 5))))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 5/128 (/.f64 1 (pow.f64 x 7)))) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) (*.f64 1/2 (/.f64 1 x))))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (-.f64 (/.f64 5/128 (pow.f64 x 7)) (+.f64 (/.f64 1/2 x) (/.f64 1/16 (pow.f64 x 5)))))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (+.f64 (/.f64 5/128 (pow.f64 x 7)) (+.f64 (/.f64 -1/2 x) (/.f64 -1/16 (pow.f64 x 5)))))","1","(+.f64 1 (*.f64 1/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) 1/2))","(fma.f64 (*.f64 x x) 1/2 1)","(fma.f64 x (*.f64 x 1/2) 1)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/8 (pow.f64 x 4))))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) (*.f64 (pow.f64 x 4) -1/8)))","(+.f64 1 (fma.f64 (*.f64 x x) 1/2 (*.f64 (pow.f64 x 4) -1/8)))","(fma.f64 x (*.f64 x 1/2) (fma.f64 (pow.f64 x 4) -1/8 1))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/16 (pow.f64 x 6)) (*.f64 -1/8 (pow.f64 x 4)))))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) (fma.f64 1/16 (pow.f64 x 6) (*.f64 (pow.f64 x 4) -1/8))))","(+.f64 1 (fma.f64 (*.f64 x x) 1/2 (fma.f64 (pow.f64 x 4) -1/8 (*.f64 (pow.f64 x 6) 1/16))))","(+.f64 1 (fma.f64 (pow.f64 x 4) -1/8 (fma.f64 (*.f64 x x) 1/2 (*.f64 (pow.f64 x 6) 1/16))))","(+.f64 1 (fma.f64 x (*.f64 x 1/2) (fma.f64 (pow.f64 x 4) -1/8 (*.f64 (pow.f64 x 6) 1/16))))","x","(+.f64 (*.f64 1/2 (/.f64 1 x)) x)","(+.f64 x (/.f64 1/2 x))","(-.f64 x (/.f64 -1/2 x))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) x) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(-.f64 (+.f64 x (/.f64 1/2 x)) (/.f64 1/8 (pow.f64 x 3)))","(+.f64 x (-.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 x (+.f64 (/.f64 1/2 x) (/.f64 -1/8 (pow.f64 x 3))))","(-.f64 (/.f64 1/2 x) (-.f64 (/.f64 1/8 (pow.f64 x 3)) x))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 1 x)) (+.f64 (*.f64 1/16 (/.f64 1 (pow.f64 x 5))) x)) (*.f64 1/8 (/.f64 1 (pow.f64 x 3))))","(+.f64 (/.f64 1/2 x) (-.f64 (+.f64 x (/.f64 1/16 (pow.f64 x 5))) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 (+.f64 x (/.f64 1/16 (pow.f64 x 5))) (-.f64 (/.f64 1/2 x) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 x (-.f64 (+.f64 (/.f64 1/2 x) (/.f64 1/16 (pow.f64 x 5))) (/.f64 1/8 (pow.f64 x 3))))","(+.f64 x (+.f64 (/.f64 1/2 x) (-.f64 (/.f64 1/16 (pow.f64 x 5)) (/.f64 1/8 (pow.f64 x 3)))))","(*.f64 -1 x)","(neg.f64 x)","(-.f64 (*.f64 -1 x) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (neg.f64 x) (/.f64 1/2 x))","(fma.f64 x -1 (/.f64 -1/2 x))","(-.f64 (/.f64 -1/2 x) x)","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (-.f64 (neg.f64 x) (/.f64 1/2 x)))","(+.f64 (-.f64 (/.f64 1/8 (pow.f64 x 3)) x) (/.f64 -1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (-.f64 (/.f64 -1/2 x) x))","(-.f64 (+.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 -1 x)) (+.f64 (*.f64 1/2 (/.f64 1 x)) (*.f64 1/16 (/.f64 1 (pow.f64 x 5)))))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (-.f64 (neg.f64 x) (+.f64 (/.f64 1/2 x) (/.f64 1/16 (pow.f64 x 5)))))","(+.f64 (-.f64 (/.f64 1/8 (pow.f64 x 3)) x) (-.f64 (/.f64 -1/2 x) (/.f64 1/16 (pow.f64 x 5))))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (+.f64 (-.f64 (/.f64 -1/2 x) x) (/.f64 -1/16 (pow.f64 x 5))))"]],"stop":[["node limit",1]],"time":48.464111328125,"type":"simplify"},{"compiler":[[1814,1362]],"time":25.660888671875,"type":"eval"},{"alts":[["(log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))","fresh",45.54171942793122],["(fma.f64 -1/6 (pow.f64 x 3) x)","next",31.350320188525853],["(log.f64 (/.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (-.f64 x (hypot.f64 1 x))))","fresh",61.33601007924711],["(log.f64 (+.f64 x (hypot.f64 1 x)))","done",48.17984498102247]],"compiler":[[11,9],[7,5],[17,10],[7,5],[11,9],[7,5],[17,10]],"count":[[138,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[137,3],"picked":[1,1]}],"min-error":[0],"time":17.093994140625,"type":"prune"},{"compiler":[[13,9]],"locations":[["(fma.f64 -1/6 (pow.f64 x 3) x)",0.0546875,true]],"time":4.031005859375,"type":"localize"},{"count":[[1,12]],"series":[["(fma.f64 -1/6 (pow.f64 x 3) x)","x","-inf",0.451904296875],["(fma.f64 -1/6 (pow.f64 x 3) x)","x","inf",0.43115234375],["(fma.f64 -1/6 (pow.f64 x 3) x)","x","0",0.322021484375]],"time":1.251220703125,"type":"series"},{"count":[[1,21]],"egraph":[[2,1343,8,0.014962833],[1,130,8,0.002202042],[0,6,8,0.000249792]],"inputs":[["(fma.f64 -1/6 (pow.f64 x 3) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 -1/6 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/6 (pow.f64 x 3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -1/6 (pow.f64 x 3)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 -1/6 (pow.f64 x 3) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -1/6 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)) (pow.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)) 2) (cbrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)) (sqrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -1/6 (pow.f64 x 3)) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 -1/6 (pow.f64 x 3)) (*.f64 -1/6 (pow.f64 x 3))) (-.f64 (*.f64 x x) (*.f64 (*.f64 -1/6 (pow.f64 x 3)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 -1/6 (pow.f64 x 3)) (*.f64 -1/6 (pow.f64 x 3))) (*.f64 x x)) (-.f64 (*.f64 -1/6 (pow.f64 x 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -1/6 (pow.f64 x 3) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -1/6 (pow.f64 x 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -1/6 (pow.f64 x 3) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -1/6 (pow.f64 x 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -1/6 (pow.f64 x 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -1/6 (pow.f64 x 3) x)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":32.27978515625,"type":"rewrite"},{"count":[[33,24]],"egraph":[[22,7241,87,0.112475583],[21,6301,87,0.098325749],[20,6217,87,0.085510666],[19,6037,87,0.078032583],[18,5811,87,0.070434499],[17,5525,87,0.062636624],[16,5202,87,0.055335416000000005],[15,4484,87,0.048056707000000004],[14,3885,87,0.040047249],[13,3382,87,0.033343416],[12,2961,87,0.027428291000000004],[11,2639,87,0.022349666000000004],[10,2398,87,0.017900791000000003],[9,2240,87,0.014250791000000002],[8,2107,87,0.011117541000000002],[7,2020,87,0.008384791],[6,1309,87,0.005573375],[5,370,87,0.0030067500000000003],[4,142,87,0.0011688750000000002],[3,74,87,0.0005937920000000001],[2,36,87,0.00032545800000000004],[1,18,87,0.000165625],[0,7,87,6.7375e-5]],"inputs":[["x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(*.f64 -1/6 (pow.f64 x 3))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(*.f64 -1/6 (pow.f64 x 3))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(*.f64 -1/6 (pow.f64 x 3))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(*.f64 -1/6 (pow.f64 x 3))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)"]],"stop":[["node limit",1]],"time":127.7431640625,"type":"simplify"},{"compiler":[[255,192]],"time":4.0859375,"type":"eval"},{"alts":[["(log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))","next",45.54171942793122],["(fma.f64 -1/6 (pow.f64 x 3) x)","done",31.350320188525853],["(log.f64 (/.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (-.f64 x (hypot.f64 1 x))))","fresh",61.33601007924711],["(log.f64 (+.f64 x (hypot.f64 1 x)))","done",48.17984498102247]],"compiler":[[11,9],[7,5],[17,10],[7,5],[11,9],[17,10]],"count":[[28,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[24,0],"picked":[1,1]}],"min-error":[0],"time":3.7919921875,"type":"prune"},{"compiler":[[35,27]],"locations":[["(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))",0.01171875,true],["(/.f64 1/8 (pow.f64 x 3))",0.338357039709967,true],["(log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))",11.137984728442486,true]],"time":9.875,"type":"localize"},{"count":[[3,24]],"series":[["(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","x","-inf",0.192138671875],["(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","x","inf",0.22314453125],["(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","x","0",0.267822265625],["(/.f64 1/8 (pow.f64 x 3))","x","-inf",0.234130859375],["(/.f64 1/8 (pow.f64 x 3))","x","inf",0.220947265625],["(/.f64 1/8 (pow.f64 x 3))","x","0",0.433837890625],["(log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))","x","-inf",0.3349609375],["(log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))","x","inf",0.82080078125],["(log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))","x","0",0.491943359375]],"time":3.345947265625,"type":"series"},{"count":[[3,161]],"egraph":[[2,3104,31,0.025691376000000002],[1,235,31,0.004644042],[0,10,35,0.000396209]],"inputs":[["(log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))","(/.f64 1/8 (pow.f64 x 3))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3)))) (log.f64 (/.f64 1 (+.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/16 (pow.f64 x 4)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x))) (log.f64 (/.f64 1 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) (log.f64 (cbrt.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) (log.f64 (sqrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 1/4 (*.f64 x x)))) (log.f64 (/.f64 1 (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 2))) (log.f64 (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 (pow.f64 x 4) (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 (+.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/16 (pow.f64 x 4)))) (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x)) (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 1/4 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3)))) (log.f64 (+.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/16 (pow.f64 x 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3)))) (log.f64 (+.f64 (/.f64 1/4 (*.f64 x x)) (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 -1/16 (pow.f64 x 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x))) (*.f64 4 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 1/4 (*.f64 x x)))) (log.f64 (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x)))) (log.f64 (neg.f64 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3))))) (log.f64 (neg.f64 (+.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/16 (pow.f64 x 4)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 1/4 (*.f64 x x))))) (log.f64 (neg.f64 (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (+.f64 x (*.f64 (*.f64 (pow.f64 x 3) 8) -1/2))) (log.f64 (*.f64 (*.f64 (pow.f64 x 3) 8) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1/8 x (*.f64 (neg.f64 (pow.f64 x 3)) -1/2))) (log.f64 (*.f64 (neg.f64 (pow.f64 x 3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 1/8 (*.f64 x -2) (pow.f64 x 3))) (log.f64 (*.f64 (pow.f64 x 3) (*.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 x -2 (*.f64 (*.f64 (pow.f64 x 3) 8) 1))) (log.f64 (*.f64 (*.f64 (pow.f64 x 3) 8) (*.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1/8 (*.f64 x -2) (*.f64 (neg.f64 (pow.f64 x 3)) 1))) (log.f64 (*.f64 (neg.f64 (pow.f64 x 3)) (*.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 1/8 (neg.f64 x) (*.f64 (pow.f64 x 3) 1/2))) (log.f64 (*.f64 (pow.f64 x 3) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1 x (*.f64 (*.f64 (pow.f64 x 3) 8) 1/2))) (log.f64 (*.f64 (*.f64 (pow.f64 x 3) 8) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1/8 (neg.f64 x) (*.f64 (neg.f64 (pow.f64 x 3)) 1/2))) (log.f64 (*.f64 (neg.f64 (pow.f64 x 3)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (+.f64 (pow.f64 x 3) (*.f64 (*.f64 x -2) 1/8))) (log.f64 (*.f64 (*.f64 x -2) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 1/2 (pow.f64 x 3) (*.f64 (neg.f64 x) 1/8))) (log.f64 (*.f64 (neg.f64 x) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1/2 (*.f64 (pow.f64 x 3) 8) x)) (log.f64 (*.f64 x (*.f64 (pow.f64 x 3) 8))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 (pow.f64 x 3) 8 (*.f64 (*.f64 x -2) 1))) (log.f64 (*.f64 (*.f64 x -2) (*.f64 (pow.f64 x 3) 8))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 1/2 (*.f64 (pow.f64 x 3) 8) (*.f64 (neg.f64 x) 1))) (log.f64 (*.f64 (neg.f64 x) (*.f64 (pow.f64 x 3) 8))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1/2 (neg.f64 (pow.f64 x 3)) (*.f64 x -1/8))) (log.f64 (*.f64 x (neg.f64 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 -1 (pow.f64 x 3) (*.f64 (*.f64 x -2) -1/8))) (log.f64 (*.f64 (*.f64 x -2) (neg.f64 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (fma.f64 1/2 (neg.f64 (pow.f64 x 3)) (*.f64 (neg.f64 x) -1/8))) (log.f64 (*.f64 (neg.f64 x) (neg.f64 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 1/64 (pow.f64 x 6)))) (log.f64 (-.f64 (/.f64 -1/2 x) (*.f64 1/8 (pow.f64 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (/.f64 (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x)) (pow.f64 x 3))) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (log.f64 (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) (pow.f64 (cbrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) 2) (cbrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) (sqrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (log.f64 (sqrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (*.f64 3 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 (pow.f64 x 4) (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 (+.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/16 (pow.f64 x 4)))) (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x)) (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 1/4 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 1/8 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 1/8) (pow.f64 x -3))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 1/8) (pow.f64 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 1/8) (pow.f64 x -3)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 1/8) (pow.f64 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 1/8 (pow.f64 x -3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/8 (pow.f64 x -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/8 (pow.f64 x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/8 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/8 (/.f64 1 (neg.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 x) (pow.f64 (/.f64 1/2 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1/2 x) 2) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 1/8) (pow.f64 x 3/2)) (/.f64 (sqrt.f64 1/8) (pow.f64 x 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -3) 1/8)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/8 (pow.f64 x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/2 x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 1/8) (pow.f64 x 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/512 (pow.f64 (pow.f64 x -3) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) 8) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (pow.f64 x 3) 8) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1/64 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 1/8) (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 1/8 (pow.f64 x -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/512 (pow.f64 (pow.f64 x -3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/8 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/8 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 3 (log.f64 (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 1/2 x))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x))) (/.f64 (/.f64 1/4 (*.f64 x x)) (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) (cbrt.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 2)) (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) (sqrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x)) (/.f64 1 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3))) (/.f64 1 (+.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/16 (pow.f64 x 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 1/4 (*.f64 x x))) (/.f64 1 (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 x 4) (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/16 (pow.f64 x 4)))) (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x)) (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 1/4 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x)) (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3))) (+.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/16 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3))) (+.f64 (/.f64 1/4 (*.f64 x x)) (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 -1/16 (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 1/4 (*.f64 x x))) (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x))) (neg.f64 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3)))) (neg.f64 (+.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/16 (pow.f64 x 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 1/4 (*.f64 x x)))) (neg.f64 (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (*.f64 (*.f64 (pow.f64 x 3) 8) -1/2)) (*.f64 (*.f64 (pow.f64 x 3) 8) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/8 x (*.f64 (neg.f64 (pow.f64 x 3)) -1/2)) (*.f64 (neg.f64 (pow.f64 x 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/8 (*.f64 x -2) (pow.f64 x 3)) (*.f64 (pow.f64 x 3) (*.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x -2 (*.f64 (*.f64 (pow.f64 x 3) 8) 1)) (*.f64 (*.f64 (pow.f64 x 3) 8) (*.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/8 (*.f64 x -2) (*.f64 (neg.f64 (pow.f64 x 3)) 1)) (*.f64 (neg.f64 (pow.f64 x 3)) (*.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/8 (neg.f64 x) (*.f64 (pow.f64 x 3) 1/2)) (*.f64 (pow.f64 x 3) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 x (*.f64 (*.f64 (pow.f64 x 3) 8) 1/2)) (*.f64 (*.f64 (pow.f64 x 3) 8) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/8 (neg.f64 x) (*.f64 (neg.f64 (pow.f64 x 3)) 1/2)) (*.f64 (neg.f64 (pow.f64 x 3)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (*.f64 (*.f64 x -2) 1/8)) (*.f64 (*.f64 x -2) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 (pow.f64 x 3) (*.f64 (neg.f64 x) 1/8)) (*.f64 (neg.f64 x) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/2 (*.f64 (pow.f64 x 3) 8) x) (*.f64 x (*.f64 (pow.f64 x 3) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 3) 8 (*.f64 (*.f64 x -2) 1)) (*.f64 (*.f64 x -2) (*.f64 (pow.f64 x 3) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 (*.f64 (pow.f64 x 3) 8) (*.f64 (neg.f64 x) 1)) (*.f64 (neg.f64 x) (*.f64 (pow.f64 x 3) 8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/2 (neg.f64 (pow.f64 x 3)) (*.f64 x -1/8)) (*.f64 x (neg.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (pow.f64 x 3) (*.f64 (*.f64 x -2) -1/8)) (*.f64 (*.f64 x -2) (neg.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 (neg.f64 (pow.f64 x 3)) (*.f64 (neg.f64 x) -1/8)) (*.f64 (neg.f64 x) (neg.f64 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 1/64 (pow.f64 x 6))) (-.f64 (/.f64 -1/2 x) (*.f64 1/8 (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x)) (pow.f64 x 3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))) 2)) (cbrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))) (sqrt.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 x 4) (fma.f64 (pow.f64 x 3) -1/2 (*.f64 1/8 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (/.f64 1/64 (pow.f64 x 6)) (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 -1/16 (pow.f64 x 4)))) (fma.f64 1/512 (pow.f64 (pow.f64 x -3) 3) (/.f64 -1/8 (pow.f64 x 3)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x)) (-.f64 (/.f64 1/64 (pow.f64 x 6)) (/.f64 1/4 (*.f64 x x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 1/8 (pow.f64 x -3)))) (exp.f64 (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 1/8) (pow.f64 x -3)) (+.f64 1 (expm1.f64 (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 1/8 (pow.f64 x -3)))) (+.f64 1 (expm1.f64 (/.f64 -1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 -1/2 x))) (pow.f64 (exp.f64 1/8) (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 -1/2 x)) (+.f64 1 (expm1.f64 (*.f64 1/8 (pow.f64 x -3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 -1/2 x))) (+.f64 1 (expm1.f64 (*.f64 1/8 (pow.f64 x -3))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/8 (pow.f64 x -3) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/8 (pow.f64 x -3)) 1 (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (/.f64 1 x) (*.f64 1/8 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1/2 x) 1 (*.f64 1/8 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/8 (pow.f64 x -3)) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 -1/2 x) (*.f64 1/8 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/8 (/.f64 1 (neg.f64 (pow.f64 x 3))) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 -1/2 x)) (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (*.f64 1/8 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (cbrt.f64 (/.f64 -1/2 x)) (*.f64 1/8 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 x) (pow.f64 (/.f64 1/2 x) 2) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (/.f64 1/2 x) 2) (/.f64 1/2 x) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 -1/2 x)) (sqrt.f64 (/.f64 -1/2 x)) (*.f64 1/8 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 1/8) (pow.f64 x 3/2)) (/.f64 (sqrt.f64 1/8) (pow.f64 x 3/2)) (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 1 (neg.f64 x)) (*.f64 1/8 (pow.f64 x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -3) 1/8 (/.f64 -1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) -1/2 (*.f64 1/8 (pow.f64 x -3)))))))"]],"rules":[["egg-rr",77],["egg-rr",26],["egg-rr",58]],"stop":[["node limit",1]],"time":54.77001953125,"type":"rewrite"},{"count":[[185,188]],"egraph":[[4,6556,394,0.025083292],[3,1618,394,0.012975041999999999],[2,482,394,0.003487667],[1,180,396,0.001141167],[0,67,406,0.000321167]],"inputs":[["(+.f64 (*.f64 -3 (log.f64 x)) (log.f64 1/8))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (log.f64 1/8)))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (+.f64 (log.f64 1/8) (*.f64 -8 (pow.f64 x 4)))))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (+.f64 (log.f64 1/8) (+.f64 (*.f64 -8 (pow.f64 x 4)) (*.f64 -64/3 (pow.f64 x 6))))))","(+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x)))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/192 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/192 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))))","(/.f64 1/8 (pow.f64 x 3))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 -3 (log.f64 x)) (log.f64 1/8))","(fma.f64 -3 (log.f64 x) (log.f64 1/8))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (log.f64 1/8)))","(fma.f64 -3 (log.f64 x) (fma.f64 -4 (*.f64 x x) (log.f64 1/8)))","(fma.f64 -3 (log.f64 x) (fma.f64 x (*.f64 x -4) (log.f64 1/8)))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (+.f64 (log.f64 1/8) (*.f64 -8 (pow.f64 x 4)))))","(fma.f64 -3 (log.f64 x) (+.f64 (fma.f64 -4 (*.f64 x x) (log.f64 1/8)) (*.f64 -8 (pow.f64 x 4))))","(fma.f64 -3 (log.f64 x) (fma.f64 -4 (*.f64 x x) (fma.f64 -8 (pow.f64 x 4) (log.f64 1/8))))","(fma.f64 -3 (log.f64 x) (fma.f64 x (*.f64 x -4) (fma.f64 -8 (pow.f64 x 4) (log.f64 1/8))))","(fma.f64 -3 (log.f64 x) (fma.f64 (*.f64 x x) (fma.f64 x (*.f64 x -8) -4) (log.f64 1/8)))","(+.f64 (*.f64 -3 (log.f64 x)) (+.f64 (*.f64 -4 (pow.f64 x 2)) (+.f64 (log.f64 1/8) (+.f64 (*.f64 -8 (pow.f64 x 4)) (*.f64 -64/3 (pow.f64 x 6))))))","(fma.f64 -3 (log.f64 x) (fma.f64 -4 (*.f64 x x) (+.f64 (log.f64 1/8) (fma.f64 -8 (pow.f64 x 4) (*.f64 -64/3 (pow.f64 x 6))))))","(+.f64 (fma.f64 -3 (log.f64 x) (fma.f64 -4 (*.f64 x x) (log.f64 1/8))) (fma.f64 -8 (pow.f64 x 4) (*.f64 -64/3 (pow.f64 x 6))))","(fma.f64 -3 (log.f64 x) (fma.f64 x (*.f64 x -4) (fma.f64 -8 (pow.f64 x 4) (fma.f64 -64/3 (pow.f64 x 6) (log.f64 1/8)))))","(fma.f64 x (*.f64 x -4) (fma.f64 -64/3 (pow.f64 x 6) (fma.f64 -8 (pow.f64 x 4) (fma.f64 -3 (log.f64 x) (log.f64 1/8)))))","(fma.f64 -3 (log.f64 x) (fma.f64 -64/3 (pow.f64 x 6) (fma.f64 (*.f64 x x) (fma.f64 x (*.f64 x -8) -4) (log.f64 1/8))))","(+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x)))","(+.f64 (log.f64 -1/2) (neg.f64 (log.f64 x)))","(-.f64 (log.f64 -1/2) (log.f64 x))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(+.f64 (log.f64 -1/2) (-.f64 (neg.f64 (log.f64 x)) (/.f64 1/4 (*.f64 x x))))","(+.f64 (-.f64 (log.f64 -1/2) (log.f64 x)) (/.f64 -1/4 (*.f64 x x)))","(+.f64 (log.f64 -1/2) (-.f64 (/.f64 -1/4 (*.f64 x x)) (log.f64 x)))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (log.f64 -1/2) (neg.f64 (log.f64 x))) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 1/32 (pow.f64 x 4))))","(+.f64 (-.f64 (-.f64 (log.f64 -1/2) (log.f64 x)) (/.f64 1/32 (pow.f64 x 4))) (/.f64 -1/4 (*.f64 x x)))","(+.f64 (-.f64 (log.f64 -1/2) (log.f64 x)) (+.f64 (/.f64 -1/4 (*.f64 x x)) (/.f64 -1/32 (pow.f64 x 4))))","(+.f64 (log.f64 -1/2) (+.f64 (/.f64 -1/4 (*.f64 x x)) (-.f64 (/.f64 -1/32 (pow.f64 x 4)) (log.f64 x))))","(-.f64 (+.f64 (log.f64 -1/2) (log.f64 (/.f64 1 x))) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/192 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))))","(-.f64 (+.f64 (log.f64 -1/2) (neg.f64 (log.f64 x))) (+.f64 (/.f64 1/32 (pow.f64 x 4)) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 1/192 (pow.f64 x 6)))))","(-.f64 (+.f64 (-.f64 (-.f64 (log.f64 -1/2) (log.f64 x)) (/.f64 1/32 (pow.f64 x 4))) (/.f64 -1/4 (*.f64 x x))) (/.f64 1/192 (pow.f64 x 6)))","(+.f64 (+.f64 (/.f64 -1/4 (*.f64 x x)) (/.f64 -1/32 (pow.f64 x 4))) (-.f64 (-.f64 (log.f64 -1/2) (log.f64 x)) (/.f64 1/192 (pow.f64 x 6))))","(+.f64 (-.f64 (log.f64 -1/2) (log.f64 x)) (-.f64 (/.f64 -1/4 (*.f64 x x)) (-.f64 (/.f64 1/32 (pow.f64 x 4)) (/.f64 -1/192 (pow.f64 x 6)))))","(+.f64 (-.f64 (log.f64 -1/2) (log.f64 x)) (+.f64 (+.f64 (/.f64 -1/4 (*.f64 x x)) (/.f64 -1/32 (pow.f64 x 4))) (/.f64 -1/192 (pow.f64 x 6))))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (/.f64 1/4 (*.f64 x x)))","(+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (/.f64 -1/4 (*.f64 x x))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 1/32 (pow.f64 x 4))))","(+.f64 (log.f64 (/.f64 -1 x)) (-.f64 (+.f64 (log.f64 1/2) (/.f64 -1/4 (*.f64 x x))) (/.f64 1/32 (pow.f64 x 4))))","(-.f64 (+.f64 (log.f64 1/2) (/.f64 -1/4 (*.f64 x x))) (-.f64 (/.f64 1/32 (pow.f64 x 4)) (log.f64 (/.f64 -1 x))))","(+.f64 (/.f64 -1/4 (*.f64 x x)) (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (/.f64 -1/32 (pow.f64 x 4)))))","(+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (+.f64 (/.f64 -1/4 (*.f64 x x)) (/.f64 -1/32 (pow.f64 x 4)))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (+.f64 (*.f64 1/32 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/192 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (log.f64 (/.f64 -1 x)) (-.f64 (log.f64 1/2) (+.f64 (/.f64 1/32 (pow.f64 x 4)) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 1/192 (pow.f64 x 6))))))","(+.f64 (log.f64 (/.f64 -1 x)) (-.f64 (-.f64 (log.f64 1/2) (/.f64 1/32 (pow.f64 x 4))) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 1/192 (pow.f64 x 6)))))","(+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (-.f64 (+.f64 (log.f64 1/2) (/.f64 -1/4 (*.f64 x x))) (/.f64 1/192 (pow.f64 x 6))) (/.f64 -1/32 (pow.f64 x 4))))","(+.f64 (log.f64 1/2) (-.f64 (/.f64 -1/32 (pow.f64 x 4)) (+.f64 (/.f64 1/4 (*.f64 x x)) (-.f64 (/.f64 1/192 (pow.f64 x 6)) (log.f64 (/.f64 -1 x))))))","(+.f64 (log.f64 1/2) (-.f64 (+.f64 (/.f64 -1/4 (*.f64 x x)) (/.f64 -1/32 (pow.f64 x 4))) (-.f64 (/.f64 1/192 (pow.f64 x 6)) (log.f64 (/.f64 -1 x)))))","(/.f64 1/8 (pow.f64 x 3))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","(/.f64 -1/2 x)","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))","(-.f64 (*.f64 1/8 (/.f64 1 (pow.f64 x 3))) (*.f64 1/2 (/.f64 1 x)))","(-.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 1/2 x))","(+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))"]],"stop":[["node limit",1]],"time":42.113037109375,"type":"simplify"},{"compiler":[[3198,2529]],"time":43.818115234375,"type":"eval"},{"alts":[["(log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))","done",45.54171942793122],["(fma.f64 -1/6 (pow.f64 x 3) x)","done",31.350320188525853],["(log.f64 (/.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (-.f64 x (hypot.f64 1 x))))","next",61.33601007924711],["(log.f64 (+.f64 x (hypot.f64 1 x)))","done",48.17984498102247]],"compiler":[[11,9],[7,5],[17,10],[7,5],[17,10]],"count":[[192,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[188,0],"picked":[1,1]}],"min-error":[0],"time":23.102783203125,"type":"prune"},{"compiler":[[59,28]],"locations":[["(hypot.f64 1 x)",0.00390625,false],["(log.f64 (/.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (-.f64 x (hypot.f64 1 x))))",2.5492698476773104,true],["(-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x)))",17.464737791718562,true]],"time":11.634033203125,"type":"localize"},{"count":[[2,24]],"series":[["(log.f64 (/.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (-.f64 x (hypot.f64 1 x))))","x","-inf",0.2900390625],["(log.f64 (/.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (-.f64 x (hypot.f64 1 x))))","x","inf",0.351806640625],["(log.f64 (/.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (-.f64 x (hypot.f64 1 x))))","x","0",0.37109375],["(-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x)))","x","-inf",0.14013671875],["(-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x)))","x","inf",0.149169921875],["(-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x)))","x","0",0.20703125]],"time":1.60009765625,"type":"series"},{"count":[[2,191]],"egraph":[[2,3567,20,0.028365666999999997],[1,235,20,0.00460525],[0,10,37,0.000288959]],"inputs":[["(-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x)))","(log.f64 (/.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (-.f64 x (hypot.f64 1 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (neg.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 (neg.f64 (fma.f64 x x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (fma.f64 (neg.f64 (fma.f64 x x 1)) 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (+.f64 (neg.f64 (fma.f64 x x 1)) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (*.f64 x x) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 x x 1)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x -1) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x -1) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x -1) (*.f64 -1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x x -1) (*.f64 (neg.f64 (cbrt.f64 (pow.f64 x 4))) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 x x) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (hypot.f64 1 x)) (-.f64 x (hypot.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2)) (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 6) (pow.f64 (fma.f64 x x 1) 3)) (/.f64 1 (fma.f64 (fma.f64 x x 1) (fma.f64 x x (fma.f64 x x 1)) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 4) (pow.f64 (fma.f64 x x 1) 2)) (/.f64 1 (fma.f64 x x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (fma.f64 x x 1) (fma.f64 x x (fma.f64 x x 1)) (pow.f64 x 4)) (-.f64 (pow.f64 x 6) (pow.f64 (fma.f64 x x 1) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (fma.f64 x x 1)) (-.f64 (pow.f64 x 4) (pow.f64 (fma.f64 x x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 6) (pow.f64 (fma.f64 x x 1) 3)) (fma.f64 (fma.f64 x x 1) (fma.f64 x x (fma.f64 x x 1)) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) (pow.f64 (fma.f64 x x 1) 2)) (fma.f64 x x (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 6) (pow.f64 (fma.f64 x x 1) 3))) (neg.f64 (fma.f64 (fma.f64 x x 1) (fma.f64 x x (fma.f64 x x 1)) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 4) (pow.f64 (fma.f64 x x 1) 2))) (neg.f64 (fma.f64 x x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x x -1) 3) (pow.f64 x 6)) (+.f64 (pow.f64 (fma.f64 x x -1) 2) (+.f64 (pow.f64 x 4) (*.f64 (fma.f64 x x -1) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) (pow.f64 (neg.f64 (fma.f64 x x 1)) 3)) (+.f64 (pow.f64 x 4) (-.f64 (pow.f64 (neg.f64 (fma.f64 x x 1)) 2) (*.f64 (*.f64 x x) (neg.f64 (fma.f64 x x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x x -1) 2) (pow.f64 x 4)) (+.f64 (fma.f64 x x -1) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) (pow.f64 (neg.f64 (fma.f64 x x 1)) 2)) (-.f64 (*.f64 x x) (neg.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (fma.f64 x x 1) (fma.f64 x x (fma.f64 x x 1)) (pow.f64 x 4)) (-.f64 (pow.f64 x 6) (pow.f64 (fma.f64 x x 1) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x x (fma.f64 x x 1)) (-.f64 (pow.f64 x 4) (pow.f64 (fma.f64 x x 1) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 x x))) (exp.f64 (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 x x)) (+.f64 1 (expm1.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 x x))) (+.f64 1 (expm1.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (fma.f64 x x -1)) (+.f64 1 (expm1.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x x))) (exp.f64 (neg.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 x x)) (/.f64 1 (exp.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x x))) (/.f64 1 (exp.f64 (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (fma.f64 x x 1))) (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (fma.f64 x x 1))) (exp.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (fma.f64 x x 1))) (+.f64 1 (expm1.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (fma.f64 x x 1))) (+.f64 1 (expm1.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (neg.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 (neg.f64 (fma.f64 x x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (neg.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (*.f64 (neg.f64 (fma.f64 x x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (neg.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 (neg.f64 (fma.f64 x x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (fma.f64 (neg.f64 (fma.f64 x x 1)) 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (+.f64 (neg.f64 (fma.f64 x x 1)) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (fma.f64 x x 1)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x x -1) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x x -1) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x x -1) (*.f64 -1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x x -1) (*.f64 (neg.f64 (cbrt.f64 (pow.f64 x 4))) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 1 (fma.f64 (neg.f64 (fma.f64 x x 1)) 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 1 (+.f64 (neg.f64 (fma.f64 x x 1)) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 1 (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 1 x) (neg.f64 (hypot.f64 1 x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (hypot.f64 1 x)) (-.f64 x (hypot.f64 1 x)) (fma.f64 (neg.f64 (fma.f64 x x 1)) 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (hypot.f64 1 x)) (-.f64 x (hypot.f64 1 x)) (+.f64 (neg.f64 (fma.f64 x x 1)) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (hypot.f64 1 x)) (-.f64 x (hypot.f64 1 x)) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2)) (fma.f64 (neg.f64 (fma.f64 x x 1)) 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2)) (+.f64 (neg.f64 (fma.f64 x x 1)) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2)) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2)) (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (fma.f64 (neg.f64 (fma.f64 x x 1)) 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2)) (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (+.f64 (neg.f64 (fma.f64 x x 1)) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2)) (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (pow.f64 x 4)) (neg.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (pow.f64 x 4)) (*.f64 (neg.f64 (fma.f64 x x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) x) (neg.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) x) (*.f64 (neg.f64 (fma.f64 x x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (pow.f64 (cbrt.f64 x) 2) (*.f64 (neg.f64 (fma.f64 x x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) x) (neg.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) x) (*.f64 (neg.f64 (fma.f64 x x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) (fma.f64 (neg.f64 (fma.f64 x x 1)) 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) (+.f64 (neg.f64 (fma.f64 x x 1)) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 6) (pow.f64 (fma.f64 x x 1) 3)) (/.f64 1 (fma.f64 (fma.f64 x x 1) (fma.f64 x x (fma.f64 x x 1)) (pow.f64 x 4))) (fma.f64 (neg.f64 (fma.f64 x x 1)) 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 6) (pow.f64 (fma.f64 x x 1) 3)) (/.f64 1 (fma.f64 (fma.f64 x x 1) (fma.f64 x x (fma.f64 x x 1)) (pow.f64 x 4))) (+.f64 (neg.f64 (fma.f64 x x 1)) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 6) (pow.f64 (fma.f64 x x 1) 3)) (/.f64 1 (fma.f64 (fma.f64 x x 1) (fma.f64 x x (fma.f64 x x 1)) (pow.f64 x 4))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (hypot.f64 1 x)) (hypot.f64 1 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 4) (pow.f64 (fma.f64 x x 1) 2)) (/.f64 1 (fma.f64 x x (fma.f64 x x 1))) (fma.f64 (neg.f64 (fma.f64 x x 1)) 1 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 4) (pow.f64 (fma.f64 x x 1) 2)) (/.f64 1 (fma.f64 x x (fma.f64 x x 1))) (+.f64 (neg.f64 (fma.f64 x x 1)) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 4) (pow.f64 (fma.f64 x x 1) 2)) (/.f64 1 (fma.f64 x x (fma.f64 x x 1))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 x x 1))) (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2) (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 x)) (sqrt.f64 x) (neg.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (neg.f64 (fma.f64 x x 1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (fma.f64 x x 1))) 2) (cbrt.f64 (neg.f64 (fma.f64 x x 1))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2) (cbrt.f64 (fma.f64 x x -1)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2) (cbrt.f64 (fma.f64 x x -1)) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2) (cbrt.f64 (fma.f64 x x -1)) (*.f64 -1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -1)) 2) (cbrt.f64 (fma.f64 x x -1)) (*.f64 (neg.f64 (cbrt.f64 (pow.f64 x 4))) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (fma.f64 x x 1))) (sqrt.f64 (neg.f64 (fma.f64 x x 1))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x x -1)) (sqrt.f64 (fma.f64 x x -1)) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x x -1)) (sqrt.f64 (fma.f64 x x -1)) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x x -1)) (sqrt.f64 (fma.f64 x x -1)) (*.f64 -1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x x -1)) (sqrt.f64 (fma.f64 x x -1)) (*.f64 (neg.f64 (cbrt.f64 (pow.f64 x 4))) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (fma.f64 x x 1) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1) (-.f64 x 1) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1) (-.f64 x 1) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1) (-.f64 x 1) (*.f64 -1 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1) (-.f64 x 1) (*.f64 (neg.f64 (cbrt.f64 (pow.f64 x 4))) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (fma.f64 x x 1)) 2)) (cbrt.f64 (fma.f64 x x 1)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (neg.f64 (fma.f64 x x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 (neg.f64 (fma.f64 x x 1)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 0)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (neg.f64 (log.f64 (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x)))) (*.f64 2 (log.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2))) (log.f64 (*.f64 (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (/.f64 1 (-.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (neg.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)))) (log.f64 (/.f64 1 (neg.f64 (-.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (+.f64 x (hypot.f64 1 x)))) (log.f64 (sqrt.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 2 (log.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x))))) (log.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1))))) (log.f64 (*.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) (/.f64 1 (-.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 (-.f64 x (hypot.f64 1 x)))) (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 x (hypot.f64 1 x))) 2))) (log.f64 (/.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (cbrt.f64 (-.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 1 (sqrt.f64 (-.f64 x (hypot.f64 1 x))))) (log.f64 (/.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (sqrt.f64 (-.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2)) 1)) (log.f64 (/.f64 (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) 1)) (log.f64 (/.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2)) (pow.f64 (cbrt.f64 (-.f64 x (hypot.f64 1 x))) 2))) (log.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) (pow.f64 (cbrt.f64 (-.f64 x (hypot.f64 1 x))) 2))) (log.f64 (/.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))) (cbrt.f64 (-.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2)) (sqrt.f64 (-.f64 x (hypot.f64 1 x))))) (log.f64 (/.f64 (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (sqrt.f64 (-.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (-.f64 (*.f64 x x) (fma.f64 x x 1)))) (log.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (-.f64 (pow.f64 x 3) (pow.f64 (hypot.f64 1 x) 3)))) (log.f64 (fma.f64 x x (fma.f64 x (hypot.f64 1 x) (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (log.f64 (-.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (neg.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 (/.f64 1 (+.f64 x (hypot.f64 1 x))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (log.f64 (+.f64 x (hypot.f64 1 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (cbrt.f64 (pow.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 2))) (log.f64 (/.f64 (-.f64 x (hypot.f64 1 x)) (cbrt.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)))) (log.f64 (neg.f64 (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 (pow.f64 x 4) (pow.f64 (fma.f64 x x 1) 2))) (log.f64 (*.f64 (-.f64 x (hypot.f64 1 x)) (fma.f64 x x (fma.f64 x x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 (pow.f64 x 6) (pow.f64 (fma.f64 x x 1) 3))) (log.f64 (*.f64 (-.f64 x (hypot.f64 1 x)) (fma.f64 (fma.f64 x x 1) (fma.f64 x x (fma.f64 x x 1)) (pow.f64 x 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1))))) (log.f64 (/.f64 (-.f64 x (hypot.f64 1 x)) (hypot.f64 x (sqrt.f64 (neg.f64 (fma.f64 x x 1)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 -1) (log.f64 (neg.f64 (/.f64 1 (+.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 (neg.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))))) (log.f64 (neg.f64 (neg.f64 (-.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (*.f64 (-.f64 (pow.f64 x 6) (pow.f64 (fma.f64 x x 1) 3)) 1)) (log.f64 (*.f64 (fma.f64 (fma.f64 x x 1) (fma.f64 x x (fma.f64 x x 1)) (pow.f64 x 4)) (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (*.f64 (-.f64 (pow.f64 x 4) (pow.f64 (fma.f64 x x 1) 2)) 1)) (log.f64 (*.f64 (fma.f64 x x (fma.f64 x x 1)) (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 (*.f64 (*.f64 x x) (-.f64 x (hypot.f64 1 x))) (*.f64 (-.f64 x (hypot.f64 1 x)) (fma.f64 x x 1)))) (*.f64 2 (log.f64 (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (/.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (sqrt.f64 (-.f64 x (hypot.f64 1 x))))) (log.f64 (sqrt.f64 (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 x (hypot.f64 1 x))) 3) (pow.f64 (/.f64 (fma.f64 x x 1) (-.f64 x (hypot.f64 1 x))) 3))) (log.f64 (+.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 x (hypot.f64 1 x))) 2) (+.f64 (pow.f64 (/.f64 (fma.f64 x x 1) (-.f64 x (hypot.f64 1 x))) 2) (*.f64 (/.f64 (*.f64 x x) (-.f64 x (hypot.f64 1 x))) (/.f64 (fma.f64 x x 1) (-.f64 x (hypot.f64 1 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (+.f64 (pow.f64 x 3) (pow.f64 (hypot.f64 1 x) 3))) (log.f64 (fma.f64 x x (-.f64 (fma.f64 x x 1) (*.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 (pow.f64 (/.f64 (*.f64 x x) (-.f64 x (hypot.f64 1 x))) 2) (pow.f64 (/.f64 (fma.f64 x x 1) (-.f64 x (hypot.f64 1 x))) 2))) (log.f64 (+.f64 (/.f64 (*.f64 x x) (-.f64 x (hypot.f64 1 x))) (/.f64 (fma.f64 x x 1) (-.f64 x (hypot.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (/.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) 1)) (log.f64 (-.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (/.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (pow.f64 (cbrt.f64 (-.f64 x (hypot.f64 1 x))) 2))) (log.f64 (cbrt.f64 (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (*.f64 (-.f64 (pow.f64 x 6) (pow.f64 (fma.f64 x x 1) 3)) (/.f64 1 (-.f64 x (hypot.f64 1 x))))) (log.f64 (fma.f64 (fma.f64 x x 1) (fma.f64 x x (fma.f64 x x 1)) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (*.f64 (-.f64 (pow.f64 x 4) (pow.f64 (fma.f64 x x 1) 2)) (/.f64 1 (-.f64 x (hypot.f64 1 x))))) (log.f64 (fma.f64 x x (fma.f64 x x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (+.f64 x (hypot.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) (pow.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) 2) (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) (sqrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (log.f64 (sqrt.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3 (log.f64 (cbrt.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (neg.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (log.f64 (pow.f64 (+.f64 x (hypot.f64 1 x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) 3) (pow.f64 (log.f64 (-.f64 x (hypot.f64 1 x))) 3)) (+.f64 (pow.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) 2) (+.f64 (pow.f64 (log.f64 (-.f64 x (hypot.f64 1 x))) 2) (*.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (log.f64 (-.f64 x (hypot.f64 1 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) 2) (pow.f64 (log.f64 (-.f64 x (hypot.f64 1 x))) 2)) (log.f64 (*.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)) (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (neg.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 (/.f64 1 (+.f64 x (hypot.f64 1 x))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (+.f64 x (hypot.f64 1 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (+.f64 x (hypot.f64 1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log.f64 (+.f64 x (hypot.f64 1 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1))) (neg.f64 (log.f64 (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)))) 2) (cbrt.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)))) (neg.f64 (log.f64 (-.f64 x (hypot.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)))) (sqrt.f64 (log.f64 (-.f64 (*.f64 x x) (fma.f64 x x 1)))) (neg.f64 (log.f64 (-.f64 x (hypot.f64 1 x)))))))))"]],"rules":[["egg-rr",68],["egg-rr",123]],"stop":[["node limit",1]],"time":58.5009765625,"type":"rewrite"},{"count":[[215,214]],"egraph":[[4,5638,242,0.024435709],[3,1496,242,0.012010292],[2,461,242,0.0033502090000000003],[1,168,242,0.001095084],[0,59,255,0.000310834]],"inputs":[["-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) (+.f64 (*.f64 -5/112 (pow.f64 x 7)) x)))","(+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 x))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))"]],"method":["egg-herbie"],"outputs":[["-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","x","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) x)","(fma.f64 -1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) x))","(fma.f64 -1/6 (pow.f64 x 3) (fma.f64 3/40 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 (*.f64 3/40 (pow.f64 x 5)) (+.f64 (*.f64 -5/112 (pow.f64 x 7)) x)))","(fma.f64 -1/6 (pow.f64 x 3) (fma.f64 3/40 (pow.f64 x 5) (fma.f64 -5/112 (pow.f64 x 7) x)))","(fma.f64 3/40 (pow.f64 x 5) (fma.f64 -1/6 (pow.f64 x 3) (fma.f64 -5/112 (pow.f64 x 7) x)))","(+.f64 (log.f64 2) (*.f64 -1 (log.f64 (/.f64 1 x))))","(+.f64 (log.f64 2) (neg.f64 (neg.f64 (log.f64 x))))","(+.f64 (log.f64 2) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(fma.f64 -1 (neg.f64 (log.f64 x)) (+.f64 (log.f64 2) (/.f64 1/4 (*.f64 x x))))","(+.f64 (log.f64 2) (+.f64 (/.f64 1/4 (*.f64 x x)) (log.f64 x)))","(+.f64 (log.f64 2) (+.f64 (log.f64 x) (/.f64 1/4 (*.f64 x x))))","(+.f64 (log.f64 x) (+.f64 (log.f64 2) (/.f64 (/.f64 1/4 x) x)))","(-.f64 (log.f64 2) (-.f64 (/.f64 -1/4 (*.f64 x x)) (log.f64 x)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(-.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (+.f64 (log.f64 2) (/.f64 1/4 (*.f64 x x)))) (/.f64 3/32 (pow.f64 x 4)))","(+.f64 (+.f64 (log.f64 2) (/.f64 1/4 (*.f64 x x))) (+.f64 (log.f64 x) (/.f64 -3/32 (pow.f64 x 4))))","(+.f64 (log.f64 2) (-.f64 (+.f64 (log.f64 x) (/.f64 1/4 (*.f64 x x))) (/.f64 3/32 (pow.f64 x 4))))","(+.f64 (+.f64 (log.f64 x) (+.f64 (log.f64 2) (/.f64 (/.f64 1/4 x) x))) (/.f64 -3/32 (pow.f64 x 4)))","(+.f64 (log.f64 2) (+.f64 (/.f64 1/4 (*.f64 x x)) (+.f64 (log.f64 x) (/.f64 -3/32 (pow.f64 x 4)))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (log.f64 2) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))","(-.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (+.f64 (log.f64 2) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 5/96 (pow.f64 x 6))))) (/.f64 3/32 (pow.f64 x 4)))","(+.f64 (+.f64 (+.f64 (log.f64 2) (/.f64 1/4 (*.f64 x x))) (/.f64 5/96 (pow.f64 x 6))) (-.f64 (log.f64 x) (/.f64 3/32 (pow.f64 x 4))))","(+.f64 (+.f64 (log.f64 2) (/.f64 5/96 (pow.f64 x 6))) (-.f64 (+.f64 (log.f64 x) (/.f64 1/4 (*.f64 x x))) (/.f64 3/32 (pow.f64 x 4))))","(+.f64 (+.f64 (log.f64 2) (/.f64 (/.f64 1/4 x) x)) (+.f64 (+.f64 (log.f64 x) (/.f64 5/96 (pow.f64 x 6))) (/.f64 -3/32 (pow.f64 x 4))))","(+.f64 (log.f64 2) (+.f64 (log.f64 x) (+.f64 (/.f64 1/4 (*.f64 x x)) (+.f64 (/.f64 5/96 (pow.f64 x 6)) (/.f64 -3/32 (pow.f64 x 4))))))","(+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (log.f64 1/2)) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(+.f64 (log.f64 (/.f64 -1 x)) (-.f64 (log.f64 1/2) (/.f64 1/4 (*.f64 x x))))","(+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (/.f64 -1/4 (*.f64 x x))))","(+.f64 (log.f64 1/2) (-.f64 (log.f64 (/.f64 -1 x)) (/.f64 (/.f64 1/4 x) x)))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (/.f64 3/32 (pow.f64 x 4)) (log.f64 1/2))) (/.f64 1/4 (*.f64 x x)))","(+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (/.f64 3/32 (pow.f64 x 4)) (+.f64 (log.f64 1/2) (/.f64 -1/4 (*.f64 x x)))))","(+.f64 (/.f64 3/32 (pow.f64 x 4)) (+.f64 (log.f64 1/2) (-.f64 (log.f64 (/.f64 -1 x)) (/.f64 (/.f64 1/4 x) x))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (log.f64 1/2) (*.f64 3/32 (/.f64 1 (pow.f64 x 4))))) (+.f64 (*.f64 5/96 (/.f64 1 (pow.f64 x 6))) (*.f64 1/4 (/.f64 1 (pow.f64 x 2)))))","(-.f64 (+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (/.f64 3/32 (pow.f64 x 4)) (log.f64 1/2))) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 5/96 (pow.f64 x 6))))","(+.f64 (+.f64 (/.f64 3/32 (pow.f64 x 4)) (log.f64 1/2)) (-.f64 (log.f64 (/.f64 -1 x)) (+.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 5/96 (pow.f64 x 6)))))","(+.f64 (/.f64 3/32 (pow.f64 x 4)) (+.f64 (-.f64 (+.f64 (log.f64 1/2) (/.f64 -1/4 (*.f64 x x))) (/.f64 5/96 (pow.f64 x 6))) (log.f64 (/.f64 -1 x))))","(+.f64 (/.f64 3/32 (pow.f64 x 4)) (+.f64 (+.f64 (log.f64 1/2) (-.f64 (log.f64 (/.f64 -1 x)) (/.f64 (/.f64 1/4 x) x))) (/.f64 -5/96 (pow.f64 x 6))))","(+.f64 (log.f64 (/.f64 -1 x)) (+.f64 (+.f64 (log.f64 1/2) (/.f64 -1/4 (*.f64 x x))) (-.f64 (/.f64 3/32 (pow.f64 x 4)) (/.f64 5/96 (pow.f64 x 6)))))"]],"stop":[["node limit",1]],"time":40.5810546875,"type":"simplify"},{"compiler":[[5691,3648]],"time":66.266845703125,"type":"eval"},{"alts":[["(log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))","done",45.54171942793122],["(fma.f64 -1/6 (pow.f64 x 3) x)","done",31.350320188525853],["(log.f64 (/.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (-.f64 x (hypot.f64 1 x))))","done",61.33601007924711],["(log.f64 (+.f64 x (hypot.f64 1 x)))","done",48.17984498102247]],"compiler":[[11,9],[7,5],[17,10],[7,5]],"count":[[255,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[251,0],"picked":[1,1]}],"min-error":[0],"time":30.259033203125,"type":"prune"},{"accuracy":[0.18524384291297372],"baseline":[31.350320188525853],"branch":[["x",0.18524384291297372,3],["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))",7.435243842912974,4],["(+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1)))",7.435243842912974,4]],"compiler":[[2,1],[10,7],[9,6],[48,31]],"count":[[5,3]],"inputs":[["(log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))","(fma.f64 -1/6 (pow.f64 x 3) x)","(log.f64 (/.f64 (-.f64 (*.f64 x x) (+.f64 1 (*.f64 x x))) (-.f64 x (hypot.f64 1 x))))","(log.f64 (+.f64 x (hypot.f64 1 x)))","(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))"]],"link":["."],"name":["Hyperbolic arcsine"],"oracle":[63.7157124495922],"outputs":[["(log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x)))","(fma.f64 -1/6 (pow.f64 x 3) x)","(log.f64 (+.f64 x (hypot.f64 1 x)))"]],"time":23.7431640625,"times":[["x",9.89013671875],["(log.f64 (+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1))))",6.385009765625],["(+.f64 x (sqrt.f64 (+.f64 (*.f64 x x) 1)))",6.281982421875]],"type":"regimes"},{"bstep":[[4.397566801236614e-7,5.729204056266653e+21,10.02490234375],[-10640.765013896878,-0.8275226452988966,10.31591796875]],"compiler":[[12,9],[2,1]],"method":["binary-search","binary-search"],"time":20.43701171875,"type":"bsearch"},{"compiler":[[31,23]],"egraph":[[1,27,44,7.983400000000001e-5],[0,23,44,4.4417e-5]],"inputs":[["(if (<=.f64 x -2924911215302917/274877906944) (log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))) (if (<=.f64 x 4153384413668013/9444732965739290427392) (fma.f64 -1/6 (pow.f64 x 3) x) (log.f64 (+.f64 x (hypot.f64 1 x)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 x -2924911215302917/274877906944) (log.f64 (+.f64 (/.f64 1/8 (pow.f64 x 3)) (/.f64 -1/2 x))) (if (<=.f64 x 4153384413668013/9444732965739290427392) (fma.f64 -1/6 (pow.f64 x 3) x) (log.f64 (+.f64 x (hypot.f64 1 x)))))"]],"stop":[["done",1],["saturated",1]],"time":9.139892578125,"type":"simplify"},{"time":0.026123046875,"type":"soundness"},{"compiler":[[31,23]],"remove-preprocessing":[[]],"time":14.77880859375,"type":"end"}]
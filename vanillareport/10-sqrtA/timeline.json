[{"compiler":[[10,5]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.41796875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.086181640625,3],["body",256,"valid",250.124755859375,8256]],"time":257.68798828125,"type":"sample"},{"compiler":[[9,4]],"egraph":[[0,1,1,1.292e-6],[3,17,4,0.00020841799999999998],[2,14,4,0.000154459],[1,11,4,9.870899999999999e-5],[0,5,4,4.8084e-5]],"inputs":[["0"],["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))","(hypot.f64 x x)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.8330078125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[3,17,4,0.000203001],[2,14,4,0.000149126],[1,11,4,9.3667e-5],[0,5,4,4.3667e-5]],"inputs":[["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))","(hypot.f64 x x)"]],"stop":[["saturated",1]],"time":10.382080078125,"type":"simplify"},{"compiler":[[12,5]],"time":0.2578125,"type":"eval"},{"alts":[["(hypot.f64 x x)","next",0.11328125]],"compiler":[[4,2],[4,2]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.11328125],"time":0.72314453125,"type":"prune"},{"compiler":[[5,2]],"locations":[["(hypot.f64 x x)",0.11328125,true]],"time":1.4169921875,"type":"localize"},{"count":[[1,12]],"series":[["(hypot.f64 x x)","x","-inf",0.734130859375],["(hypot.f64 x x)","x","inf",0.598876953125],["(hypot.f64 x x)","x","0",0.5859375]],"time":1.962890625,"type":"series"},{"count":[[1,103]],"egraph":[[3,7879,4,0.051301],[2,696,4,0.01270575],[1,60,4,0.00097325],[0,3,4,9.5667e-5]],"inputs":[["(hypot.f64 x x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 0 0)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 0 0)) 2))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 0 0)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 0 0)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 0 0)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (/.f64 0 0)) (*.f64 (*.f64 x x) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 0 0) (*.f64 x x)) (*.f64 (/.f64 0 0) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 0 0)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 x 4) 0) (/.f64 (pow.f64 x 4) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (+.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (+.f64 x x) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 (+.f64 x x) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (+.f64 (pow.f64 (cbrt.f64 x) 5) (pow.f64 (cbrt.f64 x) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 (cbrt.f64 x) 2) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (+.f64 (*.f64 x (cbrt.f64 x)) (*.f64 x (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (pow.f64 (+.f64 x x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (+.f64 (pow.f64 x 3/2) (pow.f64 x 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 0 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 0 0) (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 0 0) (pow.f64 1 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 0 0) (pow.f64 1 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 0 (/.f64 1 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 x)) (+.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 3/2) (+.f64 (sqrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (*.f64 x x) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 x 6)) (/.f64 1 (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 5) (+.f64 (cbrt.f64 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 4 (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sqrt.f64 x)) (pow.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 0 0) x) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 0 0) 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 2)) (*.f64 x (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (*.f64 x (cbrt.f64 x))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 x 3/2)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 5)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 0 (pow.f64 x 4)) (*.f64 2 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 0 0)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 0 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 6)) (*.f64 2 (pow.f64 x 6))) (*.f64 (+.f64 0 (pow.f64 x 4)) (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 2 (pow.f64 x 6))) (cbrt.f64 (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 0) (sqrt.f64 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 2 (pow.f64 x 6))) (neg.f64 (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 0 (*.f64 2 (pow.f64 x 6))) (*.f64 0 (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 6)) 0) (*.f64 (+.f64 0 (pow.f64 x 4)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 1 (/.f64 0 0)) 3) 1) (+.f64 (*.f64 (+.f64 1 (/.f64 0 0)) (+.f64 1 (/.f64 0 0))) (+.f64 1 (+.f64 1 (/.f64 0 0)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 1 (/.f64 0 0)) (+.f64 1 (/.f64 0 0))) 1) (+.f64 (+.f64 1 (/.f64 0 0)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 6)) 1) (+.f64 0 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 6)) (/.f64 0 0)) (+.f64 0 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 0 (/.f64 0 0)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 0 0) (*.f64 2 (pow.f64 x 6))) (+.f64 0 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 5/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 5)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 0 0)) 2))) (cbrt.f64 (log.f64 (/.f64 0 0))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 0 0)))) (sqrt.f64 (log.f64 (/.f64 0 0))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 0 0)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 0 0)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 0 0)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 x (cbrt.f64 x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (pow.f64 x 3/2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3/2) (sqrt.f64 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 5) (cbrt.f64 x) (*.f64 x x))))))"]],"rules":[["egg-rr",103]],"stop":[["node limit",1]],"time":70.007080078125,"type":"rewrite"},{"count":[[115,105]],"egraph":[[9,121,80,0.001545832],[8,96,80,0.0013341660000000001],[7,84,80,0.0010110000000000002],[6,73,80,0.0007860000000000001],[5,51,80,0.0005970000000000001],[4,33,80,0.00038745800000000003],[3,29,80,0.000273916],[2,25,80,0.00018425],[1,12,80,0.00010329100000000001],[0,7,80,4.4375e-5]],"inputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))"]],"stop":[["saturated",1]],"time":14.169921875,"type":"simplify"},{"compiler":[[899,665]],"time":12.691162109375,"type":"eval"},{"alts":[["(/.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))","fresh",52.00843219706133],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","fresh",32.95150375976844],["(hypot.f64 x x)","done",0.11328125],["(*.f64 (sqrt.f64 2) (neg.f64 x))","next",30.724105796640497],["(*.f64 (sqrt.f64 2) x)","fresh",32.258410787368945]],"compiler":[[14,12],[8,5],[4,2],[6,5],[5,4],[14,12],[8,5],[6,5],[5,4]],"count":[[106,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[105,4],"picked":[1,1]}],"min-error":[0.0234375],"time":10.0439453125,"type":"prune"},{"compiler":[[12,8]],"locations":[["(*.f64 (sqrt.f64 2) (neg.f64 x))",0.42578125,true]],"time":3.2880859375,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (sqrt.f64 2) (neg.f64 x))","x","-inf",0.154052734375],["(*.f64 (sqrt.f64 2) (neg.f64 x))","x","inf",0.43994140625],["(*.f64 (sqrt.f64 2) (neg.f64 x))","x","0",0.5361328125]],"time":1.17578125,"type":"series"},{"count":[[1,13]],"egraph":[[2,1473,6,0.013704876],[1,125,6,0.002178293],[0,6,8,0.000181584]],"inputs":[["(*.f64 (sqrt.f64 2) (neg.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sqrt.f64 2) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 2) x)))))))"]],"rules":[["egg-rr",13]],"stop":[["node limit",1]],"time":30.666015625,"type":"rewrite"},{"count":[[25,15]],"egraph":[[9,121,96,0.0015335820000000001],[8,96,96,0.0013246240000000002],[7,84,96,0.001009541],[6,73,96,0.000792541],[5,51,96,0.000585666],[4,33,96,0.000386124],[3,29,96,0.000272624],[2,25,96,0.000184458],[1,12,96,0.000104666],[0,7,96,4.4833e-5]],"inputs":[["(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))"]],"stop":[["saturated",1]],"time":13.777099609375,"type":"simplify"},{"compiler":[[96,80]],"time":1.89208984375,"type":"eval"},{"alts":[["(/.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))","fresh",52.00843219706133],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","fresh",32.95150375976844],["(hypot.f64 x x)","done",0.11328125],["(*.f64 (sqrt.f64 2) (neg.f64 x))","done",30.724105796640497],["(*.f64 (sqrt.f64 2) x)","next",32.258410787368945]],"compiler":[[14,12],[8,5],[4,2],[6,5],[5,4],[14,12],[8,5],[5,4]],"count":[[20,5]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[15,0],"picked":[1,1]}],"min-error":[0.0234375],"time":3.3818359375,"type":"prune"},{"compiler":[[9,7]],"locations":[["(*.f64 (sqrt.f64 2) x)",0.42578125,true]],"time":2.422119140625,"type":"localize"},{"count":[[1,0]],"series":[["(*.f64 (sqrt.f64 2) x)","x","-inf",0.177978515625],["(*.f64 (sqrt.f64 2) x)","x","inf",0.141845703125],["(*.f64 (sqrt.f64 2) x)","x","0",0.161865234375]],"time":0.510986328125,"type":"series"},{"count":[[1,15]],"egraph":[[2,1075,6,0.013519831999999999],[1,100,6,0.0016313739999999999],[0,5,6,0.000154666]],"inputs":[["(*.f64 (sqrt.f64 2) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sqrt.f64 2) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 2) x)))))))"]],"rules":[["egg-rr",15]],"stop":[["node limit",1]],"time":29.531005859375,"type":"rewrite"},{"count":[[15,15]],"egraph":[[0,0,0,1.9959e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.036865234375,"type":"simplify"},{"compiler":[[119,99]],"time":2.2841796875,"type":"eval"},{"alts":[["(/.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))","fresh",52.00843219706133],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","next",32.95150375976844],["(hypot.f64 x x)","done",0.11328125],["(*.f64 (sqrt.f64 2) (neg.f64 x))","done",30.724105796640497],["(*.f64 (sqrt.f64 2) x)","done",32.258410787368945]],"compiler":[[14,12],[8,5],[4,2],[6,5],[5,4],[14,12],[8,5]],"count":[[20,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[15,0],"picked":[1,1]}],"min-error":[0.0234375],"time":2.976806640625,"type":"prune"},{"compiler":[[18,5]],"locations":[["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))",0.20150375976844204,true]],"time":3.773193359375,"type":"localize"},{"count":[[1,8]],"series":[["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","x","-inf",1.0048828125],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","x","inf",0.1630859375],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","x","0",0.18505859375]],"time":1.39697265625,"type":"series"},{"count":[[1,38]],"egraph":[[2,1820,4,0.013897333],[1,129,4,0.002512458],[0,6,9,0.000148541]],"inputs":[["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) 0) (/.f64 (*.f64 x x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x 0) (*.f64 2 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (pow.f64 x 3)) (fma.f64 x x 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 0 0)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 3)) (*.f64 2 (pow.f64 x 3))) (*.f64 (fma.f64 x x 0) (fma.f64 x x 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 2 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x x 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 0) (sqrt.f64 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 3))) (sqrt.f64 (fma.f64 x x 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 2 (pow.f64 x 3))) (neg.f64 (fma.f64 x x 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 0 (*.f64 2 (pow.f64 x 3))) (*.f64 0 (fma.f64 x x 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 3)) 0) (*.f64 (fma.f64 x x 0) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 x x)) (fma.f64 x x 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 0 (+.f64 x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 2 (pow.f64 x 3))) (fma.f64 x x 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x x) (*.f64 2 (pow.f64 x 3))) (fma.f64 x x 0))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 x) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) x)))))"]],"rules":[["egg-rr",38]],"stop":[["node limit",1]],"time":30.93798828125,"type":"rewrite"},{"count":[[46,39]],"egraph":[[1,6,48,5.8334e-5],[0,5,48,3.2042e-5]],"inputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)"]],"stop":[["saturated",1]],"time":10.764892578125,"type":"simplify"},{"compiler":[[297,171]],"time":4.2021484375,"type":"eval"},{"alts":[["(/.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))","fresh",52.00843219706133],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","done",32.95150375976844],["(hypot.f64 x x)","done",0.11328125],["(*.f64 (sqrt.f64 2) (neg.f64 x))","done",30.724105796640497],["(*.f64 (sqrt.f64 2) x)","done",32.258410787368945]],"compiler":[[14,12],[8,5],[4,2],[6,5],[5,4]],"count":[[44,5]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[39,0],"picked":[1,1]}],"min-error":[0.0234375],"time":5.535888671875,"type":"prune"},{"accuracy":[0.11328125],"baseline":[0.11328125],"branch":[["x",0.11328125,1],["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))",0.11328125,1],["(+.f64 (*.f64 x x) (*.f64 x x))",0.11328125,1],["(*.f64 x x)",0.11328125,1]],"compiler":[[2,1],[9,4],[8,3],[4,2],[41,27]],"count":[[6,1]],"inputs":[["(/.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))","(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 (sqrt.f64 2) x)","(hypot.f64 x x)","(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))"]],"link":["."],"name":["sqrt A"],"oracle":[63.872342154984885],"outputs":[["(hypot.f64 x x)"]],"time":13.802001953125,"times":[["x",3.883056640625],["(sqrt.f64 (+.f64 (*.f64 x x) (*.f64 x x)))",3.06005859375],["(+.f64 (*.f64 x x) (*.f64 x x))",2.8759765625],["(*.f64 x x)",2.85205078125]],"type":"regimes"},{"compiler":[[4,2]],"egraph":[[0,3,4,9.292e-6]],"inputs":[["(hypot.f64 x x)"]],"method":["egg-herbie"],"outputs":[["(hypot.f64 x x)"]],"stop":[["fuel",1],["saturated",1]],"time":7.93896484375,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[4,2]],"remove-preprocessing":[[]],"time":6.72900390625,"type":"end"}]
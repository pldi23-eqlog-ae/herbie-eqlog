[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09170725150033832,0.11024453863501549],[11,0.7687799381092191,0.12097552325576544,0.11024453863501549],[10,0.7258531395345926,0.17951206676661968,0.09463479369878769],[9,0.6712190322577953,0.23414617404341698,0.09463479369878769],[8,0.5931703075766563,0.34341438859701157,0.06341530382633209],[7,0.49951183795928955,0.43707285821437836,0.06341530382633209],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.906982421875,"type":"analyze"},{"outcomes":[["body",256,"invalid",4.978515625,164],["body",256,"valid",247.493408203125,8256]],"time":259.81787109375,"type":"sample"},{"compiler":[[7,5]],"egraph":[[1,2,2,4.916e-6],[0,2,2,4.25e-6],[3,20,14,0.000178875],[2,20,14,0.000135708],[1,14,14,8.6833e-5],[0,8,14,4.3875e-5]],"inputs":[["0","1"],["(*.f64 (*.f64 x 27) y)","(*.f64 (*.f64 y 27) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0"],["(*.f64 (*.f64 x 27) y)","(*.f64 x (*.f64 27 y))","(*.f64 (*.f64 y 27) x)","(*.f64 x (*.f64 27 y))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y)"]],"time":22.9140625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[3,19,7,0.000161292],[2,17,7,0.000118417],[1,10,7,7.254200000000001e-5],[0,6,7,3.3667e-5]],"inputs":[["(*.f64 (*.f64 x 27) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x 27) y)","(*.f64 x (*.f64 27 y))"]],"stop":[["saturated",1]],"time":10.258056640625,"type":"simplify"},{"compiler":[[12,8]],"time":0.280029296875,"type":"eval"},{"alts":[["(*.f64 x (*.f64 27 y))","fresh",0.484375],["(*.f64 (*.f64 x 27) y)","next",0.21875]],"compiler":[[7,5],[7,5],[7,5],[7,5]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0703125],"time":1.113037109375,"type":"prune"},{"compiler":[[13,8]],"locations":[["(*.f64 (*.f64 x 27) y)",0.21875,true]],"time":3.054931640625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (*.f64 x 27) y)","y","-inf",0.260986328125],["(*.f64 (*.f64 x 27) y)","y","inf",0.40185546875],["(*.f64 (*.f64 x 27) y)","y","0",0.589111328125],["(*.f64 (*.f64 x 27) y)","x","-inf",0.278076171875],["(*.f64 (*.f64 x 27) y)","x","inf",0.516845703125],["(*.f64 (*.f64 x 27) y)","x","0",0.4970703125]],"time":2.619873046875,"type":"series"},{"count":[[1,11]],"egraph":[[2,1392,7,0.014805292],[1,121,7,0.0019367920000000001],[0,6,7,0.000176417]],"inputs":[["(*.f64 (*.f64 x 27) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (*.f64 27 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 27 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (*.f64 27 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (*.f64 27 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (*.f64 27 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (*.f64 27 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (*.f64 x 27)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (*.f64 27 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (*.f64 27 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (*.f64 27 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (*.f64 27 y))))))))"]],"rules":[["egg-rr",11]],"stop":[["node limit",1]],"time":31.175048828125,"type":"rewrite"},{"count":[[35,12]],"egraph":[[3,19,168,0.000218751],[2,17,168,0.00016133399999999998],[1,10,168,0.00010133399999999999],[0,6,168,4.8709e-5]],"inputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))"]],"stop":[["saturated",1]],"time":11.873046875,"type":"simplify"},{"compiler":[[92,68]],"time":1.573974609375,"type":"eval"},{"alts":[["(*.f64 27 (*.f64 y x))","next",0.2590700316206538],["(*.f64 x (*.f64 27 y))","fresh",0.484375],["(*.f64 (*.f64 x 27) y)","done",0.21875],["(pow.f64 (sqrt.f64 (*.f64 x (*.f64 27 y))) 2)","fresh",29.46749882814754]],"compiler":[[7,5],[7,5],[7,5],[10,8],[7,5],[7,5],[10,8]],"count":[[14,4]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[12,2],"picked":[1,1]}],"min-error":[0.02734375],"time":2.775146484375,"type":"prune"},{"compiler":[[13,6]],"locations":[["(*.f64 27 (*.f64 y x))",0.2590700316206538,true]],"time":6.469970703125,"type":"localize"},{"count":[[1,0]],"series":[["(*.f64 27 (*.f64 y x))","x","-inf",0.147216796875],["(*.f64 27 (*.f64 y x))","x","inf",0.166015625],["(*.f64 27 (*.f64 y x))","x","0",0.137939453125],["(*.f64 27 (*.f64 y x))","y","-inf",0.14990234375],["(*.f64 27 (*.f64 y x))","y","inf",0.177001953125],["(*.f64 27 (*.f64 y x))","y","0",0.1650390625]],"time":0.996826171875,"type":"series"},{"count":[[1,11]],"egraph":[[2,1394,7,0.014797125000000001],[1,121,7,0.001954333],[0,6,7,0.000173083]],"inputs":[["(*.f64 27 (*.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 27 (*.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 27 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (*.f64 y x)) 3) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (*.f64 y x) 2) 729))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 27) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 27 (*.f64 y x))))))))"]],"rules":[["egg-rr",11]],"stop":[["node limit",1]],"time":31.078125,"type":"rewrite"},{"count":[[11,11]],"egraph":[[0,0,0,2.0083e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.093994140625,"type":"simplify"},{"compiler":[[87,55]],"time":1.384033203125,"type":"eval"},{"alts":[["(*.f64 27 (*.f64 y x))","done",0.2590700316206538],["(*.f64 x (*.f64 27 y))","next",0.484375],["(*.f64 (*.f64 x 27) y)","done",0.21875],["(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)","fresh",28.97531132814754]],"compiler":[[7,5],[7,5],[7,5],[10,8],[7,5],[10,8]],"count":[[15,4]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[11,1],"picked":[1,1]}],"min-error":[0.0234375],"time":2.77392578125,"type":"prune"},{"compiler":[[13,8]],"locations":[["(*.f64 x (*.f64 27 y))",0.4740126458719348,true]],"time":3.10107421875,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 x (*.f64 27 y))","y","-inf",0.173828125],["(*.f64 x (*.f64 27 y))","y","inf",0.14599609375],["(*.f64 x (*.f64 27 y))","y","0",0.14208984375],["(*.f64 x (*.f64 27 y))","x","-inf",0.1689453125],["(*.f64 x (*.f64 27 y))","x","inf",0.15087890625],["(*.f64 x (*.f64 27 y))","x","0",0.197998046875]],"time":1.048828125,"type":"series"},{"count":[[1,11]],"egraph":[[2,1394,7,0.014626708],[1,121,7,0.001957874],[0,6,7,0.000175208]],"inputs":[["(*.f64 x (*.f64 27 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (*.f64 27 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 27 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (*.f64 27 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (*.f64 27 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (*.f64 27 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (*.f64 27 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (*.f64 27 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (*.f64 27 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (*.f64 27 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (*.f64 27 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (*.f64 27 y))))))))"]],"rules":[["egg-rr",11]],"stop":[["node limit",1]],"time":30.8310546875,"type":"rewrite"},{"count":[[35,12]],"egraph":[[3,19,168,0.000219209],[2,17,168,0.000161834],[1,10,168,0.000101084],[0,6,168,4.7584e-5]],"inputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))","(*.f64 27 (*.f64 y x))"]],"stop":[["saturated",1]],"time":12.032958984375,"type":"simplify"},{"compiler":[[92,68]],"time":1.543212890625,"type":"eval"},{"alts":[["(*.f64 27 (*.f64 y x))","done",0.2590700316206538],["(*.f64 x (*.f64 27 y))","done",0.484375],["(*.f64 (*.f64 x 27) y)","done",0.21875],["(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)","next",28.97531132814754]],"compiler":[[7,5],[7,5],[7,5],[10,8],[10,8]],"count":[[16,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[12,0],"picked":[1,1]}],"min-error":[0.0234375],"time":2.46484375,"type":"prune"},{"compiler":[[28,15]],"locations":[["(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)",0.17806625976844204,true],["(*.f64 27 (*.f64 y x))",0.2590700316206538,false],["(sqrt.f64 (*.f64 27 (*.f64 y x)))",7.801393735179436,true]],"time":5.839111328125,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)","x","-inf",0.809814453125],["(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)","x","inf",0.56005859375],["(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)","x","0",1.39501953125],["(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)","y","-inf",0.661865234375],["(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)","y","inf",0.5361328125],["(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)","y","0",0.762939453125],["(sqrt.f64 (*.f64 27 (*.f64 y x)))","x","-inf",0.47998046875],["(sqrt.f64 (*.f64 27 (*.f64 y x)))","x","inf",0.383056640625],["(sqrt.f64 (*.f64 27 (*.f64 y x)))","x","0",0.671875],["(sqrt.f64 (*.f64 27 (*.f64 y x)))","y","-inf",0.470947265625],["(sqrt.f64 (*.f64 27 (*.f64 y x)))","y","inf",0.697021484375],["(sqrt.f64 (*.f64 27 (*.f64 y x)))","y","0",0.77197265625]],"time":8.345947265625,"type":"series"},{"count":[[2,56]],"egraph":[[2,1844,16,0.017855917],[1,187,16,0.002847417],[0,9,16,0.000270542]],"inputs":[["(sqrt.f64 (*.f64 27 (*.f64 y x)))","(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (*.f64 27 (*.f64 y x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) (cbrt.f64 (sqrt.f64 (*.f64 27 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (*.f64 27 (*.f64 y x)))) (cbrt.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y x)) (sqrt.f64 27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 27) (sqrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 1/4) (pow.f64 (*.f64 27 (*.f64 y x)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 27 y)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) 2)) (sqrt.f64 (cbrt.f64 (*.f64 27 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) 2) 1/2) (pow.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 27 y) 1/2) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 27 (*.f64 y x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (*.f64 27 (*.f64 y x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (*.f64 27 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (*.f64 27 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (*.f64 27 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (*.f64 27 (*.f64 y x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 27 (*.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 27 (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x 27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 27 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) 27)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) (sqrt.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 27 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (*.f64 (cbrt.f64 (*.f64 y x)) 27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) (pow.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 27 (*.f64 y x)))) (sqrt.f64 (*.f64 27 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 27 (*.f64 y x))) 2) (cbrt.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (sqrt.f64 (*.f64 y x)) 27))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 27) (*.f64 (sqrt.f64 (*.f64 y x)) (sqrt.f64 (*.f64 27 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 1/4) (*.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 1/4) (sqrt.f64 (*.f64 27 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) (pow.f64 (*.f64 27 (*.f64 y x)) 1/4)) (pow.f64 (*.f64 27 (*.f64 y x)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 27) 2) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 (pow.f64 (cbrt.f64 (*.f64 y x)) 2)) (cbrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 27 (sqrt.f64 (*.f64 y x))) (sqrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) (cbrt.f64 (*.f64 27 (*.f64 y x)))) (cbrt.f64 (sqrt.f64 (*.f64 27 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) (sqrt.f64 27)) (sqrt.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 27 y) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 27 y) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 27 y) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 27) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 27 (*.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 27 (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 27 (*.f64 y x))))))))"]],"rules":[["egg-rr",32],["egg-rr",24]],"stop":[["node limit",1]],"time":37.87109375,"type":"rewrite"},{"count":[[56,56]],"egraph":[[0,0,0,1.9542e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.365966796875,"type":"simplify"},{"compiler":[[738,464]],"time":10.06103515625,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (*.f64 (cbrt.f64 (*.f64 y x)) 27))","fresh",0.7263578855998944],["(*.f64 27 (*.f64 y x))","done",0.2590700316206538],["(*.f64 x (*.f64 27 y))","done",0.484375],["(*.f64 (*.f64 x 27) y)","done",0.21875],["(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)","done",28.97531132814754]],"compiler":[[15,9],[7,5],[7,5],[7,5],[10,8]],"count":[[71,5]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[67,1],"picked":[1,1]}],"min-error":[0.0078125],"time":10.3818359375,"type":"prune"},{"accuracy":[0.21875],"baseline":[0.21875],"branch":[["x",0.21875,1],["y",0.21875,1],["(*.f64 (*.f64 x 27) y)",0.21875,1],["(*.f64 x 27)",0.21875,1]],"compiler":[[3,2],[3,2],[7,5],[5,4],[46,28]],"count":[[6,1]],"inputs":[["(*.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (*.f64 (cbrt.f64 (*.f64 y x)) 27))","(pow.f64 (sqrt.f64 (*.f64 27 (*.f64 y x))) 2)","(*.f64 27 (*.f64 y x))","(pow.f64 (sqrt.f64 (*.f64 x (*.f64 27 y))) 2)","(*.f64 x (*.f64 27 y))","(*.f64 (*.f64 x 27) y)"]],"link":["."],"name":["Diagrams.Solve.Polynomial:cubForm  from diagrams-solve-0.1, F"],"oracle":[29.69281651606327],"outputs":[["(*.f64 (*.f64 x 27) y)"]],"time":16.9091796875,"times":[["x",4.006103515625],["y",3.90380859375],["(*.f64 (*.f64 x 27) y)",3.912841796875],["(*.f64 x 27)",3.968994140625]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[1,8,7,2.4582999999999998e-5],[0,6,7,1.4291e-5]],"inputs":[["(*.f64 (*.f64 x 27) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x 27) y)"]],"stop":[["fuel",1],["saturated",1]],"time":7.9619140625,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[7,5],[7,5],[7,5]],"remove-preprocessing":[[]],"time":15.610107421875,"type":"end"}]
[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.6887799953110516,0.09170725150033832,0.21951275318861008],[11,0.6595117235556245,0.12097552325576544,0.21951275318861008],[10,0.6321946699172258,0.17951206676661968,0.18829326331615448],[9,0.5775605626404285,0.23414617404341698,0.18829326331615448],[8,0.5307313278317451,0.34341438859701157,0.1258542835712433],[7,0.43707285821437836,0.43707285821437836,0.1258542835712433],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.008056640625,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.663330078125,347],["body",256,"valid",275.03271484375,8256]],"time":294.180908203125,"type":"sample"},{"compiler":[[9,6]],"egraph":[[0,2,2,1.75e-6],[12,1851,20,0.03425004],[11,1851,20,0.029351332],[10,1851,20,0.025329499000000002],[9,1779,20,0.021619582000000002],[8,1609,20,0.017592207000000002],[7,1291,20,0.012555999000000002],[6,795,20,0.007346374000000001],[5,497,20,0.0043558320000000005],[4,345,20,0.002495207],[3,150,20,0.001111124],[2,66,20,0.000421916],[1,23,20,0.00015587499999999998],[0,10,20,6.0416e-5]],"inputs":[["0","1"],["(*.f64 (*.f64 x y) (-.f64 1 y))","(*.f64 (*.f64 y x) (-.f64 1 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 x y) (-.f64 1 y))","(*.f64 (-.f64 1 y) (*.f64 x y))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 (*.f64 y x) (-.f64 1 x))","(*.f64 y (*.f64 x (-.f64 1 x)))","(*.f64 x (*.f64 y (-.f64 1 x)))","(*.f64 x (fma.f64 y (neg.f64 x) y))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":57.51708984375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[10,1441,10,0.0168795],[9,1405,10,0.014144792],[8,1327,10,0.011322208],[7,694,10,0.008363083],[6,451,10,0.0041590410000000005],[5,292,10,0.002617833],[4,194,10,0.001547208],[3,85,10,0.000670791],[2,38,10,0.00026741600000000003],[1,15,10,0.00010799900000000001],[0,7,10,4.5541e-5]],"inputs":[["(*.f64 (*.f64 x y) (-.f64 1 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x y) (-.f64 1 y))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 x (fma.f64 y (neg.f64 y) y))"]],"stop":[["saturated",1]],"time":27.2919921875,"type":"simplify"},{"compiler":[[16,9]],"time":0.322021484375,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 y (neg.f64 y) y))","fresh",4.32421875],["(*.f64 (*.f64 x y) (-.f64 1 y))","next",0.13671875]],"compiler":[[9,5],[9,6],[9,5],[9,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.05078125],"time":1.1650390625,"type":"prune"},{"compiler":[[18,9]],"locations":[["(*.f64 (*.f64 x y) (-.f64 1 y))",0.13671875,true]],"time":4.032958984375,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (*.f64 x y) (-.f64 1 y))","y","-inf",0.409912109375],["(*.f64 (*.f64 x y) (-.f64 1 y))","y","inf",0.448974609375],["(*.f64 (*.f64 x y) (-.f64 1 y))","y","0",0.593017578125],["(*.f64 (*.f64 x y) (-.f64 1 y))","x","-inf",0.315185546875],["(*.f64 (*.f64 x y) (-.f64 1 y))","x","inf",0.763916015625],["(*.f64 (*.f64 x y) (-.f64 1 y))","x","0",0.56201171875]],"time":3.176025390625,"type":"series"},{"count":[[1,19]],"egraph":[[2,1837,10,0.018069375999999998],[1,144,10,0.002395959],[0,7,10,0.000184417]],"inputs":[["(*.f64 (*.f64 x y) (-.f64 1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (neg.f64 y) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (*.f64 x y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (*.f64 x y) (-.f64 1 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (+.f64 1 (fma.f64 y y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 y y)) (*.f64 x y)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (-.f64 1 (pow.f64 y 3))) (+.f64 1 (fma.f64 y y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (-.f64 1 (*.f64 y y))) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x y) (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 x y) (-.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (*.f64 x y) (-.f64 1 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 x) y) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 x y) (-.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (-.f64 1 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (-.f64 1 y) 3) (pow.f64 (*.f64 x y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (*.f64 x y) (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (*.f64 x y) (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (*.f64 x y) (-.f64 1 y))))))))"]],"rules":[["egg-rr",19]],"stop":[["node limit",1]],"time":34.89501953125,"type":"rewrite"},{"count":[[43,25]],"egraph":[[8,7908,232,0.051597959],[7,6093,232,0.038939417],[6,3938,232,0.023428709],[5,1938,232,0.012688917000000001],[4,589,232,0.005311751],[3,189,232,0.0016757509999999998],[2,83,232,0.0006413339999999999],[1,34,232,0.000259084],[0,14,232,9.3792e-5]],"inputs":[["(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(neg.f64 (*.f64 x (*.f64 y y)))","(*.f64 x (*.f64 (neg.f64 y) y))","(*.f64 x (neg.f64 (*.f64 y y)))","(*.f64 y (*.f64 y (neg.f64 x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(neg.f64 (*.f64 x (*.f64 y y)))","(*.f64 x (*.f64 (neg.f64 y) y))","(*.f64 x (neg.f64 (*.f64 y y)))","(*.f64 y (*.f64 y (neg.f64 x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 y (fma.f64 y (neg.f64 x) x))"]],"stop":[["node limit",1]],"time":67.2080078125,"type":"simplify"},{"compiler":[[252,139]],"time":3.2060546875,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 3)","next",0.5984727539794927],["(*.f64 x (fma.f64 y (neg.f64 y) y))","fresh",4.32421875],["(/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (+.f64 1 (fma.f64 y y y)))","fresh",11.828125],["(*.f64 (*.f64 x y) (-.f64 1 y))","done",0.13671875]],"compiler":[[12,9],[9,5],[18,12],[9,6],[12,9],[9,5],[18,12]],"count":[[27,4]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[25,2],"picked":[1,1]}],"min-error":[0.0234375],"time":4.72802734375,"type":"prune"},{"compiler":[[37,20]],"locations":[["(*.f64 (*.f64 x y) (-.f64 1 y))",0.13671875,false],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 3)",0.5746651856003985,true],["(cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y)))",10.71812793213229,true]],"time":8.43994140625,"type":"localize"},{"count":[[2,0]],"series":[["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 3)","y","-inf",0.510009765625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 3)","y","inf",0.468994140625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 3)","y","0",0.3740234375],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 3)","x","-inf",0.794189453125],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 3)","x","inf",0.468994140625],["(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 3)","x","0",0.60693359375],["(cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y)))","y","-inf",0.3720703125],["(cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y)))","y","inf",0.279052734375],["(cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y)))","y","0",0.2880859375],["(cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y)))","x","-inf",0.491943359375],["(cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y)))","x","inf",0.299072265625],["(cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y)))","x","0",0.794921875]],"time":5.892822265625,"type":"series"},{"count":[[2,68]],"egraph":[[2,2338,22,0.0214885],[1,212,22,0.00335775],[0,10,22,0.000292667]],"inputs":[["(cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y)))","(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))) (pow.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))) 2) (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (pow.f64 (*.f64 y (-.f64 1 y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 1/6) (pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 1/3) (pow.f64 (sqrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (neg.f64 y) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (*.f64 x y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (*.f64 x (-.f64 1 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x y) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 y (*.f64 x (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2) (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (*.f64 y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (*.f64 (cbrt.f64 (-.f64 1 y)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x y)) (*.f64 (cbrt.f64 (-.f64 1 y)) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 (cbrt.f64 (*.f64 x y)) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 1/6) (*.f64 (pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 1/6) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (*.f64 y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 y)) (*.f64 (sqrt.f64 (-.f64 1 y)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) (sqrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x y)) (*.f64 (sqrt.f64 (*.f64 x y)) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (-.f64 1 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))) 2) 3) (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 1/6) 3) (pow.f64 (pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x y) (sqrt.f64 (-.f64 1 y))) (sqrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) (pow.f64 (cbrt.f64 (*.f64 x y)) 2)) (cbrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 y) (sqrt.f64 (*.f64 x y))) (sqrt.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2) 1) (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2) (cbrt.f64 (*.f64 x y))) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (-.f64 1 y)))) 2) (pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 1/6)) (pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (+.f64 1 (fma.f64 y y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 y y)) (*.f64 x y)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (-.f64 1 (pow.f64 y 3))) (+.f64 1 (fma.f64 y y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x y) (-.f64 1 (*.f64 y y))) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 x) y) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 x (-.f64 1 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (-.f64 1 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (-.f64 1 y) 3) (pow.f64 (*.f64 x y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (*.f64 x (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (*.f64 x (-.f64 1 y)))))))))"]],"rules":[["egg-rr",45],["egg-rr",23]],"stop":[["node limit",1]],"time":43.71923828125,"type":"rewrite"},{"count":[[68,68]],"egraph":[[0,0,0,2.0334e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.450927734375,"type":"simplify"},{"compiler":[[1322,857]],"time":16.282958984375,"type":"eval"},{"alts":[["(/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (+.f64 1 (fma.f64 y y y)))","fresh",11.828125],["(*.f64 (*.f64 x y) (-.f64 1 y))","done",0.13671875],["(*.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (*.f64 y (-.f64 1 y))))","fresh",4.827984033284818],["(*.f64 (*.f64 (*.f64 x y) (sqrt.f64 (-.f64 1 y))) (sqrt.f64 (-.f64 1 y)))","fresh",10.350605029305326],["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))","next",0.3145676758319564],["(*.f64 (*.f64 y (-.f64 1 y)) x)","fresh",4.31640625]],"compiler":[[18,12],[9,6],[15,10],[15,11],[17,13],[9,6],[18,12],[15,10],[15,11],[17,13],[9,6]],"count":[[97,6]],"kept":[{"done":[1,1],"fresh":[2,0],"new":[93,5],"picked":[1,0]}],"min-error":[0],"time":19.298095703125,"type":"prune"},{"compiler":[[47,31]],"locations":[["(cbrt.f64 (-.f64 1 y))",0.03515625,true],["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))",0.140625,true],["(*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))",0.14681625976844204,true],["(pow.f64 (cbrt.f64 (-.f64 1 y)) 2)",0.22722626953688405,true]],"time":11.663818359375,"type":"localize"},{"count":[[4,48]],"series":[["(cbrt.f64 (-.f64 1 y))","y","-inf",0.223876953125],["(cbrt.f64 (-.f64 1 y))","y","inf",0.18798828125],["(cbrt.f64 (-.f64 1 y))","y","0",0.173828125],["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))","y","-inf",0.279052734375],["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))","y","inf",0.236083984375],["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))","y","0",0.60693359375],["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))","x","-inf",0.22509765625],["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))","x","inf",0.277099609375],["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))","x","0",1.093994140625],["(*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))","y","-inf",0.329833984375],["(*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))","y","inf",0.35302734375],["(*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))","y","0",0.35107421875],["(*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))","x","-inf",0.497802734375],["(*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))","x","inf",0.4580078125],["(*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))","x","0",2.51904296875],["(pow.f64 (cbrt.f64 (-.f64 1 y)) 2)","y","-inf",0.3291015625],["(pow.f64 (cbrt.f64 (-.f64 1 y)) 2)","y","inf",0.346923828125],["(pow.f64 (cbrt.f64 (-.f64 1 y)) 2)","y","0",0.3291015625]],"time":9.052001953125,"type":"series"},{"count":[[4,153]],"egraph":[[2,2699,40,0.024892834],[1,228,40,0.003905],[0,11,40,0.000311458]],"inputs":[["(pow.f64 (cbrt.f64 (-.f64 1 y)) 2)","(*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))","(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))","(cbrt.f64 (-.f64 1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 y) 1/6) (sqrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 y)) (pow.f64 (-.f64 1 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 5) (cbrt.f64 (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log1p.f64 (neg.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log1p.f64 (neg.f64 y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log1p.f64 (neg.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 y)) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 y)) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 1/3 (log1p.f64 (neg.f64 y))) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log1p.f64 (neg.f64 y))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (*.f64 x (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 y) x) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 y) x) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 y) x) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))) (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 y) x) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (*.f64 x (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 x (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (+.f64 (log.f64 (*.f64 y x)) (*.f64 2/3 (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 (-.f64 1 y)) (sqrt.f64 (*.f64 y x))) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (-.f64 1 y) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 x (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (-.f64 1 y)) (sqrt.f64 (*.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (log.f64 (*.f64 y x)) (*.f64 2/3 (log1p.f64 (neg.f64 y))))) 2)) (cbrt.f64 (+.f64 (log.f64 (*.f64 y x)) (*.f64 2/3 (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (+.f64 (log.f64 (*.f64 y x)) (*.f64 2/3 (log1p.f64 (neg.f64 y)))))) (sqrt.f64 (+.f64 (log.f64 (*.f64 y x)) (*.f64 2/3 (log1p.f64 (neg.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (-.f64 1 y)) (sqrt.f64 (*.f64 y x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 y) x) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (*.f64 x (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (-.f64 1 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (*.f64 x (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (*.f64 x (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (*.f64 y x)) (*.f64 2/3 (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log.f64 (*.f64 y x)) (*.f64 2/3 (log1p.f64 (neg.f64 y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 (-.f64 1 y) 2))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (+.f64 (log.f64 (*.f64 y x)) (*.f64 2/3 (log1p.f64 (neg.f64 y))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 (-.f64 1 y)) (sqrt.f64 (*.f64 y x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (+.f64 (log.f64 (*.f64 y x)) (*.f64 2/3 (log1p.f64 (neg.f64 y)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (-.f64 1 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 y (-.f64 1 y)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 y (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 y (-.f64 1 y))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (*.f64 y (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (-.f64 1 y) (*.f64 y x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) (-.f64 1 (pow.f64 y 3))) (+.f64 1 (fma.f64 y y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 y x) (-.f64 1 (*.f64 y y))) (+.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 y) (*.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 (-.f64 1 y) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 y) (*.f64 y x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 y) (*.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 y) (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (-.f64 1 y) (*.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (-.f64 1 y)) (cbrt.f64 (*.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (-.f64 1 y) 3) (pow.f64 (*.f64 y x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (-.f64 1 y)) (sqrt.f64 (*.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (-.f64 1 y) (*.f64 y x)))) 2)) (cbrt.f64 (log.f64 (*.f64 (-.f64 1 y) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (-.f64 1 y) (*.f64 y x))))) (sqrt.f64 (log.f64 (*.f64 (-.f64 1 y) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (-.f64 1 y) (*.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (*.f64 y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 1 y) (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 y) (*.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (-.f64 1 y) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (-.f64 1 y) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (-.f64 1 y) (*.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (-.f64 1 y) (*.f64 y x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (-.f64 1 y) (*.f64 y x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (-.f64 1 y) (*.f64 y x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (-.f64 1 y) (*.f64 y x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (-.f64 1 y) (*.f64 y x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y x) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 1 (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 1 (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) y) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) y) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y x)) (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (cbrt.f64 (*.f64 y x)) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (cbrt.f64 (*.f64 y x)) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y x)) (sqrt.f64 (*.f64 y x)) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y x)) (sqrt.f64 (*.f64 y x)) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 (*.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (*.f64 (neg.f64 y) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (*.f64 (*.f64 y x) (neg.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (-.f64 1 y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (-.f64 1 y))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (-.f64 1 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2) (cbrt.f64 (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (-.f64 1 y) 1/6) (pow.f64 (-.f64 1 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 4)) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 1 (pow.f64 y 3))) (cbrt.f64 (+.f64 1 (fma.f64 y y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 1 (*.f64 y y))) (cbrt.f64 (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 1/3 (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 y) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 y) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 y)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/3) (log1p.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 (log1p.f64 (neg.f64 y)))) 2)) (cbrt.f64 (*.f64 1/3 (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 1/3 (log1p.f64 (neg.f64 y))))) (sqrt.f64 (*.f64 1/3 (log1p.f64 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 1/3 (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (log1p.f64 (neg.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log1p.f64 (neg.f64 y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (-.f64 1 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log1p.f64 (neg.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 y)) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 (neg.f64 y)) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 1/3 (log1p.f64 (neg.f64 y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log1p.f64 (neg.f64 y))) 1) 1/2))))))"]],"rules":[["egg-rr",41],["egg-rr",61],["egg-rr",24],["egg-rr",27]],"stop":[["node limit",1]],"time":52.3310546875,"type":"rewrite"},{"count":[[201,180]],"egraph":[[5,3691,544,0.025917334],[4,2256,544,0.013935459],[3,1341,544,0.007289584],[2,424,549,0.003191084],[1,155,565,0.001052375],[0,56,572,0.000288]],"inputs":[["1","(+.f64 1 (*.f64 -2/3 y))","(+.f64 1 (+.f64 (*.f64 -2/3 y) (*.f64 -1/9 (pow.f64 y 2))))","(+.f64 1 (+.f64 (*.f64 -2/3 y) (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (*.f64 -4/81 (pow.f64 y 3)))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 y 2) x)) (*.f64 y x))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 y x) (*.f64 -1/9 (*.f64 (pow.f64 y 3) x))))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 y x) (+.f64 (*.f64 -4/81 (*.f64 (pow.f64 y 4) x)) (*.f64 -1/9 (*.f64 (pow.f64 y 3) x)))))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","1","(+.f64 (*.f64 -1/3 y) 1)","(+.f64 (*.f64 -1/3 y) (+.f64 1 (*.f64 -1/9 (pow.f64 y 2))))","(+.f64 (*.f64 -1/3 y) (+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (*.f64 -5/81 (pow.f64 y 3)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -2/3 y))","(fma.f64 -2/3 y 1)","(+.f64 1 (+.f64 (*.f64 -2/3 y) (*.f64 -1/9 (pow.f64 y 2))))","(+.f64 1 (fma.f64 -2/3 y (*.f64 -1/9 (*.f64 y y))))","(+.f64 (fma.f64 -2/3 y 1) (*.f64 y (*.f64 y -1/9)))","(fma.f64 -2/3 y (fma.f64 y (*.f64 y -1/9) 1))","(+.f64 1 (+.f64 (*.f64 -2/3 y) (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (*.f64 -4/81 (pow.f64 y 3)))))","(+.f64 1 (fma.f64 -2/3 y (fma.f64 -1/9 (*.f64 y y) (*.f64 -4/81 (pow.f64 y 3)))))","(+.f64 (fma.f64 -2/3 y 1) (fma.f64 -4/81 (pow.f64 y 3) (*.f64 y (*.f64 y -1/9))))","(+.f64 1 (fma.f64 -4/81 (pow.f64 y 3) (*.f64 y (+.f64 -2/3 (*.f64 y -1/9)))))","(+.f64 1 (*.f64 y (+.f64 (*.f64 y (+.f64 -1/9 (*.f64 y -4/81))) -2/3)))","(+.f64 1 (*.f64 y (+.f64 -2/3 (*.f64 y (+.f64 -1/9 (*.f64 y -4/81))))))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (-.f64 1 y) 2)) 1/3) (*.f64 y x))","(*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) (*.f64 y x))","(*.f64 y (*.f64 x (cbrt.f64 (pow.f64 (-.f64 1 y) 2))))","(*.f64 y (*.f64 (cbrt.f64 (pow.f64 (-.f64 1 y) 2)) x))","(*.f64 y x)","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 y 2) x)) (*.f64 y x))","(fma.f64 -2/3 (*.f64 (*.f64 y y) x) (*.f64 y x))","(*.f64 x (+.f64 y (*.f64 (*.f64 -2/3 y) y)))","(*.f64 x (fma.f64 -2/3 (*.f64 y y) y))","(*.f64 (fma.f64 -2/3 y 1) (*.f64 y x))","(*.f64 y (*.f64 (fma.f64 -2/3 y 1) x))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 y x) (*.f64 -1/9 (*.f64 (pow.f64 y 3) x))))","(fma.f64 -2/3 (*.f64 (*.f64 y y) x) (fma.f64 y x (*.f64 -1/9 (*.f64 (pow.f64 y 3) x))))","(fma.f64 -2/3 (*.f64 y (*.f64 y x)) (*.f64 x (+.f64 y (*.f64 -1/9 (pow.f64 y 3)))))","(*.f64 x (+.f64 (*.f64 -2/3 (*.f64 y y)) (fma.f64 -1/9 (pow.f64 y 3) y)))","(*.f64 x (*.f64 y (fma.f64 -2/3 y (fma.f64 y (*.f64 y -1/9) 1))))","(*.f64 (*.f64 y x) (fma.f64 -2/3 y (fma.f64 y (*.f64 y -1/9) 1)))","(+.f64 (*.f64 -2/3 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 y x) (+.f64 (*.f64 -4/81 (*.f64 (pow.f64 y 4) x)) (*.f64 -1/9 (*.f64 (pow.f64 y 3) x)))))","(fma.f64 -2/3 (*.f64 (*.f64 y y) x) (fma.f64 y x (fma.f64 -4/81 (*.f64 x (pow.f64 y 4)) (*.f64 -1/9 (*.f64 (pow.f64 y 3) x)))))","(fma.f64 -2/3 (*.f64 y (*.f64 y x)) (fma.f64 y x (*.f64 x (+.f64 (*.f64 -1/9 (pow.f64 y 3)) (*.f64 -4/81 (pow.f64 y 4))))))","(*.f64 x (+.f64 (fma.f64 -2/3 (*.f64 y y) y) (fma.f64 -1/9 (pow.f64 y 3) (*.f64 -4/81 (pow.f64 y 4)))))","(*.f64 x (+.f64 y (*.f64 (*.f64 y y) (+.f64 -2/3 (*.f64 y (+.f64 -1/9 (*.f64 y -4/81)))))))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(neg.f64 (*.f64 (*.f64 y y) x))","(*.f64 (*.f64 y y) (neg.f64 x))","(*.f64 y (*.f64 x (neg.f64 y)))","(*.f64 y (neg.f64 (*.f64 y x)))","(*.f64 y (*.f64 y (neg.f64 x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(neg.f64 (*.f64 (*.f64 y y) x))","(*.f64 (*.f64 y y) (neg.f64 x))","(*.f64 y (*.f64 x (neg.f64 y)))","(*.f64 y (neg.f64 (*.f64 y x)))","(*.f64 y (*.f64 y (neg.f64 x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (-.f64 1 y) (*.f64 y x))","1","(+.f64 (*.f64 -1/3 y) 1)","(fma.f64 -1/3 y 1)","(fma.f64 y -1/3 1)","(+.f64 (*.f64 -1/3 y) (+.f64 1 (*.f64 -1/9 (pow.f64 y 2))))","(+.f64 (fma.f64 -1/3 y 1) (*.f64 -1/9 (*.f64 y y)))","(fma.f64 y -1/3 (fma.f64 -1/9 (*.f64 y y) 1))","(fma.f64 y -1/3 (fma.f64 y (*.f64 y -1/9) 1))","(fma.f64 -1/9 (*.f64 y y) (fma.f64 y -1/3 1))","(+.f64 (*.f64 -1/3 y) (+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (*.f64 -5/81 (pow.f64 y 3)))))","(+.f64 (fma.f64 -1/3 y 1) (fma.f64 -1/9 (*.f64 y y) (*.f64 (pow.f64 y 3) -5/81)))","(+.f64 (fma.f64 y -1/3 1) (fma.f64 -1/9 (*.f64 y y) (*.f64 (pow.f64 y 3) -5/81)))","(fma.f64 y -1/3 (fma.f64 (pow.f64 y 3) -5/81 (fma.f64 y (*.f64 y -1/9) 1)))","(fma.f64 y -1/3 (fma.f64 y (*.f64 y -1/9) (fma.f64 (pow.f64 y 3) -5/81 1)))"]],"stop":[["node limit",1]],"time":45.72412109375,"type":"simplify"},{"compiler":[[3978,2482]],"time":45.102783203125,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (/.f64 (cbrt.f64 (-.f64 1 (*.f64 y y))) (cbrt.f64 (+.f64 1 y))))","fresh",4.426151318379094],["(*.f64 (*.f64 x y) (-.f64 1 y))","done",0.13671875],["(*.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (*.f64 y (-.f64 1 y))))","fresh",4.827984033284818],["(*.f64 (*.f64 (*.f64 x y) (sqrt.f64 (-.f64 1 y))) (sqrt.f64 (-.f64 1 y)))","fresh",10.350605029305326],["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))","done",0.3145676758319564],["(*.f64 (*.f64 y (-.f64 1 y)) x)","next",4.31640625]],"compiler":[[24,18],[9,6],[15,10],[15,11],[17,13],[9,6],[24,18],[15,10],[15,11],[9,6]],"count":[[233,6]],"kept":[{"done":[1,1],"fresh":[4,3],"new":[227,1],"picked":[1,1]}],"min-error":[0],"time":74.113037109375,"type":"prune"},{"compiler":[[20,12]],"locations":[["(*.f64 y (-.f64 1 y))",0.0078125,true],["(*.f64 (*.f64 y (-.f64 1 y)) x)",4.047251493871492,true]],"time":4.779052734375,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 y (-.f64 1 y))","y","-inf",0.296875],["(*.f64 y (-.f64 1 y))","y","inf",0.251953125],["(*.f64 y (-.f64 1 y))","y","0",0.2548828125],["(*.f64 (*.f64 y (-.f64 1 y)) x)","x","-inf",0.154052734375],["(*.f64 (*.f64 y (-.f64 1 y)) x)","x","inf",0.152099609375],["(*.f64 (*.f64 y (-.f64 1 y)) x)","x","0",0.166015625],["(*.f64 (*.f64 y (-.f64 1 y)) x)","y","-inf",0.16796875],["(*.f64 (*.f64 y (-.f64 1 y)) x)","y","inf",0.179931640625],["(*.f64 (*.f64 y (-.f64 1 y)) x)","y","0",0.205078125]],"time":1.949951171875,"type":"series"},{"count":[[2,32]],"egraph":[[2,1831,17,0.018781166000000002],[1,144,17,0.0025001660000000003],[0,7,17,0.000186083]],"inputs":[["(*.f64 (*.f64 y (-.f64 1 y)) x)","(*.f64 y (-.f64 1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (*.f64 (-.f64 1 y) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 (-.f64 1 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 (-.f64 1 y) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 (-.f64 1 y) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (*.f64 (-.f64 1 y) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (*.f64 (-.f64 1 y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (*.f64 y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (*.f64 (-.f64 1 y) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 y (-.f64 1 y)) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (*.f64 y (-.f64 1 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (*.f64 (-.f64 1 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (*.f64 (-.f64 1 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (*.f64 (-.f64 1 y) x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 y (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (-.f64 1 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) y) (+.f64 1 (fma.f64 y y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 y y)) y) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 (pow.f64 y 3))) (+.f64 1 (fma.f64 y y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 1 (*.f64 y y))) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (-.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (-.f64 1 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (-.f64 1 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (-.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 (-.f64 1 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (-.f64 1 y) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (-.f64 1 y))))))))"]],"rules":[["egg-rr",19],["egg-rr",13]],"stop":[["node limit",1]],"time":38.35107421875,"type":"rewrite"},{"count":[[68,43]],"egraph":[[7,5371,308,0.035108166999999996],[6,2799,308,0.020404041999999997],[5,1500,308,0.010223583],[4,644,308,0.004628792],[3,206,308,0.001852958],[2,87,308,0.000724625],[1,39,308,0.000297458],[0,16,380,0.00010575]],"inputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","(*.f64 y (*.f64 (-.f64 1 y) x))","y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(*.f64 -1 (pow.f64 y 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(*.f64 -1 (pow.f64 y 2))","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)"]],"method":["egg-herbie"],"outputs":[["(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(*.f64 (neg.f64 (*.f64 y y)) x)","(*.f64 x (*.f64 y (neg.f64 y)))","(*.f64 y (*.f64 x (neg.f64 y)))","(*.f64 y (*.f64 y (neg.f64 x)))","(*.f64 y (neg.f64 (*.f64 y x)))","(*.f64 x (neg.f64 (*.f64 y y)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 -1 (*.f64 (pow.f64 y 2) x))","(*.f64 (neg.f64 (*.f64 y y)) x)","(*.f64 x (*.f64 y (neg.f64 y)))","(*.f64 y (*.f64 x (neg.f64 y)))","(*.f64 y (*.f64 y (neg.f64 x)))","(*.f64 y (neg.f64 (*.f64 y x)))","(*.f64 x (neg.f64 (*.f64 y y)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","(*.f64 y (*.f64 (-.f64 1 y) x))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (*.f64 x (-.f64 1 y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(*.f64 (*.f64 y x) (-.f64 1 y))","y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(fma.f64 -1 (*.f64 y y) y)","(-.f64 y (*.f64 y y))","(fma.f64 y (neg.f64 y) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(fma.f64 -1 (*.f64 y y) y)","(-.f64 y (*.f64 y y))","(fma.f64 y (neg.f64 y) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(fma.f64 -1 (*.f64 y y) y)","(-.f64 y (*.f64 y y))","(fma.f64 y (neg.f64 y) y)","(*.f64 -1 (pow.f64 y 2))","(neg.f64 (*.f64 y y))","(*.f64 y (neg.f64 y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(fma.f64 -1 (*.f64 y y) y)","(-.f64 y (*.f64 y y))","(fma.f64 y (neg.f64 y) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(fma.f64 -1 (*.f64 y y) y)","(-.f64 y (*.f64 y y))","(fma.f64 y (neg.f64 y) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(fma.f64 -1 (*.f64 y y) y)","(-.f64 y (*.f64 y y))","(fma.f64 y (neg.f64 y) y)","(*.f64 -1 (pow.f64 y 2))","(neg.f64 (*.f64 y y))","(*.f64 y (neg.f64 y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(fma.f64 -1 (*.f64 y y) y)","(-.f64 y (*.f64 y y))","(fma.f64 y (neg.f64 y) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(fma.f64 -1 (*.f64 y y) y)","(-.f64 y (*.f64 y y))","(fma.f64 y (neg.f64 y) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(fma.f64 -1 (*.f64 y y) y)","(-.f64 y (*.f64 y y))","(fma.f64 y (neg.f64 y) y)"]],"stop":[["node limit",1]],"time":51.74609375,"type":"simplify"},{"compiler":[[411,262]],"time":5.659912109375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (/.f64 (cbrt.f64 (-.f64 1 (*.f64 y y))) (cbrt.f64 (+.f64 1 y))))","fresh",4.426151318379094],["(*.f64 (*.f64 x y) (-.f64 1 y))","done",0.13671875],["(*.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (*.f64 y (-.f64 1 y))))","fresh",4.827984033284818],["(*.f64 (*.f64 (*.f64 x y) (sqrt.f64 (-.f64 1 y))) (sqrt.f64 (-.f64 1 y)))","fresh",10.350605029305326],["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))","done",0.3145676758319564],["(*.f64 (*.f64 y (-.f64 1 y)) x)","done",4.31640625]],"compiler":[[24,18],[9,6],[15,10],[15,11],[17,13],[9,6]],"count":[[49,6]],"kept":[{"done":[2,2],"fresh":[3,3],"new":[43,0],"picked":[1,1]}],"min-error":[0],"time":7.866943359375,"type":"prune"},{"accuracy":[0.13671875],"baseline":[0.13671875],"branch":[["x",0.13671875,1],["y",0.13671875,1],["(*.f64 (*.f64 x y) (-.f64 1 y))",0.13671875,1]],"compiler":[[3,2],[3,2],[9,6],[128,77]],"count":[[10,1]],"inputs":[["(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (/.f64 (cbrt.f64 (-.f64 1 (*.f64 y y))) (cbrt.f64 (+.f64 1 y))))","(/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (+.f64 1 (fma.f64 y y y)))","(*.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (*.f64 y (-.f64 1 y))))","(*.f64 (*.f64 (*.f64 x y) (sqrt.f64 (-.f64 1 y))) (sqrt.f64 (-.f64 1 y)))","(*.f64 (*.f64 (*.f64 x y) (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)))","(*.f64 (*.f64 y (-.f64 1 y)) x)","(pow.f64 (cbrt.f64 (*.f64 (*.f64 x y) (-.f64 1 y))) 3)","(/.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) (*.f64 x y)) (+.f64 1 (fma.f64 y y y)))","(*.f64 x (fma.f64 y (neg.f64 y) y))","(*.f64 (*.f64 x y) (-.f64 1 y))"]],"link":["."],"name":["Statistics.Distribution.Binomial:$cvariance from math-functions-0.1.5.2"],"oracle":[18.336166601663923],"outputs":[["(*.f64 (*.f64 x y) (-.f64 1 y))"]],"time":15.70703125,"times":[["x",4.6728515625],["y",4.614990234375],["(*.f64 (*.f64 x y) (-.f64 1 y))",4.18505859375]],"type":"regimes"},{"compiler":[[9,6]],"egraph":[[4,20,10,0.00010750099999999999],[3,19,10,8.666699999999999e-5],[2,17,10,6.5792e-5],[1,13,10,4.5042e-5],[0,7,10,2.3417e-5]],"inputs":[["(*.f64 (*.f64 x y) (-.f64 1 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 x y) (-.f64 1 y))"]],"stop":[["fuel",1],["saturated",1]],"time":8.172119140625,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.666015625,"type":"end"}]
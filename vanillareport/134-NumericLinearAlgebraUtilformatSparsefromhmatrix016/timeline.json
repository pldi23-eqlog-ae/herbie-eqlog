[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.7658531109336764,0.15024379501119256,0.08390309405513108],[11,0.7512189750559628,0.1775608486495912,0.07122017629444599],[10,0.6595117235556245,0.28878028132021427,0.05170799512416124],[9,0.6321946699172258,0.33560951612889767,0.032195813953876495],[8,0.45268260315060616,0.5307313278317451,0.016586069017648697],[7,0.40585336834192276,0.5931703075766563,0.0009763240814208984],[6,0.0,0.9990236759185791,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":34.73583984375,"type":"analyze"},{"outcomes":[["body",256,"invalid",14.254638671875,433],["body",256,"valid",271.788330078125,8256]],"time":293.6259765625,"type":"sample"},{"compiler":[[9,6]],"egraph":[[0,2,2,1.416e-6],[10,302,22,0.0046518340000000005],[9,302,22,0.0038488750000000007],[8,261,22,0.0029935840000000005],[7,212,22,0.0022093340000000003],[6,160,22,0.0015842920000000002],[5,124,22,0.0010105000000000001],[4,66,22,0.0005665000000000001],[3,36,22,0.00029200000000000005],[2,24,22,0.000158917],[1,16,22,9.1834e-5],[0,11,22,4.3125e-5]],"inputs":[["0","1"],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 x))","(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":27.18212890625,"type":"preprocess"},{"count":[[1,1]],"egraph":[[11,275,11,0.004597792999999999],[10,275,11,0.003931585],[9,260,11,0.003218376],[8,233,11,0.0025410009999999998],[7,199,11,0.0019346259999999998],[6,157,11,0.0013681259999999999],[5,104,11,0.000864709],[4,48,11,0.000440459],[3,27,11,0.000226043],[2,18,11,0.000127293],[1,11,11,7.3834e-5],[0,7,11,3.3334e-5]],"inputs":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))"]],"stop":[["saturated",1]],"time":14.866943359375,"type":"simplify"},{"compiler":[[9,6]],"time":0.215087890625,"type":"eval"},{"alts":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","next",0.0078125]],"compiler":[[9,6],[9,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.657958984375,"type":"prune"},{"compiler":[[20,6]],"locations":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))",0.0078125,true]],"time":4.76806640625,"type":"localize"},{"count":[[1,8]],"series":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","y","-inf",0.682861328125],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","y","inf",0.405029296875],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","y","0",0.2509765625],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","x","-inf",0.5009765625],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","x","inf",0.423095703125],["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","x","0",0.429931640625]],"time":2.768798828125,"type":"series"},{"count":[[1,38]],"egraph":[[2,2561,7,0.018412376],[1,161,7,0.003108792],[0,7,9,0.000164709]],"inputs":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (-.f64 x y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x y) (/.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 x y)) 2) (*.f64 (cbrt.f64 (-.f64 x y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) 2) (cbrt.f64 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 x y)) (*.f64 (sqrt.f64 (-.f64 x y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 x y) y)) (sqrt.f64 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 x y)) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x y)) 2) 1) (/.f64 (cbrt.f64 (-.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 x y)) 1) (/.f64 (sqrt.f64 (-.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 y) 2)) (/.f64 (-.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x y)) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 x y)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (-.f64 x y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (-.f64 x y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x y)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (-.f64 x y)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 x y) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (-.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (-.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (neg.f64 (-.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (-.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (-.f64 x y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 (-.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x y) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 x y) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 x y) y)))))))"]],"rules":[["egg-rr",38]],"stop":[["node limit",1]],"time":35.795166015625,"type":"rewrite"},{"count":[[46,41]],"egraph":[[9,255,88,0.004754581999999999],[8,255,88,0.004062540999999999],[7,242,88,0.0033414579999999994],[6,222,88,0.0026552499999999996],[5,193,88,0.0020239999999999998],[4,165,88,0.001418375],[3,97,88,0.00086275],[2,50,88,0.0004405],[1,27,88,0.000179333],[0,14,104,6.3583e-5]],"inputs":[["(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 y (neg.f64 x))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 y (neg.f64 x))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 y (neg.f64 x))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(/.f64 (fabs.f64 (neg.f64 (+.f64 y (*.f64 -1 x)))) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 y (neg.f64 x))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 y (neg.f64 x))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 y (neg.f64 x))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 y (neg.f64 x))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 (*.f64 -1 y) x)) (fabs.f64 y))","(/.f64 (fabs.f64 (+.f64 y (neg.f64 x))) (fabs.f64 y))","(/.f64 (fabs.f64 (-.f64 y x)) (fabs.f64 y))"]],"stop":[["saturated",1]],"time":17.197998046875,"type":"simplify"},{"compiler":[[396,145]],"time":4.15087890625,"type":"eval"},{"alts":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))","done",0.0078125]],"compiler":[[9,6],[9,6]],"count":[[42,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[41,0],"picked":[1,1]}],"min-error":[0.0078125],"time":4.869140625,"type":"prune"},{"compiler":[[9,6]],"egraph":[[5,27,11,0.00015075],[4,26,11,0.000121958],[3,23,11,9.2958e-5],[2,18,11,6.4792e-5],[1,11,11,3.9792e-5],[0,7,11,1.625e-5]],"inputs":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (fabs.f64 (-.f64 x y)) (fabs.f64 y))"]],"stop":[["done",1],["saturated",1]],"time":8.2099609375,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.60693359375,"type":"end"}]
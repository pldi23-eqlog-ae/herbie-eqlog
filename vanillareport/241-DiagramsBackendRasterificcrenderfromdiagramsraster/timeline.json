[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4407599744804429,0.09117633580581241],[11,0.41345625924714113,0.5148700586851191,0.07167368206773972],[10,0.34324670579007943,0.600681735132639,0.05607155907728156],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":83.19287109375,"type":"analyze"},{"outcomes":[["body",256,"invalid",51.68310546875,1292],["body",256,"valid",323.82275390625,8256]],"time":383.85205078125,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,2.083e-6],[12,2858,32,0.057445042999999994],[11,2858,32,0.049010583999999996],[10,2857,32,0.041654667],[9,2782,32,0.034194],[8,2484,32,0.02622775],[7,1863,32,0.018105125],[6,1140,32,0.010113708],[5,680,32,0.005549708],[4,337,36,0.002840125],[3,151,44,0.0011887500000000001],[2,87,44,0.0005338750000000001],[1,43,44,0.000242459],[0,20,44,9.0209e-5]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 y) z))","(+.f64 (*.f64 z y) (*.f64 (-.f64 1 z) x))","(+.f64 (*.f64 x z) (*.f64 (-.f64 1 x) y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))","(fma.f64 x y (*.f64 (-.f64 1 x) z))","(fma.f64 x (fma.f64 z -1 y) z)","(fma.f64 x (-.f64 y z) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 1 y) z))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 x y (*.f64 z (-.f64 1 y)))","(-.f64 (fma.f64 x y z) (*.f64 y z))","(fma.f64 y (fma.f64 z -1 x) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 z y) (*.f64 (-.f64 1 z) x))","(fma.f64 z y (*.f64 x (-.f64 1 z)))","(fma.f64 x (-.f64 1 z) (*.f64 y z))","(fma.f64 z (fma.f64 x -1 y) x)","(fma.f64 z (-.f64 y x) x)","(+.f64 (*.f64 x z) (*.f64 (-.f64 1 x) y))","(fma.f64 x z (*.f64 y (-.f64 1 x)))","(fma.f64 x z (-.f64 y (*.f64 x y)))","(fma.f64 x (fma.f64 y -1 z) y)","(fma.f64 x (-.f64 z y) y)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":81.73095703125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[11,1215,8,0.01794525],[10,1205,8,0.014985917],[9,1145,8,0.011991583],[8,960,8,0.008722042],[7,557,8,0.005611417],[6,346,8,0.0029034589999999997],[5,218,8,0.001709667],[4,126,9,0.000974334],[3,57,11,0.000451042],[2,30,11,0.000227709],[1,17,11,0.000114834],[0,9,11,4.7542e-5]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))","(fma.f64 x y (*.f64 (-.f64 1 x) z))","(-.f64 (fma.f64 x y z) (*.f64 x z))","(fma.f64 x (fma.f64 z -1 y) z)","(fma.f64 x (-.f64 y z) z)"]],"stop":[["saturated",1]],"time":28.5,"type":"simplify"},{"compiler":[[18,10]],"time":0.3271484375,"type":"eval"},{"alts":[["(fma.f64 x (-.f64 y z) z)","next",0.00390625]],"compiler":[[9,5],[9,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.760009765625,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 x (-.f64 y z) z)",0.00390625,true]],"time":3.41796875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 x (-.f64 y z) z)","z","-inf",0.31201171875],["(fma.f64 x (-.f64 y z) z)","z","inf",0.31884765625],["(fma.f64 x (-.f64 y z) z)","z","0",0.380126953125],["(fma.f64 x (-.f64 y z) z)","y","-inf",0.284912109375],["(fma.f64 x (-.f64 y z) z)","y","inf",0.294921875],["(fma.f64 x (-.f64 y z) z)","y","0",0.2939453125],["(fma.f64 x (-.f64 y z) z)","x","-inf",0.387939453125],["(fma.f64 x (-.f64 y z) z)","x","inf",0.3369140625],["(fma.f64 x (-.f64 y z) z)","x","0",0.323974609375]],"time":3.0458984375,"type":"series"},{"count":[[1,21]],"egraph":[[2,1797,8,0.017558374],[1,130,8,0.002330249],[0,6,8,0.000149708]],"inputs":[["(fma.f64 x (-.f64 y z) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 y z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 y z)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (-.f64 y z) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (-.f64 y z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (-.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) z)) (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) z)) 2) (cbrt.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (-.f64 y z) z)) (sqrt.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (-.f64 y z)) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 x (-.f64 y z)) (*.f64 x (-.f64 y z))) (-.f64 (*.f64 z z) (*.f64 (*.f64 x (-.f64 y z)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (-.f64 y z)) (*.f64 x (-.f64 y z))) (*.f64 z z)) (-.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (-.f64 y z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (-.f64 y z) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (-.f64 y z) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (-.f64 y z) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (-.f64 y z) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":34.7509765625,"type":"rewrite"},{"count":[[57,33]],"egraph":[[9,1391,264,0.019280667],[8,1389,264,0.016269333],[7,1270,264,0.013195667],[6,1031,264,0.009670583],[5,648,264,0.006134417],[4,348,264,0.0031142080000000003],[3,188,264,0.001456249],[2,109,264,0.0007630829999999999],[1,56,264,0.000360999],[0,23,267,0.000127458]],"inputs":[["z","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 -1 (*.f64 z x)) z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(*.f64 y x)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(*.f64 y x)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(*.f64 y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(*.f64 (+.f64 1 (*.f64 -1 x)) z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(*.f64 -1 (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))"]],"method":["egg-herbie"],"outputs":[["z","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 -1 (*.f64 z x)) z)","(fma.f64 -1 (*.f64 z x) z)","(-.f64 z (*.f64 z x))","(fma.f64 x (neg.f64 z) z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(*.f64 y x)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(*.f64 y x)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(*.f64 y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(*.f64 (+.f64 1 (*.f64 -1 x)) z)","(fma.f64 -1 (*.f64 z x) z)","(-.f64 z (*.f64 z x))","(fma.f64 x (neg.f64 z) z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(*.f64 -1 (*.f64 (-.f64 x 1) z))","(fma.f64 -1 (*.f64 z x) z)","(-.f64 z (*.f64 z x))","(fma.f64 x (neg.f64 z) z)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))","(fma.f64 (-.f64 y z) x z)"]],"stop":[["saturated",1]],"time":34.783203125,"type":"simplify"},{"compiler":[[326,102]],"time":4.288818359375,"type":"eval"},{"alts":[["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","next",33.42617713751815],["(fma.f64 x (-.f64 y z) z)","done",0.00390625]],"compiler":[[11,7],[9,5],[11,7]],"count":[[34,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[33,1],"picked":[1,1]}],"min-error":[0],"time":5.05419921875,"type":"prune"},{"compiler":[[30,7]],"locations":[["(log.f64 (fma.f64 x (-.f64 y z) z))",0.00390625,true],["(fma.f64 x (-.f64 y z) z)",0.00390625,false],["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))",2.926177137518145,true]],"time":5.8017578125,"type":"localize"},{"count":[[2,72]],"series":[["(log.f64 (fma.f64 x (-.f64 y z) z))","z","-inf",0.505859375],["(log.f64 (fma.f64 x (-.f64 y z) z))","z","inf",0.5048828125],["(log.f64 (fma.f64 x (-.f64 y z) z))","z","0",0.510009765625],["(log.f64 (fma.f64 x (-.f64 y z) z))","y","-inf",0.511962890625],["(log.f64 (fma.f64 x (-.f64 y z) z))","y","inf",0.79296875],["(log.f64 (fma.f64 x (-.f64 y z) z))","y","0",0.5869140625],["(log.f64 (fma.f64 x (-.f64 y z) z))","x","-inf",0.633056640625],["(log.f64 (fma.f64 x (-.f64 y z) z))","x","inf",0.452880859375],["(log.f64 (fma.f64 x (-.f64 y z) z))","x","0",0.509033203125],["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","z","-inf",0.188232421875],["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","z","inf",0.170166015625],["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","z","0",0.152099609375],["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","y","-inf",0.18701171875],["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","y","inf",0.173095703125],["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","y","0",0.1748046875],["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","x","-inf",0.1689453125],["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","x","inf",0.174072265625],["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","x","0",0.237060546875]],"time":6.903076171875,"type":"series"},{"count":[[2,43]],"egraph":[[2,1983,18,0.017821917],[1,154,18,0.0025640840000000003],[0,8,18,0.000178917]],"inputs":[["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","(log.f64 (fma.f64 x (-.f64 y z) z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 x (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 (fma.f64 x (-.f64 y z) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (-.f64 y z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (-.f64 y z)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (-.f64 y z) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (-.f64 y z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (-.f64 y z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) z)) (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) z)) 2) (cbrt.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (-.f64 y z) z)) (sqrt.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (-.f64 y z)) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 x (-.f64 y z)) (*.f64 x (-.f64 y z))) (-.f64 (*.f64 z z) (*.f64 (*.f64 x (-.f64 y z)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (-.f64 y z)) (*.f64 x (-.f64 y z))) (*.f64 z z)) (-.f64 (*.f64 x (-.f64 y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (-.f64 y z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (-.f64 y z) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (-.f64 y z) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))) (sqrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z))) 2)) (cbrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (-.f64 y z) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (-.f64 y z) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (-.f64 y z) z)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) z)) 2)) (log.f64 (cbrt.f64 (fma.f64 x (-.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (fma.f64 x (-.f64 y z) z))) (log.f64 (sqrt.f64 (fma.f64 x (-.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log.f64 (fma.f64 x (-.f64 y z) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (fma.f64 x (-.f64 y z) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (fma.f64 x (-.f64 y z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z))) (pow.f64 (cbrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z))) 2) (cbrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z))) (sqrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (fma.f64 x (-.f64 y z) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (fma.f64 x (-.f64 y z) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (fma.f64 x (-.f64 y z) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (fma.f64 x (-.f64 y z) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (fma.f64 x (-.f64 y z) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (fma.f64 x (-.f64 y z) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (fma.f64 x (-.f64 y z) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (fma.f64 x (-.f64 y z) z))))))))"]],"rules":[["egg-rr",18],["egg-rr",25]],"stop":[["node limit",1]],"time":37.046142578125,"type":"rewrite"},{"count":[[115,118]],"egraph":[[2,2727,1591,0.015945249],[1,643,1645,0.004350708],[0,190,1765,0.000852583]],"inputs":[["z","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(+.f64 (*.f64 -1 (*.f64 z x)) z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(*.f64 y x)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(*.f64 y x)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(*.f64 y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(*.f64 (+.f64 1 (*.f64 -1 x)) z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(*.f64 -1 (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))","(log.f64 z)","(+.f64 (log.f64 z) (*.f64 (-.f64 (/.f64 y z) 1) x))","(+.f64 (log.f64 z) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)) (pow.f64 z 2))) (*.f64 (-.f64 (/.f64 y z) 1) x)))","(+.f64 (log.f64 z) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)) (pow.f64 z 2))) (+.f64 (*.f64 (-.f64 (/.f64 y z) 1) x) (*.f64 1/3 (/.f64 (*.f64 (pow.f64 (-.f64 y z) 3) (pow.f64 x 3)) (pow.f64 z 3))))))","(+.f64 (log.f64 (-.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x))))","(+.f64 (log.f64 (-.f64 y z)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (/.f64 z (*.f64 (-.f64 y z) x))))","(+.f64 (log.f64 (-.f64 y z)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)))) (/.f64 z (*.f64 (-.f64 y z) x)))))","(+.f64 (log.f64 (-.f64 y z)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (*.f64 1/3 (/.f64 (pow.f64 z 3) (*.f64 (pow.f64 (-.f64 y z) 3) (pow.f64 x 3))))))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (-.f64 y z))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (log.f64 (*.f64 -1 (-.f64 y z)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (log.f64 (*.f64 -1 (-.f64 y z))))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 z 3) (*.f64 (pow.f64 (-.f64 y z) 3) (pow.f64 x 3)))) (log.f64 (*.f64 -1 (-.f64 y z)))))))","(log.f64 (+.f64 z (*.f64 -1 (*.f64 z x))))","(+.f64 (log.f64 (+.f64 z (*.f64 -1 (*.f64 z x)))) (/.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x)))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2))) (+.f64 (log.f64 (+.f64 z (*.f64 -1 (*.f64 z x)))) (/.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2))) (+.f64 (log.f64 (+.f64 z (*.f64 -1 (*.f64 z x)))) (+.f64 (*.f64 1/3 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 3))) (/.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x)))))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 x))","(+.f64 (/.f64 z (*.f64 y x)) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 x))))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 x)))))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 x))))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (*.f64 -1 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (/.f64 z y)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (/.f64 z y))))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (/.f64 z y)))))))","(log.f64 (*.f64 y x))","(+.f64 (*.f64 (-.f64 (/.f64 1 (*.f64 y x)) (/.f64 1 y)) z) (log.f64 (*.f64 y x)))","(+.f64 (*.f64 (-.f64 (/.f64 1 (*.f64 y x)) (/.f64 1 y)) z) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 2) (pow.f64 z 2)) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (log.f64 (*.f64 y x))))","(+.f64 (*.f64 (-.f64 (/.f64 1 (*.f64 y x)) (/.f64 1 y)) z) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 2) (pow.f64 z 2)) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (log.f64 (*.f64 y x)) (*.f64 1/3 (/.f64 (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 3) (pow.f64 z 3)) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 1 (*.f64 -1 x))))","(+.f64 (/.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 x)) z)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 1 (*.f64 -1 x)))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 2) (pow.f64 z 2)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (+.f64 (/.f64 (*.f64 y x) (*.f64 z (+.f64 1 (*.f64 -1 x)))) (log.f64 (+.f64 1 (*.f64 -1 x))))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 2) (pow.f64 z 2)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (+.f64 (/.f64 (*.f64 y x) (*.f64 z (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 1/3 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 3) (pow.f64 z 3)))) (log.f64 (+.f64 1 (*.f64 -1 x)))))))","(+.f64 (log.f64 (-.f64 x 1)) (*.f64 -1 (log.f64 (/.f64 -1 z))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))) (+.f64 (log.f64 (-.f64 x 1)) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (*.f64 (pow.f64 (-.f64 x 1) 2) (pow.f64 z 2)))) (+.f64 (log.f64 (-.f64 x 1)) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))) (+.f64 (*.f64 -1/3 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (*.f64 (pow.f64 (-.f64 x 1) 3) (pow.f64 z 3)))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (*.f64 (pow.f64 (-.f64 x 1) 2) (pow.f64 z 2)))) (+.f64 (log.f64 (-.f64 x 1)) (*.f64 -1 (log.f64 (/.f64 -1 z)))))))"]],"method":["egg-herbie"],"outputs":[["z","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(*.f64 (-.f64 y z) x)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (-.f64 y z) x) z)","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 -1 (*.f64 z x)) z)","(fma.f64 -1 (*.f64 z x) z)","(-.f64 z (*.f64 z x))","(fma.f64 z (neg.f64 x) z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(*.f64 y x)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(*.f64 y x)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))","(fma.f64 (-.f64 y z) x z)","(*.f64 y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(*.f64 (+.f64 1 (*.f64 -1 x)) z)","(fma.f64 -1 (*.f64 z x) z)","(-.f64 z (*.f64 z x))","(fma.f64 z (neg.f64 x) z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 x)) z) (*.f64 y x))","(fma.f64 (-.f64 y z) x z)","(*.f64 -1 (*.f64 (-.f64 x 1) z))","(fma.f64 -1 (*.f64 z x) z)","(-.f64 z (*.f64 z x))","(fma.f64 z (neg.f64 x) z)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))","(fma.f64 (-.f64 y z) x z)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (-.f64 x 1) z)))","(fma.f64 (-.f64 y z) x z)","(log.f64 z)","(+.f64 (log.f64 z) (*.f64 (-.f64 (/.f64 y z) 1) x))","(+.f64 (log.f64 z) (*.f64 x (+.f64 (/.f64 y z) -1)))","(fma.f64 x (+.f64 -1 (/.f64 y z)) (log.f64 z))","(+.f64 (log.f64 z) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)) (pow.f64 z 2))) (*.f64 (-.f64 (/.f64 y z) 1) x)))","(+.f64 (log.f64 z) (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 y z) 2) (/.f64 (*.f64 z z) (*.f64 x x))) (*.f64 x (+.f64 (/.f64 y z) -1))))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 y z) 2) (*.f64 (/.f64 z x) (/.f64 z x)))) (fma.f64 x (+.f64 -1 (/.f64 y z)) (log.f64 z)))","(fma.f64 -1/2 (*.f64 (*.f64 (/.f64 x z) (/.f64 x z)) (pow.f64 (-.f64 y z) 2)) (fma.f64 x (+.f64 -1 (/.f64 y z)) (log.f64 z)))","(+.f64 (log.f64 z) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)) (pow.f64 z 2))) (+.f64 (*.f64 (-.f64 (/.f64 y z) 1) x) (*.f64 1/3 (/.f64 (*.f64 (pow.f64 (-.f64 y z) 3) (pow.f64 x 3)) (pow.f64 z 3))))))","(+.f64 (log.f64 z) (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 y z) 2) (/.f64 (*.f64 z z) (*.f64 x x))) (fma.f64 (+.f64 (/.f64 y z) -1) x (*.f64 1/3 (/.f64 (pow.f64 (-.f64 y z) 3) (/.f64 (pow.f64 z 3) (pow.f64 x 3)))))))","(+.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 y z) 2) (*.f64 (/.f64 z x) (/.f64 z x))) (fma.f64 x (+.f64 -1 (/.f64 y z)) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 y z) 3) (/.f64 (pow.f64 z 3) (pow.f64 x 3)))))) (log.f64 z))","(+.f64 (fma.f64 x (+.f64 -1 (/.f64 y z)) (*.f64 (/.f64 -1/2 (*.f64 (/.f64 z x) (/.f64 z x))) (pow.f64 (-.f64 y z) 2))) (fma.f64 1/3 (*.f64 (pow.f64 (/.f64 x z) 3) (pow.f64 (-.f64 y z) 3)) (log.f64 z)))","(+.f64 (log.f64 (-.f64 y z)) (*.f64 -1 (log.f64 (/.f64 1 x))))","(+.f64 (log.f64 (-.f64 y z)) (neg.f64 (neg.f64 (log.f64 x))))","(+.f64 (log.f64 (-.f64 y z)) (log.f64 x))","(+.f64 (log.f64 (-.f64 y z)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (/.f64 z (*.f64 (-.f64 y z) x))))","(+.f64 (log.f64 (-.f64 y z)) (fma.f64 -1 (neg.f64 (log.f64 x)) (/.f64 z (*.f64 (-.f64 y z) x))))","(+.f64 (/.f64 (/.f64 z (-.f64 y z)) x) (+.f64 (log.f64 (-.f64 y z)) (log.f64 x)))","(+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (+.f64 (log.f64 (-.f64 y z)) (log.f64 x)))","(+.f64 (log.f64 (-.f64 y z)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)))) (/.f64 z (*.f64 (-.f64 y z) x)))))","(+.f64 (log.f64 (-.f64 y z)) (fma.f64 -1 (neg.f64 (log.f64 x)) (fma.f64 -1/2 (/.f64 (*.f64 z z) (*.f64 (pow.f64 (-.f64 y z) 2) (*.f64 x x))) (/.f64 z (*.f64 (-.f64 y z) x)))))","(+.f64 (log.f64 (-.f64 y z)) (+.f64 (fma.f64 -1/2 (/.f64 (*.f64 z z) (*.f64 x (*.f64 x (pow.f64 (-.f64 y z) 2)))) (/.f64 (/.f64 z (-.f64 y z)) x)) (log.f64 x)))","(+.f64 (fma.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 (*.f64 z z) (pow.f64 (-.f64 y z) 2)) (/.f64 z (*.f64 (-.f64 y z) x))) (+.f64 (log.f64 (-.f64 y z)) (log.f64 x)))","(+.f64 (log.f64 (-.f64 y z)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (*.f64 1/3 (/.f64 (pow.f64 z 3) (*.f64 (pow.f64 (-.f64 y z) 3) (pow.f64 x 3))))))))","(+.f64 (log.f64 (-.f64 y z)) (fma.f64 -1 (neg.f64 (log.f64 x)) (fma.f64 -1/2 (/.f64 (*.f64 z z) (*.f64 (pow.f64 (-.f64 y z) 2) (*.f64 x x))) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (/.f64 (*.f64 1/3 (pow.f64 z 3)) (*.f64 (pow.f64 (-.f64 y z) 3) (pow.f64 x 3)))))))","(+.f64 (log.f64 (-.f64 y z)) (+.f64 (fma.f64 -1/2 (/.f64 (*.f64 z z) (*.f64 x (*.f64 x (pow.f64 (-.f64 y z) 2)))) (fma.f64 1/3 (/.f64 (/.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (-.f64 y z) 3)) (/.f64 (/.f64 z (-.f64 y z)) x))) (log.f64 x)))","(+.f64 (log.f64 (-.f64 y z)) (+.f64 (fma.f64 1/3 (/.f64 (pow.f64 (/.f64 z x) 3) (pow.f64 (-.f64 y z) 3)) (/.f64 z (*.f64 (-.f64 y z) x))) (fma.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 (*.f64 z z) (pow.f64 (-.f64 y z) 2)) (log.f64 x))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (*.f64 -1 (-.f64 y z))))","(fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 (neg.f64 (-.f64 y z))))","(-.f64 (log.f64 (neg.f64 (-.f64 y z))) (log.f64 (/.f64 -1 x)))","(-.f64 (log.f64 (fma.f64 y -1 z)) (log.f64 (/.f64 -1 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (log.f64 (*.f64 -1 (-.f64 y z)))))","(fma.f64 -1 (log.f64 (/.f64 -1 x)) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (log.f64 (neg.f64 (-.f64 y z)))))","(+.f64 (/.f64 (/.f64 z (-.f64 y z)) x) (-.f64 (log.f64 (neg.f64 (-.f64 y z))) (log.f64 (/.f64 -1 x))))","(+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (-.f64 (log.f64 (fma.f64 y -1 z)) (log.f64 (/.f64 -1 x))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (log.f64 (*.f64 -1 (-.f64 y z))))))","(fma.f64 -1 (log.f64 (/.f64 -1 x)) (fma.f64 -1/2 (/.f64 (*.f64 z z) (*.f64 (pow.f64 (-.f64 y z) 2) (*.f64 x x))) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (log.f64 (neg.f64 (-.f64 y z))))))","(+.f64 (fma.f64 -1/2 (/.f64 (*.f64 z z) (*.f64 x (*.f64 x (pow.f64 (-.f64 y z) 2)))) (/.f64 (/.f64 z (-.f64 y z)) x)) (-.f64 (log.f64 (neg.f64 (-.f64 y z))) (log.f64 (/.f64 -1 x))))","(+.f64 (fma.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 (*.f64 z z) (pow.f64 (-.f64 y z) 2)) (/.f64 z (*.f64 (-.f64 y z) x))) (-.f64 (log.f64 (fma.f64 y -1 z)) (log.f64 (/.f64 -1 x))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 z 2) (*.f64 (pow.f64 (-.f64 y z) 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 z 3) (*.f64 (pow.f64 (-.f64 y z) 3) (pow.f64 x 3)))) (log.f64 (*.f64 -1 (-.f64 y z)))))))","(fma.f64 -1 (log.f64 (/.f64 -1 x)) (+.f64 (fma.f64 -1/2 (/.f64 (*.f64 z z) (*.f64 (pow.f64 (-.f64 y z) 2) (*.f64 x x))) (/.f64 z (*.f64 (-.f64 y z) x))) (fma.f64 1/3 (/.f64 (pow.f64 z 3) (*.f64 (pow.f64 (-.f64 y z) 3) (pow.f64 x 3))) (log.f64 (neg.f64 (-.f64 y z))))))","(-.f64 (+.f64 (fma.f64 -1/2 (/.f64 (*.f64 z z) (*.f64 x (*.f64 x (pow.f64 (-.f64 y z) 2)))) (/.f64 (/.f64 z (-.f64 y z)) x)) (fma.f64 1/3 (/.f64 (/.f64 (pow.f64 z 3) (pow.f64 x 3)) (pow.f64 (-.f64 y z) 3)) (log.f64 (neg.f64 (-.f64 y z))))) (log.f64 (/.f64 -1 x)))","(fma.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 (*.f64 z z) (pow.f64 (-.f64 y z) 2)) (-.f64 (fma.f64 1/3 (/.f64 (pow.f64 (/.f64 z x) 3) (pow.f64 (-.f64 y z) 3)) (+.f64 (/.f64 z (*.f64 (-.f64 y z) x)) (log.f64 (fma.f64 y -1 z)))) (log.f64 (/.f64 -1 x))))","(log.f64 (+.f64 z (*.f64 -1 (*.f64 z x))))","(log.f64 (fma.f64 -1 (*.f64 z x) z))","(log.f64 (-.f64 z (*.f64 z x)))","(log.f64 (fma.f64 z (neg.f64 x) z))","(+.f64 (log.f64 (+.f64 z (*.f64 -1 (*.f64 z x)))) (/.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x)))))","(+.f64 (log.f64 (fma.f64 -1 (*.f64 z x) z)) (/.f64 y (/.f64 (fma.f64 -1 (*.f64 z x) z) x)))","(+.f64 (log.f64 (-.f64 z (*.f64 z x))) (*.f64 (/.f64 y z) (/.f64 x (-.f64 1 x))))","(fma.f64 (/.f64 y (fma.f64 z (neg.f64 x) z)) x (log.f64 (fma.f64 z (neg.f64 x) z)))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2))) (+.f64 (log.f64 (+.f64 z (*.f64 -1 (*.f64 z x)))) (/.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x))))))","(fma.f64 -1/2 (/.f64 (*.f64 y y) (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 2) (*.f64 x x))) (+.f64 (log.f64 (fma.f64 -1 (*.f64 z x) z)) (/.f64 y (/.f64 (fma.f64 -1 (*.f64 z x) z) x))))","(+.f64 (*.f64 (/.f64 y z) (/.f64 x (-.f64 1 x))) (fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (-.f64 z (*.f64 z x)) 2)) (*.f64 x x)) (log.f64 (-.f64 z (*.f64 z x)))))","(fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (fma.f64 z (neg.f64 x) z) 2)) (*.f64 x x)) (fma.f64 (/.f64 y (fma.f64 z (neg.f64 x) z)) x (log.f64 (fma.f64 z (neg.f64 x) z))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2))) (+.f64 (log.f64 (+.f64 z (*.f64 -1 (*.f64 z x)))) (+.f64 (*.f64 1/3 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 3))) (/.f64 (*.f64 y x) (+.f64 z (*.f64 -1 (*.f64 z x)))))))","(fma.f64 -1/2 (/.f64 (*.f64 y y) (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 2) (*.f64 x x))) (+.f64 (log.f64 (fma.f64 -1 (*.f64 z x) z)) (fma.f64 1/3 (/.f64 (pow.f64 y 3) (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 3) (pow.f64 x 3))) (/.f64 y (/.f64 (fma.f64 -1 (*.f64 z x) z) x)))))","(+.f64 (fma.f64 1/3 (*.f64 (/.f64 (pow.f64 y 3) (pow.f64 (-.f64 z (*.f64 z x)) 3)) (pow.f64 x 3)) (*.f64 (/.f64 y z) (/.f64 x (-.f64 1 x)))) (fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (-.f64 z (*.f64 z x)) 2)) (*.f64 x x)) (log.f64 (-.f64 z (*.f64 z x)))))","(fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (fma.f64 z (neg.f64 x) z) 2)) (*.f64 x x)) (fma.f64 (/.f64 y z) (/.f64 x (-.f64 1 x)) (fma.f64 1/3 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 (fma.f64 z (neg.f64 x) z) y) 3)) (log.f64 (fma.f64 z (neg.f64 x) z)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 x))","(fma.f64 -1 (neg.f64 (log.f64 y)) (log.f64 x))","(log.f64 (*.f64 y x))","(+.f64 (/.f64 z (*.f64 y x)) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 x))))","(+.f64 (/.f64 z (*.f64 y x)) (fma.f64 -1 (/.f64 z y) (fma.f64 -1 (neg.f64 (log.f64 y)) (log.f64 x))))","(+.f64 (/.f64 z (*.f64 y x)) (-.f64 (log.f64 (*.f64 y x)) (/.f64 z y)))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 x)))))","(fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (+.f64 (/.f64 z (*.f64 y x)) (fma.f64 -1 (/.f64 z y) (fma.f64 -1 (neg.f64 (log.f64 y)) (log.f64 x)))))","(+.f64 (-.f64 (log.f64 (*.f64 y x)) (/.f64 z y)) (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 z (*.f64 z x)) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (/.f64 z (*.f64 y x))))","(+.f64 (-.f64 (log.f64 (*.f64 y x)) (/.f64 z y)) (fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 z (neg.f64 x) z) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (/.f64 z (*.f64 y x))))","(+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (+.f64 (*.f64 -1 (/.f64 z y)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 y))) (log.f64 x))))))","(fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (+.f64 (/.f64 z (*.f64 y x)) (fma.f64 1/3 (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 -1 (/.f64 z y) (fma.f64 -1 (neg.f64 (log.f64 y)) (log.f64 x))))))","(+.f64 (fma.f64 1/3 (/.f64 (pow.f64 (-.f64 z (*.f64 z x)) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (-.f64 (log.f64 (*.f64 y x)) (/.f64 z y))) (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 z (*.f64 z x)) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (/.f64 z (*.f64 y x))))","(+.f64 (fma.f64 1/3 (/.f64 (pow.f64 (/.f64 (fma.f64 z (neg.f64 x) z) x) 3) (pow.f64 y 3)) (-.f64 (log.f64 (*.f64 y x)) (/.f64 z y))) (fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 z (neg.f64 x) z) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (/.f64 z (*.f64 y x))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 (*.f64 -1 x)))","(fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 (neg.f64 x)))","(-.f64 (log.f64 (neg.f64 x)) (log.f64 (/.f64 -1 y)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (/.f64 z y)))))","(fma.f64 -1 (log.f64 (/.f64 -1 y)) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (neg.f64 (/.f64 z y)) (log.f64 (neg.f64 x)))))","(-.f64 (+.f64 (/.f64 z (*.f64 y x)) (-.f64 (log.f64 (neg.f64 x)) (/.f64 z y))) (log.f64 (/.f64 -1 y)))","(+.f64 (-.f64 (log.f64 (neg.f64 x)) (/.f64 z y)) (-.f64 (/.f64 z (*.f64 y x)) (log.f64 (/.f64 -1 y))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (/.f64 z y))))))","(fma.f64 -1 (log.f64 (/.f64 -1 y)) (fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (neg.f64 (/.f64 z y)) (log.f64 (neg.f64 x))))))","(-.f64 (+.f64 (-.f64 (log.f64 (neg.f64 x)) (/.f64 z y)) (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 z (*.f64 z x)) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (/.f64 z (*.f64 y x)))) (log.f64 (/.f64 -1 y)))","(fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 z (neg.f64 x) z) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (+.f64 (-.f64 (log.f64 (neg.f64 x)) (/.f64 z y)) (-.f64 (/.f64 z (*.f64 y x)) (log.f64 (/.f64 -1 y)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 2) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (/.f64 z (*.f64 y x)) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (+.f64 z (*.f64 -1 (*.f64 z x))) 3) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))) (+.f64 (log.f64 (*.f64 -1 x)) (*.f64 -1 (/.f64 z y)))))))","(fma.f64 -1 (log.f64 (/.f64 -1 y)) (fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (+.f64 (/.f64 z (*.f64 y x)) (fma.f64 1/3 (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (+.f64 (neg.f64 (/.f64 z y)) (log.f64 (neg.f64 x)))))))","(-.f64 (+.f64 (-.f64 (fma.f64 1/3 (/.f64 (pow.f64 (-.f64 z (*.f64 z x)) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (log.f64 (neg.f64 x))) (/.f64 z y)) (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 z (*.f64 z x)) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (/.f64 z (*.f64 y x)))) (log.f64 (/.f64 -1 y)))","(+.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 z (neg.f64 x) z) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (/.f64 z (*.f64 y x))) (-.f64 (fma.f64 (/.f64 1/3 (pow.f64 x 3)) (pow.f64 (/.f64 (fma.f64 z (neg.f64 x) z) y) 3) (-.f64 (log.f64 (neg.f64 x)) (/.f64 z y))) (log.f64 (/.f64 -1 y))))","(log.f64 (*.f64 y x))","(fma.f64 -1 (neg.f64 (log.f64 y)) (log.f64 x))","(+.f64 (*.f64 (-.f64 (/.f64 1 (*.f64 y x)) (/.f64 1 y)) z) (log.f64 (*.f64 y x)))","(+.f64 (/.f64 z (*.f64 y x)) (fma.f64 -1 (/.f64 z y) (fma.f64 -1 (neg.f64 (log.f64 y)) (log.f64 x))))","(+.f64 (/.f64 z (*.f64 y x)) (-.f64 (log.f64 (*.f64 y x)) (/.f64 z y)))","(+.f64 (*.f64 (-.f64 (/.f64 1 (*.f64 y x)) (/.f64 1 y)) z) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 2) (pow.f64 z 2)) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (log.f64 (*.f64 y x))))","(fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (+.f64 (/.f64 z (*.f64 y x)) (fma.f64 -1 (/.f64 z y) (fma.f64 -1 (neg.f64 (log.f64 y)) (log.f64 x)))))","(+.f64 (-.f64 (log.f64 (*.f64 y x)) (/.f64 z y)) (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 z (*.f64 z x)) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (/.f64 z (*.f64 y x))))","(+.f64 (-.f64 (log.f64 (*.f64 y x)) (/.f64 z y)) (fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 z (neg.f64 x) z) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (/.f64 z (*.f64 y x))))","(+.f64 (*.f64 (-.f64 (/.f64 1 (*.f64 y x)) (/.f64 1 y)) z) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 2) (pow.f64 z 2)) (*.f64 (pow.f64 y 2) (pow.f64 x 2)))) (+.f64 (log.f64 (*.f64 y x)) (*.f64 1/3 (/.f64 (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 3) (pow.f64 z 3)) (*.f64 (pow.f64 y 3) (pow.f64 x 3)))))))","(fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 2) (*.f64 (*.f64 x x) (*.f64 y y))) (+.f64 (/.f64 z (*.f64 y x)) (fma.f64 1/3 (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 -1 (/.f64 z y) (fma.f64 -1 (neg.f64 (log.f64 y)) (log.f64 x))))))","(+.f64 (fma.f64 1/3 (/.f64 (pow.f64 (-.f64 z (*.f64 z x)) 3) (*.f64 (pow.f64 x 3) (pow.f64 y 3))) (-.f64 (log.f64 (*.f64 y x)) (/.f64 z y))) (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 z (*.f64 z x)) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (/.f64 z (*.f64 y x))))","(+.f64 (fma.f64 1/3 (/.f64 (pow.f64 (/.f64 (fma.f64 z (neg.f64 x) z) x) 3) (pow.f64 y 3)) (-.f64 (log.f64 (*.f64 y x)) (/.f64 z y))) (fma.f64 -1/2 (/.f64 (pow.f64 (fma.f64 z (neg.f64 x) z) 2) (*.f64 y (*.f64 y (*.f64 x x)))) (/.f64 z (*.f64 y x))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 1 (*.f64 -1 x))))","(log.f64 (fma.f64 -1 (*.f64 z x) z))","(log.f64 (-.f64 z (*.f64 z x)))","(log.f64 (fma.f64 z (neg.f64 x) z))","(+.f64 (/.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 x)) z)) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (log.f64 (+.f64 1 (*.f64 -1 x)))))","(+.f64 (log.f64 (fma.f64 -1 (*.f64 z x) z)) (/.f64 y (/.f64 (fma.f64 -1 (*.f64 z x) z) x)))","(+.f64 (log.f64 (-.f64 z (*.f64 z x))) (*.f64 (/.f64 y z) (/.f64 x (-.f64 1 x))))","(fma.f64 (/.f64 y (fma.f64 z (neg.f64 x) z)) x (log.f64 (fma.f64 z (neg.f64 x) z)))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 2) (pow.f64 z 2)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (+.f64 (/.f64 (*.f64 y x) (*.f64 z (+.f64 1 (*.f64 -1 x)))) (log.f64 (+.f64 1 (*.f64 -1 x))))))","(fma.f64 -1/2 (/.f64 (*.f64 y y) (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 2) (*.f64 x x))) (+.f64 (log.f64 (fma.f64 -1 (*.f64 z x) z)) (/.f64 y (/.f64 (fma.f64 -1 (*.f64 z x) z) x))))","(+.f64 (*.f64 (/.f64 y z) (/.f64 x (-.f64 1 x))) (fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (-.f64 z (*.f64 z x)) 2)) (*.f64 x x)) (log.f64 (-.f64 z (*.f64 z x)))))","(fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (fma.f64 z (neg.f64 x) z) 2)) (*.f64 x x)) (fma.f64 (/.f64 y (fma.f64 z (neg.f64 x) z)) x (log.f64 (fma.f64 z (neg.f64 x) z))))","(+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 2) (pow.f64 z 2)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 1 z))) (+.f64 (/.f64 (*.f64 y x) (*.f64 z (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 1/3 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (*.f64 (pow.f64 (+.f64 1 (*.f64 -1 x)) 3) (pow.f64 z 3)))) (log.f64 (+.f64 1 (*.f64 -1 x)))))))","(fma.f64 -1/2 (/.f64 (*.f64 y y) (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 2) (*.f64 x x))) (+.f64 (log.f64 (fma.f64 -1 (*.f64 z x) z)) (fma.f64 1/3 (/.f64 (pow.f64 y 3) (/.f64 (pow.f64 (fma.f64 -1 (*.f64 z x) z) 3) (pow.f64 x 3))) (/.f64 y (/.f64 (fma.f64 -1 (*.f64 z x) z) x)))))","(+.f64 (fma.f64 1/3 (*.f64 (/.f64 (pow.f64 y 3) (pow.f64 (-.f64 z (*.f64 z x)) 3)) (pow.f64 x 3)) (*.f64 (/.f64 y z) (/.f64 x (-.f64 1 x)))) (fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (-.f64 z (*.f64 z x)) 2)) (*.f64 x x)) (log.f64 (-.f64 z (*.f64 z x)))))","(fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (fma.f64 z (neg.f64 x) z) 2)) (*.f64 x x)) (fma.f64 (/.f64 y z) (/.f64 x (-.f64 1 x)) (fma.f64 1/3 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 (fma.f64 z (neg.f64 x) z) y) 3)) (log.f64 (fma.f64 z (neg.f64 x) z)))))","(+.f64 (log.f64 (-.f64 x 1)) (*.f64 -1 (log.f64 (/.f64 -1 z))))","(+.f64 (log.f64 (+.f64 x -1)) (neg.f64 (log.f64 (/.f64 -1 z))))","(-.f64 (log.f64 (+.f64 x -1)) (log.f64 (/.f64 -1 z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))) (+.f64 (log.f64 (-.f64 x 1)) (*.f64 -1 (log.f64 (/.f64 -1 z)))))","(fma.f64 -1 (*.f64 (/.f64 y (+.f64 x -1)) (/.f64 x z)) (+.f64 (log.f64 (+.f64 x -1)) (neg.f64 (log.f64 (/.f64 -1 z)))))","(-.f64 (-.f64 (log.f64 (+.f64 x -1)) (log.f64 (/.f64 -1 z))) (*.f64 (/.f64 y z) (/.f64 x (+.f64 x -1))))","(-.f64 (-.f64 (log.f64 (+.f64 x -1)) (*.f64 (/.f64 y z) (/.f64 x (+.f64 x -1)))) (log.f64 (/.f64 -1 z)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (*.f64 (pow.f64 (-.f64 x 1) 2) (pow.f64 z 2)))) (+.f64 (log.f64 (-.f64 x 1)) (*.f64 -1 (log.f64 (/.f64 -1 z))))))","(fma.f64 -1 (*.f64 (/.f64 y (+.f64 x -1)) (/.f64 x z)) (fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (+.f64 x -1) 2)) (/.f64 (*.f64 x x) (*.f64 z z))) (+.f64 (log.f64 (+.f64 x -1)) (neg.f64 (log.f64 (/.f64 -1 z))))))","(-.f64 (-.f64 (fma.f64 -1/2 (*.f64 (*.f64 (/.f64 x z) (/.f64 x z)) (/.f64 (*.f64 y y) (pow.f64 (+.f64 x -1) 2))) (log.f64 (+.f64 x -1))) (log.f64 (/.f64 -1 z))) (*.f64 (/.f64 y z) (/.f64 x (+.f64 x -1))))","(-.f64 (fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (fma.f64 z (neg.f64 x) z) 2)) (*.f64 x x)) (-.f64 (log.f64 (+.f64 x -1)) (log.f64 (/.f64 -1 z)))) (*.f64 (/.f64 y z) (/.f64 x (+.f64 x -1))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))) (+.f64 (*.f64 -1/3 (/.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3)) (*.f64 (pow.f64 (-.f64 x 1) 3) (pow.f64 z 3)))) (+.f64 (*.f64 -1/2 (/.f64 (*.f64 (pow.f64 y 2) (pow.f64 x 2)) (*.f64 (pow.f64 (-.f64 x 1) 2) (pow.f64 z 2)))) (+.f64 (log.f64 (-.f64 x 1)) (*.f64 -1 (log.f64 (/.f64 -1 z)))))))","(fma.f64 -1 (*.f64 (/.f64 y (+.f64 x -1)) (/.f64 x z)) (fma.f64 -1/3 (*.f64 (/.f64 (pow.f64 y 3) (pow.f64 (+.f64 x -1) 3)) (/.f64 (pow.f64 x 3) (pow.f64 z 3))) (fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (+.f64 x -1) 2)) (/.f64 (*.f64 x x) (*.f64 z z))) (+.f64 (log.f64 (+.f64 x -1)) (neg.f64 (log.f64 (/.f64 -1 z)))))))","(-.f64 (fma.f64 -1/3 (*.f64 (/.f64 (pow.f64 y 3) (*.f64 (pow.f64 z 3) (pow.f64 (+.f64 x -1) 3))) (pow.f64 x 3)) (-.f64 (fma.f64 -1/2 (*.f64 (*.f64 (/.f64 x z) (/.f64 x z)) (/.f64 (*.f64 y y) (pow.f64 (+.f64 x -1) 2))) (log.f64 (+.f64 x -1))) (log.f64 (/.f64 -1 z)))) (*.f64 (/.f64 y z) (/.f64 x (+.f64 x -1))))","(-.f64 (fma.f64 -1/3 (*.f64 (pow.f64 (/.f64 y (+.f64 x -1)) 3) (pow.f64 (/.f64 x z) 3)) (fma.f64 -1/2 (*.f64 (/.f64 (*.f64 y y) (pow.f64 (fma.f64 z (neg.f64 x) z) 2)) (*.f64 x x)) (-.f64 (log.f64 (+.f64 x -1)) (log.f64 (/.f64 -1 z))))) (*.f64 (/.f64 y z) (/.f64 x (+.f64 x -1))))"]],"stop":[["node limit",1]],"time":39.697998046875,"type":"simplify"},{"compiler":[[2897,1367]],"time":25.719970703125,"type":"eval"},{"alts":[["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","done",33.42617713751815],["(fma.f64 x (-.f64 y z) z)","done",0.00390625]],"compiler":[[11,7],[9,5]],"count":[[153,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[151,0],"picked":[1,1]}],"min-error":[0],"time":19.038818359375,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[26,12]],"count":[[3,1]],"inputs":[["(exp.f64 (log.f64 (fma.f64 x (-.f64 y z) z)))","(fma.f64 x (-.f64 y z) z)","(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))"]],"link":["."],"name":["Diagrams.Backend.Rasterific:$crender from diagrams-rasterific-1.3.1.3"],"oracle":[33.43008338751815],"outputs":[["(fma.f64 x (-.f64 y z) z)"]],"time":13.09521484375,"times":[["x",3.197021484375],["y",3.0439453125],["z",3.046142578125],["(+.f64 (*.f64 x y) (*.f64 (-.f64 1 x) z))",3.1201171875]],"type":"regimes"},{"compiler":[[9,5]],"egraph":[[4,16,8,9.4374e-5],[3,15,8,7.4541e-5],[2,13,8,5.5208000000000004e-5],[1,8,8,3.6374e-5],[0,6,8,1.5708e-5]],"inputs":[["(fma.f64 x (-.f64 y z) z)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (-.f64 y z) z)"]],"stop":[["done",1],["saturated",1]],"time":8.2998046875,"type":"simplify"},{"time":0.010986328125,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.68212890625,"type":"end"}]
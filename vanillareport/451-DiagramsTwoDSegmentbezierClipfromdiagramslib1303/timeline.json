[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4407599744804429,0.09117633580581241],[11,0.40565519775191206,0.5382732431708064,0.05607155907728156],[10,0.34324670579007943,0.600681735132639,0.05607155907728156],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":89.928955078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",48.3095703125,1198],["body",256,"valid",336.057373046875,8256]],"time":393.317138671875,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,2.042e-6],[12,2864,32,0.057477833000000006],[11,2864,32,0.049033958],[10,2863,32,0.041601999],[9,2788,32,0.034106208],[8,2490,32,0.026225083000000003],[7,1869,32,0.018095167000000002],[6,1142,32,0.010107251000000001],[5,680,32,0.005585292],[4,337,36,0.002812083],[3,151,44,0.001184208],[2,87,44,0.000535083],[1,43,44,0.00024324999999999998],[0,20,44,9.1208e-5]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(+.f64 (*.f64 z y) (*.f64 x (-.f64 1 y)))","(+.f64 (*.f64 x z) (*.f64 y (-.f64 1 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","(fma.f64 x y (*.f64 z (-.f64 1 y)))","(fma.f64 x y (-.f64 z (*.f64 y z)))","(fma.f64 y (fma.f64 z -1 x) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 x)))","(fma.f64 y x (*.f64 z (-.f64 1 x)))","(fma.f64 x y (*.f64 z (-.f64 1 x)))","(fma.f64 x y (fma.f64 z (neg.f64 x) z))","(fma.f64 x (fma.f64 z -1 y) z)","(fma.f64 x (-.f64 y z) z)","(+.f64 (*.f64 z y) (*.f64 x (-.f64 1 y)))","(fma.f64 z y (*.f64 x (-.f64 1 y)))","(fma.f64 x (-.f64 1 y) (*.f64 y z))","(-.f64 (fma.f64 y z x) (*.f64 x y))","(fma.f64 y (fma.f64 x -1 z) x)","(fma.f64 y (-.f64 z x) x)","(+.f64 (*.f64 x z) (*.f64 y (-.f64 1 z)))","(fma.f64 x z (*.f64 y (-.f64 1 z)))","(fma.f64 x z (fma.f64 z (neg.f64 y) y))","(fma.f64 z (fma.f64 y -1 x) y)","(fma.f64 z (-.f64 x y) y)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":81.40087890625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[11,1223,8,0.018037916],[10,1213,8,0.015052291],[9,1153,8,0.012054999],[8,969,8,0.008785833],[7,558,8,0.005614458],[6,347,8,0.0028977910000000003],[5,218,8,0.0017108330000000001],[4,126,9,0.0009814160000000001],[3,57,11,0.000451124],[2,30,11,0.000226083],[1,17,11,0.000113166],[0,9,11,4.8208e-5]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","(fma.f64 x y (*.f64 z (-.f64 1 y)))","(fma.f64 z (-.f64 1 y) (*.f64 x y))","(-.f64 (fma.f64 x y z) (*.f64 y z))","(fma.f64 y (fma.f64 z -1 x) z)","(fma.f64 y (-.f64 x z) z)"]],"stop":[["saturated",1]],"time":29.592041015625,"type":"simplify"},{"compiler":[[18,10]],"time":0.31201171875,"type":"eval"},{"alts":[["(fma.f64 y (-.f64 x z) z)","next",0.00390625],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","fresh",0.028601281620653757]],"compiler":[[9,5],[12,8],[9,5],[12,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0],"time":1.19091796875,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 y (-.f64 x z) z)",0.00390625,true]],"time":3.4609375,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 y (-.f64 x z) z)","z","-inf",0.336181640625],["(fma.f64 y (-.f64 x z) z)","z","inf",0.30517578125],["(fma.f64 y (-.f64 x z) z)","z","0",0.37890625],["(fma.f64 y (-.f64 x z) z)","x","-inf",0.302978515625],["(fma.f64 y (-.f64 x z) z)","x","inf",0.32080078125],["(fma.f64 y (-.f64 x z) z)","x","0",0.26806640625],["(fma.f64 y (-.f64 x z) z)","y","-inf",0.388916015625],["(fma.f64 y (-.f64 x z) z)","y","inf",0.345947265625],["(fma.f64 y (-.f64 x z) z)","y","0",0.327880859375]],"time":3.089111328125,"type":"series"},{"count":[[1,21]],"egraph":[[2,1797,8,0.017587334],[1,130,8,0.002326834],[0,6,8,0.000149709]],"inputs":[["(fma.f64 y (-.f64 x z) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 y (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 x z)) z)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (-.f64 x z)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y (-.f64 x z) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (-.f64 x z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (-.f64 x z) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (-.f64 x z) z)) (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 x z) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 x z) z)) 2) (cbrt.f64 (fma.f64 y (-.f64 x z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (-.f64 x z) z)) (sqrt.f64 (fma.f64 y (-.f64 x z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (-.f64 x z)) 3) (pow.f64 z 3)) (+.f64 (*.f64 (*.f64 y (-.f64 x z)) (*.f64 y (-.f64 x z))) (-.f64 (*.f64 z z) (*.f64 (*.f64 y (-.f64 x z)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y (-.f64 x z)) (*.f64 y (-.f64 x z))) (*.f64 z z)) (-.f64 (*.f64 y (-.f64 x z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (-.f64 x z) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (-.f64 x z) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (-.f64 x z) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (-.f64 x z) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (-.f64 x z) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (-.f64 x z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (-.f64 x z) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (-.f64 x z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (-.f64 x z) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (-.f64 x z) z)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":35.405029296875,"type":"rewrite"},{"count":[[57,33]],"egraph":[[9,1444,264,0.019930041000000003],[8,1442,264,0.016960083],[7,1410,264,0.013931458],[6,1123,264,0.010710250000000001],[5,775,264,0.006792416000000001],[4,377,264,0.0036078330000000004],[3,205,264,0.0016069580000000001],[2,123,264,0.0008749160000000001],[1,63,264,0.00040995800000000003],[0,24,267,0.00013975]],"inputs":[["z","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(*.f64 (+.f64 1 (*.f64 -1 y)) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(*.f64 -1 (*.f64 z (-.f64 y 1)))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))"]],"method":["egg-herbie"],"outputs":[["z","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y (-.f64 x z)) z)","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(fma.f64 -1 (*.f64 z y) z)","(fma.f64 (neg.f64 y) z z)","(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 y z)) z))","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 y x) z))","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(*.f64 (+.f64 1 (*.f64 -1 y)) z)","(fma.f64 -1 (*.f64 z y) z)","(fma.f64 (neg.f64 y) z z)","(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 (+.f64 1 (*.f64 -1 y)) z))","(fma.f64 y (-.f64 x z) z)","(*.f64 -1 (*.f64 z (-.f64 y 1)))","(fma.f64 -1 (*.f64 z y) z)","(fma.f64 (neg.f64 y) z z)","(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 z (-.f64 y 1))))","(fma.f64 y (-.f64 x z) z)"]],"stop":[["saturated",1]],"time":35.891845703125,"type":"simplify"},{"compiler":[[330,104]],"time":3.239013671875,"type":"eval"},{"alts":[["(fma.f64 y (-.f64 x z) z)","done",0.00390625],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","next",0.028601281620653757]],"compiler":[[9,5],[12,8],[12,8]],"count":[[35,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[33,0],"picked":[1,1]}],"min-error":[0],"time":5.43017578125,"type":"prune"},{"compiler":[[27,14]],"locations":[["(*.f64 z (-.f64 1 y))",0.0078125,true],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))",0.028601281620653757,true]],"time":6.115966796875,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 z (-.f64 1 y))","y","-inf",0.14599609375],["(*.f64 z (-.f64 1 y))","y","inf",0.172119140625],["(*.f64 z (-.f64 1 y))","y","0",0.149169921875],["(*.f64 z (-.f64 1 y))","z","-inf",0.215087890625],["(*.f64 z (-.f64 1 y))","z","inf",0.19677734375],["(*.f64 z (-.f64 1 y))","z","0",0.2529296875],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","z","-inf",0.31591796875],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","z","inf",0.27294921875],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","z","0",0.30810546875],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","y","-inf",0.299072265625],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","y","inf",0.3759765625],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","y","0",0.573974609375],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","x","-inf",0.263916015625],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","x","inf",0.287109375],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","x","0",0.363037109375]],"time":4.35595703125,"type":"series"},{"count":[[2,122]],"egraph":[[2,2623,18,0.025225083],[1,192,18,0.003419875],[0,9,18,0.000223083]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","(*.f64 z (-.f64 1 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x y) 2) (-.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))) (/.f64 (pow.f64 (*.f64 z (-.f64 1 y)) 2) (-.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (-.f64 1 y) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))) (pow.f64 (cbrt.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))) 2) (cbrt.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))) (sqrt.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z (-.f64 1 y)) 3)) (/.f64 1 (fma.f64 (*.f64 z (-.f64 1 y)) (-.f64 (*.f64 z (-.f64 1 y)) (*.f64 x y)) (pow.f64 (*.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z (-.f64 1 y)) 2)) (/.f64 1 (-.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 z (-.f64 1 y)) (-.f64 (*.f64 z (-.f64 1 y)) (*.f64 x y)) (pow.f64 (*.f64 x y) 2)) (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z (-.f64 1 y)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 x y) (*.f64 z (-.f64 1 y))) (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z (-.f64 1 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z (-.f64 1 y)) 3)) (fma.f64 (*.f64 z (-.f64 1 y)) (-.f64 (*.f64 z (-.f64 1 y)) (*.f64 x y)) (pow.f64 (*.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z (-.f64 1 y)) 3)) (+.f64 (pow.f64 (*.f64 z (-.f64 1 y)) 2) (-.f64 (pow.f64 (*.f64 x y) 2) (*.f64 (*.f64 x y) (*.f64 z (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z (-.f64 1 y)) 2)) (-.f64 (*.f64 x y) (*.f64 z (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z (-.f64 1 y)) 3))) (neg.f64 (fma.f64 (*.f64 z (-.f64 1 y)) (-.f64 (*.f64 z (-.f64 1 y)) (*.f64 x y)) (pow.f64 (*.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z (-.f64 1 y)) 2))) (neg.f64 (-.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 z (-.f64 1 y)) 2) (pow.f64 (*.f64 x y) 2)) (-.f64 (*.f64 z (-.f64 1 y)) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 z (-.f64 1 y)) (-.f64 (*.f64 z (-.f64 1 y)) (*.f64 x y)) (pow.f64 (*.f64 x y) 2)) (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 z (-.f64 1 y)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 z (-.f64 1 y))) (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 z (-.f64 1 y)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)))) 2)) (cbrt.f64 (log.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))))) (sqrt.f64 (log.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (pow.f64 (exp.f64 (-.f64 1 y)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) y) (+.f64 1 (expm1.f64 (*.f64 z (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (+.f64 1 (expm1.f64 (*.f64 z (-.f64 1 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z (-.f64 1 y)))) (pow.f64 (exp.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (-.f64 1 y)) z) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 z (-.f64 1 y)))) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 z (-.f64 1 y) (*.f64 x y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (-.f64 1 y) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z (-.f64 1 y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 y) z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (-.f64 1 y)) 1 (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 z (-.f64 1 y))) (pow.f64 (cbrt.f64 (*.f64 z (-.f64 1 y))) 2) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z (-.f64 1 y))) 2) (cbrt.f64 (*.f64 z (-.f64 1 y))) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) (-.f64 1 y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) y) (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 y)) 2) (*.f64 (cbrt.f64 (-.f64 1 y)) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z (-.f64 1 y))) (sqrt.f64 (*.f64 z (-.f64 1 y))) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) (-.f64 1 y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 y)) (*.f64 (sqrt.f64 (-.f64 1 y)) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (pow.f64 (cbrt.f64 (-.f64 1 y)) 2)) (cbrt.f64 (-.f64 1 y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 (-.f64 1 y))) (sqrt.f64 (-.f64 1 y)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 y) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (-.f64 1 y) (sqrt.f64 z)) (sqrt.f64 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (*.f64 z (-.f64 1 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 (neg.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 z (*.f64 z (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (-.f64 1 y)) z)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (-.f64 1 y)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (-.f64 1 y)) z))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (-.f64 1 y)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 z (-.f64 1 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (pow.f64 y 3)) z) (fma.f64 y (+.f64 y 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 y y)) z) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (-.f64 1 (pow.f64 y 3))) (fma.f64 y (+.f64 y 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (-.f64 1 (*.f64 y y))) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (-.f64 1 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 z (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (-.f64 1 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (-.f64 1 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (-.f64 1 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (-.f64 1 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 z (-.f64 1 y)))) 2)) (cbrt.f64 (log.f64 (*.f64 z (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 z (-.f64 1 y))))) (sqrt.f64 (log.f64 (*.f64 z (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (-.f64 1 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (-.f64 1 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 z (-.f64 1 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (-.f64 1 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (-.f64 1 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 z (-.f64 1 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (-.f64 1 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 z (-.f64 1 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 z (-.f64 1 y)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (-.f64 1 y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 z (-.f64 1 y))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (log1p.f64 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 z) (*.f64 (log1p.f64 (neg.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (*.f64 (log1p.f64 (neg.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log1p.f64 (neg.f64 y)) 1) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log1p.f64 (neg.f64 y)) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log1p.f64 (neg.f64 y)) 1) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z 1 (*.f64 (neg.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z 1 (*.f64 z (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 z (*.f64 (neg.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 z (*.f64 z (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 z) 2) (*.f64 (neg.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 z) 2) (*.f64 z (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (cbrt.f64 z) (*.f64 (neg.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (cbrt.f64 z) (*.f64 z (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (sqrt.f64 z) (*.f64 (neg.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (sqrt.f64 z) (*.f64 z (neg.f64 y)))))))"]],"rules":[["egg-rr",47],["egg-rr",75]],"stop":[["node limit",1]],"time":49.35791015625,"type":"rewrite"},{"count":[[170,136]],"egraph":[[8,1183,340,0.017576791],[7,1181,340,0.014535582000000002],[6,1114,340,0.011474499],[5,859,340,0.008091416],[4,512,340,0.004460499],[3,253,340,0.002065958],[2,133,340,0.000955499],[1,63,340,0.000410791],[0,22,423,0.000137625]],"inputs":[["(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","z","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(*.f64 y (+.f64 (*.f64 -1 z) x))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(*.f64 z (-.f64 1 y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","z","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 -1 (*.f64 y z))","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(+.f64 (*.f64 -1 (*.f64 y z)) z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","z","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 y (+.f64 (*.f64 -1 z) x))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 z (*.f64 y (+.f64 (*.f64 -1 z) x)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z)))","(*.f64 y (fma.f64 -1 z x))","(*.f64 y (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 x) z))) z)","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 y x) (*.f64 z (-.f64 1 y)))","(fma.f64 y x (*.f64 z (-.f64 1 y)))","(fma.f64 y (-.f64 x z) z)","z","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 z y))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))","(*.f64 -1 (*.f64 y z))","(neg.f64 (*.f64 z y))","(*.f64 y (neg.f64 z))","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))","(+.f64 (*.f64 -1 (*.f64 y z)) z)","(*.f64 z (-.f64 1 y))","(-.f64 z (*.f64 z y))"]],"stop":[["saturated",1]],"time":35.528076171875,"type":"simplify"},{"compiler":[[1963,1044]],"time":22.889892578125,"type":"eval"},{"alts":[["(fma.f64 y (-.f64 x z) z)","done",0.00390625],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))","done",0.028601281620653757]],"compiler":[[9,5],[12,8]],"count":[[138,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[136,0],"picked":[1,1]}],"min-error":[0],"time":28.76416015625,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[18,10]],"count":[[2,1]],"inputs":[["(fma.f64 y (-.f64 x z) z)","(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))"]],"link":["."],"name":["Diagrams.TwoD.Segment:bezierClip from diagrams-lib-1.3.0.3"],"oracle":[0.03250753162065376],"outputs":[["(fma.f64 y (-.f64 x z) z)"]],"time":11.58984375,"times":[["x",2.77001953125],["y",2.85693359375],["z",2.631103515625],["(+.f64 (*.f64 x y) (*.f64 z (-.f64 1 y)))",2.76806640625]],"type":"regimes"},{"compiler":[[9,5]],"egraph":[[4,16,8,9.475e-5],[3,15,8,7.5584e-5],[2,13,8,5.6334e-5],[1,8,8,3.7625e-5],[0,6,8,1.6875e-5]],"inputs":[["(fma.f64 y (-.f64 x z) z)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y (-.f64 x z) z)"]],"stop":[["done",1],["saturated",1]],"time":8.570068359375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.703125,"type":"end"}]
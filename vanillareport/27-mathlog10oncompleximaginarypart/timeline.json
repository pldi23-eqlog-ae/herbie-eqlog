[{"compiler":[[9,7]],"method":["search"],"sampling":[[3,0.9990236759185791,0.0,0.0009763240814208984],[2,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":0.35302734375,"type":"analyze"},{"outcomes":[["body",256,"valid",351.927001953125,8256]],"time":359.0830078125,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,2,2,1.75e-6],[0,9,18,4.125e-5]],"inputs":[["0","1"],["(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 re im) (log.f64 10))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 re im) (log.f64 10))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.391845703125,"type":"preprocess"},{"count":[[1,1]],"egraph":[[0,7,9,3.1709e-5]],"inputs":[["(/.f64 (atan2.f64 im re) (log.f64 10))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (atan2.f64 im re) (log.f64 10))"]],"stop":[["saturated",1]],"time":9.97607421875,"type":"simplify"},{"compiler":[[8,6]],"time":0.23193359375,"type":"eval"},{"alts":[["(/.f64 (atan2.f64 im re) (log.f64 10))","next",0.874042529305326]],"compiler":[[8,6],[8,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.874042529305326],"time":0.68798828125,"type":"prune"},{"compiler":[[16,9]],"locations":[["(/.f64 (atan2.f64 im re) (log.f64 10))",0.8740425293053261,true]],"time":4.912109375,"type":"localize"},{"count":[[1,0]],"series":[["(/.f64 (atan2.f64 im re) (log.f64 10))","re","-inf",0.367919921875],["(/.f64 (atan2.f64 im re) (log.f64 10))","re","inf",0.35107421875],["(/.f64 (atan2.f64 im re) (log.f64 10))","re","0",3.972900390625],["(/.f64 (atan2.f64 im re) (log.f64 10))","im","-inf",0.369873046875],["(/.f64 (atan2.f64 im re) (log.f64 10))","im","inf",0.382080078125],["(/.f64 (atan2.f64 im re) (log.f64 10))","im","0",14.260986328125]],"time":19.77392578125,"type":"series"},{"count":[[1,31]],"egraph":[[2,1701,9,0.017386041],[1,141,9,0.002359958],[0,7,9,0.000196291]],"inputs":[["(/.f64 (atan2.f64 im re) (log.f64 10))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (atan2.f64 im re) (log.f64 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 1 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) 2) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (*.f64 (cbrt.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (atan2.f64 im re)) (*.f64 (sqrt.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 10)) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) 1) (/.f64 (sqrt.f64 (atan2.f64 im re)) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (log.f64 10)) 2)) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (pow.f64 (cbrt.f64 (log.f64 10)) 2)) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) (pow.f64 (cbrt.f64 (log.f64 10)) 2)) (/.f64 (sqrt.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (sqrt.f64 (log.f64 10))) (/.f64 (cbrt.f64 (atan2.f64 im re)) (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 10) (atan2.f64 im re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 10) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))))"]],"rules":[["egg-rr",31]],"stop":[["node limit",1]],"time":35.819091796875,"type":"rewrite"},{"count":[[31,31]],"egraph":[[0,0,0,2.0375e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.136962890625,"type":"simplify"},{"compiler":[[360,227]],"time":4.700927734375,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","fresh",0.864608789073768],["(/.f64 (atan2.f64 im re) (log.f64 10))","done",0.874042529305326],["(neg.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))","next",0.10546875],["(pow.f64 (/.f64 (log.f64 10) (atan2.f64 im re)) -1)","fresh",1.2785240996035092]],"compiler":[[15,13],[8,6],[9,7],[10,8],[15,13],[9,7],[10,8]],"count":[[32,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[31,3],"picked":[1,1]}],"min-error":[0.00390625],"time":6.409912109375,"type":"prune"},{"compiler":[[23,13]],"locations":[["(/.f64 (atan2.f64 im re) (log.f64 1/10))",0.8740425293053261,true],["(log.f64 1/10)",1.0,true]],"time":6.864013671875,"type":"localize"},{"count":[[2,0]],"series":[["(/.f64 (atan2.f64 im re) (log.f64 1/10))","re","-inf",0.35107421875],["(/.f64 (atan2.f64 im re) (log.f64 1/10))","re","inf",0.360107421875],["(/.f64 (atan2.f64 im re) (log.f64 1/10))","re","0",3.7470703125],["(/.f64 (atan2.f64 im re) (log.f64 1/10))","im","-inf",0.351806640625],["(/.f64 (atan2.f64 im re) (log.f64 1/10))","im","inf",0.362060546875],["(/.f64 (atan2.f64 im re) (log.f64 1/10))","im","0",9.72314453125]],"time":14.965087890625,"type":"series"},{"count":[[2,46]],"egraph":[[2,1700,12,0.017548708],[1,141,12,0.0024402919999999997],[0,7,12,0.000201875]],"inputs":[["(log.f64 1/10)","(/.f64 (atan2.f64 im re) (log.f64 1/10))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 1/10)) (pow.f64 (cbrt.f64 (log.f64 1/10)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 1/10)) 2) (cbrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 1/10)) (sqrt.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 1/10) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 1/10)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 1/10)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 1/10) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 1/10) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 -9/10)))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 1/10)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (atan2.f64 im re) (log.f64 1/10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (/.f64 1 (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (*.f64 (cbrt.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))) (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))) 2) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (atan2.f64 im re)) (*.f64 (sqrt.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))) (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 1/10)) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) 1) (/.f64 (sqrt.f64 (atan2.f64 im re)) (log.f64 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (log.f64 1/10)) 2)) (/.f64 (atan2.f64 im re) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (pow.f64 (cbrt.f64 (log.f64 1/10)) 2)) (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) (pow.f64 (cbrt.f64 (log.f64 1/10)) 2)) (/.f64 (sqrt.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (log.f64 1/10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (sqrt.f64 (log.f64 1/10))) (/.f64 (cbrt.f64 (atan2.f64 im re)) (sqrt.f64 (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 1/10) (atan2.f64 im re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (atan2.f64 im re) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 1/10) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10))))))))"]],"rules":[["egg-rr",31],["egg-rr",15]],"stop":[["node limit",1]],"time":38.2861328125,"type":"rewrite"},{"count":[[46,46]],"egraph":[[0,0,0,2.0167e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.27978515625,"type":"simplify"},{"compiler":[[545,367]],"time":7.357177734375,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","next",0.864608789073768],["(/.f64 (atan2.f64 im re) (log.f64 10))","done",0.874042529305326],["(neg.f64 (cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 1/10) 3))))","fresh",5.812696698359929],["(neg.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))","done",0.10546875],["(pow.f64 (/.f64 (log.f64 10) (atan2.f64 im re)) -1)","fresh",1.2785240996035092]],"compiler":[[15,13],[8,6],[14,12],[9,7],[10,8],[15,13],[14,12],[10,8]],"count":[[50,5]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[46,1],"picked":[1,1]}],"min-error":[0],"time":7.533935546875,"type":"prune"},{"compiler":[[39,29]],"locations":[["(/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))",0.11328125,true],["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))",0.78515625,true]],"time":12.43896484375,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))","re","-inf",0.2900390625],["(/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))","re","inf",0.31494140625],["(/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))","re","0",0.366943359375],["(/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))","im","-inf",0.305908203125],["(/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))","im","inf",0.304931640625],["(/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))","im","0",0.619873046875],["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","re","-inf",0.160888671875],["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","re","inf",0.161865234375],["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","re","0",0.1640625],["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","im","-inf",0.166015625],["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","im","inf",0.184814453125],["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","im","0",0.201171875]],"time":3.39794921875,"type":"series"},{"count":[[2,153]],"egraph":[[2,2718,20,0.025777458],[1,222,20,0.003921166],[0,11,20,0.000305]],"inputs":[["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","(/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (atan2.f64 im re) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 10)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (log.f64 10)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (sqrt.f64 (log.f64 10)) (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re)) (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (log.f64 10) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sqrt.f64 (log.f64 10)) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (log.f64 10) -1/2) (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (atan2.f64 im re) (log.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (sqrt.f64 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (/.f64 (log.f64 10) (cbrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (log.f64 10))) (/.f64 (sqrt.f64 (log.f64 10)) (cbrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (atan2.f64 im re)) (/.f64 (log.f64 10) (sqrt.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) (/.f64 (sqrt.f64 (log.f64 10)) (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 (sqrt.f64 (log.f64 10))) (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re)) (neg.f64 (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (log.f64 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (neg.f64 (sqrt.f64 (log.f64 10))) (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (atan2.f64 im re)) (*.f64 (sqrt.f64 (log.f64 10)) (neg.f64 (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) (neg.f64 (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (atan2.f64 im re))) (pow.f64 (neg.f64 (sqrt.f64 (log.f64 10))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) 1) (*.f64 (neg.f64 (sqrt.f64 (log.f64 10))) (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (atan2.f64 im re) -1) (*.f64 (sqrt.f64 (log.f64 10)) (neg.f64 (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) -1) (pow.f64 (neg.f64 (sqrt.f64 (log.f64 10))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) 1) (log.f64 10))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (atan2.f64 im re) (pow.f64 (cbrt.f64 (log.f64 10)) 2)) (cbrt.f64 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) 1) (sqrt.f64 (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (cbrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) (neg.f64 (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -1/2)) (neg.f64 (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (log.f64 10) -1/2) (neg.f64 (atan2.f64 im re))) (neg.f64 (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) -1) (neg.f64 (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 10) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) 3) (pow.f64 (log.f64 10) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (log.f64 10)) (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re)) (sqrt.f64 (log.f64 10))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 10) (atan2.f64 im re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (log.f64 10)) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -1/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 10)))) 2)) (cbrt.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))) (sqrt.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (atan2.f64 im re) (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 10) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) 3) (pow.f64 (log.f64 10) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log.f64 10)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (log.f64 10))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) -1) (log.f64 (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (*.f64 -1/2 (log.f64 (log.f64 10))) 1) (log.f64 (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (atan2.f64 im re)) 1) (log.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (atan2.f64 im re)) (*.f64 (log.f64 (log.f64 10)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (atan2.f64 im re)) 1) (*.f64 (log.f64 (log.f64 10)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 1) (log.f64 (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) (*.f64 (log.f64 (log.f64 10)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 1) (*.f64 (log.f64 (log.f64 10)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 1) (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) -1) (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -1/2 (log.f64 (log.f64 10))) 1) (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 -1/2 (log.f64 (log.f64 10))) (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) -1) (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -1/2 (log.f64 (log.f64 10))) 1) (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (atan2.f64 im re)) 1) (neg.f64 (log.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 1) (*.f64 -1/2 (log.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 1) (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) (*.f64 (*.f64 -1/2 (log.f64 (log.f64 10))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 1) (*.f64 (*.f64 -1/2 (log.f64 (log.f64 10))) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -1/2) (atan2.f64 im re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (*.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (log.f64 10))) (*.f64 (pow.f64 (log.f64 10) -1/6) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) (cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (log.f64 10))) (cbrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (atan2.f64 im re)) (*.f64 (sqrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -1/4) (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 10) -1/4) (*.f64 (pow.f64 (log.f64 10) -1/4) (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (atan2.f64 im re)) (/.f64 1 (neg.f64 (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) 1) (/.f64 (cbrt.f64 (atan2.f64 im re)) (sqrt.f64 (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) 1) (sqrt.f64 (/.f64 (atan2.f64 im re) (log.f64 10))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (atan2.f64 im re)) (cbrt.f64 (log.f64 10))) (/.f64 (sqrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (cbrt.f64 (log.f64 10))) (cbrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (pow.f64 (log.f64 10) 1/4)) (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log.f64 10) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 10) -1/2) (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2)) (cbrt.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (log.f64 10) -1/2) (sqrt.f64 (atan2.f64 im re))) (sqrt.f64 (atan2.f64 im re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (cbrt.f64 (/.f64 1 (log.f64 10)))) (pow.f64 (log.f64 10) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log.f64 10) -1/4)) (pow.f64 (log.f64 10) -1/4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (log.f64 10)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 10) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 10) -1/6) (cbrt.f64 (atan2.f64 im re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))) 2)) (cbrt.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))) (sqrt.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (atan2.f64 im re) (neg.f64 (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (log.f64 10)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 10) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 (log.f64 10)) (atan2.f64 im re))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (atan2.f64 im re)) 1) (log.f64 (sqrt.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (atan2.f64 im re)) (*.f64 (log.f64 (log.f64 10)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (atan2.f64 im re)) 1) (*.f64 (log.f64 (log.f64 10)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (atan2.f64 im re)) (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (atan2.f64 im re)) 1) (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) -1) (log.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -1/2 (log.f64 (log.f64 10))) 1) (log.f64 (atan2.f64 im re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 -1/2 (log.f64 (log.f64 10))) (*.f64 (log.f64 (atan2.f64 im re)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) -1) (*.f64 (log.f64 (atan2.f64 im re)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -1/2 (log.f64 (log.f64 10))) 1) (*.f64 (log.f64 (atan2.f64 im re)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (atan2.f64 im re)) 1) (*.f64 -1/2 (log.f64 (log.f64 10)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (atan2.f64 im re)) (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (atan2.f64 im re)) 1) (*.f64 (log.f64 (sqrt.f64 (log.f64 10))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (atan2.f64 im re)) (*.f64 (*.f64 -1/2 (log.f64 (log.f64 10))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (atan2.f64 im re)) 1) (*.f64 (*.f64 -1/2 (log.f64 (log.f64 10))) 1)))))))"]],"rules":[["egg-rr",69],["egg-rr",84]],"stop":[["node limit",1]],"time":52.54296875,"type":"rewrite"},{"count":[[201,155]],"egraph":[[1,14,552,0.000198416],[0,11,552,0.000117041]],"inputs":[["(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))","(*.f64 (sqrt.f64 (/.f64 1 (log.f64 10))) (atan2.f64 im re))","(*.f64 (atan2.f64 im re) (sqrt.f64 (/.f64 1 (log.f64 10))))"]],"stop":[["saturated",1]],"time":14.840087890625,"type":"simplify"},{"compiler":[[2449,1866]],"time":31.68701171875,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","done",0.864608789073768],["(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))","next",0.11394501953688405],["(/.f64 (atan2.f64 im re) (log.f64 10))","done",0.874042529305326],["(neg.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))","done",0.10546875]],"compiler":[[15,13],[19,17],[8,6],[9,7],[19,17]],"count":[[160,4]],"kept":[{"done":[2,2],"fresh":[2,0],"new":[155,1],"picked":[1,1]}],"min-error":[0],"time":24.169921875,"type":"prune"},{"compiler":[[54,41]],"locations":[["(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))",0.06640625,true],["(/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10)))",0.11328125,false],["(/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4))",0.12109375,true]],"time":22.76513671875,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))","re","-inf",0.156005859375],["(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))","re","inf",0.174072265625],["(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))","re","0",0.147216796875],["(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))","im","-inf",0.1748046875],["(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))","im","inf",0.157958984375],["(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))","im","0",0.1611328125],["(/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4))","re","-inf",0.30908203125],["(/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4))","re","inf",0.343017578125],["(/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4))","re","0",5.793212890625],["(/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4))","im","-inf",0.302978515625],["(/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4))","im","inf",0.303955078125],["(/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4))","im","0",9.14501953125]],"time":17.35205078125,"type":"series"},{"count":[[2,95]],"egraph":[[2,3479,21,0.028223332],[1,261,21,0.004907499],[0,12,46,0.000372833]],"inputs":[["(/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4))","(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) -3/4))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) -3/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) -3/4)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) -3/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9))) (pow.f64 (log1p.f64 9) -1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) (pow.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) 2) (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (log1p.f64 9))) (*.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9)))) (pow.f64 (log1p.f64 9) -1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))) (sqrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9)))) (/.f64 (sqrt.f64 (atan2.f64 im re)) (sqrt.f64 (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9)))) (*.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9)))) (pow.f64 (log1p.f64 9) -1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (sqrt.f64 (log1p.f64 9))) (/.f64 1 (neg.f64 (pow.f64 (log1p.f64 9) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 9) -1/4) (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) 1/6)) (/.f64 (pow.f64 (log1p.f64 9) -1/2) (pow.f64 (log1p.f64 9) 1/12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (atan2.f64 im re)) 2) (pow.f64 (log1p.f64 9) 1/4)) (/.f64 (cbrt.f64 (atan2.f64 im re)) (sqrt.f64 (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) 1) (pow.f64 (log1p.f64 9) -3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (log1p.f64 9))) 1) (/.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9)))) (pow.f64 (log1p.f64 9) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9)))) 1) (sqrt.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (log1p.f64 9) 1/6)) (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9))) (pow.f64 (log1p.f64 9) 1/12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (log1p.f64 9))) (pow.f64 (log1p.f64 9) 1/6)) (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9)))) (pow.f64 (log1p.f64 9) 1/6)) (/.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9)))) (pow.f64 (log1p.f64 9) 1/12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) 1/8)) (pow.f64 (log1p.f64 9) -5/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 9) -1/8) (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9))) (pow.f64 (log1p.f64 9) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (log1p.f64 9))) (pow.f64 (log1p.f64 9) 1/8)) (/.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9)))) (pow.f64 (log1p.f64 9) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (pow.f64 (log1p.f64 9) 3/2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 1 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 3/4)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 (sqrt.f64 (log1p.f64 9)) (atan2.f64 im re)) -3) (pow.f64 (log1p.f64 9) 3/4)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (sqrt.f64 (log1p.f64 9)) (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (log1p.f64 9) 3/4) (atan2.f64 im re)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (/.f64 1 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 3/4)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9))) (neg.f64 (pow.f64 (log1p.f64 9) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (pow.f64 (log1p.f64 9) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) -3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 (sqrt.f64 (log1p.f64 9)) (atan2.f64 im re)) -3) (pow.f64 (log1p.f64 9) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (atan2.f64 im re) (log1p.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9))) (pow.f64 (log1p.f64 9) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)) (pow.f64 (log1p.f64 9) -1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (atan2.f64 im re) (log1p.f64 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) 2) (*.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) (pow.f64 (log1p.f64 9) -1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))) (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))) 2) (cbrt.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))) (*.f64 (sqrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))) (pow.f64 (log1p.f64 9) -1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))) (sqrt.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 3/4)) (/.f64 1 (neg.f64 (pow.f64 (log1p.f64 9) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 9) -1/4) (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 9) -1/2) (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) 1/4)) (pow.f64 (log1p.f64 9) -3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (log1p.f64 9) 1/6)) (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)) (pow.f64 (log1p.f64 9) 1/12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 9) -1/8) (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)) (pow.f64 (log1p.f64 9) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9))) (pow.f64 (log1p.f64 9) 1/8)) (pow.f64 (log1p.f64 9) -3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 2) (log1p.f64 9))) (pow.f64 (log1p.f64 9) 1/4)) (/.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9)))) (pow.f64 (log1p.f64 9) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9))) 1) (pow.f64 (log1p.f64 9) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) 2) 1) (/.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) (pow.f64 (log1p.f64 9) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))) 1) (/.f64 (sqrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))) (pow.f64 (log1p.f64 9) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9))) (pow.f64 (log1p.f64 9) 1/6)) (/.f64 (pow.f64 (log1p.f64 9) -1/4) (pow.f64 (log1p.f64 9) 1/12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) 2) (pow.f64 (log1p.f64 9) 1/6)) (cbrt.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))) (pow.f64 (log1p.f64 9) 1/6)) (/.f64 (sqrt.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4))) (pow.f64 (log1p.f64 9) 1/12)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) 2) (pow.f64 (log1p.f64 9) 1/8)) (/.f64 (/.f64 (cbrt.f64 (atan2.f64 im re)) (pow.f64 (log1p.f64 9) 1/4)) (pow.f64 (log1p.f64 9) 1/8)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (/.f64 (atan2.f64 im re) (log1p.f64 9))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)) 3) (pow.f64 (log1p.f64 9) 3/4)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (log1p.f64 9)) (/.f64 (sqrt.f64 (log1p.f64 9)) (atan2.f64 im re))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (log1p.f64 9)) (/.f64 (atan2.f64 im re) (sqrt.f64 (log1p.f64 9)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 1 (/.f64 (atan2.f64 im re) (log1p.f64 9))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)) (neg.f64 (pow.f64 (log1p.f64 9) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 (atan2.f64 im re) (pow.f64 (log1p.f64 9) -3/4)) 3) (pow.f64 (log1p.f64 9) 3/4)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (atan2.f64 im re) (log1p.f64 9))) 1))))))"]],"rules":[["egg-rr",48],["egg-rr",47]],"stop":[["node limit",1]],"time":51.678955078125,"type":"rewrite"},{"count":[[143,97]],"egraph":[[16,7964,648,0.085829207],[15,7693,648,0.078439249],[14,7222,648,0.070052166],[13,6735,648,0.060825832999999996],[12,5930,648,0.050907166],[11,5314,648,0.040266790999999996],[10,4842,648,0.031914873999999996],[9,4528,648,0.024950998999999998],[8,4251,648,0.019167583],[7,4091,648,0.014219625],[6,1940,648,0.00960975],[5,528,648,0.0044245],[4,174,648,0.001694875],[3,82,648,0.000864042],[2,49,648,0.000516292],[1,29,648,0.000303792],[0,14,648,0.00013775]],"inputs":[["(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 (log.f64 10) 3)) 1/4) (atan2.f64 im re))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))","(/.f64 (atan2.f64 im re) (log.f64 10))"]],"stop":[["node limit",1]],"time":118.298828125,"type":"simplify"},{"compiler":[[3318,2635]],"time":45.38623046875,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","done",0.864608789073768],["(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))","done",0.11394501953688405],["(/.f64 (atan2.f64 im re) (log.f64 10))","done",0.874042529305326],["(neg.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))","done",0.10546875]],"compiler":[[15,13],[19,17],[8,6],[9,7]],"count":[[172,4]],"kept":[{"done":[3,3],"fresh":[0,0],"new":[168,0],"picked":[1,1]}],"min-error":[0],"time":37.6328125,"type":"prune"},{"accuracy":[0.10546875],"baseline":[0.10546875],"branch":[["re",0.10546875,1],["im",0.10546875,1],["(/.f64 (atan2.f64 im re) (log.f64 10))",0.10546875,1],["(atan2.f64 im re)",0.10546875,1]],"compiler":[[3,2],[3,2],[8,6],[5,3],[65,48]],"count":[[6,1]],"inputs":[["(/.f64 (/.f64 (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))) (pow.f64 (log.f64 10) 1/4)) (pow.f64 (log.f64 10) 1/4))","(neg.f64 (cbrt.f64 (/.f64 (pow.f64 (atan2.f64 im re) 3) (pow.f64 (log.f64 1/10) 3))))","(*.f64 (/.f64 1 (sqrt.f64 (log.f64 10))) (/.f64 (atan2.f64 im re) (sqrt.f64 (log.f64 10))))","(neg.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))","(pow.f64 (/.f64 (log.f64 10) (atan2.f64 im re)) -1)","(/.f64 (atan2.f64 im re) (log.f64 10))"]],"link":["."],"name":["math.log10 on complex, imaginary part"],"oracle":[6.614805487433696],"outputs":[["(neg.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))"]],"time":13.607177734375,"times":[["re",3.77001953125],["im",3.743896484375],["(/.f64 (atan2.f64 im re) (log.f64 10))",2.2470703125],["(atan2.f64 im re)",2.34619140625]],"type":"regimes"},{"compiler":[[9,7]],"egraph":[[4,22,11,0.000129209],[3,21,11,0.000102375],[2,18,11,7.4959e-5],[1,14,11,4.8625e-5],[0,8,11,2.5375e-5]],"inputs":[["(neg.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))"]],"method":["egg-herbie"],"outputs":[["(neg.f64 (/.f64 (atan2.f64 im re) (log.f64 1/10)))","(/.f64 (neg.f64 (atan2.f64 im re)) (log.f64 1/10))"]],"stop":[["done",1],["saturated",1]],"time":8.455810546875,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[9,7]],"remove-preprocessing":[[]],"time":8.466064453125,"type":"end"}]
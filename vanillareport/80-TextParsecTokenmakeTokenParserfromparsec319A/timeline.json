[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.245849609375,"type":"analyze"},{"outcomes":[["body",256,"valid",251.400146484375,8256]],"time":258.56201171875,"type":"sample"},{"compiler":[[7,5]],"egraph":[[1,2,2,4.709e-6],[0,2,2,4.125e-6],[1,8,14,5.9667e-5],[0,8,14,3.5667e-5]],"inputs":[["0","1"],["(/.f64 (+.f64 x y) 10)","(/.f64 (+.f64 y x) 10)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0"],["(/.f64 (+.f64 x y) 10)","(/.f64 (+.f64 y x) 10)","(/.f64 (+.f64 x y) 10)"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y)"]],"time":23.66796875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[1,7,7,5.4916e-5],[0,6,7,3.2166e-5]],"inputs":[["(/.f64 (+.f64 x y) 10)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x y) 10)"]],"stop":[["saturated",1]],"time":10.45703125,"type":"simplify"},{"compiler":[[7,5]],"time":0.233154296875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) 10)","next",0.01171875]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.01171875],"time":0.673828125,"type":"prune"},{"compiler":[[13,6]],"locations":[["(/.f64 (+.f64 x y) 10)",0.01171875,true]],"time":2.84716796875,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (+.f64 x y) 10)","y","-inf",0.26904296875],["(/.f64 (+.f64 x y) 10)","y","inf",0.299072265625],["(/.f64 (+.f64 x y) 10)","y","0",0.239013671875],["(/.f64 (+.f64 x y) 10)","x","-inf",0.31396484375],["(/.f64 (+.f64 x y) 10)","x","inf",0.365966796875],["(/.f64 (+.f64 x y) 10)","x","0",0.281982421875]],"time":1.843994140625,"type":"series"},{"count":[[1,23]],"egraph":[[2,1875,7,0.01891025],[1,138,7,0.002674125],[0,6,7,0.000204625]],"inputs":[["(/.f64 (+.f64 x y) 10)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (+.f64 x y) 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x y) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) 1/10)) (cbrt.f64 (*.f64 (pow.f64 (+.f64 x y) 2) 1/100)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (pow.f64 (+.f64 x y) 2) 1/100)) (cbrt.f64 (*.f64 (+.f64 x y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (*.f64 (cbrt.f64 (+.f64 x y)) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 x y) 1/10)) (sqrt.f64 (*.f64 (+.f64 x y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x y)) (*.f64 (sqrt.f64 (+.f64 x y)) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) -1/10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/10 (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) 1/10) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) 1/10)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x y) 1/10)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 10 (+.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x y) -10))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (+.f64 x y) 2) 1/100))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 x y)) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 1/10) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (+.f64 x y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 x y) 1/10)))))))"]],"rules":[["egg-rr",23]],"stop":[["node limit",1]],"time":36.462890625,"type":"rewrite"},{"count":[[47,27]],"egraph":[[2,19,150,0.000192792],[1,13,150,0.000125709],[0,7,150,5.5542e-5]],"inputs":[["(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))"]],"stop":[["saturated",1]],"time":11.8779296875,"type":"simplify"},{"compiler":[[215,124]],"time":3.190185546875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) 10)","done",0.01171875],["(pow.f64 (/.f64 10 (+.f64 x y)) -1)","next",0.23046875]],"compiler":[[7,5],[9,7],[9,7]],"count":[[28,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[27,1],"picked":[1,1]}],"min-error":[0.00390625],"time":3.930908203125,"type":"prune"},{"compiler":[[21,11]],"locations":[["(/.f64 10 (+.f64 x y))",0.00390625,true],["(pow.f64 (/.f64 10 (+.f64 x y)) -1)",0.234375,true]],"time":4.83203125,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 10 (+.f64 x y))","y","-inf",0.2099609375],["(/.f64 10 (+.f64 x y))","y","inf",0.23486328125],["(/.f64 10 (+.f64 x y))","y","0",0.19091796875],["(/.f64 10 (+.f64 x y))","x","-inf",0.240966796875],["(/.f64 10 (+.f64 x y))","x","inf",0.260009765625],["(/.f64 10 (+.f64 x y))","x","0",0.26708984375],["(pow.f64 (/.f64 10 (+.f64 x y)) -1)","y","-inf",0.5390625],["(pow.f64 (/.f64 10 (+.f64 x y)) -1)","y","inf",0.469970703125],["(pow.f64 (/.f64 10 (+.f64 x y)) -1)","y","0",1.054931640625],["(pow.f64 (/.f64 10 (+.f64 x y)) -1)","x","-inf",0.705078125],["(pow.f64 (/.f64 10 (+.f64 x y)) -1)","x","inf",0.48486328125],["(pow.f64 (/.f64 10 (+.f64 x y)) -1)","x","0",1.279052734375]],"time":6.113037109375,"type":"series"},{"count":[[2,52]],"egraph":[[2,2338,14,0.023958084],[1,179,14,0.0033666250000000003],[0,8,17,0.000256459]],"inputs":[["(pow.f64 (/.f64 10 (+.f64 x y)) -1)","(/.f64 10 (+.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (+.f64 x y) 1/10)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) 1/10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 x y) 1/10) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 x y) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 x y) 1/10)) (cbrt.f64 (pow.f64 (/.f64 10 (+.f64 x y)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 10 (+.f64 x y)) -2)) (cbrt.f64 (*.f64 (+.f64 x y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 x y) 1/10)) (sqrt.f64 (*.f64 (+.f64 x y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/10 (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/10 (pow.f64 (/.f64 1 (+.f64 x y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 10 (+.f64 x y))) 2) -1) (pow.f64 (cbrt.f64 (/.f64 10 (+.f64 x y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 10 (+.f64 x y))) -1) (pow.f64 (sqrt.f64 (/.f64 10 (+.f64 x y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/10 (neg.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) 10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 10 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 10 (+.f64 x y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (+.f64 x y)) (/.f64 10 (sqrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) -10)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 y 3)) (*.f64 10 (fma.f64 x x (*.f64 y (-.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 y y)) (*.f64 10 (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (+.f64 x y) 1/10)) (sqrt.f64 (/.f64 10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/10 (/.f64 1 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 10 (+.f64 x y))) 2)) (cbrt.f64 (/.f64 10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 10 (+.f64 x y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (+.f64 x y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) 1/10) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (+.f64 x y) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 x y) 1/10)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 10 (+.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 10 (/.f64 1 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 10 (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 10 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 10 (+.f64 x y))) (pow.f64 (cbrt.f64 (/.f64 10 (+.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 10 (+.f64 x y))) 2) (cbrt.f64 (/.f64 10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 10 (+.f64 x y))) (sqrt.f64 (/.f64 10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -10 (/.f64 1 (neg.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x y)) 10)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 10 (+.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 x x (*.f64 y (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 10 (-.f64 (*.f64 x x) (*.f64 y y))) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 10 (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) 1/10) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 10 (+.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 10 (+.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 10 (+.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 10 (+.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 10 (+.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 10 (+.f64 x y))))))))"]],"rules":[["egg-rr",22],["egg-rr",30]],"stop":[["node limit",1]],"time":48.15185546875,"type":"rewrite"},{"count":[[100,78]],"egraph":[[3,3951,636,0.021962916],[2,1202,657,0.008184707999999999],[1,328,672,0.002742042],[0,106,678,0.000643583]],"inputs":[["(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (+.f64 (*.f64 1/10 x) (*.f64 -1 (/.f64 (+.f64 (*.f64 1/10 (pow.f64 y 2)) (*.f64 -1/10 (pow.f64 y 2))) x))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/10 (pow.f64 y 3)) (+.f64 (*.f64 -1/10 (pow.f64 y 3)) (*.f64 y (+.f64 (*.f64 1/10 (pow.f64 y 2)) (*.f64 -1/10 (pow.f64 y 2)))))) (pow.f64 x 2))) (+.f64 (*.f64 1/10 y) (+.f64 (*.f64 1/10 x) (*.f64 -1 (/.f64 (+.f64 (*.f64 1/10 (pow.f64 y 2)) (*.f64 -1/10 (pow.f64 y 2))) x)))))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/10 y) (+.f64 (*.f64 -1/10 (/.f64 (pow.f64 y 2) x)) (*.f64 1/10 x))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/10 (pow.f64 y 3)) (+.f64 (*.f64 -1/10 (pow.f64 y 3)) (*.f64 -1 (*.f64 y (+.f64 (*.f64 1/10 (pow.f64 y 2)) (*.f64 -1/10 (pow.f64 y 2))))))) (pow.f64 x 2))) (+.f64 (*.f64 1/10 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/10 y) (+.f64 (*.f64 -1/10 (/.f64 (pow.f64 y 2) x)) (*.f64 1/10 x)))))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (+.f64 (*.f64 1/10 x) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/10 (pow.f64 x 2)) (*.f64 1/10 (pow.f64 x 2))) y))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/10 (pow.f64 x 3)) (+.f64 (*.f64 -1/10 (pow.f64 x 3)) (*.f64 (+.f64 (*.f64 -1/10 (pow.f64 x 2)) (*.f64 1/10 (pow.f64 x 2))) x))) (pow.f64 y 2))) (+.f64 (*.f64 1/10 y) (+.f64 (*.f64 1/10 x) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/10 (pow.f64 x 2)) (*.f64 1/10 (pow.f64 x 2))) y)))))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 -1/10 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 1/10 y) (*.f64 1/10 x))))","(+.f64 (*.f64 1/10 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 -1/10 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 1/10 y) (+.f64 (*.f64 1/10 x) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/10 (pow.f64 x 2)) (*.f64 -1/10 (pow.f64 x 2))) x)) (+.f64 (*.f64 1/10 (pow.f64 x 3)) (*.f64 -1/10 (pow.f64 x 3)))) (pow.f64 y 2)))))))","(/.f64 10 y)","(+.f64 (*.f64 10 (/.f64 1 y)) (*.f64 -10 (/.f64 x (pow.f64 y 2))))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2)))))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4))) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2))))))","(/.f64 10 x)","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (*.f64 10 (/.f64 1 x)))","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x))))","(+.f64 (*.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4))) (+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x)))))","(/.f64 10 x)","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (*.f64 10 (/.f64 1 x)))","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x))))","(+.f64 (*.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4))) (+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x)))))","(/.f64 10 x)","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (*.f64 10 (/.f64 1 x)))","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x))))","(+.f64 (*.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4))) (+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x)))))","(/.f64 10 y)","(+.f64 (*.f64 10 (/.f64 1 y)) (*.f64 -10 (/.f64 x (pow.f64 y 2))))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2)))))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4))) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2))))))","(/.f64 10 y)","(+.f64 (*.f64 10 (/.f64 1 y)) (*.f64 -10 (/.f64 x (pow.f64 y 2))))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2)))))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4))) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (+.f64 (*.f64 1/10 x) (*.f64 -1 (/.f64 (+.f64 (*.f64 1/10 (pow.f64 y 2)) (*.f64 -1/10 (pow.f64 y 2))) x))))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/10 (pow.f64 y 3)) (+.f64 (*.f64 -1/10 (pow.f64 y 3)) (*.f64 y (+.f64 (*.f64 1/10 (pow.f64 y 2)) (*.f64 -1/10 (pow.f64 y 2)))))) (pow.f64 x 2))) (+.f64 (*.f64 1/10 y) (+.f64 (*.f64 1/10 x) (*.f64 -1 (/.f64 (+.f64 (*.f64 1/10 (pow.f64 y 2)) (*.f64 -1/10 (pow.f64 y 2))) x)))))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/10 y) (+.f64 (*.f64 -1/10 (/.f64 (pow.f64 y 2) x)) (*.f64 1/10 x))))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/10 (pow.f64 y 3)) (+.f64 (*.f64 -1/10 (pow.f64 y 3)) (*.f64 -1 (*.f64 y (+.f64 (*.f64 1/10 (pow.f64 y 2)) (*.f64 -1/10 (pow.f64 y 2))))))) (pow.f64 x 2))) (+.f64 (*.f64 1/10 (/.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/10 y) (+.f64 (*.f64 -1/10 (/.f64 (pow.f64 y 2) x)) (*.f64 1/10 x)))))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (+.f64 (*.f64 1/10 x) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/10 (pow.f64 x 2)) (*.f64 1/10 (pow.f64 x 2))) y))))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 1/10 (pow.f64 x 3)) (+.f64 (*.f64 -1/10 (pow.f64 x 3)) (*.f64 (+.f64 (*.f64 -1/10 (pow.f64 x 2)) (*.f64 1/10 (pow.f64 x 2))) x))) (pow.f64 y 2))) (+.f64 (*.f64 1/10 y) (+.f64 (*.f64 1/10 x) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1/10 (pow.f64 x 2)) (*.f64 1/10 (pow.f64 x 2))) y)))))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 -1/10 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 1/10 y) (*.f64 1/10 x))))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 -1/10 (/.f64 (pow.f64 x 2) y)) (+.f64 (*.f64 1/10 y) (+.f64 (*.f64 1/10 x) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 1/10 (pow.f64 x 2)) (*.f64 -1/10 (pow.f64 x 2))) x)) (+.f64 (*.f64 1/10 (pow.f64 x 3)) (*.f64 -1/10 (pow.f64 x 3)))) (pow.f64 y 2)))))))","(*.f64 1/10 (+.f64 y x))","(/.f64 10 y)","(+.f64 (*.f64 10 (/.f64 1 y)) (*.f64 -10 (/.f64 x (pow.f64 y 2))))","(+.f64 (/.f64 10 y) (*.f64 -10 (/.f64 x (*.f64 y y))))","(fma.f64 -10 (/.f64 x (*.f64 y y)) (/.f64 10 y))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2)))))","(+.f64 (/.f64 10 y) (fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (*.f64 -10 (/.f64 x (*.f64 y y)))))","(fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (fma.f64 -10 (/.f64 x (*.f64 y y)) (/.f64 10 y)))","(+.f64 (/.f64 10 y) (*.f64 (/.f64 x (*.f64 y y)) (+.f64 -10 (*.f64 10 (/.f64 x y)))))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4))) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2))))))","(+.f64 (/.f64 10 y) (fma.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4)) (fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (*.f64 -10 (/.f64 x (*.f64 y y))))))","(fma.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4)) (fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (fma.f64 -10 (/.f64 x (*.f64 y y)) (/.f64 10 y))))","(+.f64 (*.f64 (/.f64 x (*.f64 y y)) (+.f64 -10 (*.f64 10 (/.f64 x y)))) (fma.f64 -10 (/.f64 (pow.f64 (/.f64 x y) 3) y) (/.f64 10 y)))","(/.f64 10 x)","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (*.f64 10 (/.f64 1 x)))","(fma.f64 -10 (/.f64 y (*.f64 x x)) (/.f64 10 x))","(fma.f64 -10 (/.f64 (/.f64 y x) x) (/.f64 10 x))","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x))))","(fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 (*.f64 y y) (pow.f64 x 3)) (/.f64 10 x)))","(fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 10 x)))","(fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (fma.f64 -10 (/.f64 y (*.f64 x x)) (/.f64 10 x)))","(+.f64 (/.f64 10 x) (*.f64 (/.f64 (/.f64 y x) x) (+.f64 -10 (*.f64 10 (/.f64 y x)))))","(+.f64 (*.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4))) (+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x)))))","(fma.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) (fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 (*.f64 y y) (pow.f64 x 3)) (/.f64 10 x))))","(fma.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) (fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 10 x))))","(fma.f64 -10 (+.f64 (/.f64 y (*.f64 x x)) (/.f64 (pow.f64 y 3) (pow.f64 x 4))) (fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 10 x)))","(+.f64 (/.f64 10 x) (fma.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) (*.f64 (/.f64 (/.f64 y x) x) (+.f64 -10 (*.f64 10 (/.f64 y x))))))","(/.f64 10 x)","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (*.f64 10 (/.f64 1 x)))","(fma.f64 -10 (/.f64 y (*.f64 x x)) (/.f64 10 x))","(fma.f64 -10 (/.f64 (/.f64 y x) x) (/.f64 10 x))","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x))))","(fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 (*.f64 y y) (pow.f64 x 3)) (/.f64 10 x)))","(fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 10 x)))","(fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (fma.f64 -10 (/.f64 y (*.f64 x x)) (/.f64 10 x)))","(+.f64 (/.f64 10 x) (*.f64 (/.f64 (/.f64 y x) x) (+.f64 -10 (*.f64 10 (/.f64 y x)))))","(+.f64 (*.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4))) (+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x)))))","(fma.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) (fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 (*.f64 y y) (pow.f64 x 3)) (/.f64 10 x))))","(fma.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) (fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 10 x))))","(fma.f64 -10 (+.f64 (/.f64 y (*.f64 x x)) (/.f64 (pow.f64 y 3) (pow.f64 x 4))) (fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 10 x)))","(+.f64 (/.f64 10 x) (fma.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) (*.f64 (/.f64 (/.f64 y x) x) (+.f64 -10 (*.f64 10 (/.f64 y x))))))","(/.f64 10 x)","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (*.f64 10 (/.f64 1 x)))","(fma.f64 -10 (/.f64 y (*.f64 x x)) (/.f64 10 x))","(fma.f64 -10 (/.f64 (/.f64 y x) x) (/.f64 10 x))","(+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x))))","(fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 (*.f64 y y) (pow.f64 x 3)) (/.f64 10 x)))","(fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 10 x)))","(fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (fma.f64 -10 (/.f64 y (*.f64 x x)) (/.f64 10 x)))","(+.f64 (/.f64 10 x) (*.f64 (/.f64 (/.f64 y x) x) (+.f64 -10 (*.f64 10 (/.f64 y x)))))","(+.f64 (*.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4))) (+.f64 (*.f64 -10 (/.f64 y (pow.f64 x 2))) (+.f64 (*.f64 10 (/.f64 (pow.f64 y 2) (pow.f64 x 3))) (*.f64 10 (/.f64 1 x)))))","(fma.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) (fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 (*.f64 y y) (pow.f64 x 3)) (/.f64 10 x))))","(fma.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) (fma.f64 -10 (/.f64 y (*.f64 x x)) (fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 10 x))))","(fma.f64 -10 (+.f64 (/.f64 y (*.f64 x x)) (/.f64 (pow.f64 y 3) (pow.f64 x 4))) (fma.f64 10 (/.f64 y (/.f64 (pow.f64 x 3) y)) (/.f64 10 x)))","(+.f64 (/.f64 10 x) (fma.f64 -10 (/.f64 (pow.f64 y 3) (pow.f64 x 4)) (*.f64 (/.f64 (/.f64 y x) x) (+.f64 -10 (*.f64 10 (/.f64 y x))))))","(/.f64 10 y)","(+.f64 (*.f64 10 (/.f64 1 y)) (*.f64 -10 (/.f64 x (pow.f64 y 2))))","(+.f64 (/.f64 10 y) (*.f64 -10 (/.f64 x (*.f64 y y))))","(fma.f64 -10 (/.f64 x (*.f64 y y)) (/.f64 10 y))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2)))))","(+.f64 (/.f64 10 y) (fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (*.f64 -10 (/.f64 x (*.f64 y y)))))","(fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (fma.f64 -10 (/.f64 x (*.f64 y y)) (/.f64 10 y)))","(+.f64 (/.f64 10 y) (*.f64 (/.f64 x (*.f64 y y)) (+.f64 -10 (*.f64 10 (/.f64 x y)))))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4))) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2))))))","(+.f64 (/.f64 10 y) (fma.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4)) (fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (*.f64 -10 (/.f64 x (*.f64 y y))))))","(fma.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4)) (fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (fma.f64 -10 (/.f64 x (*.f64 y y)) (/.f64 10 y))))","(+.f64 (*.f64 (/.f64 x (*.f64 y y)) (+.f64 -10 (*.f64 10 (/.f64 x y)))) (fma.f64 -10 (/.f64 (pow.f64 (/.f64 x y) 3) y) (/.f64 10 y)))","(/.f64 10 y)","(+.f64 (*.f64 10 (/.f64 1 y)) (*.f64 -10 (/.f64 x (pow.f64 y 2))))","(+.f64 (/.f64 10 y) (*.f64 -10 (/.f64 x (*.f64 y y))))","(fma.f64 -10 (/.f64 x (*.f64 y y)) (/.f64 10 y))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2)))))","(+.f64 (/.f64 10 y) (fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (*.f64 -10 (/.f64 x (*.f64 y y)))))","(fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (fma.f64 -10 (/.f64 x (*.f64 y y)) (/.f64 10 y)))","(+.f64 (/.f64 10 y) (*.f64 (/.f64 x (*.f64 y y)) (+.f64 -10 (*.f64 10 (/.f64 x y)))))","(+.f64 (*.f64 10 (/.f64 1 y)) (+.f64 (*.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4))) (+.f64 (*.f64 10 (/.f64 (pow.f64 x 2) (pow.f64 y 3))) (*.f64 -10 (/.f64 x (pow.f64 y 2))))))","(+.f64 (/.f64 10 y) (fma.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4)) (fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (*.f64 -10 (/.f64 x (*.f64 y y))))))","(fma.f64 -10 (/.f64 (pow.f64 x 3) (pow.f64 y 4)) (fma.f64 10 (/.f64 (*.f64 x x) (pow.f64 y 3)) (fma.f64 -10 (/.f64 x (*.f64 y y)) (/.f64 10 y))))","(+.f64 (*.f64 (/.f64 x (*.f64 y y)) (+.f64 -10 (*.f64 10 (/.f64 x y)))) (fma.f64 -10 (/.f64 (pow.f64 (/.f64 x y) 3) y) (/.f64 10 y)))"]],"stop":[["node limit",1]],"time":42.576171875,"type":"simplify"},{"compiler":[[1158,786]],"time":17.744873046875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) 10)","done",0.01171875],["(pow.f64 (/.f64 10 (+.f64 x y)) -1)","done",0.23046875],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))","next",0.7729391844421046]],"compiler":[[7,5],[9,7],[15,9],[15,9]],"count":[[80,3]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[78,1],"picked":[1,1]}],"min-error":[0],"time":13.930908203125,"type":"prune"},{"compiler":[[38,15]],"locations":[["(cbrt.f64 (+.f64 x y))",0.0859375,true],["(/.f64 10 (cbrt.f64 (+.f64 x y)))",0.29296875,true],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))",0.3248825195368841,true],["(pow.f64 (cbrt.f64 (+.f64 x y)) 2)",0.534198779305326,true]],"time":8.752197265625,"type":"localize"},{"count":[[4,48]],"series":[["(cbrt.f64 (+.f64 x y))","y","-inf",0.27197265625],["(cbrt.f64 (+.f64 x y))","y","inf",0.225830078125],["(cbrt.f64 (+.f64 x y))","y","0",0.363037109375],["(cbrt.f64 (+.f64 x y))","x","-inf",0.262939453125],["(cbrt.f64 (+.f64 x y))","x","inf",0.286865234375],["(cbrt.f64 (+.f64 x y))","x","0",0.412109375],["(/.f64 10 (cbrt.f64 (+.f64 x y)))","y","-inf",0.583984375],["(/.f64 10 (cbrt.f64 (+.f64 x y)))","y","inf",0.897216796875],["(/.f64 10 (cbrt.f64 (+.f64 x y)))","y","0",1.23095703125],["(/.f64 10 (cbrt.f64 (+.f64 x y)))","x","-inf",0.544921875],["(/.f64 10 (cbrt.f64 (+.f64 x y)))","x","inf",1.346923828125],["(/.f64 10 (cbrt.f64 (+.f64 x y)))","x","0",1.136962890625],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))","y","-inf",0.278076171875],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))","y","inf",0.322998046875],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))","y","0",0.60693359375],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))","x","-inf",0.30908203125],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))","x","inf",0.25],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))","x","0",0.68408203125],["(pow.f64 (cbrt.f64 (+.f64 x y)) 2)","y","-inf",0.341064453125],["(pow.f64 (cbrt.f64 (+.f64 x y)) 2)","y","inf",0.3310546875],["(pow.f64 (cbrt.f64 (+.f64 x y)) 2)","y","0",0.939208984375],["(pow.f64 (cbrt.f64 (+.f64 x y)) 2)","x","-inf",0.343994140625],["(pow.f64 (cbrt.f64 (+.f64 x y)) 2)","x","inf",0.9970703125],["(pow.f64 (cbrt.f64 (+.f64 x y)) 2)","x","0",1.10205078125]],"time":14.73681640625,"type":"series"},{"count":[[4,140]],"egraph":[[2,2986,31,0.029237835],[1,227,31,0.004781543],[0,10,44,0.000405209]],"inputs":[["(pow.f64 (cbrt.f64 (+.f64 x y)) 2)","(/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))","(/.f64 10 (cbrt.f64 (+.f64 x y)))","(cbrt.f64 (+.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (+.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (+.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) 4) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x y) 1/6) (sqrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x y)) (pow.f64 (+.f64 x y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) 5) (cbrt.f64 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 x y)) (/.f64 1 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 x y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 x y) 2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 (+.f64 x y)))) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 1/10 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 x y)) 1/10)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 x y)) 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 x y)) 1/10))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 x y)) 1/10))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 1/10 (+.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (cbrt.f64 (+.f64 x y)) (*.f64 (cbrt.f64 (+.f64 x y)) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (*.f64 (cbrt.f64 (+.f64 x y)) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/10 (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/10 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/10 (+.f64 x y))) (cbrt.f64 (pow.f64 (/.f64 10 (+.f64 x y)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 10 (+.f64 x y)) -2)) (cbrt.f64 (*.f64 1/10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) 4) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)) (*.f64 (cbrt.f64 (+.f64 x y)) 1/10)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 1/10 (+.f64 x y))) (sqrt.f64 (*.f64 1/10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)) (/.f64 1 (/.f64 -10 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (+.f64 x y)) 1/10) (pow.f64 (cbrt.f64 (+.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1/10) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/10 (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) 4) 10) (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)) (/.f64 1 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) 1) (*.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) 4) 1) (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)) (/.f64 10 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 x y)) (pow.f64 (cbrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))) 2)) (/.f64 (cbrt.f64 (+.f64 x y)) (cbrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))) -2) (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (cbrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) 4) (pow.f64 (cbrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))) 2)) (cbrt.f64 (*.f64 1/10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))) -1/2) (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (sqrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) 4) (sqrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))))) (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)) (sqrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1) (*.f64 (cbrt.f64 (+.f64 x y)) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) -10) (neg.f64 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1/10) 1) (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1/10) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2))) (cbrt.f64 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1/10) (pow.f64 (+.f64 x y) 1/6)) (pow.f64 (+.f64 x y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/10 (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 10 (+.f64 x y)) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 10 (+.f64 x y)) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/10 (+.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 1/10 (+.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 10 (+.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 x y) 2) (pow.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 10 (+.f64 x y)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 -10 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 10 (+.f64 x y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 x y)) 1/10))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 1/10 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 10 (+.f64 x y)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 2) (pow.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 1/10 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 1/10 (+.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 10 (+.f64 x y)) -3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 1/10 (+.f64 x y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 1/10 (+.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 10 (+.f64 x y))) -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 10 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 10 (/.f64 1 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 10 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))) (pow.f64 (cbrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))) 2) (cbrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))) (sqrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -10 (/.f64 1 (neg.f64 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 x y))) 10)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 100 (pow.f64 (cbrt.f64 (+.f64 x y)) -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (+.f64 x y)) 1/10) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (cbrt.f64 (+.f64 x y)) 1/10) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 100 (pow.f64 (cbrt.f64 (+.f64 x y)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 10 (cbrt.f64 (+.f64 x y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 10 (cbrt.f64 (+.f64 x y))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 (+.f64 x y)) 1/10)) -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (+.f64 x y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (+.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (+.f64 x y))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (+.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (+.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)) (cbrt.f64 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x y) 1/6) (pow.f64 (+.f64 x y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) 4)) (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (+.f64 (pow.f64 x 3) (pow.f64 y 3))) (cbrt.f64 (fma.f64 y (-.f64 y x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (-.f64 (*.f64 x x) (*.f64 y y))) (cbrt.f64 (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x y) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x y) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x y)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (+.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 x y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 x y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (+.f64 x y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (+.f64 x y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 (+.f64 x y))) 2))))))"]],"rules":[["egg-rr",33],["egg-rr",31],["egg-rr",52],["egg-rr",24]],"stop":[["node limit",1]],"time":61.238037109375,"type":"rewrite"},{"count":[[188,194]],"egraph":[[3,5172,1501,0.032431667],[2,2168,1501,0.015049709000000001],[1,611,1514,0.0053815420000000004],[0,201,1580,0.001111875]],"inputs":[["(pow.f64 (pow.f64 y 2) 1/3)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 y) 1/9) x)) (pow.f64 (pow.f64 y 2) 1/3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 y) 1/9) x)) (+.f64 (pow.f64 (pow.f64 y 2) 1/3) (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9))) (pow.f64 x 2))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 y) 1/9) x)) (+.f64 (pow.f64 (pow.f64 y 2) 1/3) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9))) (pow.f64 x 2)) (*.f64 (pow.f64 x 3) (+.f64 (*.f64 -2/3 (*.f64 (+.f64 (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3)))) (pow.f64 (/.f64 1 y) 1/3))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 y))))))))","(pow.f64 (pow.f64 x 2) 1/3)","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 x) 1/9) y)) (pow.f64 (pow.f64 x 2) 1/3))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 x) 1/9) y)) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9))))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 x) 1/9) y)) (+.f64 (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 x))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))))) (pow.f64 y 3)) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9)))))))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 x)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 y)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 10 (pow.f64 (/.f64 1 y) 1/3))","(+.f64 (*.f64 10 (pow.f64 (/.f64 1 y) 1/3)) (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/9) x)))","(+.f64 (*.f64 10 (pow.f64 (/.f64 1 y) 1/3)) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/9) x)) (*.f64 10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (*.f64 (-.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/9))) (pow.f64 x 2))))))","(+.f64 (*.f64 10 (pow.f64 (/.f64 1 y) 1/3)) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/9) x)) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (*.f64 (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/9) (-.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/9))))) (+.f64 (/.f64 1 (pow.f64 y 4)) (*.f64 -1/27 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/3)))) (pow.f64 x 3)))) (*.f64 10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (*.f64 (-.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/9))) (pow.f64 x 2)))))))","(*.f64 10 (pow.f64 (/.f64 1 x) 1/3))","(+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/9) y)) (*.f64 10 (pow.f64 (/.f64 1 x) 1/3)))","(+.f64 (*.f64 10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 2) (-.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/9)))))) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/9) y)) (*.f64 10 (pow.f64 (/.f64 1 x) 1/3))))","(+.f64 (*.f64 10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 2) (-.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/9)))))) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/9) (-.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/3)))) (pow.f64 y 3)))) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/9) y)) (*.f64 10 (pow.f64 (/.f64 1 x) 1/3)))))","(pow.f64 y 1/3)","(+.f64 (pow.f64 y 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) x)))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) x)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/9) (pow.f64 x 2)))))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) x)) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3)))) (pow.f64 x 3)) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/9) (pow.f64 x 2))))))","(pow.f64 x 1/3)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) y)))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) y)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (pow.f64 y 2)))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) y)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (pow.f64 y 2))))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 y 2) 1/3)","(cbrt.f64 (*.f64 y y))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 y) 1/9) x)) (pow.f64 (pow.f64 y 2) 1/3))","(fma.f64 2/3 (*.f64 (*.f64 (pow.f64 y 1/18) (pow.f64 y 1/18)) x) (cbrt.f64 (*.f64 y y)))","(fma.f64 2/3 (*.f64 (pow.f64 y 1/18) (*.f64 (pow.f64 y 1/18) x)) (cbrt.f64 (*.f64 y y)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 y) 1/9) x)) (+.f64 (pow.f64 (pow.f64 y 2) 1/3) (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9))) (pow.f64 x 2))))","(fma.f64 2/3 (*.f64 (*.f64 (pow.f64 y 1/18) (pow.f64 y 1/18)) x) (+.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18)) -1/9) (*.f64 x x)) (cbrt.f64 (*.f64 y y))))","(fma.f64 2/3 (*.f64 (pow.f64 y 1/18) (*.f64 (pow.f64 y 1/18) x)) (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18)) -1/9) (*.f64 x x) (cbrt.f64 (*.f64 y y))))","(fma.f64 2/3 (*.f64 (*.f64 (pow.f64 y 1/18) (pow.f64 y 1/18)) x) (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18)) -1/9) (*.f64 x x) (cbrt.f64 (*.f64 y y))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 y) 1/9) x)) (+.f64 (pow.f64 (pow.f64 y 2) 1/3) (+.f64 (*.f64 (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/9))) (pow.f64 x 2)) (*.f64 (pow.f64 x 3) (+.f64 (*.f64 -2/3 (*.f64 (+.f64 (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3)))) (pow.f64 (/.f64 1 y) 1/3))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 y))))))))","(+.f64 (fma.f64 2/3 (*.f64 (*.f64 (pow.f64 y 1/18) (pow.f64 y 1/18)) x) (cbrt.f64 (*.f64 y y))) (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18)) -1/9) (*.f64 x x) (*.f64 (pow.f64 x 3) (fma.f64 -2/3 (*.f64 (fma.f64 1/27 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 -2/9 (cbrt.f64 (/.f64 1 (*.f64 y y))))) (cbrt.f64 (/.f64 1 y))) (*.f64 (/.f64 1 y) -2/27)))))","(+.f64 (fma.f64 2/3 (*.f64 (pow.f64 y 1/18) (*.f64 (pow.f64 y 1/18) x)) (cbrt.f64 (*.f64 y y))) (fma.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18)) -1/9) (*.f64 x x) (*.f64 (pow.f64 x 3) (fma.f64 -2/3 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) -5/27) (cbrt.f64 (/.f64 1 y))) (/.f64 -2/27 y)))))","(+.f64 (fma.f64 2/3 (*.f64 (*.f64 (pow.f64 y 1/18) (pow.f64 y 1/18)) x) (cbrt.f64 (*.f64 y y))) (*.f64 (*.f64 x x) (+.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 4)) 1/18)) -1/9) (*.f64 (fma.f64 (*.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) -5/27)) (cbrt.f64 (/.f64 1 y)) (/.f64 -2/27 y)) x))))","(pow.f64 (pow.f64 x 2) 1/3)","(cbrt.f64 (*.f64 x x))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 x) 1/9) y)) (pow.f64 (pow.f64 x 2) 1/3))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 x 1/18) (pow.f64 x 1/18))) (cbrt.f64 (*.f64 x x)))","(fma.f64 (*.f64 (*.f64 2/3 (pow.f64 x 1/18)) (pow.f64 x 1/18)) y (cbrt.f64 (*.f64 x x)))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 x) 1/9) y)) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9))))))","(+.f64 (fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 x 1/18) (pow.f64 x 1/18))) (cbrt.f64 (*.f64 x x))) (*.f64 (*.f64 y y) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) -1/9)))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 x 1/18) (pow.f64 x 1/18))) (fma.f64 (*.f64 y y) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) -1/9) (cbrt.f64 (*.f64 x x))))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 x 1/18) (pow.f64 x 1/18))) (fma.f64 (*.f64 y y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) -1/9)) (cbrt.f64 (*.f64 x x))))","(+.f64 (*.f64 2/3 (*.f64 (pow.f64 (*.f64 1 x) 1/9) y)) (+.f64 (*.f64 (+.f64 (*.f64 -2/27 (*.f64 (pow.f64 1 1/9) (/.f64 1 x))) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 x) 1/3) (+.f64 (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))))) (pow.f64 y 3)) (+.f64 (pow.f64 (pow.f64 x 2) 1/3) (*.f64 (pow.f64 y 2) (+.f64 (*.f64 1/9 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9)) (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/9)))))))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 x 1/18) (pow.f64 x 1/18))) (fma.f64 (fma.f64 -2/27 (/.f64 1 x) (*.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 x)) (fma.f64 1/27 (cbrt.f64 (/.f64 1 (*.f64 x x))) (*.f64 -2/9 (cbrt.f64 (/.f64 1 (*.f64 x x)))))))) (pow.f64 y 3) (+.f64 (*.f64 (*.f64 y y) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) -1/9)) (cbrt.f64 (*.f64 x x)))))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 x 1/18) (pow.f64 x 1/18))) (fma.f64 (fma.f64 -2/3 (*.f64 (cbrt.f64 (/.f64 1 x)) (*.f64 (cbrt.f64 (/.f64 (/.f64 1 x) x)) -5/27)) (/.f64 -2/27 x)) (pow.f64 y 3) (fma.f64 (*.f64 y y) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) -1/9) (cbrt.f64 (*.f64 x x)))))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 x 1/18) (pow.f64 x 1/18))) (fma.f64 (fma.f64 -2/3 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (/.f64 1 (*.f64 x x)))) -5/27) (/.f64 -2/27 x)) (pow.f64 y 3) (fma.f64 (*.f64 y y) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18)) -1/9) (cbrt.f64 (*.f64 x x)))))","(fma.f64 2/3 (*.f64 y (*.f64 (pow.f64 x 1/18) (pow.f64 x 1/18))) (fma.f64 (fma.f64 -2/3 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 x)) (cbrt.f64 (/.f64 1 (*.f64 x x)))) -5/27) (/.f64 -2/27 x)) (pow.f64 y 3) (fma.f64 (*.f64 y y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 4)) 1/18) -1/9)) (cbrt.f64 (*.f64 x x)))))","(*.f64 1/10 y)","(*.f64 y 1/10)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(*.f64 x 1/10)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(*.f64 x 1/10)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 x)","(*.f64 x 1/10)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 y)","(*.f64 y 1/10)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 1/10 y)","(*.f64 y 1/10)","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(+.f64 (*.f64 1/10 y) (*.f64 1/10 x))","(*.f64 1/10 (+.f64 y x))","(*.f64 10 (pow.f64 (/.f64 1 y) 1/3))","(*.f64 (cbrt.f64 (/.f64 1 y)) 10)","(+.f64 (*.f64 10 (pow.f64 (/.f64 1 y) 1/3)) (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/9) x)))","(fma.f64 10 (cbrt.f64 (/.f64 1 y)) (*.f64 -10/3 (*.f64 x (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18)))))","(fma.f64 (*.f64 (*.f64 -10/3 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18)) (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18)) x (*.f64 (cbrt.f64 (/.f64 1 y)) 10))","(fma.f64 (cbrt.f64 (/.f64 1 y)) 10 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18)) (*.f64 x -10/3)))","(+.f64 (*.f64 10 (pow.f64 (/.f64 1 y) 1/3)) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/9) x)) (*.f64 10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (*.f64 (-.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/9))) (pow.f64 x 2))))))","(fma.f64 10 (cbrt.f64 (/.f64 1 y)) (fma.f64 -10/3 (*.f64 x (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18))) (*.f64 10/3 (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (*.f64 x x) (-.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18)))))))))","(fma.f64 (cbrt.f64 (/.f64 1 y)) 10 (fma.f64 -10/3 (*.f64 x (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18))) (*.f64 10/3 (*.f64 (*.f64 x x) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18)) -1/3)))))))","(fma.f64 (cbrt.f64 (/.f64 1 y)) 10 (fma.f64 10/3 (*.f64 (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18)) -1/3)) (*.f64 (*.f64 x x) (cbrt.f64 (*.f64 y y)))) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18)) (*.f64 x -10/3))))","(+.f64 (*.f64 10 (pow.f64 (/.f64 1 y) 1/3)) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/9) x)) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (*.f64 (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/9) (-.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/9))))) (+.f64 (/.f64 1 (pow.f64 y 4)) (*.f64 -1/27 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/3)))) (pow.f64 x 3)))) (*.f64 10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 y 2)) 1/3) (*.f64 (-.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/9))) (pow.f64 x 2)))))))","(fma.f64 10 (cbrt.f64 (/.f64 1 y)) (fma.f64 -10/3 (*.f64 x (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18))) (fma.f64 -10/3 (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (pow.f64 x 3) (fma.f64 -2/3 (*.f64 (-.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/18))) (+.f64 (/.f64 1 (pow.f64 y 4)) (*.f64 -1/27 (cbrt.f64 (/.f64 1 (pow.f64 y 16)))))))) (*.f64 10/3 (*.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (*.f64 x x) (-.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18))))))))))","(fma.f64 (cbrt.f64 (/.f64 1 y)) 10 (fma.f64 -10/3 (*.f64 x (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18))) (fma.f64 -10/3 (*.f64 (pow.f64 x 3) (*.f64 (cbrt.f64 (*.f64 y y)) (fma.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/18))) (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18)) -1/3)) (fma.f64 -1/27 (cbrt.f64 (/.f64 1 (pow.f64 y 16))) (/.f64 1 (pow.f64 y 4)))))) (*.f64 10/3 (*.f64 (*.f64 x x) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18)) -1/3))))))))","(fma.f64 (cbrt.f64 (/.f64 1 y)) 10 (fma.f64 -10/3 (*.f64 x (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18))) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (*.f64 10/3 (*.f64 x (*.f64 x (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18)) -1/3))))) (*.f64 -10/3 (*.f64 (pow.f64 x 3) (fma.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/18))) (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18)) -1/3)) (fma.f64 -1/27 (cbrt.f64 (/.f64 1 (pow.f64 y 16))) (/.f64 1 (pow.f64 y 4))))))))))","(fma.f64 (cbrt.f64 (/.f64 1 y)) 10 (fma.f64 -10/3 (*.f64 x (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 16)) 1/18))) (*.f64 (cbrt.f64 (*.f64 y y)) (+.f64 (*.f64 10/3 (*.f64 x (+.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18)) -1/3) x) (/.f64 x (pow.f64 y 3))))) (*.f64 -10/3 (*.f64 (pow.f64 x 3) (fma.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 13)) 1/18))) (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 35)) 1/18)) -1/3)) (fma.f64 -1/27 (cbrt.f64 (/.f64 1 (pow.f64 y 16))) (/.f64 1 (pow.f64 y 4))))))))))","(*.f64 10 (pow.f64 (/.f64 1 x) 1/3))","(*.f64 (cbrt.f64 (/.f64 1 x)) 10)","(+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/9) y)) (*.f64 10 (pow.f64 (/.f64 1 x) 1/3)))","(fma.f64 -10/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18))) (*.f64 (cbrt.f64 (/.f64 1 x)) 10))","(fma.f64 (cbrt.f64 (/.f64 1 x)) 10 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) y))))","(fma.f64 (cbrt.f64 (/.f64 1 x)) 10 (*.f64 y (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18)))))","(+.f64 (*.f64 10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 2) (-.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/9)))))) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/9) y)) (*.f64 10 (pow.f64 (/.f64 1 x) 1/3))))","(fma.f64 10/3 (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 y y) (+.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18)))))) (fma.f64 -10/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18))) (*.f64 (cbrt.f64 (/.f64 1 x)) 10)))","(fma.f64 10/3 (*.f64 (*.f64 y y) (*.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18)) -1/3)) (cbrt.f64 (*.f64 x x)))) (fma.f64 (cbrt.f64 (/.f64 1 x)) 10 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) y)))))","(fma.f64 10/3 (*.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18)) -1/3)) (*.f64 (*.f64 y y) (cbrt.f64 (*.f64 x x)))) (fma.f64 (cbrt.f64 (/.f64 1 x)) 10 (*.f64 y (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18))))))","(+.f64 (*.f64 10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 2) (-.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/9)))))) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (*.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (+.f64 (/.f64 1 (pow.f64 x 4)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/9) (-.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 1/3 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/9))))) (*.f64 -1/27 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/3)))) (pow.f64 y 3)))) (+.f64 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/9) y)) (*.f64 10 (pow.f64 (/.f64 1 x) 1/3)))))","(fma.f64 10/3 (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 y y) (+.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18)))))) (fma.f64 -10/3 (*.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (pow.f64 y 3) (+.f64 (/.f64 1 (pow.f64 x 4)) (fma.f64 -2/3 (*.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18)))) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/18))) (*.f64 -1/27 (cbrt.f64 (/.f64 1 (pow.f64 x 16)))))))) (fma.f64 -10/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18))) (*.f64 (cbrt.f64 (/.f64 1 x)) 10))))","(fma.f64 10/3 (*.f64 (*.f64 y y) (*.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18)) -1/3)) (cbrt.f64 (*.f64 x x)))) (fma.f64 -10/3 (*.f64 (pow.f64 y 3) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (fma.f64 -2/3 (*.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18)) -1/3)) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/18))) (*.f64 -1/27 (cbrt.f64 (/.f64 1 (pow.f64 x 16)))))))) (fma.f64 (cbrt.f64 (/.f64 1 x)) 10 (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) y))))))","(+.f64 (fma.f64 (cbrt.f64 (/.f64 1 x)) 10 (*.f64 y (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18))))) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 10/3 (*.f64 y (*.f64 y (+.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18)) -1/3))))) (*.f64 -10/3 (*.f64 (pow.f64 y 3) (+.f64 (/.f64 1 (pow.f64 x 4)) (fma.f64 -2/3 (*.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18)) -1/3)) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/18))) (*.f64 -1/27 (cbrt.f64 (/.f64 1 (pow.f64 x 16)))))))))))","(+.f64 (fma.f64 (cbrt.f64 (/.f64 1 x)) 10 (*.f64 y (*.f64 -10/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 16)) 1/18))))) (*.f64 (cbrt.f64 (*.f64 x x)) (+.f64 (*.f64 10/3 (*.f64 y (+.f64 (*.f64 (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18)) -1/3) y) (/.f64 y (pow.f64 x 3))))) (*.f64 -10/3 (*.f64 (pow.f64 y 3) (+.f64 (/.f64 1 (pow.f64 x 4)) (fma.f64 -2/3 (*.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (*.f64 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 35)) 1/18)) -1/3)) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 13)) 1/18))) (*.f64 -1/27 (cbrt.f64 (/.f64 1 (pow.f64 x 16)))))))))))","(pow.f64 y 1/3)","(cbrt.f64 y)","(+.f64 (pow.f64 y 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) x)))","(+.f64 (cbrt.f64 y) (*.f64 1/3 (*.f64 x (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) (pow.f64 (/.f64 1 (*.f64 y y)) 1/18)))))","(fma.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) x)) (cbrt.f64 y))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) x)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/9) (pow.f64 x 2)))))","(+.f64 (cbrt.f64 y) (fma.f64 1/3 (*.f64 x (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) (pow.f64 (/.f64 1 (*.f64 y y)) 1/18))) (*.f64 -1/9 (*.f64 (*.f64 x x) (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18))))))","(+.f64 (cbrt.f64 y) (fma.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) x)) (*.f64 (*.f64 x x) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18))))))","(+.f64 (cbrt.f64 y) (*.f64 x (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) (pow.f64 (/.f64 1 (*.f64 y y)) 1/18))) (*.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18))) x))))","(+.f64 (pow.f64 y 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/9) x)) (+.f64 (*.f64 -1/3 (*.f64 (*.f64 (+.f64 (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3)))) (pow.f64 x 3)) (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/9) (pow.f64 x 2))))))","(+.f64 (cbrt.f64 y) (fma.f64 1/3 (*.f64 x (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) (pow.f64 (/.f64 1 (*.f64 y y)) 1/18))) (fma.f64 -1/3 (*.f64 (fma.f64 1/27 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 -2/9 (cbrt.f64 (/.f64 1 (*.f64 y y))))) (*.f64 (pow.f64 x 3) (cbrt.f64 (/.f64 1 (*.f64 y y))))) (*.f64 -1/9 (*.f64 (*.f64 x x) (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18)))))))","(+.f64 (cbrt.f64 y) (fma.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) x)) (fma.f64 -1/9 (*.f64 x (*.f64 x (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18)))) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) (*.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) -5/27))))))","(+.f64 (fma.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) (*.f64 (pow.f64 (/.f64 1 (*.f64 y y)) 1/18) x)) (cbrt.f64 y)) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 y y))) -5/27) (*.f64 (pow.f64 x 3) (cbrt.f64 (/.f64 1 (*.f64 y y))))) (*.f64 (*.f64 x x) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 y 7)) 1/18))))))","(pow.f64 x 1/3)","(cbrt.f64 x)","(+.f64 (pow.f64 x 1/3) (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) y)))","(+.f64 (cbrt.f64 x) (*.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (*.f64 x x)) 1/18) (pow.f64 (/.f64 1 (*.f64 x x)) 1/18)))))","(fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 (/.f64 1 x) x) 1/18) (pow.f64 (/.f64 (/.f64 1 x) x) 1/18))) (cbrt.f64 x))","(fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (*.f64 x x)) 1/18) (pow.f64 (/.f64 1 (*.f64 x x)) 1/18))) (cbrt.f64 x))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) y)) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (pow.f64 y 2)))))","(+.f64 (cbrt.f64 x) (fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (*.f64 x x)) 1/18) (pow.f64 (/.f64 1 (*.f64 x x)) 1/18))) (*.f64 -1/9 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18))))))","(+.f64 (cbrt.f64 x) (fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 (/.f64 1 x) x) 1/18) (pow.f64 (/.f64 (/.f64 1 x) x) 1/18))) (*.f64 -1/9 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18))))))","(+.f64 (cbrt.f64 x) (*.f64 y (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (*.f64 x x)) 1/18) (pow.f64 (/.f64 1 (*.f64 x x)) 1/18))) (*.f64 (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18))) y))))","(+.f64 (pow.f64 x 1/3) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/9) y)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3) (*.f64 (pow.f64 y 3) (+.f64 (*.f64 1/27 (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3)) (*.f64 -2/9 (*.f64 (pow.f64 (pow.f64 1 4) 1/9) (pow.f64 (/.f64 1 (pow.f64 x 2)) 1/3))))))) (*.f64 -1/9 (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/9) (pow.f64 y 2))))))","(+.f64 (cbrt.f64 x) (fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (*.f64 x x)) 1/18) (pow.f64 (/.f64 1 (*.f64 x x)) 1/18))) (fma.f64 -1/3 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 x x))) (pow.f64 y 3)) (fma.f64 1/27 (cbrt.f64 (/.f64 1 (*.f64 x x))) (*.f64 -2/9 (cbrt.f64 (/.f64 1 (*.f64 x x)))))) (*.f64 -1/9 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18)))))))","(+.f64 (cbrt.f64 x) (fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 (/.f64 1 x) x) 1/18) (pow.f64 (/.f64 (/.f64 1 x) x) 1/18))) (fma.f64 -1/9 (*.f64 (*.f64 y y) (*.f64 (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18) (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18))) (*.f64 (cbrt.f64 (/.f64 (/.f64 1 x) x)) (*.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 (/.f64 1 x) x)) -5/27) (pow.f64 y 3)) -1/3)))))","(+.f64 (fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (*.f64 x x)) 1/18) (pow.f64 (/.f64 1 (*.f64 x x)) 1/18))) (cbrt.f64 x)) (fma.f64 -1/9 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18)) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18))) (*.f64 (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 x x))) -5/27) (pow.f64 y 3)) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 x x))) -1/3))))","(+.f64 (fma.f64 1/3 (*.f64 y (*.f64 (pow.f64 (/.f64 1 (*.f64 x x)) 1/18) (pow.f64 (/.f64 1 (*.f64 x x)) 1/18))) (cbrt.f64 x)) (fma.f64 -1/9 (*.f64 (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18)) (*.f64 y (pow.f64 (/.f64 1 (pow.f64 x 7)) 1/18))) (*.f64 (cbrt.f64 (/.f64 1 (*.f64 x x))) (*.f64 (*.f64 (cbrt.f64 (/.f64 1 (*.f64 x x))) (*.f64 (pow.f64 y 3) -5/27)) -1/3))))"]],"stop":[["node limit",1]],"time":62.092041015625,"type":"simplify"},{"compiler":[[5654,3425]],"time":69.93994140625,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) 10)","done",0.01171875],["(pow.f64 (/.f64 10 (+.f64 x y)) -1)","done",0.23046875],["(/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))","done",0.7729391844421046]],"compiler":[[7,5],[9,7],[15,9]],"count":[[246,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[243,0],"picked":[1,1]}],"min-error":[0],"time":43.35302734375,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["y",0.01171875,1],["(/.f64 (+.f64 x y) 10)",0.01171875,1],["(+.f64 x y)",0.01171875,1]],"compiler":[[3,2],[3,2],[7,5],[5,3],[27,15]],"count":[[3,1]],"inputs":[["(/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (/.f64 10 (cbrt.f64 (+.f64 x y))))","(pow.f64 (/.f64 10 (+.f64 x y)) -1)","(/.f64 (+.f64 x y) 10)"]],"link":["."],"name":["Text.Parsec.Token:makeTokenParser from parsec-3.1.9, A"],"oracle":[0.8627829344421047],"outputs":[["(/.f64 (+.f64 x y) 10)"]],"time":15.716064453125,"times":[["x",3.129150390625],["y",3.44189453125],["(/.f64 (+.f64 x y) 10)",3.498779296875],["(+.f64 x y)",4.684814453125]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[1,7,7,2.9625000000000002e-5],[0,6,7,2.0542e-5]],"inputs":[["(/.f64 (+.f64 x y) 10)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x y) 10)"]],"stop":[["done",1],["saturated",1]],"time":8.992919921875,"type":"simplify"},{"time":0.007080078125,"type":"soundness"},{"compiler":[[7,5],[7,5],[7,5]],"remove-preprocessing":[["(sort x y)"]],"time":9.240966796875,"type":"end"}]
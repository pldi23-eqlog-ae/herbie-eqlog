[{"compiler":[[10,6]],"method":["search"],"sampling":[[12,0.4936581836082041,0.09073164244182408,0.4156101739499718],[11,0.4721947843208909,0.11902430513873696,0.40878091054037213],[10,0.42926798574626446,0.18341450300067663,0.3873175112530589],[9,0.39024362340569496,0.24195104651153088,0.36780533008277416],[8,0.31219489872455597,0.37463387846946716,0.31317122280597687],[7,0.24975591897964478,0.49951183795928955,0.2507322430610657],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":22.819091796875,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.675048828125,361],["body",256,"valid",269.1669921875,8256]],"time":288.572021484375,"type":"sample"},{"compiler":[[9,5]],"egraph":[[0,2,2,1.75e-6],[14,7838,20,0.087988961],[13,6457,20,0.075300377],[12,6457,20,0.058338877000000004],[11,6377,20,0.052060627000000005],[10,6263,20,0.046337127000000006],[9,6150,20,0.040627793],[8,5589,20,0.034440335],[7,3851,20,0.025918877],[6,2113,20,0.016034293],[5,821,20,0.006960376],[4,273,20,0.002172459],[3,103,20,0.000769334],[2,47,20,0.000339543],[1,25,20,0.000165959],[0,7,20,5.6959e-5]],"inputs":[["0","1"],["(-.f64 (*.f64 a a) (*.f64 b b))","(-.f64 (*.f64 b b) (*.f64 a a))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(-.f64 (*.f64 b b) (*.f64 a a))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":111.48583984375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[14,7086,10,0.088909375],[13,7086,10,0.072473],[12,6971,10,0.062177958],[11,6725,10,0.052741416],[10,6304,10,0.044193290999999996],[9,5425,10,0.035756499],[8,3916,10,0.025228916],[7,1662,10,0.015279708000000001],[6,832,10,0.0061472490000000005],[5,382,10,0.002859541],[4,133,10,0.0010782909999999999],[3,56,10,0.000444333],[2,27,10,0.000218083],[1,15,10,0.000112708],[0,6,10,4.3458e-5]],"inputs":[["(-.f64 (*.f64 a a) (*.f64 b b))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 a a) (*.f64 b b))"]],"stop":[["node limit",1]],"time":101.573974609375,"type":"simplify"},{"compiler":[[9,5]],"time":0.260986328125,"type":"eval"},{"alts":[["(-.f64 (*.f64 a a) (*.f64 b b))","next",0.01171875]],"compiler":[[9,5],[9,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.01171875],"time":0.64404296875,"type":"prune"},{"compiler":[[17,5]],"locations":[["(-.f64 (*.f64 a a) (*.f64 b b))",0.01171875,true]],"time":3.528076171875,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 (*.f64 a a) (*.f64 b b))","b","-inf",0.19287109375],["(-.f64 (*.f64 a a) (*.f64 b b))","b","inf",0.260009765625],["(-.f64 (*.f64 a a) (*.f64 b b))","b","0",0.341064453125],["(-.f64 (*.f64 a a) (*.f64 b b))","a","-inf",0.196044921875],["(-.f64 (*.f64 a a) (*.f64 b b))","a","inf",0.31494140625],["(-.f64 (*.f64 a a) (*.f64 b b))","a","0",0.466064453125]],"time":1.85302734375,"type":"series"},{"count":[[1,46]],"egraph":[[2,1985,10,0.017900874],[1,139,10,0.002632999],[0,6,10,0.000162166]],"inputs":[["(-.f64 (*.f64 a a) (*.f64 b b))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a a) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a a) (*.f64 (*.f64 b (neg.f64 b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a a) (+.f64 (*.f64 b (neg.f64 b)) (fma.f64 (neg.f64 b) b (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 (neg.f64 b) b (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 (*.f64 b (neg.f64 b)) 1 (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 b) 2)) (cbrt.f64 (pow.f64 b 4)) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (*.f64 (fma.f64 (neg.f64 b) b (*.f64 b b)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (+.f64 (fma.f64 (neg.f64 b) b (*.f64 b b)) (fma.f64 (neg.f64 b) b (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b (neg.f64 b)) (*.f64 a a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 b) b (*.f64 b b)) (-.f64 (*.f64 a a) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 a a) (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6)) (/.f64 1 (+.f64 (pow.f64 a 4) (+.f64 (pow.f64 b 4) (pow.f64 (*.f64 a b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4)) (/.f64 1 (fma.f64 a a (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 a b) (-.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 a b) (+.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 a 4) (+.f64 (pow.f64 b 4) (pow.f64 (*.f64 a b) 2))) (-.f64 (pow.f64 a 6) (pow.f64 b 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 a a (*.f64 b b)) (-.f64 (pow.f64 a 4) (pow.f64 b 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6)) (+.f64 (pow.f64 a 4) (+.f64 (pow.f64 b 4) (pow.f64 (*.f64 a b) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4)) (fma.f64 a a (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 a 6) (pow.f64 b 6))) (neg.f64 (+.f64 (pow.f64 a 4) (+.f64 (pow.f64 b 4) (pow.f64 (*.f64 a b) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 a 4) (pow.f64 b 4))) (neg.f64 (fma.f64 a a (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 a 6) (pow.f64 (*.f64 b (neg.f64 b)) 3)) (+.f64 (pow.f64 a 4) (-.f64 (*.f64 (*.f64 b (neg.f64 b)) (*.f64 b (neg.f64 b))) (*.f64 (*.f64 a a) (*.f64 b (neg.f64 b))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 3) (pow.f64 (fma.f64 (neg.f64 b) b (*.f64 b b)) 3)) (+.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 2) (-.f64 (*.f64 (fma.f64 (neg.f64 b) b (*.f64 b b)) (fma.f64 (neg.f64 b) b (*.f64 b b))) (*.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 (neg.f64 b) b (*.f64 b b))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 a 4) (*.f64 (*.f64 b (neg.f64 b)) (*.f64 b (neg.f64 b)))) (-.f64 (*.f64 a a) (*.f64 b (neg.f64 b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 2) (*.f64 (fma.f64 (neg.f64 b) b (*.f64 b b)) (fma.f64 (neg.f64 b) b (*.f64 b b)))) (-.f64 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 (neg.f64 b) b (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (*.f64 a a) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 a a) (*.f64 b b)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 a a) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 a a) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 a a) (*.f64 b b))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a a (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 a a) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 a a) (*.f64 b b)) (fma.f64 (neg.f64 b) b (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) 2) (cbrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (fma.f64 (neg.f64 b) b (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 a 4)) (pow.f64 (cbrt.f64 a) 2) (*.f64 b (neg.f64 b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 b b))) (fma.f64 (neg.f64 b) b (*.f64 b b)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 a b) (-.f64 a b) (fma.f64 (neg.f64 b) b (*.f64 b b)))))))"]],"rules":[["egg-rr",46]],"stop":[["node limit",1]],"time":36.844970703125,"type":"rewrite"},{"count":[[70,51]],"egraph":[[7,5169,210,0.024846542],[6,1792,210,0.012202042],[5,763,210,0.004700167],[4,223,210,0.001925167],[3,87,210,0.000764292],[2,42,210,0.000374958],[1,21,210,0.00019075],[0,9,228,7.3042e-5]],"inputs":[["(*.f64 -1 (pow.f64 b 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(pow.f64 a 2)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(pow.f64 a 2)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(pow.f64 a 2)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 -1 (pow.f64 b 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(*.f64 -1 (pow.f64 b 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (pow.f64 b 2))","(neg.f64 (*.f64 b b))","(*.f64 b (neg.f64 b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(pow.f64 a 2)","(*.f64 a a)","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(*.f64 -1 (pow.f64 b 2))","(neg.f64 (*.f64 b b))","(*.f64 b (neg.f64 b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(*.f64 -1 (pow.f64 b 2))","(neg.f64 (*.f64 b b))","(*.f64 b (neg.f64 b))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))","(+.f64 (*.f64 -1 (pow.f64 b 2)) (pow.f64 a 2))","(fma.f64 -1 (*.f64 b b) (*.f64 a a))","(-.f64 (*.f64 a a) (*.f64 b b))","(fma.f64 a a (*.f64 b (neg.f64 b)))"]],"stop":[["node limit",1]],"time":39.56494140625,"type":"simplify"},{"compiler":[[777,233]],"time":6.442138671875,"type":"eval"},{"alts":[["(*.f64 (-.f64 a b) (+.f64 a b))","next",0]],"compiler":[[9,5],[9,5]],"count":[[52,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[51,1],"picked":[1,0]}],"min-error":[0],"time":7.828857421875,"type":"prune"},{"compiler":[[17,5]],"time":3.482177734375,"type":"localize"},{"compiler":[[2,2]],"time":0.0927734375,"type":"eval"},{"alts":[["(*.f64 (-.f64 a b) (+.f64 a b))","done",0]],"compiler":[[9,5]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.4501953125,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["a",0,1],["b",0,1],["(-.f64 (*.f64 a a) (*.f64 b b))",0,1],["(*.f64 a a)",0,1],["(*.f64 b b)",0,1]],"compiler":[[3,2],[3,2],[9,5],[5,3],[5,3],[16,8]],"count":[[2,1]],"inputs":[["(*.f64 (-.f64 a b) (+.f64 a b))","(-.f64 (*.f64 a a) (*.f64 b b))"]],"link":["."],"name":["Difference of squares"],"oracle":[0.01171875],"outputs":[["(*.f64 (-.f64 a b) (+.f64 a b))"]],"time":11.822998046875,"times":[["a",2.439208984375],["b",2.26708984375],["(-.f64 (*.f64 a a) (*.f64 b b))",2.406982421875],["(*.f64 a a)",2.029052734375],["(*.f64 b b)",2.09521484375]],"type":"regimes"},{"compiler":[[9,5]],"egraph":[[4,18,10,0.000100167],[3,17,10,8.0208e-5],[2,15,10,6.0125000000000005e-5],[1,10,10,4.0375000000000006e-5],[0,6,10,1.7875e-5]],"inputs":[["(*.f64 (-.f64 a b) (+.f64 a b))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 a b) (+.f64 a b))"]],"stop":[["done",1],["saturated",1]],"time":8.530029296875,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[9,5]],"remove-preprocessing":[[]],"time":7.60986328125,"type":"end"}]
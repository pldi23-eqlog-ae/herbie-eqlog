[{"compiler":[[10,8]],"method":["search"],"sampling":[[12,0.5036602020263672,0.0009760856628417969,0.495363712310791],[11,0.5036602020263672,0.0019521713256835938,0.4943876266479492],[10,0.5036602020263672,0.0039043426513671875,0.4924354553222656],[9,0.499755859375,0.007808685302734375,0.4924354553222656],[8,0.499755859375,0.01561737060546875,0.48462677001953125],[7,0.499755859375,0.0312347412109375,0.4690093994140625],[6,0.499755859375,0.062469482421875,0.437774658203125],[5,0.499755859375,0.12493896484375,0.37530517578125],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.720947265625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.363525390625,8],["body",512,"valid",207.691162109375,2111],["body",1024,"valid",796.106201171875,4050],["body",2048,"valid",94.9482421875,433],["body",256,"valid",81.304931640625,1662]],"time":1188.946044921875,"type":"sample"},{"compiler":[[9,7]],"egraph":[[0,1,1,1.458e-6],[8,5003,12,0.026418168],[7,2155,13,0.014594000999999999],[6,715,13,0.0060470839999999994],[5,260,13,0.002319626],[4,120,13,0.001089418],[3,58,13,0.0005590840000000001],[2,34,13,0.00028366700000000003],[1,19,13,0.000145584],[0,8,13,6.2667e-5]],"inputs":[["0"],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)","(*.f64 -1/2 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) -1/2)","(fma.f64 1/2 (exp.f64 x) (/.f64 -1/2 (exp.f64 x)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":49.757080078125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[8,5003,12,0.025665415999999996],[7,2155,13,0.014142540999999998],[6,715,13,0.0059867079999999994],[5,260,13,0.0022736249999999996],[4,120,13,0.0010757079999999999],[3,58,13,0.000547],[2,34,13,0.000277708],[1,19,13,0.00014029100000000002],[0,8,13,5.9125e-5]],"inputs":[["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)","(*.f64 -1/2 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(*.f64 (-.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)) -1/2)","(fma.f64 1/2 (exp.f64 x) (/.f64 -1/2 (exp.f64 x)))"]],"stop":[["node limit",1]],"time":36.876953125,"type":"simplify"},{"compiler":[[17,11]],"time":0.40185546875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)","next",57.32349011589512]],"compiler":[[9,7],[9,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[57.32349011589512],"time":0.901123046875,"type":"prune"},{"compiler":[[24,8]],"locations":[["(exp.f64 (neg.f64 x))",0.00390625,true],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))",4.970860903551091,true]],"time":5.6298828125,"type":"localize"},{"count":[[2,16]],"series":[["(exp.f64 (neg.f64 x))","x","-inf",0.14501953125],["(exp.f64 (neg.f64 x))","x","inf",0.14697265625],["(exp.f64 (neg.f64 x))","x","0",0.22802734375],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","x","-inf",0.22119140625],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","x","inf",0.240966796875],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","x","0",0.43505859375]],"time":1.4970703125,"type":"series"},{"count":[[2,22]],"egraph":[[0,4,5,0.000153458],[2,967,5,0.02098675],[1,79,5,0.001372333],[0,4,5,0.0001115],[0,6,6,0.000163708],[2,2188,6,0.003954458],[1,130,6,0.00392975],[0,6,6,0.000168083],[2,2188,11,0.004225],[1,130,11,0.004198375],[0,6,11,0.000170041]],"inputs":[["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(exp.f64 (neg.f64 x))"]],"method":["egg-rewrite-iter-limit","egg-rewrite","egg-rewrite-iter-limit","egg-rewrite","batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 x) (neg.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 2 (sinh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (sinh.f64 x))) (cbrt.f64 (*.f64 2 (sinh.f64 x)))) (cbrt.f64 (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 2 (sinh.f64 x))) (sqrt.f64 (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (sinh.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 x) 3) (pow.f64 (exp.f64 (neg.f64 x)) 3)) (+.f64 (*.f64 (exp.f64 x) (exp.f64 x)) (+.f64 (*.f64 (exp.f64 (neg.f64 x)) (exp.f64 (neg.f64 x))) (*.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 x) (exp.f64 x)) (*.f64 (exp.f64 (neg.f64 x)) (exp.f64 (neg.f64 x)))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (sinh.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 (*.f64 2 (sinh.f64 x)) (*.f64 2 (sinh.f64 x))) (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 2 (sinh.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (exp.f64 (neg.f64 x))) (cbrt.f64 (exp.f64 (neg.f64 x)))) (cbrt.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (neg.f64 x))) (sqrt.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 (exp.f64 (neg.f64 x)) (exp.f64 (neg.f64 x))) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (neg.f64 x))))))))"]],"rules":[["egg-rr",9],["egg-rr",13]],"stop":[["iter limit",1],["node limit",1],["iter limit",1],["unsound",1],["unsound",1]],"time":99.02490234375,"type":"rewrite"},{"count":[[38,40]],"egraph":[[6,7288,147,0.040867084],[5,3889,147,0.026291917],[4,1783,147,0.011701708000000002],[3,675,148,0.0052647910000000004],[2,229,152,0.0020872490000000002],[1,96,156,0.0007676660000000001],[0,37,158,0.000202083]],"inputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 1/3 (pow.f64 x 3)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (*.f64 1/60 (pow.f64 x 5))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 1/2520 (pow.f64 x 7)) (*.f64 1/60 (pow.f64 x 5)))))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x)))","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x))))","(exp.f64 (*.f64 -1 x))","(exp.f64 (*.f64 -1 x))","(exp.f64 (*.f64 -1 x))","(exp.f64 (*.f64 -1 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 1/3 (pow.f64 x 3)))","(fma.f64 2 x (*.f64 1/3 (pow.f64 x 3)))","(fma.f64 1/3 (pow.f64 x 3) (*.f64 2 x))","(*.f64 x (fma.f64 1/3 (*.f64 x x) 2))","(*.f64 x (fma.f64 x (*.f64 x 1/3) 2))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (*.f64 1/60 (pow.f64 x 5))))","(fma.f64 2 x (fma.f64 1/3 (pow.f64 x 3) (*.f64 1/60 (pow.f64 x 5))))","(fma.f64 1/60 (pow.f64 x 5) (fma.f64 1/3 (pow.f64 x 3) (*.f64 2 x)))","(fma.f64 x (fma.f64 1/3 (*.f64 x x) 2) (*.f64 1/60 (pow.f64 x 5)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 1/2520 (pow.f64 x 7)) (*.f64 1/60 (pow.f64 x 5)))))","(fma.f64 2 x (fma.f64 1/3 (pow.f64 x 3) (fma.f64 1/2520 (pow.f64 x 7) (*.f64 1/60 (pow.f64 x 5)))))","(fma.f64 2 x (fma.f64 1/3 (pow.f64 x 3) (fma.f64 1/60 (pow.f64 x 5) (*.f64 1/2520 (pow.f64 x 7)))))","(fma.f64 x (fma.f64 1/3 (*.f64 x x) 2) (fma.f64 1/60 (pow.f64 x 5) (*.f64 1/2520 (pow.f64 x 7))))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 (neg.f64 x) 1)","(-.f64 1 x)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x)))","(+.f64 1 (fma.f64 1/2 (*.f64 x x) (neg.f64 x)))","(+.f64 1 (-.f64 (*.f64 1/2 (*.f64 x x)) x))","(-.f64 (fma.f64 1/2 (*.f64 x x) 1) x)","(fma.f64 x (fma.f64 x 1/2 -1) 1)","(+.f64 (*.f64 -1/6 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1 x))))","(fma.f64 -1/6 (pow.f64 x 3) (+.f64 1 (fma.f64 1/2 (*.f64 x x) (neg.f64 x))))","(+.f64 (-.f64 (*.f64 1/2 (*.f64 x x)) x) (fma.f64 (pow.f64 x 3) -1/6 1))","(-.f64 (fma.f64 (pow.f64 x 3) -1/6 (fma.f64 1/2 (*.f64 x x) 1)) x)","(fma.f64 x (fma.f64 x 1/2 -1) (fma.f64 (pow.f64 x 3) -1/6 1))","(-.f64 (fma.f64 (*.f64 x x) (fma.f64 x -1/6 1/2) 1) x)","(exp.f64 (*.f64 -1 x))","(exp.f64 (neg.f64 x))","(exp.f64 (*.f64 -1 x))","(exp.f64 (neg.f64 x))","(exp.f64 (*.f64 -1 x))","(exp.f64 (neg.f64 x))","(exp.f64 (*.f64 -1 x))","(exp.f64 (neg.f64 x))"]],"stop":[["node limit",1]],"time":55.84619140625,"type":"simplify"},{"compiler":[[502,303]],"time":7.044921875,"type":"eval"},{"alts":[["(/.f64 (*.f64 2 (sinh.f64 x)) 2)","next",0.00390625]],"compiler":[[7,6],[7,6]],"count":[[41,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[40,1],"picked":[1,0]}],"min-error":[0.00390625],"time":5.921875,"type":"prune"},{"compiler":[[15,9]],"locations":[["(sinh.f64 x)",0.00390625,true]],"time":3.691162109375,"type":"localize"},{"count":[[1,12]],"series":[["(sinh.f64 x)","x","-inf",0.543212890625],["(sinh.f64 x)","x","inf",0.567138671875],["(sinh.f64 x)","x","0",0.39990234375]],"time":1.56103515625,"type":"series"},{"count":[[1,10]],"egraph":[[0,3,3,0.000103708],[2,785,3,0.021683875000000002],[1,63,3,0.001119417],[0,3,3,0.000102542]],"inputs":[["(sinh.f64 x)"]],"method":["egg-rewrite-iter-limit","batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sinh.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (sinh.f64 x)) (cbrt.f64 (sinh.f64 x))) (cbrt.f64 (sinh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sinh.f64 x)) (sqrt.f64 (sinh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sinh.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sinh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 (sinh.f64 x) (sinh.f64 x)) (sinh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sinh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sinh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sinh.f64 x)))))))"]],"rules":[["egg-rr",10]],"stop":[["iter limit",1],["node limit",1]],"time":52.683837890625,"type":"rewrite"},{"count":[[22,19]],"egraph":[[9,7240,142,0.04903825],[8,4571,142,0.035062875],[7,3587,142,0.021910042],[6,2333,142,0.014676375],[5,1500,142,0.0087095],[4,684,142,0.004566459],[3,370,142,0.002270834],[2,151,142,0.0011087089999999998],[1,67,150,0.000459626],[0,25,150,0.000149834]],"inputs":[["x","(+.f64 (*.f64 1/6 (pow.f64 x 3)) x)","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/5040 (pow.f64 x 7)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x)))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 1/6 (pow.f64 x 3)) x)","(fma.f64 1/6 (pow.f64 x 3) x)","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x))","(fma.f64 1/6 (pow.f64 x 3) (fma.f64 1/120 (pow.f64 x 5) x))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/5040 (pow.f64 x 7)) (+.f64 (*.f64 1/120 (pow.f64 x 5)) x)))","(fma.f64 1/6 (pow.f64 x 3) (fma.f64 1/5040 (pow.f64 x 7) (fma.f64 1/120 (pow.f64 x 5) x)))","(fma.f64 1/6 (pow.f64 x 3) (fma.f64 1/120 (pow.f64 x 5) (fma.f64 1/5040 (pow.f64 x 7) x)))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(fma.f64 1/2 (exp.f64 x) (/.f64 -1/2 (exp.f64 x)))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(fma.f64 1/2 (exp.f64 x) (/.f64 -1/2 (exp.f64 x)))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(fma.f64 1/2 (exp.f64 x) (/.f64 -1/2 (exp.f64 x)))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(fma.f64 1/2 (exp.f64 x) (/.f64 -1/2 (exp.f64 x)))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(fma.f64 1/2 (exp.f64 x) (/.f64 -1/2 (exp.f64 x)))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(fma.f64 1/2 (exp.f64 x) (/.f64 -1/2 (exp.f64 x)))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(fma.f64 1/2 (exp.f64 x) (/.f64 -1/2 (exp.f64 x)))","(*.f64 1/2 (-.f64 (exp.f64 x) (/.f64 1 (exp.f64 x))))","(*.f64 1/2 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(fma.f64 1/2 (exp.f64 x) (/.f64 -1/2 (exp.f64 x)))"]],"stop":[["node limit",1]],"time":64.64208984375,"type":"simplify"},{"compiler":[[226,167]],"time":3.487060546875,"type":"eval"},{"alts":[["(/.f64 (*.f64 2 (sinh.f64 x)) 2)","done",0.00390625]],"compiler":[[7,6]],"count":[[20,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[19,0],"picked":[1,1]}],"min-error":[0.00390625],"time":2.387939453125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)",0.00390625,1],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))",0.00390625,1]],"compiler":[[2,1],[9,7],[7,5],[15,12]],"count":[[2,1]],"inputs":[["(/.f64 (*.f64 2 (sinh.f64 x)) 2)","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)"]],"link":["."],"name":["Hyperbolic sine"],"oracle":[57.32349011589512],"outputs":[["(/.f64 (*.f64 2 (sinh.f64 x)) 2)"]],"time":8.68408203125,"times":[["x",3.785888671875],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) 2)",2.14990234375],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))",2.120849609375]],"type":"regimes"},{"compiler":[[7,6]],"egraph":[[1,7,9,2.7042e-5],[0,6,9,1.6583e-5]],"inputs":[["(/.f64 (*.f64 2 (sinh.f64 x)) 2)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 2 (sinh.f64 x)) 2)"]],"stop":[["done",1],["saturated",1]],"time":8.204833984375,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[7,6]],"remove-preprocessing":[[]],"time":8.14794921875,"type":"end"}]
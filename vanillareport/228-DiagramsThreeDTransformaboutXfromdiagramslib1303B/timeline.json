[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[11,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[10,0.5616764276564936,0.43685944373282837,0.0014641286106780171],[9,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[8,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[7,0.2496339678473305,0.7489019035419915,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":107.153076171875,"type":"analyze"},{"outcomes":[["body",1024,"valid",509.626708984375,1996],["body",512,"valid",161.011474609375,1077],["body",2048,"valid",1.656982421875,3],["body",256,"valid",366.913818359375,5180]],"time":1047.35205078125,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,1.584e-6],[2,50,48,0.000369625],[1,38,48,0.000233833],[0,22,48,0.000104292]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","(+.f64 (*.f64 y (sin.f64 x)) (*.f64 z (cos.f64 x)))","(+.f64 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(+.f64 (*.f64 x (sin.f64 z)) (*.f64 y (cos.f64 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","(+.f64 (*.f64 y (sin.f64 x)) (*.f64 z (cos.f64 x)))","(fma.f64 y (sin.f64 x) (*.f64 z (cos.f64 x)))","(+.f64 (*.f64 z (sin.f64 y)) (*.f64 x (cos.f64 y)))","(fma.f64 z (sin.f64 y) (*.f64 x (cos.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 (sin.f64 y) z))","(+.f64 (*.f64 x (sin.f64 z)) (*.f64 y (cos.f64 z)))","(fma.f64 x (sin.f64 z) (*.f64 y (cos.f64 z)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":23.123046875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[2,16,12,0.000146667],[1,13,12,9.8292e-5],[0,9,12,4.675e-5]],"inputs":[["(+.f64 (*.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))","(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))"]],"stop":[["saturated",1]],"time":10.163818359375,"type":"simplify"},{"compiler":[[20,9]],"time":0.315185546875,"type":"eval"},{"alts":[["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","next",0.1328125]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.1328125],"time":0.8349609375,"type":"prune"},{"compiler":[[22,7]],"locations":[["(cos.f64 y)",0.015625,true],["(sin.f64 y)",0.015625,true],["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))",0.08203125,true],["(*.f64 z (cos.f64 y))",0.109375,true]],"time":6.117919921875,"type":"localize"},{"count":[[4,60]],"series":[["(cos.f64 y)","y","-inf",0.149169921875],["(cos.f64 y)","y","inf",0.133056640625],["(cos.f64 y)","y","0",0.17919921875],["(sin.f64 y)","y","-inf",0.152099609375],["(sin.f64 y)","y","inf",0.138916015625],["(sin.f64 y)","y","0",0.2587890625],["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","z","-inf",0.166015625],["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","z","inf",0.1640625],["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","z","0",0.31689453125],["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","y","-inf",0.322021484375],["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","y","inf",0.323974609375],["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","y","0",0.2509765625],["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","x","-inf",0.594970703125],["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","x","inf",0.310791015625],["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","x","0",0.54296875],["(*.f64 z (cos.f64 y))","y","-inf",0.55810546875],["(*.f64 z (cos.f64 y))","y","inf",0.31103515625],["(*.f64 z (cos.f64 y))","y","0",0.509033203125],["(*.f64 z (cos.f64 y))","z","-inf",0.294189453125],["(*.f64 z (cos.f64 y))","z","inf",0.409912109375],["(*.f64 z (cos.f64 y))","z","0",0.720947265625]],"time":7.0380859375,"type":"series"},{"count":[[4,66]],"egraph":[[2,1853,24,0.018418874000000002],[1,156,24,0.002506291],[0,8,24,0.000180291]],"inputs":[["(*.f64 z (cos.f64 y))","(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","(sin.f64 y)","(cos.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 z (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (cos.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 z 3) (pow.f64 (cos.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (cos.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cos.f64 y)) (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (sin.f64 y)) 1) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2) (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (sin.f64 y)) 3) (pow.f64 (*.f64 z (cos.f64 y)) 3)) (+.f64 (*.f64 (*.f64 x (sin.f64 y)) (*.f64 x (sin.f64 y))) (-.f64 (pow.f64 (*.f64 z (cos.f64 y)) 2) (*.f64 (*.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (sin.f64 y)) (*.f64 x (sin.f64 y))) (pow.f64 (*.f64 z (cos.f64 y)) 2)) (-.f64 (*.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))"]],"rules":[["egg-rr",16],["egg-rr",16],["egg-rr",21],["egg-rr",13]],"stop":[["node limit",1]],"time":42.800048828125,"type":"rewrite"},{"count":[[126,97]],"egraph":[[13,7866,607,0.08730170899999999],[12,7176,607,0.07802674999999999],[11,6600,607,0.06678566699999999],[10,6103,607,0.056681375],[9,5690,607,0.047126542],[8,3729,607,0.03768775],[7,3514,612,0.028863457999999998],[6,3297,612,0.02266925],[5,3159,612,0.01706025],[4,2077,612,0.011613208],[3,1336,612,0.006774917],[2,419,614,0.0032178750000000002],[1,162,626,0.00112075],[0,63,636,0.000311333]],"inputs":[["(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","z","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","z","(+.f64 (*.f64 y x) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) (+.f64 z (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","z","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) z)","(fma.f64 -1/2 (*.f64 z (*.f64 y y)) z)","(*.f64 (fma.f64 -1/2 (*.f64 y y) 1) z)","(*.f64 z (fma.f64 y (*.f64 y -1/2) 1))","(fma.f64 y (*.f64 z (*.f64 y -1/2)) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z))))","(+.f64 (fma.f64 -1/2 (*.f64 z (*.f64 y y)) z) (*.f64 1/24 (*.f64 z (pow.f64 y 4))))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 1/24 (*.f64 z (pow.f64 y 4)) z))","(*.f64 z (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))))","(fma.f64 -1/2 (*.f64 z (*.f64 y y)) (fma.f64 -1/720 (*.f64 z (pow.f64 y 6)) (+.f64 z (*.f64 1/24 (*.f64 z (pow.f64 y 4))))))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 -1/720 (*.f64 z (pow.f64 y 6)) (fma.f64 1/24 (*.f64 z (pow.f64 y 4)) z)))","(+.f64 z (*.f64 z (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/2) (*.f64 1/24 (pow.f64 y 4))))))","(*.f64 z (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1))))","(*.f64 z (fma.f64 y (fma.f64 y -1/2 (*.f64 -1/720 (pow.f64 y 5))) (fma.f64 1/24 (pow.f64 y 4) 1)))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","z","(+.f64 (*.f64 y x) z)","(fma.f64 y x z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) z))","(fma.f64 -1/2 (*.f64 z (*.f64 y y)) (fma.f64 y x z))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 y x z))","(fma.f64 y x (*.f64 z (fma.f64 y (*.f64 y -1/2) 1)))","(fma.f64 (*.f64 y y) (*.f64 z -1/2) (fma.f64 y x z))","(fma.f64 y (fma.f64 -1/2 (*.f64 y z) x) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) (+.f64 z (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(fma.f64 -1/2 (*.f64 z (*.f64 y y)) (+.f64 (fma.f64 y x z) (*.f64 -1/6 (*.f64 x (pow.f64 y 3)))))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 y x (fma.f64 -1/6 (*.f64 x (pow.f64 y 3)) z)))","(+.f64 (*.f64 z (fma.f64 y (*.f64 y -1/2) 1)) (*.f64 x (fma.f64 -1/6 (pow.f64 y 3) y)))","(fma.f64 y (*.f64 -1/2 (*.f64 y z)) (fma.f64 x (fma.f64 -1/6 (pow.f64 y 3) y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 (fma.f64 1/120 (pow.f64 y 5) y) (*.f64 -1/5040 (pow.f64 y 7))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 y y)))","(fma.f64 -1/2 (*.f64 y y) 1)","(fma.f64 y (*.f64 y -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (*.f64 1/24 (pow.f64 y 4)))","(fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (*.f64 1/24 (pow.f64 y 4))))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1)))","(fma.f64 y (fma.f64 y -1/2 (*.f64 -1/720 (pow.f64 y 5))) (fma.f64 1/24 (pow.f64 y 4) 1))"]],"stop":[["node limit",1]],"time":117.2587890625,"type":"simplify"},{"compiler":[[1249,498]],"time":13.302978515625,"type":"eval"},{"alts":[["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","fresh",0.24550634768442015],["(fma.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3) (*.f64 z (cos.f64 y)))","fresh",0.3447838379159781],["(fma.f64 x (sin.f64 y) (*.f64 z (log.f64 (exp.f64 (cos.f64 y)))))","fresh",0.26256229383381785],["(fma.f64 x (log.f64 (exp.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","fresh",9.227124132277458],["(pow.f64 (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2)","fresh",31.280292529305328],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","fresh",0.24941259768442015],["(*.f64 (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2) (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))","fresh",0.7919466798114493],["(fma.f64 x (sin.f64 y) (pow.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) 3))","fresh",0.5587464844426087],["(fma.f64 x (exp.f64 (log.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","fresh",33.424491112315394],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","next",0.15462875976844204]],"compiler":[[14,10],[14,10],[13,9],[13,9],[14,10],[18,11],[24,11],[14,10],[13,9],[13,9],[14,10],[14,10],[13,9],[13,9],[14,10],[18,11],[24,11],[14,10],[13,9],[13,9]],"count":[[98,10]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[97,10],"picked":[1,0]}],"min-error":[0.046875],"time":22.97021484375,"type":"prune"},{"compiler":[[31,9]],"locations":[["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))",0.08203125,true],["(*.f64 z (cos.f64 y))",0.109375,false],["(expm1.f64 (log1p.f64 (sin.f64 y)))",0.171875,true],["(log1p.f64 (sin.f64 y))",0.2815277612344428,true]],"time":9.02490234375,"type":"localize"},{"count":[[3,60]],"series":[["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","z","-inf",0.15185546875],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","z","inf",0.1689453125],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","z","0",0.154052734375],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","y","-inf",0.158203125],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","y","inf",0.177001953125],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","y","0",0.16015625],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","x","-inf",1.655029296875],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","x","inf",0.155029296875],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","x","0",0.157958984375],["(expm1.f64 (log1p.f64 (sin.f64 y)))","y","-inf",0.1708984375],["(expm1.f64 (log1p.f64 (sin.f64 y)))","y","inf",0.15087890625],["(expm1.f64 (log1p.f64 (sin.f64 y)))","y","0",0.176025390625],["(log1p.f64 (sin.f64 y))","y","-inf",10.794921875],["(log1p.f64 (sin.f64 y))","y","inf",15.262939453125],["(log1p.f64 (sin.f64 y))","y","0",0.333984375]],"time":30.012939453125,"type":"series"},{"count":[[3,55]],"egraph":[[2,2062,20,0.018738834],[1,177,20,0.0027487920000000003],[0,10,20,0.000217417]],"inputs":[["(log1p.f64 (sin.f64 y))","(expm1.f64 (log1p.f64 (sin.f64 y)))","(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log1p.f64 (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (sin.f64 y))) (pow.f64 (cbrt.f64 (log1p.f64 (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (sin.f64 y))) 2) (cbrt.f64 (log1p.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 (sin.f64 y))) (sqrt.f64 (log1p.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 (sin.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log1p.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 (sin.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log1p.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log1p.f64 (sin.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (sin.f64 y) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (sin.f64 y) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 (sin.f64 y) 1) 3) 1) (+.f64 (*.f64 (+.f64 (sin.f64 y) 1) (+.f64 (sin.f64 y) 1)) (+.f64 1 (*.f64 (+.f64 (sin.f64 y) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (sin.f64 y) 1) (+.f64 (sin.f64 y) 1)) 1) (+.f64 (+.f64 (sin.f64 y) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (cos.f64 y)) (*.f64 (sin.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) x) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) x) 1) (*.f64 z (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2) (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 y) x) 3) (pow.f64 (*.f64 z (cos.f64 y)) 3)) (+.f64 (*.f64 (*.f64 (sin.f64 y) x) (*.f64 (sin.f64 y) x)) (-.f64 (pow.f64 (*.f64 z (cos.f64 y)) 2) (*.f64 (*.f64 (sin.f64 y) x) (*.f64 z (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (sin.f64 y) x) (*.f64 (sin.f64 y) x)) (pow.f64 (*.f64 z (cos.f64 y)) 2)) (-.f64 (*.f64 (sin.f64 y) x) (*.f64 z (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))))))"]],"rules":[["egg-rr",21],["egg-rr",19],["egg-rr",15]],"stop":[["node limit",1]],"time":39.738037109375,"type":"rewrite"},{"count":[[115,81]],"egraph":[[11,7818,541,0.079791668],[10,6596,541,0.069130876],[9,6132,541,0.055172667999999994],[8,5767,541,0.044642626],[7,5435,541,0.035587335],[6,5132,541,0.027565501],[5,4871,541,0.020395459999999997],[4,3020,541,0.013095751],[3,988,541,0.006516625999999999],[2,330,549,0.002426751],[1,139,552,0.000923209],[0,56,558,0.00027625]],"inputs":[["y","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) (+.f64 y (*.f64 1/6 (pow.f64 y 3))))","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) (+.f64 y (+.f64 (*.f64 1/6 (pow.f64 y 3)) (*.f64 -1/12 (pow.f64 y 4)))))","(log.f64 (+.f64 1 (sin.f64 y)))","(log.f64 (+.f64 1 (sin.f64 y)))","(log.f64 (+.f64 1 (sin.f64 y)))","(log.f64 (+.f64 1 (sin.f64 y)))","(log.f64 (+.f64 1 (sin.f64 y)))","(log.f64 (+.f64 1 (sin.f64 y)))","(log.f64 (+.f64 1 (sin.f64 y)))","(log.f64 (+.f64 1 (sin.f64 y)))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","z","(+.f64 (*.f64 y x) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) (+.f64 z (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) y)","(fma.f64 -1/2 (*.f64 y y) y)","(fma.f64 y (*.f64 y -1/2) y)","(*.f64 y (fma.f64 y -1/2 1))","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) (+.f64 y (*.f64 1/6 (pow.f64 y 3))))","(fma.f64 -1/2 (*.f64 y y) (+.f64 y (*.f64 1/6 (pow.f64 y 3))))","(fma.f64 -1/2 (*.f64 y y) (fma.f64 1/6 (pow.f64 y 3) y))","(fma.f64 y (*.f64 y -1/2) (fma.f64 1/6 (pow.f64 y 3) y))","(fma.f64 y (*.f64 y (fma.f64 y 1/6 -1/2)) y)","(fma.f64 (*.f64 y y) (fma.f64 y 1/6 -1/2) y)","(+.f64 (*.f64 -1/2 (pow.f64 y 2)) (+.f64 y (+.f64 (*.f64 1/6 (pow.f64 y 3)) (*.f64 -1/12 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) y) (fma.f64 1/6 (pow.f64 y 3) (*.f64 -1/12 (pow.f64 y 4))))","(fma.f64 y (*.f64 y -1/2) (fma.f64 1/6 (pow.f64 y 3) (fma.f64 -1/12 (pow.f64 y 4) y)))","(fma.f64 y (*.f64 y (fma.f64 y 1/6 -1/2)) (fma.f64 -1/12 (pow.f64 y 4) y))","(log.f64 (+.f64 1 (sin.f64 y)))","(log1p.f64 (sin.f64 y))","(log.f64 (+.f64 1 (sin.f64 y)))","(log1p.f64 (sin.f64 y))","(log.f64 (+.f64 1 (sin.f64 y)))","(log1p.f64 (sin.f64 y))","(log.f64 (+.f64 1 (sin.f64 y)))","(log1p.f64 (sin.f64 y))","(log.f64 (+.f64 1 (sin.f64 y)))","(log1p.f64 (sin.f64 y))","(log.f64 (+.f64 1 (sin.f64 y)))","(log1p.f64 (sin.f64 y))","(log.f64 (+.f64 1 (sin.f64 y)))","(log1p.f64 (sin.f64 y))","(log.f64 (+.f64 1 (sin.f64 y)))","(log1p.f64 (sin.f64 y))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(fma.f64 (pow.f64 y 3) -1/6 y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(fma.f64 (pow.f64 y 3) -1/6 (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 (fma.f64 1/120 (pow.f64 y 5) y) (*.f64 -1/5040 (pow.f64 y 7))))","(fma.f64 (pow.f64 y 3) -1/6 (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y)))","(fma.f64 -1/5040 (pow.f64 y 7) (fma.f64 (pow.f64 y 3) -1/6 (fma.f64 1/120 (pow.f64 y 5) y)))","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","z","(+.f64 (*.f64 y x) z)","(fma.f64 y x z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) z))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (fma.f64 y x z))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 y x z))","(fma.f64 y x (fma.f64 -1/2 (*.f64 y (*.f64 y z)) z))","(fma.f64 y x (fma.f64 y (*.f64 y (*.f64 -1/2 z)) z))","(fma.f64 y x (fma.f64 y (*.f64 -1/2 (*.f64 y z)) z))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) (+.f64 z (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (+.f64 (fma.f64 y x z) (*.f64 -1/6 (*.f64 (pow.f64 y 3) x))))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 y x (fma.f64 -1/6 (*.f64 (pow.f64 y 3) x) z)))","(+.f64 (*.f64 x (fma.f64 (pow.f64 y 3) -1/6 y)) (fma.f64 -1/2 (*.f64 y (*.f64 y z)) z))","(fma.f64 y (*.f64 y (*.f64 -1/2 z)) (fma.f64 x (fma.f64 (pow.f64 y 3) -1/6 y) z))","(fma.f64 y (*.f64 -1/2 (*.f64 y z)) (fma.f64 x (fma.f64 (pow.f64 y 3) -1/6 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(fma.f64 (sin.f64 y) x (*.f64 (cos.f64 y) z))"]],"stop":[["node limit",1]],"time":104.330078125,"type":"simplify"},{"compiler":[[1406,527]],"time":13.7939453125,"type":"eval"},{"alts":[["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","next",0.24550634768442015],["(fma.f64 x (expm1.f64 (pow.f64 (cbrt.f64 (log1p.f64 (sin.f64 y))) 3)) (*.f64 z (cos.f64 y)))","fresh",0.3738251953688404],["(*.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2))","fresh",0.7919466798114493],["(fma.f64 x (/.f64 (-.f64 (*.f64 (+.f64 (sin.f64 y) 1) (+.f64 (sin.f64 y) 1)) 1) (+.f64 (+.f64 (sin.f64 y) 1) 1)) (*.f64 z (cos.f64 y)))","fresh",9.287939159855565],["(fma.f64 x (expm1.f64 (*.f64 y (fma.f64 y -1/2 1))) (*.f64 z (cos.f64 y)))","fresh",14.712785967327656],["(fma.f64 x (sin.f64 y) (*.f64 z (log.f64 (exp.f64 (cos.f64 y)))))","fresh",0.26256229383381785],["(fma.f64 x (log.f64 (exp.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","fresh",9.227124132277458],["(fma.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3) (*.f64 z (cos.f64 y)))","fresh",0.3447838379159781],["(fma.f64 x (expm1.f64 (pow.f64 (sqrt.f64 (log1p.f64 (sin.f64 y))) 2)) (*.f64 z (cos.f64 y)))","fresh",33.146522558610656],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","fresh",0.24941259768442015],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","done",0.15462875976844204]],"compiler":[[14,10],[16,12],[24,11],[27,19],[16,11],[13,9],[13,9],[14,10],[16,12],[18,11],[13,9],[14,10],[16,12],[24,11],[27,19],[16,11],[13,9],[13,9],[14,10],[16,12],[18,11]],"count":[[112,11]],"kept":[{"done":[0,0],"fresh":[9,4],"new":[102,6],"picked":[1,1]}],"min-error":[0.0390625],"time":29.64404296875,"type":"prune"},{"compiler":[[37,16]],"locations":[["(cbrt.f64 (cos.f64 y))",0.0546875,true],["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))",0.08203125,true],["(*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3))",0.109375,true],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)",0.34183505861065216,true]],"time":9.241943359375,"type":"localize"},{"count":[[4,84]],"series":[["(cbrt.f64 (cos.f64 y))","y","-inf",0.157958984375],["(cbrt.f64 (cos.f64 y))","y","inf",0.158935546875],["(cbrt.f64 (cos.f64 y))","y","0",0.18408203125],["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","z","-inf",0.178955078125],["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","z","inf",0.161865234375],["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","z","0",0.177001953125],["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","y","-inf",0.16796875],["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","y","inf",0.173095703125],["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","y","0",0.18212890625],["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","x","-inf",0.166015625],["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","x","inf",0.18701171875],["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","x","0",0.240966796875],["(*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","-inf",0.2939453125],["(*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","inf",0.31298828125],["(*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","0",0.205078125],["(*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","z","-inf",0.23095703125],["(*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","z","inf",0.35107421875],["(*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","z","0",0.30517578125],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","-inf",1.291015625],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","inf",1.7119140625],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","0",0.43505859375]],"time":7.52490234375,"type":"series"},{"count":[[4,73]],"egraph":[[2,2365,26,0.021575501],[1,225,26,0.0034500010000000003],[0,11,26,0.000292959]],"inputs":[["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","(*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","(cbrt.f64 (cos.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 1/6) (*.f64 (pow.f64 (cos.f64 y) 1/6) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) 3) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cos.f64 y) 1/6) 3) (pow.f64 (pow.f64 (cos.f64 y) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 1) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2)) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (cos.f64 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 z 3) (pow.f64 (cos.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cos.f64 y) z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) z) (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sin.f64 y)) (*.f64 (cos.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (sin.f64 y)) 1) (*.f64 (cos.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 2) (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (sin.f64 y)) 3) (pow.f64 (*.f64 (cos.f64 y) z) 3)) (+.f64 (*.f64 (*.f64 x (sin.f64 y)) (*.f64 x (sin.f64 y))) (-.f64 (pow.f64 (*.f64 (cos.f64 y) z) 2) (*.f64 (*.f64 x (sin.f64 y)) (*.f64 (cos.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (sin.f64 y)) (*.f64 x (sin.f64 y))) (pow.f64 (*.f64 (cos.f64 y) z) 2)) (-.f64 (*.f64 x (sin.f64 y)) (*.f64 (cos.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 1/6) (pow.f64 (cos.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 1/3) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cos.f64 y)) 1/3) (pow.f64 (sqrt.f64 (cos.f64 y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (cos.f64 y))))))))"]],"rules":[["egg-rr",19],["egg-rr",21],["egg-rr",13],["egg-rr",20]],"stop":[["node limit",1]],"time":47.315185546875,"type":"rewrite"},{"count":[[157,106]],"egraph":[[16,7827,725,0.11648529199999999],[15,7359,725,0.106343417],[14,6919,725,0.095360292],[13,6088,725,0.083730292],[12,5462,725,0.072088667],[11,4923,725,0.062237457999999996],[10,4470,725,0.053270332999999996],[9,4095,725,0.044838749],[8,3834,725,0.037149082],[7,3638,725,0.029964290999999997],[6,3459,725,0.023701915999999996],[5,3334,725,0.017954540999999997],[4,2166,725,0.012079541],[3,1329,725,0.006859666],[2,407,727,0.003047041],[1,156,738,0.001067958],[0,61,776,0.000322333]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","z","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","z","(+.f64 (*.f64 y x) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) (+.f64 z (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2))))","(+.f64 (*.f64 -23/6480 (pow.f64 y 6)) (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))))","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 y y)))","(fma.f64 -1/2 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (*.f64 1/24 (pow.f64 y 4)))","(fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))) (fma.f64 -1/720 (pow.f64 y 6) 1))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","z","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) z)","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) z)","(*.f64 (fma.f64 -1/2 (*.f64 y y) 1) z)","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) z)","(fma.f64 (*.f64 y y) (*.f64 -1/2 z) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z))))","(+.f64 (fma.f64 -1/2 (*.f64 (*.f64 y y) z) z) (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 1/24 (*.f64 (pow.f64 y 4) z) z))","(*.f64 z (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)))","(*.f64 (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (fma.f64 -1/720 (*.f64 (pow.f64 y 6) z) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 -1/720 (*.f64 (pow.f64 y 6) z) (fma.f64 1/24 (*.f64 (pow.f64 y 4) z) z)))","(+.f64 z (*.f64 z (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))))","(*.f64 z (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1))))","(*.f64 (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1))) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","z","(+.f64 (*.f64 y x) z)","(fma.f64 y x z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) z))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (fma.f64 y x z))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 y x z))","(fma.f64 y x (fma.f64 (*.f64 y y) (*.f64 -1/2 z) z))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) (+.f64 z (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (+.f64 (fma.f64 y x z) (*.f64 -1/6 (*.f64 x (pow.f64 y 3)))))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 y x (fma.f64 -1/6 (*.f64 x (pow.f64 y 3)) z)))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 (pow.f64 y 3) (*.f64 x -1/6) (fma.f64 y x z)))","(fma.f64 -1/2 (*.f64 y (*.f64 y z)) (fma.f64 x (*.f64 -1/6 (pow.f64 y 3)) (fma.f64 y x z)))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (*.f64 (*.f64 y y) -1/6))","(fma.f64 (*.f64 y y) -1/6 1)","(fma.f64 y (*.f64 y -1/6) 1)","(+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2))))","(fma.f64 -1/72 (pow.f64 y 4) (+.f64 1 (*.f64 (*.f64 y y) -1/6)))","(fma.f64 (pow.f64 y 4) -1/72 (fma.f64 (*.f64 y y) -1/6 1))","(fma.f64 y (*.f64 y -1/6) (fma.f64 (pow.f64 y 4) -1/72 1))","(+.f64 (*.f64 -23/6480 (pow.f64 y 6)) (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))))","(fma.f64 -23/6480 (pow.f64 y 6) (fma.f64 -1/72 (pow.f64 y 4) (+.f64 1 (*.f64 (*.f64 y y) -1/6))))","(fma.f64 (pow.f64 y 6) -23/6480 (fma.f64 (pow.f64 y 4) -1/72 (fma.f64 (*.f64 y y) -1/6 1)))","(fma.f64 (pow.f64 y 6) -23/6480 (fma.f64 y (*.f64 y -1/6) (fma.f64 (pow.f64 y 4) -1/72 1)))","(fma.f64 (pow.f64 y 4) -1/72 (fma.f64 (pow.f64 y 6) -23/6480 (fma.f64 y (*.f64 y -1/6) 1)))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))"]],"stop":[["node limit",1]],"time":152.658935546875,"type":"simplify"},{"compiler":[[1503,645]],"time":16.447021484375,"type":"eval"},{"alts":[["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","done",0.24550634768442015],["(fma.f64 x (expm1.f64 (pow.f64 (cbrt.f64 (log1p.f64 (sin.f64 y))) 3)) (*.f64 z (cos.f64 y)))","fresh",0.3738251953688404],["(fma.f64 x (/.f64 (-.f64 (*.f64 (+.f64 (sin.f64 y) 1) (+.f64 (sin.f64 y) 1)) 1) (+.f64 (+.f64 (sin.f64 y) 1) 1)) (*.f64 z (cos.f64 y)))","fresh",9.287939159855565],["(fma.f64 x (expm1.f64 (*.f64 y (fma.f64 y -1/2 1))) (*.f64 z (cos.f64 y)))","fresh",14.712785967327656],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))","fresh",0.27689765085845724],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","done",0.15462875976844204],["(fma.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3) (*.f64 z (cos.f64 y)))","fresh",0.3447838379159781],["(fma.f64 x (expm1.f64 (pow.f64 (sqrt.f64 (log1p.f64 (sin.f64 y))) 2)) (*.f64 z (cos.f64 y)))","fresh",33.146522558610656],["(fma.f64 x (sin.f64 y) (*.f64 z (log.f64 (exp.f64 (cos.f64 y)))))","fresh",0.26256229383381785],["(*.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 2))","fresh",0.7919466798114493],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","next",0.24941259768442015],["(fma.f64 x (log.f64 (exp.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","fresh",9.227124132277458]],"compiler":[[14,10],[16,12],[27,19],[16,11],[26,15],[13,9],[14,10],[16,12],[13,9],[24,11],[18,11],[13,9],[16,12],[27,19],[16,11],[26,15],[14,10],[16,12],[13,9],[24,11],[18,11],[13,9]],"count":[[117,12]],"kept":[{"done":[1,1],"fresh":[9,6],"new":[106,4],"picked":[1,1]}],"min-error":[0.02734375],"time":31.801025390625,"type":"prune"},{"compiler":[[54,21]],"locations":[["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))",0.08203125,true],["(*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y))))",0.109375,true],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))",0.12890625,true],["(pow.f64 (cbrt.f64 (cos.f64 y)) 2)",0.28353500976844204,true]],"time":11.47998046875,"type":"localize"},{"count":[[4,84]],"series":[["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","z","-inf",0.1708984375],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","z","inf",0.154052734375],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","z","0",0.153076171875],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","y","-inf",0.175048828125],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","y","inf",0.1611328125],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","y","0",0.1748046875],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","x","-inf",0.155029296875],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","x","inf",0.156982421875],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","x","0",0.176025390625],["(*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y))))","y","-inf",0.14697265625],["(*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y))))","y","inf",0.1640625],["(*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y))))","y","0",0.1640625],["(*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y))))","z","-inf",0.14892578125],["(*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y))))","z","inf",0.1689453125],["(*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y))))","z","0",0.14892578125],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))","y","-inf",0.31201171875],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))","y","inf",0.2470703125],["(*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))","y","0",0.201904296875],["(pow.f64 (cbrt.f64 (cos.f64 y)) 2)","y","-inf",0.260986328125],["(pow.f64 (cbrt.f64 (cos.f64 y)) 2)","y","inf",0.311767578125],["(pow.f64 (cbrt.f64 (cos.f64 y)) 2)","y","0",0.43505859375]],"time":4.446044921875,"type":"series"},{"count":[[4,153]],"egraph":[[2,2562,29,0.024933792],[1,245,29,0.003727792],[0,12,29,0.000311417]],"inputs":[["(pow.f64 (cbrt.f64 (cos.f64 y)) 2)","(*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))","(*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y))))","(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (pow.f64 (cos.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 1/6) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 5) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (cos.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cos.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (cos.f64 y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 (cos.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 y)) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 (cos.f64 y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 3) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 y)) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1) (log.f64 (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 y)) 1/3) (log.f64 (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (cos.f64 y))) (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1) (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 y)) 1/3) (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (cos.f64 y))) (*.f64 (log.f64 (cos.f64 y)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1) (*.f64 (log.f64 (cos.f64 y)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 y)) 1/3) (*.f64 (log.f64 (cos.f64 y)) 1/3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (exp.f64 (log1p.f64 y))) (cos.f64 1)) (*.f64 (sin.f64 (exp.f64 (log1p.f64 y))) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 3) (log.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cos.f64 y))) 2)) (cbrt.f64 (log.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cos.f64 y)))) (sqrt.f64 (log.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cos.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (cos.f64 y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 y)) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cos.f64 y)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1) (*.f64 2/3 (log.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 y)) 1/3) (*.f64 2/3 (log.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cbrt.f64 (cos.f64 y))) (*.f64 (*.f64 2/3 (log.f64 (cos.f64 y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1) (*.f64 (*.f64 2/3 (log.f64 (cos.f64 y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 y)) 1/3) (*.f64 (*.f64 2/3 (log.f64 (cos.f64 y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (cos.f64 y))) 1) (log.f64 (cbrt.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (cos.f64 y))) (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (cos.f64 y))) 1) (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (cos.f64 y))) (*.f64 (log.f64 (cos.f64 y)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 2/3 (log.f64 (cos.f64 y))) 1) (*.f64 (log.f64 (cos.f64 y)) 1/3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cos.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (cos.f64 y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (cos.f64 y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (cos.f64 y) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 y) z) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (cos.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (cos.f64 y) z))) 2)) (cbrt.f64 (log.f64 (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (cos.f64 y) z)))) (sqrt.f64 (log.f64 (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cos.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cos.f64 y) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (cos.f64 y) z))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (cos.f64 y) z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (cos.f64 y) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (cos.f64 y) z)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1) (log.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 y)) 1/3) (log.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 3) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 y)) 1) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cos.f64 y)) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 3) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 y)) 1) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (log.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 z) (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 z) (*.f64 (log.f64 (cos.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (*.f64 (log.f64 (cos.f64 y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) z)) (*.f64 (log.f64 (cbrt.f64 (cos.f64 y))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) z)) (*.f64 (log.f64 (cos.f64 y)) 1/3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) z) (*.f64 x (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (sin.f64 y)) (*.f64 (cos.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (sin.f64 y)) 1) (*.f64 (cos.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 2) (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (sin.f64 y)) 3) (pow.f64 (*.f64 (cos.f64 y) z) 3)) (+.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2) (-.f64 (pow.f64 (*.f64 (cos.f64 y) z) 2) (*.f64 (*.f64 x (sin.f64 y)) (*.f64 (cos.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (sin.f64 y)) 2) (pow.f64 (*.f64 (cos.f64 y) z) 2)) (-.f64 (*.f64 x (sin.f64 y)) (*.f64 (cos.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))) 2)) (cbrt.f64 (log.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))) (sqrt.f64 (log.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (cos.f64 y) z))) (pow.f64 (exp.f64 x) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) (sin.f64 y)) (+.f64 1 (expm1.f64 (*.f64 (cos.f64 y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 1) 1))))))"]],"rules":[["egg-rr",36],["egg-rr",38],["egg-rr",43],["egg-rr",36]],"stop":[["node limit",1]],"time":53.011962890625,"type":"rewrite"},{"count":[[237,185]],"egraph":[[15,7668,749,0.10942550000000001],[14,7276,749,0.09972291700000001],[13,6892,749,0.089753334],[12,6170,749,0.078759417],[11,5557,749,0.067632334],[10,5017,749,0.057643167],[9,4573,749,0.048270542],[8,4263,749,0.0398455],[7,4034,749,0.03207375],[6,3832,749,0.02522175],[5,3689,749,0.019012917],[4,2311,749,0.012791334],[3,1394,749,0.00717775],[2,419,751,0.0031631249999999997],[1,163,766,0.0010960409999999999],[0,65,776,0.000324375]],"inputs":[["1","(+.f64 1 (*.f64 -1/3 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6))))","(+.f64 1 (+.f64 (*.f64 -1/1701 (pow.f64 y 8)) (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6)))))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","z","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","z","(+.f64 (*.f64 y x) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) z))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) (+.f64 z (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/3 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/3 (*.f64 y y)))","(fma.f64 -1/3 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6))))","(+.f64 1 (fma.f64 -1/3 (*.f64 y y) (*.f64 -1/405 (pow.f64 y 6))))","(+.f64 (fma.f64 -1/3 (*.f64 y y) 1) (*.f64 -1/405 (pow.f64 y 6)))","(fma.f64 -1/3 (*.f64 y y) (fma.f64 -1/405 (pow.f64 y 6) 1))","(+.f64 1 (+.f64 (*.f64 -1/1701 (pow.f64 y 8)) (+.f64 (*.f64 -1/3 (pow.f64 y 2)) (*.f64 -1/405 (pow.f64 y 6)))))","(+.f64 1 (fma.f64 -1/1701 (pow.f64 y 8) (fma.f64 -1/3 (*.f64 y y) (*.f64 -1/405 (pow.f64 y 6)))))","(fma.f64 -1/1701 (pow.f64 y 8) (fma.f64 -1/3 (*.f64 y y) (fma.f64 -1/405 (pow.f64 y 6) 1)))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","(pow.f64 (pow.f64 (cos.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (cos.f64 y) 2))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 (*.f64 y y) -1/2))","(fma.f64 (*.f64 y y) -1/2 1)","(fma.f64 y (*.f64 y -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 (*.f64 y y) -1/2 1) (*.f64 1/24 (pow.f64 y 4)))","(fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 (*.f64 y y) -1/2 (*.f64 1/24 (pow.f64 y 4))) (fma.f64 (pow.f64 y 6) -1/720 1))","(fma.f64 (pow.f64 y 6) -1/720 (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1)))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","z","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) z)","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) z)","(*.f64 (fma.f64 (*.f64 y y) -1/2 1) z)","(fma.f64 (*.f64 y y) (*.f64 -1/2 z) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z))))","(+.f64 (fma.f64 -1/2 (*.f64 (*.f64 y y) z) z) (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (fma.f64 1/24 (*.f64 (pow.f64 y 4) z) z))","(*.f64 z (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1)))","(*.f64 (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1)) z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) z)) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (fma.f64 -1/720 (*.f64 (pow.f64 y 6) z) (+.f64 z (*.f64 1/24 (*.f64 (pow.f64 y 4) z)))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (fma.f64 -1/720 (*.f64 (pow.f64 y 6) z) (fma.f64 1/24 (*.f64 (pow.f64 y 4) z) z)))","(+.f64 z (*.f64 z (fma.f64 (pow.f64 y 6) -1/720 (fma.f64 y (*.f64 y -1/2) (*.f64 1/24 (pow.f64 y 4))))))","(*.f64 z (fma.f64 (pow.f64 y 6) -1/720 (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1))))","(*.f64 (fma.f64 (pow.f64 y 6) -1/720 (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1))) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 z (cos.f64 y))","(*.f64 (cos.f64 y) z)","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","z","(+.f64 (*.f64 y x) z)","(fma.f64 y x z)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) z))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (fma.f64 y x z))","(fma.f64 y x (*.f64 (fma.f64 (*.f64 y y) -1/2 1) z))","(fma.f64 y x (fma.f64 (*.f64 y y) (*.f64 -1/2 z) z))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) z)) (+.f64 (*.f64 y x) (+.f64 z (*.f64 -1/6 (*.f64 (pow.f64 y 3) x)))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (+.f64 (fma.f64 y x z) (*.f64 -1/6 (*.f64 x (pow.f64 y 3)))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) z) (fma.f64 y x (fma.f64 -1/6 (*.f64 x (pow.f64 y 3)) z)))","(fma.f64 (*.f64 y y) (*.f64 -1/2 z) (fma.f64 (pow.f64 y 3) (*.f64 x -1/6) (fma.f64 y x z)))","(fma.f64 y x (fma.f64 (*.f64 y y) (*.f64 -1/2 z) (fma.f64 x (*.f64 -1/6 (pow.f64 y 3)) z)))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (sin.f64 y) x)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(*.f64 (cos.f64 y) z)","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))","(+.f64 (*.f64 (cos.f64 y) z) (*.f64 (sin.f64 y) x))","(fma.f64 (cos.f64 y) z (*.f64 (sin.f64 y) x))"]],"stop":[["node limit",1]],"time":145.22802734375,"type":"simplify"},{"compiler":[[2872,1148]],"time":26.7548828125,"type":"eval"},{"alts":[["(fma.f64 x (expm1.f64 (pow.f64 (sqrt.f64 (log1p.f64 (sin.f64 y))) 2)) (*.f64 z (cos.f64 y)))","fresh",33.146522558610656],["(*.f64 (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 2) (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))","fresh",0.7919466798114493],["(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","done",0.24550634768442015],["(fma.f64 x (expm1.f64 (pow.f64 (cbrt.f64 (log1p.f64 (sin.f64 y))) 3)) (*.f64 z (cos.f64 y)))","fresh",0.3738251953688404],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))","fresh",0.27689765085845724],["(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","done",0.15462875976844204],["(fma.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3) (*.f64 z (cos.f64 y)))","fresh",0.3447838379159781],["(fma.f64 x (/.f64 (-.f64 (*.f64 (+.f64 (sin.f64 y) 1) (+.f64 (sin.f64 y) 1)) 1) (+.f64 (+.f64 (sin.f64 y) 1) 1)) (*.f64 z (cos.f64 y)))","fresh",9.287939159855565],["(fma.f64 x (sin.f64 y) (*.f64 z (log.f64 (+.f64 1 (expm1.f64 (cos.f64 y))))))","fresh",0.2683834852231658],["(fma.f64 x (sin.f64 y) (*.f64 z (log.f64 (exp.f64 (cos.f64 y)))))","fresh",0.26256229383381785],["(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (+.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (cbrt.f64 (cos.f64 y)))))","fresh",0.3371826485431295],["(fma.f64 x (log.f64 (exp.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","fresh",9.227124132277458]],"compiler":[[16,12],[24,11],[14,10],[16,12],[26,15],[13,9],[14,10],[27,19],[15,11],[13,9],[30,20],[13,9]],"count":[[197,12]],"kept":[{"done":[2,2],"fresh":[9,6],"new":[185,4],"picked":[1,0]}],"min-error":[0.0234375],"time":53.7451171875,"type":"prune"},{"accuracy":[0.1328125],"baseline":[0.1328125],"branch":[["x",0.1328125,1],["y",0.1328125,1],["z",0.1328125,1],["(+.f64 (*.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))",0.1328125,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[374,125]],"count":[[26,1]],"inputs":[["(*.f64 (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 2) (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))))","(fma.f64 x (sin.f64 y) (*.f64 z (log.f64 (+.f64 1 (expm1.f64 (cos.f64 y))))))","(fma.f64 x (sin.f64 y) (*.f64 z (log.f64 (exp.f64 (cos.f64 y)))))","(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (+.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (cbrt.f64 (cos.f64 y)))))","(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))","(fma.f64 x (sin.f64 y) (*.f64 z (log.f64 (exp.f64 (cos.f64 y)))))","(*.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))) 2))","(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","(fma.f64 x (expm1.f64 (pow.f64 (cbrt.f64 (log1p.f64 (sin.f64 y))) 3)) (*.f64 z (cos.f64 y)))","(*.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2))","(fma.f64 x (/.f64 (-.f64 (*.f64 (+.f64 (sin.f64 y) 1) (+.f64 (sin.f64 y) 1)) 1) (+.f64 (+.f64 (sin.f64 y) 1) 1)) (*.f64 z (cos.f64 y)))","(fma.f64 x (expm1.f64 (*.f64 y (fma.f64 y -1/2 1))) (*.f64 z (cos.f64 y)))","(fma.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3) (*.f64 z (cos.f64 y)))","(fma.f64 x (expm1.f64 (pow.f64 (sqrt.f64 (log1p.f64 (sin.f64 y))) 2)) (*.f64 z (cos.f64 y)))","(fma.f64 x (sin.f64 y) (*.f64 z (pow.f64 (cbrt.f64 (cos.f64 y)) 3)))","(fma.f64 x (pow.f64 (cbrt.f64 (sin.f64 y)) 3) (*.f64 z (cos.f64 y)))","(fma.f64 x (sin.f64 y) (*.f64 z (log.f64 (exp.f64 (cos.f64 y)))))","(fma.f64 x (log.f64 (exp.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","(pow.f64 (sqrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2)","(fma.f64 x (sin.f64 y) (*.f64 z (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))","(*.f64 (pow.f64 (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))) 2) (cbrt.f64 (fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))))","(fma.f64 x (sin.f64 y) (pow.f64 (cbrt.f64 (*.f64 z (cos.f64 y))) 3))","(fma.f64 x (exp.f64 (log.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","(fma.f64 x (expm1.f64 (log1p.f64 (sin.f64 y))) (*.f64 z (cos.f64 y)))","(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))","(+.f64 (*.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))"]],"link":["."],"name":["Diagrams.ThreeD.Transform:aboutX from diagrams-lib-1.3.0.3, B"],"oracle":[53.9271739665243],"outputs":[["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))"]],"time":40.630859375,"times":[["x",8.732177734375],["y",8.543212890625],["z",8.77490234375],["(+.f64 (*.f64 x (sin.f64 y)) (*.f64 z (cos.f64 y)))",9.056884765625]],"type":"regimes"},{"compiler":[[11,7]],"egraph":[[1,9,12,3.4167e-5],[0,8,12,2.1542e-5]],"inputs":[["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (sin.f64 y) (*.f64 z (cos.f64 y)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.524169921875,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[11,7]],"remove-preprocessing":[[]],"time":8.68798828125,"type":"end"}]
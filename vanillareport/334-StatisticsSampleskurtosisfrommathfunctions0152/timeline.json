[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.7024385221302509,0.11804869608022273,0.17951278178952634],[11,0.6868287771940231,0.1463413587771356,0.16682986402884126],[10,0.6556092873215675,0.22243886534124613,0.12195184733718634],[9,0.6243897974491119,0.2731705363839865,0.10243966616690159],[8,0.5619508177042007,0.39024362340569496,0.047805558890104294],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":26.6640625,"type":"analyze"},{"outcomes":[["body",256,"invalid",26.941650390625,803],["body",256,"valid",282.476318359375,8256]],"time":317.47607421875,"type":"sample"},{"compiler":[[9,6]],"egraph":[[0,2,2,1.375e-6],[2,20,20,0.000146208],[1,18,20,0.00010208299999999999],[0,10,20,5.675e-5]],"inputs":[["0","1"],["(-.f64 (/.f64 x (*.f64 y y)) 3)","(-.f64 (/.f64 y (*.f64 x x)) 3)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (/.f64 x (*.f64 y y)) 3)","(+.f64 (/.f64 x (*.f64 y y)) -3)","(-.f64 (/.f64 y (*.f64 x x)) 3)","(+.f64 (/.f64 y (*.f64 x x)) -3)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.905029296875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[2,13,10,0.000106124],[1,12,10,7.5124e-5],[0,7,10,4.3041e-5]],"inputs":[["(-.f64 (/.f64 x (*.f64 y y)) 3)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 x (*.f64 y y)) 3)","(+.f64 (/.f64 x (*.f64 y y)) -3)"]],"stop":[["saturated",1]],"time":10.200927734375,"type":"simplify"},{"compiler":[[16,8]],"time":0.278076171875,"type":"eval"},{"alts":[["(+.f64 (/.f64 x (*.f64 y y)) -3)","next",3.620993806991428]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[3.620993806991428],"time":0.7978515625,"type":"prune"},{"compiler":[[20,7]],"locations":[["(/.f64 x (*.f64 y y))",8.629744002945102,true]],"time":3.865966796875,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 x (*.f64 y y))","y","-inf",0.198974609375],["(/.f64 x (*.f64 y y))","y","inf",0.296142578125],["(/.f64 x (*.f64 y y))","y","0",0.68994140625],["(/.f64 x (*.f64 y y))","x","-inf",0.391845703125],["(/.f64 x (*.f64 y y))","x","inf",0.611083984375],["(/.f64 x (*.f64 y y))","x","0",0.634033203125]],"time":2.900146484375,"type":"series"},{"count":[[1,31]],"egraph":[[2,1449,7,0.015872208999999998],[1,106,7,0.0019910839999999997],[0,5,7,0.000128625]],"inputs":[["(/.f64 x (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 x (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 2) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) y) (/.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (*.f64 y (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) y) (/.f64 (cbrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 y 4))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (pow.f64 y 4))) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (pow.f64 y 4))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 x) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (*.f64 y (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (*.f64 x x) (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (*.f64 y y))))))))"]],"rules":[["egg-rr",31]],"stop":[["node limit",1]],"time":33.265869140625,"type":"rewrite"},{"count":[[55,33]],"egraph":[[21,6929,168,0.105196126],[20,6895,168,0.089378959],[19,6823,168,0.07910099999999999],[18,6545,168,0.07025570799999999],[17,6257,168,0.06220870799999999],[16,5863,168,0.05470687499999999],[15,5028,168,0.04729679099999999],[14,4340,168,0.039244248999999995],[13,3772,168,0.032366082],[12,3291,168,0.026397748999999998],[11,2898,168,0.020810415999999998],[10,2601,168,0.016228666],[9,2393,168,0.012586416],[8,2209,168,0.009575458],[7,2043,168,0.007027292],[6,834,168,0.004338375],[5,224,168,0.001819542],[4,75,168,0.0007206669999999999],[3,35,168,0.00035754199999999997],[2,20,168,0.0002095],[1,11,168,0.000121708],[0,6,168,5.1125e-5]],"inputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))"]],"stop":[["node limit",1]],"time":123.35107421875,"type":"simplify"},{"compiler":[[360,192]],"time":4.544921875,"type":"eval"},{"alts":[["(+.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) y) (/.f64 (cbrt.f64 x) y)) -3)","fresh",0.2725563965266303],["(+.f64 (/.f64 x (*.f64 y y)) -3)","done",3.620993806991428],["(+.f64 (*.f64 (/.f64 1 y) (/.f64 x y)) -3)","next",0.146816259768442],["(+.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (*.f64 y y))) -3)","fresh",3.7493182538094474],["(+.f64 (pow.f64 (/.f64 (sqrt.f64 x) y) 2) -3)","fresh",33.63546757814754],["(+.f64 (*.f64 x (pow.f64 y -2)) -3)","fresh",3.83203125]],"compiler":[[15,10],[9,6],[11,8],[17,12],[10,8],[9,7],[15,10],[11,8],[17,12],[10,8],[9,7]],"count":[[34,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[33,5],"picked":[1,1]}],"min-error":[0.015625],"time":6.908203125,"type":"prune"},{"compiler":[[28,15]],"locations":[["(*.f64 (/.f64 1 y) (/.f64 x y))",0.25619125976844204,true]],"time":5.9208984375,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (/.f64 1 y) (/.f64 x y))","x","-inf",0.1669921875],["(*.f64 (/.f64 1 y) (/.f64 x y))","x","inf",0.14892578125],["(*.f64 (/.f64 1 y) (/.f64 x y))","x","0",0.141845703125],["(*.f64 (/.f64 1 y) (/.f64 x y))","y","-inf",0.171142578125],["(*.f64 (/.f64 1 y) (/.f64 x y))","y","inf",0.156005859375],["(*.f64 (/.f64 1 y) (/.f64 x y))","y","0",0.18505859375]],"time":1.0400390625,"type":"series"},{"count":[[1,43]],"egraph":[[2,1909,7,0.018326667],[1,145,7,0.002625292],[0,7,7,0.000189875]],"inputs":[["(*.f64 (/.f64 1 y) (/.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (pow.f64 y -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 y (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 y y) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 y) (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 y (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (/.f64 y (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 (*.f64 y y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 x y)) (/.f64 y (sqrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 x) (/.f64 (*.f64 y y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 y) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (/.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) 1) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 x)) (*.f64 (neg.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -1) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) -1) (*.f64 (neg.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 x y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 1 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 y -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (pow.f64 y -2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (pow.f64 y -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 x) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (pow.f64 y -2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 x (pow.f64 y -2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (pow.f64 y -2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (/.f64 (pow.f64 y -2) y) (pow.f64 (/.f64 x y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 3) (/.f64 (pow.f64 y -2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (pow.f64 y -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (pow.f64 y -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (pow.f64 y -2))))))))"]],"rules":[["egg-rr",43]],"stop":[["node limit",1]],"time":36.044921875,"type":"rewrite"},{"count":[[67,44]],"egraph":[[21,6929,168,0.105022833],[20,6895,168,0.089482625],[19,6823,168,0.0792335],[18,6545,168,0.0703905],[17,6257,168,0.062375],[16,5863,168,0.054858333],[15,5028,168,0.04733925],[14,4340,168,0.039295542],[13,3772,168,0.032406958],[12,3291,168,0.026476875],[11,2898,168,0.020891083],[10,2601,168,0.0162785],[9,2393,168,0.012606875],[8,2209,168,0.009575083],[7,2043,168,0.007020666],[6,834,168,0.004334708],[5,224,168,0.001812083],[4,75,168,0.000718125],[3,35,168,0.000360541],[2,20,168,0.00021062499999999998],[1,11,168,0.000121916],[0,6,168,5.1083e-5]],"inputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))"]],"stop":[["node limit",1]],"time":123.6279296875,"type":"simplify"},{"compiler":[[450,267]],"time":5.99609375,"type":"eval"},{"alts":[["(+.f64 (/.f64 (/.f64 x y) y) -3)","next",0.09375],["(+.f64 (/.f64 (/.f64 (/.f64 x y) (sqrt.f64 y)) (sqrt.f64 y)) -3)","fresh",31.569355029305328],["(+.f64 (/.f64 (/.f64 1 y) (/.f64 y x)) -3)","fresh",0.11166000976844201],["(+.f64 (/.f64 1 (/.f64 y (/.f64 x y))) -3)","fresh",0.13671875],["(+.f64 (*.f64 x (pow.f64 y -2)) -3)","fresh",3.83203125]],"compiler":[[9,6],[13,8],[11,8],[11,8],[9,7],[9,6],[13,8],[11,8],[11,8],[9,7]],"count":[[50,5]],"kept":[{"done":[1,0],"fresh":[4,1],"new":[44,4],"picked":[1,0]}],"min-error":[0],"time":9.5869140625,"type":"prune"},{"compiler":[[20,7]],"locations":[["(/.f64 (/.f64 x y) y)",0.17578125,true]],"time":3.80517578125,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (/.f64 x y) y)","y","-inf",0.1728515625],["(/.f64 (/.f64 x y) y)","y","inf",0.14501953125],["(/.f64 (/.f64 x y) y)","y","0",0.13916015625],["(/.f64 (/.f64 x y) y)","x","-inf",0.176025390625],["(/.f64 (/.f64 x y) y)","x","inf",0.152099609375],["(/.f64 (/.f64 x y) y)","x","0",0.188232421875]],"time":1.057861328125,"type":"series"},{"count":[[1,36]],"egraph":[[2,1585,7,0.016789501000000002],[1,109,7,0.002038459],[0,5,7,0.000121917]],"inputs":[["(/.f64 (/.f64 x y) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 x (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (/.f64 1 y) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 2) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (cbrt.f64 (/.f64 x y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) y) (/.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x y)) (*.f64 (sqrt.f64 (/.f64 x y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) y) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) y) (/.f64 (cbrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 (/.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) 1) (/.f64 (cbrt.f64 (/.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 x y)) 1) (/.f64 (sqrt.f64 (/.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (/.f64 (/.f64 1 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 y) 2)) (/.f64 (/.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 x y)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (/.f64 x y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 y)) (/.f64 (/.f64 1 y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (/.f64 x y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (/.f64 x y)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 x) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (/.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 x y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (*.f64 y y))))))))"]],"rules":[["egg-rr",36]],"stop":[["node limit",1]],"time":34.64697265625,"type":"rewrite"},{"count":[[60,38]],"egraph":[[21,6929,168,0.104394957],[20,6895,168,0.08906929],[19,6823,168,0.078856915],[18,6545,168,0.070026707],[17,6257,168,0.06204729],[16,5863,168,0.054600749],[15,5028,168,0.047157749],[14,4340,168,0.039114581999999995],[13,3772,168,0.032276874],[12,3291,168,0.026399416],[11,2898,168,0.020893624],[10,2601,168,0.016295249],[9,2393,168,0.012603624],[8,2209,168,0.009610958000000001],[7,2043,168,0.007051875000000001],[6,834,168,0.004360125],[5,224,168,0.001819334],[4,75,168,0.0007208749999999999],[3,35,168,0.000359084],[2,20,168,0.00020879200000000002],[1,11,168,0.00012091700000000001],[0,6,168,5.1292e-5]],"inputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))"]],"stop":[["node limit",1]],"time":122.2890625,"type":"simplify"},{"compiler":[[453,227]],"time":4.97802734375,"type":"eval"},{"alts":[["(+.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) 1) (/.f64 (cbrt.f64 (/.f64 x y)) y)) -3)","fresh",0.3113251953688404],["(+.f64 (*.f64 x (pow.f64 y -2)) -3)","fresh",3.83203125],["(+.f64 (pow.f64 (*.f64 y (/.f64 y x)) -1) -3)","next",0.11328125],["(+.f64 (/.f64 (/.f64 x y) y) -3)","done",0.09375],["(+.f64 (/.f64 1 (/.f64 y (/.f64 x y))) -3)","fresh",0.13671875]],"compiler":[[19,12],[9,7],[11,8],[9,6],[11,8],[19,12],[9,7],[11,8],[11,8]],"count":[[43,5]],"kept":[{"done":[0,0],"fresh":[4,2],"new":[38,2],"picked":[1,1]}],"min-error":[0],"time":8.487060546875,"type":"prune"},{"compiler":[[30,12]],"locations":[["(*.f64 y (/.f64 y x))",0.1796875,true],["(pow.f64 (*.f64 y (/.f64 y x)) -1)",0.3128342283593286,true]],"time":5.69482421875,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 y (/.f64 y x))","x","-inf",0.158935546875],["(*.f64 y (/.f64 y x))","x","inf",0.137939453125],["(*.f64 y (/.f64 y x))","x","0",0.142822265625],["(*.f64 y (/.f64 y x))","y","-inf",0.175048828125],["(*.f64 y (/.f64 y x))","y","inf",0.157958984375],["(*.f64 y (/.f64 y x))","y","0",0.152099609375],["(pow.f64 (*.f64 y (/.f64 y x)) -1)","x","-inf",0.989013671875],["(pow.f64 (*.f64 y (/.f64 y x)) -1)","x","inf",0.294921875],["(pow.f64 (*.f64 y (/.f64 y x)) -1)","x","0",0.43896484375],["(pow.f64 (*.f64 y (/.f64 y x)) -1)","y","-inf",0.18212890625],["(pow.f64 (*.f64 y (/.f64 y x)) -1)","y","inf",0.441162109375],["(pow.f64 (*.f64 y (/.f64 y x)) -1)","y","0",0.571044921875]],"time":3.97509765625,"type":"series"},{"count":[[2,46]],"egraph":[[2,1931,14,0.018633208],[1,150,14,0.00262425],[0,7,17,0.0001965]],"inputs":[["(pow.f64 (*.f64 y (/.f64 y x)) -1)","(*.f64 y (/.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (/.f64 x y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 x y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 x y) y)) (cbrt.f64 (pow.f64 (*.f64 y (/.f64 y x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y (/.f64 y x)) -2)) (cbrt.f64 (/.f64 (/.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (/.f64 y (sqrt.f64 x))) (/.f64 1 (/.f64 y (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 y x))) 2) -1) (pow.f64 (cbrt.f64 (*.f64 y (/.f64 y x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y (sqrt.f64 x)) -1) (pow.f64 (/.f64 y (sqrt.f64 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 y y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 y (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 y (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 y (/.f64 y x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 y) (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (/.f64 y (sqrt.f64 x))) (/.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 y x))) 2)) (cbrt.f64 (*.f64 y (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (/.f64 y x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (/.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 x y) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (/.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (/.f64 x y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (/.f64 x y) y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (/.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y y) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (neg.f64 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y y) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y y) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y y) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (/.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (/.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (/.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (/.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (/.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 (/.f64 y x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 y x) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (/.f64 y x))))))))"]],"rules":[["egg-rr",22],["egg-rr",24]],"stop":[["node limit",1]],"time":38.31201171875,"type":"rewrite"},{"count":[[94,50]],"egraph":[[16,7757,336,0.07554320899999999],[15,6920,336,0.06688354199999999],[14,6227,336,0.05630816699999999],[13,5576,336,0.046751958999999996],[12,5097,336,0.038865791999999996],[11,4674,336,0.031734501],[10,4334,336,0.025572334000000002],[9,4118,336,0.020367334],[8,3933,336,0.015847292],[7,3131,336,0.01170125],[6,1133,336,0.006814041999999999],[5,283,336,0.0024940839999999997],[4,91,336,0.000905959],[3,40,336,0.000452625],[2,22,336,0.000263709],[1,12,336,0.000155334],[0,7,336,6.4709e-5]],"inputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)","(/.f64 (pow.f64 y 2) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))","(/.f64 (pow.f64 y 2) x)","(/.f64 (*.f64 y y) x)","(/.f64 y (/.f64 x y))","(*.f64 y (/.f64 y x))"]],"stop":[["node limit",1]],"time":97.239990234375,"type":"simplify"},{"compiler":[[565,305]],"time":6.7890625,"type":"eval"},{"alts":[["(+.f64 (pow.f64 (*.f64 y (/.f64 y x)) -1) -3)","done",0.11328125],["(+.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 y x))) 2) -1) (pow.f64 (cbrt.f64 (*.f64 y (/.f64 y x))) -1)) -3)","fresh",0.29238770745261006],["(+.f64 (/.f64 (/.f64 x y) y) -3)","done",0.09375],["(+.f64 (*.f64 x (pow.f64 y -2)) -3)","fresh",3.83203125],["(+.f64 (pow.f64 (/.f64 y (/.f64 x y)) -1) -3)","fresh",0.13671875]],"compiler":[[11,8],[23,14],[9,6],[9,7],[11,8]],"count":[[55,5]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[50,2],"picked":[1,1]}],"min-error":[0],"time":9.572021484375,"type":"prune"},{"accuracy":[0.09375],"baseline":[0.09375],"branch":[["x",0.09375,1],["y",0.09375,1],["(-.f64 (/.f64 x (*.f64 y y)) 3)",0.09375,1],["(/.f64 x (*.f64 y y))",0.09375,1],["(/.f64 x (*.f64 y y))",0.09375,1],["(*.f64 y y)",0.09375,1],["(*.f64 y y)",0.09375,1]],"compiler":[[3,2],[3,2],[9,6],[7,4],[7,4],[5,3],[5,3],[160,88]],"count":[[15,1]],"inputs":[["(+.f64 (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 y (/.f64 y x))) 2) -1) (pow.f64 (cbrt.f64 (*.f64 y (/.f64 y x))) -1)) -3)","(+.f64 (pow.f64 (/.f64 y (/.f64 x y)) -1) -3)","(+.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) 1) (/.f64 (cbrt.f64 (/.f64 x y)) y)) -3)","(+.f64 (pow.f64 (*.f64 y (/.f64 y x)) -1) -3)","(+.f64 (/.f64 (/.f64 x y) y) -3)","(+.f64 (/.f64 (/.f64 (/.f64 x y) (sqrt.f64 y)) (sqrt.f64 y)) -3)","(+.f64 (/.f64 (/.f64 1 y) (/.f64 y x)) -3)","(+.f64 (/.f64 1 (/.f64 y (/.f64 x y))) -3)","(+.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) y) (/.f64 (cbrt.f64 x) y)) -3)","(+.f64 (*.f64 (/.f64 1 y) (/.f64 x y)) -3)","(+.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (*.f64 y y))) -3)","(+.f64 (pow.f64 (/.f64 (sqrt.f64 x) y) 2) -3)","(+.f64 (*.f64 x (pow.f64 y -2)) -3)","(+.f64 (/.f64 x (*.f64 y y)) -3)","(-.f64 (/.f64 x (*.f64 y y)) 3)"]],"link":["."],"name":["Statistics.Sample:$skurtosis from math-functions-0.1.5.2"],"oracle":[51.5706825683791],"outputs":[["(+.f64 (/.f64 (/.f64 x y) y) -3)"]],"time":36.994873046875,"times":[["x",5.98193359375],["y",6.10498046875],["(-.f64 (/.f64 x (*.f64 y y)) 3)",3.2998046875],["(/.f64 x (*.f64 y y))",4.074951171875],["(/.f64 x (*.f64 y y))",4.245849609375],["(*.f64 y y)",4.985107421875],["(*.f64 y y)",4.93896484375]],"type":"regimes"},{"compiler":[[9,6]],"egraph":[[1,8,10,2.3166e-5],[0,7,10,1.4208e-5]],"inputs":[["(+.f64 (/.f64 (/.f64 x y) y) -3)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (/.f64 (/.f64 x y) y) -3)"]],"stop":[["fuel",1],["saturated",1]],"time":8.320068359375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.830078125,"type":"end"}]
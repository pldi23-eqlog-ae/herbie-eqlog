[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[11,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[10,0.5616764276564936,0.43685944373282837,0.0014641286106780171],[9,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[8,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[7,0.2496339678473305,0.7489019035419915,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":107.864990234375,"type":"analyze"},{"outcomes":[["body",1024,"valid",338.19921875,1296],["body",512,"valid",104.368896484375,698],["body",2048,"valid",2.2958984375,4],["body",256,"valid",440.507080078125,6258]],"time":894.239013671875,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,3.083e-6],[10,3189,56,0.042291418],[9,3157,56,0.035112001],[8,2774,56,0.027778000999999997],[7,2101,56,0.019312667],[6,1229,56,0.011612833999999999],[5,700,56,0.006085125],[4,428,56,0.0029388749999999996],[3,237,56,0.001488583],[2,128,56,0.000724041],[1,57,56,0.000327291],[0,22,56,0.000112583]],"inputs":[["0","1","2"],["(-.f64 (+.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 y (cos.f64 x)) (*.f64 z (sin.f64 x)))","(-.f64 (+.f64 z (cos.f64 y)) (*.f64 x (sin.f64 y)))","(-.f64 (+.f64 x (cos.f64 z)) (*.f64 y (sin.f64 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (+.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 x (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(-.f64 (cos.f64 y) (-.f64 (*.f64 z (sin.f64 y)) x))","(+.f64 x (fma.f64 (sin.f64 y) (neg.f64 z) (cos.f64 y)))","(-.f64 (+.f64 y (cos.f64 x)) (*.f64 z (sin.f64 x)))","(+.f64 y (-.f64 (cos.f64 x) (*.f64 z (sin.f64 x))))","(+.f64 (cos.f64 x) (-.f64 y (*.f64 z (sin.f64 x))))","(fma.f64 (sin.f64 x) (neg.f64 z) (+.f64 y (cos.f64 x)))","(+.f64 y (fma.f64 z (sin.f64 (neg.f64 x)) (cos.f64 x)))","(-.f64 (+.f64 z (cos.f64 y)) (*.f64 x (sin.f64 y)))","(+.f64 z (-.f64 (cos.f64 y) (*.f64 x (sin.f64 y))))","(-.f64 (+.f64 (cos.f64 y) z) (*.f64 x (sin.f64 y)))","(-.f64 (cos.f64 y) (fma.f64 x (sin.f64 y) (neg.f64 z)))","(+.f64 (cos.f64 y) (-.f64 z (*.f64 x (sin.f64 y))))","(-.f64 (+.f64 x (cos.f64 z)) (*.f64 y (sin.f64 z)))","(+.f64 x (-.f64 (cos.f64 z) (*.f64 y (sin.f64 z))))","(+.f64 (cos.f64 z) (-.f64 x (*.f64 y (sin.f64 z))))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":69.198974609375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[11,962,14,0.013321209999999998],[10,952,14,0.011346167999999998],[9,848,14,0.009323834999999999],[8,683,14,0.006997417999999999],[7,532,14,0.004782000999999999],[6,322,14,0.0031580849999999997],[5,183,14,0.001639293],[4,118,14,0.0009093759999999999],[3,67,14,0.0005107919999999999],[2,38,14,0.000265334],[1,18,14,0.00013612599999999998],[0,9,14,5.4834e-5]],"inputs":[["(-.f64 (+.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 x (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))))","(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))"]],"stop":[["saturated",1]],"time":24.01904296875,"type":"simplify"},{"compiler":[[21,11]],"time":0.368896484375,"type":"eval"},{"alts":[["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))","next",0.0625]],"compiler":[[12,8],[12,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0625],"time":0.908203125,"type":"prune"},{"compiler":[[29,8]],"locations":[["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))",0.0078125,true],["(cos.f64 y)",0.015625,true],["(sin.f64 y)",0.015625,true],["(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))",0.05859375,true]],"time":7.140869140625,"type":"localize"},{"count":[[4,68]],"series":[["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))","y","-inf",0.22705078125],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))","y","inf",0.424072265625],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))","y","0",0.221923828125],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))","z","-inf",0.22998046875],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))","z","inf",0.177978515625],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))","z","0",0.2041015625],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))","x","-inf",0.18701171875],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))","x","inf",0.23095703125],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))","x","0",0.448974609375],["(cos.f64 y)","y","-inf",0.156982421875],["(cos.f64 y)","y","inf",0.138916015625],["(cos.f64 y)","y","0",0.2509765625],["(sin.f64 y)","y","-inf",0.135986328125],["(sin.f64 y)","y","inf",0.140869140625],["(sin.f64 y)","y","0",0.259033203125],["(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","y","-inf",0.365966796875],["(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","y","inf",0.333984375],["(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","y","0",0.451904296875],["(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","z","-inf",0.35595703125],["(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","z","inf",0.341064453125],["(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","z","0",0.7041015625]],"time":6.26904296875,"type":"series"},{"count":[[4,107]],"egraph":[[2,2572,27,0.024755084000000004],[1,191,27,0.004106125],[0,9,31,0.00025]],"inputs":[["(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(sin.f64 y)","(cos.f64 y)","(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (sin.f64 y)) 1) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 z (sin.f64 y)) 0) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (sin.f64 y) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2)) (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) (pow.f64 (cos.f64 y) 3)) (+.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (-.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (*.f64 z (sin.f64 y)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (pow.f64 (cos.f64 y) 2)) (fma.f64 z (sin.f64 y) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (sin.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 y) 2)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (neg.f64 (sqrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (cos.f64 y) 3)) (+.f64 0 (+.f64 (pow.f64 (cos.f64 y) 2) (*.f64 0 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (cos.f64 y) 2)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y))) (fma.f64 (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 1 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y))) (fma.f64 (neg.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)))) (cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2)) (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y))) (fma.f64 (neg.f64 (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)))) (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))) (pow.f64 (cbrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))) 2) (cbrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))) (sqrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 3) (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3)) (/.f64 1 (fma.f64 x x (*.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) (+.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2)) (/.f64 1 (+.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) (+.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) x))) (-.f64 (pow.f64 x 3) (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) x) (-.f64 (*.f64 x x) (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3)) (fma.f64 x x (*.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) (+.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2)) (+.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 3) (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3))) (neg.f64 (fma.f64 x x (*.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) (+.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2))) (neg.f64 (+.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 3)) (+.f64 (*.f64 x x) (-.f64 (*.f64 (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)))) (*.f64 x (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))) (-.f64 x (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))))"]],"rules":[["egg-rr",36],["egg-rr",30],["egg-rr",17],["egg-rr",24]],"stop":[["node limit",1]],"time":53.842041015625,"type":"rewrite"},{"count":[[175,147]],"egraph":[[4,4336,779,0.024413041000000003],[3,1513,779,0.011346832000000001],[2,515,784,0.0042770410000000005],[1,208,796,0.0016237500000000002],[0,75,808,0.000469542]],"inputs":[["(*.f64 -1 (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","-1","(-.f64 (*.f64 y z) 1)","(-.f64 (+.f64 (*.f64 y z) (*.f64 1/2 (pow.f64 y 2))) 1)","(-.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 1/2 (pow.f64 y 2)))) 1)","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(-.f64 (cos.f64 y) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","x","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","x","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 y z)) x))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (pow.f64 y 2)) x)))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x))))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (cos.f64 y))","(neg.f64 (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","-1","(-.f64 (*.f64 y z) 1)","(fma.f64 y z -1)","(-.f64 (+.f64 (*.f64 y z) (*.f64 1/2 (pow.f64 y 2))) 1)","(+.f64 (fma.f64 y z (*.f64 1/2 (*.f64 y y))) -1)","(fma.f64 y z (fma.f64 1/2 (*.f64 y y) -1))","(fma.f64 y z (fma.f64 y (*.f64 y 1/2) -1))","(fma.f64 y (+.f64 z (*.f64 y 1/2)) -1)","(-.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 1/2 (pow.f64 y 2)))) 1)","(+.f64 (fma.f64 y z (fma.f64 -1/6 (*.f64 z (pow.f64 y 3)) (*.f64 1/2 (*.f64 y y)))) -1)","(+.f64 (*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y)) (fma.f64 1/2 (*.f64 y y) -1))","(fma.f64 z (fma.f64 -1/6 (pow.f64 y 3) y) (fma.f64 y (*.f64 y 1/2) -1))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 (fma.f64 1/120 (pow.f64 y 5) y) (*.f64 -1/5040 (pow.f64 y 7))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 (*.f64 y y) -1/2))","(fma.f64 (*.f64 y y) -1/2 1)","(fma.f64 y (*.f64 y -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 1/24 (pow.f64 y 4) (*.f64 y (*.f64 y -1/2))))","(fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 1/24 (pow.f64 y 4) (*.f64 y (*.f64 y -1/2))) (fma.f64 -1/720 (pow.f64 y 6) 1))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1)))","(-.f64 (cos.f64 y) (*.f64 z (sin.f64 y)))","(fma.f64 (sin.f64 y) (neg.f64 z) (cos.f64 y))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","x","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","x","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(+.f64 (cos.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(*.f64 -1 (*.f64 z (sin.f64 y)))","(neg.f64 (*.f64 z (sin.f64 y)))","(*.f64 (sin.f64 y) (neg.f64 z))","(*.f64 z (neg.f64 (sin.f64 y)))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(+.f64 (*.f64 -1 (*.f64 z (sin.f64 y))) (+.f64 (cos.f64 y) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(+.f64 1 x)","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 y z)) x))","(+.f64 1 (fma.f64 -1 (*.f64 y z) x))","(+.f64 1 (-.f64 x (*.f64 y z)))","(-.f64 x (fma.f64 y z -1))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (pow.f64 y 2)) x)))","(+.f64 1 (fma.f64 -1 (*.f64 y z) (fma.f64 -1/2 (*.f64 y y) x)))","(+.f64 1 (-.f64 (fma.f64 (*.f64 y y) -1/2 x) (*.f64 y z)))","(-.f64 (fma.f64 (*.f64 y y) -1/2 x) (fma.f64 y z -1))","(-.f64 x (fma.f64 y (+.f64 z (*.f64 y 1/2)) -1))","(+.f64 1 (+.f64 (*.f64 -1 (*.f64 y z)) (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 3) z)) x))))","(+.f64 1 (fma.f64 -1 (*.f64 y z) (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/6 (*.f64 z (pow.f64 y 3)) x))))","(+.f64 (fma.f64 (*.f64 y y) -1/2 (fma.f64 (*.f64 z (pow.f64 y 3)) 1/6 x)) (-.f64 1 (*.f64 y z)))","(-.f64 (fma.f64 y (*.f64 y -1/2) (fma.f64 (pow.f64 y 3) (*.f64 z 1/6) x)) (fma.f64 y z -1))","(-.f64 (fma.f64 y (*.f64 y -1/2) x) (fma.f64 z (fma.f64 -1/6 (pow.f64 y 3) y) -1))","(-.f64 x (fma.f64 z (fma.f64 -1/6 (pow.f64 y 3) y) (fma.f64 y (*.f64 y 1/2) -1)))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))","(-.f64 (+.f64 (cos.f64 y) x) (*.f64 z (sin.f64 y)))","(+.f64 (-.f64 (cos.f64 y) (*.f64 z (sin.f64 y))) x)","(+.f64 (cos.f64 y) (-.f64 x (*.f64 z (sin.f64 y))))","(+.f64 (cos.f64 y) (fma.f64 (sin.f64 y) (neg.f64 z) x))"]],"stop":[["node limit",1]],"time":49.2900390625,"type":"simplify"},{"compiler":[[2071,760]],"time":21.825927734375,"type":"eval"},{"alts":[["(*.f64 (pow.f64 (cbrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))) 2) (cbrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))))","fresh",18.505777144444966],["(-.f64 x (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 3))","fresh",18.18443046272114],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 3))))","fresh",0.12013627930532607],["(-.f64 x (/.f64 (-.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (pow.f64 (cos.f64 y) 2)) (fma.f64 z (sin.f64 y) (cos.f64 y))))","fresh",10.053066259768443],["(-.f64 x (fma.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3) (neg.f64 (cos.f64 y))))","fresh",0.20902255861065214],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (exp.f64 (cos.f64 y))))))","fresh",0.09050751953688403],["(-.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) (pow.f64 (cos.f64 y) 3)) (+.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (-.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))))","fresh",31.756951605268284],["(-.f64 x (*.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2))))","fresh",28.027146624805088],["(-.f64 x (fma.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))) (neg.f64 (cos.f64 y))))","next",0.08660126953688403]],"compiler":[[24,11],[14,10],[15,11],[26,13],[15,11],[14,10],[39,19],[22,12],[14,10],[24,11],[14,10],[15,11],[26,13],[15,11],[14,10],[39,19],[22,12],[14,10]],"count":[[148,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[147,9],"picked":[1,0]}],"min-error":[0.015625],"time":43.6650390625,"type":"prune"},{"compiler":[[40,10]],"locations":[["(cos.f64 y)",0.015625,false],["(fma.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))) (neg.f64 (cos.f64 y)))",0.05859375,true],["(expm1.f64 (sin.f64 y))",0.10546875,true],["(log1p.f64 (expm1.f64 (sin.f64 y)))",0.15853500976844204,true]],"time":10.416015625,"type":"localize"},{"count":[[3,48]],"series":[["(fma.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))) (neg.f64 (cos.f64 y)))","y","-inf",0.171142578125],["(fma.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))) (neg.f64 (cos.f64 y)))","y","inf",0.173828125],["(fma.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))) (neg.f64 (cos.f64 y)))","y","0",0.205078125],["(fma.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))) (neg.f64 (cos.f64 y)))","z","-inf",0.177001953125],["(fma.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))) (neg.f64 (cos.f64 y)))","z","inf",0.203857421875],["(fma.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))) (neg.f64 (cos.f64 y)))","z","0",0.23583984375],["(expm1.f64 (sin.f64 y))","y","-inf",0.2109375],["(expm1.f64 (sin.f64 y))","y","inf",0.248046875],["(expm1.f64 (sin.f64 y))","y","0",0.307861328125],["(log1p.f64 (expm1.f64 (sin.f64 y)))","y","-inf",0.2060546875],["(log1p.f64 (expm1.f64 (sin.f64 y)))","y","inf",0.197998046875],["(log1p.f64 (expm1.f64 (sin.f64 y)))","y","0",0.37109375]],"time":2.973876953125,"type":"series"},{"count":[[3,57]],"egraph":[[2,1921,17,0.020637667],[1,162,17,0.0031910000000000003],[0,9,19,0.000276375]],"inputs":[["(log1p.f64 (expm1.f64 (sin.f64 y)))","(expm1.f64 (sin.f64 y))","(fma.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))) (neg.f64 (cos.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (expm1.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 2) (cbrt.f64 (expm1.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (expm1.f64 (sin.f64 y))) (sqrt.f64 (expm1.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 (sin.f64 y)) 3) 1) (+.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) (+.f64 1 (*.f64 (exp.f64 (sin.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) 1) (+.f64 (exp.f64 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (expm1.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (expm1.f64 (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (expm1.f64 (sin.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (expm1.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (expm1.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (expm1.f64 (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (expm1.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (expm1.f64 (sin.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) (*.f64 (sin.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sin.f64 y) z) 1) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 z (sin.f64 y) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 (sin.f64 y) z) 0) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (sin.f64 y) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 2) (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (sin.f64 y) z) 3) (pow.f64 (cos.f64 y) 3)) (+.f64 (*.f64 (*.f64 (sin.f64 y) z) (*.f64 (sin.f64 y) z)) (-.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (*.f64 (sin.f64 y) z) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (sin.f64 y) z) (*.f64 (sin.f64 y) z)) (pow.f64 (cos.f64 y) 2)) (fma.f64 z (sin.f64 y) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))))"]],"rules":[["egg-rr",23],["egg-rr",18],["egg-rr",16]],"stop":[["node limit",1]],"time":44.343017578125,"type":"rewrite"},{"count":[[105,84]],"egraph":[[6,6464,394,0.037847082],[5,4216,394,0.023912541],[4,2494,394,0.014071749],[3,876,394,0.0063765409999999995],[2,316,399,0.002366291],[1,143,403,0.000949416],[0,56,412,0.000287166]],"inputs":[["y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","y","(+.f64 y (*.f64 1/2 (pow.f64 y 2)))","(+.f64 y (+.f64 (*.f64 -1/8 (pow.f64 y 4)) (*.f64 1/2 (pow.f64 y 2))))","(+.f64 y (+.f64 (*.f64 -1/8 (pow.f64 y 4)) (+.f64 (*.f64 1/2 (pow.f64 y 2)) (*.f64 -1/15 (pow.f64 y 5)))))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(*.f64 -1 (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","-1","(-.f64 (*.f64 y z) 1)","(-.f64 (+.f64 (*.f64 y z) (*.f64 1/2 (pow.f64 y 2))) 1)","(-.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 1/2 (pow.f64 y 2)))) 1)","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 (fma.f64 1/120 (pow.f64 y 5) y) (*.f64 -1/5040 (pow.f64 y 7))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y)))","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","y","(+.f64 y (*.f64 1/2 (pow.f64 y 2)))","(+.f64 y (*.f64 1/2 (*.f64 y y)))","(fma.f64 1/2 (*.f64 y y) y)","(fma.f64 y (*.f64 y 1/2) y)","(*.f64 y (fma.f64 y 1/2 1))","(+.f64 y (+.f64 (*.f64 -1/8 (pow.f64 y 4)) (*.f64 1/2 (pow.f64 y 2))))","(+.f64 y (fma.f64 -1/8 (pow.f64 y 4) (*.f64 1/2 (*.f64 y y))))","(+.f64 (fma.f64 1/2 (*.f64 y y) y) (*.f64 -1/8 (pow.f64 y 4)))","(fma.f64 y (*.f64 y 1/2) (fma.f64 -1/8 (pow.f64 y 4) y))","(+.f64 y (+.f64 (*.f64 -1/8 (pow.f64 y 4)) (+.f64 (*.f64 1/2 (pow.f64 y 2)) (*.f64 -1/15 (pow.f64 y 5)))))","(+.f64 y (fma.f64 -1/8 (pow.f64 y 4) (fma.f64 1/2 (*.f64 y y) (*.f64 (pow.f64 y 5) -1/15))))","(+.f64 y (fma.f64 -1/8 (pow.f64 y 4) (fma.f64 (pow.f64 y 5) -1/15 (*.f64 y (*.f64 y 1/2)))))","(+.f64 y (fma.f64 y (*.f64 y 1/2) (fma.f64 (pow.f64 y 5) -1/15 (*.f64 -1/8 (pow.f64 y 4)))))","(fma.f64 y (*.f64 y 1/2) (fma.f64 (pow.f64 y 5) -1/15 (fma.f64 -1/8 (pow.f64 y 4) y)))","(fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y -1/8) 1/2) (fma.f64 (pow.f64 y 5) -1/15 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(*.f64 -1 (cos.f64 y))","(neg.f64 (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","-1","(-.f64 (*.f64 y z) 1)","(fma.f64 y z -1)","(-.f64 (+.f64 (*.f64 y z) (*.f64 1/2 (pow.f64 y 2))) 1)","(+.f64 (fma.f64 y z (*.f64 1/2 (*.f64 y y))) -1)","(fma.f64 y z (fma.f64 1/2 (*.f64 y y) -1))","(fma.f64 y (*.f64 y 1/2) (fma.f64 y z -1))","(fma.f64 y (fma.f64 y 1/2 z) -1)","(-.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 1/2 (pow.f64 y 2)))) 1)","(+.f64 (fma.f64 y z (fma.f64 -1/6 (*.f64 (pow.f64 y 3) z) (*.f64 1/2 (*.f64 y y)))) -1)","(+.f64 (*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y)) (fma.f64 1/2 (*.f64 y y) -1))","(fma.f64 z (fma.f64 -1/6 (pow.f64 y 3) y) (fma.f64 y (*.f64 y 1/2) -1))","(fma.f64 (pow.f64 y 3) (*.f64 -1/6 z) (fma.f64 y (fma.f64 y 1/2 z) -1))","(fma.f64 y (fma.f64 y 1/2 z) (fma.f64 (pow.f64 y 3) (*.f64 -1/6 z) -1))","(fma.f64 y (fma.f64 y 1/2 z) (fma.f64 -1/6 (*.f64 (pow.f64 y 3) z) -1))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 (sin.f64 y) z) (cos.f64 y))"]],"stop":[["node limit",1]],"time":59.5771484375,"type":"simplify"},{"compiler":[[1728,725]],"time":19.619873046875,"type":"eval"},{"alts":[["(-.f64 x (fma.f64 z (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 3)) (neg.f64 (cos.f64 y))))","fresh",0.19701010745286215],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 3))))","fresh",0.12013627930532607],["(-.f64 x (/.f64 (-.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (pow.f64 (cos.f64 y) 2)) (fma.f64 z (sin.f64 y) (cos.f64 y))))","fresh",10.053066259768443],["(-.f64 x (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 3))","fresh",18.18443046272114],["(-.f64 x (fma.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3) (neg.f64 (cos.f64 y))))","fresh",0.20902255861065214],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (exp.f64 (cos.f64 y))))))","next",0.09050751953688403],["(-.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) (pow.f64 (cos.f64 y) 3)) (+.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (-.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))))","fresh",31.756951605268284],["(-.f64 x (fma.f64 z (log1p.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) 1) (+.f64 (exp.f64 (sin.f64 y)) 1))) (neg.f64 (cos.f64 y))))","fresh",5.614011002951679],["(-.f64 x (*.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2))))","fresh",28.027146624805088]],"compiler":[[17,13],[15,11],[26,13],[14,10],[15,11],[14,10],[39,19],[26,16],[22,12],[17,13],[15,11],[26,13],[14,10],[15,11],[14,10],[39,19],[26,16],[22,12]],"count":[[128,9]],"kept":[{"done":[0,0],"fresh":[8,6],"new":[119,3],"picked":[1,0]}],"min-error":[0.0078125],"time":39.551025390625,"type":"prune"},{"compiler":[[42,10]],"locations":[["(cos.f64 y)",0.015625,false],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (exp.f64 (cos.f64 y)))))",0.05859375,true],["(exp.f64 (cos.f64 y))",0.0625,true],["(log.f64 (exp.f64 (cos.f64 y)))",0.3162176886697881,true]],"time":10.943115234375,"type":"localize"},{"count":[[3,40]],"series":[["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (exp.f64 (cos.f64 y)))))","y","-inf",0.157958984375],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (exp.f64 (cos.f64 y)))))","y","inf",0.18505859375],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (exp.f64 (cos.f64 y)))))","y","0",0.156005859375],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (exp.f64 (cos.f64 y)))))","z","-inf",0.18505859375],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (exp.f64 (cos.f64 y)))))","z","inf",0.156982421875],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (exp.f64 (cos.f64 y)))))","z","0",0.159912109375],["(exp.f64 (cos.f64 y))","y","-inf",0.198974609375],["(exp.f64 (cos.f64 y))","y","inf",0.175048828125],["(exp.f64 (cos.f64 y))","y","0",0.337158203125],["(log.f64 (exp.f64 (cos.f64 y)))","y","-inf",0.160888671875],["(log.f64 (exp.f64 (cos.f64 y)))","y","inf",0.196044921875],["(log.f64 (exp.f64 (cos.f64 y)))","y","0",0.25390625]],"time":2.468994140625,"type":"series"},{"count":[[3,80]],"egraph":[[2,1914,17,0.018233334],[1,165,17,0.002717625],[0,9,19,0.000206875]],"inputs":[["(log.f64 (exp.f64 (cos.f64 y)))","(exp.f64 (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (exp.f64 (cos.f64 y)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 2))) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (neg.f64 (sqrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (cos.f64 y) 3)) (+.f64 0 (+.f64 (pow.f64 (cos.f64 y) 2) (*.f64 0 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (cos.f64 y) 2)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (exp.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 2)) (cbrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (cos.f64 y))) (sqrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (exp.f64 (cos.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 2))) (cbrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (sqrt.f64 (exp.f64 (cos.f64 y)))) (sqrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cos.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (cos.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (cos.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (sin.f64 y)) 1) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 z (sin.f64 y) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 z (sin.f64 y)) 0) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (sin.f64 y) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 2) (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) (pow.f64 (cos.f64 y) 3)) (+.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (-.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (*.f64 z (sin.f64 y)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (pow.f64 (cos.f64 y) 2)) (fma.f64 z (sin.f64 y) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))))"]],"rules":[["egg-rr",23],["egg-rr",26],["egg-rr",31]],"stop":[["node limit",1]],"time":45.701904296875,"type":"rewrite"},{"count":[[120,105]],"egraph":[[7,6705,374,0.04909991600000001],[6,4555,374,0.033406624],[5,3426,374,0.020968541],[4,2052,374,0.012107208000000001],[3,1177,374,0.006452958],[2,361,377,0.002878999],[1,144,391,0.001102333],[0,56,398,0.00029425]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(exp.f64 1)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (exp.f64 1))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (exp.f64 1)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (+.f64 (*.f64 -31/720 (*.f64 (pow.f64 y 6) (exp.f64 1))) (exp.f64 1))))","(*.f64 -1 (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","-1","(-.f64 (*.f64 y z) 1)","(-.f64 (+.f64 (*.f64 y z) (*.f64 1/2 (pow.f64 y 2))) 1)","(-.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 1/2 (pow.f64 y 2)))) 1)","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 y y)))","(fma.f64 -1/2 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (*.f64 1/24 (pow.f64 y 4)))","(fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))) (fma.f64 -1/720 (pow.f64 y 6) 1))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(exp.f64 1)","(E.f64)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (exp.f64 1))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (E.f64))","(*.f64 (fma.f64 -1/2 (*.f64 y y) 1) (E.f64))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (exp.f64 1)))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (fma.f64 1/6 (*.f64 (pow.f64 y 4) (E.f64)) (E.f64)))","(fma.f64 -1/2 (*.f64 y (*.f64 y (E.f64))) (fma.f64 1/6 (*.f64 (pow.f64 y 4) (E.f64)) (E.f64)))","(fma.f64 (E.f64) (fma.f64 -1/2 (*.f64 y y) (*.f64 (pow.f64 y 4) 1/6)) (E.f64))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (+.f64 (*.f64 -31/720 (*.f64 (pow.f64 y 6) (exp.f64 1))) (exp.f64 1))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (fma.f64 1/6 (*.f64 (pow.f64 y 4) (E.f64)) (fma.f64 -31/720 (*.f64 (pow.f64 y 6) (E.f64)) (E.f64))))","(+.f64 (*.f64 (E.f64) (+.f64 (*.f64 (pow.f64 y 4) 1/6) (*.f64 (pow.f64 y 6) -31/720))) (*.f64 (fma.f64 -1/2 (*.f64 y y) 1) (E.f64)))","(fma.f64 (E.f64) (fma.f64 -1/2 (*.f64 y y) (*.f64 (pow.f64 y 4) 1/6)) (*.f64 (E.f64) (fma.f64 (pow.f64 y 6) -31/720 1)))","(*.f64 (E.f64) (+.f64 (fma.f64 (pow.f64 y 6) -31/720 1) (fma.f64 -1/2 (*.f64 y y) (*.f64 (pow.f64 y 4) 1/6))))","(*.f64 (E.f64) (+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (fma.f64 (pow.f64 y 4) 1/6 (*.f64 (pow.f64 y 6) -31/720))))","(*.f64 -1 (cos.f64 y))","(neg.f64 (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","-1","(-.f64 (*.f64 y z) 1)","(fma.f64 y z -1)","(-.f64 (+.f64 (*.f64 y z) (*.f64 1/2 (pow.f64 y 2))) 1)","(+.f64 (fma.f64 y z (*.f64 (*.f64 y y) 1/2)) -1)","(fma.f64 y z (fma.f64 (*.f64 y y) 1/2 -1))","(fma.f64 y z (fma.f64 y (*.f64 y 1/2) -1))","(fma.f64 y (+.f64 z (*.f64 y 1/2)) -1)","(-.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 1/2 (pow.f64 y 2)))) 1)","(+.f64 (fma.f64 y z (fma.f64 -1/6 (*.f64 z (pow.f64 y 3)) (*.f64 (*.f64 y y) 1/2))) -1)","(+.f64 (*.f64 z (+.f64 y (*.f64 -1/6 (pow.f64 y 3)))) (fma.f64 (*.f64 y y) 1/2 -1))","(fma.f64 z (+.f64 y (*.f64 -1/6 (pow.f64 y 3))) (fma.f64 y (*.f64 y 1/2) -1))","(fma.f64 y z (fma.f64 (*.f64 y y) (+.f64 1/2 (*.f64 z (*.f64 y -1/6))) -1))","(fma.f64 (*.f64 y y) (+.f64 1/2 (*.f64 y (*.f64 z -1/6))) (fma.f64 y z -1))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))"]],"stop":[["node limit",1]],"time":68.85595703125,"type":"simplify"},{"compiler":[[2073,1001]],"time":23.631103515625,"type":"eval"},{"alts":[["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (pow.f64 (exp.f64 1) (cos.f64 y))))))","next",0.08822250976844202],["(-.f64 x (fma.f64 z (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 3)) (neg.f64 (cos.f64 y))))","fresh",0.19701010745286215],["(-.f64 x (/.f64 (-.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (pow.f64 (cos.f64 y) 2)) (fma.f64 z (sin.f64 y) (cos.f64 y))))","fresh",10.053066259768443],["(-.f64 x (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 3))","fresh",18.18443046272114],["(-.f64 x (fma.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3) (neg.f64 (cos.f64 y))))","fresh",0.20902255861065214],["(-.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) (pow.f64 (cos.f64 y) 3)) (+.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (-.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))))","fresh",31.756951605268284],["(-.f64 x (fma.f64 z (log1p.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) 1) (+.f64 (exp.f64 (sin.f64 y)) 1))) (neg.f64 (cos.f64 y))))","fresh",5.614011002951679],["(-.f64 x (*.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2))))","fresh",28.027146624805088]],"compiler":[[16,12],[17,13],[26,13],[14,10],[15,11],[39,19],[26,16],[22,12],[16,12],[17,13],[26,13],[14,10],[15,11],[39,19],[26,16],[22,12]],"count":[[149,8]],"kept":[{"done":[0,0],"fresh":[8,7],"new":[140,1],"picked":[1,0]}],"min-error":[0.0078125],"time":43.573974609375,"type":"prune"},{"compiler":[[55,33]],"locations":[["(cos.f64 y)",0.015625,false],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))))",0.05859375,true],["(pow.f64 (exp.f64 1) (cos.f64 y))",0.109375,true],["(log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))",0.3162176886697881,true]],"time":29.0,"type":"localize"},{"count":[[3,48]],"series":[["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))))","y","-inf",0.18017578125],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))))","y","inf",0.183837890625],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))))","y","0",0.203125],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))))","z","-inf",2.166015625],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))))","z","inf",0.2080078125],["(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))))","z","0",2.803955078125],["(pow.f64 (exp.f64 1) (cos.f64 y))","y","-inf",0.14306640625],["(pow.f64 (exp.f64 1) (cos.f64 y))","y","inf",0.169921875],["(pow.f64 (exp.f64 1) (cos.f64 y))","y","0",0.180908203125],["(log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))","y","-inf",7.60498046875],["(log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))","y","inf",25.6669921875],["(log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))","y","0",0.989013671875]],"time":40.696044921875,"type":"series"},{"count":[[3,75]],"egraph":[[2,2254,17,0.019562208],[1,217,17,0.003201083],[0,11,19,0.000290292]],"inputs":[["(log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))","(pow.f64 (exp.f64 1) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (pow.f64 (exp.f64 1) (cos.f64 y)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 y) 1/2) (*.f64 (cos.f64 y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (neg.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (neg.f64 (sqrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (cos.f64 y) 3)) (+.f64 0 (+.f64 (pow.f64 (cos.f64 y) 2) (*.f64 0 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (cos.f64 y) 2)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (exp.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2) (cbrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (cos.f64 y))) (sqrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 (cos.f64 y)) (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 2)) (cos.f64 y)) (pow.f64 (cbrt.f64 (E.f64)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (E.f64)) (cos.f64 y)) (pow.f64 (sqrt.f64 (E.f64)) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (exp.f64 (cos.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2)) (cbrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (sqrt.f64 (exp.f64 (cos.f64 y)))) (sqrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (cos.f64 y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 y) (*.f64 z (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z (sin.f64 y)) 1) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 z (sin.f64 y) (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (*.f64 z (sin.f64 y)) 0) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z (sin.f64 y) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 2) (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) (pow.f64 (cos.f64 y) 3)) (+.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (-.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (*.f64 z (sin.f64 y)) (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (pow.f64 (cos.f64 y) 2)) (fma.f64 z (sin.f64 y) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))))))))"]],"rules":[["egg-rr",23],["egg-rr",21],["egg-rr",31]],"stop":[["node limit",1]],"time":42.950927734375,"type":"rewrite"},{"count":[[123,100]],"egraph":[[7,6721,414,0.045484624],[6,4570,414,0.030795249],[5,3440,414,0.019637583],[4,2066,414,0.011843958],[3,1182,414,0.006358749],[2,362,417,0.0027647080000000003],[1,145,431,0.0009652490000000001],[0,57,438,0.000280041]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(exp.f64 1)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (exp.f64 1))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (exp.f64 1)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (+.f64 (*.f64 -31/720 (*.f64 (pow.f64 y 6) (exp.f64 1))) (exp.f64 1))))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(*.f64 -1 (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","-1","(-.f64 (*.f64 y z) 1)","(-.f64 (+.f64 (*.f64 y z) (*.f64 1/2 (pow.f64 y 2))) 1)","(-.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 1/2 (pow.f64 y 2)))) 1)","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 y y)))","(fma.f64 -1/2 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (*.f64 1/24 (pow.f64 y 4)))","(fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))) (fma.f64 -1/720 (pow.f64 y 6) 1))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(exp.f64 1)","(E.f64)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (exp.f64 1))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (E.f64))","(*.f64 (fma.f64 -1/2 (*.f64 y y) 1) (E.f64))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (exp.f64 1)))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (fma.f64 1/6 (*.f64 (pow.f64 y 4) (E.f64)) (E.f64)))","(+.f64 (E.f64) (*.f64 (E.f64) (+.f64 (*.f64 -1/2 (*.f64 y y)) (*.f64 (pow.f64 y 4) 1/6))))","(fma.f64 (E.f64) (fma.f64 -1/2 (*.f64 y y) (*.f64 (pow.f64 y 4) 1/6)) (E.f64))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (+.f64 (*.f64 -31/720 (*.f64 (pow.f64 y 6) (exp.f64 1))) (exp.f64 1))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (fma.f64 1/6 (*.f64 (pow.f64 y 4) (E.f64)) (fma.f64 -31/720 (*.f64 (pow.f64 y 6) (E.f64)) (E.f64))))","(+.f64 (*.f64 (E.f64) (+.f64 (*.f64 (pow.f64 y 4) 1/6) (*.f64 (pow.f64 y 6) -31/720))) (*.f64 (fma.f64 -1/2 (*.f64 y y) 1) (E.f64)))","(fma.f64 (E.f64) (fma.f64 -1/2 (*.f64 y y) (*.f64 (pow.f64 y 4) 1/6)) (*.f64 (E.f64) (fma.f64 (pow.f64 y 6) -31/720 1)))","(*.f64 (E.f64) (+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (fma.f64 (pow.f64 y 4) 1/6 (*.f64 (pow.f64 y 6) -31/720))))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(exp.f64 (cos.f64 y))","(*.f64 -1 (cos.f64 y))","(neg.f64 (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(*.f64 z (sin.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(+.f64 (*.f64 -1 (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","-1","(-.f64 (*.f64 y z) 1)","(fma.f64 y z -1)","(-.f64 (+.f64 (*.f64 y z) (*.f64 1/2 (pow.f64 y 2))) 1)","(+.f64 (fma.f64 y z (*.f64 (*.f64 y y) 1/2)) -1)","(fma.f64 y z (fma.f64 (*.f64 y y) 1/2 -1))","(fma.f64 y z (fma.f64 y (*.f64 y 1/2) -1))","(fma.f64 y (+.f64 z (*.f64 y 1/2)) -1)","(-.f64 (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 1/2 (pow.f64 y 2)))) 1)","(+.f64 (fma.f64 y z (fma.f64 -1/6 (*.f64 z (pow.f64 y 3)) (*.f64 (*.f64 y y) 1/2))) -1)","(+.f64 (*.f64 z (+.f64 y (*.f64 -1/6 (pow.f64 y 3)))) (fma.f64 (*.f64 y y) 1/2 -1))","(fma.f64 z (+.f64 y (*.f64 -1/6 (pow.f64 y 3))) (fma.f64 y (*.f64 y 1/2) -1))","(fma.f64 y z (fma.f64 (*.f64 y y) (+.f64 1/2 (*.f64 z (*.f64 y -1/6))) -1))","(fma.f64 (*.f64 y y) (+.f64 1/2 (*.f64 y (*.f64 z -1/6))) (fma.f64 y z -1))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))","(-.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))","(fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y)))"]],"stop":[["node limit",1]],"time":67.25,"type":"simplify"},{"compiler":[[2078,1038]],"time":23.694091796875,"type":"eval"},{"alts":[["(-.f64 x (/.f64 (-.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (pow.f64 (cos.f64 y) 2)) (fma.f64 z (sin.f64 y) (cos.f64 y))))","fresh",10.053066259768443],["(-.f64 x (fma.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3) (neg.f64 (cos.f64 y))))","fresh",0.20902255861065214],["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (pow.f64 (exp.f64 1) (cos.f64 y))))))","done",0.08822250976844202],["(-.f64 x (fma.f64 z (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 3)) (neg.f64 (cos.f64 y))))","fresh",0.19701010745286215],["(-.f64 x (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 3))","fresh",18.18443046272114],["(-.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) (pow.f64 (cos.f64 y) 3)) (+.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (-.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))))","fresh",31.756951605268284],["(-.f64 x (fma.f64 z (log1p.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) 1) (+.f64 (exp.f64 (sin.f64 y)) 1))) (neg.f64 (cos.f64 y))))","fresh",5.614011002951679],["(-.f64 x (*.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2))))","fresh",28.027146624805088]],"compiler":[[26,13],[15,11],[16,12],[17,13],[14,10],[39,19],[26,16],[22,12]],"count":[[143,8]],"kept":[{"done":[0,0],"fresh":[7,5],"new":[135,2],"picked":[1,1]}],"min-error":[0.0078125],"time":36.52392578125,"type":"prune"},{"accuracy":[0.0625],"baseline":[0.0625],"branch":[["x",0.0625,1],["y",0.0625,1],["z",0.0625,1],["(-.f64 (+.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",0.0625,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[297,106]],"count":[[17,1]],"inputs":[["(-.f64 x (/.f64 (-.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (pow.f64 (cos.f64 y) 2)) (fma.f64 z (sin.f64 y) (cos.f64 y))))","(-.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) (pow.f64 (cos.f64 y) 3)) (+.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (-.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))))","(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (pow.f64 (exp.f64 1) (cos.f64 y))))))","(-.f64 x (fma.f64 z (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 3)) (neg.f64 (cos.f64 y))))","(-.f64 x (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 3))","(-.f64 x (fma.f64 z (log1p.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) 1) (+.f64 (exp.f64 (sin.f64 y)) 1))) (neg.f64 (cos.f64 y))))","(*.f64 (pow.f64 (cbrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))) 2) (cbrt.f64 (-.f64 x (fma.f64 z (sin.f64 y) (cos.f64 y)))))","(-.f64 x (pow.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) 3))","(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 3))))","(-.f64 x (/.f64 (-.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (pow.f64 (cos.f64 y) 2)) (fma.f64 z (sin.f64 y) (cos.f64 y))))","(-.f64 x (fma.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3) (neg.f64 (cos.f64 y))))","(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (log.f64 (exp.f64 (cos.f64 y))))))","(-.f64 x (/.f64 (+.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) (pow.f64 (cos.f64 y) 3)) (+.f64 (*.f64 (*.f64 z (sin.f64 y)) (*.f64 z (sin.f64 y))) (-.f64 (pow.f64 (cos.f64 y) 2) (*.f64 (*.f64 z (sin.f64 y)) (cos.f64 y))))))","(-.f64 x (*.f64 (cbrt.f64 (fma.f64 z (sin.f64 y) (cos.f64 y))) (cbrt.f64 (pow.f64 (fma.f64 z (sin.f64 y) (cos.f64 y)) 2))))","(-.f64 x (fma.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))) (neg.f64 (cos.f64 y))))","(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))","(-.f64 (+.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"link":["."],"name":["Graphics.Rasterific.Svg.PathConverter:segmentToBezier from rasterific-svg-0.2.3.1, B"],"oracle":[34.975232088037785],"outputs":[["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))"]],"time":31.416015625,"times":[["x",6.901123046875],["y",6.7919921875],["z",6.64013671875],["(-.f64 (+.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",6.56591796875]],"type":"regimes"},{"compiler":[[12,8]],"egraph":[[4,24,14,0.00015095799999999997],[3,23,14,0.00011983299999999999],[2,20,14,8.791699999999999e-5],[1,15,14,5.7249999999999996e-5],[0,9,14,2.9417e-5]],"inputs":[["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 x (fma.f64 z (sin.f64 y) (neg.f64 (cos.f64 y))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.39794921875,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[12,8]],"remove-preprocessing":[[]],"time":8.844970703125,"type":"end"}]
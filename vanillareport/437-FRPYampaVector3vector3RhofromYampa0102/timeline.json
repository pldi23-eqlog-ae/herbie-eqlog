[{"compiler":[[16,10]],"method":["search"],"sampling":[[12,0.5733780198993372,0.42515785148998475,0.0014641286106780171],[11,0.4914668741994319,0.5070689971898901,0.0014641286106780171],[10,0.4212573207423702,0.5772785506469518,0.0014641286106780171],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":109.0087890625,"type":"analyze"},{"outcomes":[["body",256,"valid",418.27001953125,8256]],"time":426.126220703125,"type":"sample"},{"compiler":[[15,9]],"egraph":[[1,3,3,1.0874000000000001e-5],[0,3,3,1.0166e-5],[2,34,56,0.000269958],[1,29,56,0.00018208299999999998],[0,19,64,8.9125e-5]],"inputs":[["0","1","2"],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))","(sqrt.f64 (+.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 z z)))","(sqrt.f64 (+.f64 (+.f64 (*.f64 z z) (*.f64 y y)) (*.f64 x x)))","(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 z z)) (*.f64 y y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0","2","0"],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))","(sqrt.f64 (+.f64 (*.f64 z z) (fma.f64 y y (*.f64 x x))))","(sqrt.f64 (fma.f64 y y (fma.f64 z z (*.f64 x x))))","(sqrt.f64 (+.f64 (+.f64 (*.f64 y y) (*.f64 x x)) (*.f64 z z)))","(sqrt.f64 (+.f64 (*.f64 z z) (fma.f64 y y (*.f64 x x))))","(sqrt.f64 (fma.f64 y y (fma.f64 z z (*.f64 x x))))","(sqrt.f64 (+.f64 (+.f64 (*.f64 z z) (*.f64 y y)) (*.f64 x x)))","(sqrt.f64 (+.f64 (*.f64 z z) (fma.f64 y y (*.f64 x x))))","(sqrt.f64 (fma.f64 y y (fma.f64 z z (*.f64 x x))))","(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 z z)) (*.f64 y y)))","(sqrt.f64 (+.f64 (*.f64 z z) (fma.f64 y y (*.f64 x x))))","(sqrt.f64 (fma.f64 y y (fma.f64 z z (*.f64 x x))))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y z)"]],"time":26.371826171875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[3,32,14,0.00028687499999999997],[2,26,14,0.00020449999999999998],[1,15,14,0.000119833],[0,10,16,5.6375e-5]],"inputs":[["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))","(sqrt.f64 (+.f64 (fma.f64 x x (*.f64 y y)) (*.f64 z z)))","(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))"]],"stop":[["saturated",1]],"time":11.47607421875,"type":"simplify"},{"compiler":[[25,12]],"time":0.409912109375,"type":"eval"},{"alts":[["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))","next",39.89759423361397]],"compiler":[[13,7],[13,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[39.89759423361397],"time":1.080078125,"type":"prune"},{"compiler":[[34,7]],"locations":[["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))",36.98491961726135,true]],"time":6.114990234375,"type":"localize"},{"count":[[1,36]],"series":[["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))","z","-inf",0.35498046875],["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))","z","inf",0.77490234375],["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))","z","0",0.742919921875],["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))","y","-inf",0.381103515625],["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))","y","inf",0.538818359375],["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))","y","0",0.72314453125],["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))","x","-inf",0.526123046875],["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))","x","inf",0.52392578125],["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))","x","0",0.84619140625]],"time":5.7041015625,"type":"series"},{"count":[[1,21]],"egraph":[[2,1816,7,0.021299334000000003],[1,157,7,0.0036766669999999998],[0,8,14,0.000286625]],"inputs":[["(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (hypot.f64 x (hypot.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x (hypot.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 x (hypot.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 x (hypot.f64 y z))) (pow.f64 (cbrt.f64 (hypot.f64 x (hypot.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (hypot.f64 x (hypot.f64 y z))) 2) (cbrt.f64 (hypot.f64 x (hypot.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (hypot.f64 x (hypot.f64 y z))) (sqrt.f64 (hypot.f64 x (hypot.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (pow.f64 (cbrt.f64 (hypot.f64 x (hypot.f64 y z))) 2) 2)) (sqrt.f64 (pow.f64 (cbrt.f64 (hypot.f64 x (hypot.f64 y z))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (hypot.f64 x (hypot.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (pow.f64 (cbrt.f64 (hypot.f64 x (hypot.f64 y z))) 2) 2) 1/2) (pow.f64 (pow.f64 (cbrt.f64 (hypot.f64 x (hypot.f64 y z))) 2) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 x (hypot.f64 y z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 x (hypot.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (hypot.f64 x (hypot.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 x (hypot.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (hypot.f64 x (hypot.f64 y z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 x (hypot.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (hypot.f64 x (hypot.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (hypot.f64 x (hypot.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 x (hypot.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (hypot.f64 x (hypot.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (hypot.f64 x (hypot.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (hypot.f64 x (hypot.f64 y z))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":41.073974609375,"type":"rewrite"},{"count":[[57,90]],"egraph":[[3,5938,1079,0.029085166],[2,1422,1133,0.012167998999999999],[1,463,1137,0.0032533329999999997],[0,161,1361,0.000887]],"inputs":[["(sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))","(+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (pow.f64 x 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2)))))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (pow.f64 x 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 5))) (pow.f64 x 6))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2))))))","x","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) x)","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) x))","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (pow.f64 x 5))) x)))","(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3)))))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1 x) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (pow.f64 x 5))))))","(sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3)))))))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 5))))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3))))))))","y","(+.f64 y (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))","(+.f64 y (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3)))))","(+.f64 y (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (pow.f64 y 5))) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))))))","(*.f64 -1 y)","(+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))) (+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (pow.f64 y 5))) (+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))))","(sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (pow.f64 z 4))) (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (pow.f64 z 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 5))) (pow.f64 z 6))))))","z","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) z)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) z))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (pow.f64 z 5))) z)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z))))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (pow.f64 z 5))))))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))","(sqrt.f64 (+.f64 (*.f64 z z) (*.f64 y y)))","(hypot.f64 z y)","(+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2))))","(+.f64 (sqrt.f64 (+.f64 (*.f64 z z) (*.f64 y y))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 z z) (*.f64 y y)))) (*.f64 x x))))","(fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 y y)))) (*.f64 x x)) (hypot.f64 z y))","(fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 y y)))) (*.f64 1/2 (*.f64 x x)) (hypot.f64 z y))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (pow.f64 x 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2)))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 z z) (*.f64 y y)) 3))) (pow.f64 x 4)) (+.f64 (sqrt.f64 (+.f64 (*.f64 z z) (*.f64 y y))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 z z) (*.f64 y y)))) (*.f64 x x)))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 y y)) 3))) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 y y)))) (*.f64 x x)) (hypot.f64 z y)))","(fma.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 y y)) 3))) (*.f64 -1/8 (pow.f64 x 4)) (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 y y)))) (*.f64 1/2 (*.f64 x x)) (hypot.f64 z y)))","(fma.f64 (sqrt.f64 (/.f64 1 (pow.f64 (hypot.f64 z y) 6))) (*.f64 -1/8 (pow.f64 x 4)) (fma.f64 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 y y)))) (*.f64 1/2 (*.f64 x x)) (hypot.f64 z y)))","(+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3))) (pow.f64 x 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2))) (+.f64 (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 5))) (pow.f64 x 6))) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 y 2)))) (pow.f64 x 2))))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 z z) (*.f64 y y)) 3))) (pow.f64 x 4)) (+.f64 (sqrt.f64 (+.f64 (*.f64 z z) (*.f64 y y))) (fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 z z) (*.f64 y y)) 5))) (pow.f64 x 6)) (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (*.f64 z z) (*.f64 y y)))) (*.f64 x x))))))","(+.f64 (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 y y)) 3))) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 y y)))) (*.f64 x x)) (hypot.f64 z y))) (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 y y)) 5))) (*.f64 (pow.f64 x 6) 1/16)))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 y y)) 3))) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 y y)))) (*.f64 x x)) (fma.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 y y)) 5))) (*.f64 1/16 (pow.f64 x 6)) (hypot.f64 z y))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (hypot.f64 z y) 6))) (pow.f64 x 4)) (fma.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 y y)))) (*.f64 x x)) (fma.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 y y)) 5))) (*.f64 1/16 (pow.f64 x 6)) (hypot.f64 z y))))","x","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) x)","(fma.f64 1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 y y)) x) x)","(fma.f64 1/2 (/.f64 (fma.f64 z z (*.f64 y y)) x) x)","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) x))","(fma.f64 1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 y y)) x) (fma.f64 -1/8 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 y y)) 2) (pow.f64 x 3)) x))","(fma.f64 1/2 (/.f64 (fma.f64 z z (*.f64 y y)) x) (fma.f64 -1/8 (/.f64 (pow.f64 (fma.f64 z z (*.f64 y y)) 2) (pow.f64 x 3)) x))","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (pow.f64 x 5))) x)))","(fma.f64 1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 y y)) x) (fma.f64 -1/8 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 y y)) 2) (pow.f64 x 3)) (fma.f64 1/16 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 y y)) 3) (pow.f64 x 5)) x)))","(fma.f64 1/2 (/.f64 (fma.f64 z z (*.f64 y y)) x) (fma.f64 -1/8 (/.f64 (pow.f64 (fma.f64 z z (*.f64 y y)) 2) (pow.f64 x 3)) (fma.f64 1/16 (/.f64 (pow.f64 (fma.f64 z z (*.f64 y y)) 3) (pow.f64 x 5)) x)))","(fma.f64 1/2 (/.f64 (fma.f64 z z (*.f64 y y)) x) (fma.f64 -1/8 (/.f64 (pow.f64 (fma.f64 z z (*.f64 y y)) 2) (pow.f64 x 3)) (fma.f64 1/16 (/.f64 (pow.f64 (hypot.f64 z y) 6) (pow.f64 x 5)) x)))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (*.f64 -1 x))","(fma.f64 -1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 y y)) x) (neg.f64 x))","(fma.f64 (/.f64 (fma.f64 z z (*.f64 y y)) x) -1/2 (neg.f64 x))","(-.f64 (*.f64 (/.f64 -1/2 x) (fma.f64 z z (*.f64 y y))) x)","(fma.f64 (/.f64 -1/2 x) (fma.f64 z z (*.f64 y y)) (neg.f64 x))","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1 x) (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3)))))","(fma.f64 -1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 y y)) x) (fma.f64 -1 x (*.f64 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 y y)) 2) (pow.f64 x 3)) 1/8)))","(fma.f64 (/.f64 (fma.f64 z z (*.f64 y y)) x) -1/2 (-.f64 (*.f64 (/.f64 (pow.f64 (fma.f64 z z (*.f64 y y)) 2) (pow.f64 x 3)) 1/8) x))","(-.f64 (fma.f64 (/.f64 (fma.f64 z z (*.f64 y y)) x) -1/2 (*.f64 (/.f64 (pow.f64 (fma.f64 z z (*.f64 y y)) 2) (pow.f64 x 3)) 1/8)) x)","(-.f64 (*.f64 (/.f64 (fma.f64 z z (*.f64 y y)) x) (+.f64 -1/2 (*.f64 1/8 (/.f64 (fma.f64 z z (*.f64 y y)) (*.f64 x x))))) x)","(+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) x)) (+.f64 (*.f64 -1 x) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 2) (pow.f64 x 3))) (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 y 2)) 3) (pow.f64 x 5))))))","(fma.f64 -1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 y y)) x) (fma.f64 -1 x (fma.f64 1/8 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 y y)) 2) (pow.f64 x 3)) (*.f64 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 y y)) 3) (pow.f64 x 5)) -1/16))))","(fma.f64 (/.f64 (fma.f64 z z (*.f64 y y)) x) -1/2 (-.f64 (fma.f64 (/.f64 (pow.f64 (fma.f64 z z (*.f64 y y)) 3) (pow.f64 x 5)) -1/16 (*.f64 (/.f64 (pow.f64 (fma.f64 z z (*.f64 y y)) 2) (pow.f64 x 3)) 1/8)) x))","(-.f64 (fma.f64 (/.f64 (fma.f64 z z (*.f64 y y)) x) -1/2 (fma.f64 (/.f64 (pow.f64 (fma.f64 z z (*.f64 y y)) 2) (pow.f64 x 3)) 1/8 (*.f64 (/.f64 -1/16 (pow.f64 x 5)) (pow.f64 (fma.f64 z z (*.f64 y y)) 3)))) x)","(fma.f64 (/.f64 (fma.f64 z z (*.f64 y y)) x) -1/2 (fma.f64 (/.f64 (pow.f64 (fma.f64 z z (*.f64 y y)) 2) (pow.f64 x 3)) 1/8 (fma.f64 (/.f64 -1/16 (pow.f64 x 5)) (pow.f64 (hypot.f64 z y) 6) (neg.f64 x))))","(sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))","(sqrt.f64 (+.f64 (*.f64 z z) (*.f64 x x)))","(hypot.f64 z x)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))))","(fma.f64 1/2 (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 z z) (*.f64 x x))))) (sqrt.f64 (+.f64 (*.f64 z z) (*.f64 x x))))","(fma.f64 1/2 (*.f64 y (*.f64 y (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 x x)))))) (hypot.f64 z x))","(fma.f64 (*.f64 y y) (*.f64 1/2 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 x x))))) (hypot.f64 z x))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3)))))))","(+.f64 (fma.f64 1/2 (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 z z) (*.f64 x x))))) (sqrt.f64 (+.f64 (*.f64 z z) (*.f64 x x)))) (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 z z) (*.f64 x x)) 3))))))","(fma.f64 1/2 (*.f64 y (*.f64 y (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 x x)))))) (fma.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 x x)) 3)))) (hypot.f64 z x)))","(fma.f64 (pow.f64 y 4) (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 x x)) 3)))) (fma.f64 (*.f64 y y) (*.f64 1/2 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 x x))))) (hypot.f64 z x)))","(fma.f64 (pow.f64 y 4) (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 (hypot.f64 z x) 6)))) (fma.f64 (*.f64 y y) (*.f64 1/2 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 x x))))) (hypot.f64 z x)))","(+.f64 (*.f64 1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 5))))) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 y 2) (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 z 2) (pow.f64 x 2)))))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2))) (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3))))))))","(fma.f64 1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 z z) (*.f64 x x)) 5)))) (+.f64 (fma.f64 1/2 (*.f64 (*.f64 y y) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 z z) (*.f64 x x))))) (sqrt.f64 (+.f64 (*.f64 z z) (*.f64 x x)))) (*.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 z z) (*.f64 x x)) 3)))))))","(fma.f64 1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 x x)) 5)))) (fma.f64 1/2 (*.f64 y (*.f64 y (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 x x)))))) (fma.f64 -1/8 (*.f64 (pow.f64 y 4) (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 x x)) 3)))) (hypot.f64 z x))))","(fma.f64 1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 x x)) 5)))) (fma.f64 (pow.f64 y 4) (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 x x)) 3)))) (fma.f64 (*.f64 y y) (*.f64 1/2 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 x x))))) (hypot.f64 z x))))","(fma.f64 1/16 (*.f64 (pow.f64 y 6) (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 z z (*.f64 x x)) 5)))) (fma.f64 (pow.f64 y 4) (*.f64 -1/8 (sqrt.f64 (/.f64 1 (pow.f64 (hypot.f64 z x) 6)))) (fma.f64 (*.f64 y y) (*.f64 1/2 (sqrt.f64 (/.f64 1 (fma.f64 z z (*.f64 x x))))) (hypot.f64 z x))))","y","(+.f64 y (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))","(+.f64 y (*.f64 1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 x x)) y)))","(fma.f64 1/2 (/.f64 (fma.f64 z z (*.f64 x x)) y) y)","(+.f64 y (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3)))))","(+.f64 y (fma.f64 1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 x x)) y) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 x x)) 2) (pow.f64 y 3)))))","(+.f64 (fma.f64 1/2 (/.f64 (fma.f64 z z (*.f64 x x)) y) y) (*.f64 -1/8 (/.f64 (pow.f64 (fma.f64 z z (*.f64 x x)) 2) (pow.f64 y 3))))","(fma.f64 1/2 (/.f64 (fma.f64 z z (*.f64 x x)) y) (fma.f64 -1/8 (/.f64 (pow.f64 (fma.f64 z z (*.f64 x x)) 2) (pow.f64 y 3)) y))","(+.f64 y (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (pow.f64 y 5))) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))))))","(+.f64 y (fma.f64 1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 x x)) y) (fma.f64 1/16 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 x x)) 3) (pow.f64 y 5)) (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 x x)) 2) (pow.f64 y 3))))))","(+.f64 (fma.f64 1/2 (/.f64 (fma.f64 z z (*.f64 x x)) y) y) (fma.f64 -1/8 (/.f64 (pow.f64 (fma.f64 z z (*.f64 x x)) 2) (pow.f64 y 3)) (*.f64 1/16 (/.f64 (pow.f64 (fma.f64 z z (*.f64 x x)) 3) (pow.f64 y 5)))))","(+.f64 (fma.f64 1/2 (/.f64 (fma.f64 z z (*.f64 x x)) y) y) (fma.f64 -1/8 (/.f64 (pow.f64 (fma.f64 z z (*.f64 x x)) 2) (pow.f64 y 3)) (*.f64 (/.f64 1/16 (pow.f64 y 5)) (pow.f64 (fma.f64 z z (*.f64 x x)) 3))))","(+.f64 y (fma.f64 1/16 (/.f64 (pow.f64 (hypot.f64 z x) 6) (pow.f64 y 5)) (*.f64 (/.f64 (fma.f64 z z (*.f64 x x)) y) (+.f64 1/2 (*.f64 -1/8 (/.f64 (fma.f64 z z (*.f64 x x)) (*.f64 y y)))))))","(*.f64 -1 y)","(neg.f64 y)","(+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))","(fma.f64 -1 y (*.f64 -1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 x x)) y)))","(-.f64 (*.f64 -1/2 (/.f64 (fma.f64 z z (*.f64 x x)) y)) y)","(-.f64 (*.f64 (/.f64 -1/2 y) (fma.f64 z z (*.f64 x x))) y)","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))) (+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y))))","(fma.f64 1/8 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 x x)) 2) (pow.f64 y 3)) (fma.f64 -1 y (*.f64 -1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 x x)) y))))","(fma.f64 1/8 (/.f64 (pow.f64 (fma.f64 z z (*.f64 x x)) 2) (pow.f64 y 3)) (-.f64 (*.f64 -1/2 (/.f64 (fma.f64 z z (*.f64 x x)) y)) y))","(fma.f64 -1/2 (/.f64 (fma.f64 z z (*.f64 x x)) y) (fma.f64 1/8 (/.f64 (pow.f64 (fma.f64 z z (*.f64 x x)) 2) (pow.f64 y 3)) (neg.f64 y)))","(-.f64 (*.f64 (/.f64 (fma.f64 z z (*.f64 x x)) y) (+.f64 -1/2 (*.f64 1/8 (/.f64 (fma.f64 z z (*.f64 x x)) (*.f64 y y))))) y)","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 2) (pow.f64 y 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) 3) (pow.f64 y 5))) (+.f64 (*.f64 -1 y) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 z 2) (pow.f64 x 2)) y)))))","(fma.f64 1/8 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 x x)) 2) (pow.f64 y 3)) (fma.f64 -1/16 (/.f64 (pow.f64 (+.f64 (*.f64 z z) (*.f64 x x)) 3) (pow.f64 y 5)) (fma.f64 -1 y (*.f64 -1/2 (/.f64 (+.f64 (*.f64 z z) (*.f64 x x)) y)))))","(fma.f64 1/8 (/.f64 (pow.f64 (fma.f64 z z (*.f64 x x)) 2) (pow.f64 y 3)) (fma.f64 -1/16 (/.f64 (pow.f64 (fma.f64 z z (*.f64 x x)) 3) (pow.f64 y 5)) (-.f64 (*.f64 -1/2 (/.f64 (fma.f64 z z (*.f64 x x)) y)) y)))","(fma.f64 1/8 (/.f64 (pow.f64 (fma.f64 z z (*.f64 x x)) 2) (pow.f64 y 3)) (-.f64 (fma.f64 -1/2 (/.f64 (fma.f64 z z (*.f64 x x)) y) (*.f64 (/.f64 -1/16 (pow.f64 y 5)) (pow.f64 (fma.f64 z z (*.f64 x x)) 3))) y))","(fma.f64 -1/16 (/.f64 (pow.f64 (hypot.f64 z x) 6) (pow.f64 y 5)) (-.f64 (*.f64 (/.f64 (fma.f64 z z (*.f64 x x)) y) (+.f64 -1/2 (*.f64 1/8 (/.f64 (fma.f64 z z (*.f64 x x)) (*.f64 y y))))) y))","(sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(sqrt.f64 (+.f64 (*.f64 y y) (*.f64 x x)))","(hypot.f64 y x)","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))))","(fma.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 y y) (*.f64 x x))))) (sqrt.f64 (+.f64 (*.f64 y y) (*.f64 x x))))","(fma.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 (/.f64 1 (fma.f64 y y (*.f64 x x))))) (hypot.f64 y x))","(fma.f64 (*.f64 z z) (*.f64 1/2 (sqrt.f64 (/.f64 1 (fma.f64 y y (*.f64 x x))))) (hypot.f64 y x))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (pow.f64 z 4))) (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))))","(fma.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 y y) (*.f64 x x))))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 y y) (*.f64 x x)) 3))) (pow.f64 z 4)) (sqrt.f64 (+.f64 (*.f64 y y) (*.f64 x x)))))","(fma.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 (/.f64 1 (fma.f64 y y (*.f64 x x))))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 y y (*.f64 x x)) 3))) (pow.f64 z 4)) (hypot.f64 y x)))","(fma.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 y y (*.f64 x x)) 3))) (*.f64 -1/8 (pow.f64 z 4)) (fma.f64 (*.f64 z z) (*.f64 1/2 (sqrt.f64 (/.f64 1 (fma.f64 y y (*.f64 x x))))) (hypot.f64 y x)))","(fma.f64 (sqrt.f64 (/.f64 1 (pow.f64 (hypot.f64 y x) 6))) (*.f64 -1/8 (pow.f64 z 4)) (fma.f64 (*.f64 z z) (*.f64 1/2 (sqrt.f64 (/.f64 1 (fma.f64 y y (*.f64 x x))))) (hypot.f64 y x)))","(+.f64 (*.f64 1/2 (*.f64 (sqrt.f64 (/.f64 1 (+.f64 (pow.f64 y 2) (pow.f64 x 2)))) (pow.f64 z 2))) (+.f64 (*.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3))) (pow.f64 z 4))) (+.f64 (sqrt.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2))) (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 5))) (pow.f64 z 6))))))","(fma.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 (/.f64 1 (+.f64 (*.f64 y y) (*.f64 x x))))) (+.f64 (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 y y) (*.f64 x x)) 3))) (pow.f64 z 4)) (sqrt.f64 (+.f64 (*.f64 y y) (*.f64 x x)))) (*.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (+.f64 (*.f64 y y) (*.f64 x x)) 5))) (pow.f64 z 6)))))","(fma.f64 1/2 (*.f64 (*.f64 z z) (sqrt.f64 (/.f64 1 (fma.f64 y y (*.f64 x x))))) (fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 y y (*.f64 x x)) 3))) (pow.f64 z 4)) (fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 y y (*.f64 x x)) 5))) (pow.f64 z 6)) (hypot.f64 y x))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 y y (*.f64 x x)) 3))) (pow.f64 z 4)) (fma.f64 (*.f64 z z) (*.f64 1/2 (sqrt.f64 (/.f64 1 (fma.f64 y y (*.f64 x x))))) (fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 y y (*.f64 x x)) 5))) (pow.f64 z 6)) (hypot.f64 y x))))","(fma.f64 -1/8 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (hypot.f64 y x) 6))) (pow.f64 z 4)) (fma.f64 (*.f64 z z) (*.f64 1/2 (sqrt.f64 (/.f64 1 (fma.f64 y y (*.f64 x x))))) (fma.f64 1/16 (*.f64 (sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 y y (*.f64 x x)) 5))) (pow.f64 z 6)) (hypot.f64 y x))))","z","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) z)","(fma.f64 1/2 (/.f64 (+.f64 (*.f64 y y) (*.f64 x x)) z) z)","(fma.f64 1/2 (/.f64 (fma.f64 y y (*.f64 x x)) z) z)","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) z))","(fma.f64 -1/8 (/.f64 (pow.f64 (+.f64 (*.f64 y y) (*.f64 x x)) 2) (pow.f64 z 3)) (fma.f64 1/2 (/.f64 (+.f64 (*.f64 y y) (*.f64 x x)) z) z))","(fma.f64 -1/8 (/.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 2) (pow.f64 z 3)) (fma.f64 1/2 (/.f64 (fma.f64 y y (*.f64 x x)) z) z))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (pow.f64 z 5))) z)))","(fma.f64 -1/8 (/.f64 (pow.f64 (+.f64 (*.f64 y y) (*.f64 x x)) 2) (pow.f64 z 3)) (fma.f64 1/2 (/.f64 (+.f64 (*.f64 y y) (*.f64 x x)) z) (fma.f64 1/16 (/.f64 (pow.f64 (+.f64 (*.f64 y y) (*.f64 x x)) 3) (pow.f64 z 5)) z)))","(fma.f64 -1/8 (/.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 2) (pow.f64 z 3)) (fma.f64 1/2 (/.f64 (fma.f64 y y (*.f64 x x)) z) (fma.f64 1/16 (/.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 3) (pow.f64 z 5)) z)))","(fma.f64 1/2 (/.f64 (fma.f64 y y (*.f64 x x)) z) (fma.f64 -1/8 (/.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 2) (pow.f64 z 3)) (fma.f64 1/16 (/.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 3) (pow.f64 z 5)) z)))","(fma.f64 1/2 (/.f64 (fma.f64 y y (*.f64 x x)) z) (fma.f64 -1/8 (/.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 2) (pow.f64 z 3)) (fma.f64 1/16 (/.f64 (pow.f64 (hypot.f64 y x) 6) (pow.f64 z 5)) z)))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)))","(fma.f64 -1 z (*.f64 -1/2 (/.f64 (+.f64 (*.f64 y y) (*.f64 x x)) z)))","(fma.f64 -1/2 (/.f64 (fma.f64 y y (*.f64 x x)) z) (neg.f64 z))","(-.f64 (*.f64 (/.f64 -1/2 z) (fma.f64 y y (*.f64 x x))) z)","(fma.f64 (/.f64 -1/2 z) (fma.f64 y y (*.f64 x x)) (neg.f64 z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z))))","(fma.f64 -1 z (fma.f64 1/8 (/.f64 (pow.f64 (+.f64 (*.f64 y y) (*.f64 x x)) 2) (pow.f64 z 3)) (*.f64 -1/2 (/.f64 (+.f64 (*.f64 y y) (*.f64 x x)) z))))","(-.f64 (fma.f64 -1/2 (/.f64 (fma.f64 y y (*.f64 x x)) z) (*.f64 1/8 (/.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 2) (pow.f64 z 3)))) z)","(-.f64 (fma.f64 -1/2 (/.f64 (fma.f64 y y (*.f64 x x)) z) (*.f64 (/.f64 1/8 (pow.f64 z 3)) (pow.f64 (fma.f64 y y (*.f64 x x)) 2))) z)","(-.f64 (*.f64 (/.f64 (fma.f64 y y (*.f64 x x)) z) (+.f64 -1/2 (/.f64 (*.f64 1/8 (fma.f64 y y (*.f64 x x))) (*.f64 z z)))) z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 1/8 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 2) (pow.f64 z 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) z)) (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (pow.f64 y 2) (pow.f64 x 2)) 3) (pow.f64 z 5))))))","(fma.f64 -1 z (fma.f64 1/8 (/.f64 (pow.f64 (+.f64 (*.f64 y y) (*.f64 x x)) 2) (pow.f64 z 3)) (fma.f64 -1/2 (/.f64 (+.f64 (*.f64 y y) (*.f64 x x)) z) (*.f64 -1/16 (/.f64 (pow.f64 (+.f64 (*.f64 y y) (*.f64 x x)) 3) (pow.f64 z 5))))))","(-.f64 (fma.f64 1/8 (/.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 2) (pow.f64 z 3)) (fma.f64 -1/2 (/.f64 (fma.f64 y y (*.f64 x x)) z) (*.f64 -1/16 (/.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 3) (pow.f64 z 5))))) z)","(-.f64 (fma.f64 -1/2 (/.f64 (fma.f64 y y (*.f64 x x)) z) (fma.f64 1/8 (/.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 2) (pow.f64 z 3)) (*.f64 -1/16 (/.f64 (pow.f64 (fma.f64 y y (*.f64 x x)) 3) (pow.f64 z 5))))) z)","(-.f64 (*.f64 (/.f64 (fma.f64 y y (*.f64 x x)) z) (+.f64 -1/2 (/.f64 (*.f64 1/8 (fma.f64 y y (*.f64 x x))) (*.f64 z z)))) (fma.f64 1/16 (/.f64 (pow.f64 (hypot.f64 y x) 6) (pow.f64 z 5)) z))"]],"stop":[["node limit",1]],"time":53.7109375,"type":"simplify"},{"compiler":[[1930,1145]],"time":24.22509765625,"type":"eval"},{"alts":[["(hypot.f64 x (hypot.f64 y z))","next",0]],"compiler":[[8,5],[8,5]],"count":[[91,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[90,1],"picked":[1,0]}],"min-error":[0],"time":13.343994140625,"type":"prune"},{"compiler":[[14,5]],"time":3.448974609375,"type":"localize"},{"compiler":[[3,3]],"time":0.1318359375,"type":"eval"},{"alts":[["(hypot.f64 x (hypot.f64 y z))","done",0]],"compiler":[[8,5]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.489013671875,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["z",0,1],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))",0,1],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))",0,1],["(+.f64 (*.f64 x x) (*.f64 y y))",0,1],["(*.f64 x x)",0,1],["(*.f64 y y)",0,1],["(*.f64 z z)",0,1],["(*.f64 z z)",0,1]],"compiler":[[4,3],[4,3],[4,3],[15,9],[14,8],[10,6],[6,4],[6,4],[6,4],[6,4],[30,14]],"count":[[3,1]],"inputs":[["(hypot.f64 x (hypot.f64 y z))","(sqrt.f64 (fma.f64 x x (fma.f64 y y (*.f64 z z))))","(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))"]],"link":["."],"name":["FRP.Yampa.Vector3:vector3Rho from Yampa-0.10.2"],"oracle":[39.89759423361397],"outputs":[["(hypot.f64 x (hypot.f64 y z))"]],"time":27.259033203125,"times":[["x",2.797119140625],["y",3.031005859375],["z",2.828125],["(sqrt.f64 (+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z)))",2.683837890625],["(+.f64 (+.f64 (*.f64 x x) (*.f64 y y)) (*.f64 z z))",2.6259765625],["(+.f64 (*.f64 x x) (*.f64 y y))",2.863037109375],["(*.f64 x x)",2.35791015625],["(*.f64 y y)",2.200927734375],["(*.f64 z z)",2.329833984375],["(*.f64 z z)",2.341064453125]],"type":"regimes"},{"compiler":[[8,5]],"egraph":[[0,6,7,1.4667e-5]],"inputs":[["(hypot.f64 x (hypot.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(hypot.f64 x (hypot.f64 y z))"]],"stop":[["done",1],["saturated",1]],"time":8.95703125,"type":"simplify"},{"time":0.02001953125,"type":"soundness"},{"compiler":[[8,5],[8,5],[8,5]],"remove-preprocessing":[["(sort x y z)"]],"time":8.677978515625,"type":"end"}]
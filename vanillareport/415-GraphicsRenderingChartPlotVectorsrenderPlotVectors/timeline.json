[{"compiler":[[12,9]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09853651490993798,0.10341527522541583],[11,0.7687799381092191,0.13463405007496476,0.09658601181581616],[10,0.7258531395345926,0.19121937546879053,0.08292748499661684],[9,0.6712190322577953,0.2575607914477587,0.07122017629444599],[8,0.5931703075766563,0.35902413353323936,0.047805558890104294],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":26.322998046875,"type":"analyze"},{"outcomes":[["body",256,"invalid",7.905517578125,226],["body",1024,"valid",61.940673828125,700],["body",512,"valid",47.96337890625,784],["body",2048,"valid",0.131103515625,1],["body",256,"valid",236.680419921875,6771]],"time":363.64111328125,"type":"sample"},{"compiler":[[11,8]],"egraph":[[0,2,2,2.25e-6],[6,5811,16,0.025694835],[5,2325,16,0.014651793],[4,512,16,0.004695627],[3,132,22,0.001062127],[2,42,22,0.000342543],[1,19,22,0.000130584],[0,10,26,5.6542e-5]],"inputs":[["0","1"],["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))","(+.f64 y (*.f64 (-.f64 1 y) (-.f64 1 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))","(fma.f64 (-.f64 1 x) (-.f64 1 y) x)","(fma.f64 x y (-.f64 1 y))","(-.f64 (fma.f64 x y 1) y)","(fma.f64 y (+.f64 x -1) 1)","(+.f64 y (*.f64 (-.f64 1 y) (-.f64 1 x)))","(+.f64 y (*.f64 (-.f64 1 x) (-.f64 1 y)))","(fma.f64 (-.f64 1 x) (-.f64 1 y) y)","(fma.f64 x y (-.f64 1 x))","(-.f64 (fma.f64 x y 1) x)"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":49.633056640625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[15,7987,8,0.105284291],[14,7835,8,0.098385083],[13,7622,8,0.088957833],[12,7236,8,0.076508166],[11,7073,8,0.066035458],[10,6975,8,0.055972833],[9,6817,8,0.0478685],[8,6555,8,0.040078416],[7,5834,8,0.031393916],[6,4162,8,0.02150875],[5,1774,8,0.01225725],[4,409,8,0.0037972500000000003],[3,113,11,0.000918166],[2,37,11,0.000296375],[1,16,11,0.000108291],[0,8,13,4.5833e-5]],"inputs":[["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))","(fma.f64 (-.f64 1 x) (-.f64 1 y) x)","(fma.f64 x y (-.f64 1 y))","(-.f64 (fma.f64 x y 1) y)"]],"stop":[["node limit",1]],"time":116.912841796875,"type":"simplify"},{"compiler":[[17,11]],"time":0.39111328125,"type":"eval"},{"alts":[["(-.f64 (fma.f64 x y 1) y)","next",0.0078125],["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))","fresh",15.463400315908315]],"compiler":[[8,5],[11,8],[8,5],[11,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.00390625],"time":1.259033203125,"type":"prune"},{"compiler":[[15,8]],"locations":[["(-.f64 (fma.f64 x y 1) y)",0.0078125,true]],"time":4.196044921875,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 (fma.f64 x y 1) y)","y","-inf",0.31298828125],["(-.f64 (fma.f64 x y 1) y)","y","inf",0.302001953125],["(-.f64 (fma.f64 x y 1) y)","y","0",0.258056640625],["(-.f64 (fma.f64 x y 1) y)","x","-inf",0.363037109375],["(-.f64 (fma.f64 x y 1) y)","x","inf",0.337890625],["(-.f64 (fma.f64 x y 1) y)","x","0",0.3359375]],"time":1.990966796875,"type":"series"},{"count":[[1,37]],"egraph":[[2,1637,8,0.016332791],[1,124,8,0.0021842909999999997],[0,6,8,0.000177541]],"inputs":[["(-.f64 (fma.f64 x y 1) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x y 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x y 1) (*.f64 (neg.f64 y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 x y 1) y) (fma.f64 (neg.f64 y) 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 x y 1) y) (fma.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 x y 1) y) (fma.f64 (neg.f64 (sqrt.f64 y)) (sqrt.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (-.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (+.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 y) (fma.f64 x y 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (fma.f64 x y 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 x y 1) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (fma.f64 x y 1) y)) (pow.f64 (cbrt.f64 (-.f64 (fma.f64 x y 1) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (fma.f64 x y 1) y)) 2) (cbrt.f64 (-.f64 (fma.f64 x y 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (fma.f64 x y 1) y)) (sqrt.f64 (-.f64 (fma.f64 x y 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 x y 1) 3) (pow.f64 y 3)) (/.f64 1 (+.f64 (pow.f64 (fma.f64 x y 1) 2) (*.f64 y (+.f64 y (fma.f64 x y 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 x y 1) 2) (*.f64 y y)) (/.f64 1 (+.f64 y (fma.f64 x y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (fma.f64 x y 1)) (sqrt.f64 y)) (-.f64 (sqrt.f64 (fma.f64 x y 1)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (fma.f64 x y 1) 2) (*.f64 y (+.f64 y (fma.f64 x y 1)))) (-.f64 (pow.f64 (fma.f64 x y 1) 3) (pow.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 y (fma.f64 x y 1)) (-.f64 (pow.f64 (fma.f64 x y 1) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x y 1) 3) (pow.f64 y 3)) (+.f64 (pow.f64 (fma.f64 x y 1) 2) (*.f64 y (+.f64 y (fma.f64 x y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x y 1) 2) (*.f64 y y)) (+.f64 y (fma.f64 x y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x y 1) 3) (pow.f64 y 3))) (neg.f64 (+.f64 (pow.f64 (fma.f64 x y 1) 2) (*.f64 y (+.f64 y (fma.f64 x y 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 x y 1) 2) (*.f64 y y))) (neg.f64 (+.f64 y (fma.f64 x y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 x y 1) 3) (pow.f64 (neg.f64 y) 3)) (+.f64 (pow.f64 (fma.f64 x y 1) 2) (-.f64 (*.f64 (neg.f64 y) (neg.f64 y)) (*.f64 (fma.f64 x y 1) (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x y 1) 2) (*.f64 (neg.f64 y) (neg.f64 y))) (-.f64 (fma.f64 x y 1) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (fma.f64 x y 1) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (fma.f64 x y 1) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (fma.f64 x y 1) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (fma.f64 x y 1) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (fma.f64 x y 1) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (fma.f64 x y 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (fma.f64 x y 1) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (fma.f64 x y 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (fma.f64 x y 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (fma.f64 x y 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x y 1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x y 1)) 2) (cbrt.f64 (fma.f64 x y 1)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x y 1)) (sqrt.f64 (fma.f64 x y 1)) (neg.f64 y))))))"]],"rules":[["egg-rr",37]],"stop":[["node limit",1]],"time":34.505859375,"type":"rewrite"},{"count":[[61,47]],"egraph":[[7,789,171,0.010206417],[6,771,171,0.008212500000000001],[5,663,171,0.006053458],[4,465,171,0.0037330420000000002],[3,230,171,0.00198625],[2,111,171,0.000796167],[1,45,171,0.0003005],[0,17,207,0.000102292]],"inputs":[["(-.f64 1 y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(*.f64 y (-.f64 x 1))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (*.f64 y (-.f64 x 1)))","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x))))","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(*.f64 y x)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(-.f64 (+.f64 1 (*.f64 y x)) y)","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","1","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(*.f64 y (-.f64 x 1))","(*.f64 y (+.f64 x -1))","(-.f64 (*.f64 y x) y)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 y (-.f64 x 1)))","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x))))","(*.f64 y (+.f64 x -1))","(-.f64 (*.f64 y x) y)","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)","(+.f64 1 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))))","(+.f64 1 (-.f64 (*.f64 y x) y))","(-.f64 (fma.f64 y x 1) y)"]],"stop":[["saturated",1]],"time":24.134033203125,"type":"simplify"},{"compiler":[[579,348]],"time":7.613037109375,"type":"eval"},{"alts":[["(+.f64 1 (*.f64 y (-.f64 x 1)))","next",0.015625],["(-.f64 (fma.f64 x y 1) y)","done",0.0078125]],"compiler":[[9,7],[8,5],[9,7]],"count":[[49,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[47,1],"picked":[1,1]}],"min-error":[0],"time":7.72802734375,"type":"prune"},{"compiler":[[20,13]],"locations":[["(*.f64 y (-.f64 x 1))",0.01953125,true]],"time":4.616943359375,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 y (-.f64 x 1))","x","-inf",0.27783203125],["(*.f64 y (-.f64 x 1))","x","inf",0.25],["(*.f64 y (-.f64 x 1))","x","0",0.224853515625],["(*.f64 y (-.f64 x 1))","y","-inf",0.263916015625],["(*.f64 y (-.f64 x 1))","y","inf",0.324951171875],["(*.f64 y (-.f64 x 1))","y","0",0.47900390625]],"time":1.885009765625,"type":"series"},{"count":[[1,17]],"egraph":[[2,1543,7,0.015492874],[1,124,7,0.002060083],[0,6,7,0.000174791]],"inputs":[["(*.f64 y (-.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 -1 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 y (+.f64 x -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) y) (fma.f64 x x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) y) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 (pow.f64 x 3) -1)) (fma.f64 x x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (fma.f64 x x -1)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (+.f64 x -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (+.f64 x -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (+.f64 x -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (+.f64 x -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (+.f64 x -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 y (+.f64 x -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (+.f64 x -1))))))))"]],"rules":[["egg-rr",17]],"stop":[["node limit",1]],"time":32.255126953125,"type":"rewrite"},{"count":[[29,22]],"egraph":[[10,481,74,0.006363791000000001],[9,479,74,0.005288875],[8,445,74,0.004151833000000001],[7,301,74,0.0029979580000000002],[6,155,74,0.001608625],[5,72,74,0.000791833],[4,44,74,0.00046345800000000003],[3,29,74,0.000294125],[2,22,74,0.000189292],[1,12,74,0.000108083],[0,7,74,4.4125e-5]],"inputs":[["(*.f64 -1 y)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(+.f64 (*.f64 y x) (*.f64 -1 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 y)","(neg.f64 y)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(fma.f64 y x (neg.f64 y))","(*.f64 y (+.f64 x -1))","(*.f64 y (+.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(fma.f64 y x (neg.f64 y))","(*.f64 y (+.f64 x -1))","(*.f64 y (+.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(fma.f64 y x (neg.f64 y))","(*.f64 y (+.f64 x -1))","(*.f64 y (+.f64 -1 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(fma.f64 y x (neg.f64 y))","(*.f64 y (+.f64 x -1))","(*.f64 y (+.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(fma.f64 y x (neg.f64 y))","(*.f64 y (+.f64 x -1))","(*.f64 y (+.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(fma.f64 y x (neg.f64 y))","(*.f64 y (+.f64 x -1))","(*.f64 y (+.f64 -1 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 y))","(fma.f64 y x (neg.f64 y))","(*.f64 y (+.f64 x -1))","(*.f64 y (+.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(fma.f64 y x (neg.f64 y))","(*.f64 y (+.f64 x -1))","(*.f64 y (+.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 y))","(fma.f64 y x (neg.f64 y))","(*.f64 y (+.f64 x -1))","(*.f64 y (+.f64 -1 x))"]],"stop":[["saturated",1]],"time":18.40478515625,"type":"simplify"},{"compiler":[[213,156]],"time":3.126220703125,"type":"eval"},{"alts":[["(+.f64 1 (*.f64 y (-.f64 x 1)))","done",0.015625],["(-.f64 (fma.f64 x y 1) y)","done",0.0078125]],"compiler":[[9,7],[8,5]],"count":[[24,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[22,0],"picked":[1,1]}],"min-error":[0],"time":3.125,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))",0.0078125,1],["(-.f64 1 y)",0.0078125,1]],"compiler":[[3,2],[3,2],[11,8],[5,4],[24,16]],"count":[[3,1]],"inputs":[["(+.f64 1 (*.f64 y (-.f64 x 1)))","(-.f64 (fma.f64 x y 1) y)","(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))"]],"link":["."],"name":["Graphics.Rendering.Chart.Plot.Vectors:renderPlotVectors from Chart-1.5.3"],"oracle":[15.467306565908315],"outputs":[["(-.f64 (fma.f64 x y 1) y)"]],"time":11.5087890625,"times":[["x",2.989013671875],["y",2.970947265625],["(+.f64 x (*.f64 (-.f64 1 x) (-.f64 1 y)))",2.369140625],["(-.f64 1 y)",2.47705078125]],"type":"regimes"},{"compiler":[[8,5]],"egraph":[[4,17,8,0.000100625],[3,16,8,8.0375e-5],[2,14,8,5.9625e-5],[1,10,8,3.9708e-5],[0,6,8,1.9958e-5]],"inputs":[["(-.f64 (fma.f64 x y 1) y)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (fma.f64 x y 1) y)"]],"stop":[["done",1],["saturated",1]],"time":8.189208984375,"type":"simplify"},{"time":0.010986328125,"type":"soundness"},{"compiler":[[8,5]],"remove-preprocessing":[[]],"time":7.969970703125,"type":"end"}]
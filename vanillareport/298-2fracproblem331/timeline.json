[{"compiler":[[11,9]],"method":["search"],"sampling":[[12,0.9980475902557373,0.0014641284942626953,0.00048828125],[11,0.9965834617614746,0.0029282569885253906,0.00048828125],[10,0.9936552047729492,0.005856513977050781,0.00048828125],[9,0.9877986907958984,0.011713027954101563,0.00048828125],[8,0.9760856628417969,0.023426055908203125,0.00048828125],[7,0.9526596069335938,0.04685211181640625,0.00048828125],[6,0.9058074951171875,0.0937042236328125,0.00048828125],[5,0.812103271484375,0.187408447265625,0.00048828125],[4,0.62469482421875,0.37481689453125,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.94384765625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.031005859375,1],["body",1024,"valid",40.64501953125,449],["body",512,"valid",129.10400390625,2083],["body",256,"valid",191.781005859375,5724]],"time":369.416015625,"type":"sample"},{"compiler":[[10,8]],"egraph":[[0,1,1,1.416e-6],[11,235,13,0.0038726669999999998],[10,233,13,0.0033673749999999997],[9,207,13,0.00283425],[8,171,13,0.002229375],[7,125,13,0.0016655419999999999],[6,91,13,0.001046459],[5,54,13,0.000630959],[4,36,13,0.00036075],[3,26,13,0.000245875],[2,18,13,0.00015587499999999998],[1,12,13,9.4792e-5],[0,7,13,4.7375e-5]],"inputs":[["0"],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","(-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 x))","(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))","(-.f64 (/.f64 -1 x) (/.f64 -1 (+.f64 1 x)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":26.794189453125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[11,235,13,0.003594668],[10,233,13,0.003089709],[9,207,13,0.002567959],[8,171,13,0.0019737089999999997],[7,125,13,0.001414751],[6,91,13,0.0009752929999999999],[5,54,13,0.0005791679999999999],[4,36,13,0.00035500099999999997],[3,26,13,0.000234751],[2,18,13,0.000146334],[1,12,13,8.6751e-5],[0,7,13,4.1042e-5]],"inputs":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","(-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 x))","(+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))","(-.f64 (/.f64 -1 x) (/.f64 -1 (+.f64 1 x)))"]],"stop":[["saturated",1]],"time":13.94482421875,"type":"simplify"},{"compiler":[[19,15]],"time":0.386962890625,"type":"eval"},{"alts":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","next",13.616993713721426]],"compiler":[[10,8],[10,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[13.616993713721426],"time":0.83203125,"type":"prune"},{"compiler":[[23,17]],"locations":[["(/.f64 1 (+.f64 x 1))",0.0078125,true],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))",3.5988454218030497,true]],"time":5.56298828125,"type":"localize"},{"count":[[2,24]],"series":[["(/.f64 1 (+.f64 x 1))","x","-inf",0.158935546875],["(/.f64 1 (+.f64 x 1))","x","inf",0.214111328125],["(/.f64 1 (+.f64 x 1))","x","0",0.1650390625],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","x","-inf",0.302001953125],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","x","inf",0.381103515625],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","x","0",0.340087890625]],"time":1.649169921875,"type":"series"},{"count":[[2,67]],"egraph":[[2,2604,20,0.020985959999999998],[1,168,20,0.003319501],[0,7,20,0.000209417]],"inputs":[["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","(/.f64 1 (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 1 x)) (*.f64 (/.f64 -1 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)) (fma.f64 (/.f64 -1 x) 1 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x -2)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)) (fma.f64 (neg.f64 (pow.f64 x -1/2)) (pow.f64 x -1/2) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1 x) (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))) (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))) 2) (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))) (sqrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (+.f64 1 x)) (/.f64 (/.f64 1 (+.f64 1 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 1 x) -3) (pow.f64 x -3)) (/.f64 1 (+.f64 (pow.f64 (+.f64 1 x) -2) (+.f64 (pow.f64 x -2) (/.f64 (/.f64 1 (+.f64 1 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 x -2)) (/.f64 1 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1 x) -1/2) (pow.f64 x -1/2)) (-.f64 (pow.f64 (+.f64 1 x) -1/2) (pow.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 x (+.f64 1 x)) (-.f64 x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (+.f64 1 x) -2) (+.f64 (pow.f64 x -2) (/.f64 (/.f64 1 (+.f64 1 x)) x))) (-.f64 (pow.f64 (+.f64 1 x) -3) (pow.f64 x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 x)) (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (+.f64 1 x)) (*.f64 x (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 1 x) -3) (pow.f64 x -3)) (+.f64 (pow.f64 (+.f64 1 x) -2) (+.f64 (pow.f64 x -2) (/.f64 (/.f64 1 (+.f64 1 x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 x -2)) (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 x (+.f64 1 x))) (neg.f64 (*.f64 x (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 1 x) -3) (pow.f64 x -3))) (neg.f64 (+.f64 (pow.f64 (+.f64 1 x) -2) (+.f64 (pow.f64 x -2) (/.f64 (/.f64 1 (+.f64 1 x)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 x -2))) (neg.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 x) (*.f64 (+.f64 -1 (neg.f64 x)) 1)) (*.f64 (+.f64 -1 (neg.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 x) (*.f64 (+.f64 1 x) -1)) (*.f64 (+.f64 1 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 -1 (neg.f64 x)) (*.f64 (+.f64 -1 (neg.f64 x)) -1)) (*.f64 (+.f64 -1 (neg.f64 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 x) -3) (pow.f64 (/.f64 -1 x) 3)) (+.f64 (pow.f64 (+.f64 1 x) -2) (-.f64 (*.f64 (/.f64 -1 x) (/.f64 -1 x)) (*.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 1 x) -2) (*.f64 (/.f64 -1 x) (/.f64 -1 x))) (-.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 x (+.f64 1 x)) (+.f64 1 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (+.f64 1 x)) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2)) (/.f64 1 (cbrt.f64 (+.f64 1 x))) (/.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 1 x) -1/2) (pow.f64 (+.f64 1 x) -1/2) (/.f64 -1 x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 1 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 1 x) -2)) (/.f64 1 (cbrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 1 x) -1/2) (pow.f64 (+.f64 1 x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (+.f64 -1 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 1 x)) 2) -1) (pow.f64 (cbrt.f64 (+.f64 1 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (+.f64 1 x)) -1) (pow.f64 (sqrt.f64 (+.f64 1 x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 (pow.f64 x 3))) (fma.f64 x x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -1)) (+.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (+.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 1 x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log1p.f64 x)))))))"]],"rules":[["egg-rr",23],["egg-rr",44]],"stop":[["node limit",1]],"time":42.037841796875,"type":"rewrite"},{"count":[[91,96]],"egraph":[[5,7643,363,0.030794665000000002],[4,2517,363,0.018269874000000002],[3,731,364,0.0057339570000000005],[2,241,366,0.001784624],[1,98,372,0.000619332],[0,37,380,0.000186041]],"inputs":[["(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2)))","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(+.f64 1 (/.f64 -1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (neg.f64 x)) (/.f64 1 x))","(+.f64 (-.f64 1 x) (/.f64 -1 x))","(+.f64 1 (-.f64 (/.f64 -1 x) x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(-.f64 (+.f64 1 (fma.f64 -1 x (*.f64 x x))) (/.f64 1 x))","(+.f64 (-.f64 (*.f64 x x) x) (-.f64 1 (/.f64 1 x)))","(+.f64 1 (fma.f64 x (+.f64 -1 x) (/.f64 -1 x)))","(/.f64 -1 (pow.f64 x 2))","(/.f64 -1 (*.f64 x x))","(/.f64 (/.f64 -1 x) x)","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 (/.f64 -1 x) x))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 (/.f64 -1 x) x)) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 (/.f64 -1 x) x) (/.f64 1 (pow.f64 x 4))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 5))) (-.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 (/.f64 -1 x) x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (*.f64 x x)))))","(+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 (/.f64 -1 x) x) (/.f64 1 (pow.f64 x 4)))) (/.f64 1 (pow.f64 x 5)))","(/.f64 -1 (pow.f64 x 2))","(/.f64 -1 (*.f64 x x))","(/.f64 (/.f64 -1 x) x)","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 (/.f64 -1 x) x))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 (/.f64 -1 x) x)) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 (/.f64 -1 x) x) (/.f64 1 (pow.f64 x 4))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 5))) (-.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 (/.f64 -1 x) x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (*.f64 x x)))))","(+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 (/.f64 -1 x) x) (/.f64 1 (pow.f64 x 4)))) (/.f64 1 (pow.f64 x 5)))","1","(+.f64 1 (*.f64 -1 x))","(+.f64 1 (neg.f64 x))","(-.f64 1 x)","(+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2)))","(+.f64 1 (fma.f64 -1 x (*.f64 x x)))","(+.f64 1 (-.f64 (*.f64 x x) x))","(-.f64 (fma.f64 x x 1) x)","(fma.f64 x (+.f64 -1 x) 1)","(+.f64 (*.f64 -1 (pow.f64 x 3)) (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))))","(fma.f64 -1 (pow.f64 x 3) (+.f64 1 (fma.f64 -1 x (*.f64 x x))))","(-.f64 (+.f64 1 (-.f64 (*.f64 x x) x)) (pow.f64 x 3))","(fma.f64 x (+.f64 -1 x) (-.f64 1 (pow.f64 x 3)))","(fma.f64 x (-.f64 x (fma.f64 x x 1)) 1)","(*.f64 (fma.f64 x x 1) (-.f64 1 x))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 x) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 x) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 x) (/.f64 (/.f64 -1 x) x))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (/.f64 1 (*.f64 x x))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 (/.f64 -1 x) x)))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 x) (/.f64 (/.f64 -1 x) x)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (*.f64 x x))) (/.f64 1 (pow.f64 x 4))))","(+.f64 (/.f64 1 x) (+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 (/.f64 -1 x) x)) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (/.f64 1 x) (+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 (/.f64 -1 x) x) (/.f64 1 (pow.f64 x 4)))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 x) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 x) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 x) (/.f64 (/.f64 -1 x) x))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (/.f64 1 (pow.f64 x 2)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (/.f64 1 (*.f64 x x))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 (/.f64 -1 x) x)))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 x) (/.f64 (/.f64 -1 x) x)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 x)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (+.f64 (/.f64 1 x) (/.f64 -1 (*.f64 x x))) (/.f64 1 (pow.f64 x 4))))","(+.f64 (/.f64 1 x) (+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 (/.f64 -1 x) x)) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (/.f64 1 x) (+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 (/.f64 -1 x) x) (/.f64 1 (pow.f64 x 4)))))"]],"stop":[["node limit",1]],"time":47.05908203125,"type":"simplify"},{"compiler":[[1386,1082]],"time":19.989013671875,"type":"eval"},{"alts":[["(/.f64 (-.f64 x (+.f64 1 x)) (*.f64 x (+.f64 1 x)))","next",13.369514557241146],["(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","fresh",31.15297495040591],["(/.f64 (/.f64 -1 x) x)","fresh",30.44711623759725],["(/.f64 (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 x -2)) (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 x)))","fresh",27.49168880061003],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","done",13.616993713721426]],"compiler":[[12,8],[12,10],[6,4],[20,16],[10,8],[12,8],[12,10],[6,4],[20,16]],"count":[[97,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[96,4],"picked":[1,1]}],"min-error":[0.0234375],"time":17.867919921875,"type":"prune"},{"compiler":[[27,17]],"locations":[["(*.f64 x (+.f64 1 x))",0.0078125,true],["(/.f64 (-.f64 x (+.f64 1 x)) (*.f64 x (+.f64 1 x)))",0.03125,true],["(-.f64 x (+.f64 1 x))",3.3944541641266985,true]],"time":6.3310546875,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 x (+.f64 1 x))","x","-inf",0.405029296875],["(*.f64 x (+.f64 1 x))","x","inf",0.343017578125],["(*.f64 x (+.f64 1 x))","x","0",0.225830078125],["(/.f64 (-.f64 x (+.f64 1 x)) (*.f64 x (+.f64 1 x)))","x","-inf",0.352783203125],["(/.f64 (-.f64 x (+.f64 1 x)) (*.f64 x (+.f64 1 x)))","x","inf",0.18994140625],["(/.f64 (-.f64 x (+.f64 1 x)) (*.f64 x (+.f64 1 x)))","x","0",0.217041015625],["(-.f64 x (+.f64 1 x))","x","-inf",0.135009765625],["(-.f64 x (+.f64 1 x))","x","inf",0.137939453125],["(-.f64 x (+.f64 1 x))","x","0",0.2060546875]],"time":2.328125,"type":"series"},{"count":[[3,254]],"egraph":[[2,2749,25,0.024929207999999998],[1,167,30,0.0033624579999999996],[0,7,30,0.00020575]],"inputs":[["(-.f64 x (+.f64 1 x))","(/.f64 (-.f64 x (+.f64 1 x)) (*.f64 x (+.f64 1 x)))","(*.f64 x (+.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (+.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (+.f64 (neg.f64 x) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (+.f64 x 1)) (fma.f64 (+.f64 (neg.f64 x) -1) 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (+.f64 x 1)) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (+.f64 x 1)) (+.f64 (+.f64 (neg.f64 x) -1) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (neg.f64 x) -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1) (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x -1) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 x (+.f64 x 1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 x (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 x (+.f64 x 1))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 x (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) (cbrt.f64 (-.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) (sqrt.f64 (-.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 3) (pow.f64 (+.f64 x 1) 3)) (/.f64 1 (fma.f64 x x (*.f64 (+.f64 x 1) (+.f64 x (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (+.f64 x 1) 2)) (/.f64 1 (+.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x 1))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (+.f64 x 1) (+.f64 x (+.f64 x 1)))) (-.f64 (pow.f64 x 3) (pow.f64 (+.f64 x 1) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (+.f64 x 1)) (-.f64 (*.f64 x x) (pow.f64 (+.f64 x 1) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) (pow.f64 (+.f64 x 1) 3)) (fma.f64 x x (*.f64 (+.f64 x 1) (+.f64 x (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (+.f64 x 1) 2)) (+.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 3) (pow.f64 (+.f64 x 1) 3))) (neg.f64 (fma.f64 x x (*.f64 (+.f64 x 1) (+.f64 x (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (+.f64 x 1) 2))) (neg.f64 (+.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x -1) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (+.f64 x -1) 2) (fma.f64 x x (*.f64 (+.f64 x -1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (+.f64 (neg.f64 x) -1) 3)) (fma.f64 x x (-.f64 (pow.f64 (+.f64 (neg.f64 x) -1) 2) (neg.f64 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x -1) 2) (*.f64 x x)) (+.f64 (+.f64 x -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (+.f64 (neg.f64 x) -1) 2)) (-.f64 x (+.f64 (neg.f64 x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 x (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (-.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (+.f64 x 1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (+.f64 x 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x x (*.f64 (+.f64 x 1) (+.f64 x (+.f64 x 1)))) (-.f64 (pow.f64 x 3) (pow.f64 (+.f64 x 1) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x (+.f64 x 1)) (-.f64 (*.f64 x x) (pow.f64 (+.f64 x 1) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (-.f64 x (+.f64 x 1)))) 2)) (cbrt.f64 (log.f64 (-.f64 x (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (-.f64 x (+.f64 x 1))))) (sqrt.f64 (log.f64 (-.f64 x (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 x (+.f64 x 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 x (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (+.f64 x -1)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (+.f64 (neg.f64 x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 (neg.f64 x) -1)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 x (+.f64 x 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 x (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 x (+.f64 x 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (-.f64 x (+.f64 x 1)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (-.f64 x (+.f64 x 1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 x (+.f64 x 1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 x (+.f64 x 1))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (+.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (+.f64 (neg.f64 x) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (+.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (+.f64 (neg.f64 x) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (+.f64 x 1)) (fma.f64 (+.f64 (neg.f64 x) -1) 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (+.f64 x 1)) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (+.f64 x 1)) (+.f64 (+.f64 (neg.f64 x) -1) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 (neg.f64 x) -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x -1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x -1) (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x -1) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x -1) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (+.f64 x 1)) 1 (fma.f64 (+.f64 (neg.f64 x) -1) 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (+.f64 x 1)) 1 (fma.f64 (neg.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (+.f64 x 1)) 1 (+.f64 (+.f64 (neg.f64 x) -1) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) (fma.f64 (+.f64 (neg.f64 x) -1) 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) (+.f64 (+.f64 (neg.f64 x) -1) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) (cbrt.f64 (-.f64 x (+.f64 x 1))) (fma.f64 (+.f64 (neg.f64 x) -1) 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) (cbrt.f64 (-.f64 x (+.f64 x 1))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) (cbrt.f64 (-.f64 x (+.f64 x 1))) (+.f64 (+.f64 (neg.f64 x) -1) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (+.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 (+.f64 (neg.f64 x) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (+.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 (+.f64 (neg.f64 x) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 1) (+.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 1) (*.f64 (+.f64 (neg.f64 x) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (neg.f64 (cbrt.f64 (+.f64 x 1))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) (sqrt.f64 (-.f64 x (+.f64 x 1))) (fma.f64 (+.f64 (neg.f64 x) -1) 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) (sqrt.f64 (-.f64 x (+.f64 x 1))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) (sqrt.f64 (-.f64 x (+.f64 x 1))) (+.f64 (+.f64 (neg.f64 x) -1) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (+.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 (+.f64 (neg.f64 x) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1) (+.f64 (neg.f64 x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1) (*.f64 (+.f64 (neg.f64 x) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 (+.f64 x 1))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (+.f64 x 1) 3)) (/.f64 1 (fma.f64 x x (*.f64 (+.f64 x 1) (+.f64 x (+.f64 x 1))))) (fma.f64 (+.f64 (neg.f64 x) -1) 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (+.f64 x 1) 3)) (/.f64 1 (fma.f64 x x (*.f64 (+.f64 x 1) (+.f64 x (+.f64 x 1))))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (+.f64 x 1) 3)) (/.f64 1 (fma.f64 x x (*.f64 (+.f64 x 1) (+.f64 x (+.f64 x 1))))) (+.f64 (+.f64 (neg.f64 x) -1) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (+.f64 x 1) 2)) (/.f64 1 (+.f64 x (+.f64 x 1))) (fma.f64 (+.f64 (neg.f64 x) -1) 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (+.f64 x 1) 2)) (/.f64 1 (+.f64 x (+.f64 x 1))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (+.f64 x 1) 2)) (/.f64 1 (+.f64 x (+.f64 x 1))) (+.f64 (+.f64 (neg.f64 x) -1) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 (neg.f64 x) -1)) 2) (cbrt.f64 (+.f64 (neg.f64 x) -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (cbrt.f64 (+.f64 x -1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (cbrt.f64 (+.f64 x -1)) (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (cbrt.f64 (+.f64 x -1)) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (cbrt.f64 (+.f64 x -1)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 (neg.f64 x) -1)) (sqrt.f64 (+.f64 (neg.f64 x) -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 (+.f64 x -1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 (+.f64 x -1)) (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 (+.f64 x -1)) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1)) (sqrt.f64 (+.f64 x -1)) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (+.f64 x 1))) (sqrt.f64 (+.f64 x 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (+.f64 x 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) 1) (-.f64 (sqrt.f64 x) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) 1) (-.f64 (sqrt.f64 x) 1) (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) 1) (-.f64 (sqrt.f64 x) 1) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) 1) (-.f64 (sqrt.f64 x) 1) (*.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x 1))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x 1))) (fma.f64 (+.f64 (neg.f64 x) -1) 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x 1))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x 1))) (fma.f64 (neg.f64 (cbrt.f64 (+.f64 x 1))) (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x 1))) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x 1))) (+.f64 (+.f64 (neg.f64 x) -1) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2)) (cbrt.f64 (+.f64 x 1)) x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 (+.f64 x 1)) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x -1) (fma.f64 x x x)) (/.f64 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (+.f64 x 1)) (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) (*.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) (/.f64 1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))) (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))) 2) (cbrt.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) (*.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) (/.f64 1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))) (sqrt.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 x (+.f64 x 1))) (/.f64 1 (neg.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x 1)) (-.f64 1 (/.f64 (+.f64 x 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (/.f64 (-.f64 x (+.f64 x 1)) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x x)) (-.f64 x (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (/.f64 (+.f64 x 1) x)) (/.f64 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) 1) (/.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) 1) (/.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) x) (/.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x x)) -2) (/.f64 (-.f64 x (+.f64 x 1)) (cbrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x x) -1/2) (/.f64 (-.f64 x (+.f64 x 1)) (hypot.f64 x (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) x) (/.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) (+.f64 x 1)) (/.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) (+.f64 x 1)) (/.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) (pow.f64 (cbrt.f64 (fma.f64 x x x)) 2)) (cbrt.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) (pow.f64 (cbrt.f64 (fma.f64 x x x)) 2)) (/.f64 (sqrt.f64 (-.f64 x (+.f64 x 1))) (cbrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) 2) (hypot.f64 x (sqrt.f64 x))) (/.f64 (cbrt.f64 (-.f64 x (+.f64 x 1))) (hypot.f64 x (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (/.f64 (+.f64 x 1) x)) (+.f64 1 (pow.f64 x 3))) (fma.f64 x (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (/.f64 (+.f64 x 1) x)) (-.f64 1 (*.f64 x x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x x x) (-.f64 x (+.f64 x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 x (+.f64 x 1)) 3) (pow.f64 (fma.f64 x x x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (fma.f64 x x x) (-.f64 x (+.f64 x 1))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)))) 2)) (cbrt.f64 (log.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))) (sqrt.f64 (log.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x (+.f64 x 1)) (neg.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 x (+.f64 x 1)) 3) (pow.f64 (fma.f64 x x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (fma.f64 x x x) (-.f64 x (+.f64 x 1)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (fma.f64 x x x)) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (+.f64 x 1)) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x 1)) 1 (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) (/.f64 x (+.f64 x 1)) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (+.f64 x 1))) 2) (cbrt.f64 (/.f64 1 (+.f64 x 1))) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 1 (+.f64 x 1))) (sqrt.f64 (/.f64 1 (+.f64 x 1))) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x x x)) -2) (/.f64 x (cbrt.f64 (fma.f64 x x x))) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 x x x) -1/2) (/.f64 x (hypot.f64 x (sqrt.f64 x))) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) -1) (/.f64 (cbrt.f64 x) (+.f64 x 1)) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x -1/2) (/.f64 (sqrt.f64 x) (+.f64 x 1)) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) (+.f64 x 1)) (pow.f64 x -1/2) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (fma.f64 x x x)) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (fma.f64 x x x)) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (+.f64 x 1)) (/.f64 (cbrt.f64 x) x) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (fma.f64 x x x)) 2)) (/.f64 (cbrt.f64 x) (cbrt.f64 (fma.f64 x x x))) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 x x x)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (fma.f64 x x x))) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (hypot.f64 x (sqrt.f64 x))) (/.f64 (cbrt.f64 x) (hypot.f64 x (sqrt.f64 x))) (neg.f64 (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 x) (hypot.f64 x (sqrt.f64 x))) (/.f64 (sqrt.f64 x) (hypot.f64 x (sqrt.f64 x))) (neg.f64 (/.f64 1 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x x x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x x x)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 x 6)) (fma.f64 x x (-.f64 (pow.f64 x 4) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 x 4)) (-.f64 x (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 x 3)) x) (fma.f64 x (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1 (*.f64 x x)) x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 1 (pow.f64 x 3))) (fma.f64 x (+.f64 x -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 1 (*.f64 x x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 x (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 x x x))) 2)) (cbrt.f64 (log.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 x x x)))) (sqrt.f64 (log.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x x x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) x) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 x x x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x x x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 x (sqrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x x x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 1) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) 1) (*.f64 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (pow.f64 x 3/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1) (*.f64 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 x) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3/2) (sqrt.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 5) (cbrt.f64 x) x)))))"]],"rules":[["egg-rr",56],["egg-rr",77],["egg-rr",121]],"stop":[["node limit",1]],"time":56.226806640625,"type":"rewrite"},{"count":[[290,274]],"egraph":[[5,6142,265,0.025079374],[4,1509,265,0.012260458],[3,468,265,0.003644625],[2,174,265,0.0012705],[1,79,267,0.0004996670000000001],[0,32,288,0.000159833]],"inputs":[["-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","x","(+.f64 (pow.f64 x 2) x)","(+.f64 (pow.f64 x 2) x)","(+.f64 (pow.f64 x 2) x)","(pow.f64 x 2)","(+.f64 (pow.f64 x 2) x)","(+.f64 (pow.f64 x 2) x)","(+.f64 (pow.f64 x 2) x)","(pow.f64 x 2)","(+.f64 (pow.f64 x 2) x)","(+.f64 (pow.f64 x 2) x)","(+.f64 (pow.f64 x 2) x)"]],"method":["egg-herbie"],"outputs":[["-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","-1","(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(+.f64 1 (/.f64 -1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(+.f64 1 (-.f64 (neg.f64 x) (/.f64 1 x)))","(+.f64 (-.f64 1 x) (/.f64 -1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(-.f64 (+.f64 1 (fma.f64 -1 x (*.f64 x x))) (/.f64 1 x))","(+.f64 (-.f64 (*.f64 x x) x) (-.f64 1 (/.f64 1 x)))","(+.f64 1 (fma.f64 x (+.f64 -1 x) (/.f64 -1 x)))","(-.f64 (/.f64 -1 x) (-.f64 x (fma.f64 x x 1)))","(+.f64 1 (-.f64 (fma.f64 x x (/.f64 -1 x)) x))","(/.f64 -1 (pow.f64 x 2))","(/.f64 -1 (*.f64 x x))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 (/.f64 1 x) x))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))) (/.f64 -1 (pow.f64 x 4)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 5))) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 4)))))","(/.f64 -1 (pow.f64 x 2))","(/.f64 -1 (*.f64 x x))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 (/.f64 1 x) x))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))) (/.f64 -1 (pow.f64 x 4)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 5))) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x))) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 4))))","(+.f64 (/.f64 -1 (*.f64 x x)) (+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (pow.f64 x 4)))))","x","(+.f64 (pow.f64 x 2) x)","(+.f64 x (*.f64 x x))","(fma.f64 x x x)","(+.f64 (pow.f64 x 2) x)","(+.f64 x (*.f64 x x))","(fma.f64 x x x)","(+.f64 (pow.f64 x 2) x)","(+.f64 x (*.f64 x x))","(fma.f64 x x x)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 x 2) x)","(+.f64 x (*.f64 x x))","(fma.f64 x x x)","(+.f64 (pow.f64 x 2) x)","(+.f64 x (*.f64 x x))","(fma.f64 x x x)","(+.f64 (pow.f64 x 2) x)","(+.f64 x (*.f64 x x))","(fma.f64 x x x)","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (pow.f64 x 2) x)","(+.f64 x (*.f64 x x))","(fma.f64 x x x)","(+.f64 (pow.f64 x 2) x)","(+.f64 x (*.f64 x x))","(fma.f64 x x x)","(+.f64 (pow.f64 x 2) x)","(+.f64 x (*.f64 x x))","(fma.f64 x x x)"]],"stop":[["node limit",1]],"time":42.47705078125,"type":"simplify"},{"compiler":[[4837,3115]],"time":56.623046875,"type":"eval"},{"alts":[["(/.f64 -1 (*.f64 x (+.f64 1 x)))","next",0.3952610809074827],["(/.f64 (/.f64 -1 x) x)","fresh",30.44711623759725],["(/.f64 (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 x -2)) (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 x)))","fresh",27.49168880061003],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))","done",13.616993713721426]],"compiler":[[8,6],[6,4],[20,16],[10,8],[8,6],[6,4],[20,16]],"count":[[279,4]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[274,1],"picked":[1,0]}],"min-error":[0.0234375],"time":91.20703125,"type":"prune"},{"compiler":[[19,13]],"locations":[["(*.f64 x (+.f64 1 x))",0.0078125,false],["(/.f64 -1 (*.f64 x (+.f64 1 x)))",0.39916733090748263,true]],"time":4.56298828125,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 -1 (*.f64 x (+.f64 1 x)))","x","-inf",0.16796875],["(/.f64 -1 (*.f64 x (+.f64 1 x)))","x","inf",0.18701171875],["(/.f64 -1 (*.f64 x (+.f64 1 x)))","x","0",0.216064453125]],"time":0.617919921875,"type":"series"},{"count":[[1,24]],"egraph":[[2,1897,10,0.018420458],[1,148,10,0.002561958],[0,7,10,0.000225625]],"inputs":[["(/.f64 -1 (*.f64 x (+.f64 1 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -1 (+.f64 x (*.f64 x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (+.f64 x (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1 (+.f64 x (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 x (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) (pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2) (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 -1) (hypot.f64 (sqrt.f64 x) x)) (/.f64 (sqrt.f64 -1) (hypot.f64 (sqrt.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x (*.f64 x x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 x) (/.f64 1 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 x) (+.f64 1 (pow.f64 x 3))) (+.f64 1 (-.f64 (*.f64 x x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 -1 x) (-.f64 1 (*.f64 x x))) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (+.f64 x (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -1 (+.f64 x (*.f64 x x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 -1) (hypot.f64 (sqrt.f64 x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (neg.f64 (+.f64 x 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x 1) (/.f64 -1 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (+.f64 x (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1 (pow.f64 (+.f64 x (*.f64 x x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -1 (+.f64 x (*.f64 x x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (/.f64 -1 x)) (log1p.f64 x)))))))"]],"rules":[["egg-rr",24]],"stop":[["node limit",1]],"time":35.708984375,"type":"rewrite"},{"count":[[36,39]],"egraph":[[5,5999,199,0.025146957999999997],[4,1472,199,0.012264167],[3,456,199,0.003627126],[2,168,199,0.001270209],[1,77,201,0.0005140839999999999],[0,31,204,0.000175167]],"inputs":[["(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(+.f64 1 (/.f64 -1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (neg.f64 x)) (/.f64 1 x))","(+.f64 (-.f64 1 x) (/.f64 -1 x))","(-.f64 (-.f64 1 x) (/.f64 1 x))","(+.f64 1 (-.f64 (/.f64 -1 x) x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(-.f64 (+.f64 1 (fma.f64 -1 x (*.f64 x x))) (/.f64 1 x))","(+.f64 (-.f64 (*.f64 x x) x) (-.f64 1 (/.f64 1 x)))","(+.f64 1 (fma.f64 x (+.f64 -1 x) (/.f64 -1 x)))","(+.f64 1 (-.f64 (fma.f64 x x (/.f64 -1 x)) x))","(/.f64 -1 (pow.f64 x 2))","(/.f64 -1 (*.f64 x x))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (*.f64 x x)))))","(/.f64 -1 (pow.f64 x 2))","(/.f64 -1 (*.f64 x x))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (*.f64 x x)))))"]],"stop":[["node limit",1]],"time":38.93603515625,"type":"simplify"},{"compiler":[[1072,603]],"time":13.64794921875,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) (pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2))","next",0.8185399872025549],["(/.f64 (/.f64 -1 x) x)","fresh",30.44711623759725],["(*.f64 (/.f64 (/.f64 -1 x) (+.f64 1 (pow.f64 x 3))) (+.f64 1 (-.f64 (*.f64 x x) x)))","fresh",24.380621193896175],["(/.f64 -1 (*.f64 x (+.f64 1 x)))","done",0.3952610809074827],["(/.f64 (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 x -2)) (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 x)))","fresh",27.49168880061003]],"compiler":[[20,12],[6,4],[18,13],[8,6],[20,16],[20,12],[6,4],[18,13],[20,16]],"count":[[103,5]],"kept":[{"done":[1,0],"fresh":[2,2],"new":[99,2],"picked":[1,1]}],"min-error":[0],"time":20.0810546875,"type":"prune"},{"compiler":[[56,24]],"locations":[["(*.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) (pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2))",0.21875,true],["(/.f64 -1 (+.f64 x (*.f64 x x)))",0.39916733090748263,true],["(pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2)",0.41634750976844204,true],["(cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x))))",17.449670044978692,true]],"time":10.48291015625,"type":"localize"},{"count":[[4,24]],"series":[["(*.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) (pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2))","x","-inf",0.180908203125],["(*.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) (pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2))","x","inf",0.18896484375],["(*.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) (pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2))","x","0",0.22509765625],["(/.f64 -1 (+.f64 x (*.f64 x x)))","x","-inf",0.169921875],["(/.f64 -1 (+.f64 x (*.f64 x x)))","x","inf",0.195068359375],["(/.f64 -1 (+.f64 x (*.f64 x x)))","x","0",0.1591796875],["(pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2)","x","-inf",0.515869140625],["(pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2)","x","inf",0.802978515625],["(pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2)","x","0",0.553955078125],["(cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x))))","x","-inf",0.44189453125],["(cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x))))","x","inf",0.364013671875],["(cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x))))","x","0",0.7099609375]],"time":4.695068359375,"type":"series"},{"count":[[4,101]],"egraph":[[2,2490,39,0.021675458],[1,216,39,0.003552458],[0,10,47,0.000305]],"inputs":[["(cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x))))","(pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2)","(/.f64 -1 (+.f64 x (*.f64 x x)))","(*.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) (pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (/.f64 1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (cbrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 2) (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 1/6) (pow.f64 (/.f64 -1 (fma.f64 x x x)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 -1 1/3) (pow.f64 (/.f64 1 (fma.f64 x x x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 -1 (fma.f64 x x x))) 1/3) (pow.f64 (sqrt.f64 (/.f64 -1 (fma.f64 x x x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (cbrt.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (*.f64 (fma.f64 x x x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (neg.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (neg.f64 (cbrt.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 (fma.f64 x x x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (fma.f64 x x x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (cbrt.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 -1 (fma.f64 x x x))) (pow.f64 (/.f64 -1 (fma.f64 x x x)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 1/6) (sqrt.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 2)) (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) (cbrt.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) -1) (cbrt.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 1 (pow.f64 (fma.f64 x x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -1 (fma.f64 x x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (fma.f64 x x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))) (cbrt.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 -1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 4)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 2) (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 -1 (fma.f64 x x x))) (sqrt.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 1/6) (*.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 1/6) (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (+.f64 (pow.f64 x 3) (pow.f64 x 6))) (fma.f64 x x (-.f64 (pow.f64 x 4) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (-.f64 (*.f64 x x) (pow.f64 x 4))) (-.f64 x (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 4))) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))) 2)) (cbrt.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))) (pow.f64 (/.f64 -1 (fma.f64 x x x)) 1/6)) (pow.f64 (/.f64 -1 (fma.f64 x x x)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (fma.f64 x x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 -1 (fma.f64 x x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (fma.f64 x x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 x x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 -1 (fma.f64 x x x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 -1 (fma.f64 x x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (fma.f64 x x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (neg.f64 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (*.f64 (fma.f64 x x x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (neg.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (fma.f64 x x x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (fma.f64 x x x) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (hypot.f64 x (sqrt.f64 x))) (hypot.f64 x (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))) (cbrt.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (+.f64 x 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2)))) (cbrt.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))) -1) (cbrt.f64 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 -1 (fma.f64 x x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 -1 (fma.f64 x x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 -1 (fma.f64 x x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (fma.f64 x x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x x) -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 1 (fma.f64 x x x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1 (pow.f64 (fma.f64 x x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 -1 (fma.f64 x x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 -1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 -1 (fma.f64 x x x))))))))"]],"rules":[["egg-rr",25],["egg-rr",29],["egg-rr",19],["egg-rr",28]],"stop":[["node limit",1]],"time":49.73193359375,"type":"rewrite"},{"count":[[125,102]],"egraph":[[5,5999,398,0.025324416000000002],[4,1472,398,0.012342125],[3,456,398,0.003667666],[2,168,398,0.001317166],[1,77,402,0.000508458],[0,31,408,0.000169875]],"inputs":[["(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(/.f64 -1 (pow.f64 x 2))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(+.f64 1 (/.f64 -1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (neg.f64 x)) (/.f64 1 x))","(+.f64 (-.f64 1 x) (/.f64 -1 x))","(-.f64 (-.f64 1 x) (/.f64 1 x))","(+.f64 1 (-.f64 (/.f64 -1 x) x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(-.f64 (+.f64 1 (fma.f64 -1 x (*.f64 x x))) (/.f64 1 x))","(+.f64 (-.f64 (*.f64 x x) x) (-.f64 1 (/.f64 1 x)))","(+.f64 1 (fma.f64 x (+.f64 -1 x) (/.f64 -1 x)))","(+.f64 1 (-.f64 (fma.f64 x x (/.f64 -1 x)) x))","(/.f64 -1 (pow.f64 x 2))","(/.f64 -1 (*.f64 x x))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (*.f64 x x)))))","(/.f64 -1 (pow.f64 x 2))","(/.f64 -1 (*.f64 x x))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (*.f64 x x)))))","(/.f64 -1 x)","(-.f64 1 (/.f64 1 x))","(+.f64 1 (/.f64 -1 x))","(-.f64 (+.f64 1 (*.f64 -1 x)) (/.f64 1 x))","(-.f64 (+.f64 1 (neg.f64 x)) (/.f64 1 x))","(+.f64 (-.f64 1 x) (/.f64 -1 x))","(-.f64 (-.f64 1 x) (/.f64 1 x))","(+.f64 1 (-.f64 (/.f64 -1 x) x))","(-.f64 (+.f64 1 (+.f64 (*.f64 -1 x) (pow.f64 x 2))) (/.f64 1 x))","(-.f64 (+.f64 1 (fma.f64 -1 x (*.f64 x x))) (/.f64 1 x))","(+.f64 (-.f64 (*.f64 x x) x) (-.f64 1 (/.f64 1 x)))","(+.f64 1 (fma.f64 x (+.f64 -1 x) (/.f64 -1 x)))","(+.f64 1 (-.f64 (fma.f64 x x (/.f64 -1 x)) x))","(/.f64 -1 (pow.f64 x 2))","(/.f64 -1 (*.f64 x x))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (*.f64 x x)))))","(/.f64 -1 (pow.f64 x 2))","(/.f64 -1 (*.f64 x x))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 -1 (*.f64 x x)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4))))","(+.f64 (-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 4))) (/.f64 -1 (*.f64 x x)))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 1 (pow.f64 x 3))) (+.f64 (/.f64 1 (pow.f64 x 4)) (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1 (pow.f64 x 5)) (-.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (-.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 1 (pow.f64 x 5)) (+.f64 (/.f64 -1 (*.f64 x x)) (/.f64 -1 (pow.f64 x 4)))))","(+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (/.f64 -1 (pow.f64 x 4)) (+.f64 (/.f64 1 (pow.f64 x 5)) (/.f64 -1 (*.f64 x x)))))"]],"stop":[["node limit",1]],"time":42.460205078125,"type":"simplify"},{"compiler":[[3995,2275]],"time":39.789794921875,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) (pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2))","done",0.8185399872025549],["(/.f64 (/.f64 -1 (+.f64 x 1)) x)","fresh",0.06640625],["(*.f64 (/.f64 (/.f64 -1 x) (+.f64 1 (pow.f64 x 3))) (+.f64 1 (-.f64 (*.f64 x x) x)))","fresh",24.380621193896175],["(/.f64 -1 (*.f64 x (+.f64 1 x)))","done",0.3952610809074827],["(/.f64 (/.f64 -1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))) (cbrt.f64 (fma.f64 x x x)))","fresh",18.709357143883054]],"compiler":[[20,12],[8,6],[18,13],[8,6],[16,9]],"count":[[179,5]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[174,2],"picked":[1,1]}],"min-error":[0],"time":37.84521484375,"type":"prune"},{"accuracy":[0.06640625],"baseline":[0.06640625],"branch":[["x",0.06640625,1],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))",0.06640625,1]],"compiler":[[2,1],[10,8],[121,82]],"count":[[10,1]],"inputs":[["(/.f64 (/.f64 -1 (+.f64 x 1)) x)","(/.f64 (/.f64 -1 (cbrt.f64 (pow.f64 (fma.f64 x x x) 2))) (cbrt.f64 (fma.f64 x x x)))","(*.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) (pow.f64 (cbrt.f64 (/.f64 -1 (+.f64 x (*.f64 x x)))) 2))","(*.f64 (/.f64 (/.f64 -1 x) (+.f64 1 (pow.f64 x 3))) (+.f64 1 (-.f64 (*.f64 x x) x)))","(/.f64 -1 (*.f64 x (+.f64 1 x)))","(/.f64 (-.f64 x (+.f64 1 x)) (*.f64 x (+.f64 1 x)))","(-.f64 (/.f64 1 (pow.f64 x 3)) (/.f64 1 (pow.f64 x 2)))","(/.f64 (/.f64 -1 x) x)","(/.f64 (-.f64 (pow.f64 (+.f64 1 x) -2) (pow.f64 x -2)) (+.f64 (/.f64 1 (+.f64 1 x)) (/.f64 1 x)))","(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))"]],"link":["."],"name":["2frac (problem 3.3.1)"],"oracle":[62.812608239700566],"outputs":[["(/.f64 (/.f64 -1 (+.f64 x 1)) x)"]],"time":10.31591796875,"times":[["x",4.669189453125],["(-.f64 (/.f64 1 (+.f64 x 1)) (/.f64 1 x))",3.39111328125]],"type":"regimes"},{"compiler":[[8,6]],"egraph":[[1,10,10,3.0832999999999994e-5],[0,7,10,2.0666e-5]],"inputs":[["(/.f64 (/.f64 -1 (+.f64 x 1)) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 -1 (+.f64 x 1)) x)"]],"stop":[["fuel",1],["saturated",1]],"time":8.259033203125,"type":"simplify"},{"time":0.005859375,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":8.0341796875,"type":"end"}]
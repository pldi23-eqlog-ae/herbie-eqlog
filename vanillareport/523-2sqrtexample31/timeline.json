[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.4992678165435791,0.0009760856628417969,0.4997560977935791],[11,0.4987797737121582,0.0019521713256835938,0.4992680549621582],[10,0.4978036880493164,0.0039043426513671875,0.4982919692993164],[9,0.4958515167236328,0.007808685302734375,0.4963397979736328],[8,0.4919471740722656,0.01561737060546875,0.4924354553222656],[7,0.48413848876953125,0.0312347412109375,0.48462677001953125],[6,0.4685211181640625,0.062469482421875,0.4690093994140625],[5,0.437286376953125,0.12493896484375,0.437774658203125],[4,0.37481689453125,0.2498779296875,0.37530517578125],[3,0.2498779296875,0.499755859375,0.2503662109375],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.5078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.1611328125,5],["body",1024,"valid",187.159423828125,2014],["body",512,"valid",64.227783203125,1020],["body",2048,"valid",29.399658203125,235],["body",256,"valid",173.122802734375,4987]],"time":462.257080078125,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,1,1,1.083e-6],[11,232,11,0.0034681670000000003],[10,230,11,0.002973667],[9,204,11,0.002464959],[8,168,11,0.0018844590000000002],[7,122,11,0.0013446250000000001],[6,86,11,0.000915959],[5,49,11,0.000524709],[4,32,11,0.00030991700000000005],[3,23,11,0.00020429200000000002],[2,16,11,0.000125625],[1,12,11,7.8125e-5],[0,7,11,4.1709e-5]],"inputs":[["0"],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":26.011962890625,"type":"preprocess"},{"count":[[1,1]],"egraph":[[11,232,11,0.003455291],[10,230,11,0.002961332],[9,204,11,0.002452957],[8,168,11,0.001870291],[7,122,11,0.001334166],[6,86,11,0.000908208],[5,49,11,0.000516416],[4,32,11,0.00030341600000000004],[3,23,11,0.000198208],[2,16,11,0.000121125],[1,12,11,7.3916e-5],[0,7,11,3.8e-5]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))"]],"stop":[["saturated",1]],"time":13.7919921875,"type":"simplify"},{"compiler":[[8,6]],"time":0.22998046875,"type":"eval"},{"alts":[["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","next",29.550838072395354]],"compiler":[[8,6],[8,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[29.550838072395354],"time":0.68701171875,"type":"prune"},{"compiler":[[19,12]],"locations":[["(sqrt.f64 (+.f64 x 1))",0.0078125,true],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",3.109577381821928,true]],"time":4.76220703125,"type":"localize"},{"count":[[2,5]],"series":[["(sqrt.f64 (+.f64 x 1))","x","-inf",0.280029296875],["(sqrt.f64 (+.f64 x 1))","x","inf",0.2841796875],["(sqrt.f64 (+.f64 x 1))","x","0",0.18017578125],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","-inf",0.6640625],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","inf",1.135009765625],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","0",0.47705078125]],"time":3.101806640625,"type":"series"},{"count":[[2,58]],"egraph":[[2,2111,17,0.018553416],[1,153,17,0.002879916],[0,7,17,0.0001975]],"inputs":[["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","(sqrt.f64 (+.f64 x 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2)) (/.f64 1 (+.f64 x (+.f64 1 (+.f64 x (sqrt.f64 (*.f64 (+.f64 x 1) x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (-.f64 1 x)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 x 1/4)) (-.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (+.f64 1 (+.f64 x (sqrt.f64 (*.f64 (+.f64 x 1) x))))) (-.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2)) (+.f64 x (+.f64 1 (+.f64 x (sqrt.f64 (*.f64 (+.f64 x 1) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (-.f64 1 x)) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2))) (neg.f64 (+.f64 x (+.f64 1 (+.f64 x (sqrt.f64 (*.f64 (+.f64 x 1) x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x (-.f64 1 x))) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 (neg.f64 (sqrt.f64 x)) 3)) (+.f64 (+.f64 x 1) (-.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x 1) (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x)))) (-.f64 (sqrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 (+.f64 x 1) 1/4) (neg.f64 (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 (+.f64 x 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (sqrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 (+.f64 x 1) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2)) (sqrt.f64 (cbrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) 2) 1/2) (pow.f64 (cbrt.f64 (+.f64 x 1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 x x -1)) (sqrt.f64 (-.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (+.f64 1 (pow.f64 x 3))) (sqrt.f64 (fma.f64 x x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x 1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (+.f64 x 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x 1) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x 1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x 1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 x) 1/2))))))"]],"rules":[["egg-rr",23],["egg-rr",35]],"stop":[["node limit",1]],"time":38.657958984375,"type":"rewrite"},{"count":[[63,65]],"egraph":[[10,6079,31,0.054462208],[9,5082,31,0.040705916],[8,4543,31,0.03122375],[7,4244,31,0.023588292],[6,4016,31,0.017040458],[5,2373,31,0.010767458],[4,745,31,0.005077417],[3,300,32,0.00184375],[2,105,38,0.0007819579999999999],[1,47,38,0.000316041],[0,18,40,0.000100125]],"inputs":[["1","1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["1","1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(fma.f64 -1/8 (*.f64 x x) (fma.f64 1/2 x 1))","(fma.f64 1/2 x (fma.f64 x (*.f64 x -1/8) 1))","(fma.f64 x (fma.f64 x -1/8 1/2) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))","(fma.f64 -1/8 (*.f64 x x) (+.f64 (fma.f64 1/2 x 1) (*.f64 1/16 (pow.f64 x 3))))","(fma.f64 -1/8 (*.f64 x x) (fma.f64 1/2 x (fma.f64 1/16 (pow.f64 x 3) 1)))","(fma.f64 x (*.f64 x -1/8) (fma.f64 1/2 x (fma.f64 1/16 (pow.f64 x 3) 1)))","(fma.f64 x (fma.f64 x -1/8 1/2) (fma.f64 1/16 (pow.f64 x 3) 1))","(fma.f64 x (+.f64 1/2 (*.f64 x (fma.f64 x 1/16 -1/8))) 1)"]],"stop":[["node limit",1]],"time":66.4970703125,"type":"simplify"},{"compiler":[[829,549]],"time":11.213134765625,"type":"eval"},{"alts":[["(/.f64 (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 (neg.f64 (sqrt.f64 x)) 3)) (+.f64 (+.f64 x 1) (-.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x))))))","fresh",29.981880526151706],["(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))","fresh",29.600764056795583],["(fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (neg.f64 (sqrt.f64 x)))","fresh",29.489796988024803],["(/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","next",28.90355374487625],["1","fresh",30.722987394225004],["(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))","fresh",29.730372265194344]],"compiler":[[33,20],[19,13],[14,11],[14,10],[2,2],[18,11],[33,20],[19,13],[14,11],[14,10],[2,2],[18,11]],"count":[[66,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[65,6],"picked":[1,0]}],"min-error":[27.9418965962272],"time":12.0830078125,"type":"prune"},{"compiler":[[40,25]],"locations":[["(sqrt.f64 (+.f64 x 1))",0.0078125,false],["(+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",0.01171875,true],["(/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))",0.06640625,true],["(+.f64 x (-.f64 1 x))",2.421819938661927,true]],"time":9.9619140625,"type":"localize"},{"count":[[3,14]],"series":[["(+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","-inf",0.406982421875],["(+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","inf",0.365966796875],["(+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","x","0",0.200927734375],["(/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","x","-inf",2.074951171875],["(/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","x","inf",1.034912109375],["(/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","x","0",0.6259765625],["(+.f64 x (-.f64 1 x))","x","-inf",0.133056640625],["(+.f64 x (-.f64 1 x))","x","inf",0.162109375],["(+.f64 x (-.f64 1 x))","x","0",0.1640625]],"time":5.281005859375,"type":"series"},{"count":[[3,303]],"egraph":[[2,3628,29,0.028420208000000002],[1,236,29,0.004665583],[0,10,38,0.000274958]],"inputs":[["(+.f64 x (-.f64 1 x))","(/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","(+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 x 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 x (-.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (+.f64 (+.f64 x -1) x)) (/.f64 (pow.f64 (-.f64 1 x) 2) (+.f64 (+.f64 x -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (sqrt.f64 (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 1 x) 3)) (/.f64 1 (fma.f64 (-.f64 1 x) (-.f64 (-.f64 1 x) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 1 x) 2)) (/.f64 1 (+.f64 (+.f64 x -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (-.f64 1 x) (-.f64 (-.f64 1 x) x) (*.f64 x x)) (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 1 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (+.f64 x -1) x) (-.f64 (*.f64 x x) (pow.f64 (-.f64 1 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 1 x) 3)) (fma.f64 (-.f64 1 x) (-.f64 (-.f64 1 x) x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 1 x) 3)) (+.f64 (pow.f64 (-.f64 1 x) 2) (-.f64 (*.f64 x x) (*.f64 x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 1 x) 2)) (+.f64 (+.f64 x -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 1 x) 3))) (neg.f64 (fma.f64 (-.f64 1 x) (-.f64 (-.f64 1 x) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 1 x) 2))) (neg.f64 (+.f64 (+.f64 x -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x 1) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (+.f64 x 1) 2) (fma.f64 x x (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 x 1) 2) (*.f64 x x)) (+.f64 (+.f64 x 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 1 x) 2) (*.f64 x x)) (-.f64 (-.f64 1 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x (-.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (-.f64 1 x) (-.f64 (-.f64 1 x) x) (*.f64 x x)) (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 1 x) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (+.f64 x -1) x) (-.f64 (*.f64 x x) (pow.f64 (-.f64 1 x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 x 1))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (+.f64 x 1)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 x 1))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 1 x))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (-.f64 1 x)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 1 x))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 x 1)) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x 1))) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 x 1)) (/.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 x 1))) (/.f64 1 (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (-.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (-.f64 x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (-.f64 1 x)) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (-.f64 1 x)) (fma.f64 -1 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x (-.f64 1 x)) (fma.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 x) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (-.f64 1 x)) 1 (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (-.f64 1 x)) 1 (fma.f64 -1 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (-.f64 1 x)) 1 (fma.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1) 1 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 (+.f64 x 1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 -1 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (fma.f64 -1 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (fma.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (+.f64 x (-.f64 1 x))) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (+.f64 x (-.f64 1 x))) (fma.f64 -1 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (+.f64 x (-.f64 1 x))) (fma.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (*.f64 (cbrt.f64 (sqrt.f64 x)) (sqrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) 1) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (sqrt.f64 (+.f64 x 1))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2)) (cbrt.f64 (+.f64 x 1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 x)) (pow.f64 (cbrt.f64 (-.f64 1 x)) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 x)) 2) (cbrt.f64 (-.f64 1 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 1/4) (*.f64 (pow.f64 x 1/4) (sqrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (sqrt.f64 (+.f64 x (-.f64 1 x))) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (sqrt.f64 (+.f64 x (-.f64 1 x))) (fma.f64 -1 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (sqrt.f64 (+.f64 x (-.f64 1 x))) (fma.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/4) (*.f64 (pow.f64 (+.f64 x 1) 1/4) (sqrt.f64 (+.f64 x 1))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 x)) (sqrt.f64 (-.f64 1 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 x 3)) (/.f64 1 (+.f64 1 (fma.f64 x x x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 1 x) 3)) (/.f64 1 (fma.f64 (-.f64 1 x) (-.f64 (-.f64 1 x) x) (*.f64 x x))) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 1 x) 3)) (/.f64 1 (fma.f64 (-.f64 1 x) (-.f64 (-.f64 1 x) x) (*.f64 x x))) (fma.f64 -1 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 1 x) 3)) (/.f64 1 (fma.f64 (-.f64 1 x) (-.f64 (-.f64 1 x) x) (*.f64 x x))) (fma.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 x 3)) (/.f64 1 (-.f64 (fma.f64 x x 1) x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (*.f64 x x)) (/.f64 1 (+.f64 x 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 1 x) 2)) (/.f64 1 (+.f64 (+.f64 x -1) x)) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 1 x) 2)) (/.f64 1 (+.f64 (+.f64 x -1) x)) (fma.f64 -1 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 1 x) 2)) (/.f64 1 (+.f64 (+.f64 x -1) x)) (fma.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (*.f64 x x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x -1) (/.f64 1 (+.f64 x -1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (+.f64 x 1) 1/4) 3) (pow.f64 (+.f64 x 1) 1/4) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 x 1/4) 3) (pow.f64 x 1/4) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (*.f64 x x)) (+.f64 1 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (*.f64 x x)) (fma.f64 x x -1)) (+.f64 x -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 x) (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (+.f64 x 1)) (cbrt.f64 (+.f64 x 1))) (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (neg.f64 x))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 x 1)) (*.f64 -1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x 1) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (/.f64 x (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (-.f64 1 x)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (*.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (*.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (+.f64 x (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) 1) (/.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) 1) (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (/.f64 (+.f64 x (-.f64 1 x)) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (/.f64 (+.f64 x (-.f64 1 x)) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (/.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 x 1/4)) (-.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x (-.f64 1 x)) (+.f64 x (-.f64 1 x))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2))) (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 3) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 1 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x (-.f64 1 x)) (neg.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (sqrt.f64 (+.f64 x 1))) (exp.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 x 1)))) (exp.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (sqrt.f64 (+.f64 x 1))) (+.f64 1 (expm1.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 x 1)))) (+.f64 1 (expm1.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 3) (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 x 1)) (*.f64 -1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (-.f64 1 x)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (-.f64 1 x)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x (-.f64 1 x)) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1)) 1 (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1)) 1 (*.f64 -1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1)) 1 (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1)) 1 (*.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (*.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (*.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (*.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (*.f64 -1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (*.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 2) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1)) (*.f64 -1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (*.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (*.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (*.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (sqrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 (+.f64 x 1) 1/4) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 (+.f64 x 1) 1/4) (*.f64 -1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 (+.f64 x 1) 1/4) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 (+.f64 x 1) 1/4) (*.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (+.f64 x (-.f64 1 x))) (/.f64 1 (neg.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (+.f64 x (-.f64 1 x)) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (+.f64 x (-.f64 1 x)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (+.f64 x (-.f64 1 x)) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 1 (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 1 (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 1 (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (sqrt.f64 (cbrt.f64 (+.f64 x 1))) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (sqrt.f64 (cbrt.f64 (+.f64 x 1))) (*.f64 -1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (sqrt.f64 (cbrt.f64 (+.f64 x 1))) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (sqrt.f64 (cbrt.f64 (+.f64 x 1))) (*.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 x 1)) (*.f64 -1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 (cbrt.f64 x)) (cbrt.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 x 1)) (*.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) 1) (/.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) 1) (/.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) 1) (/.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) 1) (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) 1) (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) 1) (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (/.f64 (+.f64 x (-.f64 1 x)) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (/.f64 (+.f64 x (-.f64 1 x)) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (/.f64 (+.f64 x (-.f64 1 x)) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (cbrt.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))) (/.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (/.f64 (+.f64 x (-.f64 1 x)) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (/.f64 (+.f64 x (-.f64 1 x)) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (/.f64 (+.f64 x (-.f64 1 x)) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (/.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (/.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (/.f64 (cbrt.f64 (+.f64 x (-.f64 1 x))) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 x 1/4)) (-.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 x 1/4)) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 x 1/4)) (-.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 x 1/4)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 x 1/4)) (-.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 x 1/4)) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x (-.f64 1 x)) (+.f64 x (-.f64 1 x))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x (-.f64 1 x)) (+.f64 x (-.f64 1 x))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x (-.f64 1 x)) (+.f64 x (-.f64 1 x))) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2))) (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))) (fma.f64 (neg.f64 (sqrt.f64 x)) 1 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2))) (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2))) (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 x 1) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (/.f64 x (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (-.f64 1 x)) (/.f64 1 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2)) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4)) (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2)) (/.f64 1 (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))) (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (-.f64 1 x)) (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (+.f64 x (-.f64 1 x)) 2)) (/.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (cbrt.f64 (+.f64 x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (+.f64 x (-.f64 1 x))) (/.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (sqrt.f64 (+.f64 x (-.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x (-.f64 1 x))) (neg.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 1 x) 3)) (*.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (-.f64 1 x) (-.f64 (-.f64 1 x) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2)) (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2)) (+.f64 x (-.f64 (+.f64 x 1) (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 1 x) 2)) (*.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 (+.f64 x -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2))) (neg.f64 (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (+.f64 x 1)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (pow.f64 x 1/4) (pow.f64 (+.f64 x 1) 1/4)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (+.f64 x (-.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))) (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 x 1)))) (exp.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (sqrt.f64 (+.f64 x 1))) (+.f64 1 (expm1.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 x 1)))) (+.f64 1 (expm1.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 x))) (exp.f64 (sqrt.f64 (+.f64 x 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (sqrt.f64 x)) (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 x))) (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 x 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 x) (sqrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1)) 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) 1 (sqrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 x)) (cbrt.f64 x) (sqrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x)) (sqrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 1/4) (pow.f64 x 1/4) (sqrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x 1) 1/4) (pow.f64 (+.f64 x 1) 1/4) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (+.f64 x 1) 2))) (sqrt.f64 (cbrt.f64 (+.f64 x 1))) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (*.f64 x x))) (sqrt.f64 (cbrt.f64 x)) (sqrt.f64 (+.f64 x 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (sqrt.f64 x) (sqrt.f64 (+.f64 x 1)))))))"]],"rules":[["egg-rr",56],["egg-rr",143],["egg-rr",104]],"stop":[["node limit",1]],"time":67.60791015625,"type":"rewrite"},{"count":[[317,304]],"egraph":[[1,4,14,4.8459000000000005e-5],[0,1,14,2.9417e-5]],"inputs":[["1","1","1","1","1","1","1","1","1","1","1","1","1","1"]],"method":["egg-herbie"],"outputs":[["1","1","1","1","1","1","1","1","1","1","1","1","1","1"]],"stop":[["saturated",1]],"time":14.407958984375,"type":"simplify"},{"compiler":[[6999,4436]],"time":79.18310546875,"type":"eval"},{"alts":[["(fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x)))","fresh",29.489796988024803],["(*.f64 (/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2))) (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))))","fresh",28.89183499487625],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","fresh",29.550838072395354],["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","next",0.19759750976844204]],"compiler":[[14,11],[27,19],[8,6],[10,8],[14,11],[27,19],[8,6],[10,8]],"count":[[339,4]],"kept":[{"done":[0,0],"fresh":[5,0],"new":[333,4],"picked":[1,0]}],"min-error":[0.1484375],"time":128.552001953125,"type":"prune"},{"compiler":[[28,18]],"locations":[["(sqrt.f64 (+.f64 x 1))",0.0078125,false],["(+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",0.01171875,false],["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))",0.19921875,true]],"time":6.7529296875,"type":"localize"},{"count":[[1,1]],"series":[["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","x","-inf",0.593017578125],["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","x","inf",0.392822265625],["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","x","0",0.2451171875]],"time":1.274169921875,"type":"series"},{"count":[[1,22]],"egraph":[[2,2466,14,0.021883666],[1,178,14,0.0033831240000000004],[0,8,14,0.000225208]],"inputs":[["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)) (/.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2) (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 2) -1) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1) (pow.f64 (sqrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (+.f64 1 (+.f64 x (-.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 (-.f64 x x))) (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))))"]],"rules":[["egg-rr",22]],"stop":[["node limit",1]],"time":40.267822265625,"type":"rewrite"},{"count":[[23,23]],"egraph":[[1,4,1,4.5751e-5],[0,1,1,2.8209e-5]],"inputs":[["1"]],"method":["egg-herbie"],"outputs":[["1"]],"stop":[["saturated",1]],"time":10.549072265625,"type":"simplify"},{"compiler":[[1579,1134]],"time":21.0859375,"type":"eval"},{"alts":[["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","done",0.19759750976844204],["(*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (+.f64 1 (+.f64 x (-.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))))","fresh",14.36328125],["(/.f64 1 (*.f64 (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2)) (/.f64 1 (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))))))","fresh",9.00802652391327],["(*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)) (/.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))","fresh",0.27056508791597816],["(sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))","next",0.18978500976844204],["(pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2) 2)","fresh",0.3060150390737681],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","fresh",29.550838072395354]],"compiler":[[10,8],[25,19],[25,19],[22,17],[11,9],[12,10],[8,6],[25,19],[25,19],[22,17],[11,9],[12,10],[8,6]],"count":[[112,7]],"kept":[{"done":[0,0],"fresh":[3,1],"new":[108,5],"picked":[1,1]}],"min-error":[0.015625],"time":24.703125,"type":"prune"},{"compiler":[[39,26]],"locations":[["(sqrt.f64 (+.f64 1 x))",0.0078125,true],["(+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))",0.01171875,true],["(sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))",0.07421875,true],["(pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)",0.3135338379159782,true]],"time":9.529052734375,"type":"localize"},{"count":[[4,7]],"series":[["(sqrt.f64 (+.f64 1 x))","x","-inf",0.19091796875],["(sqrt.f64 (+.f64 1 x))","x","inf",0.202880859375],["(sqrt.f64 (+.f64 1 x))","x","0",0.14306640625],["(+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))","x","-inf",0.244873046875],["(+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))","x","inf",0.242919921875],["(+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))","x","0",0.160888671875],["(sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))","x","-inf",0.5771484375],["(sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))","x","inf",0.35498046875],["(sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))","x","0",0.233154296875],["(pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)","x","-inf",2.198974609375],["(pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)","x","inf",1.445068359375],["(pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)","x","0",1.0048828125]],"time":7.159912109375,"type":"series"},{"count":[[4,190]],"egraph":[[2,2745,45,0.0259715],[1,216,45,0.004021541],[0,10,45,0.000293]],"inputs":[["(pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)","(sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))","(+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))","(sqrt.f64 (+.f64 1 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -2) (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -4)) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2) (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -4) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -3/2) (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2) 5/6) (/.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -4 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1) (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2) (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1) (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1) (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2) (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1) (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1) (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2) (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1) (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1) (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2) (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1) (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -2) (/.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2) (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -4) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -6) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 2) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 x 1/4)) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 -1) (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/2) (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))) 2)) (cbrt.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))) (sqrt.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -1/2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 x 1/4))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 -2 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (+.f64 1 x) (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (/.f64 x (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 2) (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 x 1/4)) (hypot.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 x 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2)) (/.f64 1 (-.f64 (+.f64 (+.f64 1 x) x) (sqrt.f64 (*.f64 x (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x (-.f64 1 x)) (/.f64 1 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (+.f64 (+.f64 1 x) x) (sqrt.f64 (*.f64 x (+.f64 1 x)))) (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) (+.f64 x (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2)) (-.f64 (+.f64 (+.f64 1 x) x) (sqrt.f64 (*.f64 x (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2)) (+.f64 x (-.f64 (+.f64 1 x) (sqrt.f64 (*.f64 x (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (-.f64 1 x)) (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (neg.f64 (-.f64 (+.f64 (+.f64 1 x) x) (sqrt.f64 (*.f64 x (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x (-.f64 1 x))) (neg.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 x (+.f64 1 x)) (-.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 x 1/4)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (+.f64 (+.f64 1 x) x) (sqrt.f64 (*.f64 x (+.f64 1 x)))) (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) (+.f64 x (-.f64 1 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 2)) (cbrt.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))) (sqrt.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 1 x)))) (exp.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (sqrt.f64 (+.f64 1 x))) (+.f64 1 (expm1.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 1 x)))) (+.f64 1 (expm1.f64 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 x))) (exp.f64 (sqrt.f64 (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (sqrt.f64 x)) (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (sqrt.f64 x))) (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 x 1/4))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 x) (sqrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 1 x)) 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) 1 (sqrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 1 x) 1/6) (cbrt.f64 (+.f64 1 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 1/6) (cbrt.f64 x) (sqrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 x 1/6) (sqrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 x)) (pow.f64 (+.f64 1 x) 1/6) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 (+.f64 1 x) 1/4) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 1/4) (pow.f64 x 1/4) (sqrt.f64 (+.f64 1 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (+.f64 1 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (+.f64 1 x))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (+.f64 1 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (+.f64 1 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 1 x) 1/6) (cbrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 x)) (pow.f64 (+.f64 1 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 1 x) 1/4) (pow.f64 (+.f64 1 x) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 1 (*.f64 x x))) (sqrt.f64 (-.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (hypot.f64 1 (pow.f64 x 3/2)) (sqrt.f64 (fma.f64 x (-.f64 x 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 1 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (*.f64 1/2 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 x)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 x) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/2) (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 1/2 (log1p.f64 x))) 2)) (cbrt.f64 (*.f64 1/2 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (*.f64 1/2 (log1p.f64 x)))) (sqrt.f64 (*.f64 1/2 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (+.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (+.f64 1 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 x) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 1/2 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (log1p.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 1/2 (log1p.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/4 (log1p.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3/2 (log1p.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 x) 1) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log1p.f64 x) 1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 1/2 (log1p.f64 x)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 1/2 (log1p.f64 x)) 3) 1/3))))))"]],"rules":[["egg-rr",40],["egg-rr",55],["egg-rr",48],["egg-rr",47]],"stop":[["node limit",1]],"time":57.319091796875,"type":"rewrite"},{"count":[[197,197]],"egraph":[[10,6079,33,0.05468125],[9,5082,33,0.040825167],[8,4543,33,0.031333708],[7,4244,33,0.023696791],[6,4016,33,0.017091666],[5,2373,33,0.010819665999999999],[4,745,33,0.005083374],[3,300,34,0.001862166],[2,105,40,0.000792874],[1,47,40,0.000319249],[0,18,42,0.000102833]],"inputs":[["1","1","1","1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))"]],"method":["egg-herbie"],"outputs":[["1","1","1","1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) 1))","(fma.f64 -1/8 (*.f64 x x) (fma.f64 1/2 x 1))","(fma.f64 1/2 x (fma.f64 x (*.f64 x -1/8) 1))","(fma.f64 x (fma.f64 x -1/8 1/2) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (+.f64 1 (*.f64 1/16 (pow.f64 x 3)))))","(fma.f64 -1/8 (*.f64 x x) (+.f64 (fma.f64 1/2 x 1) (*.f64 1/16 (pow.f64 x 3))))","(fma.f64 -1/8 (*.f64 x x) (fma.f64 1/2 x (fma.f64 1/16 (pow.f64 x 3) 1)))","(fma.f64 x (*.f64 x -1/8) (fma.f64 1/2 x (fma.f64 1/16 (pow.f64 x 3) 1)))","(fma.f64 x (fma.f64 x -1/8 1/2) (fma.f64 1/16 (pow.f64 x 3) 1))","(fma.f64 x (+.f64 1/2 (*.f64 x (fma.f64 x 1/16 -1/8))) 1)"]],"stop":[["node limit",1]],"time":68.307861328125,"type":"simplify"},{"compiler":[[3065,2298]],"time":42.739013671875,"type":"eval"},{"alts":[["(/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","done",0.19759750976844204],["(*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (+.f64 1 (+.f64 x (-.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))))","fresh",14.36328125],["(/.f64 1 (*.f64 (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2)) (/.f64 1 (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))))))","fresh",9.00802652391327],["(*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)) (/.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))","fresh",0.27056508791597816],["(pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 2) -1/2)","fresh",0.16634750976844204],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","fresh",29.550838072395354],["(sqrt.f64 (*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -3/2) (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2)))","fresh",0.20769501953688402]],"compiler":[[10,8],[25,19],[25,19],[22,17],[12,10],[8,6],[21,16]],"count":[[204,7]],"kept":[{"done":[1,1],"fresh":[5,4],"new":[197,2],"picked":[1,0]}],"min-error":[0.0078125],"time":57.382080078125,"type":"prune"},{"accuracy":[0.166347509768442],"baseline":[0.16634750976844204],"branch":[["x",0.166347509768442,1],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",0.166347509768442,1],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",0.166347509768442,1]],"compiler":[[2,1],[8,6],[8,6],[278,182]],"count":[[18,1]],"inputs":[["(pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 2) -1/2)","(sqrt.f64 (*.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -3/2) (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2)))","(*.f64 (/.f64 1 (+.f64 (pow.f64 (+.f64 1 x) 3/2) (pow.f64 x 3/2))) (+.f64 1 (+.f64 x (-.f64 x (sqrt.f64 (*.f64 (+.f64 1 x) x))))))","(/.f64 1 (*.f64 (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2)) (/.f64 1 (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))))))","(*.f64 (cbrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2)) (/.f64 1 (cbrt.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)))))","(sqrt.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -2))","(pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) -1/2) 2)","(fma.f64 (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (cbrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x)))","(*.f64 (/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 x 3/2))) (-.f64 (+.f64 (+.f64 x 1) x) (hypot.f64 x (sqrt.f64 x))))","(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))","(/.f64 1 (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","(/.f64 (+.f64 (pow.f64 (+.f64 x 1) 3/2) (pow.f64 (neg.f64 (sqrt.f64 x)) 3)) (+.f64 (+.f64 x 1) (-.f64 (*.f64 (neg.f64 (sqrt.f64 x)) (neg.f64 (sqrt.f64 x))) (*.f64 (sqrt.f64 (+.f64 x 1)) (neg.f64 (sqrt.f64 x))))))","(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (pow.f64 x 1/4)) (pow.f64 x 1/4) (sqrt.f64 x)))","(fma.f64 (cbrt.f64 (+.f64 x 1)) (cbrt.f64 (sqrt.f64 (+.f64 x 1))) (neg.f64 (sqrt.f64 x)))","(/.f64 (+.f64 x (-.f64 1 x)) (+.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)))","1","(+.f64 (-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (sqrt.f64 x))) (cbrt.f64 x) (sqrt.f64 x)))","(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))"]],"link":["."],"name":["2sqrt (example 3.1)"],"oracle":[32.489179955844506],"outputs":[["(pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 2) -1/2)"]],"time":16.2529296875,"times":[["x",5.934814453125],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",2.39697265625],["(-.f64 (sqrt.f64 (+.f64 x 1)) (sqrt.f64 x))",3.14599609375]],"type":"regimes"},{"compiler":[[12,10]],"egraph":[[1,15,17,3.8499e-5],[0,11,17,2.4291e-5]],"inputs":[["(pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 2) -1/2)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 (+.f64 (sqrt.f64 (+.f64 1 x)) (sqrt.f64 x)) 2) -1/2)"]],"stop":[["fuel",1],["saturated",1]],"time":8.596923828125,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[12,10]],"remove-preprocessing":[[]],"time":9.8798828125,"type":"end"}]
[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.7510979175567627,0.0014641284942626953,0.2474379539489746],[11,0.7506098747253418,0.0029282569885253906,0.2464618682861328],[10,0.7496337890625,0.005856513977050781,0.24450969696044922],[9,0.7457294464111328,0.011713027954101563,0.24255752563476563],[8,0.7418251037597656,0.023426055908203125,0.23474884033203125],[7,0.7340164184570313,0.04685211181640625,0.2191314697265625],[6,0.7183990478515625,0.0937042236328125,0.187896728515625],[5,0.687164306640625,0.187408447265625,0.12542724609375],[4,0.62469482421875,0.37481689453125,0.00048828125],[3,0.2498779296875,0.7496337890625,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.923095703125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.4404296875,12],["body",512,"valid",101.8994140625,1414],["body",1024,"valid",346.040771484375,2679],["body",2048,"valid",45.4013671875,284],["body",256,"valid",129.02294921875,3879]],"time":632.72705078125,"type":"sample"},{"compiler":[[7,5]],"egraph":[[0,1,1,1.375e-6],[13,618,6,0.008357083000000001],[12,582,6,0.007078167000000001],[11,510,6,0.005615917000000001],[10,352,6,0.004128292],[9,223,6,0.002633458],[8,145,6,0.001754792],[7,100,6,0.001170417],[6,59,6,0.000728167],[5,40,6,0.00047766700000000003],[4,30,6,0.000338375],[3,22,6,0.000235625],[2,18,6,0.000158875],[1,15,6,0.000106333],[0,6,6,5.9125e-5]],"inputs":[["0"],["(/.f64 (-.f64 (exp.f64 x) 1) x)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":30.267822265625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[13,618,6,0.008262791],[12,582,6,0.006983708],[11,510,6,0.005521041],[10,352,6,0.004069458],[9,223,6,0.002607791],[8,145,6,0.001743291],[7,100,6,0.001138791],[6,59,6,0.000706291],[5,40,6,0.000461791],[4,30,6,0.000330458],[3,22,6,0.00022825],[2,18,6,0.000152958],[1,15,6,0.00010075],[0,6,6,5.4e-5]],"inputs":[["(/.f64 (-.f64 (exp.f64 x) 1) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)"]],"stop":[["saturated",1]],"time":18.64208984375,"type":"simplify"},{"compiler":[[11,7]],"time":0.31689453125,"type":"eval"},{"alts":[["(/.f64 (expm1.f64 x) x)","next",0.0078125]],"compiler":[[5,3],[5,3]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":1.218017578125,"type":"prune"},{"compiler":[[8,3]],"locations":[["(/.f64 (expm1.f64 x) x)",0.0078125,true]],"time":2.35009765625,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (expm1.f64 x) x)","x","-inf",0.513916015625],["(/.f64 (expm1.f64 x) x)","x","inf",0.453125],["(/.f64 (expm1.f64 x) x)","x","0",0.39501953125]],"time":1.4140625,"type":"series"},{"count":[[1,31]],"egraph":[[2,1104,6,0.013331249],[1,83,6,0.001496291],[0,4,6,0.000118291]],"inputs":[["(/.f64 (expm1.f64 x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (expm1.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 x) x) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 x) (pow.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (expm1.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2) (*.f64 (cbrt.f64 (expm1.f64 x)) (pow.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 2) (cbrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (expm1.f64 x)) (*.f64 (sqrt.f64 (expm1.f64 x)) (pow.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (expm1.f64 x) x)) (sqrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (expm1.f64 x)) (/.f64 1 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2) 1) (/.f64 (cbrt.f64 (expm1.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (expm1.f64 x)) 1) (/.f64 (sqrt.f64 (expm1.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 x) 2)) (/.f64 (expm1.f64 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (expm1.f64 x)) (pow.f64 (cbrt.f64 x) 2)) (/.f64 (sqrt.f64 (expm1.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 (expm1.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2) (sqrt.f64 x)) (/.f64 (cbrt.f64 (expm1.f64 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (expm1.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (expm1.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (expm1.f64 x) x)))))))"]],"rules":[["egg-rr",31]],"stop":[["node limit",1]],"time":30.81396484375,"type":"rewrite"},{"count":[[43,40]],"egraph":[[6,4510,76,0.027452792000000004],[5,2522,76,0.013400542000000001],[4,816,76,0.005694292],[3,325,79,0.002099292],[2,120,85,0.000916584],[1,60,85,0.00038741700000000003],[0,22,87,0.000132167]],"inputs":[["1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(fma.f64 1/2 x (fma.f64 1/6 (*.f64 x x) 1))","(fma.f64 1/2 x (fma.f64 x (*.f64 x 1/6) 1))","(fma.f64 x (fma.f64 x 1/6 1/2) 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (+.f64 (fma.f64 1/6 (*.f64 x x) 1) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/6 (*.f64 x x) (fma.f64 1/24 (pow.f64 x 3) 1)))","(fma.f64 1/2 x (fma.f64 x (*.f64 x 1/6) (fma.f64 1/24 (pow.f64 x 3) 1)))","(fma.f64 x (fma.f64 x 1/6 1/2) (fma.f64 1/24 (pow.f64 x 3) 1))","(fma.f64 x (fma.f64 x (fma.f64 x 1/24 1/6) 1/2) 1)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)"]],"stop":[["node limit",1]],"time":42.073974609375,"type":"simplify"},{"compiler":[[345,161]],"time":4.64404296875,"type":"eval"},{"alts":[["(expm1.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)))","next",0.014003759768442016],["(/.f64 (expm1.f64 x) x)","done",0.0078125],["(*.f64 (expm1.f64 x) (pow.f64 x -1))","fresh",0.36328125]],"compiler":[[7,5],[5,3],[7,5],[7,5],[7,5]],"count":[[41,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[40,2],"picked":[1,1]}],"min-error":[0],"time":6.889892578125,"type":"prune"},{"compiler":[[19,5]],"locations":[["(/.f64 (expm1.f64 x) x)",0.0078125,false],["(log1p.f64 (/.f64 (expm1.f64 x) x))",0.01171875,true],["(expm1.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)))",0.017910009768442016,true]],"time":5.573974609375,"type":"localize"},{"count":[[2,24]],"series":[["(log1p.f64 (/.f64 (expm1.f64 x) x))","x","-inf",0.529052734375],["(log1p.f64 (/.f64 (expm1.f64 x) x))","x","inf",0.59912109375],["(log1p.f64 (/.f64 (expm1.f64 x) x))","x","0",0.4169921875],["(expm1.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)))","x","-inf",0.16796875],["(expm1.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)))","x","inf",0.19287109375],["(expm1.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)))","x","0",0.39697265625]],"time":2.412109375,"type":"series"},{"count":[[2,59]],"egraph":[[2,1310,14,0.018493000000000002],[1,104,14,0.001803542],[0,6,14,0.0001685]],"inputs":[["(expm1.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)))","(log1p.f64 (/.f64 (expm1.f64 x) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 x) x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (expm1.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 2) (cbrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2) (*.f64 (cbrt.f64 (expm1.f64 x)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (expm1.f64 x) x)) (sqrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (expm1.f64 x)) (*.f64 (sqrt.f64 (expm1.f64 x)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (expm1.f64 x)) (/.f64 1 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2) 1) (/.f64 (cbrt.f64 (expm1.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (expm1.f64 x)) 1) (/.f64 (sqrt.f64 (expm1.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 x) 2)) (/.f64 (expm1.f64 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (expm1.f64 x)) (pow.f64 (cbrt.f64 x) 2)) (/.f64 (sqrt.f64 (expm1.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 (expm1.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2) (sqrt.f64 x)) (/.f64 (cbrt.f64 (expm1.f64 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 x (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 x (expm1.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2) (/.f64 x (cbrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (expm1.f64 x)) (/.f64 x (sqrt.f64 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 x (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (expm1.f64 x))) (neg.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 x) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 3) 1) (+.f64 (*.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) (+.f64 (/.f64 (expm1.f64 x) x) 1)) (+.f64 1 (*.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) (+.f64 (/.f64 (expm1.f64 x) x) 1)) 1) (+.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (expm1.f64 x) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (expm1.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (expm1.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (expm1.f64 x) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log1p.f64 (/.f64 (expm1.f64 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) (pow.f64 (cbrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) 2) (cbrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) (sqrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))))))))"]],"rules":[["egg-rr",15],["egg-rr",44]],"stop":[["node limit",1]],"time":40.06103515625,"type":"rewrite"},{"count":[[83,80]],"egraph":[[3,1812,342,0.01577525],[2,428,355,0.003553709],[1,155,374,0.0009938339999999999],[0,60,414,0.000268709]],"inputs":[["1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(log.f64 2)","(+.f64 (log.f64 2) (*.f64 1/4 x))","(+.f64 (log.f64 2) (+.f64 (*.f64 1/4 x) (*.f64 5/96 (pow.f64 x 2))))","(+.f64 (log.f64 2) (+.f64 (*.f64 1/4 x) (+.f64 (*.f64 1/192 (pow.f64 x 3)) (*.f64 5/96 (pow.f64 x 2)))))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2)))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 4) (pow.f64 x 4))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3)))))) (/.f64 1 x))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2)))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 4) (pow.f64 x 4))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3)))))) (/.f64 1 x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(fma.f64 1/2 x (fma.f64 1/6 (*.f64 x x) 1))","(fma.f64 1/2 x (fma.f64 x (*.f64 x 1/6) 1))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (+.f64 (fma.f64 1/6 (*.f64 x x) 1) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/6 (*.f64 x x) (fma.f64 1/24 (pow.f64 x 3) 1)))","(fma.f64 1/2 x (fma.f64 x (*.f64 x 1/6) (fma.f64 1/24 (pow.f64 x 3) 1)))","(+.f64 1 (*.f64 x (+.f64 (*.f64 x (+.f64 (*.f64 x 1/24) 1/6)) 1/2)))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(log.f64 2)","(+.f64 (log.f64 2) (*.f64 1/4 x))","(+.f64 (log.f64 2) (*.f64 x 1/4))","(fma.f64 x 1/4 (log.f64 2))","(+.f64 (log.f64 2) (+.f64 (*.f64 1/4 x) (*.f64 5/96 (pow.f64 x 2))))","(+.f64 (log.f64 2) (fma.f64 1/4 x (*.f64 (*.f64 x x) 5/96)))","(+.f64 (fma.f64 x 1/4 (log.f64 2)) (*.f64 x (*.f64 x 5/96)))","(fma.f64 x 1/4 (fma.f64 x (*.f64 x 5/96) (log.f64 2)))","(+.f64 (log.f64 2) (+.f64 (*.f64 1/4 x) (+.f64 (*.f64 1/192 (pow.f64 x 3)) (*.f64 5/96 (pow.f64 x 2)))))","(+.f64 (log.f64 2) (fma.f64 1/4 x (fma.f64 1/192 (pow.f64 x 3) (*.f64 (*.f64 x x) 5/96))))","(+.f64 (fma.f64 x 1/4 (log.f64 2)) (fma.f64 (*.f64 x x) 5/96 (*.f64 (pow.f64 x 3) 1/192)))","(+.f64 (log.f64 2) (fma.f64 (pow.f64 x 3) 1/192 (*.f64 x (+.f64 1/4 (*.f64 x 5/96)))))","(+.f64 (log.f64 2) (*.f64 x (+.f64 1/4 (*.f64 x (+.f64 5/96 (*.f64 x 1/192))))))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2)))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)))) (/.f64 1 x))","(+.f64 (*.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x)) (/.f64 (expm1.f64 x) x))","(fma.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x) (/.f64 (expm1.f64 x) x))","(*.f64 (+.f64 (*.f64 (/.f64 (expm1.f64 x) x) -1/2) 1) (/.f64 (expm1.f64 x) x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (*.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3))))) (/.f64 1 x))","(+.f64 (fma.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)) (*.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x))) (/.f64 (expm1.f64 x) x))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 1/3 (pow.f64 (/.f64 (expm1.f64 x) x) 3) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) x) (/.f64 -1/2 x))))","(+.f64 (/.f64 (expm1.f64 x) x) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (+.f64 -1/2 (*.f64 (/.f64 (expm1.f64 x) x) 1/3))))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 4) (pow.f64 x 4))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3)))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (fma.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4)) (*.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)))))) (/.f64 1 x))","(+.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (fma.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)) (*.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4))))) (/.f64 (expm1.f64 x) x))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 1/3 (pow.f64 (/.f64 (expm1.f64 x) x) 3) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (*.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4))))))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 -1/4 (pow.f64 (/.f64 (expm1.f64 x) x) 4) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (+.f64 -1/2 (*.f64 (/.f64 (expm1.f64 x) x) 1/3)))))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2)))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)))) (/.f64 1 x))","(+.f64 (*.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x)) (/.f64 (expm1.f64 x) x))","(fma.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x) (/.f64 (expm1.f64 x) x))","(*.f64 (+.f64 (*.f64 (/.f64 (expm1.f64 x) x) -1/2) 1) (/.f64 (expm1.f64 x) x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (*.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3))))) (/.f64 1 x))","(+.f64 (fma.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)) (*.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x))) (/.f64 (expm1.f64 x) x))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 1/3 (pow.f64 (/.f64 (expm1.f64 x) x) 3) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) x) (/.f64 -1/2 x))))","(+.f64 (/.f64 (expm1.f64 x) x) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (+.f64 -1/2 (*.f64 (/.f64 (expm1.f64 x) x) 1/3))))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 4) (pow.f64 x 4))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3)))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (fma.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4)) (*.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)))))) (/.f64 1 x))","(+.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (fma.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)) (*.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4))))) (/.f64 (expm1.f64 x) x))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 1/3 (pow.f64 (/.f64 (expm1.f64 x) x) 3) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (*.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4))))))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 -1/4 (pow.f64 (/.f64 (expm1.f64 x) x) 4) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (+.f64 -1/2 (*.f64 (/.f64 (expm1.f64 x) x) 1/3)))))"]],"stop":[["node limit",1]],"time":33.40283203125,"type":"simplify"},{"compiler":[[1311,654]],"time":17.006103515625,"type":"eval"},{"alts":[["(expm1.f64 (log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1))))","next",0.26400375976844204],["(/.f64 (expm1.f64 x) x)","done",0.0078125]],"compiler":[[9,7],[5,3],[9,7]],"count":[[123,2]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[120,1],"picked":[1,0]}],"min-error":[0],"time":29.8359375,"type":"prune"},{"compiler":[[29,17]],"locations":[["(log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1)))",0.01171875,true],["(expm1.f64 (log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1))))",0.017910009768442016,true],["(*.f64 (expm1.f64 x) (pow.f64 x -1))",0.35546875,true]],"time":10.9150390625,"type":"localize"},{"count":[[3,36]],"series":[["(log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1)))","x","-inf",0.197021484375],["(log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1)))","x","inf",0.2001953125],["(log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1)))","x","0",0.177001953125],["(expm1.f64 (log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1))))","x","-inf",0.14697265625],["(expm1.f64 (log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1))))","x","inf",0.18115234375],["(expm1.f64 (log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1))))","x","0",0.151123046875],["(*.f64 (expm1.f64 x) (pow.f64 x -1))","x","-inf",0.1669921875],["(*.f64 (expm1.f64 x) (pow.f64 x -1))","x","inf",0.2080078125],["(*.f64 (expm1.f64 x) (pow.f64 x -1))","x","0",0.248046875]],"time":1.8291015625,"type":"series"},{"count":[[3,59]],"egraph":[[2,1539,20,0.019891834],[1,140,20,0.002402667],[0,8,29,0.000245375]],"inputs":[["(*.f64 (expm1.f64 x) (pow.f64 x -1))","(expm1.f64 (log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1))))","(log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 3) 1) (+.f64 (*.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) (+.f64 (/.f64 (expm1.f64 x) x) 1)) (+.f64 1 (*.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) (+.f64 (/.f64 (expm1.f64 x) x) 1)) 1) (+.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (expm1.f64 x) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (expm1.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (expm1.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 2) (cbrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x -2)) (*.f64 (/.f64 1 (cbrt.f64 x)) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (expm1.f64 x)) 2) (*.f64 (cbrt.f64 (expm1.f64 x)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (expm1.f64 x) x)) (sqrt.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (expm1.f64 x)) (*.f64 (sqrt.f64 (expm1.f64 x)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/2) (*.f64 (pow.f64 x -1/2) (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (expm1.f64 x) (cbrt.f64 (pow.f64 x -2))) (/.f64 1 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1/2)) (pow.f64 x -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 x) (pow.f64 (cbrt.f64 (expm1.f64 x)) 2)) (cbrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 x) (sqrt.f64 (expm1.f64 x))) (sqrt.f64 (expm1.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 3) 1) (+.f64 (*.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) (+.f64 (/.f64 (expm1.f64 x) x) 1)) (+.f64 1 (*.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) (+.f64 (/.f64 (expm1.f64 x) x) 1)) 1) (+.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (expm1.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (expm1.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (expm1.f64 x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (expm1.f64 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (expm1.f64 x) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log1p.f64 (/.f64 (expm1.f64 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (/.f64 (expm1.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) (pow.f64 (cbrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) 2) (cbrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) (sqrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 (/.f64 (expm1.f64 x) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log1p.f64 (/.f64 (expm1.f64 x) x))))))))"]],"rules":[["egg-rr",15],["egg-rr",29],["egg-rr",15]],"stop":[["node limit",1]],"time":45.997802734375,"type":"rewrite"},{"count":[[95,66]],"egraph":[[3,1812,427,0.014861167],[2,428,440,0.004154292],[1,155,459,0.0011185840000000002],[0,60,501,0.000315375]],"inputs":[["1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","1","(+.f64 (*.f64 1/2 x) 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(log.f64 2)","(+.f64 (log.f64 2) (*.f64 1/4 x))","(+.f64 (log.f64 2) (+.f64 (*.f64 1/4 x) (*.f64 5/96 (pow.f64 x 2))))","(+.f64 (log.f64 2) (+.f64 (*.f64 1/4 x) (+.f64 (*.f64 1/192 (pow.f64 x 3)) (*.f64 5/96 (pow.f64 x 2)))))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2)))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 4) (pow.f64 x 4))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3)))))) (/.f64 1 x))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2)))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 4) (pow.f64 x 4))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3)))))) (/.f64 1 x))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(fma.f64 1/2 x (fma.f64 1/6 (*.f64 x x) 1))","(fma.f64 1/2 x (fma.f64 x (*.f64 x 1/6) 1))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (+.f64 (fma.f64 1/6 (*.f64 x x) 1) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/6 (*.f64 x x) (fma.f64 1/24 (pow.f64 x 3) 1)))","(fma.f64 1/2 x (fma.f64 x (*.f64 x 1/6) (fma.f64 1/24 (pow.f64 x 3) 1)))","(+.f64 1 (*.f64 x (+.f64 (*.f64 x (+.f64 (*.f64 x 1/24) 1/6)) 1/2)))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","1","(+.f64 (*.f64 1/2 x) 1)","(fma.f64 1/2 x 1)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) 1))","(fma.f64 1/2 x (fma.f64 1/6 (*.f64 x x) 1))","(fma.f64 1/2 x (fma.f64 x (*.f64 x 1/6) 1))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 1 (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (+.f64 (fma.f64 1/6 (*.f64 x x) 1) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/6 (*.f64 x x) (fma.f64 1/24 (pow.f64 x 3) 1)))","(fma.f64 1/2 x (fma.f64 x (*.f64 x 1/6) (fma.f64 1/24 (pow.f64 x 3) 1)))","(+.f64 1 (*.f64 x (+.f64 (*.f64 x (+.f64 (*.f64 x 1/24) 1/6)) 1/2)))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(log.f64 2)","(+.f64 (log.f64 2) (*.f64 1/4 x))","(+.f64 (log.f64 2) (*.f64 x 1/4))","(fma.f64 x 1/4 (log.f64 2))","(+.f64 (log.f64 2) (+.f64 (*.f64 1/4 x) (*.f64 5/96 (pow.f64 x 2))))","(+.f64 (log.f64 2) (fma.f64 1/4 x (*.f64 (*.f64 x x) 5/96)))","(+.f64 (fma.f64 x 1/4 (log.f64 2)) (*.f64 x (*.f64 x 5/96)))","(fma.f64 x 1/4 (fma.f64 x (*.f64 x 5/96) (log.f64 2)))","(+.f64 (log.f64 2) (+.f64 (*.f64 1/4 x) (+.f64 (*.f64 1/192 (pow.f64 x 3)) (*.f64 5/96 (pow.f64 x 2)))))","(+.f64 (log.f64 2) (fma.f64 1/4 x (fma.f64 1/192 (pow.f64 x 3) (*.f64 (*.f64 x x) 5/96))))","(+.f64 (fma.f64 x 1/4 (log.f64 2)) (fma.f64 (*.f64 x x) 5/96 (*.f64 (pow.f64 x 3) 1/192)))","(+.f64 (log.f64 2) (fma.f64 (pow.f64 x 3) 1/192 (*.f64 x (+.f64 1/4 (*.f64 x 5/96)))))","(+.f64 (log.f64 2) (*.f64 x (+.f64 1/4 (*.f64 x (+.f64 5/96 (*.f64 x 1/192))))))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2)))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)))) (/.f64 1 x))","(+.f64 (*.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x)) (/.f64 (expm1.f64 x) x))","(fma.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x) (/.f64 (expm1.f64 x) x))","(*.f64 (+.f64 (*.f64 (/.f64 (expm1.f64 x) x) -1/2) 1) (/.f64 (expm1.f64 x) x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (*.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3))))) (/.f64 1 x))","(+.f64 (fma.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)) (*.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x))) (/.f64 (expm1.f64 x) x))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 1/3 (pow.f64 (/.f64 (expm1.f64 x) x) 3) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) x) (/.f64 -1/2 x))))","(+.f64 (/.f64 (expm1.f64 x) x) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (+.f64 -1/2 (*.f64 (/.f64 (expm1.f64 x) x) 1/3))))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 4) (pow.f64 x 4))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3)))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (fma.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4)) (*.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)))))) (/.f64 1 x))","(+.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (fma.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)) (*.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4))))) (/.f64 (expm1.f64 x) x))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 1/3 (pow.f64 (/.f64 (expm1.f64 x) x) 3) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (*.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4))))))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 -1/4 (pow.f64 (/.f64 (expm1.f64 x) x) 4) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (+.f64 -1/2 (*.f64 (/.f64 (expm1.f64 x) x) 1/3)))))","(/.f64 (-.f64 (exp.f64 x) 1) x)","(/.f64 (expm1.f64 x) x)","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2)))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (*.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)))) (/.f64 1 x))","(+.f64 (*.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x)) (/.f64 (expm1.f64 x) x))","(fma.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x) (/.f64 (expm1.f64 x) x))","(*.f64 (+.f64 (*.f64 (/.f64 (expm1.f64 x) x) -1/2) 1) (/.f64 (expm1.f64 x) x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (*.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3))))) (/.f64 1 x))","(+.f64 (fma.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)) (*.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (expm1.f64 x) 2) x))) (/.f64 (expm1.f64 x) x))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 1/3 (pow.f64 (/.f64 (expm1.f64 x) x) 3) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) x) (/.f64 -1/2 x))))","(+.f64 (/.f64 (expm1.f64 x) x) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (+.f64 -1/2 (*.f64 (/.f64 (expm1.f64 x) x) 1/3))))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 4) (pow.f64 x 4))) (*.f64 1/3 (/.f64 (pow.f64 (-.f64 (exp.f64 x) 1) 3) (pow.f64 x 3)))))) (/.f64 1 x))","(-.f64 (+.f64 (/.f64 (exp.f64 x) x) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (fma.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4)) (*.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)))))) (/.f64 1 x))","(+.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (fma.f64 1/3 (/.f64 (pow.f64 (expm1.f64 x) 3) (pow.f64 x 3)) (*.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4))))) (/.f64 (expm1.f64 x) x))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 1/3 (pow.f64 (/.f64 (expm1.f64 x) x) 3) (fma.f64 -1/2 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (*.f64 -1/4 (/.f64 (pow.f64 (expm1.f64 x) 4) (pow.f64 x 4))))))","(+.f64 (/.f64 (expm1.f64 x) x) (fma.f64 -1/4 (pow.f64 (/.f64 (expm1.f64 x) x) 4) (*.f64 (/.f64 (pow.f64 (expm1.f64 x) 2) (*.f64 x x)) (+.f64 -1/2 (*.f64 (/.f64 (expm1.f64 x) x) 1/3)))))"]],"stop":[["node limit",1]],"time":33.361083984375,"type":"simplify"},{"compiler":[[808,449]],"time":11.24609375,"type":"eval"},{"alts":[["(expm1.f64 (log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1))))","done",0.26400375976844204],["(/.f64 (expm1.f64 x) x)","done",0.0078125]],"compiler":[[9,7],[5,3]],"count":[[68,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[66,0],"picked":[1,1]}],"min-error":[0],"time":12.93798828125,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["(/.f64 (-.f64 (exp.f64 x) 1) x)",0.0078125,1]],"compiler":[[2,1],[7,5],[31,17]],"count":[[5,1]],"inputs":[["(expm1.f64 (log1p.f64 (*.f64 (expm1.f64 x) (pow.f64 x -1))))","(expm1.f64 (log1p.f64 (/.f64 (expm1.f64 x) x)))","(*.f64 (expm1.f64 x) (pow.f64 x -1))","(/.f64 (expm1.f64 x) x)","(/.f64 (-.f64 (exp.f64 x) 1) x)"]],"link":["."],"name":["Kahan's exp quotient"],"oracle":[40.45396670572193],"outputs":[["(/.f64 (expm1.f64 x) x)"]],"time":7.19384765625,"times":[["x",4.1669921875],["(/.f64 (-.f64 (exp.f64 x) 1) x)",2.06103515625]],"type":"regimes"},{"compiler":[[5,3]],"egraph":[[0,4,6,1.325e-5]],"inputs":[["(/.f64 (expm1.f64 x) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (expm1.f64 x) x)"]],"stop":[["done",1],["saturated",1]],"time":8.606201171875,"type":"simplify"},{"time":0.017822265625,"type":"soundness"},{"compiler":[[5,3]],"remove-preprocessing":[[]],"time":8.4111328125,"type":"end"}]
[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.4680636897137447,0.4407599744804429,0.09117633580581241],[11,0.41345625924714113,0.5148700586851191,0.07167368206773972],[10,0.34324670579007943,0.600681735132639,0.05607155907728156],[9,0.2496339678473305,0.7176976575610752,0.03266837459159433],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":84.858154296875,"type":"analyze"},{"outcomes":[["body",256,"invalid",50.598876953125,1271],["body",256,"valid",331.948974609375,8256]],"time":391.212890625,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,2.291e-6],[13,3358,40,0.055301333],[12,3358,40,0.046795125],[11,3341,40,0.039152541],[10,3086,40,0.031311458],[9,2622,40,0.022718957999999997],[8,1445,40,0.013779833],[7,667,40,0.006237958],[6,420,40,0.0032329999999999998],[5,276,40,0.001965625],[4,195,40,0.001245291],[3,124,40,0.000759416],[2,71,44,0.000450541],[1,42,44,0.000234999],[0,20,44,9.7333e-5]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 y 1) z))","(+.f64 (*.f64 z y) (*.f64 (-.f64 z 1) x))","(+.f64 (*.f64 x z) (*.f64 (-.f64 x 1) y))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","(fma.f64 x y (*.f64 (+.f64 x -1) z))","(fma.f64 (+.f64 x -1) z (*.f64 x y))","(-.f64 (*.f64 x (+.f64 z y)) z)","(-.f64 (*.f64 x (+.f64 y z)) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 y 1) z))","(fma.f64 y x (*.f64 z (+.f64 y -1)))","(fma.f64 x y (*.f64 z (+.f64 y -1)))","(-.f64 (*.f64 y (+.f64 x z)) z)","(fma.f64 y (+.f64 x z) (neg.f64 z))","(+.f64 (*.f64 z y) (*.f64 (-.f64 z 1) x))","(fma.f64 z y (*.f64 x (+.f64 z -1)))","(fma.f64 x (+.f64 z -1) (*.f64 y z))","(-.f64 (*.f64 z (+.f64 y x)) x)","(-.f64 (*.f64 z (+.f64 x y)) x)","(+.f64 (*.f64 x z) (*.f64 (-.f64 x 1) y))","(fma.f64 x z (*.f64 y (+.f64 x -1)))","(-.f64 (*.f64 x (+.f64 z y)) y)","(-.f64 (*.f64 x (+.f64 y z)) y)","(fma.f64 x (+.f64 y z) (neg.f64 y))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":79.595947265625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[12,1233,10,0.017522043],[11,1228,10,0.014554251],[10,1137,10,0.011520417],[9,849,10,0.008291626],[8,477,10,0.004589250999999999],[7,224,10,0.0021497929999999997],[6,140,10,0.001159084],[5,90,10,0.000719251],[4,65,10,0.000472209],[3,46,10,0.000305501],[2,28,11,0.000198667],[1,18,11,0.000115251],[0,9,11,5.4042e-5]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","(fma.f64 x y (*.f64 (-.f64 x 1) z))","(fma.f64 x y (*.f64 (+.f64 x -1) z))","(-.f64 (*.f64 x (+.f64 y z)) z)"]],"stop":[["saturated",1]],"time":28.066162109375,"type":"simplify"},{"compiler":[[19,11]],"time":0.32080078125,"type":"eval"},{"alts":[["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","next",0.0078125]],"compiler":[[12,8],[12,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.859130859375,"type":"prune"},{"compiler":[[27,14]],"locations":[["(*.f64 (-.f64 x 1) z)",0.00390625,true],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))",0.0078125,true]],"time":6.344970703125,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (-.f64 x 1) z)","z","-inf",0.214111328125],["(*.f64 (-.f64 x 1) z)","z","inf",0.464111328125],["(*.f64 (-.f64 x 1) z)","z","0",0.208984375],["(*.f64 (-.f64 x 1) z)","x","-inf",0.165771484375],["(*.f64 (-.f64 x 1) z)","x","inf",0.151123046875],["(*.f64 (-.f64 x 1) z)","x","0",0.173095703125],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","z","-inf",0.344970703125],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","z","inf",0.301025390625],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","z","0",0.303955078125],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","y","-inf",0.244873046875],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","y","inf",0.281005859375],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","y","0",0.3330078125],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","x","-inf",0.550048828125],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","x","inf",0.501953125],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","x","0",0.427001953125]],"time":4.838134765625,"type":"series"},{"count":[[2,114]],"egraph":[[2,2654,18,0.024638708999999998],[1,194,18,0.0033718759999999998],[0,9,18,0.000230667]],"inputs":[["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))","(*.f64 (-.f64 x 1) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x y) 2) (-.f64 (*.f64 x y) (*.f64 (+.f64 x -1) z))) (/.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 2) (-.f64 (*.f64 x y) (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x y (*.f64 (+.f64 x -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))) (pow.f64 (cbrt.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))) 2) (cbrt.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))) (sqrt.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 (+.f64 x -1) z) 3)) (/.f64 1 (fma.f64 (*.f64 (+.f64 x -1) z) (-.f64 (*.f64 (+.f64 x -1) z) (*.f64 x y)) (pow.f64 (*.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 (+.f64 x -1) z) 2)) (/.f64 1 (-.f64 (*.f64 x y) (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 (+.f64 x -1) z) (-.f64 (*.f64 (+.f64 x -1) z) (*.f64 x y)) (pow.f64 (*.f64 x y) 2)) (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 (+.f64 x -1) z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 x y) (*.f64 (+.f64 x -1) z)) (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 (+.f64 x -1) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 (+.f64 x -1) z) 3)) (fma.f64 (*.f64 (+.f64 x -1) z) (-.f64 (*.f64 (+.f64 x -1) z) (*.f64 x y)) (pow.f64 (*.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 (+.f64 x -1) z) 3)) (+.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 2) (-.f64 (pow.f64 (*.f64 x y) 2) (*.f64 (*.f64 x y) (*.f64 (+.f64 x -1) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 (+.f64 x -1) z) 2)) (-.f64 (*.f64 x y) (*.f64 (+.f64 x -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 (+.f64 x -1) z) 3))) (neg.f64 (fma.f64 (*.f64 (+.f64 x -1) z) (-.f64 (*.f64 (+.f64 x -1) z) (*.f64 x y)) (pow.f64 (*.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 (+.f64 x -1) z) 2))) (neg.f64 (-.f64 (*.f64 x y) (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 2) (pow.f64 (*.f64 x y) 2)) (-.f64 (*.f64 (+.f64 x -1) z) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 (+.f64 x -1) z) (-.f64 (*.f64 (+.f64 x -1) z) (*.f64 x y)) (pow.f64 (*.f64 x y) 2)) (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (*.f64 (+.f64 x -1) z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 x y) (*.f64 (+.f64 x -1) z)) (-.f64 (pow.f64 (*.f64 x y) 2) (pow.f64 (*.f64 (+.f64 x -1) z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)))) 2)) (cbrt.f64 (log.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))))) (sqrt.f64 (log.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (pow.f64 (exp.f64 (+.f64 x -1)) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) y) (+.f64 1 (expm1.f64 (*.f64 (+.f64 x -1) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x y))) (+.f64 1 (expm1.f64 (*.f64 (+.f64 x -1) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (+.f64 x -1) z))) (pow.f64 (exp.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (+.f64 x -1)) z) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (+.f64 x -1) z))) (+.f64 1 (expm1.f64 (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x y (*.f64 (+.f64 x -1) z))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x y) 1 (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (+.f64 x -1) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x -1) z (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (+.f64 x -1) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) z) 1 (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (+.f64 x -1) z)) (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) z)) 2) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) z)) 2) (cbrt.f64 (*.f64 (+.f64 x -1) z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) y) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1)) 2) (*.f64 (cbrt.f64 (+.f64 x -1)) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) x) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) (+.f64 x -1)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x y)) (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (+.f64 x -1) z)) (sqrt.f64 (*.f64 (+.f64 x -1) z)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) y) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x -1)) (*.f64 (sqrt.f64 (+.f64 x -1)) z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) x) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) (+.f64 x -1)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 y)) (sqrt.f64 y) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x -1) (sqrt.f64 z)) (sqrt.f64 z) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (pow.f64 (cbrt.f64 (+.f64 x -1)) 2)) (cbrt.f64 (+.f64 x -1)) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 z (sqrt.f64 (+.f64 x -1))) (sqrt.f64 (+.f64 x -1)) (*.f64 x y))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 x -1) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (*.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 x -1)) z)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 x -1)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 x -1)) z))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 x -1)) z))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (+.f64 x -1) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) -1) z) (+.f64 (fma.f64 x x 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) z) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (+.f64 (pow.f64 x 3) -1)) (+.f64 (fma.f64 x x 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (fma.f64 x x -1)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 (+.f64 x -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (+.f64 x -1) z))) 2)) (cbrt.f64 (log.f64 (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (+.f64 x -1) z)))) (sqrt.f64 (log.f64 (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 x -1)) z))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (+.f64 x -1) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (+.f64 x -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 x -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (+.f64 x -1) z)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (+.f64 x -1) z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (+.f64 x -1) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (+.f64 x -1) z))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (+.f64 x -1) z)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (+.f64 x -1) z)) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (+.f64 x -1)) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 x -1)) 1) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (log.f64 (+.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 z) (*.f64 (log.f64 (+.f64 x -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (*.f64 (log.f64 (+.f64 x -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 z -1))))))"]],"rules":[["egg-rr",39],["egg-rr",75]],"stop":[["node limit",1]],"time":48.23193359375,"type":"rewrite"},{"count":[[162,129]],"egraph":[[7,1349,394,0.015247584000000002],[6,1326,394,0.012201834000000002],[5,1125,394,0.009161043],[4,697,394,0.005135584],[3,300,394,0.002388626],[2,120,394,0.000972418],[1,54,394,0.000395251],[0,22,394,0.000134917]],"inputs":[["(*.f64 -1 z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 -1 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 -1 z))","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 -1 z))","(*.f64 (+.f64 y z) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 y z) x))","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 y z) x))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(*.f64 (-.f64 x 1) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(*.f64 (-.f64 x 1) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(*.f64 (-.f64 x 1) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 -1 z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 -1 z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 (+.f64 y z) x) (*.f64 -1 z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(*.f64 (+.f64 y z) x)","(*.f64 (+.f64 z y) x)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 y z) x))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 y z) x))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 (+.f64 y z) x))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x))","(*.f64 (+.f64 z y) x)","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 -1 z) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 z) (*.f64 -1 y)) x)))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(*.f64 (-.f64 x 1) z)","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(*.f64 (-.f64 x 1) z)","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(*.f64 (-.f64 x 1) z)","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(+.f64 (*.f64 y x) (*.f64 (-.f64 x 1) z))","(fma.f64 (+.f64 z y) x (neg.f64 z))","(-.f64 (*.f64 (+.f64 z y) x) z)","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z (+.f64 x -1))","(-.f64 (*.f64 z x) z)"]],"stop":[["saturated",1]],"time":33.18603515625,"type":"simplify"},{"compiler":[[1867,1071]],"time":21.81494140625,"type":"eval"},{"alts":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))","next",0]],"compiler":[[11,7],[11,7]],"count":[[130,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[129,1],"picked":[1,0]}],"min-error":[0],"time":26.39892578125,"type":"prune"},{"compiler":[[23,13]],"locations":[["(*.f64 (+.f64 x -1) z)",0.00390625,true]],"time":5.89111328125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (+.f64 x -1) z)","z","-inf",0.14208984375],["(*.f64 (+.f64 x -1) z)","z","inf",0.14306640625],["(*.f64 (+.f64 x -1) z)","z","0",0.159912109375],["(*.f64 (+.f64 x -1) z)","x","-inf",0.15283203125],["(*.f64 (+.f64 x -1) z)","x","inf",0.157958984375],["(*.f64 (+.f64 x -1) z)","x","0",0.19189453125]],"time":1.013916015625,"type":"series"},{"count":[[1,19]],"egraph":[[2,1560,7,0.016629375000000002],[1,124,7,0.00206175],[0,6,7,0.00017075]],"inputs":[["(*.f64 (+.f64 x -1) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 -1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1 z) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (*.f64 z -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z -1) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (+.f64 x -1) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 x 3)) z) (fma.f64 x x (-.f64 1 (*.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1) z) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (+.f64 -1 (pow.f64 x 3))) (fma.f64 x x (-.f64 1 (*.f64 x -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (fma.f64 x x -1)) (+.f64 x 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x -1) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x -1) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (+.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x -1) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (+.f64 x -1) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 x -1) z)))))))"]],"rules":[["egg-rr",19]],"stop":[["node limit",1]],"time":33.742919921875,"type":"rewrite"},{"count":[[43,25]],"egraph":[[10,473,158,0.006432415999999999],[9,471,158,0.005352915999999999],[8,437,158,0.004244583],[7,297,158,0.003083166],[6,155,158,0.0016822909999999998],[5,74,158,0.000864166],[4,47,158,0.0005314990000000001],[3,32,158,0.000354832],[2,27,158,0.000239416],[1,20,158,0.000150874],[0,10,179,6.9791e-5]],"inputs":[["(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(+.f64 (*.f64 -1 z) (*.f64 z x))","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)","(*.f64 (-.f64 x 1) z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 z x)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(+.f64 (*.f64 -1 z) (*.f64 z x))","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)","(*.f64 (-.f64 x 1) z)","(fma.f64 -1 z (*.f64 z x))","(*.f64 z (+.f64 -1 x))","(fma.f64 z x (neg.f64 z))","(-.f64 (*.f64 z x) z)"]],"stop":[["saturated",1]],"time":20.422119140625,"type":"simplify"},{"compiler":[[268,149]],"time":3.625,"type":"eval"},{"alts":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))","done",0]],"compiler":[[11,7]],"count":[[26,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[25,0],"picked":[1,1]}],"min-error":[0],"time":3.633056640625,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["z",0,1],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))",0,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[20,12]],"count":[[2,1]],"inputs":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))","(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))"]],"link":["."],"name":["Graphics.Rendering.Chart.Drawing:drawTextsR from Chart-1.5.3"],"oracle":[0.0078125],"outputs":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))"]],"time":11.61181640625,"times":[["x",2.541015625],["y",2.73486328125],["z",2.879150390625],["(+.f64 (*.f64 x y) (*.f64 (-.f64 x 1) z))",2.85693359375]],"type":"regimes"},{"compiler":[[11,7]],"egraph":[[1,10,11,2.8084e-5],[0,8,11,1.6209e-5]],"inputs":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x y (*.f64 (+.f64 x -1) z))"]],"stop":[["done",1],["saturated",1]],"time":7.93115234375,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[11,7]],"remove-preprocessing":[[]],"time":8.239013671875,"type":"end"}]
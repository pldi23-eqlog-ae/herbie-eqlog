[{"compiler":[[18,13]],"method":["search"],"sampling":[[12,0.6585361144971102,0.34048756142146885,0.0009763240814208984],[11,0.6439019786193967,0.3551216972991824,0.0009763240814208984],[10,0.5736581264063716,0.4253655495122075,0.0009763240814208984],[9,0.546341072767973,0.45268260315060616,0.0009763240814208984],[8,0.42146311327815056,0.5775605626404285,0.0009763240814208984],[7,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":79.7509765625,"type":"analyze"},{"outcomes":[["body",4096,"valid",142.740478515625,629],["body",1024,"valid",58.46337890625,434],["body",512,"valid",21.3447265625,227],["body",2048,"valid",115.162841796875,628],["body",256,"valid",322.233642578125,6338]],"time":668.73486328125,"type":"sample"},{"compiler":[[17,12]],"egraph":[[0,2,2,1.584e-6],[3,59,30,0.000444459],[2,55,30,0.000312834],[1,45,30,0.00019283400000000002],[0,19,30,8.2167e-5]],"inputs":[["0","1"],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re))) im))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im)))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 im im) (*.f64 re re))) im))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 im (hypot.f64 re im)))))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.607177734375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[3,36,15,0.00031637500000000003],[2,34,15,0.00022845800000000001],[1,25,15,0.000145083],[0,13,15,5.8667e-5]],"inputs":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im)))))"]],"stop":[["saturated",1]],"time":11.635986328125,"type":"simplify"},{"compiler":[[27,19]],"time":0.46484375,"type":"eval"},{"alts":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im)))))","next",14.070460287884416]],"compiler":[[12,9],[12,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[14.070460287884416],"time":0.906005859375,"type":"prune"},{"compiler":[[39,16]],"locations":[["(+.f64 re (hypot.f64 re im))",0.6262961606704236,true]],"time":6.921142578125,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 re (hypot.f64 re im))","im","-inf",0.254150390625],["(+.f64 re (hypot.f64 re im))","im","inf",0.2890625],["(+.f64 re (hypot.f64 re im))","im","0",0.39208984375],["(+.f64 re (hypot.f64 re im))","re","-inf",0.5830078125],["(+.f64 re (hypot.f64 re im))","re","inf",0.509033203125],["(+.f64 re (hypot.f64 re im))","re","0",0.4580078125]],"time":2.575927734375,"type":"series"},{"count":[[1,33]],"egraph":[[2,1534,7,0.016139416],[1,110,7,0.002071916],[0,5,7,0.000136458]],"inputs":[["(+.f64 re (hypot.f64 re im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 re (hypot.f64 re im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 re re) (-.f64 re (hypot.f64 re im))) (/.f64 (pow.f64 (hypot.f64 re im) 2) (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 re (hypot.f64 re im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 re (hypot.f64 re im))) (pow.f64 (cbrt.f64 (+.f64 re (hypot.f64 re im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 re (hypot.f64 re im))) 2) (cbrt.f64 (+.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 re (hypot.f64 re im))) (sqrt.f64 (+.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 re 3) (pow.f64 (hypot.f64 re im) 3)) (/.f64 1 (fma.f64 re re (*.f64 (hypot.f64 re im) (-.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 re re) (pow.f64 (hypot.f64 re im) 2)) (/.f64 1 (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 re re (*.f64 (hypot.f64 re im) (-.f64 (hypot.f64 re im) re))) (+.f64 (pow.f64 re 3) (pow.f64 (hypot.f64 re im) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 re (hypot.f64 re im)) (-.f64 (*.f64 re re) (pow.f64 (hypot.f64 re im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 re 3) (pow.f64 (hypot.f64 re im) 3)) (fma.f64 re re (*.f64 (hypot.f64 re im) (-.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 re 3) (pow.f64 (hypot.f64 re im) 3)) (+.f64 (pow.f64 (hypot.f64 re im) 2) (-.f64 (*.f64 re re) (*.f64 re (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 re re) (pow.f64 (hypot.f64 re im) 2)) (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 re 3) (pow.f64 (hypot.f64 re im) 3))) (neg.f64 (fma.f64 re re (*.f64 (hypot.f64 re im) (-.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 re re) (pow.f64 (hypot.f64 re im) 2))) (neg.f64 (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (hypot.f64 re im) 2) (*.f64 re re)) (-.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 re (hypot.f64 re im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 re (hypot.f64 re im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 re (hypot.f64 re im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 re (hypot.f64 re im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 re (hypot.f64 re im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 re (hypot.f64 re im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 re (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 re im) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 re) 2) (cbrt.f64 re) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (hypot.f64 re im)) 2) (cbrt.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 re) (sqrt.f64 re) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (hypot.f64 re im)) re)))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":34.52392578125,"type":"rewrite"},{"count":[[57,64]],"egraph":[[5,7632,428,0.036020917],[4,5567,428,0.023931124999999998],[3,2279,428,0.012694792],[2,569,431,0.00431925],[1,193,442,0.001293333],[0,67,449,0.000321333]],"inputs":[["im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(*.f64 -1 im)","(+.f64 re (*.f64 -1 im))","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))"]],"method":["egg-herbie"],"outputs":[["im","(+.f64 re im)","(+.f64 im re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 im re))","(+.f64 im (fma.f64 1/2 (/.f64 (*.f64 re re) im) re))","(fma.f64 1/2 (*.f64 (/.f64 re im) re) (+.f64 im re))","(+.f64 im (fma.f64 1/2 (*.f64 re (/.f64 re im)) re))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 im re)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im (fma.f64 1/2 (/.f64 (*.f64 re re) im) re)))","(fma.f64 1/2 (*.f64 (/.f64 re im) re) (fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im re)))","(fma.f64 1/2 (*.f64 re (/.f64 re im)) (fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im re)))","(*.f64 2 re)","(*.f64 re 2)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (*.f64 re 2))","(fma.f64 re 2 (*.f64 1/2 (/.f64 (*.f64 im im) re)))","(fma.f64 re 2 (*.f64 (/.f64 1/2 re) (*.f64 im im)))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (*.f64 re 2))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 2 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 re 2 (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 re 2 (fma.f64 1/2 (*.f64 (/.f64 im re) im) (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3))))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (*.f64 re 2)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 2 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 re 2 (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (*.f64 (/.f64 im re) im) (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 re 2 (/.f64 1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6))))))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (fma.f64 re 2 (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (*.f64 (pow.f64 im 6) (/.f64 1/16 (pow.f64 re 5))))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(*.f64 (/.f64 (*.f64 im im) re) -1/2)","(*.f64 (*.f64 (/.f64 im re) im) -1/2)","(*.f64 (*.f64 im im) (/.f64 -1/2 re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (*.f64 (/.f64 (*.f64 im im) re) -1/2))","(fma.f64 (/.f64 (*.f64 im im) re) -1/2 (*.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8))","(fma.f64 (*.f64 (/.f64 im re) im) -1/2 (*.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8))","(fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (*.f64 (/.f64 (*.f64 im im) re) -1/2)))","(fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (fma.f64 (/.f64 (*.f64 im im) re) -1/2 (/.f64 -1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6)))))","(fma.f64 (*.f64 (/.f64 im re) im) -1/2 (fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (/.f64 -1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6)))))","(fma.f64 (*.f64 im (/.f64 im re)) -1/2 (fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (*.f64 (pow.f64 im 6) (/.f64 -1/16 (pow.f64 re 5)))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (*.f64 (/.f64 (*.f64 im im) re) -1/2))))","(fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (fma.f64 1/2 (/.f64 (fma.f64 1/16 (pow.f64 im 8) (*.f64 (pow.f64 im 8) 1/64)) (pow.f64 re 7)) (fma.f64 (/.f64 (*.f64 im im) re) -1/2 (/.f64 -1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6))))))","(fma.f64 1/2 (/.f64 (*.f64 (pow.f64 im 8) 5/64) (pow.f64 re 7)) (fma.f64 (*.f64 (/.f64 im re) im) -1/2 (fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (/.f64 -1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6))))))","(fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (fma.f64 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) -1/16 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (/.f64 (*.f64 (pow.f64 im 8) 5/128) (pow.f64 re 7)))))","(*.f64 2 re)","(*.f64 re 2)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (*.f64 re 2))","(fma.f64 re 2 (*.f64 1/2 (/.f64 (*.f64 im im) re)))","(fma.f64 re 2 (*.f64 (/.f64 1/2 re) (*.f64 im im)))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (*.f64 re 2))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 2 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 re 2 (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 re 2 (fma.f64 1/2 (*.f64 (/.f64 im re) im) (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3))))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (*.f64 re 2)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 2 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 re 2 (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (*.f64 (/.f64 im re) im) (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 re 2 (/.f64 1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6))))))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (fma.f64 re 2 (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (*.f64 (pow.f64 im 6) (/.f64 1/16 (pow.f64 re 5))))))","im","(+.f64 re im)","(+.f64 im re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 im re))","(+.f64 im (fma.f64 1/2 (/.f64 (*.f64 re re) im) re))","(fma.f64 1/2 (*.f64 (/.f64 re im) re) (+.f64 im re))","(+.f64 im (fma.f64 1/2 (*.f64 re (/.f64 re im)) re))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 im re)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im (fma.f64 1/2 (/.f64 (*.f64 re re) im) re)))","(fma.f64 1/2 (*.f64 (/.f64 re im) re) (fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im re)))","(fma.f64 1/2 (*.f64 re (/.f64 re im)) (fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im re)))","(*.f64 -1 im)","(neg.f64 im)","(+.f64 re (*.f64 -1 im))","(+.f64 re (neg.f64 im))","(-.f64 re im)","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im)))","(+.f64 re (-.f64 (*.f64 (/.f64 (*.f64 re re) im) -1/2) im))","(-.f64 (fma.f64 (*.f64 (/.f64 re im) re) -1/2 re) im)","(-.f64 re (fma.f64 1/2 (*.f64 re (/.f64 re im)) im))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))))","(+.f64 (-.f64 (*.f64 (/.f64 (*.f64 re re) im) -1/2) im) (fma.f64 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) 1/8 re))","(fma.f64 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) 1/8 (-.f64 (fma.f64 (*.f64 (/.f64 re im) re) -1/2 re) im))","(-.f64 (fma.f64 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) 1/8 re) (fma.f64 1/2 (*.f64 re (/.f64 re im)) im))","(fma.f64 (*.f64 re re) (/.f64 -1/2 im) (fma.f64 (pow.f64 re 4) (/.f64 1/8 (pow.f64 im 3)) (-.f64 re im)))"]],"stop":[["node limit",1]],"time":52.677978515625,"type":"simplify"},{"compiler":[[1189,756]],"time":13.252197265625,"type":"eval"},{"alts":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (neg.f64 im))))","fresh",48.501427099443866],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im)))))))","next",16.979752992698515],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im)))))","done",14.070460287884416],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3)))))))","fresh",55.9182690253809],["(*.f64 1/2 (sqrt.f64 (*.f64 2 im)))","fresh",48.962360533202926],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","fresh",54.99722014174851]],"compiler":[[9,8],[14,11],[12,9],[23,18],[8,7],[14,12],[9,8],[14,11],[23,18],[8,7],[14,12]],"count":[[65,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[64,5],"picked":[1,1]}],"min-error":[8.471192399620044],"time":12.074951171875,"type":"prune"},{"compiler":[[58,18]],"locations":[["(+.f64 re (hypot.f64 re im))",0.6262961606704236,false],["(expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im))))",3.538296036521097,true]],"time":9.946044921875,"type":"localize"},{"count":[[1,24]],"series":[["(expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im))))","im","-inf",0.173828125],["(expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im))))","im","inf",0.198974609375],["(expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im))))","im","0",0.171875],["(expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im))))","re","-inf",0.239990234375],["(expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im))))","re","inf",0.199951171875],["(expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im))))","re","0",0.23193359375]],"time":1.302978515625,"type":"series"},{"count":[[1,37]],"egraph":[[2,1740,7,0.017140209],[1,129,7,0.002317584],[0,7,7,0.000171084]],"inputs":[["(expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 re (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (hypot.f64 re im) re)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (+.f64 re (hypot.f64 re im)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (+.f64 re (hypot.f64 re im)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 re re) (-.f64 re (hypot.f64 re im))) (/.f64 (pow.f64 (hypot.f64 re im) 2) (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 re (hypot.f64 re im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 re (hypot.f64 re im))) (pow.f64 (cbrt.f64 (+.f64 re (hypot.f64 re im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 re (hypot.f64 re im))) 2) (cbrt.f64 (+.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 re (hypot.f64 re im))) (sqrt.f64 (+.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 re 3) (pow.f64 (hypot.f64 re im) 3)) (/.f64 1 (fma.f64 re re (*.f64 (hypot.f64 re im) (-.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 re re) (pow.f64 (hypot.f64 re im) 2)) (/.f64 1 (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 re re (*.f64 (hypot.f64 re im) (-.f64 (hypot.f64 re im) re))) (+.f64 (pow.f64 re 3) (pow.f64 (hypot.f64 re im) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 re (hypot.f64 re im)) (-.f64 (*.f64 re re) (pow.f64 (hypot.f64 re im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 re 3) (pow.f64 (hypot.f64 re im) 3)) (fma.f64 re re (*.f64 (hypot.f64 re im) (-.f64 (hypot.f64 re im) re))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 re 3) (pow.f64 (hypot.f64 re im) 3)) (+.f64 (pow.f64 (hypot.f64 re im) 2) (-.f64 (*.f64 re re) (*.f64 re (hypot.f64 re im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 re re) (pow.f64 (hypot.f64 re im) 2)) (-.f64 re (hypot.f64 re im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 re 3) (pow.f64 (hypot.f64 re im) 3))) (neg.f64 (fma.f64 re re (*.f64 (hypot.f64 re im) (-.f64 (hypot.f64 re im) re)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 re re) (pow.f64 (hypot.f64 re im) 2))) (neg.f64 (-.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 (+.f64 re (hypot.f64 re im)) 1) 3) 1) (+.f64 (*.f64 (+.f64 (+.f64 re (hypot.f64 re im)) 1) (+.f64 (+.f64 re (hypot.f64 re im)) 1)) (+.f64 1 (*.f64 (+.f64 (+.f64 re (hypot.f64 re im)) 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 (+.f64 re (hypot.f64 re im)) 1) (+.f64 (+.f64 re (hypot.f64 re im)) 1)) 1) (+.f64 (+.f64 (+.f64 re (hypot.f64 re im)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (hypot.f64 re im) 2) (*.f64 re re)) (-.f64 (hypot.f64 re im) re))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 re (hypot.f64 re im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 re (hypot.f64 re im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 re (hypot.f64 re im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 re (hypot.f64 re im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 re (hypot.f64 re im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 re (hypot.f64 re im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 re (hypot.f64 re im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 re (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 re im) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 re) 2) (cbrt.f64 re) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (hypot.f64 re im)) 2) (cbrt.f64 (hypot.f64 re im)) re)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 re) (sqrt.f64 re) (hypot.f64 re im))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (hypot.f64 re im)) (sqrt.f64 (hypot.f64 re im)) re)))))"]],"rules":[["egg-rr",37]],"stop":[["node limit",1]],"time":35.347900390625,"type":"rewrite"},{"count":[[61,68]],"egraph":[[5,7632,428,0.036201459],[4,5567,428,0.024060293],[3,2279,428,0.012737501],[2,569,431,0.004338668],[1,193,442,0.001267251],[0,67,449,0.000320792]],"inputs":[["im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(*.f64 2 re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","im","(+.f64 re im)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(*.f64 -1 im)","(+.f64 re (*.f64 -1 im))","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))"]],"method":["egg-herbie"],"outputs":[["im","(+.f64 re im)","(+.f64 im re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 im re))","(+.f64 im (fma.f64 1/2 (/.f64 (*.f64 re re) im) re))","(fma.f64 1/2 (*.f64 (/.f64 re im) re) (+.f64 im re))","(+.f64 im (fma.f64 1/2 (*.f64 re (/.f64 re im)) re))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 im re)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im (fma.f64 1/2 (/.f64 (*.f64 re re) im) re)))","(fma.f64 1/2 (*.f64 (/.f64 re im) re) (fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im re)))","(fma.f64 1/2 (*.f64 re (/.f64 re im)) (fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im re)))","(*.f64 2 re)","(*.f64 re 2)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (*.f64 re 2))","(fma.f64 re 2 (*.f64 1/2 (/.f64 (*.f64 im im) re)))","(fma.f64 re 2 (*.f64 (/.f64 1/2 re) (*.f64 im im)))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (*.f64 re 2))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 2 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 re 2 (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 re 2 (fma.f64 1/2 (*.f64 (/.f64 im re) im) (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3))))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (*.f64 re 2)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 2 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 re 2 (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (*.f64 (/.f64 im re) im) (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 re 2 (/.f64 1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6))))))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (fma.f64 re 2 (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (*.f64 (pow.f64 im 6) (/.f64 1/16 (pow.f64 re 5))))))","(*.f64 -1/2 (/.f64 (pow.f64 im 2) re))","(*.f64 (/.f64 (*.f64 im im) re) -1/2)","(*.f64 (*.f64 (/.f64 im re) im) -1/2)","(*.f64 (*.f64 im im) (/.f64 -1/2 re))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (*.f64 (/.f64 (*.f64 im im) re) -1/2))","(fma.f64 (/.f64 (*.f64 im im) re) -1/2 (*.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8))","(fma.f64 (*.f64 (/.f64 im re) im) -1/2 (*.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8))","(fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (*.f64 (/.f64 (*.f64 im im) re) -1/2)))","(fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (fma.f64 (/.f64 (*.f64 im im) re) -1/2 (/.f64 -1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6)))))","(fma.f64 (*.f64 (/.f64 im re) im) -1/2 (fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (/.f64 -1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6)))))","(fma.f64 (*.f64 im (/.f64 im re)) -1/2 (fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (*.f64 (pow.f64 im 6) (/.f64 -1/16 (pow.f64 re 5)))))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7))) (+.f64 (*.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(fma.f64 1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 1/2 (/.f64 (+.f64 (pow.f64 (*.f64 -1/8 (pow.f64 im 4)) 2) (*.f64 1/16 (pow.f64 im 8))) (pow.f64 re 7)) (fma.f64 -1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (*.f64 (/.f64 (*.f64 im im) re) -1/2))))","(fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (fma.f64 1/2 (/.f64 (fma.f64 1/16 (pow.f64 im 8) (*.f64 (pow.f64 im 8) 1/64)) (pow.f64 re 7)) (fma.f64 (/.f64 (*.f64 im im) re) -1/2 (/.f64 -1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6))))))","(fma.f64 1/2 (/.f64 (*.f64 (pow.f64 im 8) 5/64) (pow.f64 re 7)) (fma.f64 (*.f64 (/.f64 im re) im) -1/2 (fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (/.f64 -1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6))))))","(fma.f64 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) 1/8 (fma.f64 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) -1/16 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (/.f64 (*.f64 (pow.f64 im 8) 5/128) (pow.f64 re 7)))))","(*.f64 2 re)","(*.f64 re 2)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (*.f64 2 re))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (*.f64 re 2))","(fma.f64 re 2 (*.f64 1/2 (/.f64 (*.f64 im im) re)))","(fma.f64 re 2 (*.f64 (/.f64 1/2 re) (*.f64 im im)))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (*.f64 re 2))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 2 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 re 2 (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)))))","(fma.f64 re 2 (fma.f64 1/2 (*.f64 (/.f64 im re) im) (/.f64 (*.f64 -1/8 (pow.f64 im 4)) (pow.f64 re 3))))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (*.f64 re 2)))","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 im 2) re)) (+.f64 (*.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5))) (+.f64 (*.f64 2 re) (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 2 re (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (/.f64 (*.f64 im im) re) (fma.f64 1/16 (/.f64 (pow.f64 im 6) (pow.f64 re 5)) (fma.f64 re 2 (*.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3))))))","(fma.f64 1/2 (*.f64 (/.f64 im re) im) (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (fma.f64 re 2 (/.f64 1/16 (/.f64 (pow.f64 re 5) (pow.f64 im 6))))))","(fma.f64 1/2 (*.f64 im (/.f64 im re)) (fma.f64 re 2 (fma.f64 -1/8 (/.f64 (pow.f64 im 4) (pow.f64 re 3)) (*.f64 (pow.f64 im 6) (/.f64 1/16 (pow.f64 re 5))))))","im","(+.f64 re im)","(+.f64 im re)","(+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im))","(fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 im re))","(+.f64 im (fma.f64 1/2 (/.f64 (*.f64 re re) im) re))","(fma.f64 1/2 (*.f64 (/.f64 re im) re) (+.f64 im re))","(+.f64 im (fma.f64 1/2 (*.f64 re (/.f64 re im)) re))","(+.f64 (*.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 re 2) im)) (+.f64 re im)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (fma.f64 1/2 (/.f64 (*.f64 re re) im) (+.f64 im re)))","(fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im (fma.f64 1/2 (/.f64 (*.f64 re re) im) re)))","(fma.f64 1/2 (*.f64 (/.f64 re im) re) (fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im re)))","(fma.f64 1/2 (*.f64 re (/.f64 re im)) (fma.f64 -1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 im re)))","(*.f64 -1 im)","(neg.f64 im)","(+.f64 re (*.f64 -1 im))","(+.f64 re (neg.f64 im))","(-.f64 re im)","(+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im)))","(+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im)))","(+.f64 re (-.f64 (*.f64 (/.f64 (*.f64 re re) im) -1/2) im))","(-.f64 (fma.f64 (*.f64 (/.f64 re im) re) -1/2 re) im)","(-.f64 re (fma.f64 1/2 (*.f64 re (/.f64 re im)) im))","(+.f64 (*.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3))) (+.f64 re (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 re 2) im)) (*.f64 -1 im))))","(fma.f64 1/8 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) (+.f64 re (fma.f64 -1/2 (/.f64 (*.f64 re re) im) (neg.f64 im))))","(+.f64 (-.f64 (*.f64 (/.f64 (*.f64 re re) im) -1/2) im) (fma.f64 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) 1/8 re))","(fma.f64 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) 1/8 (-.f64 (fma.f64 (*.f64 (/.f64 re im) re) -1/2 re) im))","(-.f64 (fma.f64 (/.f64 (pow.f64 re 4) (pow.f64 im 3)) 1/8 re) (fma.f64 1/2 (*.f64 re (/.f64 re im)) im))","(fma.f64 (*.f64 re re) (/.f64 -1/2 im) (fma.f64 (pow.f64 re 4) (/.f64 1/8 (pow.f64 im 3)) (-.f64 re im)))"]],"stop":[["node limit",1]],"time":53.381103515625,"type":"simplify"},{"compiler":[[2602,1656]],"time":28.718017578125,"type":"eval"},{"alts":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","fresh",54.99722014174851],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im)))))))","done",16.979752992698515],["(*.f64 1/2 (sqrt.f64 (*.f64 2 im)))","fresh",48.962360533202926],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (neg.f64 im))))","next",48.501427099443866],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 im)))))","fresh",49.713434844065105],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3)))))))","fresh",55.9182690253809],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im)))))","done",14.070460287884416],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 (neg.f64 im))))))","fresh",49.44331342030298]],"compiler":[[14,12],[14,11],[8,7],[9,8],[10,9],[23,18],[12,9],[11,10],[14,12],[8,7],[9,8],[10,9],[23,18],[11,10]],"count":[[138,8]],"kept":[{"done":[1,1],"fresh":[4,1],"new":[132,5],"picked":[1,1]}],"min-error":[8.471192399620044],"time":24.423828125,"type":"prune"},{"compiler":[[23,15]],"time":5.33203125,"type":"localize"},{"compiler":[[2,2]],"time":0.092041015625,"type":"eval"},{"alts":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","fresh",54.99722014174851],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im)))))))","done",16.979752992698515],["(*.f64 1/2 (sqrt.f64 (*.f64 2 im)))","next",48.962360533202926],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (neg.f64 im))))","done",48.501427099443866],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 im)))))","fresh",49.713434844065105],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3)))))))","fresh",55.9182690253809],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im)))))","done",14.070460287884416],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 (neg.f64 im))))))","fresh",49.44331342030298]],"compiler":[[14,12],[14,11],[8,7],[9,8],[10,9],[23,18],[12,9],[11,10],[14,12],[8,7],[10,9],[23,18],[11,10]],"count":[[8,8]],"kept":[{"done":[2,2],"fresh":[5,5],"new":[0,0],"picked":[1,1]}],"min-error":[8.471192399620044],"time":3.7080078125,"type":"prune"},{"compiler":[[18,14]],"time":4.489990234375,"type":"localize"},{"compiler":[[2,2]],"time":0.09912109375,"type":"eval"},{"alts":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","fresh",54.99722014174851],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im)))))))","done",16.979752992698515],["(*.f64 1/2 (sqrt.f64 (*.f64 2 im)))","done",48.962360533202926],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (neg.f64 im))))","done",48.501427099443866],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 im)))))","fresh",49.713434844065105],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3)))))))","fresh",55.9182690253809],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im)))))","done",14.070460287884416],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 (neg.f64 im))))))","fresh",49.44331342030298]],"compiler":[[14,12],[14,11],[8,7],[9,8],[10,9],[23,18],[12,9],[11,10]],"count":[[8,8]],"kept":[{"done":[3,3],"fresh":[4,4],"new":[0,0],"picked":[1,1]}],"min-error":[8.471192399620044],"time":2.518798828125,"type":"prune"},{"accuracy":[10.28698921920094],"baseline":[14.070460287884416],"branch":[["re",11.497468767108003,2],["im",14.070460287884412,1],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))",10.28698921920094,2],["(sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)))",10.28698921920094,2],["(*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))",10.573551599829932,2],["(+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)",10.573551599829932,2],["(*.f64 im im)",14.070460287884414,1]],"compiler":[[3,2],[3,2],[17,12],[15,10],[14,9],[12,7],[5,3],[142,106]],"count":[[12,2]],"inputs":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (neg.f64 im))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 im)))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3)))))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 (neg.f64 im))))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (neg.f64 im))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (expm1.f64 (log1p.f64 (+.f64 re (hypot.f64 re im)))))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3)))))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 im)))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (*.f64 -1/2 (/.f64 (pow.f64 im 2) re)))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im)))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))"]],"link":["."],"name":["math.sqrt on complex, real part"],"oracle":[64.0],"outputs":[["(*.f64 1/2 (sqrt.f64 (*.f64 2 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3)))))))","(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im)))))"]],"time":50.550048828125,"times":[["re",10.09619140625],["im",5.407958984375],["(*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))))",6.866943359375],["(sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)))",6.997802734375],["(*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))",7.132080078125],["(+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re)",7.22900390625],["(*.f64 im im)",3.6728515625]],"type":"regimes"},{"bstep":[[0.0,1.2212077599189318e-125,0.026123046875]],"compiler":[[7,6],[15,10]],"method":["left-value"],"time":0.14208984375,"type":"bsearch"},{"compiler":[[49,36]],"egraph":[[1,45,71,9.8083e-5],[0,35,71,5.275e-5]],"inputs":[["(if (<=.f64 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))) 0) (*.f64 1/2 (sqrt.f64 (*.f64 2 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3))))))) (*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (sqrt.f64 (*.f64 2 (+.f64 (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im))) re))) 0) (*.f64 1/2 (sqrt.f64 (*.f64 2 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3))))))) (*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im))))))","(if (<=.f64 (sqrt.f64 (*.f64 2 (+.f64 re (sqrt.f64 (+.f64 (*.f64 re re) (*.f64 im im)))))) 0) (*.f64 1/2 (sqrt.f64 (*.f64 2 (fma.f64 (*.f64 im (/.f64 im re)) -1/2 (*.f64 (pow.f64 im 4) (/.f64 1/8 (pow.f64 re 3))))))) (*.f64 1/2 (sqrt.f64 (*.f64 2 (+.f64 re (hypot.f64 re im))))))"]],"stop":[["fuel",1],["saturated",1]],"time":9.135986328125,"type":"simplify"},{"time":0.02197265625,"type":"soundness"},{"compiler":[[49,36]],"remove-preprocessing":[[]],"time":19.611083984375,"type":"end"}]
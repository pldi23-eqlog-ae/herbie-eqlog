[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.9102432515937835,0.0887804243247956,0.0009763240814208984],[11,0.8819505888968706,0.11707308702170849,0.0009763240814208984],[10,0.8312189178541303,0.16780475806444883,0.0009763240814208984],[9,0.7804872468113899,0.21853642910718918,0.0009763240814208984],[8,0.7024385221302509,0.29658515378832817,0.0009763240814208984],[7,0.6243897974491119,0.37463387846946716,0.0009763240814208984],[6,0.43707285821437836,0.5619508177042007,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":30.930908203125,"type":"analyze"},{"outcomes":[["body",512,"valid",92.23876953125,897],["body",1024,"valid",230.588134765625,1369],["body",2048,"valid",0.322998046875,1],["body",256,"valid",299.425048828125,5989]],"time":631.1689453125,"type":"sample"},{"compiler":[[8,5]],"egraph":[[0,2,2,1.5e-6],[4,31,18,0.000309625],[3,29,18,0.000241792],[2,23,18,0.000175125],[1,15,18,0.000112209],[0,9,18,5.4e-5]],"inputs":[["0","1"],["(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 y (/.f64 (sin.f64 x) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 x (/.f64 y (sin.f64 y)))","(*.f64 y (/.f64 (sin.f64 x) x))","(*.f64 (/.f64 y x) (sin.f64 x))","(*.f64 (sin.f64 x) (/.f64 y x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.985107421875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[4,18,9,0.00020841599999999998],[3,17,9,0.00016399899999999999],[2,13,9,0.00011920799999999999],[1,9,9,7.758299999999999e-5],[0,6,9,3.9208e-5]],"inputs":[["(*.f64 x (/.f64 (sin.f64 y) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (/.f64 (sin.f64 y) y))"]],"stop":[["saturated",1]],"time":10.19482421875,"type":"simplify"},{"compiler":[[8,5]],"time":0.211181640625,"type":"eval"},{"alts":[["(*.f64 x (/.f64 (sin.f64 y) y))","next",0.140625]],"compiler":[[8,5],[8,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.140625],"time":0.64892578125,"type":"prune"},{"compiler":[[16,5]],"locations":[["(sin.f64 y)",0.015625,true],["(*.f64 x (/.f64 (sin.f64 y) y))",0.10546875,true],["(/.f64 (sin.f64 y) y)",0.14453125,true]],"time":4.156982421875,"type":"localize"},{"count":[[3,32]],"series":[["(sin.f64 y)","y","-inf",0.1328125],["(sin.f64 y)","y","inf",0.135009765625],["(sin.f64 y)","y","0",0.244140625],["(*.f64 x (/.f64 (sin.f64 y) y))","y","-inf",0.594970703125],["(*.f64 x (/.f64 (sin.f64 y) y))","y","inf",0.72705078125],["(*.f64 x (/.f64 (sin.f64 y) y))","y","0",0.329833984375],["(*.f64 x (/.f64 (sin.f64 y) y))","x","-inf",0.330078125],["(*.f64 x (/.f64 (sin.f64 y) y))","x","inf",0.385986328125],["(*.f64 x (/.f64 (sin.f64 y) y))","x","0",0.880126953125],["(/.f64 (sin.f64 y) y)","y","-inf",0.533935546875],["(/.f64 (sin.f64 y) y)","y","inf",0.330078125],["(/.f64 (sin.f64 y) y)","y","0",0.367919921875]],"time":5.14892578125,"type":"series"},{"count":[[3,69]],"egraph":[[2,1682,18,0.017191209],[1,125,18,0.002222209],[0,6,18,0.000151917]],"inputs":[["(/.f64 (sin.f64 y) y)","(*.f64 x (/.f64 (sin.f64 y) y))","(sin.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (sin.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (pow.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 2) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (*.f64 (sqrt.f64 (sin.f64 y)) (pow.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) (sqrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) 1) (/.f64 (cbrt.f64 (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 y)) 1) (/.f64 (sqrt.f64 (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sin.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 y)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (sin.f64 y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (sin.f64 y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (sin.f64 y)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 y) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (sin.f64 y) y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (/.f64 (sin.f64 y) y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 y (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 (sin.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 y) x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) x) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) x) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 y) x) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 (sin.f64 y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (sin.f64 y) y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 y) y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 y) y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 (sin.f64 y) y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 y) y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 y) y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (/.f64 (sin.f64 y) y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 (sin.f64 y) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 y) y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 (sin.f64 y) y) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 y)))))))"]],"rules":[["egg-rr",16],["egg-rr",22],["egg-rr",31]],"stop":[["node limit",1]],"time":39.076171875,"type":"rewrite"},{"count":[[101,91]],"egraph":[[8,7728,327,0.046134126000000004],[7,7486,327,0.036605334],[6,4158,327,0.027010709],[5,3531,327,0.017190709],[4,2590,327,0.011029917],[3,1071,327,0.006345875],[2,336,329,0.002506167],[1,134,338,0.000897084],[0,50,344,0.00026025]],"inputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/6 (*.f64 y y)))","(fma.f64 -1/6 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/6 (*.f64 y y) 1) (*.f64 1/120 (pow.f64 y 4)))","(fma.f64 -1/6 (*.f64 y y) (fma.f64 1/120 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(fma.f64 -1/5040 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4))) (fma.f64 -1/5040 (pow.f64 y 6) 1))","(fma.f64 -1/5040 (pow.f64 y 6) (fma.f64 -1/6 (*.f64 y y) (fma.f64 1/120 (pow.f64 y 4) 1)))","(fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/120) -1/6) (fma.f64 -1/5040 (pow.f64 y 6) 1))","(fma.f64 -1/6 (*.f64 y y) (fma.f64 1/120 (pow.f64 y 4) (fma.f64 -1/5040 (pow.f64 y 6) 1)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) x)","(*.f64 (fma.f64 -1/6 (*.f64 y y) 1) x)","(fma.f64 y (*.f64 y (*.f64 -1/6 x)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) x))","(+.f64 x (*.f64 x (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4)))))","(*.f64 x (fma.f64 -1/6 (*.f64 y y) (fma.f64 1/120 (pow.f64 y 4) 1)))","(*.f64 (fma.f64 -1/6 (*.f64 y y) (fma.f64 1/120 (pow.f64 y 4) 1)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) (fma.f64 -1/5040 (*.f64 (pow.f64 y 6) x) x)))","(+.f64 (*.f64 (fma.f64 -1/5040 (pow.f64 y 6) 1) x) (*.f64 x (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 x (*.f64 x (fma.f64 -1/5040 (pow.f64 y 6) (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4))))))","(*.f64 x (fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/120) -1/6) (fma.f64 -1/5040 (pow.f64 y 6) 1)))","(*.f64 (fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/120) -1/6) (fma.f64 -1/5040 (pow.f64 y 6) 1)) x)","(*.f64 (fma.f64 -1/6 (*.f64 y y) (fma.f64 1/120 (pow.f64 y 4) (fma.f64 -1/5040 (pow.f64 y 6) 1))) x)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 (fma.f64 1/120 (pow.f64 y 5) y) (*.f64 -1/5040 (pow.f64 y 7))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y)))"]],"stop":[["node limit",1]],"time":63.677001953125,"type":"simplify"},{"compiler":[[970,477]],"time":11.39794921875,"type":"eval"},{"alts":[["(*.f64 x (/.f64 (sin.f64 y) y))","done",0.140625],["(/.f64 1 (/.f64 y (*.f64 (sin.f64 y) x)))","fresh",5.768339160227231],["(/.f64 (/.f64 (*.f64 (sin.f64 y) x) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))","fresh",5.964038962482812],["(/.f64 x (/.f64 y (sin.f64 y)))","next",0.1484375],["(pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 y) y) x)) 3)","fresh",0.6232377930532609]],"compiler":[[8,5],[10,7],[14,9],[8,5],[11,8],[10,7],[14,9],[8,5],[11,8]],"count":[[92,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[91,4],"picked":[1,1]}],"min-error":[0],"time":18.06884765625,"type":"prune"},{"compiler":[[16,5]],"locations":[["(sin.f64 y)",0.015625,false],["(/.f64 x (/.f64 y (sin.f64 y)))",0.125,true],["(/.f64 y (sin.f64 y))",0.12890625,true]],"time":4.125,"type":"localize"},{"count":[[2,28]],"series":[["(/.f64 x (/.f64 y (sin.f64 y)))","y","-inf",0.150146484375],["(/.f64 x (/.f64 y (sin.f64 y)))","y","inf",0.16796875],["(/.f64 x (/.f64 y (sin.f64 y)))","y","0",0.159912109375],["(/.f64 x (/.f64 y (sin.f64 y)))","x","-inf",0.1689453125],["(/.f64 x (/.f64 y (sin.f64 y)))","x","inf",0.15185546875],["(/.f64 x (/.f64 y (sin.f64 y)))","x","0",0.154052734375],["(/.f64 y (sin.f64 y))","y","-inf",0.385009765625],["(/.f64 y (sin.f64 y))","y","inf",0.3779296875],["(/.f64 y (sin.f64 y))","y","0",0.30712890625]],"time":2.126220703125,"type":"series"},{"count":[[2,72]],"egraph":[[2,1925,15,0.019088709],[1,131,15,0.002398292],[0,6,15,0.0001495]],"inputs":[["(/.f64 y (sin.f64 y))","(/.f64 x (/.f64 y (sin.f64 y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 y (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) (cbrt.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 y (sin.f64 y))) (sqrt.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (/.f64 y (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (cbrt.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (sin.f64 y))) (/.f64 y (sqrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (sin.f64 y))) (/.f64 (cbrt.f64 y) (sqrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y (sin.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 y (sin.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sin.f64 y) (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 2) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (sqrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (/.f64 (neg.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x (/.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) y) (/.f64 (cbrt.f64 x) (/.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) y) (/.f64 (sqrt.f64 x) (/.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 y (sin.f64 y)))) (/.f64 x (sqrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (/.f64 y (sin.f64 y)))) (/.f64 (cbrt.f64 x) (sqrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (neg.f64 y)) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) 1) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x y) (sqrt.f64 (sin.f64 y))) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 y (sin.f64 y)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (/.f64 (neg.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (sin.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))))"]],"rules":[["egg-rr",41],["egg-rr",31]],"stop":[["node limit",1]],"time":40.658935546875,"type":"rewrite"},{"count":[[100,87]],"egraph":[[6,7213,281,0.036800875],[5,5368,281,0.025614583],[4,3053,281,0.013326958],[3,781,281,0.005853042],[2,249,284,0.00180075],[1,98,294,0.00064725],[0,39,296,0.000188875]],"inputs":[["1","(+.f64 1 (*.f64 1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 7/360 (pow.f64 y 4))))","(+.f64 1 (+.f64 (*.f64 31/15120 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 7/360 (pow.f64 y 4)))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 1/6 (pow.f64 y 2)))","(+.f64 1 (*.f64 1/6 (*.f64 y y)))","(fma.f64 1/6 (*.f64 y y) 1)","(fma.f64 y (*.f64 1/6 y) 1)","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 7/360 (pow.f64 y 4))))","(+.f64 1 (fma.f64 1/6 (*.f64 y y) (*.f64 7/360 (pow.f64 y 4))))","(fma.f64 1/6 (*.f64 y y) (fma.f64 7/360 (pow.f64 y 4) 1))","(fma.f64 (*.f64 y y) (fma.f64 (*.f64 y y) 7/360 1/6) 1)","(+.f64 1 (+.f64 (*.f64 31/15120 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 7/360 (pow.f64 y 4)))))","(+.f64 1 (fma.f64 31/15120 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y y) (*.f64 7/360 (pow.f64 y 4)))))","(fma.f64 31/15120 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y y) (fma.f64 7/360 (pow.f64 y 4) 1)))","(fma.f64 (*.f64 y y) (fma.f64 (*.f64 y y) 7/360 1/6) (fma.f64 31/15120 (pow.f64 y 6) 1))","(fma.f64 1/6 (*.f64 y y) (fma.f64 7/360 (pow.f64 y 4) (fma.f64 31/15120 (pow.f64 y 6) 1)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) x)","(fma.f64 -1/6 (*.f64 y (*.f64 y x)) x)","(*.f64 x (fma.f64 (*.f64 y -1/6) y 1))","(fma.f64 y (*.f64 x (*.f64 y -1/6)) x)","(fma.f64 y (*.f64 y (*.f64 x -1/6)) x)","(*.f64 x (fma.f64 y (*.f64 y -1/6) 1))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) x))","(fma.f64 -1/6 (*.f64 y (*.f64 y x)) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) x))","(fma.f64 x (fma.f64 (*.f64 y y) -1/6 (*.f64 (pow.f64 y 4) 1/120)) x)","(*.f64 x (fma.f64 y (*.f64 y -1/6) (fma.f64 (pow.f64 y 4) 1/120 1)))","(fma.f64 x (fma.f64 y (*.f64 y -1/6) (*.f64 (pow.f64 y 4) 1/120)) x)","(*.f64 x (fma.f64 (pow.f64 y 4) 1/120 (fma.f64 y (*.f64 y -1/6) 1)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) (fma.f64 -1/5040 (*.f64 (pow.f64 y 6) x) x)))","(fma.f64 -1/6 (*.f64 y (*.f64 y x)) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) (fma.f64 (*.f64 (pow.f64 y 6) -1/5040) x x)))","(fma.f64 x (fma.f64 (*.f64 y y) -1/6 (*.f64 (pow.f64 y 4) 1/120)) (*.f64 x (fma.f64 (pow.f64 y 6) -1/5040 1)))","(fma.f64 x (fma.f64 y (*.f64 y -1/6) (fma.f64 (pow.f64 y 4) 1/120 (*.f64 (pow.f64 y 6) -1/5040))) x)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))"]],"stop":[["node limit",1]],"time":52.333984375,"type":"simplify"},{"compiler":[[1220,552]],"time":13.5009765625,"type":"eval"},{"alts":[["(*.f64 x (/.f64 (sin.f64 y) y))","done",0.140625],["(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))","next",0.27181625976844204],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))","fresh",0.2927514160635143],["(pow.f64 (/.f64 (/.f64 y (sin.f64 y)) x) -1)","fresh",0.36636552987144755],["(pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 y) y) x)) 3)","fresh",0.6232377930532609],["(/.f64 (*.f64 (sin.f64 y) x) y)","fresh",5.53640737565707]],"compiler":[[8,5],[10,7],[19,11],[10,7],[11,8],[8,5],[10,7],[19,11],[10,7],[11,8],[8,5]],"count":[[115,6]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[110,4],"picked":[1,0]}],"min-error":[0],"time":24.822021484375,"type":"prune"},{"compiler":[[25,13]],"locations":[["(sin.f64 y)",0.015625,false],["(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))",0.125,true],["(/.f64 1 (sin.f64 y))",0.140625,true],["(*.f64 y (/.f64 1 (sin.f64 y)))",0.20703125,true]],"time":6.31103515625,"type":"localize"},{"count":[[3,40]],"series":[["(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))","y","-inf",0.14697265625],["(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))","y","inf",0.162109375],["(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))","y","0",0.161865234375],["(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))","x","-inf",0.163818359375],["(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))","x","inf",0.14599609375],["(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))","x","0",0.14892578125],["(/.f64 1 (sin.f64 y))","y","-inf",0.35009765625],["(/.f64 1 (sin.f64 y))","y","inf",0.2958984375],["(/.f64 1 (sin.f64 y))","y","0",0.221923828125],["(*.f64 y (/.f64 1 (sin.f64 y)))","y","-inf",0.174072265625],["(*.f64 y (/.f64 1 (sin.f64 y)))","y","inf",0.16015625],["(*.f64 y (/.f64 1 (sin.f64 y)))","y","0",0.19580078125]],"time":2.4599609375,"type":"series"},{"count":[[3,84]],"egraph":[[2,2244,21,0.020438583],[1,167,21,0.0029246660000000002],[0,8,21,0.000217833]],"inputs":[["(*.f64 y (/.f64 1 (sin.f64 y)))","(/.f64 1 (sin.f64 y))","(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 y (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 y) 2) (/.f64 (sin.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 y) (/.f64 (sin.f64 y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (sqrt.f64 (sin.f64 y))) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y 1) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (pow.f64 (cbrt.f64 (sin.f64 y)) 2)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 y) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y -1) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y (sin.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 (/.f64 1 (sin.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (sin.f64 y)) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 y (sin.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1 (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (sin.f64 y))) (cbrt.f64 (pow.f64 (sin.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 y) -2)) (/.f64 1 (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 y) -1/2) (pow.f64 (sin.f64 y) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) -1) (pow.f64 (cbrt.f64 (sin.f64 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (sin.f64 y)) -1) (pow.f64 (sqrt.f64 (sin.f64 y)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (sin.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sin.f64 y) (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 y) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 2) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) (sqrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (/.f64 (neg.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) y) (/.f64 (sqrt.f64 x) (/.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x (/.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) y) (/.f64 (cbrt.f64 x) (/.f64 1 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (/.f64 1 (sin.f64 y))) (/.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 1 (sin.f64 y))) (/.f64 (cbrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 y (sin.f64 y)))) (/.f64 x (sqrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (/.f64 y (sin.f64 y)))) (/.f64 (cbrt.f64 x) (sqrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) 1) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 x y) -1) (neg.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 y) (/.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 x (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (/.f64 (neg.f64 y) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (sin.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 y) (/.f64 x y))))))))"]],"rules":[["egg-rr",40],["egg-rr",20],["egg-rr",24]],"stop":[["node limit",1]],"time":44.64208984375,"type":"rewrite"},{"count":[[124,106]],"egraph":[[9,7540,378,0.05760416700000001],[8,7193,378,0.04743929200000001],[7,6976,378,0.037531667000000005],[6,4504,378,0.027938042000000003],[5,3793,378,0.018809959],[4,2803,378,0.011991834],[3,1113,378,0.006754959],[2,340,381,0.002498167],[1,132,395,0.000867834],[0,52,399,0.000251209]],"inputs":[["1","(+.f64 1 (*.f64 1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 7/360 (pow.f64 y 4))))","(+.f64 1 (+.f64 (*.f64 31/15120 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 7/360 (pow.f64 y 4)))))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 1/6 y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/6 y) (*.f64 7/360 (pow.f64 y 3))))","(+.f64 (*.f64 31/15120 (pow.f64 y 5)) (+.f64 (/.f64 1 y) (+.f64 (*.f64 1/6 y) (*.f64 7/360 (pow.f64 y 3)))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 1/6 (pow.f64 y 2)))","(+.f64 1 (*.f64 1/6 (*.f64 y y)))","(fma.f64 1/6 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 7/360 (pow.f64 y 4))))","(+.f64 1 (fma.f64 1/6 (*.f64 y y) (*.f64 7/360 (pow.f64 y 4))))","(+.f64 (fma.f64 1/6 (*.f64 y y) 1) (*.f64 7/360 (pow.f64 y 4)))","(fma.f64 1/6 (*.f64 y y) (fma.f64 7/360 (pow.f64 y 4) 1))","(+.f64 1 (+.f64 (*.f64 31/15120 (pow.f64 y 6)) (+.f64 (*.f64 1/6 (pow.f64 y 2)) (*.f64 7/360 (pow.f64 y 4)))))","(+.f64 1 (fma.f64 31/15120 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y y) (*.f64 7/360 (pow.f64 y 4)))))","(fma.f64 31/15120 (pow.f64 y 6) (fma.f64 1/6 (*.f64 y y) (fma.f64 7/360 (pow.f64 y 4) 1)))","(fma.f64 1/6 (*.f64 y y) (fma.f64 31/15120 (pow.f64 y 6) (fma.f64 7/360 (pow.f64 y 4) 1)))","(fma.f64 1/6 (*.f64 y y) (fma.f64 7/360 (pow.f64 y 4) (fma.f64 31/15120 (pow.f64 y 6) 1)))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 y (sin.f64 y))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (*.f64 1/6 y))","(fma.f64 1/6 y (/.f64 1 y))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 1/6 y) (*.f64 7/360 (pow.f64 y 3))))","(+.f64 (/.f64 1 y) (fma.f64 1/6 y (*.f64 7/360 (pow.f64 y 3))))","(+.f64 (fma.f64 1/6 y (/.f64 1 y)) (*.f64 7/360 (pow.f64 y 3)))","(fma.f64 1/6 y (fma.f64 7/360 (pow.f64 y 3) (/.f64 1 y)))","(+.f64 (*.f64 31/15120 (pow.f64 y 5)) (+.f64 (/.f64 1 y) (+.f64 (*.f64 1/6 y) (*.f64 7/360 (pow.f64 y 3)))))","(fma.f64 31/15120 (pow.f64 y 5) (+.f64 (/.f64 1 y) (fma.f64 1/6 y (*.f64 7/360 (pow.f64 y 3)))))","(fma.f64 31/15120 (pow.f64 y 5) (+.f64 (fma.f64 1/6 y (/.f64 1 y)) (*.f64 7/360 (pow.f64 y 3))))","(fma.f64 31/15120 (pow.f64 y 5) (fma.f64 1/6 y (fma.f64 7/360 (pow.f64 y 3) (/.f64 1 y))))","(fma.f64 1/6 y (fma.f64 7/360 (pow.f64 y 3) (fma.f64 31/15120 (pow.f64 y 5) (/.f64 1 y))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) x)","(fma.f64 x (*.f64 (*.f64 y y) -1/6) x)","(fma.f64 (*.f64 y y) (*.f64 x -1/6) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) x))","(fma.f64 x (fma.f64 (*.f64 y y) -1/6 (*.f64 (pow.f64 y 4) 1/120)) x)","(fma.f64 x (fma.f64 (pow.f64 y 4) 1/120 (*.f64 (*.f64 y y) -1/6)) x)","(*.f64 x (fma.f64 (*.f64 y y) -1/6 (fma.f64 (pow.f64 y 4) 1/120 1)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) (fma.f64 -1/5040 (*.f64 (pow.f64 y 6) x) x)))","(fma.f64 x (fma.f64 (*.f64 y y) -1/6 (*.f64 (pow.f64 y 4) 1/120)) (*.f64 x (fma.f64 (pow.f64 y 6) -1/5040 1)))","(fma.f64 x (fma.f64 y (*.f64 y -1/6) (fma.f64 (pow.f64 y 4) 1/120 (*.f64 (pow.f64 y 6) -1/5040))) x)","(*.f64 x (fma.f64 y (*.f64 y -1/6) (fma.f64 (pow.f64 y 4) 1/120 (fma.f64 (pow.f64 y 6) -1/5040 1))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 x (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x y))"]],"stop":[["node limit",1]],"time":76.94677734375,"type":"simplify"},{"compiler":[[1479,763]],"time":17.424072265625,"type":"eval"},{"alts":[["(*.f64 x (/.f64 (sin.f64 y) y))","done",0.140625],["(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))","done",0.27181625976844204],["(/.f64 (*.f64 (sin.f64 y) x) y)","fresh",5.53640737565707],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))","next",0.2927514160635143],["(pow.f64 (/.f64 (/.f64 y (sin.f64 y)) x) -1)","fresh",0.36636552987144755],["(pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 y) y) x)) 3)","fresh",0.6232377930532609]],"compiler":[[8,5],[10,7],[8,5],[19,11],[10,7],[11,8],[8,5],[19,11],[10,7],[11,8]],"count":[[135,6]],"kept":[{"done":[1,1],"fresh":[4,3],"new":[129,1],"picked":[1,1]}],"min-error":[0],"time":29.698974609375,"type":"prune"},{"compiler":[[57,19]],"locations":[["(/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y))))",0.12890625,true],["(/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))",0.140625,true],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))",0.15072250976844204,true],["(pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)",0.26171875,true]],"time":10.695068359375,"type":"localize"},{"count":[[4,48]],"series":[["(/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y))))","y","-inf",0.469970703125],["(/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y))))","y","inf",0.948974609375],["(/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y))))","y","0",1.885009765625],["(/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y))))","x","-inf",0.320068359375],["(/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y))))","x","inf",0.39794921875],["(/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y))))","x","0",1.463134765625],["(/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))","y","-inf",0.510009765625],["(/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))","y","inf",0.334228515625],["(/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))","y","0",0.360107421875],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))","x","-inf",0.253173828125],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))","x","inf",0.239013671875],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))","x","0",0.989990234375],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))","y","-inf",1.807861328125],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))","y","inf",1.361083984375],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))","y","0",0.294921875],["(pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)","y","-inf",0.738037109375],["(pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)","y","inf",1.2109375],["(pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)","y","0",0.43994140625]],"time":14.264892578125,"type":"series"},{"count":[[4,169]],"egraph":[[2,3370,42,0.027711833999999998],[1,259,42,0.004722167],[0,12,42,0.000348125]],"inputs":[["(pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)","(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))","(/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))","(/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) (cbrt.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y (sin.f64 y)) 1/6) (sqrt.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 y (sin.f64 y))) (pow.f64 (/.f64 y (sin.f64 y)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 2)) (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 y) (cbrt.f64 (/.f64 y (sin.f64 y)))) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) (cbrt.f64 y)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (/.f64 y (sin.f64 y)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (/.f64 (sin.f64 y) y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) x) (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 y (sin.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 y (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (pow.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 2)) (/.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) (cbrt.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 (/.f64 y (sin.f64 y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))) (/.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) (sqrt.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 x) (/.f64 (/.f64 y (sin.f64 y)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) x) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (cbrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) (neg.f64 (cbrt.f64 (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) x) (cbrt.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) x)) (neg.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 x)) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (neg.f64 (cbrt.f64 (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) 1) (*.f64 (neg.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -1) (*.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) -1) (*.f64 (neg.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (sqrt.f64 (/.f64 y (sin.f64 y)))) (sqrt.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 (/.f64 y (sin.f64 y)))) (cbrt.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x 1) (/.f64 y (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) (/.f64 1 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 1) (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) x) 1) (cbrt.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) x) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 2)) (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) x) (pow.f64 (/.f64 y (sin.f64 y)) 1/6)) (pow.f64 (/.f64 y (sin.f64 y)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2))) (neg.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) (neg.f64 x)) (neg.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) -1) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (/.f64 (sin.f64 y) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (/.f64 (sin.f64 y) y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (sin.f64 y)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 3) (pow.f64 (/.f64 y (sin.f64 y)) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) x) (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 y (sin.f64 y)) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) (*.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (sin.f64 y)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 3) (pow.f64 (/.f64 y (sin.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (/.f64 (sin.f64 y) y))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) -4) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (sin.f64 y)) -2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 4) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sin.f64 y)) 2) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sin.f64 y)) 3) -2/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) -6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 2) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sin.f64 y)) 1/6) -4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y (sin.f64 y))) -4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 -2/3 (log.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (/.f64 y (sin.f64 y)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -2/3 (log.f64 (/.f64 y (sin.f64 y)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))) (cbrt.f64 (pow.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 2)) (cbrt.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 2) (/.f64 x (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))) (sqrt.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (neg.f64 (cbrt.f64 (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (cbrt.f64 (*.f64 x (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (cbrt.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 2)) (cbrt.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 y (sin.f64 y)) -1/6) (/.f64 x (pow.f64 (/.f64 y (sin.f64 y)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (/.f64 y (sin.f64 y)) 1/6)) (/.f64 (cbrt.f64 x) (pow.f64 (/.f64 y (sin.f64 y)) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 x 3) (/.f64 y (sin.f64 y))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (neg.f64 (cbrt.f64 (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))) 1))))))"]],"rules":[["egg-rr",40],["egg-rr",38],["egg-rr",63],["egg-rr",28]],"stop":[["node limit",1]],"time":57.177001953125,"type":"rewrite"},{"count":[[217,198]],"egraph":[[8,7901,522,0.05735533400000001],[7,6040,522,0.04519104200000001],[6,5388,522,0.033120167000000006],[5,4691,522,0.023988751000000003],[4,2640,522,0.015425917],[3,1469,522,0.007745917],[2,473,524,0.003325417],[1,175,540,0.00112575],[0,67,544,0.00030325]],"inputs":[["1","(+.f64 1 (*.f64 1/9 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 1/9 (pow.f64 y 2)) (*.f64 4/405 (pow.f64 y 4))))","(+.f64 1 (+.f64 (*.f64 1/9 (pow.f64 y 2)) (+.f64 (*.f64 67/76545 (pow.f64 y 6)) (*.f64 4/405 (pow.f64 y 4)))))","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","1","(+.f64 1 (*.f64 -1/9 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (*.f64 1/405 (pow.f64 y 4))))","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (+.f64 (*.f64 1/405 (pow.f64 y 4)) (*.f64 -4/76545 (pow.f64 y 6)))))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","x","(+.f64 (*.f64 -1/18 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/3240 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1/3240 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -53/1224720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 y 2) x)) x)))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 1/9 (pow.f64 y 2)))","(+.f64 1 (*.f64 1/9 (*.f64 y y)))","(fma.f64 1/9 (*.f64 y y) 1)","(fma.f64 y (*.f64 1/9 y) 1)","(+.f64 1 (+.f64 (*.f64 1/9 (pow.f64 y 2)) (*.f64 4/405 (pow.f64 y 4))))","(+.f64 1 (fma.f64 1/9 (*.f64 y y) (*.f64 4/405 (pow.f64 y 4))))","(+.f64 (fma.f64 1/9 (*.f64 y y) 1) (*.f64 4/405 (pow.f64 y 4)))","(fma.f64 1/9 (*.f64 y y) (fma.f64 4/405 (pow.f64 y 4) 1))","(+.f64 1 (+.f64 (*.f64 1/9 (pow.f64 y 2)) (+.f64 (*.f64 67/76545 (pow.f64 y 6)) (*.f64 4/405 (pow.f64 y 4)))))","(+.f64 1 (fma.f64 1/9 (*.f64 y y) (fma.f64 67/76545 (pow.f64 y 6) (*.f64 4/405 (pow.f64 y 4)))))","(+.f64 (fma.f64 1/9 (*.f64 y y) 1) (fma.f64 67/76545 (pow.f64 y 6) (*.f64 4/405 (pow.f64 y 4))))","(+.f64 (fma.f64 67/76545 (pow.f64 y 6) (*.f64 1/9 (*.f64 y y))) (fma.f64 4/405 (pow.f64 y 4) 1))","(+.f64 (fma.f64 1/9 (*.f64 y y) 1) (fma.f64 4/405 (pow.f64 y 4) (*.f64 67/76545 (pow.f64 y 6))))","(+.f64 1 (fma.f64 1/9 (*.f64 y y) (fma.f64 4/405 (pow.f64 y 4) (*.f64 67/76545 (pow.f64 y 6)))))","(+.f64 1 (fma.f64 4/405 (pow.f64 y 4) (fma.f64 1/9 (*.f64 y y) (*.f64 67/76545 (pow.f64 y 6)))))","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) x)","(fma.f64 -1/6 (*.f64 y (*.f64 y x)) x)","(*.f64 x (fma.f64 (*.f64 y y) -1/6 1))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) x))","(fma.f64 -1/6 (*.f64 y (*.f64 y x)) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) x))","(fma.f64 x (fma.f64 (*.f64 y y) -1/6 (*.f64 (pow.f64 y 4) 1/120)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(fma.f64 -1/6 (*.f64 (*.f64 y y) x) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) (fma.f64 -1/5040 (*.f64 (pow.f64 y 6) x) x)))","(fma.f64 -1/6 (*.f64 y (*.f64 y x)) (fma.f64 1/120 (*.f64 (pow.f64 y 4) x) (fma.f64 -1/5040 (*.f64 (pow.f64 y 6) x) x)))","(fma.f64 x (fma.f64 (pow.f64 y 4) 1/120 (*.f64 (pow.f64 y 6) -1/5040)) (*.f64 x (fma.f64 (*.f64 y y) -1/6 1)))","(*.f64 x (+.f64 (fma.f64 (*.f64 y y) -1/6 1) (fma.f64 (pow.f64 y 4) 1/120 (*.f64 (pow.f64 y 6) -1/5040))))","(*.f64 x (+.f64 (fma.f64 (pow.f64 y 6) -1/5040 1) (fma.f64 (*.f64 y y) -1/6 (*.f64 (pow.f64 y 4) 1/120))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (sin.f64 y) (/.f64 y x))","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(*.f64 x (/.f64 (sin.f64 y) y))","1","(+.f64 1 (*.f64 -1/9 (pow.f64 y 2)))","(+.f64 1 (*.f64 (*.f64 y y) -1/9))","(fma.f64 (*.f64 y y) -1/9 1)","(fma.f64 y (*.f64 y -1/9) 1)","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (*.f64 1/405 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/9 (*.f64 y y) (*.f64 (pow.f64 y 4) 1/405)))","(+.f64 (fma.f64 (*.f64 y y) -1/9 1) (*.f64 (pow.f64 y 4) 1/405))","(fma.f64 y (*.f64 y -1/9) (fma.f64 (pow.f64 y 4) 1/405 1))","(fma.f64 (*.f64 y y) -1/9 (fma.f64 (pow.f64 y 4) 1/405 1))","(+.f64 1 (+.f64 (*.f64 -1/9 (pow.f64 y 2)) (+.f64 (*.f64 1/405 (pow.f64 y 4)) (*.f64 -4/76545 (pow.f64 y 6)))))","(+.f64 1 (fma.f64 -1/9 (*.f64 y y) (fma.f64 1/405 (pow.f64 y 4) (*.f64 (pow.f64 y 6) -4/76545))))","(+.f64 (fma.f64 (*.f64 y y) -1/9 1) (fma.f64 (pow.f64 y 4) 1/405 (*.f64 (pow.f64 y 6) -4/76545)))","(+.f64 1 (fma.f64 y (*.f64 y -1/9) (fma.f64 (pow.f64 y 4) 1/405 (*.f64 (pow.f64 y 6) -4/76545))))","(+.f64 1 (fma.f64 (pow.f64 y 6) -4/76545 (fma.f64 (pow.f64 y 4) 1/405 (*.f64 (*.f64 y y) -1/9))))","(+.f64 (fma.f64 y (*.f64 y -1/9) 1) (fma.f64 (pow.f64 y 4) 1/405 (*.f64 (pow.f64 y 6) -4/76545)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","(*.f64 (pow.f64 (/.f64 (*.f64 1 (sin.f64 y)) y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 (sin.f64 y) y)))","x","(+.f64 (*.f64 -1/18 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/18 (*.f64 (*.f64 y y) x) x)","(fma.f64 (*.f64 (*.f64 y y) -1/18) x x)","(*.f64 x (fma.f64 (*.f64 y y) -1/18 1))","(+.f64 (*.f64 -1/3240 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 y 2) x)) x))","(fma.f64 -1/3240 (*.f64 (pow.f64 y 4) x) (fma.f64 -1/18 (*.f64 (*.f64 y y) x) x))","(fma.f64 (*.f64 (pow.f64 y 4) x) -1/3240 (fma.f64 (*.f64 (*.f64 y y) -1/18) x x))","(fma.f64 x (fma.f64 (pow.f64 y 4) -1/3240 (*.f64 y (*.f64 y -1/18))) x)","(+.f64 (*.f64 -1/3240 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -53/1224720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 -1/18 (*.f64 (pow.f64 y 2) x)) x)))","(fma.f64 -1/3240 (*.f64 (pow.f64 y 4) x) (fma.f64 -53/1224720 (*.f64 (pow.f64 y 6) x) (fma.f64 -1/18 (*.f64 (*.f64 y y) x) x)))","(fma.f64 (*.f64 (pow.f64 y 4) x) -1/3240 (fma.f64 (*.f64 (pow.f64 y 6) x) -53/1224720 (fma.f64 (*.f64 (*.f64 y y) -1/18) x x)))","(fma.f64 x (fma.f64 (pow.f64 y 6) -53/1224720 (*.f64 y (*.f64 y -1/18))) (fma.f64 (pow.f64 y 4) (*.f64 x -1/3240) x))","(*.f64 x (+.f64 (fma.f64 (*.f64 y y) -1/18 1) (fma.f64 (pow.f64 y 4) -1/3240 (*.f64 (pow.f64 y 6) -53/1224720))))"]],"stop":[["node limit",1]],"time":79.76416015625,"type":"simplify"},{"compiler":[[3662,1369]],"time":30.5048828125,"type":"eval"},{"alts":[["(/.f64 1 (*.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) x)))","fresh",0.5210706568611939],["(/.f64 (*.f64 (sin.f64 y) x) y)","fresh",5.53640737565707],["(*.f64 x (/.f64 (sin.f64 y) y))","done",0.140625],["(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))","done",0.27181625976844204],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 2) (/.f64 x (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))))))","fresh",0.32952890629507237]],"compiler":[[19,11],[8,5],[8,5],[10,7],[29,18]],"count":[[204,5]],"kept":[{"done":[2,2],"fresh":[3,0],"new":[198,3],"picked":[1,0]}],"min-error":[0],"time":57.9560546875,"type":"prune"},{"accuracy":[0.140625],"baseline":[0.140625],"branch":[["x",0.140625,1],["y",0.140625,1],["(*.f64 x (/.f64 (sin.f64 y) y))",0.140625,1],["(/.f64 (sin.f64 y) y)",0.140625,1]],"compiler":[[3,2],[3,2],[8,5],[6,4],[138,53]],"count":[[13,1]],"inputs":[["(/.f64 1 (*.f64 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2) (/.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) x)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 2) (/.f64 x (cbrt.f64 (cbrt.f64 (/.f64 y (sin.f64 y)))))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 x (*.f64 y (/.f64 1 (sin.f64 y))))","(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) 2)) (/.f64 x (cbrt.f64 (/.f64 y (sin.f64 y)))))","(pow.f64 (/.f64 (/.f64 y (sin.f64 y)) x) -1)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 1 (/.f64 y (*.f64 (sin.f64 y) x)))","(/.f64 (/.f64 (*.f64 (sin.f64 y) x) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))","(/.f64 x (/.f64 y (sin.f64 y)))","(pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 y) y) x)) 3)","(*.f64 x (/.f64 (sin.f64 y) y))"]],"link":["."],"name":["Linear.Quaternion:$cexp from linear-1.19.1.3"],"oracle":[6.475752251403479],"outputs":[["(*.f64 x (/.f64 (sin.f64 y) y))"]],"time":25.031005859375,"times":[["x",6.047119140625],["y",5.7890625],["(*.f64 x (/.f64 (sin.f64 y) y))",5.574951171875],["(/.f64 (sin.f64 y) y)",5.219970703125]],"type":"regimes"},{"compiler":[[8,5]],"egraph":[[1,7,9,2.9041999999999997e-5],[0,6,9,1.825e-5]],"inputs":[["(*.f64 x (/.f64 (sin.f64 y) y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (/.f64 (sin.f64 y) y))"]],"stop":[["fuel",1],["saturated",1]],"time":9.55908203125,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[8,5]],"remove-preprocessing":[[]],"time":8.135986328125,"type":"end"}]
[{"compiler":[[39,31]],"method":["search"],"sampling":[[12,2.793967723814632e-12,1.8626451492097546e-13,0.9999999999970197],[11,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[10,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[9,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[8,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[7,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[6,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[5,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[4,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[3,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[2,0.0,2.9802322387356077e-12,0.9999999999970197],[1,0.0,2.9802322387356077e-12,0.9999999999970197],[0,0.0,2.9802322387356077e-12,0.9999999999970197]],"time":48.100830078125,"type":"analyze"},{"outcomes":[["body",256,"valid",828.98681640625,8256]],"time":837.169189453125,"type":"sample"},{"compiler":[[16,14]],"egraph":[[0,3,3,1.75e-6],[15,795,84,0.0169445],[14,792,84,0.015041667000000002],[13,774,84,0.013135250000000001],[12,727,84,0.011244125],[11,636,84,0.009369542],[10,586,84,0.007743209],[9,532,84,0.006258584],[8,491,84,0.004977834],[7,319,84,0.0037652090000000003],[6,231,84,0.002657542],[5,191,84,0.001942708],[4,155,84,0.001356375],[3,124,84,0.000921875],[2,98,84,0.000577708],[1,59,84,0.00029591700000000003],[0,30,88,0.00011925]],"inputs":[["0","1","2"],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 cosTheta_i)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) cosTheta_i)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u2)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 cosTheta_i)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 cosTheta_i)))))","(*.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 cosTheta_i)))))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) cosTheta_i)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) cosTheta_i))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) cosTheta_i))))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u2)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u1)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u2)))) (sin.f64 (*.f64 u1 (*.f64 2 (PI.f64)))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u2)))) (sin.f64 (*.f64 u1 (*.f64 2 (PI.f64)))))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":41.546875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[15,272,21,0.006135042],[14,271,21,0.005468542],[13,265,21,0.004791667],[12,248,21,0.004096708],[11,209,21,0.003420208],[10,187,21,0.0028027910000000002],[9,165,21,0.002279666],[8,149,21,0.0018601660000000001],[7,119,21,0.001456374],[6,92,21,0.001105166],[5,74,21,0.000840832],[4,60,21,0.000610707],[3,49,21,0.000415957],[2,39,21,0.00027437399999999997],[1,26,21,0.000151541],[0,14,22,6.9833e-5]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"stop":[["saturated",1]],"time":17.304931640625,"type":"simplify"},{"compiler":[[28,23]],"time":0.47314453125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","fresh",11.546442450529],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","next",0.5222465431959218]],"compiler":[[16,14],[15,13],[16,14],[15,13]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.5121490334274797],"time":1.528076171875,"type":"prune"},{"compiler":[[47,23]],"locations":[["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))",0.15625,true],["(*.f64 (*.f64 2 (PI.f64)) u2)",0.23828125,true],["(sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",0.3009023902634286,true],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",0.3678512695368841,true]],"time":13.1318359375,"type":"localize"},{"count":[[4,24]],"series":[["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","-inf",0.56005859375],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","inf",0.906982421875],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","0",0.40283203125],["(*.f64 (*.f64 2 (PI.f64)) u2)","u2","-inf",0.236083984375],["(*.f64 (*.f64 2 (PI.f64)) u2)","u2","inf",0.39306640625],["(*.f64 (*.f64 2 (PI.f64)) u2)","u2","0",0.385009765625],["(sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2))","u2","-inf",0.151123046875],["(sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2))","u2","inf",0.176025390625],["(sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2))","u2","0",0.240966796875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u2","-inf",0.495849609375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u2","inf",15.343994140625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u2","0",1.31103515625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u1","-inf",1.468017578125],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u1","inf",1.343994140625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u1","0",1.244140625]],"time":24.91015625,"type":"series"},{"count":[[4,97]],"egraph":[[2,3159,40,0.024816167],[1,261,40,0.004532334],[0,13,48,0.000328167]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2))","(*.f64 (*.f64 2 (PI.f64)) u2)","(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (log1p.f64 u1)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (log1p.f64 u1))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log1p.f64 u1) (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (log1p.f64 u1) (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) (log.f64 (sqrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cos.f64 1)) (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 2 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 2 u2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 2 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 2 u2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 2 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 (PI.f64) u2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 4 (pow.f64 (*.f64 (PI.f64) u2) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) u2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 4 (pow.f64 (*.f64 (PI.f64) u2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 2 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (log1p.f64 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 u1)) (pow.f64 (log1p.f64 u1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 u1) 1/6) (cbrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 u1) 1/4) (pow.f64 (log1p.f64 u1) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 -1) (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 u1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 u1)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (log1p.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 u1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log1p.f64 u1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (log1p.f64 u1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3/2 (log.f64 (log1p.f64 u1))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 u1) 1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/4 (log.f64 (log1p.f64 u1))) 2))))))"]],"rules":[["egg-rr",30],["egg-rr",20],["egg-rr",27],["egg-rr",20]],"stop":[["node limit",1]],"time":54.39501953125,"type":"rewrite"},{"count":[[121,107]],"egraph":[[15,7851,292,0.087588083],[14,7305,292,0.078414291],[13,6355,292,0.068950208],[12,5616,292,0.059169665999999996],[11,5050,292,0.050662124999999995],[10,4658,292,0.042415457999999996],[9,4397,292,0.035534290999999996],[8,4213,292,0.029492374999999998],[7,4071,292,0.023718082999999997],[6,3961,292,0.018494498999999998],[5,2680,292,0.013435415999999999],[4,2011,292,0.008437749],[3,934,292,0.004782415999999999],[2,255,292,0.0019075],[1,87,292,0.000637958],[0,31,292,0.000182417]],"inputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (*.f64 (pow.f64 u2 3) (*.f64 (pow.f64 (PI.f64) 3) -4/3)))","(*.f64 u2 (fma.f64 2 (PI.f64) (*.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (*.f64 u2 u2)))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (*.f64 (pow.f64 (PI.f64) 5) (*.f64 4/15 (pow.f64 u2 5)))))","(fma.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (pow.f64 u2 3)) (fma.f64 (pow.f64 (PI.f64) 5) (*.f64 4/15 (pow.f64 u2 5)) (*.f64 2 (*.f64 u2 (PI.f64)))))","(fma.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (pow.f64 u2 3)) (fma.f64 (pow.f64 (PI.f64) 5) (*.f64 4/15 (pow.f64 u2 5)) (*.f64 (PI.f64) (*.f64 2 u2))))","(fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)) (*.f64 2 (*.f64 u2 (PI.f64)))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7)) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7)) (*.f64 (pow.f64 (PI.f64) 5) (*.f64 4/15 (pow.f64 u2 5))))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 (pow.f64 (PI.f64) 5) (*.f64 4/15 (pow.f64 u2 5)) (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))))))","(fma.f64 u2 (fma.f64 2 (PI.f64) (*.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (*.f64 u2 u2)))) (fma.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)) (*.f64 (pow.f64 (PI.f64) 7) (*.f64 -8/315 (pow.f64 u2 7)))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)) (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))"]],"stop":[["node limit",1]],"time":109.225830078125,"type":"simplify"},{"compiler":[[1726,940]],"time":18.9951171875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","next",0.5206253029643638],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)))))","fresh",0.5974291236587858],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 u2 (fma.f64 2 (PI.f64) (*.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (*.f64 u2 u2))))))","fresh",12.360814950323524],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (expm1.f64 (log1p.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","fresh",0.5424415627328059],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (-.f64 (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cos.f64 1)) (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sin.f64 1))))","fresh",11.943805667033851],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1/3))))","fresh",1.965735213265551],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","fresh",11.546442450529],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2)))","fresh",0.8524700279775984],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","fresh",0.7875402823985805],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3)))","fresh",0.8898315227373068],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",13.010545010821756],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))","fresh",1.6886516773399534],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))","fresh",0.822509670952959],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) 1/3))","fresh",2.8283080895194854]],"compiler":[[17,15],[20,15],[23,18],[17,15],[32,27],[21,19],[16,14],[26,21],[18,16],[18,16],[30,25],[18,16],[18,16],[19,17],[17,15],[20,15],[23,18],[17,15],[32,27],[21,19],[16,14],[26,21],[18,16],[18,16],[30,25],[18,16],[18,16],[19,17]],"count":[[109,14]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[107,13],"picked":[1,0]}],"min-error":[0.20276129138909577],"time":23.125,"type":"prune"},{"compiler":[[64,30]],"locations":[["(expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))",0.23046875,true],["(*.f64 (PI.f64) u2)",0.23828125,true],["(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))",0.3009023902634286,true],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))",0.3678512695368841,true]],"time":20.890869140625,"type":"localize"},{"count":[[4,36]],"series":[["(expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))","u2","-inf",0.22216796875],["(expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))","u2","inf",0.218994140625],["(expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))","u2","0",0.468994140625],["(*.f64 (PI.f64) u2)","u2","-inf",0.281005859375],["(*.f64 (PI.f64) u2)","u2","inf",0.136962890625],["(*.f64 (PI.f64) u2)","u2","0",0.135986328125],["(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","u2","-inf",0.160888671875],["(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","u2","inf",0.14501953125],["(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","u2","0",0.18896484375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","u2","-inf",0.218994140625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","u2","inf",0.2099609375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","u2","0",0.26806640625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","u1","-inf",0.3349609375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","u1","inf",0.364990234375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","u1","0",0.419921875]],"time":4.030029296875,"type":"series"},{"count":[[4,97]],"egraph":[[2,3430,44,0.02526225],[1,287,44,0.004869584],[0,15,48,0.000362042]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","(*.f64 (PI.f64) u2)","(expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log1p.f64 u1) (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log1p.f64 u1) 3/2) (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) (pow.f64 (log1p.f64 u1) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (log1p.f64 u1) (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log1p.f64 u1) 3/2) (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) (pow.f64 (log1p.f64 u1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) (log.f64 (sqrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3)) (log.f64 (+.f64 1 (-.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cos.f64 1)) (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 1 (pow.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))) (log.f64 (-.f64 1 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sin.f64 (*.f64 (PI.f64) u2))) (cos.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 u2) (PI.f64))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 u2) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 u2) (PI.f64)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 u2) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (PI.f64) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (PI.f64) u2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 u2) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (PI.f64) u2)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (log.f64 (sqrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2) (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sqrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3) 1) (+.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (+.f64 1 (*.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) 1) (+.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2) (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sqrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) -1)))))"]],"rules":[["egg-rr",27],["egg-rr",21],["egg-rr",28],["egg-rr",21]],"stop":[["node limit",1]],"time":50.5859375,"type":"rewrite"},{"count":[[133,115]],"egraph":[[9,5798,428,0.064445124],[8,5495,428,0.051357999],[7,5197,428,0.041538999],[6,4769,428,0.032635957],[5,4442,428,0.024660249000000002],[4,3909,428,0.017388791],[3,2104,428,0.010047124000000001],[2,494,429,0.003948124],[1,161,440,0.001199916],[0,56,452,0.000322333]],"inputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 2 (*.f64 u2 (PI.f64)))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 (+.f64 (*.f64 4/3 (pow.f64 (PI.f64) 3)) (*.f64 -4/3 (pow.f64 (PI.f64) 3))) (pow.f64 u2 3)) (*.f64 2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (pow.f64 (PI.f64) 4)) (*.f64 -8/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4)) (+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 (+.f64 (*.f64 4/3 (pow.f64 (PI.f64) 3)) (*.f64 -4/3 (pow.f64 (PI.f64) 3))) (pow.f64 u2 3)) (*.f64 2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))))))","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (*.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (pow.f64 u2 3))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (*.f64 (pow.f64 u2 3) (*.f64 -4/3 (pow.f64 (PI.f64) 3))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (*.f64 (pow.f64 u2 5) (*.f64 (pow.f64 (PI.f64) 5) 4/15))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (pow.f64 u2 3)) (*.f64 (pow.f64 u2 5) (*.f64 4/15 (pow.f64 (PI.f64) 5)))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (pow.f64 u2 3)) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 (pow.f64 u2 3) (*.f64 -4/3 (pow.f64 (PI.f64) 3)) (fma.f64 2 (*.f64 u2 (PI.f64)) (*.f64 (pow.f64 (PI.f64) 5) (*.f64 4/15 (pow.f64 u2 5)))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7)) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7)) (*.f64 (pow.f64 u2 5) (*.f64 (pow.f64 (PI.f64) 5) 4/15)))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)) (*.f64 (pow.f64 (PI.f64) 7) (*.f64 -8/315 (pow.f64 u2 7))))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)) (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))))","(*.f64 2 (+.f64 (*.f64 u2 (PI.f64)) (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2))))","(*.f64 2 (fma.f64 u2 (PI.f64) (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2))))","(*.f64 2 (*.f64 (PI.f64) (+.f64 u2 (*.f64 (PI.f64) (*.f64 u2 u2)))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 (+.f64 (*.f64 4/3 (pow.f64 (PI.f64) 3)) (*.f64 -4/3 (pow.f64 (PI.f64) 3))) (pow.f64 u2 3)) (*.f64 2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))))","(*.f64 2 (+.f64 (*.f64 u2 (PI.f64)) (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2))))","(*.f64 2 (fma.f64 u2 (PI.f64) (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2))))","(*.f64 2 (*.f64 (PI.f64) (+.f64 u2 (*.f64 (PI.f64) (*.f64 u2 u2)))))","(+.f64 (*.f64 (+.f64 (*.f64 2/3 (pow.f64 (PI.f64) 4)) (*.f64 -8/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4)) (+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 (+.f64 (*.f64 4/3 (pow.f64 (PI.f64) 3)) (*.f64 -4/3 (pow.f64 (PI.f64) 3))) (pow.f64 u2 3)) (*.f64 2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))))))","(fma.f64 (*.f64 (pow.f64 (PI.f64) 4) -2) (pow.f64 u2 4) (fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 (*.f64 (pow.f64 (PI.f64) 3) 0) (pow.f64 u2 3) (*.f64 2 (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2))))))","(fma.f64 (*.f64 (pow.f64 (PI.f64) 4) -2) (pow.f64 u2 4) (+.f64 (*.f64 2 (fma.f64 u2 (PI.f64) (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2)))) (*.f64 (pow.f64 u2 3) 0)))","(fma.f64 (pow.f64 (PI.f64) 4) (*.f64 (pow.f64 u2 4) -2) (fma.f64 2 (*.f64 (PI.f64) (+.f64 u2 (*.f64 (PI.f64) (*.f64 u2 u2)))) 0))","(fma.f64 (pow.f64 (PI.f64) 4) (*.f64 (pow.f64 u2 4) -2) (*.f64 2 (*.f64 (PI.f64) (+.f64 u2 (*.f64 (PI.f64) (*.f64 u2 u2))))))","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(expm1.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))","(expm1.f64 (sin.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(expm1.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))","(expm1.f64 (sin.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(expm1.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))","(expm1.f64 (sin.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(expm1.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))","(expm1.f64 (sin.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(expm1.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))","(expm1.f64 (sin.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(expm1.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))","(expm1.f64 (sin.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(expm1.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))","(expm1.f64 (sin.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))","(-.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))) 1)","(expm1.f64 (sin.f64 (*.f64 2 (*.f64 u2 (PI.f64)))))","(expm1.f64 (sin.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))"]],"stop":[["node limit",1]],"time":85.505126953125,"type":"simplify"},{"compiler":[[2277,1255]],"time":24.465087890625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (*.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2))))","fresh",0.867723022358083],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (*.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)))))))","fresh",0.5941866431956698],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (log.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",11.54716030987465],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))","fresh",12.870721578589782],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 3))))))","fresh",0.8688951157737465],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))","fresh",1.6886516773399534],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))","fresh",13.006581425036854],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (pow.f64 (sqrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)))","fresh",1.7183055397222995],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))","fresh",0.822509670952959],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 3)))","fresh",0.845736924165161],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) 1/3))","fresh",2.8283080895194854],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1/3))))","fresh",1.965735213265551],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","fresh",11.546442450529],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))))))))","next",0.5433990334274797],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (exp.f64 (log.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",2.5166060508816623],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","fresh",0.7875402823985805],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (pow.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) 2))))))","fresh",0.8440713239870604]],"compiler":[[29,24],[22,17],[19,17],[33,28],[20,18],[18,16],[32,27],[20,18],[18,16],[20,18],[19,17],[21,19],[16,14],[22,20],[19,17],[18,16],[20,18],[29,24],[22,17],[19,17],[33,28],[20,18],[18,16],[32,27],[20,18],[18,16],[20,18],[19,17],[21,19],[16,14],[22,20],[19,17],[18,16],[20,18]],"count":[[129,17]],"kept":[{"done":[0,0],"fresh":[13,6],"new":[115,11],"picked":[1,0]}],"min-error":[0.12957001953688402],"time":30.160888671875,"type":"prune"},{"compiler":[[108,75]],"locations":[["(*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))",0.234375,true],["(sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3)))))",0.3009023902634286,true],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))))))))",0.3678512695368841,true],["(pow.f64 (PI.f64) 3)",1.0,true]],"time":36.22509765625,"type":"localize"},{"count":[[4,24]],"series":[["(*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))","u2","-inf",0.286865234375],["(*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))","u2","inf",0.344970703125],["(*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))","u2","0",0.72607421875],["(sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3)))))","u2","-inf",0.1728515625],["(sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3)))))","u2","inf",0.14697265625],["(sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3)))))","u2","0",0.19091796875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))))))))","u2","-inf",0.657958984375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))))))))","u2","inf",0.22900390625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))))))))","u2","0",0.26611328125],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))))))))","u1","-inf",0.31884765625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))))))))","u1","inf",0.3759765625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))))))))","u1","0",0.385986328125]],"time":4.31494140625,"type":"series"},{"count":[[4,90]],"egraph":[[2,4262,40,0.029625708],[1,381,40,0.006369125],[0,19,44,0.000473792]],"inputs":[["(pow.f64 (PI.f64) 3)","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))))))))","(sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3)))))","(*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (PI.f64) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (PI.f64) 3))) (cbrt.f64 (exp.f64 (pow.f64 (PI.f64) 3))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (PI.f64) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (PI.f64) 3)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (PI.f64) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (PI.f64) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) (pow.f64 (PI.f64) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (PI.f64) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) 2) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (PI.f64)) 2) (*.f64 (cbrt.f64 (PI.f64)) (pow.f64 (PI.f64) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (PI.f64)) (*.f64 (sqrt.f64 (PI.f64)) (pow.f64 (PI.f64) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) 3/2) (pow.f64 (PI.f64) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (PI.f64) 2) 1) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (PI.f64) 2) (pow.f64 (cbrt.f64 (PI.f64)) 2)) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (PI.f64) 2) (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (PI.f64) 6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (PI.f64) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (PI.f64) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (PI.f64) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (PI.f64) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (PI.f64) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 3 (log.f64 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (PI.f64))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))) (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log1p.f64 u1) 3/2) (pow.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))) 3) (pow.f64 (log1p.f64 u1) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (log1p.f64 u1) (pow.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log1p.f64 u1) 3/2) (pow.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))) 3) (pow.f64 (log1p.f64 u1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))) (cbrt.f64 (exp.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))))) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))) (log.f64 (sqrt.f64 (exp.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) 3)) (log.f64 (+.f64 1 (-.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) 2) (expm1.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 (PI.f64) (*.f64 u2 2))))) (cos.f64 1)) (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 (PI.f64) (*.f64 u2 2))))) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 1 (pow.f64 (expm1.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) 2))) (log.f64 (-.f64 1 (expm1.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) 2) (cbrt.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) (sqrt.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sin.f64 (*.f64 (PI.f64) u2))) (cos.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 (PI.f64) u2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))) (cbrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) u2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 (PI.f64) 3) 3) (pow.f64 (pow.f64 u2 3) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 u2 3) 3) (pow.f64 (pow.f64 (PI.f64) 3) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (PI.f64) u2) 6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 (PI.f64) 3) 3) (pow.f64 (pow.f64 u2 3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 u2 3) 3) (pow.f64 (pow.f64 (PI.f64) 3) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 3 (log.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (PI.f64) u2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (PI.f64) u2)) 3))))))"]],"rules":[["egg-rr",21],["egg-rr",27],["egg-rr",20],["egg-rr",22]],"stop":[["node limit",1]],"time":54.33203125,"type":"rewrite"},{"count":[[114,103]],"egraph":[[15,7915,348,0.10036208399999999],[14,7369,348,0.090229543],[13,6419,348,0.07858254299999999],[12,5680,348,0.06636687599999999],[11,5120,348,0.055473126],[10,4728,348,0.045833333999999996],[9,4467,348,0.038376834],[8,4283,348,0.03182425],[7,4141,348,0.025412790999999997],[6,4031,348,0.019658375],[5,2750,348,0.01367875],[4,2081,348,0.008869625],[3,1001,348,0.005135958],[2,289,348,0.0021155],[1,101,348,0.000706917],[0,38,348,0.000204667]],"inputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (cbrt.f64 -1) (PI.f64)))))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (cbrt.f64 -1) (PI.f64)))))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (cbrt.f64 -1) (PI.f64)))))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (cbrt.f64 -1) (PI.f64)))))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 (PI.f64) (*.f64 2 u2))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (*.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (pow.f64 u2 3))))","(*.f64 u2 (fma.f64 -4/3 (*.f64 (pow.f64 (PI.f64) 3) (*.f64 u2 u2)) (*.f64 2 (PI.f64))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (*.f64 (pow.f64 (PI.f64) 5) (*.f64 4/15 (pow.f64 u2 5)))))","(fma.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (pow.f64 u2 3)) (fma.f64 (pow.f64 (PI.f64) 5) (*.f64 4/15 (pow.f64 u2 5)) (*.f64 (PI.f64) (*.f64 2 u2))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 (pow.f64 u2 3) (*.f64 -4/3 (pow.f64 (PI.f64) 3)) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (pow.f64 u2 3)) (fma.f64 2 (*.f64 u2 (PI.f64)) (*.f64 (pow.f64 (PI.f64) 5) (*.f64 4/15 (pow.f64 u2 5)))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7)) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7)) (*.f64 (pow.f64 (PI.f64) 5) (*.f64 4/15 (pow.f64 u2 5))))))","(fma.f64 2 (*.f64 u2 (PI.f64)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)) (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))))))","(fma.f64 u2 (fma.f64 -4/3 (*.f64 (pow.f64 (PI.f64) 3) (*.f64 u2 u2)) (*.f64 2 (PI.f64))) (fma.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)) (*.f64 (pow.f64 (PI.f64) 7) (*.f64 -8/315 (pow.f64 u2 7)))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 (PI.f64) (*.f64 2 u2)))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (cbrt.f64 -1) (PI.f64)))))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (PI.f64) (cbrt.f64 -1)))))","(sin.f64 (*.f64 -2 (*.f64 (*.f64 u2 (PI.f64)) (cbrt.f64 -1))))","(sin.f64 (*.f64 u2 (*.f64 (PI.f64) (*.f64 (cbrt.f64 -1) -2))))","(sin.f64 (*.f64 u2 (*.f64 (PI.f64) (*.f64 -2 (cbrt.f64 -1)))))","(sin.f64 (*.f64 u2 (*.f64 (cbrt.f64 -1) (*.f64 (PI.f64) -2))))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (cbrt.f64 -1) (PI.f64)))))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (PI.f64) (cbrt.f64 -1)))))","(sin.f64 (*.f64 -2 (*.f64 (*.f64 u2 (PI.f64)) (cbrt.f64 -1))))","(sin.f64 (*.f64 u2 (*.f64 (PI.f64) (*.f64 (cbrt.f64 -1) -2))))","(sin.f64 (*.f64 u2 (*.f64 (PI.f64) (*.f64 -2 (cbrt.f64 -1)))))","(sin.f64 (*.f64 u2 (*.f64 (cbrt.f64 -1) (*.f64 (PI.f64) -2))))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (cbrt.f64 -1) (PI.f64)))))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (PI.f64) (cbrt.f64 -1)))))","(sin.f64 (*.f64 -2 (*.f64 (*.f64 u2 (PI.f64)) (cbrt.f64 -1))))","(sin.f64 (*.f64 u2 (*.f64 (PI.f64) (*.f64 (cbrt.f64 -1) -2))))","(sin.f64 (*.f64 u2 (*.f64 (PI.f64) (*.f64 -2 (cbrt.f64 -1)))))","(sin.f64 (*.f64 u2 (*.f64 (cbrt.f64 -1) (*.f64 (PI.f64) -2))))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (cbrt.f64 -1) (PI.f64)))))","(sin.f64 (*.f64 -2 (*.f64 u2 (*.f64 (PI.f64) (cbrt.f64 -1)))))","(sin.f64 (*.f64 -2 (*.f64 (*.f64 u2 (PI.f64)) (cbrt.f64 -1))))","(sin.f64 (*.f64 u2 (*.f64 (PI.f64) (*.f64 (cbrt.f64 -1) -2))))","(sin.f64 (*.f64 u2 (*.f64 (PI.f64) (*.f64 -2 (cbrt.f64 -1)))))","(sin.f64 (*.f64 u2 (*.f64 (cbrt.f64 -1) (*.f64 (PI.f64) -2))))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))"]],"stop":[["node limit",1]],"time":123.135986328125,"type":"simplify"},{"compiler":[[2146,1323]],"time":26.19189453125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))))))","next",0.5222465431959218],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (log.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",11.54716030987465],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))","fresh",12.870721578589782],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (pow.f64 (sqrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)))","fresh",1.7183055397222995],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))","fresh",0.822509670952959],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 3)))","fresh",0.845736924165161],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (*.f64 (*.f64 2 (sin.f64 (*.f64 (PI.f64) u2))) (cos.f64 (*.f64 (PI.f64) u2))))))","fresh",0.5941866431956698],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) 1/3))","fresh",2.8283080895194854],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","fresh",11.546442450529],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (exp.f64 (*.f64 3 (log.f64 (PI.f64)))) (pow.f64 u2 3))))))))","fresh",0.7122700119191491],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 (pow.f64 (PI.f64) 3))) 1) (pow.f64 u2 3))))))))","fresh",0.5984566018065739],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (exp.f64 (log.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",2.5166060508816623],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))","fresh",13.006581425036854]],"compiler":[[22,20],[19,17],[33,28],[20,18],[18,16],[20,18],[22,17],[19,17],[16,14],[24,22],[26,24],[19,17],[32,27],[22,20],[19,17],[33,28],[20,18],[18,16],[20,18],[22,17],[19,17],[16,14],[24,22],[26,24],[19,17],[32,27]],"count":[[120,13]],"kept":[{"done":[0,0],"fresh":[16,9],"new":[103,4],"picked":[1,0]}],"min-error":[0.12957001953688402],"time":26.797119140625,"type":"prune"},{"compiler":[[110,67]],"locations":[["(sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2))))",0.3009023902634286,true],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))))))",0.3678512695368841,true],["(pow.f64 (*.f64 (PI.f64) u2) 3/2)",0.40234375,true],["(pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)",0.5045700195368841,true]],"time":43.81787109375,"type":"localize"},{"count":[[4,36]],"series":[["(sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2))))","u2","-inf",0.142822265625],["(sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2))))","u2","inf",0.14599609375],["(sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2))))","u2","0",0.2060546875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))))))","u2","-inf",0.198974609375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))))))","u2","inf",1.939208984375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))))))","u2","0",0.246826171875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))))))","u1","-inf",0.324951171875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))))))","u1","inf",0.367919921875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))))))","u1","0",0.317138671875],["(pow.f64 (*.f64 (PI.f64) u2) 3/2)","u2","-inf",0.18408203125],["(pow.f64 (*.f64 (PI.f64) u2) 3/2)","u2","inf",0.1669921875],["(pow.f64 (*.f64 (PI.f64) u2) 3/2)","u2","0",0.18115234375],["(pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)","u2","-inf",7.569091796875],["(pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)","u2","inf",4.343994140625],["(pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)","u2","0",11.0361328125]],"time":27.653076171875,"type":"series"},{"count":[[4,100]],"egraph":[[2,4426,43,0.029254917],[1,378,43,0.006732375],[0,19,57,0.000499375]],"inputs":[["(pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))))))","(sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 (PI.f64) u2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))) (cbrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) (pow.f64 (*.f64 (PI.f64) u2) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) u2) 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) u2) (pow.f64 (*.f64 (PI.f64) u2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 (PI.f64) u2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) u2) 2) (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/4) (*.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/4) (pow.f64 (*.f64 (PI.f64) u2) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) 3/2) (*.f64 (pow.f64 u2 3/2) (pow.f64 (*.f64 (PI.f64) u2) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/4) 3) (pow.f64 (*.f64 (PI.f64) u2) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (PI.f64) 3/2) (pow.f64 (PI.f64) 3/2)) (*.f64 (pow.f64 u2 3/2) (pow.f64 u2 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (PI.f64) 3/2) 2) (pow.f64 (pow.f64 u2 3/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) u2) 2) (PI.f64)) u2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) u2) 2) u2) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) (*.f64 (PI.f64) u2)) (sqrt.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) (pow.f64 (PI.f64) 3/2)) (pow.f64 u2 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) u2) 2) 1) (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) u2) 2) (pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 2)) (cbrt.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (*.f64 (PI.f64) u2) 2) (sqrt.f64 (*.f64 (PI.f64) u2))) (sqrt.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (PI.f64) u2) 6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (PI.f64) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (PI.f64) u2) 3)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 (PI.f64) u2) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2))) (cbrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2))))) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) u2) (sqrt.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (*.f64 (PI.f64) u2) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/4) (pow.f64 (*.f64 (PI.f64) u2) 3/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (PI.f64) 3/2) (pow.f64 u2 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 3/2) (pow.f64 (*.f64 (PI.f64) u2) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 2) 3/2) (pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) 3/2) (pow.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (PI.f64) u2) 9/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 3/2 (log.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3/2 (log.f64 (*.f64 (PI.f64) u2))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (log1p.f64 u1) (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log1p.f64 u1) 3/2) (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) (pow.f64 (log1p.f64 u1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) (log.f64 (sqrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3)) (log.f64 (+.f64 1 (-.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cos.f64 1)) (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 1 (pow.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))) (log.f64 (-.f64 1 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sin.f64 (*.f64 (PI.f64) u2))) (cos.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1))))))"]],"rules":[["egg-rr",27],["egg-rr",18],["egg-rr",23],["egg-rr",32]],"stop":[["node limit",1]],"time":55.77197265625,"type":"rewrite"},{"count":[[136,118]],"egraph":[[5,7298,379,0.032262833000000005],[4,3637,379,0.020762791000000003],[3,1427,379,0.009128749],[2,446,460,0.0033457070000000003],[1,161,568,0.001122207],[0,56,568,0.000320166]],"inputs":[["(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))) 2)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))) 2)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))) 2)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))) 2)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2)))))) 2)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2)))))) 2)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2)))))) 2)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2)))))) 2)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2)))))) 2)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2)))))) 2)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2)))))) 2)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2)))))) 2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2))))","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2))))","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2))))","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2))))","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2))))))","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2))))))","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2))))))","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2))))))","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2))))))","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2))))))","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2))))))","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2))))))","(*.f64 2 (*.f64 u2 (PI.f64)))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2)))))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2)))))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2)))))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2)))))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2)))))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2)))))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2)))))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(pow.f64 (exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2)))))) 2)","(pow.f64 (pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2))) 2)","(*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))","(pow.f64 (*.f64 (PI.f64) u2) 3)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (log.f64 u2))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2))))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2))))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2))))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (PI.f64)) (*.f64 -1 (log.f64 (/.f64 1 u2))))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2))))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2))))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2))))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(exp.f64 (*.f64 3/2 (+.f64 (log.f64 (*.f64 -1 (PI.f64))) (*.f64 -1 (log.f64 (/.f64 -1 u2))))))","(pow.f64 (exp.f64 3/2) (+.f64 (log.f64 (PI.f64)) (log.f64 u2)))","(*.f64 (pow.f64 u2 3/2) (pow.f64 (PI.f64) 3/2))","(pow.f64 (*.f64 (PI.f64) u2) 3/2)","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 (PI.f64) u2))","(*.f64 (PI.f64) (*.f64 u2 2))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(fma.f64 2 (*.f64 (PI.f64) u2) (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))))","(fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (*.f64 (PI.f64) (*.f64 u2 2)))","(fma.f64 (PI.f64) (*.f64 u2 2) (*.f64 -4/3 (pow.f64 (*.f64 (PI.f64) u2) 3)))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 2 (*.f64 (PI.f64) u2) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 (PI.f64) (*.f64 u2 2) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(fma.f64 -4/3 (pow.f64 (*.f64 (PI.f64) u2) 3) (fma.f64 (PI.f64) (*.f64 u2 2) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)))))","(+.f64 (*.f64 2 (*.f64 u2 (PI.f64))) (+.f64 (*.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3))) (+.f64 (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(fma.f64 2 (*.f64 (PI.f64) u2) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7)) (*.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5))))))","(fma.f64 2 (*.f64 (PI.f64) u2) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (fma.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)) (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))))))","(fma.f64 (PI.f64) (*.f64 u2 2) (fma.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)) (fma.f64 -4/3 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))))))","(fma.f64 -4/3 (pow.f64 (*.f64 (PI.f64) u2) 3) (fma.f64 (PI.f64) (*.f64 u2 2) (fma.f64 4/15 (*.f64 (pow.f64 u2 5) (pow.f64 (PI.f64) 5)) (*.f64 -8/315 (*.f64 (pow.f64 u2 7) (pow.f64 (PI.f64) 7))))))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","(sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","(sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","(sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","(sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","(sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","(sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","(sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))","(sin.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))","(sin.f64 (*.f64 (PI.f64) (*.f64 u2 2)))"]],"stop":[["node limit",1]],"time":51.0400390625,"type":"simplify"},{"compiler":[[2535,1449]],"time":26.998046875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))))))","done",0.5222465431959218],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (log.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",11.54716030987465],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))","fresh",12.870721578589782],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (pow.f64 (sqrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)))","fresh",1.7183055397222995],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))","fresh",0.822509670952959],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 3)))","fresh",0.845736924165161],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (*.f64 (*.f64 2 (sin.f64 (*.f64 (PI.f64) u2))) (cos.f64 (*.f64 (PI.f64) u2))))))","fresh",0.5941866431956698],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) 1/3))","fresh",2.8283080895194854],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","fresh",11.546442450529],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (exp.f64 (*.f64 3 (log.f64 (PI.f64)))) (pow.f64 u2 3))))))))","fresh",0.7122700119191491],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 (pow.f64 (PI.f64) 3))) 1) (pow.f64 u2 3))))))))","fresh",0.5984566018065739],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (exp.f64 (log.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",2.5166060508816623],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))","fresh",13.006581425036854]],"compiler":[[22,20],[19,17],[33,28],[20,18],[18,16],[20,18],[22,17],[19,17],[16,14],[24,22],[26,24],[19,17],[32,27]],"count":[[131,13]],"kept":[{"done":[0,0],"fresh":[12,12],"new":[118,0],"picked":[1,1]}],"min-error":[0.12957001953688402],"time":26.56396484375,"type":"prune"},{"accuracy":[0.5206253029643637],"baseline":[0.5206253029643638],"branch":[["cosTheta_i",0.5206253029643637,1],["u1",0.5206253029643638,1],["u2",0.5206253029643638,1],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",0.5206253029643637,1],["(sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1))))",0.5206253029643638,1],["(neg.f64 (log.f64 (-.f64 1 u1)))",0.5206253029643638,1],["(log.f64 (-.f64 1 u1))",0.5206253029643637,1],["(-.f64 1 u1)",0.5206253029643637,1],["(sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",0.5206253029643637,1],["(sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",0.5206253029643637,1],["(*.f64 (*.f64 2 (PI.f64)) u2)",0.5206253029643638,1],["(*.f64 (*.f64 2 (PI.f64)) u2)",0.5206253029643638,1]],"compiler":[[4,3],[4,3],[4,3],[16,14],[9,8],[8,7],[7,6],[6,5],[9,8],[9,8],[8,7],[8,7],[571,312]],"count":[[30,1]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3/2) 2)))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (*.f64 (*.f64 2 (sin.f64 (*.f64 (PI.f64) u2))) (cos.f64 (*.f64 (PI.f64) u2))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (exp.f64 (*.f64 3 (log.f64 (PI.f64)))) (pow.f64 u2 3))))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (-.f64 (exp.f64 (log1p.f64 (pow.f64 (PI.f64) 3))) 1) (pow.f64 u2 3))))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (*.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (*.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (log.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 3))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (pow.f64 (sqrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 3)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3))))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (exp.f64 (log.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (pow.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) 2))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 2 (*.f64 (sin.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 u2 (fma.f64 2 (PI.f64) (*.f64 (pow.f64 (PI.f64) 3) (*.f64 -4/3 (*.f64 u2 u2))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (expm1.f64 (log1p.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (-.f64 (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cos.f64 1)) (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sin.f64 1))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1/3))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (sqrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (pow.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) 1/3))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"link":["."],"name":["Beckmann Sample, near normal, slope_y"],"oracle":[25.224644356443314],"outputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))"]],"time":124.885986328125,"times":[["cosTheta_i",9.1259765625],["u1",9.1708984375],["u2",9.093017578125],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",9.322998046875],["(sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1))))",9.451904296875],["(neg.f64 (log.f64 (-.f64 1 u1)))",9.27783203125],["(log.f64 (-.f64 1 u1))",9.22412109375],["(-.f64 1 u1)",11.037841796875],["(sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",9.57080078125],["(sin.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",9.43408203125],["(*.f64 (*.f64 2 (PI.f64)) u2)",9.343994140625],["(*.f64 (*.f64 2 (PI.f64)) u2)",9.427001953125]],"type":"regimes"},{"compiler":[[17,15]],"egraph":[[3,30,25,0.000156584],[2,28,25,0.000117167],[1,24,25,7.6334e-5],[0,15,25,3.8875e-5]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (log1p.f64 (expm1.f64 (sin.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.761962890625,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[17,15]],"remove-preprocessing":[[]],"time":10.654052734375,"type":"end"}]
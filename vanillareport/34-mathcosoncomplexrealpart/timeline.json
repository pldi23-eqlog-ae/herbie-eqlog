[{"compiler":[[14,11]],"method":["search"],"sampling":[[12,0.49951183795928955,0.2809754088521004,0.21951275318861008],[11,0.49951183795928955,0.2809754088521004,0.21951275318861008],[10,0.49951183795928955,0.31219489872455597,0.18829326331615448],[9,0.49951183795928955,0.31219489872455597,0.18829326331615448],[8,0.49951183795928955,0.37463387846946716,0.1258542835712433],[7,0.49951183795928955,0.37463387846946716,0.1258542835712433],[6,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[5,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":64.9990234375,"type":"analyze"},{"outcomes":[["body",512,"invalid",120.4619140625,1062],["body",256,"invalid",91.993408203125,1528],["body",1024,"invalid",372.313720703125,1991],["body",512,"valid",128.69970703125,990],["body",1024,"valid",571.173583984375,2097],["body",2048,"valid",2.052978515625,3],["body",256,"valid",306.86376953125,5166]],"time":1606.673095703125,"type":"sample"},{"compiler":[[13,10]],"egraph":[[0,2,2,1.959e-6],[12,7573,34,0.066037583],[11,6064,34,0.052346249],[10,5153,34,0.038672166],[9,4559,34,0.028856416],[8,3813,34,0.021226874],[7,2661,34,0.015363832000000001],[6,1531,34,0.009971124000000001],[5,669,34,0.005659541000000001],[4,372,34,0.002829458],[3,255,34,0.001518833],[2,131,36,0.000840667],[1,49,36,0.000337792],[0,18,36,0.000108875]],"inputs":[["0","1"],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (*.f64 1/2 (cos.f64 im)) (+.f64 (exp.f64 (neg.f64 re)) (exp.f64 re)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 im)) (+.f64 (exp.f64 (neg.f64 re)) (exp.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 im) (+.f64 (exp.f64 (neg.f64 re)) (exp.f64 re))))","(*.f64 (cos.f64 im) (fma.f64 1/2 (exp.f64 re) (/.f64 1/2 (exp.f64 re))))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":90.68896484375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[12,7062,17,0.055286166],[11,6031,17,0.043706874],[10,5458,17,0.032861124],[9,4487,17,0.023795498999999998],[8,3964,17,0.017028999],[7,1348,17,0.010898166],[6,777,17,0.00527775],[5,344,17,0.003004875],[4,192,17,0.001547708],[3,132,17,0.0008530829999999999],[2,70,18,0.000482375],[1,28,18,0.000203916],[0,11,18,7.2875e-5]],"inputs":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))"]],"stop":[["node limit",1]],"time":66.526123046875,"type":"simplify"},{"compiler":[[24,15]],"time":0.423828125,"type":"eval"},{"alts":[["(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","next",0.03125]],"compiler":[[13,9],[13,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.03125],"time":0.9111328125,"type":"prune"},{"compiler":[[32,16]],"locations":[["(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))",0.00390625,true],["(/.f64 1/2 (exp.f64 im))",0.0078125,true],["(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))",0.0078125,true],["(cos.f64 re)",0.0234375,true]],"time":8.27197265625,"type":"localize"},{"count":[[4,44]],"series":[["(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","im","-inf",0.156005859375],["(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","im","inf",0.1748046875],["(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","im","0",0.18115234375],["(/.f64 1/2 (exp.f64 im))","im","-inf",0.156982421875],["(/.f64 1/2 (exp.f64 im))","im","inf",0.14501953125],["(/.f64 1/2 (exp.f64 im))","im","0",0.195068359375],["(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","im","-inf",0.76904296875],["(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","im","inf",1.2021484375],["(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","im","0",0.62890625],["(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","re","-inf",0.325927734375],["(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","re","inf",0.623046875],["(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","re","0",0.552978515625],["(cos.f64 re)","re","-inf",0.177001953125],["(cos.f64 re)","re","inf",0.162109375],["(cos.f64 re)","re","0",0.322021484375]],"time":5.98193359375,"type":"series"},{"count":[[4,73]],"egraph":[[2,2171,38,0.020095958],[1,182,38,0.003101749],[0,9,38,0.000255666]],"inputs":[["(cos.f64 re)","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(/.f64 1/2 (exp.f64 im))","(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 re)) (pow.f64 (cbrt.f64 (cos.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (cbrt.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 re)) (sqrt.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 re) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 re) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 re)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (cos.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 re)) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 re) 3) (pow.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) 3) (pow.f64 (cos.f64 re) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1/2 (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/2 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/2 (exp.f64 im))) (pow.f64 (cbrt.f64 (/.f64 1/2 (exp.f64 im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (exp.f64 im))) 2) (cbrt.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 1/2 (exp.f64 im))) (sqrt.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (/.f64 1 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 im)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/2 (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/2 (exp.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/2 (exp.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 1/2 (exp.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 im) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/2 (exp.f64 im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 1/2) im))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1/2 (exp.f64 im)) (*.f64 1/2 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/2 (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) 1) (/.f64 1/2 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) (pow.f64 (cbrt.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 2) (cbrt.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) (sqrt.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 1/2 (exp.f64 im)) 3) (pow.f64 (/.f64 1/2 (exp.f64 im)) 3)) (+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (*.f64 1/2 (exp.f64 im))) (-.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)) (*.f64 (*.f64 1/2 (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (*.f64 1/2 (exp.f64 im))) (/.f64 1/4 (pow.f64 (exp.f64 im) 2))) (-.f64 (*.f64 1/2 (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))))))))"]],"rules":[["egg-rr",22],["egg-rr",20],["egg-rr",15],["egg-rr",16]],"stop":[["node limit",1]],"time":46.576904296875,"type":"rewrite"},{"count":[[117,110]],"egraph":[[4,6023,665,0.028298542],[3,3463,665,0.015459958999999999],[2,818,687,0.006285501],[1,250,735,0.0017109170000000002],[0,81,777,0.000418792]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 re 2)))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/2 (pow.f64 re 2))))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 re 2)) (*.f64 -1/720 (pow.f64 re 6)))))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 1/2 (exp.f64 im)) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 1/2 (exp.f64 im)) (*.f64 1/2 (/.f64 1 (exp.f64 im))))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 re 6) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(cos.f64 re)","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (cos.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (cos.f64 re) (*.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4)))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (cos.f64 re) (+.f64 (*.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4))) (*.f64 1/720 (*.f64 (cos.f64 re) (pow.f64 im 6))))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","1/2","(+.f64 1/2 (*.f64 -1/2 im))","(+.f64 1/2 (+.f64 (*.f64 1/4 (pow.f64 im 2)) (*.f64 -1/2 im)))","(+.f64 1/2 (+.f64 (*.f64 1/4 (pow.f64 im 2)) (+.f64 (*.f64 -1/2 im) (*.f64 -1/12 (pow.f64 im 3)))))","1","(+.f64 1 (*.f64 1/2 (pow.f64 im 2)))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 im 2)) (*.f64 1/24 (pow.f64 im 4))))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 im 2)) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 1/720 (pow.f64 im 6)))))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 re 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 re re)))","(fma.f64 -1/2 (*.f64 re re) 1)","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (*.f64 -1/2 (pow.f64 re 2))))","(fma.f64 1/24 (pow.f64 re 4) (+.f64 1 (*.f64 -1/2 (*.f64 re re))))","(fma.f64 1/24 (pow.f64 re 4) (fma.f64 -1/2 (*.f64 re re) 1))","(fma.f64 -1/2 (*.f64 re re) (fma.f64 1/24 (pow.f64 re 4) 1))","(+.f64 (*.f64 1/24 (pow.f64 re 4)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 re 2)) (*.f64 -1/720 (pow.f64 re 6)))))","(fma.f64 1/24 (pow.f64 re 4) (+.f64 1 (fma.f64 -1/2 (*.f64 re re) (*.f64 -1/720 (pow.f64 re 6)))))","(+.f64 (fma.f64 1/24 (pow.f64 re 4) (fma.f64 -1/2 (*.f64 re re) 1)) (*.f64 -1/720 (pow.f64 re 6)))","(fma.f64 1/24 (pow.f64 re 4) (fma.f64 -1/2 (*.f64 re re) (fma.f64 -1/720 (pow.f64 re 6) 1)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 1/2 (exp.f64 im)) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(fma.f64 -1/2 (*.f64 (*.f64 re re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 -1/2 (*.f64 re re) 1) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 1/2 (exp.f64 im)) (*.f64 1/2 (/.f64 1 (exp.f64 im))))))","(fma.f64 -1/2 (*.f64 (*.f64 re re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) (fma.f64 1/24 (*.f64 (pow.f64 re 4) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))))","(fma.f64 -1/2 (*.f64 (*.f64 re re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) (*.f64 (fma.f64 1/24 (pow.f64 re 4) 1) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (fma.f64 -1/2 (*.f64 re re) (fma.f64 1/24 (pow.f64 re 4) 1)))","(*.f64 (fma.f64 -1/2 (*.f64 re re) (fma.f64 1/24 (pow.f64 re 4) 1)) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 re 2) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 -1/720 (*.f64 (pow.f64 re 6) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))))","(fma.f64 -1/2 (*.f64 (*.f64 re re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) (fma.f64 1/24 (*.f64 (pow.f64 re 4) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) (fma.f64 1/2 (exp.f64 im) (fma.f64 -1/720 (*.f64 (pow.f64 re 6) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) (/.f64 1/2 (exp.f64 im))))))","(+.f64 (fma.f64 1/2 (exp.f64 im) (fma.f64 (*.f64 -1/720 (pow.f64 re 6)) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (/.f64 1/2 (exp.f64 im)))) (*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (+.f64 (*.f64 -1/2 (*.f64 re re)) (*.f64 1/24 (pow.f64 re 4)))))","(+.f64 (*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (fma.f64 -1/2 (*.f64 re re) (fma.f64 1/24 (pow.f64 re 4) 1))) (*.f64 (pow.f64 re 6) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) -1/1440)))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (fma.f64 1/24 (pow.f64 re 4) (fma.f64 -1/2 (*.f64 re re) (fma.f64 -1/720 (pow.f64 re 6) 1))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(cos.f64 re)","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (cos.f64 re))","(fma.f64 1/2 (*.f64 (cos.f64 re) (*.f64 im im)) (cos.f64 re))","(fma.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 im im) (cos.f64 re))","(*.f64 (fma.f64 1/2 (*.f64 im im) 1) (cos.f64 re))","(*.f64 (cos.f64 re) (fma.f64 1/2 (*.f64 im im) 1))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (cos.f64 re) (*.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4)))))","(+.f64 (fma.f64 1/2 (*.f64 (cos.f64 re) (*.f64 im im)) (cos.f64 re)) (*.f64 (*.f64 1/24 (cos.f64 re)) (pow.f64 im 4)))","(fma.f64 1/2 (*.f64 im (*.f64 im (cos.f64 re))) (fma.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4)) (cos.f64 re)))","(+.f64 (cos.f64 re) (*.f64 (cos.f64 re) (fma.f64 1/24 (pow.f64 im 4) (*.f64 1/2 (*.f64 im im)))))","(*.f64 (cos.f64 re) (fma.f64 1/24 (pow.f64 im 4) (fma.f64 1/2 (*.f64 im im) 1)))","(*.f64 (cos.f64 re) (fma.f64 1/2 (*.f64 im im) (fma.f64 1/24 (pow.f64 im 4) 1)))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (cos.f64 re) (+.f64 (*.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4))) (*.f64 1/720 (*.f64 (cos.f64 re) (pow.f64 im 6))))))","(+.f64 (fma.f64 1/2 (*.f64 (cos.f64 re) (*.f64 im im)) (cos.f64 re)) (fma.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4)) (*.f64 1/720 (*.f64 (cos.f64 re) (pow.f64 im 6)))))","(+.f64 (fma.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 im im) (cos.f64 re)) (fma.f64 1/24 (*.f64 (cos.f64 re) (pow.f64 im 4)) (*.f64 (cos.f64 re) (*.f64 1/720 (pow.f64 im 6)))))","(+.f64 (*.f64 (fma.f64 1/24 (pow.f64 im 4) 1) (cos.f64 re)) (*.f64 (cos.f64 re) (fma.f64 1/720 (pow.f64 im 6) (*.f64 1/2 (*.f64 im im)))))","(+.f64 (cos.f64 re) (*.f64 (cos.f64 re) (fma.f64 1/24 (pow.f64 im 4) (fma.f64 1/720 (pow.f64 im 6) (*.f64 1/2 (*.f64 im im))))))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","(*.f64 (cos.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (cos.f64 re))","1/2","(+.f64 1/2 (*.f64 -1/2 im))","(fma.f64 -1/2 im 1/2)","(+.f64 1/2 (+.f64 (*.f64 1/4 (pow.f64 im 2)) (*.f64 -1/2 im)))","(+.f64 1/2 (fma.f64 1/4 (*.f64 im im) (*.f64 -1/2 im)))","(+.f64 1/2 (fma.f64 -1/2 im (*.f64 (*.f64 im im) 1/4)))","(fma.f64 -1/2 im (fma.f64 im (*.f64 im 1/4) 1/2))","(+.f64 1/2 (+.f64 (*.f64 1/4 (pow.f64 im 2)) (+.f64 (*.f64 -1/2 im) (*.f64 -1/12 (pow.f64 im 3)))))","(+.f64 1/2 (fma.f64 1/4 (*.f64 im im) (fma.f64 -1/2 im (*.f64 -1/12 (pow.f64 im 3)))))","(+.f64 1/2 (fma.f64 (*.f64 im im) 1/4 (fma.f64 -1/2 im (*.f64 -1/12 (pow.f64 im 3)))))","(+.f64 1/2 (fma.f64 -1/2 im (*.f64 (*.f64 im im) (+.f64 1/4 (*.f64 im -1/12)))))","(+.f64 1/2 (*.f64 im (+.f64 -1/2 (*.f64 im (+.f64 1/4 (*.f64 im -1/12))))))","1","(+.f64 1 (*.f64 1/2 (pow.f64 im 2)))","(+.f64 1 (*.f64 1/2 (*.f64 im im)))","(fma.f64 1/2 (*.f64 im im) 1)","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 im 2)) (*.f64 1/24 (pow.f64 im 4))))","(+.f64 1 (fma.f64 1/2 (*.f64 im im) (*.f64 1/24 (pow.f64 im 4))))","(+.f64 1 (fma.f64 1/24 (pow.f64 im 4) (*.f64 1/2 (*.f64 im im))))","(fma.f64 1/24 (pow.f64 im 4) (fma.f64 1/2 (*.f64 im im) 1))","(fma.f64 1/2 (*.f64 im im) (fma.f64 1/24 (pow.f64 im 4) 1))","(+.f64 1 (+.f64 (*.f64 1/2 (pow.f64 im 2)) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 1/720 (pow.f64 im 6)))))","(+.f64 1 (fma.f64 1/2 (*.f64 im im) (fma.f64 1/24 (pow.f64 im 4) (*.f64 1/720 (pow.f64 im 6)))))","(+.f64 (fma.f64 1/720 (pow.f64 im 6) (*.f64 1/2 (*.f64 im im))) (fma.f64 1/24 (pow.f64 im 4) 1))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))"]],"stop":[["node limit",1]],"time":47.869140625,"type":"simplify"},{"compiler":[[1784,1050]],"time":21.00390625,"type":"eval"},{"alts":[["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))))","next",0.0234375],["(*.f64 (log1p.f64 (expm1.f64 (cos.f64 re))) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","fresh",0.10546875],["(*.f64 (log.f64 (exp.f64 (cos.f64 re))) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","fresh",0.2948964109257277]],"compiler":[[17,11],[15,11],[15,11],[17,11],[15,11],[15,11]],"count":[[111,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[110,3],"picked":[1,0]}],"min-error":[0.0078125],"time":26.678955078125,"type":"prune"},{"compiler":[[46,22]],"locations":[["(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))",0.0078125,true],["(/.f64 1/2 (exp.f64 im))",0.0078125,false],["(*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))",0.01171875,true],["(cos.f64 re)",0.0234375,false]],"time":10.632080078125,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","im","-inf",0.39990234375],["(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","im","inf",0.412109375],["(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","im","0",0.318115234375],["(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","re","-inf",0.429931640625],["(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","re","inf",0.430908203125],["(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","re","0",0.318115234375],["(*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))","im","-inf",0.510986328125],["(*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))","im","inf",0.501953125],["(*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))","im","0",1.155029296875],["(*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))","re","-inf",0.492919921875],["(*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))","re","inf",0.51318359375],["(*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))","re","0",0.451904296875]],"time":6.111083984375,"type":"series"},{"count":[[2,71]],"egraph":[[2,2487,22,0.023604582],[1,204,22,0.0035060409999999997],[0,10,22,0.000275208]],"inputs":[["(*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 re)) (/.f64 1/2 (exp.f64 im)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 re)) (/.f64 1/2 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 re)) (/.f64 1/2 (exp.f64 im))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 re)) (/.f64 1/2 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 re) (*.f64 (exp.f64 im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (cos.f64 re) 1/2)) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) 1) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (cbrt.f64 (pow.f64 (exp.f64 im) 2))) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (sqrt.f64 (exp.f64 im))) (sqrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (cos.f64 re)) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) -1/2) (neg.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im)) 2)) (cbrt.f64 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im))) (sqrt.f64 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 re)) (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (cos.f64 re)) 1) (+.f64 im (log.f64 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 re)) 1) (-.f64 (log.f64 1/2) im)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cos.f64 re)) (*.f64 (-.f64 (log.f64 1/2) im) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 re)) 1) (*.f64 (-.f64 (log.f64 1/2) im) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (-.f64 (log.f64 1/2) im) 1) (log.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (-.f64 (log.f64 1/2) im) (*.f64 (log.f64 (cos.f64 re)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (-.f64 (log.f64 1/2) im) 1) (*.f64 (log.f64 (cos.f64 re)) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (sqrt.f64 (exp.f64 (cos.f64 re))) (exp.f64 im))) 2)) (log.f64 (cbrt.f64 (pow.f64 (sqrt.f64 (exp.f64 (cos.f64 re))) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (sqrt.f64 (exp.f64 (cos.f64 re))) (exp.f64 im)))) (log.f64 (sqrt.f64 (pow.f64 (sqrt.f64 (exp.f64 (cos.f64 re))) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (+.f64 im (log.f64 (*.f64 (cos.f64 re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 im (log.f64 (*.f64 (cos.f64 re) 1/2)))) 2)) (cbrt.f64 (+.f64 im (log.f64 (*.f64 (cos.f64 re) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (+.f64 im (log.f64 (*.f64 (cos.f64 re) 1/2))))) (sqrt.f64 (+.f64 im (log.f64 (*.f64 (cos.f64 re) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (sqrt.f64 (exp.f64 (cos.f64 re))) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 im (log.f64 (*.f64 (cos.f64 re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 im (log.f64 (*.f64 (cos.f64 re) 1/2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (+.f64 im (log.f64 (*.f64 (cos.f64 re) 1/2)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (+.f64 im (log.f64 (*.f64 (cos.f64 re) 1/2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (+.f64 im (log.f64 (*.f64 (cos.f64 re) 1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (+.f64 im (log.f64 (*.f64 (cos.f64 re) 1/2))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 re)) 1) (+.f64 im (log.f64 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cos.f64 re)) (*.f64 (+.f64 im (log.f64 1/2)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cos.f64 re)) 1) (*.f64 (+.f64 im (log.f64 1/2)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (+.f64 im (log.f64 1/2)) 1) (log.f64 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (+.f64 im (log.f64 1/2)) (*.f64 (log.f64 (cos.f64 re)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (+.f64 im (log.f64 1/2)) 1) (*.f64 (log.f64 (cos.f64 re)) 1)))))))"]],"rules":[["egg-rr",30],["egg-rr",41]],"stop":[["node limit",1]],"time":44.6279296875,"type":"rewrite"},{"count":[[119,103]],"egraph":[[4,7268,666,0.033538209],[3,3089,666,0.019400459000000002],[2,710,687,0.006079501],[1,240,718,0.001690876],[0,83,735,0.000434959]],"inputs":[["(/.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im))))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im))))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 1/2 (exp.f64 im)) (*.f64 -1/4 (*.f64 (exp.f64 im) (pow.f64 re 2))))","(+.f64 (*.f64 1/48 (*.f64 (exp.f64 im) (pow.f64 re 4))) (+.f64 (*.f64 1/2 (exp.f64 im)) (*.f64 -1/4 (*.f64 (exp.f64 im) (pow.f64 re 2)))))","(+.f64 (*.f64 1/48 (*.f64 (exp.f64 im) (pow.f64 re 4))) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 -1/4 (*.f64 (exp.f64 im) (pow.f64 re 2))) (*.f64 -1/1440 (*.f64 (exp.f64 im) (pow.f64 re 6))))))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) im)) (*.f64 1/2 (cos.f64 re)))","(+.f64 (*.f64 1/4 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) im)) (*.f64 1/2 (cos.f64 re))))","(+.f64 (*.f64 1/4 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) im)) (*.f64 1/2 (cos.f64 re)))))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))","(fma.f64 -1/4 (/.f64 re (/.f64 (exp.f64 im) re)) (/.f64 1/2 (exp.f64 im)))","(fma.f64 -1/4 (*.f64 (/.f64 re (exp.f64 im)) re) (/.f64 1/2 (exp.f64 im)))","(fma.f64 -1/4 (*.f64 re (/.f64 re (exp.f64 im))) (/.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))","(fma.f64 -1/4 (/.f64 re (/.f64 (exp.f64 im) re)) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))","(fma.f64 -1/4 (*.f64 (/.f64 re (exp.f64 im)) re) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))","(fma.f64 -1/4 (*.f64 re (/.f64 re (exp.f64 im))) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im))))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (+.f64 (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)))))","(fma.f64 -1/4 (/.f64 re (/.f64 (exp.f64 im) re)) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (fma.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))","(fma.f64 -1/4 (*.f64 (/.f64 re (exp.f64 im)) re) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (fma.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))","(fma.f64 -1/4 (*.f64 re (/.f64 re (exp.f64 im))) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (fma.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))","(fma.f64 1/2 (cos.f64 re) (*.f64 -1/2 (*.f64 im (cos.f64 re))))","(fma.f64 1/2 (cos.f64 re) (*.f64 (cos.f64 re) (*.f64 im -1/2)))","(*.f64 (*.f64 (cos.f64 re) -1/2) (+.f64 -1 im))","(*.f64 (cos.f64 re) (+.f64 1/2 (*.f64 im -1/2)))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im))))","(fma.f64 -1/2 (*.f64 (*.f64 (cos.f64 re) -1/2) (*.f64 im im)) (fma.f64 1/2 (cos.f64 re) (*.f64 -1/2 (*.f64 im (cos.f64 re)))))","(fma.f64 (*.f64 (cos.f64 re) 1/4) (*.f64 im im) (fma.f64 1/2 (cos.f64 re) (*.f64 (cos.f64 re) (*.f64 im -1/2))))","(fma.f64 im (*.f64 (cos.f64 re) -1/2) (*.f64 (cos.f64 re) (+.f64 1/2 (*.f64 (*.f64 im im) 1/4))))","(*.f64 (cos.f64 re) (-.f64 (*.f64 im (+.f64 (*.f64 im 1/4) -1/2)) -1/2))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))))","(fma.f64 -1/2 (*.f64 (fma.f64 -1 (*.f64 (cos.f64 re) -1/2) (*.f64 (cos.f64 re) -1/3)) (pow.f64 im 3)) (fma.f64 -1/2 (*.f64 (*.f64 (cos.f64 re) -1/2) (*.f64 im im)) (fma.f64 1/2 (cos.f64 re) (*.f64 -1/2 (*.f64 im (cos.f64 re))))))","(fma.f64 (*.f64 -1/2 (fma.f64 (cos.f64 re) -1/3 (*.f64 1/2 (cos.f64 re)))) (pow.f64 im 3) (fma.f64 (*.f64 (cos.f64 re) 1/4) (*.f64 im im) (fma.f64 1/2 (cos.f64 re) (*.f64 (cos.f64 re) (*.f64 im -1/2)))))","(fma.f64 (pow.f64 im 3) (*.f64 (cos.f64 re) -1/12) (fma.f64 im (*.f64 (cos.f64 re) -1/2) (*.f64 (cos.f64 re) (+.f64 1/2 (*.f64 (*.f64 im im) 1/4)))))","(fma.f64 (pow.f64 im 3) (*.f64 (cos.f64 re) -1/12) (*.f64 (cos.f64 re) (-.f64 (*.f64 im (+.f64 (*.f64 im 1/4) -1/2)) -1/2)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 1/2 (exp.f64 im)) (*.f64 -1/4 (*.f64 (exp.f64 im) (pow.f64 re 2))))","(fma.f64 1/2 (exp.f64 im) (*.f64 -1/4 (*.f64 (exp.f64 im) (*.f64 re re))))","(fma.f64 1/2 (exp.f64 im) (*.f64 (exp.f64 im) (*.f64 -1/4 (*.f64 re re))))","(*.f64 (exp.f64 im) (+.f64 1/2 (*.f64 -1/4 (*.f64 re re))))","(*.f64 (exp.f64 im) (+.f64 1/2 (*.f64 re (*.f64 -1/4 re))))","(+.f64 (*.f64 1/48 (*.f64 (exp.f64 im) (pow.f64 re 4))) (+.f64 (*.f64 1/2 (exp.f64 im)) (*.f64 -1/4 (*.f64 (exp.f64 im) (pow.f64 re 2)))))","(fma.f64 1/48 (*.f64 (exp.f64 im) (pow.f64 re 4)) (fma.f64 1/2 (exp.f64 im) (*.f64 -1/4 (*.f64 (exp.f64 im) (*.f64 re re)))))","(fma.f64 1/48 (*.f64 (exp.f64 im) (pow.f64 re 4)) (fma.f64 1/2 (exp.f64 im) (*.f64 (exp.f64 im) (*.f64 -1/4 (*.f64 re re)))))","(fma.f64 1/2 (exp.f64 im) (*.f64 (exp.f64 im) (+.f64 (*.f64 -1/4 (*.f64 re re)) (*.f64 1/48 (pow.f64 re 4)))))","(fma.f64 1/2 (exp.f64 im) (*.f64 (exp.f64 im) (*.f64 (*.f64 re re) (+.f64 -1/4 (*.f64 re (*.f64 re 1/48))))))","(+.f64 (*.f64 1/48 (*.f64 (exp.f64 im) (pow.f64 re 4))) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 -1/4 (*.f64 (exp.f64 im) (pow.f64 re 2))) (*.f64 -1/1440 (*.f64 (exp.f64 im) (pow.f64 re 6))))))","(fma.f64 1/48 (*.f64 (exp.f64 im) (pow.f64 re 4)) (fma.f64 1/2 (exp.f64 im) (fma.f64 -1/4 (*.f64 (exp.f64 im) (*.f64 re re)) (*.f64 (*.f64 -1/1440 (exp.f64 im)) (pow.f64 re 6)))))","(fma.f64 1/48 (*.f64 (exp.f64 im) (pow.f64 re 4)) (fma.f64 1/2 (exp.f64 im) (fma.f64 -1/4 (*.f64 (exp.f64 im) (*.f64 re re)) (*.f64 (exp.f64 im) (*.f64 -1/1440 (pow.f64 re 6))))))","(+.f64 (*.f64 (exp.f64 im) (+.f64 (*.f64 -1/4 (*.f64 re re)) (*.f64 -1/1440 (pow.f64 re 6)))) (*.f64 (exp.f64 im) (+.f64 1/2 (*.f64 1/48 (pow.f64 re 4)))))","(+.f64 (*.f64 (exp.f64 im) (+.f64 1/2 (*.f64 re (*.f64 -1/4 re)))) (*.f64 (exp.f64 im) (+.f64 (*.f64 1/48 (pow.f64 re 4)) (*.f64 -1/1440 (pow.f64 re 6)))))","(+.f64 (*.f64 (exp.f64 im) (+.f64 1/2 (*.f64 -1/4 (*.f64 re re)))) (*.f64 (exp.f64 im) (+.f64 (*.f64 1/48 (pow.f64 re 4)) (*.f64 -1/1440 (pow.f64 re 6)))))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) im)) (*.f64 1/2 (cos.f64 re)))","(*.f64 1/2 (+.f64 (*.f64 im (cos.f64 re)) (cos.f64 re)))","(*.f64 1/2 (*.f64 (+.f64 im 1) (cos.f64 re)))","(*.f64 1/2 (*.f64 (cos.f64 re) (+.f64 im 1)))","(*.f64 (cos.f64 re) (*.f64 1/2 (+.f64 im 1)))","(+.f64 (*.f64 1/4 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) im)) (*.f64 1/2 (cos.f64 re))))","(fma.f64 1/4 (*.f64 (cos.f64 re) (*.f64 im im)) (*.f64 1/2 (+.f64 (*.f64 im (cos.f64 re)) (cos.f64 re))))","(fma.f64 1/2 (*.f64 (+.f64 im 1) (cos.f64 re)) (*.f64 (cos.f64 re) (*.f64 (*.f64 im im) 1/4)))","(fma.f64 1/2 (cos.f64 re) (*.f64 (cos.f64 re) (+.f64 (*.f64 (*.f64 im im) 1/4) (*.f64 1/2 im))))","(*.f64 (cos.f64 re) (-.f64 (*.f64 im (+.f64 (*.f64 im 1/4) 1/2)) -1/2))","(+.f64 (*.f64 1/4 (*.f64 (cos.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/12 (*.f64 (cos.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) im)) (*.f64 1/2 (cos.f64 re)))))","(fma.f64 1/4 (*.f64 (cos.f64 re) (*.f64 im im)) (fma.f64 1/12 (*.f64 (cos.f64 re) (pow.f64 im 3)) (*.f64 1/2 (+.f64 (*.f64 im (cos.f64 re)) (cos.f64 re)))))","(fma.f64 1/4 (*.f64 im (*.f64 im (cos.f64 re))) (fma.f64 1/2 (*.f64 (+.f64 im 1) (cos.f64 re)) (*.f64 (cos.f64 re) (*.f64 (pow.f64 im 3) 1/12))))","(fma.f64 1/2 (*.f64 (cos.f64 re) (+.f64 im 1)) (*.f64 (cos.f64 re) (+.f64 (*.f64 (*.f64 im im) 1/4) (*.f64 (pow.f64 im 3) 1/12))))","(fma.f64 (cos.f64 re) (*.f64 (pow.f64 im 3) 1/12) (*.f64 (cos.f64 re) (-.f64 (*.f64 im (+.f64 (*.f64 im 1/4) 1/2)) -1/2)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im)))"]],"stop":[["node limit",1]],"time":53.256103515625,"type":"simplify"},{"compiler":[[3585,1992]],"time":35.718017578125,"type":"eval"},{"alts":[["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)))))","next",0.01953125],["(+.f64 (log.f64 (+.f64 1 (expm1.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))))) (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))))","fresh",0.5772451847944388],["(+.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 3) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))))","fresh",0.21875],["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))","fresh",0.078125],["(*.f64 (log1p.f64 (expm1.f64 (cos.f64 re))) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","fresh",0.10546875]],"compiler":[[20,14],[21,15],[20,14],[19,13],[15,11],[20,14],[21,15],[20,14],[19,13],[15,11]],"count":[[179,5]],"kept":[{"done":[0,0],"fresh":[2,1],"new":[176,4],"picked":[1,0]}],"min-error":[0],"time":53.531005859375,"type":"prune"},{"compiler":[[67,39]],"locations":[["(*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2))))",0.01171875,true],["(pow.f64 (exp.f64 im) 2)",0.015625,true],["(/.f64 1/4 (pow.f64 (exp.f64 im) 2))",0.015625,true],["(cos.f64 re)",0.0234375,false]],"time":14.998779296875,"type":"localize"},{"count":[[3,32]],"series":[["(*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2))))","im","-inf",0.173095703125],["(*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2))))","im","inf",0.156005859375],["(*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2))))","im","0",0.212890625],["(*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2))))","re","-inf",0.15283203125],["(*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2))))","re","inf",0.151123046875],["(*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2))))","re","0",0.2099609375],["(pow.f64 (exp.f64 im) 2)","im","-inf",0.137939453125],["(pow.f64 (exp.f64 im) 2)","im","inf",0.14404296875],["(pow.f64 (exp.f64 im) 2)","im","0",0.180908203125],["(/.f64 1/4 (pow.f64 (exp.f64 im) 2))","im","-inf",0.545166015625],["(/.f64 1/4 (pow.f64 (exp.f64 im) 2))","im","inf",0.57177734375],["(/.f64 1/4 (pow.f64 (exp.f64 im) 2))","im","0",0.322998046875]],"time":3.126220703125,"type":"series"},{"count":[[3,59]],"egraph":[[2,2548,26,0.021788083],[1,226,26,0.0038695830000000002],[0,11,31,0.000351416]],"inputs":[["(/.f64 1/4 (pow.f64 (exp.f64 im) 2))","(pow.f64 (exp.f64 im) 2)","(*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/4 (pow.f64 (exp.f64 im) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/4 (pow.f64 (exp.f64 im) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2))) (cbrt.f64 (/.f64 1/16 (pow.f64 (exp.f64 im) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2))) (*.f64 (cbrt.f64 (/.f64 1/2 (exp.f64 im))) (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/16 (pow.f64 (exp.f64 im) 4))) (cbrt.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 1/2 (exp.f64 im))) (*.f64 (sqrt.f64 (/.f64 1/2 (exp.f64 im))) (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/4 (/.f64 1 (neg.f64 (pow.f64 (exp.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 im) -2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1/2 (exp.f64 im)) (sqrt.f64 (/.f64 1/2 (exp.f64 im)))) (sqrt.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1/2 (exp.f64 im)) (cbrt.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2)))) (cbrt.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/2 (exp.f64 im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/16 (pow.f64 (exp.f64 im) 4)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (exp.f64 im) 2) 4) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1/16 (pow.f64 (exp.f64 im) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 1/4) (pow.f64 (exp.f64 im) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/4 (pow.f64 (exp.f64 im) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 1/4) (+.f64 im im)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (exp.f64 im) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 im) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 im) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (exp.f64 im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 im) 4)) (pow.f64 (cbrt.f64 (exp.f64 im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 im)) 2) (cbrt.f64 (pow.f64 (exp.f64 im) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 im)) 2) (*.f64 (cbrt.f64 (exp.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 im)) (*.f64 (sqrt.f64 (exp.f64 im)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 im) (sqrt.f64 (exp.f64 im))) (sqrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 im) (pow.f64 (cbrt.f64 (exp.f64 im)) 2)) (cbrt.f64 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 im) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (exp.f64 im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 im) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 im im))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (cos.f64 re)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 re) 3) (/.f64 1/8 (pow.f64 (exp.f64 im) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (/.f64 1/8 (pow.f64 (exp.f64 im) 3)) (pow.f64 (cos.f64 re) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cos.f64 re)) (-.f64 (log.f64 1/2) im)))))))"]],"rules":[["egg-rr",16],["egg-rr",17],["egg-rr",26]],"stop":[["node limit",1]],"time":44.2958984375,"type":"rewrite"},{"count":[[91,89]],"egraph":[[4,6155,418,0.030436667],[3,2550,418,0.016132792],[2,588,425,0.0051028340000000005],[1,206,448,0.0014199590000000002],[0,76,465,0.00036325]],"inputs":[["1/4","(+.f64 1/4 (*.f64 -1/2 im))","(+.f64 1/4 (+.f64 (*.f64 -1/2 im) (*.f64 1/2 (pow.f64 im 2))))","(+.f64 1/4 (+.f64 (*.f64 -1/2 im) (+.f64 (*.f64 1/2 (pow.f64 im 2)) (*.f64 -1/3 (pow.f64 im 3)))))","1","(+.f64 1 (*.f64 2 im))","(+.f64 (*.f64 2 (pow.f64 im 2)) (+.f64 1 (*.f64 2 im)))","(+.f64 (*.f64 2 (pow.f64 im 2)) (+.f64 1 (+.f64 (*.f64 2 im) (*.f64 4/3 (pow.f64 im 3)))))","(/.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im))))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im))))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))"]],"method":["egg-herbie"],"outputs":[["1/4","(+.f64 1/4 (*.f64 -1/2 im))","(fma.f64 -1/2 im 1/4)","(+.f64 1/4 (+.f64 (*.f64 -1/2 im) (*.f64 1/2 (pow.f64 im 2))))","(+.f64 1/4 (fma.f64 -1/2 im (*.f64 1/2 (*.f64 im im))))","(+.f64 1/4 (fma.f64 1/2 (*.f64 im im) (*.f64 -1/2 im)))","(fma.f64 -1/2 im (fma.f64 im (*.f64 im 1/2) 1/4))","(+.f64 1/4 (+.f64 (*.f64 -1/2 im) (+.f64 (*.f64 1/2 (pow.f64 im 2)) (*.f64 -1/3 (pow.f64 im 3)))))","(+.f64 1/4 (fma.f64 -1/2 im (fma.f64 1/2 (*.f64 im im) (*.f64 -1/3 (pow.f64 im 3)))))","(+.f64 (fma.f64 -1/2 im 1/4) (fma.f64 1/2 (*.f64 im im) (*.f64 -1/3 (pow.f64 im 3))))","(+.f64 (fma.f64 -1/2 im 1/4) (*.f64 (*.f64 im im) (+.f64 1/2 (*.f64 im -1/3))))","(+.f64 1/4 (*.f64 im (+.f64 -1/2 (*.f64 im (+.f64 1/2 (*.f64 im -1/3))))))","1","(+.f64 1 (*.f64 2 im))","(+.f64 1 (*.f64 im 2))","(fma.f64 im 2 1)","(+.f64 (*.f64 2 (pow.f64 im 2)) (+.f64 1 (*.f64 2 im)))","(fma.f64 2 (*.f64 im im) (+.f64 1 (*.f64 im 2)))","(fma.f64 2 (*.f64 im im) (fma.f64 im 2 1))","(fma.f64 im 2 (fma.f64 2 (*.f64 im im) 1))","(fma.f64 im 2 (fma.f64 im (*.f64 im 2) 1))","(+.f64 (*.f64 2 (pow.f64 im 2)) (+.f64 1 (+.f64 (*.f64 2 im) (*.f64 4/3 (pow.f64 im 3)))))","(fma.f64 2 (*.f64 im im) (+.f64 1 (fma.f64 2 im (*.f64 (pow.f64 im 3) 4/3))))","(+.f64 (fma.f64 im 2 (*.f64 (pow.f64 im 3) 4/3)) (fma.f64 2 (*.f64 im im) 1))","(fma.f64 im (*.f64 im 2) (fma.f64 im 2 (fma.f64 (pow.f64 im 3) 4/3 1)))","(/.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))","(fma.f64 -1/4 (/.f64 re (/.f64 (exp.f64 im) re)) (/.f64 1/2 (exp.f64 im)))","(fma.f64 -1/4 (*.f64 (/.f64 re (exp.f64 im)) re) (/.f64 1/2 (exp.f64 im)))","(fma.f64 -1/4 (*.f64 re (/.f64 re (exp.f64 im))) (/.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))","(fma.f64 -1/4 (/.f64 re (/.f64 (exp.f64 im) re)) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))","(fma.f64 -1/4 (*.f64 (/.f64 re (exp.f64 im)) re) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))","(fma.f64 -1/4 (*.f64 re (/.f64 re (exp.f64 im))) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im))))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (+.f64 (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))) (/.f64 (*.f64 -1/1440 (pow.f64 re 6)) (exp.f64 im))))","(fma.f64 -1/4 (/.f64 re (/.f64 (exp.f64 im) re)) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (fma.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))","(fma.f64 -1/4 (*.f64 (/.f64 re (exp.f64 im)) re) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (fma.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))","(fma.f64 -1/4 (*.f64 re (/.f64 re (exp.f64 im))) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (fma.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))","(fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (fma.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))","(fma.f64 1/2 (cos.f64 re) (*.f64 -1/2 (*.f64 im (cos.f64 re))))","(fma.f64 -1/2 (*.f64 im (cos.f64 re)) (*.f64 1/2 (cos.f64 re)))","(*.f64 (cos.f64 re) (+.f64 (*.f64 -1/2 im) 1/2))","(*.f64 -1/2 (*.f64 (cos.f64 re) (+.f64 im -1)))","(*.f64 (*.f64 -1/2 (cos.f64 re)) (+.f64 im -1))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im))))","(fma.f64 -1/2 (*.f64 (*.f64 im im) (*.f64 -1/2 (cos.f64 re))) (fma.f64 1/2 (cos.f64 re) (*.f64 -1/2 (*.f64 im (cos.f64 re)))))","(fma.f64 (*.f64 1/4 (cos.f64 re)) (*.f64 im im) (fma.f64 -1/2 (*.f64 im (cos.f64 re)) (*.f64 1/2 (cos.f64 re))))","(fma.f64 1/2 (cos.f64 re) (*.f64 (*.f64 -1/2 (cos.f64 re)) (+.f64 im (*.f64 -1/2 (*.f64 im im)))))","(*.f64 (*.f64 -1/2 (cos.f64 re)) (+.f64 -1 (+.f64 im (*.f64 -1/2 (*.f64 im im)))))","(*.f64 (*.f64 -1/2 (cos.f64 re)) (+.f64 (+.f64 im (*.f64 -1/2 (*.f64 im im))) -1))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))))","(fma.f64 -1/2 (*.f64 (pow.f64 im 3) (fma.f64 -1 (*.f64 -1/2 (cos.f64 re)) (*.f64 (cos.f64 re) -1/3))) (fma.f64 -1/2 (*.f64 (*.f64 im im) (*.f64 -1/2 (cos.f64 re))) (fma.f64 1/2 (cos.f64 re) (*.f64 -1/2 (*.f64 im (cos.f64 re))))))","(fma.f64 -1/2 (*.f64 (pow.f64 im 3) (fma.f64 (cos.f64 re) -1/3 (*.f64 1/2 (cos.f64 re)))) (fma.f64 (*.f64 1/4 (cos.f64 re)) (*.f64 im im) (fma.f64 -1/2 (*.f64 im (cos.f64 re)) (*.f64 1/2 (cos.f64 re)))))","(fma.f64 (*.f64 im im) (*.f64 1/4 (cos.f64 re)) (fma.f64 (pow.f64 im 3) (*.f64 (cos.f64 re) -1/12) (*.f64 (cos.f64 re) (+.f64 (*.f64 -1/2 im) 1/2))))","(fma.f64 (pow.f64 im 3) (*.f64 (cos.f64 re) -1/12) (*.f64 (*.f64 -1/2 (cos.f64 re)) (+.f64 -1 (+.f64 im (*.f64 -1/2 (*.f64 im im))))))","(fma.f64 (pow.f64 im 3) (*.f64 (cos.f64 re) -1/12) (*.f64 (*.f64 -1/2 (cos.f64 re)) (+.f64 (+.f64 im (*.f64 -1/2 (*.f64 im im))) -1)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 (/.f64 1/2 (exp.f64 im)) (cos.f64 re))"]],"stop":[["node limit",1]],"time":47.240966796875,"type":"simplify"},{"compiler":[[3003,1776]],"time":30.151123046875,"type":"eval"},{"alts":[["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)))))","done",0.01953125],["(+.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 3) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)))))","fresh",0.21484375],["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))","next",0.078125],["(*.f64 (log1p.f64 (expm1.f64 (cos.f64 re))) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","fresh",0.10546875],["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (log.f64 (exp.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im)))))","fresh",0.5515226750259967]],"compiler":[[20,14],[23,17],[19,13],[15,11],[19,13],[23,17],[19,13],[15,11],[19,13]],"count":[[140,5]],"kept":[{"done":[0,0],"fresh":[4,2],"new":[135,2],"picked":[1,1]}],"min-error":[0],"time":41.6689453125,"type":"prune"},{"compiler":[[58,30]],"locations":[["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))",0.0078125,true],["(cos.f64 re)",0.0234375,false],["(/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))",0.11328125,true],["(/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))",0.19140625,true]],"time":12.3330078125,"type":"localize"},{"count":[[3,72]],"series":[["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))","im","-inf",0.2138671875],["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))","im","inf",0.198974609375],["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))","im","0",0.3349609375],["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))","re","-inf",0.193115234375],["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))","re","inf",0.23291015625],["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))","re","0",0.76220703125],["(/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))","re","-inf",0.5009765625],["(/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))","re","inf",2.026123046875],["(/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))","re","0",0.451904296875],["(/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))","im","-inf",0.509033203125],["(/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))","im","inf",0.5078125],["(/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))","im","0",0.34814453125],["(/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))","re","-inf",0.162109375],["(/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))","re","inf",0.18408203125],["(/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))","re","0",0.185791015625],["(/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))","im","-inf",0.18212890625],["(/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))","im","inf",0.1689453125],["(/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))","im","0",0.260986328125]],"time":7.7109375,"type":"series"},{"count":[[3,193]],"egraph":[[2,3776,44,0.029666541999999997],[1,276,44,0.005091125],[0,13,50,0.00036275]],"inputs":[["(/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))","(/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))","(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) (pow.f64 (cbrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 2) (cbrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) (sqrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (*.f64 (exp.f64 im) (neg.f64 (/.f64 2 (cos.f64 re))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 im)) (*.f64 (cos.f64 re) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 im)) (/.f64 1 (/.f64 2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))) 2)) (cbrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) 1) (/.f64 1/2 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2) 1) (/.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) 1) (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (exp.f64 (+.f64 im im)))) (/.f64 (*.f64 (cos.f64 re) 1/2) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 (+.f64 im im)))) (/.f64 1/2 (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 (cbrt.f64 (exp.f64 (+.f64 im im)))) (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2) (cbrt.f64 (exp.f64 (+.f64 im im)))) (/.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (cbrt.f64 (exp.f64 (+.f64 im im)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (cbrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (exp.f64 im))) (/.f64 (*.f64 (cos.f64 re) 1/2) (sqrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cos.f64 re) (sqrt.f64 (exp.f64 im))) (/.f64 1/2 (sqrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 (sqrt.f64 (exp.f64 im))) (/.f64 (cos.f64 re) (sqrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2) (sqrt.f64 (exp.f64 im))) (/.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) (sqrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (sqrt.f64 (exp.f64 im))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (sqrt.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (neg.f64 (exp.f64 im))) (*.f64 (cos.f64 re) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (/.f64 (exp.f64 im) (cos.f64 re))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (neg.f64 im)) 1) (*.f64 (cos.f64 re) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (neg.f64 im)) (cos.f64 re)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (neg.f64 im)) 1/2) (cos.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (neg.f64 im)) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2)) (cbrt.f64 (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 (neg.f64 im)) (sqrt.f64 (*.f64 (cos.f64 re) 1/2))) (sqrt.f64 (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 re) 1/2) 3) (pow.f64 (exp.f64 im) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (neg.f64 (*.f64 (exp.f64 im) (neg.f64 (/.f64 2 (cos.f64 re))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (sqrt.f64 (exp.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 (cos.f64 re) 1/2) 3) (pow.f64 (exp.f64 im) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 im (log.f64 (/.f64 2 (cos.f64 re)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log.f64 (*.f64 (cos.f64 re) 1/2)) im) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (exp.f64 im)) (/.f64 2 (cos.f64 re)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (exp.f64 im)) (/.f64 2 (cos.f64 re))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (exp.f64 im)) (/.f64 2 (cos.f64 re))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (exp.f64 im)) (/.f64 2 (cos.f64 re))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))) (pow.f64 (cbrt.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))) 2) (cbrt.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (*.f64 (cbrt.f64 (exp.f64 im)) (/.f64 2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))) (sqrt.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 im)) (*.f64 (sqrt.f64 (exp.f64 im)) (/.f64 2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (exp.f64 im)) (/.f64 1 (*.f64 (cos.f64 re) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (exp.f64 im) (cos.f64 re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) 1) (/.f64 (cbrt.f64 (exp.f64 im)) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (exp.f64 im)) 1) (/.f64 (sqrt.f64 (exp.f64 im)) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 re)) (/.f64 (exp.f64 im) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (cos.f64 re)) (/.f64 (cbrt.f64 (exp.f64 im)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (exp.f64 im)) (cos.f64 re)) (/.f64 (sqrt.f64 (exp.f64 im)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (exp.f64 im)) 1/2) (/.f64 (sqrt.f64 (exp.f64 im)) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) 1/2) (/.f64 (cbrt.f64 (exp.f64 im)) (cos.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2)) (/.f64 (exp.f64 im) (cbrt.f64 (*.f64 (cos.f64 re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2)) (cbrt.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (exp.f64 im)) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2)) (/.f64 (sqrt.f64 (exp.f64 im)) (cbrt.f64 (*.f64 (cos.f64 re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (*.f64 (cos.f64 re) 1/2))) (/.f64 (exp.f64 im) (sqrt.f64 (*.f64 (cos.f64 re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (exp.f64 (+.f64 im im))) (sqrt.f64 (*.f64 (cos.f64 re) 1/2))) (/.f64 (cbrt.f64 (exp.f64 im)) (sqrt.f64 (*.f64 (cos.f64 re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 (exp.f64 im) (cos.f64 re)) 2) 1/4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (exp.f64 im) 3) (pow.f64 (*.f64 (cos.f64 re) 1/2) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (/.f64 (exp.f64 im) (cos.f64 re)) 2) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (exp.f64 im)) (/.f64 2 (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (exp.f64 im) 3) (pow.f64 (*.f64 (cos.f64 re) 1/2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 im (log.f64 (/.f64 2 (cos.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 im (log.f64 (/.f64 2 (cos.f64 re)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2) (-.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) (/.f64 (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) -2) (-.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) (pow.f64 (cbrt.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) 2) (cbrt.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) (sqrt.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 3) (pow.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 3)) (/.f64 1 (fma.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (-.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))) (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2) (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) -2)) (/.f64 1 (-.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (-.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))) (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2)) (+.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 3) (pow.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) (-.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2) (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 3) (pow.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 3)) (fma.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (-.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))) (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 3) (pow.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 3)) (+.f64 (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) -2) (-.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2) (*.f64 (cos.f64 re) (*.f64 (*.f64 (exp.f64 im) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2) (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) -2)) (-.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 3) (pow.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 3))) (neg.f64 (fma.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (-.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))) (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2) (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) -2))) (neg.f64 (-.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) -2) (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2)) (-.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (-.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))) (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2)) (+.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 3) (pow.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) (-.f64 (pow.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 2) (pow.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re))) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) (pow.f64 (sqrt.f64 (exp.f64 (exp.f64 im))) (cos.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) (+.f64 1 (expm1.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) (+.f64 1 (expm1.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))) (exp.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 (exp.f64 im))) (cos.f64 re)) (+.f64 1 (expm1.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))) (+.f64 1 (expm1.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 re) (*.f64 (exp.f64 im) 1/2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 (neg.f64 im)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)) 1 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 im) 1/2) (cos.f64 re) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)) 1 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/4 (exp.f64 (+.f64 im im)))) (*.f64 (cbrt.f64 (*.f64 (exp.f64 im) 1/2)) (cos.f64 re)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2) (*.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) (exp.f64 im)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))) (pow.f64 (cbrt.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))) 2) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))) 2) (cbrt.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 2) (*.f64 (cbrt.f64 (cos.f64 re)) (*.f64 (exp.f64 im) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) (pow.f64 (cbrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 2) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) 2) (cbrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (exp.f64 im) 1/2)) (*.f64 (sqrt.f64 (*.f64 (exp.f64 im) 1/2)) (cos.f64 re)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (*.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (exp.f64 im)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))) (sqrt.f64 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cos.f64 re)) (*.f64 (sqrt.f64 (cos.f64 re)) (*.f64 (exp.f64 im) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) (sqrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (*.f64 (exp.f64 im) (neg.f64 (/.f64 2 (cos.f64 re))))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 im)) (*.f64 (cos.f64 re) 1/2) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (neg.f64 im)) (/.f64 1 (/.f64 2 (cos.f64 re))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (*.f64 (exp.f64 im) (/.f64 2 (cos.f64 re)))) 2)) (cbrt.f64 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cos.f64 re) 1) (/.f64 1/2 (exp.f64 im)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2) 1) (/.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) (exp.f64 im)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) 1) (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (exp.f64 im)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (exp.f64 (+.f64 im im)))) (/.f64 (*.f64 (cos.f64 re) 1/2) (cbrt.f64 (exp.f64 im))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 (+.f64 im im)))) (/.f64 1/2 (cbrt.f64 (exp.f64 im))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 (cbrt.f64 (exp.f64 (+.f64 im im)))) (/.f64 (cos.f64 re) (cbrt.f64 (exp.f64 im))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2) (cbrt.f64 (exp.f64 (+.f64 im im)))) (/.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) (cbrt.f64 (exp.f64 im))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (cbrt.f64 (exp.f64 (+.f64 im im)))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (cbrt.f64 (exp.f64 im))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 (exp.f64 im))) (/.f64 (*.f64 (cos.f64 re) 1/2) (sqrt.f64 (exp.f64 im))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cos.f64 re) (sqrt.f64 (exp.f64 im))) (/.f64 1/2 (sqrt.f64 (exp.f64 im))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 (sqrt.f64 (exp.f64 im))) (/.f64 (cos.f64 re) (sqrt.f64 (exp.f64 im))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2) (sqrt.f64 (exp.f64 im))) (/.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) (sqrt.f64 (exp.f64 im))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (sqrt.f64 (exp.f64 im))) (/.f64 (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (sqrt.f64 (exp.f64 im))) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (neg.f64 (exp.f64 im))) (*.f64 (cos.f64 re) -1/2) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (/.f64 (exp.f64 im) (cos.f64 re))) 1/2 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (exp.f64 im)) 1/2 (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (cbrt.f64 (*.f64 1/4 (exp.f64 (+.f64 im im))))) (cbrt.f64 (*.f64 (exp.f64 im) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cos.f64 re) (sqrt.f64 (*.f64 (exp.f64 im) 1/2))) (sqrt.f64 (*.f64 (exp.f64 im) 1/2)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (cos.f64 re) 1/2) (cbrt.f64 (exp.f64 (+.f64 im im)))) (cbrt.f64 (exp.f64 im)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (cos.f64 re) 1/2) (sqrt.f64 (exp.f64 im))) (sqrt.f64 (exp.f64 im)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (exp.f64 im) 1/2) (pow.f64 (cbrt.f64 (cos.f64 re)) 2)) (cbrt.f64 (cos.f64 re)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (exp.f64 im) 1/2) (sqrt.f64 (cos.f64 re))) (sqrt.f64 (cos.f64 re)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 (neg.f64 im)) 1) (*.f64 (cos.f64 re) 1/2) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 (neg.f64 im)) (cos.f64 re)) 1/2 (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 (neg.f64 im)) 1/2) (cos.f64 re) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 (neg.f64 im)) (pow.f64 (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) 2)) (cbrt.f64 (*.f64 (cos.f64 re) 1/2)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 (neg.f64 im)) (sqrt.f64 (*.f64 (cos.f64 re) 1/2))) (sqrt.f64 (*.f64 (cos.f64 re) 1/2)) (*.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2)))))))"]],"rules":[["egg-rr",93],["egg-rr",46],["egg-rr",54]],"stop":[["node limit",1]],"time":62.22900390625,"type":"rewrite"},{"count":[[265,238]],"egraph":[[3,5410,1114,0.026015915],[2,1254,1170,0.010824499000000001],[1,417,1240,0.0030299990000000002],[0,137,1329,0.000739791]],"inputs":[["(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im))))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im))))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 2 (cos.f64 re))","(+.f64 (*.f64 2 (/.f64 im (cos.f64 re))) (*.f64 2 (/.f64 1 (cos.f64 re))))","(+.f64 (*.f64 2 (/.f64 im (cos.f64 re))) (+.f64 (/.f64 (pow.f64 im 2) (cos.f64 re)) (*.f64 2 (/.f64 1 (cos.f64 re)))))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 im 3) (cos.f64 re))) (+.f64 (*.f64 2 (/.f64 im (cos.f64 re))) (+.f64 (/.f64 (pow.f64 im 2) (cos.f64 re)) (*.f64 2 (/.f64 1 (cos.f64 re))))))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (exp.f64 im))","(+.f64 (*.f64 (exp.f64 im) (pow.f64 re 2)) (*.f64 2 (exp.f64 im)))","(+.f64 (*.f64 (exp.f64 im) (pow.f64 re 2)) (+.f64 (*.f64 2 (exp.f64 im)) (*.f64 -2 (*.f64 (+.f64 (*.f64 1/24 (exp.f64 im)) (*.f64 -1/4 (exp.f64 im))) (pow.f64 re 4)))))","(+.f64 (*.f64 (exp.f64 im) (pow.f64 re 2)) (+.f64 (*.f64 2 (exp.f64 im)) (+.f64 (*.f64 -2 (*.f64 (+.f64 (*.f64 1/24 (exp.f64 im)) (*.f64 -1/4 (exp.f64 im))) (pow.f64 re 4))) (*.f64 -2 (*.f64 (+.f64 (*.f64 1/2 (+.f64 (*.f64 1/24 (exp.f64 im)) (*.f64 -1/4 (exp.f64 im)))) (+.f64 (*.f64 1/48 (exp.f64 im)) (*.f64 -1/720 (exp.f64 im)))) (pow.f64 re 6))))))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2))))","(+.f64 (*.f64 (+.f64 (*.f64 1/48 (/.f64 1 (exp.f64 im))) (*.f64 1/48 (exp.f64 im))) (pow.f64 re 4)) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2)))))","(+.f64 (*.f64 (+.f64 (*.f64 1/48 (/.f64 1 (exp.f64 im))) (*.f64 1/48 (exp.f64 im))) (pow.f64 re 4)) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 (-.f64 (*.f64 -1/1440 (exp.f64 im)) (*.f64 1/1440 (/.f64 1 (exp.f64 im)))) (pow.f64 re 6)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2))))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(cos.f64 re)","(+.f64 (cos.f64 re) (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im))","(+.f64 (cos.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im) (*.f64 (+.f64 (*.f64 1/4 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))))) (pow.f64 im 2))))","(+.f64 (cos.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))))) (pow.f64 im 2)) (*.f64 (+.f64 (*.f64 1/12 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))))) (pow.f64 im 3)))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (cos.f64 re))","(+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))","(fma.f64 1/2 (cos.f64 re) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))","(fma.f64 -1/2 (*.f64 (cos.f64 re) im) (*.f64 1/2 (cos.f64 re)))","(*.f64 (cos.f64 re) (+.f64 (*.f64 -1/2 im) 1/2))","(*.f64 (*.f64 (cos.f64 re) -1/2) (+.f64 -1 im))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im))))","(fma.f64 -1/2 (*.f64 (*.f64 im im) (*.f64 (cos.f64 re) -1/2)) (fma.f64 1/2 (cos.f64 re) (*.f64 -1/2 (*.f64 (cos.f64 re) im))))","(fma.f64 (*.f64 (cos.f64 re) 1/4) (*.f64 im im) (fma.f64 -1/2 (*.f64 (cos.f64 re) im) (*.f64 1/2 (cos.f64 re))))","(fma.f64 (*.f64 im im) (*.f64 (cos.f64 re) 1/4) (*.f64 (cos.f64 re) (+.f64 (*.f64 -1/2 im) 1/2)))","(fma.f64 (*.f64 im im) (*.f64 (cos.f64 re) 1/4) (*.f64 (*.f64 (cos.f64 re) -1/2) (+.f64 -1 im)))","(+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))) (pow.f64 im 3))) (+.f64 (*.f64 -1/2 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))) (pow.f64 im 2))) (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))))","(fma.f64 -1/2 (*.f64 (fma.f64 -1 (*.f64 (cos.f64 re) -1/2) (*.f64 (cos.f64 re) -1/3)) (pow.f64 im 3)) (fma.f64 -1/2 (*.f64 (*.f64 im im) (*.f64 (cos.f64 re) -1/2)) (fma.f64 1/2 (cos.f64 re) (*.f64 -1/2 (*.f64 (cos.f64 re) im)))))","(fma.f64 -1/2 (*.f64 (+.f64 (*.f64 (cos.f64 re) 1/6) 0) (pow.f64 im 3)) (fma.f64 (*.f64 (cos.f64 re) 1/4) (*.f64 im im) (fma.f64 -1/2 (*.f64 (cos.f64 re) im) (*.f64 1/2 (cos.f64 re)))))","(fma.f64 (*.f64 im im) (*.f64 (cos.f64 re) 1/4) (fma.f64 (pow.f64 im 3) (*.f64 (cos.f64 re) -1/12) (*.f64 (cos.f64 re) (+.f64 (*.f64 -1/2 im) 1/2))))","(+.f64 (*.f64 (cos.f64 re) (-.f64 (*.f64 (*.f64 im im) 1/4) -1/2)) (*.f64 -1/2 (*.f64 (cos.f64 re) (+.f64 im (*.f64 (pow.f64 im 3) 1/6)))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(/.f64 1/2 (exp.f64 im))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))","(fma.f64 -1/4 (*.f64 (/.f64 re (exp.f64 im)) re) (/.f64 1/2 (exp.f64 im)))","(*.f64 (exp.f64 (neg.f64 im)) (+.f64 (*.f64 re (*.f64 re -1/4)) 1/2))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (*.f64 1/2 (/.f64 1 (exp.f64 im)))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))","(fma.f64 -1/4 (*.f64 (/.f64 re (exp.f64 im)) re) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))","(fma.f64 -1/4 (*.f64 (/.f64 re (exp.f64 im)) re) (*.f64 (exp.f64 (neg.f64 im)) (+.f64 (*.f64 1/48 (pow.f64 re 4)) 1/2)))","(+.f64 (*.f64 -1/4 (/.f64 (pow.f64 re 2) (exp.f64 im))) (+.f64 (*.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im))) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im))))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (+.f64 (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (/.f64 1/2 (exp.f64 im))) (*.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)))))","(fma.f64 -1/4 (/.f64 (*.f64 re re) (exp.f64 im)) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (fma.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))","(fma.f64 -1/4 (*.f64 (/.f64 re (exp.f64 im)) re) (fma.f64 1/48 (/.f64 (pow.f64 re 4) (exp.f64 im)) (fma.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))","(fma.f64 -1/4 (*.f64 (/.f64 re (exp.f64 im)) re) (fma.f64 -1/1440 (/.f64 (pow.f64 re 6) (exp.f64 im)) (*.f64 (exp.f64 (neg.f64 im)) (+.f64 (*.f64 1/48 (pow.f64 re 4)) 1/2))))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im)))","(/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2))","(/.f64 2 (cos.f64 re))","(+.f64 (*.f64 2 (/.f64 im (cos.f64 re))) (*.f64 2 (/.f64 1 (cos.f64 re))))","(fma.f64 2 (/.f64 im (cos.f64 re)) (/.f64 2 (cos.f64 re)))","(+.f64 (*.f64 2 (/.f64 im (cos.f64 re))) (+.f64 (/.f64 (pow.f64 im 2) (cos.f64 re)) (*.f64 2 (/.f64 1 (cos.f64 re)))))","(fma.f64 2 (/.f64 im (cos.f64 re)) (+.f64 (/.f64 2 (cos.f64 re)) (/.f64 (*.f64 im im) (cos.f64 re))))","(+.f64 (/.f64 2 (cos.f64 re)) (fma.f64 2 (/.f64 im (cos.f64 re)) (/.f64 im (/.f64 (cos.f64 re) im))))","(+.f64 (/.f64 2 (cos.f64 re)) (fma.f64 2 (/.f64 im (cos.f64 re)) (*.f64 (/.f64 im (cos.f64 re)) im)))","(+.f64 (/.f64 2 (cos.f64 re)) (*.f64 im (+.f64 (/.f64 2 (cos.f64 re)) (/.f64 im (cos.f64 re)))))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 im 3) (cos.f64 re))) (+.f64 (*.f64 2 (/.f64 im (cos.f64 re))) (+.f64 (/.f64 (pow.f64 im 2) (cos.f64 re)) (*.f64 2 (/.f64 1 (cos.f64 re))))))","(fma.f64 1/3 (/.f64 (pow.f64 im 3) (cos.f64 re)) (fma.f64 2 (/.f64 im (cos.f64 re)) (+.f64 (/.f64 2 (cos.f64 re)) (/.f64 (*.f64 im im) (cos.f64 re)))))","(fma.f64 1/3 (/.f64 (pow.f64 im 3) (cos.f64 re)) (+.f64 (/.f64 2 (cos.f64 re)) (fma.f64 2 (/.f64 im (cos.f64 re)) (/.f64 im (/.f64 (cos.f64 re) im)))))","(fma.f64 1/3 (/.f64 (pow.f64 im 3) (cos.f64 re)) (+.f64 (/.f64 2 (cos.f64 re)) (fma.f64 2 (/.f64 im (cos.f64 re)) (*.f64 (/.f64 im (cos.f64 re)) im))))","(+.f64 (/.f64 2 (cos.f64 re)) (fma.f64 1/3 (/.f64 (pow.f64 im 3) (cos.f64 re)) (*.f64 im (+.f64 (/.f64 2 (cos.f64 re)) (/.f64 im (cos.f64 re))))))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (exp.f64 im))","(+.f64 (*.f64 (exp.f64 im) (pow.f64 re 2)) (*.f64 2 (exp.f64 im)))","(fma.f64 (exp.f64 im) (*.f64 re re) (*.f64 2 (exp.f64 im)))","(*.f64 (exp.f64 im) (+.f64 2 (*.f64 re re)))","(*.f64 (exp.f64 im) (fma.f64 re re 2))","(+.f64 (*.f64 (exp.f64 im) (pow.f64 re 2)) (+.f64 (*.f64 2 (exp.f64 im)) (*.f64 -2 (*.f64 (+.f64 (*.f64 1/24 (exp.f64 im)) (*.f64 -1/4 (exp.f64 im))) (pow.f64 re 4)))))","(fma.f64 (exp.f64 im) (*.f64 re re) (fma.f64 2 (exp.f64 im) (*.f64 -2 (*.f64 (pow.f64 re 4) (*.f64 (exp.f64 im) -5/24)))))","(+.f64 (*.f64 (exp.f64 im) (+.f64 2 (*.f64 re re))) (*.f64 (pow.f64 re 4) (*.f64 (*.f64 -2 (exp.f64 im)) -5/24)))","(fma.f64 (exp.f64 im) (fma.f64 re re 2) (*.f64 (*.f64 (exp.f64 im) (pow.f64 re 4)) 5/12))","(fma.f64 (exp.f64 im) (fma.f64 re re 2) (*.f64 (pow.f64 re 4) (*.f64 (exp.f64 im) 5/12)))","(+.f64 (*.f64 (exp.f64 im) (pow.f64 re 2)) (+.f64 (*.f64 2 (exp.f64 im)) (+.f64 (*.f64 -2 (*.f64 (+.f64 (*.f64 1/24 (exp.f64 im)) (*.f64 -1/4 (exp.f64 im))) (pow.f64 re 4))) (*.f64 -2 (*.f64 (+.f64 (*.f64 1/2 (+.f64 (*.f64 1/24 (exp.f64 im)) (*.f64 -1/4 (exp.f64 im)))) (+.f64 (*.f64 1/48 (exp.f64 im)) (*.f64 -1/720 (exp.f64 im)))) (pow.f64 re 6))))))","(fma.f64 (exp.f64 im) (*.f64 re re) (fma.f64 2 (exp.f64 im) (*.f64 -2 (+.f64 (*.f64 (pow.f64 re 4) (*.f64 (exp.f64 im) -5/24)) (*.f64 (pow.f64 re 6) (fma.f64 1/2 (*.f64 (exp.f64 im) -5/24) (*.f64 (exp.f64 im) 7/360)))))))","(+.f64 (*.f64 (exp.f64 im) (+.f64 2 (*.f64 re re))) (*.f64 -2 (fma.f64 (pow.f64 re 4) (*.f64 (exp.f64 im) -5/24) (*.f64 (pow.f64 re 6) (fma.f64 (exp.f64 im) 7/360 (*.f64 (exp.f64 im) -5/48))))))","(fma.f64 (exp.f64 im) (fma.f64 re re 2) (*.f64 -2 (fma.f64 (exp.f64 im) (*.f64 (pow.f64 re 4) -5/24) (*.f64 (pow.f64 re 6) (*.f64 (exp.f64 im) -61/720)))))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(*.f64 2 (/.f64 (exp.f64 im) (cos.f64 re)))","(/.f64 (exp.f64 im) (/.f64 (cos.f64 re) 2))","(*.f64 (/.f64 2 (cos.f64 re)) (exp.f64 im))","(+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))","(*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))","(+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2))))","(fma.f64 1/2 (exp.f64 im) (+.f64 (/.f64 1/2 (exp.f64 im)) (*.f64 (*.f64 re re) (-.f64 (*.f64 (exp.f64 im) -1/4) (/.f64 1/4 (exp.f64 im))))))","(fma.f64 1/2 (exp.f64 im) (fma.f64 (*.f64 re re) (fma.f64 (exp.f64 im) -1/4 (/.f64 -1/4 (exp.f64 im))) (/.f64 1/2 (exp.f64 im))))","(fma.f64 1/2 (exp.f64 im) (fma.f64 re (*.f64 re (fma.f64 (exp.f64 im) -1/4 (/.f64 -1/4 (exp.f64 im)))) (/.f64 1/2 (exp.f64 im))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 re (*.f64 re -1/4)) 1/2))","(+.f64 (*.f64 (+.f64 (*.f64 1/48 (/.f64 1 (exp.f64 im))) (*.f64 1/48 (exp.f64 im))) (pow.f64 re 4)) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2)))))","(fma.f64 (*.f64 1/48 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (pow.f64 re 4) (fma.f64 1/2 (exp.f64 im) (+.f64 (/.f64 1/2 (exp.f64 im)) (*.f64 (*.f64 re re) (-.f64 (*.f64 (exp.f64 im) -1/4) (/.f64 1/4 (exp.f64 im)))))))","(fma.f64 (pow.f64 re 4) (fma.f64 (exp.f64 im) 1/48 (/.f64 1/48 (exp.f64 im))) (fma.f64 1/2 (exp.f64 im) (fma.f64 (*.f64 re re) (fma.f64 (exp.f64 im) -1/4 (/.f64 -1/4 (exp.f64 im))) (/.f64 1/2 (exp.f64 im)))))","(+.f64 (*.f64 re (*.f64 re (fma.f64 (exp.f64 im) -1/4 (/.f64 -1/4 (exp.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/48 (pow.f64 re 4)) 1/2)))","(fma.f64 (pow.f64 re 4) (fma.f64 (exp.f64 im) 1/48 (/.f64 1/48 (exp.f64 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 re (*.f64 re -1/4)) 1/2)))","(+.f64 (*.f64 (+.f64 (*.f64 1/48 (/.f64 1 (exp.f64 im))) (*.f64 1/48 (exp.f64 im))) (pow.f64 re 4)) (+.f64 (*.f64 1/2 (exp.f64 im)) (+.f64 (*.f64 (-.f64 (*.f64 -1/1440 (exp.f64 im)) (*.f64 1/1440 (/.f64 1 (exp.f64 im)))) (pow.f64 re 6)) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 (-.f64 (*.f64 -1/4 (exp.f64 im)) (*.f64 1/4 (/.f64 1 (exp.f64 im)))) (pow.f64 re 2))))))","(fma.f64 (*.f64 1/48 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (pow.f64 re 4) (fma.f64 1/2 (exp.f64 im) (fma.f64 (-.f64 (*.f64 (exp.f64 im) -1/1440) (/.f64 1/1440 (exp.f64 im))) (pow.f64 re 6) (+.f64 (/.f64 1/2 (exp.f64 im)) (*.f64 (*.f64 re re) (-.f64 (*.f64 (exp.f64 im) -1/4) (/.f64 1/4 (exp.f64 im))))))))","(fma.f64 (pow.f64 re 4) (fma.f64 (exp.f64 im) 1/48 (/.f64 1/48 (exp.f64 im))) (fma.f64 1/2 (exp.f64 im) (fma.f64 (pow.f64 re 6) (fma.f64 (exp.f64 im) -1/1440 (/.f64 -1/1440 (exp.f64 im))) (fma.f64 (*.f64 re re) (fma.f64 (exp.f64 im) -1/4 (/.f64 -1/4 (exp.f64 im))) (/.f64 1/2 (exp.f64 im))))))","(+.f64 (fma.f64 re (*.f64 re (fma.f64 (exp.f64 im) -1/4 (/.f64 -1/4 (exp.f64 im)))) (*.f64 (pow.f64 re 6) (fma.f64 (exp.f64 im) -1/1440 (/.f64 -1/1440 (exp.f64 im))))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/48 (pow.f64 re 4)) 1/2)))","(+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 re (*.f64 re -1/4)) 1/2)) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/48 (pow.f64 re 4)) (*.f64 -1/1440 (pow.f64 re 6)))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(cos.f64 re)","(+.f64 (cos.f64 re) (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im))","(cos.f64 re)","(+.f64 (cos.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im) (*.f64 (+.f64 (*.f64 1/4 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))))) (pow.f64 im 2))))","(+.f64 (cos.f64 re) (fma.f64 (*.f64 (cos.f64 re) 0) im (*.f64 (*.f64 im im) (fma.f64 1/4 (cos.f64 re) (*.f64 -1/2 (*.f64 (cos.f64 re) -1/2))))))","(+.f64 (cos.f64 re) (fma.f64 (*.f64 im im) (fma.f64 (cos.f64 re) 1/4 (*.f64 (cos.f64 re) 1/4)) (*.f64 im 0)))","(fma.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 im im) (cos.f64 re))","(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (*.f64 im im) 2))","(+.f64 (cos.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1/2 (cos.f64 re))) im) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re))))) (pow.f64 im 2)) (*.f64 (+.f64 (*.f64 1/12 (cos.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 -1 (+.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 -1 (cos.f64 re)))) (+.f64 (*.f64 -1/2 (cos.f64 re)) (*.f64 1/6 (cos.f64 re)))))) (pow.f64 im 3)))))","(+.f64 (cos.f64 re) (fma.f64 (*.f64 (cos.f64 re) 0) im (*.f64 (*.f64 im im) (fma.f64 1/4 (cos.f64 re) (*.f64 -1/2 (*.f64 (cos.f64 re) -1/2))))))","(+.f64 (cos.f64 re) (fma.f64 (*.f64 im im) (fma.f64 (cos.f64 re) 1/4 (*.f64 (cos.f64 re) 1/4)) (*.f64 im 0)))","(fma.f64 (*.f64 1/2 (cos.f64 re)) (*.f64 im im) (cos.f64 re))","(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (*.f64 im im) 2))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (cos.f64 re) (exp.f64 im))) (*.f64 1/2 (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (/.f64 (cos.f64 re) (exp.f64 im)) (*.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (cos.f64 re) (exp.f64 im) (/.f64 (cos.f64 re) (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))"]],"stop":[["node limit",1]],"time":52.154052734375,"type":"simplify"},{"compiler":[[6528,3546]],"time":60.3740234375,"type":"eval"},{"alts":[["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (+.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (exp.f64 im)) (/.f64 2 (cos.f64 re))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (exp.f64 im)) (/.f64 2 (cos.f64 re))))))))","fresh",0.38119125976844204],["(fma.f64 (*.f64 (*.f64 (exp.f64 im) 1/2) (pow.f64 (cbrt.f64 (cos.f64 re)) 2)) (cbrt.f64 (cos.f64 re)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))","fresh",0.19140625],["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)))))","done",0.01953125],["(*.f64 (log1p.f64 (expm1.f64 (cos.f64 re))) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","fresh",0.10546875]],"compiler":[[33,22],[23,14],[20,14],[15,11]],"count":[[289,4]],"kept":[{"done":[1,1],"fresh":[3,1],"new":[284,2],"picked":[1,0]}],"min-error":[0],"time":120.698974609375,"type":"prune"},{"accuracy":[0.01953125],"baseline":[0.01953125],"branch":[["re",0.01953125,1],["im",0.01953125,1],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))",0.01953125,1],["(*.f64 1/2 (cos.f64 re))",0.01953125,1],["(cos.f64 re)",0.01953125,1],["(+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))",0.01953125,1]],"compiler":[[3,2],[3,2],[13,10],[6,5],[4,3],[8,6],[227,124]],"count":[[13,1]],"inputs":[["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (+.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (exp.f64 im)) (/.f64 2 (cos.f64 re))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (exp.f64 im)) (/.f64 2 (cos.f64 re))))))))","(fma.f64 (*.f64 (*.f64 (exp.f64 im) 1/2) (pow.f64 (cbrt.f64 (cos.f64 re)) 2)) (cbrt.f64 (cos.f64 re)) (/.f64 (cos.f64 re) (/.f64 (exp.f64 im) 1/2)))","(+.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 3) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)))))","(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (log.f64 (exp.f64 (/.f64 (*.f64 (cos.f64 re) 1/2) (exp.f64 im)))))","(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)))))","(+.f64 (log.f64 (+.f64 1 (expm1.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (cos.f64 re)))))) (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 re)) 3) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (/.f64 1 (/.f64 (exp.f64 im) (*.f64 (cos.f64 re) 1/2))))","(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (/.f64 1/2 (exp.f64 im))))","(*.f64 (log1p.f64 (expm1.f64 (cos.f64 re))) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 (log.f64 (exp.f64 (cos.f64 re))) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 (cos.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))"]],"link":["."],"name":["math.cos on complex, real part"],"oracle":[1.047392731321321],"outputs":[["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)))))"]],"time":30.93603515625,"times":[["re",5.18896484375],["im",6.076904296875],["(*.f64 (*.f64 1/2 (cos.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))",4.744873046875],["(*.f64 1/2 (cos.f64 re))",4.5830078125],["(cos.f64 re)",4.697998046875],["(+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))",1.851806640625]],"type":"regimes"},{"compiler":[[20,14]],"egraph":[[1,19,29,4.7666e-5],[0,15,29,2.6916e-5]],"inputs":[["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 (cos.f64 re) (*.f64 1/2 (exp.f64 im))) (*.f64 (cos.f64 re) (sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.5419921875,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[20,14]],"remove-preprocessing":[[]],"time":10.56494140625,"type":"end"}]
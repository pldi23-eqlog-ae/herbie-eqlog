[{"compiler":[[15,12]],"method":["search"],"sampling":[[12,0.49951183795928955,0.28780467226170003,0.21268348977901042],[11,0.49951183795928955,0.2946339356712997,0.20585422636941075],[10,0.49951183795928955,0.3239022074267268,0.17658595461398363],[9,0.49951183795928955,0.33560951612889767,0.16487864591181278],[8,0.49951183795928955,0.39024362340569496,0.11024453863501549],[7,0.49951183795928955,0.40585336834192276,0.09463479369878769],[6,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[5,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":72.870849609375,"type":"analyze"},{"outcomes":[["body",512,"invalid",126.643310546875,1024],["body",2048,"invalid",0.760986328125,2],["body",256,"invalid",109.358642578125,1675],["body",512,"valid",139.6083984375,1001],["body",1024,"valid",602.03857421875,2074],["body",1024,"invalid",400.983642578125,2006],["body",2048,"valid",4.890380859375,8],["body",256,"valid",339.244873046875,5173]],"time":1737.797119140625,"type":"sample"},{"compiler":[[14,11]],"egraph":[[0,2,2,1.709e-6],[10,6908,34,0.043797833999999994],[9,5451,34,0.032193584],[8,4834,34,0.023256001],[7,2196,34,0.016042418],[6,838,34,0.008426209],[5,489,34,0.004451625],[4,361,34,0.002697583],[3,273,34,0.001615583],[2,135,36,0.000876833],[1,50,36,0.000352166],[0,19,36,0.000110333]],"inputs":[["0","1"],["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 im)) (+.f64 (exp.f64 (-.f64 0 re)) (exp.f64 re)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (sin.f64 re) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 im)) (+.f64 (exp.f64 (-.f64 0 re)) (exp.f64 re)))","(*.f64 (*.f64 1/2 (sin.f64 im)) (+.f64 (exp.f64 (neg.f64 re)) (exp.f64 re)))","(*.f64 1/2 (*.f64 (sin.f64 im) (+.f64 (exp.f64 (neg.f64 re)) (exp.f64 re))))","(*.f64 (sin.f64 im) (fma.f64 1/2 (exp.f64 re) (/.f64 1/2 (exp.f64 re))))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":67.4638671875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[12,6788,17,0.046367667],[11,5796,17,0.035808084000000004],[10,4162,17,0.025313042],[9,3671,17,0.018537709],[8,3288,17,0.013892834],[7,1116,17,0.009312708999999999],[6,429,17,0.004459709],[5,252,17,0.0024517510000000003],[4,185,17,0.0015275010000000001],[3,140,17,0.0009406670000000001],[2,71,18,0.000522251],[1,28,18,0.000217376],[0,12,18,7.0959e-5]],"inputs":[["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))"]],"stop":[["node limit",1]],"time":58.55517578125,"type":"simplify"},{"compiler":[[25,16]],"time":0.450927734375,"type":"eval"},{"alts":[["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","next",0.017910009768442016]],"compiler":[[13,9],[13,9]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.017910009768442016],"time":0.927978515625,"type":"prune"},{"compiler":[[32,16]],"locations":[["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))",0.00390625,true],["(sin.f64 re)",0.015625,true],["(/.f64 1/2 (exp.f64 im))",0.01953125,true]],"time":8.046142578125,"type":"localize"},{"count":[[3,32]],"series":[["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","im","-inf",0.510986328125],["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","im","inf",0.72705078125],["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","im","0",0.796142578125],["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","re","-inf",0.347900390625],["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","re","inf",0.615966796875],["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","re","0",0.723876953125],["(sin.f64 re)","re","-inf",0.15283203125],["(sin.f64 re)","re","inf",0.153076171875],["(sin.f64 re)","re","0",0.282958984375],["(/.f64 1/2 (exp.f64 im))","im","-inf",0.47802734375],["(/.f64 1/2 (exp.f64 im))","im","inf",0.413818359375],["(/.f64 1/2 (exp.f64 im))","im","0",0.335205078125]],"time":5.7119140625,"type":"series"},{"count":[[3,51]],"egraph":[[2,2171,26,0.020317332],[1,182,26,0.003074249],[0,9,26,0.000253041]],"inputs":[["(/.f64 1/2 (exp.f64 im))","(sin.f64 re)","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1/2 (exp.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (exp.f64 (neg.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/2 (exp.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/2 (exp.f64 im))) (pow.f64 (cbrt.f64 (/.f64 1/2 (exp.f64 im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 (exp.f64 im))) 2) (cbrt.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 1/2 (exp.f64 im))) (sqrt.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/2 (/.f64 1 (neg.f64 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (neg.f64 im)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/2 (exp.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1/2 (exp.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/2 (exp.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 1/2 (exp.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (exp.f64 im) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 1/4 (pow.f64 (exp.f64 im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/2 (exp.f64 im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 1/2) im))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sin.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 re)) (pow.f64 (cbrt.f64 (sin.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 re)) 2) (cbrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 re)) (sqrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 re) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 re) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 re)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 re) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 re) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 re)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (exp.f64 im))) (*.f64 (sin.f64 re) (/.f64 1/2 (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sin.f64 re)) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 re) 3) (pow.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) 3) (pow.f64 (sin.f64 re) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))))))))"]],"rules":[["egg-rr",15],["egg-rr",16],["egg-rr",20]],"stop":[["node limit",1]],"time":42.77197265625,"type":"rewrite"},{"count":[[83,82]],"egraph":[[4,7628,534,0.032628375],[3,3535,534,0.017875042],[2,806,540,0.006395583999999999],[1,226,587,0.0016502919999999998],[0,74,669,0.000405792]],"inputs":[["1/2","(+.f64 1/2 (*.f64 -1/2 im))","(+.f64 1/2 (+.f64 (*.f64 1/4 (pow.f64 im 2)) (*.f64 -1/2 im)))","(+.f64 1/2 (+.f64 (*.f64 1/4 (pow.f64 im 2)) (+.f64 (*.f64 -1/2 im) (*.f64 -1/12 (pow.f64 im 3)))))","re","(+.f64 re (*.f64 -1/6 (pow.f64 re 3)))","(+.f64 (*.f64 1/120 (pow.f64 re 5)) (+.f64 re (*.f64 -1/6 (pow.f64 re 3))))","(+.f64 (*.f64 1/120 (pow.f64 re 5)) (+.f64 re (+.f64 (*.f64 -1/6 (pow.f64 re 3)) (*.f64 -1/5040 (pow.f64 re 7)))))","(*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))))))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 re 7) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(sin.f64 re)","(+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))))","(+.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4)))))","(+.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/720 (*.f64 (sin.f64 re) (pow.f64 im 6))) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4))))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))"]],"method":["egg-herbie"],"outputs":[["1/2","(+.f64 1/2 (*.f64 -1/2 im))","(fma.f64 -1/2 im 1/2)","(+.f64 1/2 (+.f64 (*.f64 1/4 (pow.f64 im 2)) (*.f64 -1/2 im)))","(+.f64 1/2 (fma.f64 1/4 (*.f64 im im) (*.f64 -1/2 im)))","(+.f64 1/2 (fma.f64 -1/2 im (*.f64 1/4 (*.f64 im im))))","(fma.f64 -1/2 im (fma.f64 im (*.f64 im 1/4) 1/2))","(+.f64 1/2 (+.f64 (*.f64 1/4 (pow.f64 im 2)) (+.f64 (*.f64 -1/2 im) (*.f64 -1/12 (pow.f64 im 3)))))","(+.f64 1/2 (fma.f64 1/4 (*.f64 im im) (fma.f64 -1/2 im (*.f64 -1/12 (pow.f64 im 3)))))","(+.f64 1/2 (fma.f64 -1/2 im (*.f64 (*.f64 im im) (+.f64 1/4 (*.f64 im -1/12)))))","(+.f64 1/2 (*.f64 im (+.f64 -1/2 (*.f64 im (+.f64 1/4 (*.f64 im -1/12))))))","re","(+.f64 re (*.f64 -1/6 (pow.f64 re 3)))","(fma.f64 -1/6 (pow.f64 re 3) re)","(+.f64 (*.f64 1/120 (pow.f64 re 5)) (+.f64 re (*.f64 -1/6 (pow.f64 re 3))))","(fma.f64 1/120 (pow.f64 re 5) (+.f64 re (*.f64 -1/6 (pow.f64 re 3))))","(fma.f64 1/120 (pow.f64 re 5) (fma.f64 -1/6 (pow.f64 re 3) re))","(fma.f64 -1/6 (pow.f64 re 3) (fma.f64 1/120 (pow.f64 re 5) re))","(+.f64 (*.f64 1/120 (pow.f64 re 5)) (+.f64 re (+.f64 (*.f64 -1/6 (pow.f64 re 3)) (*.f64 -1/5040 (pow.f64 re 7)))))","(fma.f64 1/120 (pow.f64 re 5) (+.f64 re (fma.f64 -1/6 (pow.f64 re 3) (*.f64 -1/5040 (pow.f64 re 7)))))","(+.f64 (fma.f64 1/120 (pow.f64 re 5) (fma.f64 -1/6 (pow.f64 re 3) re)) (*.f64 -1/5040 (pow.f64 re 7)))","(fma.f64 1/120 (pow.f64 re 5) (fma.f64 -1/6 (pow.f64 re 3) (fma.f64 -1/5040 (pow.f64 re 7) re)))","(*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 re (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 re (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))))","(fma.f64 re (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 -1/6 (*.f64 (pow.f64 re 3) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (fma.f64 -1/6 (pow.f64 re 3) re))","(*.f64 (fma.f64 -1/6 (pow.f64 re 3) re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))))))","(fma.f64 re (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (fma.f64 -1/6 (*.f64 (pow.f64 re 3) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 (*.f64 1/120 (pow.f64 re 5)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))))","(fma.f64 re (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (+.f64 (*.f64 -1/6 (pow.f64 re 3)) (*.f64 1/120 (pow.f64 re 5)))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (fma.f64 -1/6 (pow.f64 re 3) (fma.f64 1/120 (pow.f64 re 5) re)))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (fma.f64 1/120 (pow.f64 re 5) (fma.f64 -1/6 (pow.f64 re 3) re)))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 re 7) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (+.f64 (*.f64 -1/6 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))) (*.f64 1/120 (*.f64 (pow.f64 re 5) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))))))","(fma.f64 re (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (fma.f64 -1/5040 (*.f64 (pow.f64 re 7) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (fma.f64 -1/6 (*.f64 (pow.f64 re 3) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))) (*.f64 (*.f64 1/120 (pow.f64 re 5)) (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im)))))))","(+.f64 (*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (+.f64 (*.f64 -1/6 (pow.f64 re 3)) (*.f64 1/120 (pow.f64 re 5)))) (*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (+.f64 re (*.f64 -1/5040 (pow.f64 re 7)))))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (fma.f64 1/120 (pow.f64 re 5) (fma.f64 -1/6 (pow.f64 re 3) (fma.f64 -1/5040 (pow.f64 re 7) re))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(sin.f64 re)","(+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))))","(+.f64 (sin.f64 re) (*.f64 (*.f64 1/2 (sin.f64 re)) (*.f64 im im)))","(fma.f64 1/2 (*.f64 im (*.f64 im (sin.f64 re))) (sin.f64 re))","(*.f64 (+.f64 (*.f64 (*.f64 1/2 im) im) 1) (sin.f64 re))","(+.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4)))))","(+.f64 (sin.f64 re) (fma.f64 1/2 (*.f64 (*.f64 im im) (sin.f64 re)) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4)))))","(+.f64 (sin.f64 re) (fma.f64 1/2 (*.f64 im (*.f64 im (sin.f64 re))) (*.f64 (sin.f64 re) (*.f64 (pow.f64 im 4) 1/24))))","(+.f64 (sin.f64 re) (*.f64 (sin.f64 re) (+.f64 (*.f64 (*.f64 1/2 im) im) (*.f64 1/24 (pow.f64 im 4)))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 im im)) (+.f64 1 (*.f64 1/24 (pow.f64 im 4)))))","(+.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/720 (*.f64 (sin.f64 re) (pow.f64 im 6))) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4))))))","(+.f64 (sin.f64 re) (fma.f64 1/2 (*.f64 (*.f64 im im) (sin.f64 re)) (fma.f64 1/720 (*.f64 (sin.f64 re) (pow.f64 im 6)) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4))))))","(+.f64 (sin.f64 re) (fma.f64 1/2 (*.f64 im (*.f64 im (sin.f64 re))) (fma.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4)) (*.f64 (sin.f64 re) (*.f64 (pow.f64 im 6) 1/720)))))","(+.f64 (sin.f64 re) (fma.f64 (sin.f64 re) (*.f64 1/720 (pow.f64 im 6)) (*.f64 (sin.f64 re) (+.f64 (*.f64 (*.f64 1/2 im) im) (*.f64 1/24 (pow.f64 im 4))))))","(+.f64 (sin.f64 re) (*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (pow.f64 im 4) (+.f64 (*.f64 1/720 (*.f64 im im)) 1/24)))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (sin.f64 re))","(*.f64 (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (sin.f64 re))"]],"stop":[["node limit",1]],"time":50.77197265625,"type":"simplify"},{"compiler":[[1340,792]],"time":16.887939453125,"type":"eval"},{"alts":[["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","done",0.017910009768442016],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))) 3)","fresh",0.6945077637479349],["(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))","next",0.021816259768442016]],"compiler":[[13,9],[16,12],[17,11],[16,12],[17,11]],"count":[[83,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[82,2],"picked":[1,1]}],"min-error":[0.00390625],"time":17.3291015625,"type":"prune"},{"compiler":[[46,22]],"locations":[["(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))",0.0078125,true],["(*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re))",0.0078125,true],["(sin.f64 re)",0.015625,false],["(/.f64 1/2 (exp.f64 im))",0.01953125,false]],"time":10.428955078125,"type":"localize"},{"count":[[2,48]],"series":[["(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))","re","-inf",0.547119140625],["(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))","re","inf",0.5859375],["(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))","re","0",0.484130859375],["(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))","im","-inf",0.56494140625],["(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))","im","inf",0.572998046875],["(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))","im","0",0.550048828125],["(*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re))","re","-inf",0.43408203125],["(*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re))","re","inf",1.050048828125],["(*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re))","re","0",0.380126953125],["(*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re))","im","-inf",0.421142578125],["(*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re))","im","inf",0.4619140625],["(*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re))","im","0",0.35107421875]],"time":6.60498046875,"type":"series"},{"count":[[2,98]],"egraph":[[2,3248,25,0.027898251],[1,239,28,0.004547376],[0,11,30,0.000324959]],"inputs":[["(*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re))","(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (sqrt.f64 (exp.f64 (exp.f64 im))) (sin.f64 re))) 2)) (log.f64 (cbrt.f64 (pow.f64 (sqrt.f64 (exp.f64 (exp.f64 im))) (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (sqrt.f64 (exp.f64 (exp.f64 im))) (sin.f64 re)))) (log.f64 (sqrt.f64 (pow.f64 (sqrt.f64 (exp.f64 (exp.f64 im))) (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/8 (pow.f64 (*.f64 (exp.f64 im) (sin.f64 re)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (sqrt.f64 (exp.f64 (exp.f64 im))) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/8 (pow.f64 (*.f64 (exp.f64 im) (sin.f64 re)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 im (log.f64 (*.f64 1/2 (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 im (log.f64 (*.f64 1/2 (sin.f64 re)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2) (*.f64 (sin.f64 re) (-.f64 (*.f64 1/2 (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))) (/.f64 (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 2) (*.f64 (sin.f64 re) (-.f64 (*.f64 1/2 (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 2) (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 re)) 2) (*.f64 (cbrt.f64 (sin.f64 re)) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) (sqrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 re)) (*.f64 (sqrt.f64 (sin.f64 re)) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/8 (pow.f64 (*.f64 (exp.f64 im) (sin.f64 re)) 3) (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 3)) (/.f64 1 (fma.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (-.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2) (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 2)) (/.f64 1 (*.f64 (sin.f64 re) (-.f64 (*.f64 1/2 (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/2 (*.f64 2 (cosh.f64 im))) (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (-.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2)) (fma.f64 1/8 (pow.f64 (*.f64 (exp.f64 im) (sin.f64 re)) 3) (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (sin.f64 re) (-.f64 (*.f64 1/2 (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))) (-.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2) (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/8 (pow.f64 (*.f64 (exp.f64 im) (sin.f64 re)) 3) (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 3)) (fma.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (-.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/8 (pow.f64 (*.f64 (exp.f64 im) (sin.f64 re)) 3) (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 3)) (+.f64 (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 2) (-.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2) (*.f64 (*.f64 1/2 (exp.f64 im)) (*.f64 (sin.f64 re) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2) (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 2)) (*.f64 (sin.f64 re) (-.f64 (*.f64 1/2 (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 1/8 (pow.f64 (*.f64 (exp.f64 im) (sin.f64 re)) 3) (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 3))) (neg.f64 (fma.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (-.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2) (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 2))) (neg.f64 (*.f64 (sin.f64 re) (-.f64 (*.f64 1/2 (exp.f64 im)) (/.f64 1/2 (exp.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 2) (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2)) (-.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (-.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2)) (fma.f64 1/8 (pow.f64 (*.f64 (exp.f64 im) (sin.f64 re)) 3) (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sin.f64 re) (-.f64 (*.f64 1/2 (exp.f64 im)) (/.f64 1/2 (exp.f64 im)))) (-.f64 (pow.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 2) (pow.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (*.f64 2 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))) (pow.f64 (exp.f64 (/.f64 1/2 (exp.f64 im))) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 (exp.f64 im))) (sin.f64 re)) (+.f64 1 (expm1.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))) (+.f64 1 (expm1.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))) (pow.f64 (sqrt.f64 (exp.f64 (exp.f64 im))) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (/.f64 1/2 (exp.f64 im))) (sin.f64 re)) (+.f64 1 (expm1.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))) (+.f64 1 (expm1.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im)) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 (exp.f64 (neg.f64 im)) (sin.f64 re)) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 im) (*.f64 1/2 (sin.f64 re)) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 re) (*.f64 1/2 (exp.f64 im)) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sin.f64 re) (/.f64 1/2 (exp.f64 im)) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) 1 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) 1 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) (pow.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) 2) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) 2) (cbrt.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/4 (exp.f64 (+.f64 im im)))) (*.f64 (cbrt.f64 (*.f64 1/2 (exp.f64 im))) (sin.f64 re)) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/4 (exp.f64 (+.f64 im im)))) (*.f64 (cbrt.f64 (/.f64 1/2 (exp.f64 im))) (sin.f64 re)) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im)))) (pow.f64 (cbrt.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im)))) 2) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im)))) 2) (cbrt.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im)))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (sin.f64 re)) 2) (*.f64 (cbrt.f64 (sin.f64 re)) (*.f64 1/2 (exp.f64 im))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (sin.f64 re)) 2) (*.f64 (cbrt.f64 (sin.f64 re)) (/.f64 1/2 (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) (sqrt.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 1/2 (exp.f64 im))) (*.f64 (sqrt.f64 (*.f64 1/2 (exp.f64 im))) (sin.f64 re)) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 1/2 (exp.f64 im))) (*.f64 (sqrt.f64 (/.f64 1/2 (exp.f64 im))) (sin.f64 re)) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im)))) (sqrt.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im)))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sin.f64 re)) (*.f64 (sqrt.f64 (sin.f64 re)) (*.f64 1/2 (exp.f64 im))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (sin.f64 re)) (*.f64 (sqrt.f64 (sin.f64 re)) (/.f64 1/2 (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 (neg.f64 im)) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (exp.f64 im) (sin.f64 re)) 1/2 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 (cbrt.f64 (exp.f64 (+.f64 im im)))) (/.f64 (sin.f64 re) (cbrt.f64 (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 (sqrt.f64 (exp.f64 im))) (/.f64 (sin.f64 re) (sqrt.f64 (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (pow.f64 (cbrt.f64 (sin.f64 re)) 2)) (cbrt.f64 (sin.f64 re)) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sqrt.f64 (sin.f64 re))) (sqrt.f64 (sin.f64 re)) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 re) (cbrt.f64 (*.f64 1/4 (exp.f64 (+.f64 im im))))) (cbrt.f64 (*.f64 1/2 (exp.f64 im))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 re) (sqrt.f64 (*.f64 1/2 (exp.f64 im)))) (sqrt.f64 (*.f64 1/2 (exp.f64 im))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 re) (cbrt.f64 (/.f64 1/4 (exp.f64 (+.f64 im im))))) (cbrt.f64 (/.f64 1/2 (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sin.f64 re) (sqrt.f64 (/.f64 1/2 (exp.f64 im)))) (sqrt.f64 (/.f64 1/2 (exp.f64 im))) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 1/2 (exp.f64 im)) (pow.f64 (cbrt.f64 (sin.f64 re)) 2)) (cbrt.f64 (sin.f64 re)) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 1/2 (exp.f64 im)) (sqrt.f64 (sin.f64 re))) (sqrt.f64 (sin.f64 re)) (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))))))))"]],"rules":[["egg-rr",81],["egg-rr",17]],"stop":[["node limit",1]],"time":53.412109375,"type":"rewrite"},{"count":[[146,132]],"egraph":[[3,3666,775,0.021106208],[2,964,845,0.0075963739999999995],[1,325,892,0.002320124],[0,102,964,0.000574291]],"inputs":[["(*.f64 1/2 (sin.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) im)) (*.f64 1/2 (sin.f64 re)))","(+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) im)) (+.f64 (*.f64 1/4 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 1/2 (sin.f64 re))))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) im)) (+.f64 (*.f64 1/4 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 1/2 (sin.f64 re)))))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 1/2 (*.f64 (exp.f64 im) re))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) re)) (*.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) re)) (+.f64 (*.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3))) (*.f64 1/240 (*.f64 (exp.f64 im) (pow.f64 re 5)))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) re)) (+.f64 (*.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 -1/10080 (*.f64 (exp.f64 im) (pow.f64 re 7))) (*.f64 1/240 (*.f64 (exp.f64 im) (pow.f64 re 5))))))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(sin.f64 re)","(+.f64 (sin.f64 re) (*.f64 (+.f64 (*.f64 -1/2 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))) im))","(+.f64 (sin.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (sin.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))))) (pow.f64 im 2)) (*.f64 (+.f64 (*.f64 -1/2 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))) im)))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 1/6 (sin.f64 re)) (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re)))) (*.f64 -1/2 (sin.f64 re))))) (*.f64 1/12 (sin.f64 re))) (pow.f64 im 3)) (+.f64 (sin.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (sin.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))))) (pow.f64 im 2)) (*.f64 (+.f64 (*.f64 -1/2 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))) im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (*.f64 (pow.f64 re 3) (-.f64 (*.f64 -1/12 (exp.f64 im)) (*.f64 1/12 (/.f64 1 (exp.f64 im))))))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (+.f64 (*.f64 (pow.f64 re 5) (+.f64 (*.f64 1/240 (/.f64 1 (exp.f64 im))) (*.f64 1/240 (exp.f64 im)))) (*.f64 (pow.f64 re 3) (-.f64 (*.f64 -1/12 (exp.f64 im)) (*.f64 1/12 (/.f64 1 (exp.f64 im)))))))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (+.f64 (*.f64 (pow.f64 re 5) (+.f64 (*.f64 1/240 (/.f64 1 (exp.f64 im))) (*.f64 1/240 (exp.f64 im)))) (+.f64 (*.f64 (pow.f64 re 3) (-.f64 (*.f64 -1/12 (exp.f64 im)) (*.f64 1/12 (/.f64 1 (exp.f64 im))))) (*.f64 (pow.f64 re 7) (-.f64 (*.f64 -1/10080 (exp.f64 im)) (*.f64 1/10080 (/.f64 1 (exp.f64 im))))))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (sin.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) im)) (*.f64 1/2 (sin.f64 re)))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) im) (sin.f64 re)))","(*.f64 1/2 (*.f64 (+.f64 im 1) (sin.f64 re)))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 im) 1/2))","(*.f64 (sin.f64 re) (+.f64 1/2 (*.f64 1/2 im)))","(+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) im)) (+.f64 (*.f64 1/4 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 1/2 (sin.f64 re))))","(fma.f64 1/2 (*.f64 (sin.f64 re) im) (fma.f64 1/4 (*.f64 (sin.f64 re) (*.f64 im im)) (*.f64 1/2 (sin.f64 re))))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 im 1) (sin.f64 re))) (*.f64 (sin.f64 re) (*.f64 (*.f64 im im) 1/4)))","(fma.f64 (*.f64 im im) (*.f64 (sin.f64 re) 1/4) (*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 im) 1/2)))","(*.f64 (sin.f64 re) (-.f64 (*.f64 im (+.f64 1/2 (*.f64 1/4 im))) -1/2))","(+.f64 (*.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 3))) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) im)) (+.f64 (*.f64 1/4 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 1/2 (sin.f64 re)))))","(fma.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 3)) (fma.f64 1/2 (*.f64 (sin.f64 re) im) (fma.f64 1/4 (*.f64 (sin.f64 re) (*.f64 im im)) (*.f64 1/2 (sin.f64 re)))))","(fma.f64 1/12 (*.f64 (sin.f64 re) (pow.f64 im 3)) (+.f64 (*.f64 1/2 (*.f64 (+.f64 im 1) (sin.f64 re))) (*.f64 (sin.f64 re) (*.f64 (*.f64 im im) 1/4))))","(+.f64 (*.f64 (sin.f64 re) (+.f64 1/2 (*.f64 im (*.f64 im 1/4)))) (*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 im) (*.f64 1/12 (pow.f64 im 3)))))","(*.f64 (sin.f64 re) (+.f64 (*.f64 im (+.f64 1/2 (*.f64 1/4 im))) (+.f64 1/2 (*.f64 1/12 (pow.f64 im 3)))))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 1/2 (*.f64 (exp.f64 im) re))","(*.f64 (*.f64 1/2 (exp.f64 im)) re)","(*.f64 (exp.f64 im) (*.f64 1/2 re))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) re)) (*.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3))))","(fma.f64 1/2 (*.f64 re (exp.f64 im)) (*.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3))))","(fma.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3)) (*.f64 (exp.f64 im) (*.f64 1/2 re)))","(*.f64 (exp.f64 im) (+.f64 (*.f64 1/2 re) (*.f64 -1/12 (pow.f64 re 3))))","(*.f64 re (*.f64 (exp.f64 im) (+.f64 1/2 (*.f64 -1/12 (*.f64 re re)))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) re)) (+.f64 (*.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3))) (*.f64 1/240 (*.f64 (exp.f64 im) (pow.f64 re 5)))))","(fma.f64 1/2 (*.f64 re (exp.f64 im)) (fma.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3)) (*.f64 1/240 (*.f64 (exp.f64 im) (pow.f64 re 5)))))","(fma.f64 (*.f64 1/2 (exp.f64 im)) re (fma.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3)) (*.f64 (exp.f64 im) (*.f64 1/240 (pow.f64 re 5)))))","(fma.f64 (exp.f64 im) (*.f64 1/240 (pow.f64 re 5)) (*.f64 (exp.f64 im) (+.f64 (*.f64 1/2 re) (*.f64 -1/12 (pow.f64 re 3)))))","(*.f64 (exp.f64 im) (+.f64 (*.f64 1/240 (pow.f64 re 5)) (+.f64 (*.f64 1/2 re) (*.f64 -1/12 (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) re)) (+.f64 (*.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3))) (+.f64 (*.f64 -1/10080 (*.f64 (exp.f64 im) (pow.f64 re 7))) (*.f64 1/240 (*.f64 (exp.f64 im) (pow.f64 re 5))))))","(fma.f64 1/2 (*.f64 re (exp.f64 im)) (fma.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3)) (fma.f64 -1/10080 (*.f64 (exp.f64 im) (pow.f64 re 7)) (*.f64 1/240 (*.f64 (exp.f64 im) (pow.f64 re 5))))))","(fma.f64 1/2 (*.f64 re (exp.f64 im)) (fma.f64 -1/12 (*.f64 (exp.f64 im) (pow.f64 re 3)) (fma.f64 (*.f64 (exp.f64 im) 1/240) (pow.f64 re 5) (*.f64 (exp.f64 im) (*.f64 (pow.f64 re 7) -1/10080)))))","(+.f64 (*.f64 (exp.f64 im) (+.f64 (*.f64 1/2 re) (*.f64 -1/12 (pow.f64 re 3)))) (*.f64 (exp.f64 im) (+.f64 (*.f64 1/240 (pow.f64 re 5)) (*.f64 -1/10080 (pow.f64 re 7)))))","(*.f64 (exp.f64 im) (+.f64 (+.f64 (*.f64 1/2 re) (*.f64 -1/12 (pow.f64 re 3))) (+.f64 (*.f64 1/240 (pow.f64 re 5)) (*.f64 -1/10080 (pow.f64 re 7)))))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (exp.f64 im))","(sin.f64 re)","(+.f64 (sin.f64 re) (*.f64 (+.f64 (*.f64 -1/2 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))) im))","(sin.f64 re)","(+.f64 (sin.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (sin.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))))) (pow.f64 im 2)) (*.f64 (+.f64 (*.f64 -1/2 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))) im)))","(+.f64 (sin.f64 re) (fma.f64 (fma.f64 1/4 (sin.f64 re) (*.f64 -1/2 (*.f64 (sin.f64 re) -1/2))) (*.f64 im im) (*.f64 im (*.f64 (sin.f64 re) 0))))","(+.f64 (sin.f64 re) (fma.f64 im 0 (*.f64 (*.f64 im im) (+.f64 (*.f64 1/2 (sin.f64 re)) 0))))","(fma.f64 (*.f64 1/2 (sin.f64 re)) (*.f64 im im) (sin.f64 re))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (*.f64 im im) 2))","(+.f64 (*.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 1/6 (sin.f64 re)) (+.f64 (*.f64 -1 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re)))) (*.f64 -1/2 (sin.f64 re))))) (*.f64 1/12 (sin.f64 re))) (pow.f64 im 3)) (+.f64 (sin.f64 re) (+.f64 (*.f64 (+.f64 (*.f64 1/4 (sin.f64 re)) (*.f64 -1/2 (+.f64 (*.f64 -1 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))))) (pow.f64 im 2)) (*.f64 (+.f64 (*.f64 -1/2 (sin.f64 re)) (*.f64 1/2 (sin.f64 re))) im))))","(+.f64 (sin.f64 re) (fma.f64 (fma.f64 1/4 (sin.f64 re) (*.f64 -1/2 (*.f64 (sin.f64 re) -1/2))) (*.f64 im im) (*.f64 im (*.f64 (sin.f64 re) 0))))","(+.f64 (sin.f64 re) (fma.f64 im 0 (*.f64 (*.f64 im im) (+.f64 (*.f64 1/2 (sin.f64 re)) 0))))","(fma.f64 (*.f64 1/2 (sin.f64 re)) (*.f64 im im) (sin.f64 re))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (*.f64 im im) 2))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))) (*.f64 1/2 (*.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im))))","(*.f64 re (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))))","(*.f64 re (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (*.f64 (pow.f64 re 3) (-.f64 (*.f64 -1/12 (exp.f64 im)) (*.f64 1/12 (/.f64 1 (exp.f64 im))))))","(fma.f64 re (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (pow.f64 re 3) (-.f64 (*.f64 (exp.f64 im) -1/12) (/.f64 1/12 (exp.f64 im)))))","(fma.f64 re (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (*.f64 (pow.f64 re 3) (fma.f64 (exp.f64 im) -1/12 (/.f64 -1/12 (exp.f64 im)))))","(*.f64 re (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 1/2 (*.f64 (*.f64 re re) -1/12))))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (+.f64 (*.f64 (pow.f64 re 5) (+.f64 (*.f64 1/240 (/.f64 1 (exp.f64 im))) (*.f64 1/240 (exp.f64 im)))) (*.f64 (pow.f64 re 3) (-.f64 (*.f64 -1/12 (exp.f64 im)) (*.f64 1/12 (/.f64 1 (exp.f64 im)))))))","(fma.f64 re (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (fma.f64 (pow.f64 re 5) (*.f64 1/240 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (*.f64 (pow.f64 re 3) (-.f64 (*.f64 (exp.f64 im) -1/12) (/.f64 1/12 (exp.f64 im))))))","(fma.f64 re (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (fma.f64 (pow.f64 re 3) (fma.f64 (exp.f64 im) -1/12 (/.f64 -1/12 (exp.f64 im))) (*.f64 (pow.f64 re 5) (fma.f64 (exp.f64 im) 1/240 (/.f64 1/240 (exp.f64 im))))))","(fma.f64 (pow.f64 re 3) (fma.f64 (exp.f64 im) -1/12 (/.f64 -1/12 (exp.f64 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/240 (pow.f64 re 5)) (*.f64 1/2 re))))","(+.f64 (*.f64 re (+.f64 (*.f64 1/2 (/.f64 1 (exp.f64 im))) (*.f64 1/2 (exp.f64 im)))) (+.f64 (*.f64 (pow.f64 re 5) (+.f64 (*.f64 1/240 (/.f64 1 (exp.f64 im))) (*.f64 1/240 (exp.f64 im)))) (+.f64 (*.f64 (pow.f64 re 3) (-.f64 (*.f64 -1/12 (exp.f64 im)) (*.f64 1/12 (/.f64 1 (exp.f64 im))))) (*.f64 (pow.f64 re 7) (-.f64 (*.f64 -1/10080 (exp.f64 im)) (*.f64 1/10080 (/.f64 1 (exp.f64 im))))))))","(fma.f64 re (*.f64 1/2 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (fma.f64 (pow.f64 re 5) (*.f64 1/240 (+.f64 (exp.f64 (neg.f64 im)) (exp.f64 im))) (fma.f64 (pow.f64 re 3) (-.f64 (*.f64 (exp.f64 im) -1/12) (/.f64 1/12 (exp.f64 im))) (*.f64 (pow.f64 re 7) (-.f64 (*.f64 (exp.f64 im) -1/10080) (/.f64 1/10080 (exp.f64 im)))))))","(fma.f64 re (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))) (fma.f64 (pow.f64 re 5) (fma.f64 (exp.f64 im) 1/240 (/.f64 1/240 (exp.f64 im))) (fma.f64 (pow.f64 re 3) (fma.f64 (exp.f64 im) -1/12 (/.f64 -1/12 (exp.f64 im))) (*.f64 (pow.f64 re 7) (fma.f64 (exp.f64 im) -1/10080 (/.f64 -1/10080 (exp.f64 im)))))))","(+.f64 (fma.f64 (pow.f64 re 3) (fma.f64 (exp.f64 im) -1/12 (/.f64 -1/12 (exp.f64 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/240 (pow.f64 re 5)) (*.f64 1/2 re)))) (*.f64 (pow.f64 re 7) (fma.f64 (exp.f64 im) -1/10080 (/.f64 -1/10080 (exp.f64 im)))))","(+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 -1/12 (pow.f64 re 3)) (*.f64 -1/10080 (pow.f64 re 7)))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/240 (pow.f64 re 5)) (*.f64 1/2 re))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 im) (sin.f64 re))) (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (+.f64 (*.f64 (sin.f64 re) (exp.f64 im)) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 1/2 (fma.f64 (sin.f64 re) (exp.f64 im) (/.f64 (sin.f64 re) (exp.f64 im))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))"]],"stop":[["node limit",1]],"time":42.14892578125,"type":"simplify"},{"compiler":[[4291,2213]],"time":41.882080078125,"type":"eval"},{"alts":[["(log.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 (exp.f64 im))) (sin.f64 re)) (+.f64 1 (expm1.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im)))))))","fresh",28.607349547686084],["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","done",0.017910009768442016],["(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))","done",0.021816259768442016],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)","next",0.6945077637479349]],"compiler":[[21,15],[13,9],[17,11],[14,12],[21,15],[14,12]],"count":[[208,4]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[205,2],"picked":[1,1]}],"min-error":[0],"time":67.6689453125,"type":"prune"},{"compiler":[[52,32]],"locations":[["(*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))",0.00390625,true],["(sin.f64 re)",0.015625,false],["(cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))",0.10546875,true],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)",0.6814614746741666,true]],"time":11.80908203125,"type":"localize"},{"count":[[3,64]],"series":[["(*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))","im","-inf",0.1640625],["(*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))","im","inf",0.162109375],["(*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))","im","0",0.19580078125],["(*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))","re","-inf",0.162109375],["(*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))","re","inf",0.197998046875],["(*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))","re","0",0.304931640625],["(cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))","im","-inf",0.205810546875],["(cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))","im","inf",0.18310546875],["(cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))","im","0",0.39990234375],["(cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))","re","-inf",0.182861328125],["(cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))","re","inf",0.238037109375],["(cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))","re","0",0.35205078125],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)","im","-inf",2.219970703125],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)","im","inf",2.214111328125],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)","im","0",2.051025390625],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)","re","-inf",3.39990234375],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)","re","inf",2.716064453125],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)","re","0",1.46484375]],"time":17.158935546875,"type":"series"},{"count":[[3,154]],"egraph":[[2,2668,26,0.024412748999999997],[1,276,26,0.004084499],[0,13,26,0.000416291]],"inputs":[["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)","(cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im)))))","(*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 re) (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 re) (cosh.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (*.f64 (*.f64 2 (cosh.f64 im)) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (cosh.f64 im)) (*.f64 (sin.f64 re) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cosh.f64 im) (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (sin.f64 re) (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2) (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2)) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cosh.f64 im)) 2) (*.f64 (cbrt.f64 (cosh.f64 im)) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 re)) (*.f64 (cbrt.f64 (cosh.f64 im)) (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (*.f64 (cbrt.f64 (sin.f64 re)) (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 1/6) (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 5/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cosh.f64 im)) (*.f64 (sqrt.f64 (cosh.f64 im)) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 re)) (*.f64 (sqrt.f64 (sin.f64 re)) (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) (sqrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) 1/2) (*.f64 2 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (*.f64 2 (cosh.f64 im))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 5/6) (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (pow.f64 (cbrt.f64 (cosh.f64 im)) 2)) (cbrt.f64 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (sqrt.f64 (cosh.f64 im))) (sqrt.f64 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 im) (cbrt.f64 (pow.f64 (sin.f64 re) 2))) (cbrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 im) (sqrt.f64 (sin.f64 re))) (sqrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2) 1) (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))) 2) (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2) (cbrt.f64 (sin.f64 re))) (cbrt.f64 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 re) 1/2) 2) (cosh.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 re) 1/2) (cosh.f64 im)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 re) 1/2) 1) (*.f64 2 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 re) 1/2) (cbrt.f64 (*.f64 4 (pow.f64 (cosh.f64 im) 2)))) (cbrt.f64 (*.f64 2 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (sin.f64 re) 1/2) (sqrt.f64 (*.f64 2 (cosh.f64 im)))) (sqrt.f64 (*.f64 2 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (cosh.f64 im)) (sin.f64 re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (*.f64 2 (cosh.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sin.f64 re)) 1) (log.f64 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (sin.f64 re)) (*.f64 (log.f64 (cosh.f64 im)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sin.f64 re)) 1) (*.f64 (log.f64 (cosh.f64 im)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 2 (cosh.f64 im))) 1) (log.f64 (*.f64 (sin.f64 re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cosh.f64 im)) 1) (log.f64 (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cosh.f64 im)) (*.f64 (log.f64 (sin.f64 re)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cosh.f64 im)) 1) (*.f64 (log.f64 (sin.f64 re)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1/3) (*.f64 2/3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1) (*.f64 2/3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2) (log.f64 (sqrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (sqrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2) (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (*.f64 (sin.f64 re) 1/2)) (*.f64 (log.f64 (*.f64 2 (cosh.f64 im))) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cosh.f64 im)) (cbrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 re)) (cbrt.f64 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 1/6) (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (sin.f64 re) 1/2)) (cbrt.f64 (*.f64 2 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/3) (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))) (sqrt.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sin.f64 re) (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (cosh.f64 im)) (sin.f64 re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (*.f64 2 (cosh.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 3) (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 1/6) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 2)) (cbrt.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))) (sqrt.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 re) (cosh.f64 im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sin.f64 re)) 1) (log.f64 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (sin.f64 re)) (*.f64 (log.f64 (cosh.f64 im)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sin.f64 re)) 1) (*.f64 (log.f64 (cosh.f64 im)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 2 (cosh.f64 im))) 1) (log.f64 (*.f64 (sin.f64 re) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cosh.f64 im)) 1) (log.f64 (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (cosh.f64 im)) (*.f64 (log.f64 (sin.f64 re)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cosh.f64 im)) 1) (*.f64 (log.f64 (sin.f64 re)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1/3) (*.f64 2/3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1) (*.f64 2/3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) (*.f64 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im))) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 2/3 (log.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2) (log.f64 (sqrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (sqrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2) (*.f64 (log.f64 (cbrt.f64 (*.f64 (sin.f64 re) (cosh.f64 im)))) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (*.f64 (sin.f64 re) 1/2)) (*.f64 (log.f64 (*.f64 2 (cosh.f64 im))) 1)))))))"]],"rules":[["egg-rr",48],["egg-rr",39],["egg-rr",67]],"stop":[["node limit",1]],"time":52.236083984375,"type":"rewrite"},{"count":[[218,152]],"egraph":[[4,6966,1459,0.03473746],[3,5293,1459,0.021870543],[2,1536,1523,0.010892001],[1,446,1651,0.003353126],[0,135,1684,0.000729459]],"inputs":[["(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (sin.f64 re) (pow.f64 1 1/3))","(+.f64 (*.f64 (sin.f64 re) (pow.f64 1 1/3)) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (sin.f64 re) (pow.f64 1 1/3))) (*.f64 1/6 (*.f64 (sin.f64 re) (pow.f64 1 1/3)))) (pow.f64 im 2)))","(+.f64 (*.f64 (sin.f64 re) (pow.f64 1 1/3)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))) (pow.f64 1 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (+.f64 (*.f64 1/36 (pow.f64 (*.f64 (pow.f64 (sin.f64 re) 2) 1) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 re)) 1/3) (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))))))) (*.f64 1/18 (*.f64 (sin.f64 re) (pow.f64 1 1/3))))) (pow.f64 im 4)) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (sin.f64 re) (pow.f64 1 1/3))) (*.f64 1/6 (*.f64 (sin.f64 re) (pow.f64 1 1/3)))) (pow.f64 im 2))))","(+.f64 (*.f64 (sin.f64 re) (pow.f64 1 1/3)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))) (pow.f64 1 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (+.f64 (*.f64 1/36 (pow.f64 (*.f64 (pow.f64 (sin.f64 re) 2) 1) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 re)) 1/3) (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))))))) (*.f64 1/18 (*.f64 (sin.f64 re) (pow.f64 1 1/3))))) (pow.f64 im 4)) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (+.f64 (*.f64 2/3 (*.f64 (-.f64 (*.f64 1/720 (sin.f64 re)) (+.f64 (*.f64 1/3 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re)))) (*.f64 1/216 (sin.f64 re)))) (pow.f64 (/.f64 1 (sin.f64 re)) 1/3))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (sin.f64 re)) 1/3) (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))))))) (+.f64 (*.f64 1/3 (*.f64 (-.f64 (*.f64 1/720 (sin.f64 re)) (+.f64 (*.f64 1/3 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re)))) (*.f64 1/216 (sin.f64 re)))) (pow.f64 1 1/3))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (+.f64 (*.f64 1/36 (pow.f64 (*.f64 (pow.f64 (sin.f64 re) 2) 1) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 re)) 1/3) (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re)))))))) (*.f64 1/9 (*.f64 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))) (pow.f64 1 1/3)))))) (pow.f64 im 6)) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (sin.f64 re) (pow.f64 1 1/3))) (*.f64 1/6 (*.f64 (sin.f64 re) (pow.f64 1 1/3)))) (pow.f64 im 2)))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(pow.f64 (sin.f64 re) 1/3)","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (pow.f64 im 2))) (pow.f64 (sin.f64 re) 1/3))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))) (pow.f64 im 4)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2)) 1/3))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (pow.f64 im 2))) (pow.f64 (sin.f64 re) 1/3)))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))) (pow.f64 im 4)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2)) 1/3))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (pow.f64 im 2))) (+.f64 (*.f64 1/3 (*.f64 (*.f64 (-.f64 (*.f64 1/720 (sin.f64 re)) (+.f64 (*.f64 1/3 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re)))) (*.f64 1/216 (sin.f64 re)))) (pow.f64 im 6)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2)) 1/3))) (pow.f64 (sin.f64 re) 1/3))))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 3))))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 3))) (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 5)))))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 -1/10080 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 7))) (+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 3))) (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 5))))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(sin.f64 re)","(+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))))","(+.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4)))))","(+.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/720 (*.f64 (sin.f64 re) (pow.f64 im 6))) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4))))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 (sin.f64 re) (pow.f64 1 1/3))","(sin.f64 re)","(+.f64 (*.f64 (sin.f64 re) (pow.f64 1 1/3)) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (sin.f64 re) (pow.f64 1 1/3))) (*.f64 1/6 (*.f64 (sin.f64 re) (pow.f64 1 1/3)))) (pow.f64 im 2)))","(+.f64 (sin.f64 re) (*.f64 (*.f64 (sin.f64 re) 1/2) (*.f64 im im)))","(fma.f64 (*.f64 im im) (*.f64 1/2 (sin.f64 re)) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 im im)) 1))","(fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)) (sin.f64 re))","(+.f64 (*.f64 (sin.f64 re) (pow.f64 1 1/3)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))) (pow.f64 1 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (+.f64 (*.f64 1/36 (pow.f64 (*.f64 (pow.f64 (sin.f64 re) 2) 1) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 re)) 1/3) (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))))))) (*.f64 1/18 (*.f64 (sin.f64 re) (pow.f64 1 1/3))))) (pow.f64 im 4)) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (sin.f64 re) (pow.f64 1 1/3))) (*.f64 1/6 (*.f64 (sin.f64 re) (pow.f64 1 1/3)))) (pow.f64 im 2))))","(+.f64 (sin.f64 re) (fma.f64 (fma.f64 1/3 (*.f64 1 (*.f64 (sin.f64 re) -1/24)) (fma.f64 (cbrt.f64 (sin.f64 re)) (fma.f64 1/36 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (*.f64 2/3 (*.f64 (*.f64 (sin.f64 re) -1/24) (cbrt.f64 (/.f64 1 (sin.f64 re)))))) (*.f64 (sin.f64 re) 1/18))) (pow.f64 im 4) (*.f64 (*.f64 (sin.f64 re) 1/2) (*.f64 im im))))","(+.f64 (sin.f64 re) (fma.f64 (+.f64 (fma.f64 (cbrt.f64 (sin.f64 re)) (fma.f64 1/36 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 re))) (*.f64 (*.f64 (sin.f64 re) -1/24) 2/3))) (*.f64 (sin.f64 re) 1/18)) (*.f64 (sin.f64 re) -1/72)) (pow.f64 im 4) (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)))))","(fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)) (fma.f64 (fma.f64 (cbrt.f64 (sin.f64 re)) (fma.f64 (*.f64 (sin.f64 re) -1/24) (*.f64 2/3 (cbrt.f64 (/.f64 1 (sin.f64 re)))) (*.f64 1/36 (cbrt.f64 (pow.f64 (sin.f64 re) 2)))) (*.f64 (sin.f64 re) 1/24)) (pow.f64 im 4) (sin.f64 re)))","(+.f64 (*.f64 (sin.f64 re) (pow.f64 1 1/3)) (+.f64 (*.f64 (+.f64 (*.f64 1/3 (*.f64 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))) (pow.f64 1 1/3))) (+.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (+.f64 (*.f64 1/36 (pow.f64 (*.f64 (pow.f64 (sin.f64 re) 2) 1) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 re)) 1/3) (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))))))) (*.f64 1/18 (*.f64 (sin.f64 re) (pow.f64 1 1/3))))) (pow.f64 im 4)) (+.f64 (*.f64 (+.f64 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (+.f64 (*.f64 2/3 (*.f64 (-.f64 (*.f64 1/720 (sin.f64 re)) (+.f64 (*.f64 1/3 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re)))) (*.f64 1/216 (sin.f64 re)))) (pow.f64 (/.f64 1 (sin.f64 re)) 1/3))) (*.f64 1/9 (*.f64 (pow.f64 (/.f64 1 (sin.f64 re)) 1/3) (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))))))) (+.f64 (*.f64 1/3 (*.f64 (-.f64 (*.f64 1/720 (sin.f64 re)) (+.f64 (*.f64 1/3 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re)))) (*.f64 1/216 (sin.f64 re)))) (pow.f64 1 1/3))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (+.f64 (*.f64 1/36 (pow.f64 (*.f64 (pow.f64 (sin.f64 re) 2) 1) 1/3)) (*.f64 2/3 (*.f64 (pow.f64 (/.f64 1 (sin.f64 re)) 1/3) (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re)))))))) (*.f64 1/9 (*.f64 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))) (pow.f64 1 1/3)))))) (pow.f64 im 6)) (*.f64 (+.f64 (*.f64 1/3 (*.f64 (sin.f64 re) (pow.f64 1 1/3))) (*.f64 1/6 (*.f64 (sin.f64 re) (pow.f64 1 1/3)))) (pow.f64 im 2)))))","(+.f64 (sin.f64 re) (fma.f64 (fma.f64 1/3 (*.f64 1 (*.f64 (sin.f64 re) -1/24)) (fma.f64 (cbrt.f64 (sin.f64 re)) (fma.f64 1/36 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (*.f64 2/3 (*.f64 (*.f64 (sin.f64 re) -1/24) (cbrt.f64 (/.f64 1 (sin.f64 re)))))) (*.f64 (sin.f64 re) 1/18))) (pow.f64 im 4) (fma.f64 (fma.f64 (cbrt.f64 (sin.f64 re)) (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 re))) (-.f64 (*.f64 (sin.f64 re) 1/720) (fma.f64 1/3 (*.f64 (sin.f64 re) -1/24) (*.f64 (sin.f64 re) 1/216)))) (*.f64 (*.f64 1/9 (cbrt.f64 (/.f64 1 (sin.f64 re)))) (*.f64 (sin.f64 re) -1/24))) (fma.f64 1/3 (*.f64 1 (-.f64 (*.f64 (sin.f64 re) 1/720) (fma.f64 1/3 (*.f64 (sin.f64 re) -1/24) (*.f64 (sin.f64 re) 1/216)))) (fma.f64 1/6 (*.f64 (cbrt.f64 (sin.f64 re)) (fma.f64 1/36 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (*.f64 2/3 (*.f64 (*.f64 (sin.f64 re) -1/24) (cbrt.f64 (/.f64 1 (sin.f64 re))))))) (*.f64 (*.f64 1 (*.f64 (sin.f64 re) -1/24)) 1/9)))) (pow.f64 im 6) (*.f64 (*.f64 (sin.f64 re) 1/2) (*.f64 im im)))))","(+.f64 (sin.f64 re) (fma.f64 (+.f64 (fma.f64 (cbrt.f64 (sin.f64 re)) (fma.f64 1/36 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 re))) (*.f64 (*.f64 (sin.f64 re) -1/24) 2/3))) (*.f64 (sin.f64 re) 1/18)) (*.f64 (sin.f64 re) -1/72)) (pow.f64 im 4) (fma.f64 (fma.f64 (cbrt.f64 (sin.f64 re)) (fma.f64 2/3 (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 re))) (-.f64 (*.f64 (sin.f64 re) 1/720) (fma.f64 (sin.f64 re) 1/216 (*.f64 (sin.f64 re) -1/72)))) (*.f64 (*.f64 (sin.f64 re) -1/24) (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 re))) 1/9))) (fma.f64 1/3 (-.f64 (*.f64 (sin.f64 re) 1/720) (fma.f64 (sin.f64 re) 1/216 (*.f64 (sin.f64 re) -1/72))) (fma.f64 (*.f64 1/6 (cbrt.f64 (sin.f64 re))) (fma.f64 1/36 (cbrt.f64 (pow.f64 (sin.f64 re) 2)) (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 re))) (*.f64 (*.f64 (sin.f64 re) -1/24) 2/3))) (*.f64 (*.f64 (sin.f64 re) -1/24) 1/9)))) (pow.f64 im 6) (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im))))))","(+.f64 (sin.f64 re) (fma.f64 (fma.f64 (cbrt.f64 (sin.f64 re)) (fma.f64 (*.f64 (sin.f64 re) -1/24) (*.f64 2/3 (cbrt.f64 (/.f64 1 (sin.f64 re)))) (*.f64 1/36 (cbrt.f64 (pow.f64 (sin.f64 re) 2)))) (*.f64 (sin.f64 re) 1/24)) (pow.f64 im 4) (fma.f64 (fma.f64 (cbrt.f64 (sin.f64 re)) (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 re))) (+.f64 (*.f64 2/3 (+.f64 (*.f64 (sin.f64 re) 11/720) (*.f64 (sin.f64 re) -1/216))) (*.f64 (*.f64 (sin.f64 re) -1/24) 1/9))) (fma.f64 1/3 (+.f64 (*.f64 (sin.f64 re) 11/720) (*.f64 (sin.f64 re) -1/216)) (fma.f64 (fma.f64 (*.f64 (sin.f64 re) -1/24) (*.f64 2/3 (cbrt.f64 (/.f64 1 (sin.f64 re)))) (*.f64 1/36 (cbrt.f64 (pow.f64 (sin.f64 re) 2)))) (*.f64 1/6 (cbrt.f64 (sin.f64 re))) (*.f64 (*.f64 (sin.f64 re) -1/24) 1/9)))) (pow.f64 im 6) (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im))))))","(+.f64 (sin.f64 re) (fma.f64 (+.f64 (*.f64 (cbrt.f64 (sin.f64 re)) (+.f64 (*.f64 (cbrt.f64 (/.f64 1 (sin.f64 re))) (+.f64 (*.f64 2/3 (*.f64 (sin.f64 re) 23/2160)) (*.f64 (*.f64 (sin.f64 re) -1/24) 1/9))) (*.f64 1/6 (fma.f64 (*.f64 (sin.f64 re) -1/24) (*.f64 2/3 (cbrt.f64 (/.f64 1 (sin.f64 re)))) (*.f64 1/36 (cbrt.f64 (pow.f64 (sin.f64 re) 2))))))) (fma.f64 (*.f64 (sin.f64 re) -1/24) 1/9 (*.f64 1/3 (*.f64 (sin.f64 re) 23/2160)))) (pow.f64 im 6) (fma.f64 (fma.f64 (cbrt.f64 (sin.f64 re)) (fma.f64 (*.f64 (sin.f64 re) -1/24) (*.f64 2/3 (cbrt.f64 (/.f64 1 (sin.f64 re)))) (*.f64 1/36 (cbrt.f64 (pow.f64 (sin.f64 re) 2)))) (*.f64 (sin.f64 re) 1/24)) (pow.f64 im 4) (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im))))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (pow.f64 1 1/3)))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(pow.f64 (sin.f64 re) 1/3)","(cbrt.f64 (sin.f64 re))","(+.f64 (*.f64 1/6 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (pow.f64 im 2))) (pow.f64 (sin.f64 re) 1/3))","(fma.f64 1/6 (*.f64 (*.f64 im im) (cbrt.f64 (sin.f64 re))) (cbrt.f64 (sin.f64 re)))","(fma.f64 1/6 (*.f64 im (*.f64 im (cbrt.f64 (sin.f64 re)))) (cbrt.f64 (sin.f64 re)))","(*.f64 (+.f64 (*.f64 1/6 (*.f64 im im)) 1) (cbrt.f64 (sin.f64 re)))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))) (pow.f64 im 4)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2)) 1/3))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (pow.f64 im 2))) (pow.f64 (sin.f64 re) 1/3)))","(fma.f64 1/3 (*.f64 (*.f64 (sin.f64 re) -1/24) (*.f64 (pow.f64 im 4) (cbrt.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2))))) (fma.f64 1/6 (*.f64 (*.f64 im im) (cbrt.f64 (sin.f64 re))) (cbrt.f64 (sin.f64 re))))","(fma.f64 (*.f64 (*.f64 (sin.f64 re) -1/72) (pow.f64 im 4)) (cbrt.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2))) (fma.f64 1/6 (*.f64 im (*.f64 im (cbrt.f64 (sin.f64 re)))) (cbrt.f64 (sin.f64 re))))","(fma.f64 (*.f64 (sin.f64 re) -1/72) (*.f64 (pow.f64 im 4) (cbrt.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2)))) (*.f64 (+.f64 (*.f64 1/6 (*.f64 im im)) 1) (cbrt.f64 (sin.f64 re))))","(+.f64 (*.f64 1/3 (*.f64 (*.f64 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re))) (pow.f64 im 4)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2)) 1/3))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 (*.f64 (sin.f64 re) 1) 1/3) (pow.f64 im 2))) (+.f64 (*.f64 1/3 (*.f64 (*.f64 (-.f64 (*.f64 1/720 (sin.f64 re)) (+.f64 (*.f64 1/3 (-.f64 (*.f64 1/24 (sin.f64 re)) (*.f64 1/12 (sin.f64 re)))) (*.f64 1/216 (sin.f64 re)))) (pow.f64 im 6)) (pow.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2)) 1/3))) (pow.f64 (sin.f64 re) 1/3))))","(fma.f64 1/3 (*.f64 (*.f64 (sin.f64 re) -1/24) (*.f64 (pow.f64 im 4) (cbrt.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2))))) (fma.f64 1/6 (*.f64 (*.f64 im im) (cbrt.f64 (sin.f64 re))) (fma.f64 1/3 (*.f64 (-.f64 (*.f64 (sin.f64 re) 1/720) (fma.f64 1/3 (*.f64 (sin.f64 re) -1/24) (*.f64 (sin.f64 re) 1/216))) (*.f64 (pow.f64 im 6) (cbrt.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2))))) (cbrt.f64 (sin.f64 re)))))","(fma.f64 (*.f64 (*.f64 (sin.f64 re) -1/72) (pow.f64 im 4)) (cbrt.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2))) (fma.f64 1/6 (*.f64 im (*.f64 im (cbrt.f64 (sin.f64 re)))) (fma.f64 1/3 (*.f64 (-.f64 (*.f64 (sin.f64 re) 1/720) (fma.f64 (sin.f64 re) 1/216 (*.f64 (sin.f64 re) -1/72))) (*.f64 (pow.f64 im 6) (cbrt.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2))))) (cbrt.f64 (sin.f64 re)))))","(fma.f64 (*.f64 (sin.f64 re) -1/72) (*.f64 (pow.f64 im 4) (cbrt.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2)))) (fma.f64 1/3 (*.f64 (+.f64 (*.f64 (sin.f64 re) 11/720) (*.f64 (sin.f64 re) -1/216)) (*.f64 (pow.f64 im 6) (cbrt.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2))))) (*.f64 (+.f64 (*.f64 1/6 (*.f64 im im)) 1) (cbrt.f64 (sin.f64 re)))))","(+.f64 (*.f64 (+.f64 (*.f64 1/6 (*.f64 im im)) 1) (cbrt.f64 (sin.f64 re))) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (sin.f64 re) 2))) (+.f64 (*.f64 1/3 (*.f64 (*.f64 (sin.f64 re) 23/2160) (pow.f64 im 6))) (*.f64 (pow.f64 im 4) (*.f64 (sin.f64 re) -1/72)))))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 (pow.f64 (*.f64 (sin.f64 re) (*.f64 1 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))) 1/3) (cbrt.f64 1/2))","(*.f64 (cbrt.f64 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))) (cbrt.f64 1/2))","(*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re))","(*.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 re 1/2))","(*.f64 1/2 (fma.f64 re (exp.f64 im) (/.f64 re (exp.f64 im))))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 3))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 -1/12 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (pow.f64 re 3) -1/12)))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/2 re) (*.f64 -1/12 (pow.f64 re 3))))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 3))) (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 5)))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)) (*.f64 1/240 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5)))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (pow.f64 re 5) 1/240))))","(fma.f64 1/2 (fma.f64 re (exp.f64 im) (/.f64 re (exp.f64 im))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 -1/12 (pow.f64 re 3)) (*.f64 1/240 (pow.f64 re 5)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/2 re) (+.f64 (*.f64 -1/12 (pow.f64 re 3)) (*.f64 1/240 (pow.f64 re 5)))))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 -1/10080 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 7))) (+.f64 (*.f64 -1/12 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 3))) (*.f64 1/240 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (pow.f64 re 5))))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 -1/10080 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7)) (fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)) (*.f64 1/240 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 5))))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 -1/10080 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 7)) (fma.f64 -1/12 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (pow.f64 re 3)) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (pow.f64 re 5) 1/240)))))","(+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/2 re) (*.f64 -1/12 (pow.f64 re 3)))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 1/240 (pow.f64 re 5)) (*.f64 -1/10080 (pow.f64 re 7)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (+.f64 (*.f64 1/2 re) (*.f64 -1/12 (pow.f64 re 3))) (+.f64 (*.f64 -1/10080 (pow.f64 re 7)) (*.f64 1/240 (pow.f64 re 5)))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(sin.f64 re)","(+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))))","(+.f64 (sin.f64 re) (*.f64 (*.f64 (sin.f64 re) 1/2) (*.f64 im im)))","(fma.f64 (*.f64 im im) (*.f64 1/2 (sin.f64 re)) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 im im)) 1))","(fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)) (sin.f64 re))","(+.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4)))))","(+.f64 (sin.f64 re) (fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4)))))","(+.f64 (sin.f64 re) (fma.f64 (*.f64 (sin.f64 re) 1/24) (pow.f64 im 4) (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)))))","(+.f64 (sin.f64 re) (*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 1/24 (pow.f64 im 4)))))","(*.f64 (sin.f64 re) (+.f64 1 (+.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 1/24 (pow.f64 im 4)))))","(+.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))) (+.f64 (*.f64 1/720 (*.f64 (sin.f64 re) (pow.f64 im 6))) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4))))))","(+.f64 (sin.f64 re) (fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)) (fma.f64 1/720 (*.f64 (sin.f64 re) (pow.f64 im 6)) (*.f64 1/24 (*.f64 (sin.f64 re) (pow.f64 im 4))))))","(+.f64 (sin.f64 re) (fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)) (fma.f64 (*.f64 (sin.f64 re) 1/24) (pow.f64 im 4) (*.f64 (sin.f64 re) (*.f64 1/720 (pow.f64 im 6))))))","(+.f64 (sin.f64 re) (fma.f64 (sin.f64 re) (*.f64 1/720 (pow.f64 im 6)) (*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 1/24 (pow.f64 im 4))))))","(*.f64 (sin.f64 re) (+.f64 (+.f64 (*.f64 1/2 (*.f64 im im)) 1) (+.f64 (*.f64 1/24 (pow.f64 im 4)) (*.f64 1/720 (pow.f64 im 6)))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))"]],"stop":[["node limit",1]],"time":66.601806640625,"type":"simplify"},{"compiler":[[3043,1658]],"time":32.983154296875,"type":"eval"},{"alts":[["(log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))","next",28.418684773734917],["(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))","done",0.021816259768442016],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)","done",0.6945077637479349]],"compiler":[[9,7],[17,11],[14,12],[9,7]],"count":[[179,3]],"kept":[{"done":[2,1],"fresh":[1,0],"new":[175,1],"picked":[1,1]}],"min-error":[0],"time":37.20703125,"type":"prune"},{"compiler":[[24,7]],"locations":[["(exp.f64 (cosh.f64 im))",0.0078125,true],["(sin.f64 re)",0.015625,false],["(pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re))",0.1171875,true],["(log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))",2.197412463814734,true]],"time":8.630859375,"type":"localize"},{"count":[[3,60]],"series":[["(exp.f64 (cosh.f64 im))","im","-inf",0.157958984375],["(exp.f64 (cosh.f64 im))","im","inf",0.19091796875],["(exp.f64 (cosh.f64 im))","im","0",0.23291015625],["(pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re))","re","-inf",0.193115234375],["(pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re))","re","inf",0.1669921875],["(pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re))","re","0",0.295166015625],["(pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re))","im","-inf",0.171142578125],["(pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re))","im","inf",0.212158203125],["(pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re))","im","0",0.333984375],["(log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))","re","-inf",17.658935546875],["(log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))","re","inf",17.743896484375],["(log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))","re","0",1.39697265625],["(log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))","im","-inf",32.462890625],["(log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))","im","inf",33.218994140625],["(log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))","im","0",1.958984375]],"time":106.672119140625,"type":"series"},{"count":[[3,69]],"egraph":[[2,1924,23,0.019190084],[1,159,23,0.0026880000000000003],[0,8,23,0.000194875]],"inputs":[["(log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))","(pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re))","(exp.f64 (cosh.f64 im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cosh.f64 im) (*.f64 (sin.f64 re) 1/2)) (*.f64 (cosh.f64 im) (*.f64 (sin.f64 re) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (cosh.f64 im) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (cosh.f64 im) (sin.f64 re))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cosh.f64 im) (sin.f64 re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 re) (cosh.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 im) (sin.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (cosh.f64 im) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (cosh.f64 im) (sin.f64 re))) (pow.f64 (cbrt.f64 (*.f64 (cosh.f64 im) (sin.f64 re))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (cosh.f64 im) (sin.f64 re))) 2) (cbrt.f64 (*.f64 (cosh.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 re)) 2) (*.f64 (cbrt.f64 (sin.f64 re)) (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cosh.f64 im)) 2) (*.f64 (cbrt.f64 (cosh.f64 im)) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (cosh.f64 im) (sin.f64 re))) (sqrt.f64 (*.f64 (cosh.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 re)) (*.f64 (sqrt.f64 (sin.f64 re)) (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cosh.f64 im)) (*.f64 (sqrt.f64 (cosh.f64 im)) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (cosh.f64 im)) (sqrt.f64 (sin.f64 re))) (*.f64 (sqrt.f64 (cosh.f64 im)) (sqrt.f64 (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (pow.f64 (cbrt.f64 (cosh.f64 im)) 2)) (cbrt.f64 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 re) (sqrt.f64 (cosh.f64 im))) (sqrt.f64 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 im) (pow.f64 (cbrt.f64 (sin.f64 re)) 2)) (cbrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cosh.f64 im) (sqrt.f64 (sin.f64 re))) (sqrt.f64 (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (cosh.f64 im)) (sin.f64 re)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 re) (*.f64 2 (cosh.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cosh.f64 im) (sin.f64 re)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cosh.f64 im) (sin.f64 re)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cosh.f64 im) (sin.f64 re))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cosh.f64 im) (sin.f64 re))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cosh.f64 im) (sin.f64 re)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cosh.f64 im) (sin.f64 re)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 re) 3) (pow.f64 (cosh.f64 im) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cosh.f64 im) 3) (pow.f64 (sin.f64 re) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cosh.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cosh.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cosh.f64 im) (sin.f64 re))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (expm1.f64 (*.f64 (cosh.f64 im) (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im))) (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im))) 2) (cbrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im))) (sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 (sin.f64 re)) (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (exp.f64 (cosh.f64 im))) 2) (sin.f64 re)) (pow.f64 (cbrt.f64 (exp.f64 (cosh.f64 im))) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (exp.f64 (cosh.f64 im))) (sin.f64 re)) (pow.f64 (sqrt.f64 (exp.f64 (cosh.f64 im))) (sin.f64 re)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (*.f64 2 (sin.f64 re))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (exp.f64 (sin.f64 re)) (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (cosh.f64 im) (sin.f64 re)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (expm1.f64 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (exp.f64 (cosh.f64 im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (cosh.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (cosh.f64 im))) (pow.f64 (cbrt.f64 (exp.f64 (cosh.f64 im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 (cosh.f64 im))) 2) (cbrt.f64 (exp.f64 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (cosh.f64 im))) (sqrt.f64 (exp.f64 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cosh.f64 im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (cosh.f64 im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (cosh.f64 im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (cosh.f64 im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (cosh.f64 im)) 2)) (cbrt.f64 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (cosh.f64 im))) (sqrt.f64 (cosh.f64 im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (cosh.f64 im))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (cosh.f64 im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (exp.f64 (*.f64 2 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 (cosh.f64 im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (cosh.f64 im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (cosh.f64 im))))))))"]],"rules":[["egg-rr",20],["egg-rr",16],["egg-rr",33]],"stop":[["node limit",1]],"time":43.29296875,"type":"rewrite"},{"count":[[129,111]],"egraph":[[4,7939,1434,0.037630374],[3,6674,1434,0.025363416],[2,1849,1513,0.012704666],[1,463,1595,0.003752791],[0,146,1695,0.000768166]],"inputs":[["(sin.f64 re)","(+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))))","(+.f64 (*.f64 1/24 (*.f64 (+.f64 (*.f64 24 (+.f64 (*.f64 1/8 (pow.f64 (sin.f64 re) 2)) (*.f64 1/24 (sin.f64 re)))) (*.f64 -3 (pow.f64 (sin.f64 re) 2))) (pow.f64 im 4))) (+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2)))))","(+.f64 (*.f64 1/720 (*.f64 (pow.f64 im 6) (+.f64 (*.f64 -360 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (sin.f64 re) 2)) (*.f64 1/24 (sin.f64 re))) (sin.f64 re))) (+.f64 (*.f64 720 (+.f64 (*.f64 1/720 (sin.f64 re)) (+.f64 (*.f64 1/48 (pow.f64 (sin.f64 re) 3)) (*.f64 1/48 (pow.f64 (sin.f64 re) 2))))) (*.f64 30 (pow.f64 (sin.f64 re) 3)))))) (+.f64 (*.f64 1/24 (*.f64 (+.f64 (*.f64 24 (+.f64 (*.f64 1/8 (pow.f64 (sin.f64 re) 2)) (*.f64 1/24 (sin.f64 re)))) (*.f64 -3 (pow.f64 (sin.f64 re) 2))) (pow.f64 im 4))) (+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2)) (*.f64 1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2))) (pow.f64 re 2))))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2)) (*.f64 1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2))) (pow.f64 re 2))) (*.f64 1/6 (*.f64 (+.f64 (*.f64 1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)) (+.f64 (*.f64 -3/8 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)) (*.f64 6 (+.f64 (*.f64 -1/12 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)))))) (pow.f64 re 3)))))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2)) (*.f64 1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2))) (pow.f64 re 2))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 3/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 4)) (+.f64 (*.f64 -3/16 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 4)) (+.f64 (*.f64 24 (+.f64 (*.f64 1/384 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 4)) (*.f64 -1/24 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2)))) (+.f64 (*.f64 -12 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (+.f64 (*.f64 -1/12 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3))))) (*.f64 -3/8 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 4)))))))) (*.f64 1/6 (*.f64 (+.f64 (*.f64 1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)) (+.f64 (*.f64 -3/8 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)) (*.f64 6 (+.f64 (*.f64 -1/12 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)))))) (pow.f64 re 3))))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(exp.f64 (sin.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 2)))) (exp.f64 (sin.f64 re)))","(+.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (sin.f64 re) 2)) (*.f64 1/24 (sin.f64 re))) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 4))) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 2)))) (exp.f64 (sin.f64 re))))","(+.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (sin.f64 re) 2)) (*.f64 1/24 (sin.f64 re))) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 4))) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 2)))) (+.f64 (exp.f64 (sin.f64 re)) (*.f64 (+.f64 (*.f64 1/720 (sin.f64 re)) (+.f64 (*.f64 1/48 (pow.f64 (sin.f64 re) 3)) (*.f64 1/48 (pow.f64 (sin.f64 re) 2)))) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 6))))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","1","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) 1)","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2) (pow.f64 re 2))) 1))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2) (pow.f64 re 2))) (+.f64 1 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 -1/12 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)))))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(exp.f64 1)","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 im 2))) (exp.f64 1))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 im 2))) (+.f64 (*.f64 1/6 (*.f64 (exp.f64 1) (pow.f64 im 4))) (exp.f64 1)))","(+.f64 (*.f64 31/720 (*.f64 (exp.f64 1) (pow.f64 im 6))) (+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 im 2))) (+.f64 (*.f64 1/6 (*.f64 (exp.f64 1) (pow.f64 im 4))) (exp.f64 1))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))"]],"method":["egg-herbie"],"outputs":[["(sin.f64 re)","(+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))))","(+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im))))","(fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)) (sin.f64 re))","(*.f64 (+.f64 (*.f64 1/2 (*.f64 im im)) 1) (sin.f64 re))","(*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 im im)) 1))","(+.f64 (*.f64 1/24 (*.f64 (+.f64 (*.f64 24 (+.f64 (*.f64 1/8 (pow.f64 (sin.f64 re) 2)) (*.f64 1/24 (sin.f64 re)))) (*.f64 -3 (pow.f64 (sin.f64 re) 2))) (pow.f64 im 4))) (+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2)))))","(fma.f64 1/24 (*.f64 (fma.f64 24 (fma.f64 1/8 (pow.f64 (sin.f64 re) 2) (*.f64 (sin.f64 re) 1/24)) (*.f64 (pow.f64 (sin.f64 re) 2) -3)) (pow.f64 im 4)) (+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)))))","(fma.f64 1/24 (*.f64 (fma.f64 (pow.f64 (sin.f64 re) 2) -3 (+.f64 (*.f64 (pow.f64 (sin.f64 re) 2) 3) (*.f64 (sin.f64 re) 1))) (pow.f64 im 4)) (fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)) (sin.f64 re)))","(fma.f64 1/24 (*.f64 (+.f64 (sin.f64 re) (*.f64 (pow.f64 (sin.f64 re) 2) 0)) (pow.f64 im 4)) (*.f64 (+.f64 (*.f64 1/2 (*.f64 im im)) 1) (sin.f64 re)))","(fma.f64 (+.f64 0 (*.f64 (sin.f64 re) 1/24)) (pow.f64 im 4) (*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 im im)) 1)))","(+.f64 (*.f64 1/720 (*.f64 (pow.f64 im 6) (+.f64 (*.f64 -360 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (sin.f64 re) 2)) (*.f64 1/24 (sin.f64 re))) (sin.f64 re))) (+.f64 (*.f64 720 (+.f64 (*.f64 1/720 (sin.f64 re)) (+.f64 (*.f64 1/48 (pow.f64 (sin.f64 re) 3)) (*.f64 1/48 (pow.f64 (sin.f64 re) 2))))) (*.f64 30 (pow.f64 (sin.f64 re) 3)))))) (+.f64 (*.f64 1/24 (*.f64 (+.f64 (*.f64 24 (+.f64 (*.f64 1/8 (pow.f64 (sin.f64 re) 2)) (*.f64 1/24 (sin.f64 re)))) (*.f64 -3 (pow.f64 (sin.f64 re) 2))) (pow.f64 im 4))) (+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (pow.f64 im 2))))))","(fma.f64 1/720 (*.f64 (pow.f64 im 6) (fma.f64 -360 (*.f64 (sin.f64 re) (fma.f64 1/8 (pow.f64 (sin.f64 re) 2) (*.f64 (sin.f64 re) 1/24))) (fma.f64 720 (fma.f64 1/720 (sin.f64 re) (*.f64 1/48 (+.f64 (pow.f64 (sin.f64 re) 3) (pow.f64 (sin.f64 re) 2)))) (*.f64 (pow.f64 (sin.f64 re) 3) 30)))) (fma.f64 1/24 (*.f64 (fma.f64 24 (fma.f64 1/8 (pow.f64 (sin.f64 re) 2) (*.f64 (sin.f64 re) 1/24)) (*.f64 (pow.f64 (sin.f64 re) 2) -3)) (pow.f64 im 4)) (+.f64 (sin.f64 re) (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im))))))","(fma.f64 1/720 (*.f64 (pow.f64 im 6) (fma.f64 -360 (*.f64 (sin.f64 re) (fma.f64 (sin.f64 re) 1/24 (*.f64 1/8 (pow.f64 (sin.f64 re) 2)))) (fma.f64 (pow.f64 (sin.f64 re) 3) 30 (+.f64 (*.f64 15 (*.f64 (+.f64 (sin.f64 re) 1) (pow.f64 (sin.f64 re) 2))) (*.f64 (sin.f64 re) 1))))) (fma.f64 1/24 (*.f64 (fma.f64 (pow.f64 (sin.f64 re) 2) -3 (+.f64 (*.f64 (pow.f64 (sin.f64 re) 2) 3) (*.f64 (sin.f64 re) 1))) (pow.f64 im 4)) (fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 im im)) (sin.f64 re))))","(fma.f64 1/720 (*.f64 (pow.f64 im 6) (fma.f64 -360 (*.f64 (sin.f64 re) (*.f64 (sin.f64 re) (+.f64 (*.f64 (sin.f64 re) 1/8) 1/24))) (fma.f64 (pow.f64 (sin.f64 re) 3) 30 (+.f64 (sin.f64 re) (*.f64 (*.f64 (pow.f64 (sin.f64 re) 2) (+.f64 (sin.f64 re) 1)) 15))))) (fma.f64 1/24 (*.f64 (+.f64 (sin.f64 re) (*.f64 (pow.f64 (sin.f64 re) 2) 0)) (pow.f64 im 4)) (*.f64 (+.f64 (*.f64 1/2 (*.f64 im im)) 1) (sin.f64 re))))","(fma.f64 1/720 (*.f64 (pow.f64 im 6) (fma.f64 -360 (*.f64 (sin.f64 re) (*.f64 (sin.f64 re) (+.f64 (*.f64 (sin.f64 re) 1/8) 1/24))) (fma.f64 (pow.f64 (sin.f64 re) 3) 30 (+.f64 (sin.f64 re) (*.f64 (*.f64 (pow.f64 (sin.f64 re) 2) (+.f64 (sin.f64 re) 1)) 15))))) (fma.f64 (+.f64 0 (*.f64 (sin.f64 re) 1/24)) (pow.f64 im 4) (*.f64 (sin.f64 re) (+.f64 (*.f64 1/2 (*.f64 im im)) 1))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re))","(*.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 re (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 re 1/2))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2)) (*.f64 1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2))) (pow.f64 re 2))))","(*.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 re (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 re 1/2))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2)) (*.f64 1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2))) (pow.f64 re 2))) (*.f64 1/6 (*.f64 (+.f64 (*.f64 1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)) (+.f64 (*.f64 -3/8 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)) (*.f64 6 (+.f64 (*.f64 -1/12 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)))))) (pow.f64 re 3)))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 1/2 (*.f64 (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2) 0) (*.f64 re re)) (*.f64 1/6 (*.f64 (fma.f64 1/4 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) (fma.f64 -3/8 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) (*.f64 6 (fma.f64 -1/12 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3)))))) (pow.f64 re 3)))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 0 (*.f64 re re) (*.f64 1/6 (*.f64 (+.f64 (+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) -1/2) (*.f64 1/8 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3))) (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) -1/8)) (pow.f64 re 3)))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 1/6 (*.f64 (fma.f64 1/4 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) (+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) -1/2) (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) -1/4))) (pow.f64 re 3)) 0))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (*.f64 1/6 (*.f64 (+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) -1/2) (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) 0)) (pow.f64 re 3))))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 1/2 (*.f64 (+.f64 (*.f64 -1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2)) (*.f64 1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2))) (pow.f64 re 2))) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (*.f64 3/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 4)) (+.f64 (*.f64 -3/16 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 4)) (+.f64 (*.f64 24 (+.f64 (*.f64 1/384 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 4)) (*.f64 -1/24 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2)))) (+.f64 (*.f64 -12 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) (+.f64 (*.f64 -1/12 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3))))) (*.f64 -3/8 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 4)))))))) (*.f64 1/6 (*.f64 (+.f64 (*.f64 1/4 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)) (+.f64 (*.f64 -3/8 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)) (*.f64 6 (+.f64 (*.f64 -1/12 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)))))) (pow.f64 re 3))))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 1/2 (*.f64 (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2) 0) (*.f64 re re)) (fma.f64 1/24 (*.f64 (pow.f64 re 4) (fma.f64 3/4 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4) (fma.f64 -3/16 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4) (fma.f64 24 (fma.f64 1/384 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4) (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2) -1/24)) (fma.f64 -12 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (fma.f64 -1/12 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3)))) (*.f64 -3/8 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4))))))) (*.f64 1/6 (*.f64 (fma.f64 1/4 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) (fma.f64 -3/8 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) (*.f64 6 (fma.f64 -1/12 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3)))))) (pow.f64 re 3))))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 0 (*.f64 re re) (fma.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (fma.f64 24 (fma.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2) -1/24 (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4) 1/384)) (fma.f64 -3/8 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4) (*.f64 -12 (+.f64 (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2) -1/12) (*.f64 1/48 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4)))))) (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4) 9/16))) (*.f64 1/6 (*.f64 (+.f64 (+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) -1/2) (*.f64 1/8 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3))) (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) -1/8)) (pow.f64 re 3))))))","(fma.f64 1/2 (fma.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 0) (fma.f64 1/24 (*.f64 (pow.f64 re 4) (fma.f64 3/4 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4) (+.f64 (fma.f64 -3/8 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4) (*.f64 -12 (+.f64 (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2) -1/12) (*.f64 1/48 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4))))) (+.f64 (neg.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2)) (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4) -1/8))))) (*.f64 1/6 (*.f64 (fma.f64 1/4 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) (+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) -1/2) (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) -1/4))) (pow.f64 re 3)))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 1/24 (*.f64 (pow.f64 re 4) (+.f64 (fma.f64 -3/8 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4) (*.f64 -12 (+.f64 (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2) -1/12) (*.f64 1/48 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4))))) (-.f64 (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 4) 5/8) (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2)))) (*.f64 1/6 (*.f64 (+.f64 (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) -1/2) (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) 0)) (pow.f64 re 3)))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 (sin.f64 re) 1/2))","(exp.f64 (sin.f64 re))","(+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 2)))) (exp.f64 (sin.f64 re)))","(fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 (*.f64 im im) (exp.f64 (sin.f64 re)))) (exp.f64 (sin.f64 re)))","(fma.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (*.f64 im im)) (exp.f64 (sin.f64 re))) (exp.f64 (sin.f64 re)))","(*.f64 (+.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 im im))) 1) (exp.f64 (sin.f64 re)))","(+.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (sin.f64 re) 2)) (*.f64 1/24 (sin.f64 re))) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 4))) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 2)))) (exp.f64 (sin.f64 re))))","(fma.f64 (fma.f64 1/8 (pow.f64 (sin.f64 re) 2) (*.f64 (sin.f64 re) 1/24)) (*.f64 (pow.f64 im 4) (exp.f64 (sin.f64 re))) (fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 (*.f64 im im) (exp.f64 (sin.f64 re)))) (exp.f64 (sin.f64 re))))","(fma.f64 (fma.f64 (sin.f64 re) 1/24 (*.f64 1/8 (pow.f64 (sin.f64 re) 2))) (*.f64 (pow.f64 im 4) (exp.f64 (sin.f64 re))) (fma.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (*.f64 im im)) (exp.f64 (sin.f64 re))) (exp.f64 (sin.f64 re))))","(+.f64 (exp.f64 (sin.f64 re)) (*.f64 (exp.f64 (sin.f64 re)) (+.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 im im))) (*.f64 (*.f64 (sin.f64 re) (+.f64 (*.f64 (sin.f64 re) 1/8) 1/24)) (pow.f64 im 4)))))","(*.f64 (exp.f64 (sin.f64 re)) (+.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 im im))) (+.f64 (*.f64 (*.f64 (sin.f64 re) (+.f64 (*.f64 (sin.f64 re) 1/8) 1/24)) (pow.f64 im 4)) 1)))","(+.f64 (*.f64 (+.f64 (*.f64 1/8 (pow.f64 (sin.f64 re) 2)) (*.f64 1/24 (sin.f64 re))) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 4))) (+.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 2)))) (+.f64 (exp.f64 (sin.f64 re)) (*.f64 (+.f64 (*.f64 1/720 (sin.f64 re)) (+.f64 (*.f64 1/48 (pow.f64 (sin.f64 re) 3)) (*.f64 1/48 (pow.f64 (sin.f64 re) 2)))) (*.f64 (exp.f64 (sin.f64 re)) (pow.f64 im 6))))))","(fma.f64 (fma.f64 1/8 (pow.f64 (sin.f64 re) 2) (*.f64 (sin.f64 re) 1/24)) (*.f64 (pow.f64 im 4) (exp.f64 (sin.f64 re))) (+.f64 (fma.f64 1/2 (*.f64 (sin.f64 re) (*.f64 (*.f64 im im) (exp.f64 (sin.f64 re)))) (exp.f64 (sin.f64 re))) (*.f64 (fma.f64 1/720 (sin.f64 re) (*.f64 1/48 (+.f64 (pow.f64 (sin.f64 re) 3) (pow.f64 (sin.f64 re) 2)))) (*.f64 (pow.f64 im 6) (exp.f64 (sin.f64 re))))))","(fma.f64 (fma.f64 (sin.f64 re) 1/24 (*.f64 1/8 (pow.f64 (sin.f64 re) 2))) (*.f64 (pow.f64 im 4) (exp.f64 (sin.f64 re))) (fma.f64 1/2 (*.f64 (*.f64 (sin.f64 re) (*.f64 im im)) (exp.f64 (sin.f64 re))) (fma.f64 (fma.f64 (sin.f64 re) 1/720 (*.f64 1/48 (*.f64 (+.f64 (sin.f64 re) 1) (pow.f64 (sin.f64 re) 2)))) (*.f64 (pow.f64 im 6) (exp.f64 (sin.f64 re))) (exp.f64 (sin.f64 re)))))","(+.f64 (*.f64 (+.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 im im))) 1) (exp.f64 (sin.f64 re))) (*.f64 (exp.f64 (sin.f64 re)) (+.f64 (*.f64 (pow.f64 im 6) (fma.f64 (sin.f64 re) 1/720 (*.f64 1/48 (*.f64 (pow.f64 (sin.f64 re) 2) (+.f64 (sin.f64 re) 1))))) (*.f64 (*.f64 (sin.f64 re) (+.f64 (*.f64 (sin.f64 re) 1/8) 1/24)) (pow.f64 im 4)))))","(+.f64 (exp.f64 (sin.f64 re)) (*.f64 (exp.f64 (sin.f64 re)) (+.f64 (*.f64 (pow.f64 im 6) (*.f64 (sin.f64 re) (+.f64 1/720 (*.f64 1/48 (*.f64 (sin.f64 re) (+.f64 (sin.f64 re) 1)))))) (+.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 im im))) (*.f64 (*.f64 (sin.f64 re) (+.f64 (*.f64 (sin.f64 re) 1/8) 1/24)) (pow.f64 im 4))))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","1","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) 1)","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) 1)","(fma.f64 (*.f64 1/2 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) re 1)","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2) (pow.f64 re 2))) 1))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 1/8 (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2) (*.f64 re re)) 1))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 1/8 (*.f64 re (*.f64 re (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2))) 1))","(+.f64 (*.f64 1/2 (*.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) re)) (+.f64 (*.f64 1/8 (*.f64 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 2) (pow.f64 re 2))) (+.f64 1 (*.f64 (pow.f64 re 3) (+.f64 (*.f64 -1/12 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)) 3)))))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (+.f64 (fma.f64 1/8 (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2) (*.f64 re re)) 1) (*.f64 (fma.f64 -1/12 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (*.f64 1/48 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3))) (pow.f64 re 3))))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 1/8 (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2) (*.f64 re re)) (fma.f64 (fma.f64 1/48 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) -1/12)) (pow.f64 re 3) 1)))","(fma.f64 1/2 (*.f64 re (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))) (fma.f64 1/8 (*.f64 re (*.f64 re (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2))) (fma.f64 (fma.f64 1/48 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) -1/12)) (pow.f64 re 3) 1)))","(+.f64 (fma.f64 1/8 (*.f64 re (*.f64 re (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 2))) 1) (+.f64 (*.f64 1/48 (*.f64 (pow.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) 3) (pow.f64 re 3))) (*.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))) (+.f64 (*.f64 -1/12 (pow.f64 re 3)) (*.f64 re 1/2)))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 (*.f64 1/2 (*.f64 (sin.f64 re) (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im)))))","(pow.f64 (exp.f64 1/2) (*.f64 (sin.f64 re) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (exp.f64 (*.f64 (sin.f64 re) 1/2)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (pow.f64 (exp.f64 (sin.f64 re)) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(pow.f64 (sqrt.f64 (exp.f64 (sin.f64 re))) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(exp.f64 1)","(E.f64)","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 im 2))) (exp.f64 1))","(fma.f64 1/2 (*.f64 (*.f64 im im) (E.f64)) (E.f64))","(fma.f64 1/2 (*.f64 im (*.f64 im (E.f64))) (E.f64))","(+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 im 2))) (+.f64 (*.f64 1/6 (*.f64 (exp.f64 1) (pow.f64 im 4))) (exp.f64 1)))","(fma.f64 1/2 (*.f64 (*.f64 im im) (E.f64)) (fma.f64 1/6 (*.f64 (pow.f64 im 4) (E.f64)) (E.f64)))","(fma.f64 1/2 (*.f64 im (*.f64 im (E.f64))) (fma.f64 1/6 (*.f64 (pow.f64 im 4) (E.f64)) (E.f64)))","(+.f64 (E.f64) (*.f64 (E.f64) (+.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (pow.f64 im 4) 1/6))))","(*.f64 (E.f64) (+.f64 (+.f64 (*.f64 1/2 (*.f64 im im)) 1) (*.f64 (pow.f64 im 4) 1/6)))","(+.f64 (*.f64 31/720 (*.f64 (exp.f64 1) (pow.f64 im 6))) (+.f64 (*.f64 1/2 (*.f64 (exp.f64 1) (pow.f64 im 2))) (+.f64 (*.f64 1/6 (*.f64 (exp.f64 1) (pow.f64 im 4))) (exp.f64 1))))","(fma.f64 31/720 (*.f64 (pow.f64 im 6) (E.f64)) (fma.f64 1/2 (*.f64 (*.f64 im im) (E.f64)) (fma.f64 1/6 (*.f64 (pow.f64 im 4) (E.f64)) (E.f64))))","(fma.f64 31/720 (*.f64 (pow.f64 im 6) (E.f64)) (fma.f64 1/2 (*.f64 im (*.f64 im (E.f64))) (fma.f64 1/6 (*.f64 (pow.f64 im 4) (E.f64)) (E.f64))))","(+.f64 (fma.f64 1/6 (*.f64 (pow.f64 im 4) (E.f64)) (E.f64)) (*.f64 (E.f64) (+.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (pow.f64 im 6) 31/720))))","(+.f64 (E.f64) (*.f64 (E.f64) (+.f64 (+.f64 (*.f64 1/2 (*.f64 im im)) (*.f64 (pow.f64 im 4) 1/6)) (*.f64 (pow.f64 im 6) 31/720))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(pow.f64 (exp.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (exp.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(pow.f64 (exp.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (exp.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(pow.f64 (exp.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (exp.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(pow.f64 (exp.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (exp.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(pow.f64 (exp.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (exp.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(pow.f64 (exp.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (exp.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(pow.f64 (exp.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (exp.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))","(exp.f64 (*.f64 1/2 (+.f64 (/.f64 1 (exp.f64 im)) (exp.f64 im))))","(pow.f64 (exp.f64 1/2) (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im))))","(sqrt.f64 (exp.f64 (+.f64 (exp.f64 im) (exp.f64 (neg.f64 im)))))"]],"stop":[["node limit",1]],"time":67.345947265625,"type":"simplify"},{"compiler":[[2334,1203]],"time":28.385986328125,"type":"eval"},{"alts":[["(log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))","done",28.418684773734917],["(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))","done",0.021816259768442016],["(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)","done",0.6945077637479349]],"compiler":[[9,7],[17,11],[14,12]],"count":[[137,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[134,0],"picked":[1,1]}],"min-error":[0],"time":23.64501953125,"type":"prune"},{"accuracy":[0.017910009768442016],"baseline":[0.017910009768442016],"branch":[["re",0.017910009768442016,1],["im",0.017910009768442016,1],["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))",0.017910009768442016,1],["(*.f64 1/2 (sin.f64 re))",0.017910009768442016,1],["(sin.f64 re)",0.017910009768442016,1],["(+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im))",0.017910009768442016,1]],"compiler":[[3,2],[3,2],[14,11],[6,5],[4,3],[9,7],[92,54]],"count":[[7,1]],"inputs":[["(log.f64 (pow.f64 (exp.f64 (cosh.f64 im)) (sin.f64 re)))","(log.f64 (*.f64 (pow.f64 (sqrt.f64 (exp.f64 (exp.f64 im))) (sin.f64 re)) (+.f64 1 (expm1.f64 (*.f64 1/2 (/.f64 (sin.f64 re) (exp.f64 im)))))))","(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (*.f64 1/2 (*.f64 2 (cosh.f64 im))))) 3)","(pow.f64 (cbrt.f64 (*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))) 3)","(+.f64 (*.f64 (*.f64 1/2 (exp.f64 im)) (sin.f64 re)) (*.f64 (/.f64 1/2 (exp.f64 im)) (sin.f64 re)))","(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))","(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))"]],"link":["."],"name":["math.sin on complex, real part"],"oracle":[28.71871585629674],"outputs":[["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))"]],"time":24.781982421875,"times":[["re",4.25390625],["im",4.01318359375],["(*.f64 (*.f64 1/2 (sin.f64 re)) (+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im)))",4.296875],["(*.f64 1/2 (sin.f64 re))",4.14404296875],["(sin.f64 re)",4.10498046875],["(+.f64 (exp.f64 (-.f64 0 im)) (exp.f64 im))",1.9111328125]],"type":"regimes"},{"compiler":[[13,9]],"egraph":[[1,10,17,3.4209e-5],[0,9,17,2.0209e-5]],"inputs":[["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sin.f64 re) (fma.f64 1/2 (exp.f64 im) (/.f64 1/2 (exp.f64 im))))"]],"stop":[["done",1],["saturated",1]],"time":8.4990234375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[13,9]],"remove-preprocessing":[[]],"time":9.37109375,"type":"end"}]
[{"compiler":[[8,5]],"method":["search"],"sampling":[[12,0.7980482098646462,0.09853651490993798,0.10341527522541583],[11,0.7687799381092191,0.13463405007496476,0.09658601181581616],[10,0.7258531395345926,0.19121937546879053,0.08292748499661684],[9,0.6712190322577953,0.2575607914477587,0.07122017629444599],[8,0.5931703075766563,0.35902413353323936,0.047805558890104294],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.8759765625,"type":"analyze"},{"outcomes":[["body",256,"invalid",7.052001953125,235],["body",256,"valid",248.390869140625,8256]],"time":263.4580078125,"type":"sample"},{"compiler":[[7,4]],"egraph":[[0,2,2,1.292e-6],[10,778,14,0.009721376],[9,774,14,0.008074126000000001],[8,731,14,0.0064010840000000005],[7,491,14,0.004558001000000001],[6,251,14,0.0024209590000000003],[5,114,14,0.0011085420000000001],[4,73,14,0.000608417],[3,46,14,0.000364667],[2,25,14,0.00020529199999999999],[1,15,14,0.000111667],[0,7,14,4.4709e-5]],"inputs":[["0","1"],["(-.f64 (*.f64 x y) x)","(-.f64 (*.f64 y x) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (*.f64 x y) x)","(fma.f64 x y (neg.f64 x))","(*.f64 x (+.f64 y -1))","(-.f64 (*.f64 y x) y)","(fma.f64 y x (neg.f64 y))","(fma.f64 x y (neg.f64 y))","(*.f64 y (+.f64 x -1))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":31.8271484375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[10,478,7,0.006213876],[9,476,7,0.005144917],[8,442,7,0.004042792],[7,298,7,0.002901834],[6,155,7,0.001517417],[5,72,7,0.0007266670000000001],[4,44,7,0.000401167],[3,26,7,0.000241917],[2,15,7,0.000140333],[1,9,7,8.083299999999999e-5],[0,5,7,3.2875e-5]],"inputs":[["(-.f64 (*.f64 x y) x)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 x y) x)"]],"stop":[["saturated",1]],"time":16.494873046875,"type":"simplify"},{"compiler":[[7,4]],"time":0.216064453125,"type":"eval"},{"alts":[["(-.f64 (*.f64 x y) x)","next",0.00390625]],"compiler":[[7,4],[7,4]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.971923828125,"type":"prune"},{"compiler":[[12,4]],"locations":[["(-.f64 (*.f64 x y) x)",0.00390625,true]],"time":2.72216796875,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 (*.f64 x y) x)","y","-inf",0.22607421875],["(-.f64 (*.f64 x y) x)","y","inf",0.42919921875],["(-.f64 (*.f64 x y) x)","y","0",0.275146484375],["(-.f64 (*.f64 x y) x)","x","-inf",0.31201171875],["(-.f64 (*.f64 x y) x)","x","inf",0.612060546875],["(-.f64 (*.f64 x y) x)","x","0",0.3388671875]],"time":2.287841796875,"type":"series"},{"count":[[1,38]],"egraph":[[2,1573,7,0.0166025],[1,111,7,0.0020662090000000003],[0,5,7,0.000132042]],"inputs":[["(-.f64 (*.f64 x y) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x y) x) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x y) x) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x y) x) (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (-.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 x y) x)) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x y) x)) 2) (cbrt.f64 (-.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 x y) x)) (sqrt.f64 (-.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 x 3)) (/.f64 1 (+.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x (fma.f64 x y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x x)) (/.f64 1 (fma.f64 x y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x (fma.f64 x y x))) (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x y x) (-.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x (fma.f64 x y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x x)) (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 x 3))) (neg.f64 (+.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x (fma.f64 x y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (*.f64 x x))) (neg.f64 (fma.f64 x y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x y) 3) (pow.f64 (neg.f64 x) 3)) (+.f64 (pow.f64 (*.f64 x y) 2) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (*.f64 x y) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x y) 2) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (*.f64 x y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 x y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 x y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 x y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 x y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x y) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x y)) 2) (cbrt.f64 (*.f64 x y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x y)) (sqrt.f64 (*.f64 x y)) (neg.f64 x))))))"]],"rules":[["egg-rr",38]],"stop":[["node limit",1]],"time":34.51416015625,"type":"rewrite"},{"count":[[62,44]],"egraph":[[7,451,158,0.005794958],[6,447,158,0.0047071660000000005],[5,389,158,0.003521333],[4,277,158,0.002295],[3,136,158,0.00111375],[2,66,158,0.00051125],[1,32,158,0.000238875],[0,14,158,9.5125e-5]],"inputs":[["(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 -1 (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(fma.f64 y x (neg.f64 x))"]],"stop":[["saturated",1]],"time":19.2978515625,"type":"simplify"},{"compiler":[[487,176]],"time":4.81298828125,"type":"eval"},{"alts":[["(fma.f64 y x (neg.f64 x))","next",0]],"compiler":[[7,4],[7,4]],"count":[[45,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[44,1],"picked":[1,0]}],"min-error":[0],"time":6.698974609375,"type":"prune"},{"compiler":[[11,4]],"time":2.878173828125,"type":"localize"},{"compiler":[[2,2]],"time":0.0859375,"type":"eval"},{"alts":[["(fma.f64 y x (neg.f64 x))","done",0]],"compiler":[[7,4]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.431884765625,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(-.f64 (*.f64 x y) x)",0,1]],"compiler":[[3,2],[3,2],[7,4],[12,6]],"count":[[2,1]],"inputs":[["(fma.f64 y x (neg.f64 x))","(-.f64 (*.f64 x y) x)"]],"link":["."],"name":["Data.Histogram.Bin.LogBinD:$cbinSizeN from histogram-fill-0.8.4.1"],"oracle":[0.00390625],"outputs":[["(fma.f64 y x (neg.f64 x))"]],"time":7.322998046875,"times":[["x",2.27587890625],["y",2.2109375],["(-.f64 (*.f64 x y) x)",2.3759765625]],"type":"regimes"},{"compiler":[[7,4]],"egraph":[[3,12,7,7.2499e-5],[2,11,7,5.579e-5],[1,9,7,3.8874e-5],[0,5,7,2.2541e-5]],"inputs":[["(fma.f64 y x (neg.f64 x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y x (neg.f64 x))"]],"stop":[["done",1],["saturated",1]],"time":8.197021484375,"type":"simplify"},{"time":0.01220703125,"type":"soundness"},{"compiler":[[7,4]],"remove-preprocessing":[[]],"time":7.345947265625,"type":"end"}]
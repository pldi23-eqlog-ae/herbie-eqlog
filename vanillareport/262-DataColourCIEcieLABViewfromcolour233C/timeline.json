[{"compiler":[[8,6]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":21.26904296875,"type":"analyze"},{"outcomes":[["body",256,"invalid",2.254638671875,77],["body",1024,"valid",4.369140625,58],["body",512,"valid",1.72412109375,34],["body",2048,"valid",3.736572265625,39],["body",256,"valid",244.928466796875,8125]],"time":265.55908203125,"type":"sample"},{"compiler":[[7,5]],"egraph":[[0,2,2,1.375e-6],[9,424,14,0.006813499999999999],[8,422,14,0.005549124999999999],[7,374,14,0.004243667],[6,273,14,0.002898917],[5,185,14,0.001650167],[4,114,14,0.000915334],[3,70,14,0.000489084],[2,34,14,0.000243542],[1,14,14,0.000105459],[0,8,14,4.2375e-5]],"inputs":[["0","1"],["(*.f64 200 (-.f64 x y))","(*.f64 200 (-.f64 y x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 200 (-.f64 x y))","(*.f64 200 (-.f64 y x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":29.56201171875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[11,556,7,0.0077775430000000005],[10,540,7,0.006510668000000001],[9,456,7,0.005185918],[8,383,7,0.0037687930000000003],[7,270,7,0.002567335],[6,167,7,0.0015968760000000001],[5,96,7,0.000881376],[4,67,7,0.000512126],[3,40,7,0.000316084],[2,20,7,0.000162542],[1,9,7,7.5876e-5],[0,6,7,3.2792e-5]],"inputs":[["(*.f64 200 (-.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 200 (-.f64 x y))"]],"stop":[["saturated",1]],"time":18.0048828125,"type":"simplify"},{"compiler":[[7,5]],"time":0.19189453125,"type":"eval"},{"alts":[["(*.f64 200 (-.f64 x y))","next",0.015625]],"compiler":[[7,5],[7,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.015625],"time":0.651123046875,"type":"prune"},{"compiler":[[13,6]],"locations":[["(*.f64 200 (-.f64 x y))",0.0078125,true]],"time":2.764892578125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 200 (-.f64 x y))","y","-inf",0.22998046875],["(*.f64 200 (-.f64 x y))","y","inf",0.294921875],["(*.f64 200 (-.f64 x y))","y","0",0.237060546875],["(*.f64 200 (-.f64 x y))","x","-inf",0.28515625],["(*.f64 200 (-.f64 x y))","x","inf",0.36083984375],["(*.f64 200 (-.f64 x y))","x","0",0.30810546875]],"time":1.7919921875,"type":"series"},{"count":[[1,17]],"egraph":[[2,1735,7,0.017276917],[1,131,7,0.002422792],[0,6,7,0.000180875]],"inputs":[["(*.f64 200 (-.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 200) (*.f64 (neg.f64 y) 200))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 200 x) (*.f64 200 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 200 (-.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 x 3) (pow.f64 y 3)) 200) (fma.f64 x x (*.f64 y (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 x x) (*.f64 y y)) 200) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 200 (-.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 x x (*.f64 y (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 200 (-.f64 (*.f64 x x) (*.f64 y y))) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 200 (-.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 200 (-.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 200 (-.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 200 (-.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (-.f64 x y) 2) 40000))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 200) (-.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 200 (-.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 200 (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 200 (-.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 200 (-.f64 x y))))))))"]],"rules":[["egg-rr",17]],"stop":[["node limit",1]],"time":34.4580078125,"type":"rewrite"},{"count":[[41,22]],"egraph":[[2,15,168,0.00017062500000000001],[1,13,168,0.00011587500000000001],[0,9,168,5.6459e-5]],"inputs":[["(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))"]],"stop":[["saturated",1]],"time":11.607177734375,"type":"simplify"},{"compiler":[[191,112]],"time":2.65087890625,"type":"eval"},{"alts":[["(fma.f64 -200 y (*.f64 200 x))","next",0.01171875],["(pow.f64 (cbrt.f64 (*.f64 200 (-.f64 x y))) 3)","fresh",0.7315789551372827],["(*.f64 200 (-.f64 x y))","done",0.015625],["(/.f64 (*.f64 200 (-.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 x x (*.f64 y (+.f64 x y))))","fresh",41.36739859080107]],"compiler":[[8,6],[10,8],[7,5],[20,13],[8,6],[10,8],[20,13]],"count":[[23,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[22,3],"picked":[1,1]}],"min-error":[0],"time":4.5390625,"type":"prune"},{"compiler":[[15,10]],"locations":[["(fma.f64 -200 y (*.f64 200 x))",0.01171875,true]],"time":3.656982421875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 -200 y (*.f64 200 x))","x","-inf",0.25],["(fma.f64 -200 y (*.f64 200 x))","x","inf",0.235107421875],["(fma.f64 -200 y (*.f64 200 x))","x","0",0.27294921875],["(fma.f64 -200 y (*.f64 200 x))","y","-inf",0.31787109375],["(fma.f64 -200 y (*.f64 200 x))","y","inf",0.218017578125],["(fma.f64 -200 y (*.f64 200 x))","y","0",0.451904296875]],"time":1.819091796875,"type":"series"},{"count":[[1,21]],"egraph":[[2,1513,8,0.015879583],[1,140,8,0.002145833],[0,7,8,0.000228208]],"inputs":[["(fma.f64 -200 y (*.f64 200 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 200 x) (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -200 y) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -200 y) 1) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 -200 y (*.f64 200 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -200 y (*.f64 200 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -200 y (*.f64 200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -200 y (*.f64 200 x))) (pow.f64 (cbrt.f64 (fma.f64 -200 y (*.f64 200 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -200 y (*.f64 200 x))) 2) (cbrt.f64 (fma.f64 -200 y (*.f64 200 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -200 y (*.f64 200 x))) (sqrt.f64 (fma.f64 -200 y (*.f64 200 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -200 y) 3) (pow.f64 (*.f64 200 x) 3)) (+.f64 (*.f64 (*.f64 -200 y) (*.f64 -200 y)) (-.f64 (*.f64 (*.f64 x x) 40000) (*.f64 (*.f64 -200 y) (*.f64 200 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 -200 y) (*.f64 -200 y)) (*.f64 (*.f64 x x) 40000)) (-.f64 (*.f64 -200 y) (*.f64 200 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -200 y (*.f64 200 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -200 y (*.f64 200 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -200 y (*.f64 200 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -200 y (*.f64 200 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -200 y (*.f64 200 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -200 y (*.f64 200 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -200 y (*.f64 200 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -200 y (*.f64 200 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -200 y (*.f64 200 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -200 y (*.f64 200 x))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":33.012939453125,"type":"rewrite"},{"count":[[45,24]],"egraph":[[2,15,168,0.00016916700000000002],[1,13,168,0.000114417],[0,9,168,5.5042e-5]],"inputs":[["(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 200 x (*.f64 -200 y))"]],"stop":[["saturated",1]],"time":11.85302734375,"type":"simplify"},{"compiler":[[252,189]],"time":3.873046875,"type":"eval"},{"alts":[["(fma.f64 -200 y (*.f64 200 x))","done",0.01171875],["(fma.f64 200 x (*.f64 -200 y))","next",0.00390625]],"compiler":[[8,6],[8,6],[8,6]],"count":[[28,2]],"kept":[{"done":[1,0],"fresh":[2,0],"new":[24,1],"picked":[1,1]}],"min-error":[0],"time":3.6328125,"type":"prune"},{"compiler":[[15,10]],"locations":[["(fma.f64 200 x (*.f64 -200 y))",0.00390625,true]],"time":3.75,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 200 x (*.f64 -200 y))","y","-inf",0.2080078125],["(fma.f64 200 x (*.f64 -200 y))","y","inf",0.23583984375],["(fma.f64 200 x (*.f64 -200 y))","y","0",0.15087890625],["(fma.f64 200 x (*.f64 -200 y))","x","-inf",0.294921875],["(fma.f64 200 x (*.f64 -200 y))","x","inf",0.220947265625],["(fma.f64 200 x (*.f64 -200 y))","x","0",0.214111328125]],"time":1.39697265625,"type":"series"},{"count":[[1,21]],"egraph":[[2,1513,8,0.016042625],[1,140,8,0.0021505829999999997],[0,7,8,0.000228958]],"inputs":[["(fma.f64 200 x (*.f64 -200 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -200 y) (*.f64 200 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 200 x) (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 200 x) 1) (*.f64 -200 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 200 x (*.f64 -200 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 200 x (*.f64 -200 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 200 x (*.f64 -200 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 200 x (*.f64 -200 y))) (pow.f64 (cbrt.f64 (fma.f64 200 x (*.f64 -200 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 200 x (*.f64 -200 y))) 2) (cbrt.f64 (fma.f64 200 x (*.f64 -200 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 200 x (*.f64 -200 y))) (sqrt.f64 (fma.f64 200 x (*.f64 -200 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 200 x) 3) (pow.f64 (*.f64 -200 y) 3)) (+.f64 (*.f64 (*.f64 200 x) (*.f64 200 x)) (-.f64 (*.f64 (*.f64 y y) 40000) (*.f64 (*.f64 200 x) (*.f64 -200 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 200 x) (*.f64 200 x)) (*.f64 (*.f64 y y) 40000)) (-.f64 (*.f64 200 x) (*.f64 -200 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 200 x (*.f64 -200 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 200 x (*.f64 -200 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 200 x (*.f64 -200 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 200 x (*.f64 -200 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 200 x (*.f64 -200 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 200 x (*.f64 -200 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 200 x (*.f64 -200 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 200 x (*.f64 -200 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 200 x (*.f64 -200 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 200 x (*.f64 -200 y))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":33.63916015625,"type":"rewrite"},{"count":[[45,24]],"egraph":[[2,15,168,0.0001705],[1,13,168,0.000115292],[0,9,168,5.5292e-5]],"inputs":[["(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(+.f64 (*.f64 200 x) (*.f64 -200 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 200 x)","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 -200 y) (*.f64 200 x))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(*.f64 -200 y)","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(+.f64 (*.f64 200 x) (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))"]],"stop":[["saturated",1]],"time":11.7099609375,"type":"simplify"},{"compiler":[[252,189]],"time":3.9228515625,"type":"eval"},{"alts":[["(fma.f64 -200 y (*.f64 200 x))","done",0.01171875],["(fma.f64 200 x (*.f64 -200 y))","done",0.00390625]],"compiler":[[8,6],[8,6]],"count":[[26,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[24,0],"picked":[1,1]}],"min-error":[0],"time":3.791015625,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["(*.f64 200 (-.f64 x y))",0.00390625,1],["(*.f64 200 (-.f64 x y))",0.00390625,1],["(-.f64 x y)",0.00390625,1],["(-.f64 x y)",0.00390625,1]],"compiler":[[3,2],[3,2],[7,5],[7,5],[5,3],[5,3],[45,29]],"count":[[5,1]],"inputs":[["(fma.f64 200 x (*.f64 -200 y))","(fma.f64 -200 y (*.f64 200 x))","(pow.f64 (cbrt.f64 (*.f64 200 (-.f64 x y))) 3)","(/.f64 (*.f64 200 (-.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 x x (*.f64 y (+.f64 x y))))","(*.f64 200 (-.f64 x y))"]],"link":["."],"name":["Data.Colour.CIE:cieLABView from colour-2.3.3, C"],"oracle":[41.52954614941173],"outputs":[["(fma.f64 200 x (*.f64 -200 y))"]],"time":22.2900390625,"times":[["x",3.43115234375],["y",3.441162109375],["(*.f64 200 (-.f64 x y))",3.443115234375],["(*.f64 200 (-.f64 x y))",3.654052734375],["(-.f64 x y)",3.516845703125],["(-.f64 x y)",3.529052734375]],"type":"regimes"},{"compiler":[[8,6]],"egraph":[[1,8,8,2.4333e-5],[0,7,8,1.4125e-5]],"inputs":[["(fma.f64 200 x (*.f64 -200 y))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 200 x (*.f64 -200 y))"]],"stop":[["done",1],["saturated",1]],"time":8.06201171875,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":7.9658203125,"type":"end"}]
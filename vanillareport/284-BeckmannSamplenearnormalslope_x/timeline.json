[{"compiler":[[39,31]],"method":["search"],"sampling":[[12,2.793967723814632e-12,1.8626451492097546e-13,0.9999999999970197],[11,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[10,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[9,2.6077032088936566e-12,3.725290298419509e-13,0.9999999999970198],[8,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[7,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[6,2.2351741790517056e-12,7.450580596839018e-13,0.9999999999970197],[5,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[4,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[3,1.4901161193678038e-12,1.4901161193678038e-12,0.9999999999970197],[2,0.0,2.9802322387356077e-12,0.9999999999970197],[1,0.0,2.9802322387356077e-12,0.9999999999970197],[0,0.0,2.9802322387356077e-12,0.9999999999970197]],"time":44.131103515625,"type":"analyze"},{"outcomes":[["body",256,"valid",763.759033203125,8256]],"time":771.238037109375,"type":"sample"},{"compiler":[[16,14]],"egraph":[[0,3,3,1.833e-6],[15,795,84,0.016954873999999998],[14,792,84,0.015083290999999999],[13,774,84,0.013119457],[12,727,84,0.011229082],[11,636,84,0.009372874],[10,586,84,0.0077834160000000005],[9,532,84,0.0063064160000000005],[8,491,84,0.005040249],[7,319,84,0.003836166],[6,231,84,0.002730916],[5,191,84,0.002024874],[4,155,84,0.001441291],[3,124,84,0.001005791],[2,98,84,0.000620874],[1,59,84,0.000296208],[0,30,88,0.000119708]],"inputs":[["0","1","2"],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 cosTheta_i)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) cosTheta_i)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u2)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u1)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 cosTheta_i)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))) (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 cosTheta_i)))))","(*.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))) (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 cosTheta_i)))))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) cosTheta_i)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 2 (*.f64 (PI.f64) cosTheta_i))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 2 (*.f64 (PI.f64) cosTheta_i))))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u2)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u1)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u2)))) (cos.f64 (*.f64 u1 (*.f64 2 (PI.f64)))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u2)))) (cos.f64 (*.f64 u1 (*.f64 2 (PI.f64)))))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":42.488037109375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[15,272,21,0.006097166000000001],[14,271,21,0.005417041000000001],[13,265,21,0.004741833000000001],[12,248,21,0.0040601660000000005],[11,209,21,0.003381541],[10,187,21,0.002777],[9,165,21,0.00225425],[8,149,21,0.001842458],[7,119,21,0.0014447499999999999],[6,92,21,0.001099458],[5,74,21,0.000839416],[4,60,21,0.000605],[3,49,21,0.000426167],[2,39,21,0.000271792],[1,26,21,0.00015054199999999998],[0,14,22,6.925e-5]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"stop":[["saturated",1]],"time":16.887939453125,"type":"simplify"},{"compiler":[[28,23]],"time":0.47509765625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","next",0.36471219614939776],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","fresh",11.52897205062917]],"compiler":[[15,13],[16,14],[15,13],[16,14]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.36080594614939776],"time":1.513916015625,"type":"prune"},{"compiler":[[47,23]],"locations":[["(cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",0.08473252125455484,true],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))",0.15625,true],["(*.f64 (*.f64 2 (PI.f64)) u2)",0.23828125,true],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",0.30859375,true]],"time":12.6259765625,"type":"localize"},{"count":[[4,24]],"series":[["(cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))","u2","-inf",0.160888671875],["(cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))","u2","inf",0.14794921875],["(cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))","u2","0",0.23681640625],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","-inf",0.552978515625],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","inf",0.90283203125],["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","u1","0",0.4541015625],["(*.f64 (*.f64 2 (PI.f64)) u2)","u2","-inf",0.2509765625],["(*.f64 (*.f64 2 (PI.f64)) u2)","u2","inf",0.3818359375],["(*.f64 (*.f64 2 (PI.f64)) u2)","u2","0",0.39111328125],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u2","-inf",0.484130859375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u2","inf",15.714111328125],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u2","0",1.051025390625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u1","-inf",1.424072265625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u1","inf",1.323974609375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","u1","0",1.2470703125]],"time":24.97412109375,"type":"series"},{"count":[[4,99]],"egraph":[[2,3160,40,0.024458457000000003],[1,261,40,0.004457707],[0,13,48,0.000335041]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (*.f64 2 (PI.f64)) u2)","(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))","(cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (log1p.f64 u1)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (log1p.f64 u1))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log1p.f64 u1) (pow.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (log1p.f64 u1) (pow.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 2 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 2 u2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 2 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 2 u2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 2 u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 (PI.f64) u2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 4 (pow.f64 (*.f64 (PI.f64) u2) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) u2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 4 (pow.f64 (*.f64 (PI.f64) u2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 2 u2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 2 (*.f64 (PI.f64) u2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (log1p.f64 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 u1)) (pow.f64 (log1p.f64 u1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 u1) 1/6) (cbrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log1p.f64 u1) 1/4) (pow.f64 (log1p.f64 u1) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 -1) (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 u1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 u1)) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (log1p.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 u1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log1p.f64 u1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (log1p.f64 u1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3/2 (log.f64 (log1p.f64 u1))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (log1p.f64 u1) 1/6)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/4 (log.f64 (log1p.f64 u1))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))) (fma.f64 (neg.f64 (sin.f64 (*.f64 (PI.f64) u2))) (sin.f64 (*.f64 (PI.f64) u2)) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cos.f64 1)) (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) (sqrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))))))"]],"rules":[["egg-rr",29],["egg-rr",30],["egg-rr",20],["egg-rr",20]],"stop":[["node limit",1]],"time":50.304931640625,"type":"rewrite"},{"count":[[123,110]],"egraph":[[19,7916,246,0.13827054100000002],[18,7048,246,0.125828499],[17,6265,246,0.110883541],[16,6151,246,0.098451624],[15,6009,246,0.089874415],[14,5843,246,0.081197082],[13,5619,246,0.072123124],[12,5355,246,0.063464207],[11,4726,246,0.054920831999999996],[10,4205,246,0.045737124],[9,3777,246,0.037554499],[8,3457,246,0.030359416],[7,3213,246,0.024079374],[6,2988,246,0.018566874],[5,2677,255,0.013698499000000001],[4,2168,258,0.009329207],[3,871,264,0.0051134990000000005],[2,208,266,0.001704916],[1,78,268,0.000566666],[0,31,270,0.000170833]],"inputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","1","(+.f64 1 (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))))","(+.f64 1 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))))","(+.f64 1 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (+.f64 (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (*.f64 -4/45 (*.f64 (pow.f64 u2 6) (pow.f64 (PI.f64) 6))))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","(*.f64 2 (*.f64 u2 (PI.f64)))","(*.f64 u2 (*.f64 2 (PI.f64)))","1","(+.f64 1 (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))))","(+.f64 1 (*.f64 -2 (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2))))","(fma.f64 -2 (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2)) 1)","(fma.f64 u2 (*.f64 -2 (*.f64 u2 (pow.f64 (PI.f64) 2))) 1)","(fma.f64 -2 (pow.f64 (*.f64 u2 (PI.f64)) 2) 1)","(+.f64 1 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))))","(+.f64 1 (fma.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4)) (*.f64 -2 (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2)))))","(+.f64 1 (fma.f64 -2 (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2)) (*.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4)))))","(fma.f64 -2 (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2)) (fma.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4)) 1))","(fma.f64 u2 (*.f64 -2 (*.f64 u2 (pow.f64 (PI.f64) 2))) (fma.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4)) 1))","(fma.f64 u2 (*.f64 -2 (*.f64 u2 (pow.f64 (PI.f64) 2))) (fma.f64 2/3 (pow.f64 (*.f64 u2 (PI.f64)) 4) 1))","(fma.f64 -2 (pow.f64 (*.f64 u2 (PI.f64)) 2) (fma.f64 2/3 (pow.f64 (*.f64 u2 (PI.f64)) 4) 1))","(+.f64 1 (+.f64 (*.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (+.f64 (*.f64 -2 (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))) (*.f64 -4/45 (*.f64 (pow.f64 u2 6) (pow.f64 (PI.f64) 6))))))","(+.f64 1 (fma.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4)) (fma.f64 -2 (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2)) (*.f64 -4/45 (*.f64 (pow.f64 u2 6) (pow.f64 (PI.f64) 6))))))","(+.f64 1 (fma.f64 -2 (*.f64 (*.f64 u2 u2) (pow.f64 (PI.f64) 2)) (fma.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4)) (*.f64 -4/45 (*.f64 (pow.f64 u2 6) (pow.f64 (PI.f64) 6))))))","(fma.f64 u2 (*.f64 -2 (*.f64 u2 (pow.f64 (PI.f64) 2))) (fma.f64 2/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4)) (fma.f64 (pow.f64 u2 6) (*.f64 -4/45 (pow.f64 (PI.f64) 6)) 1)))","(fma.f64 u2 (*.f64 -2 (*.f64 u2 (pow.f64 (PI.f64) 2))) (fma.f64 2/3 (pow.f64 (*.f64 u2 (PI.f64)) 4) (fma.f64 (pow.f64 u2 6) (*.f64 -4/45 (pow.f64 (PI.f64) 6)) 1)))","(fma.f64 u2 (*.f64 -2 (*.f64 u2 (pow.f64 (PI.f64) 2))) (fma.f64 -4/45 (pow.f64 (*.f64 u2 (PI.f64)) 6) (fma.f64 2/3 (pow.f64 (*.f64 u2 (PI.f64)) 4) 1)))","(fma.f64 -2 (pow.f64 (*.f64 u2 (PI.f64)) 2) (fma.f64 -4/45 (pow.f64 (*.f64 u2 (PI.f64)) 6) (fma.f64 2/3 (pow.f64 (*.f64 u2 (PI.f64)) 4) 1)))","(fma.f64 -2 (pow.f64 (*.f64 u2 (PI.f64)) 2) (fma.f64 2/3 (pow.f64 (*.f64 u2 (PI.f64)) 4) (fma.f64 -4/45 (pow.f64 (*.f64 u2 (PI.f64)) 6) 1)))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))","(cos.f64 (*.f64 2 (*.f64 u2 (PI.f64))))","(cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))"]],"stop":[["node limit",1]],"time":161.635986328125,"type":"simplify"},{"compiler":[[1752,936]],"time":18.635986328125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))","fresh",0.46162499612160207],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","next",0.4176036653599097],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (expm1.f64 (log1p.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","fresh",0.5222960949913559],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",0.6306518080187066],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",0.8477329536801603],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cos.f64 1)) (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sin.f64 1))))","fresh",0.4841234058803158],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (sqrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))","fresh",4.205953492676279],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","fresh",0.4466925919489767],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","fresh",0.5802260754544717]],"compiler":[[22,17],[18,16],[17,15],[28,23],[30,25],[32,27],[18,16],[25,16],[26,21],[22,17],[18,16],[17,15],[28,23],[30,25],[32,27],[18,16],[25,16],[26,21]],"count":[[112,9]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[110,9],"picked":[1,0]}],"min-error":[0.06766378162065376],"time":20.217041015625,"type":"prune"},{"compiler":[[67,33]],"locations":[["(sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1))))",0.15625,false],["(*.f64 (PI.f64) u2)",0.23828125,true],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))",0.30859375,true],["(pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)",0.510761279305326,true]],"time":15.992919921875,"type":"localize"},{"count":[[3,12]],"series":[["(*.f64 (PI.f64) u2)","u2","-inf",0.27587890625],["(*.f64 (PI.f64) u2)","u2","inf",0.141845703125],["(*.f64 (PI.f64) u2)","u2","0",0.14306640625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","u2","-inf",1.89501953125],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","u2","inf",1.80712890625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","u2","0",2.39990234375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","u1","-inf",0.79296875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","u1","inf",0.921875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","u1","0",0.924072265625],["(pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)","u2","-inf",0.87890625],["(pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)","u2","inf",0.569091796875],["(pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)","u2","0",1.075927734375]],"time":12.01513671875,"type":"series"},{"count":[[3,80]],"egraph":[[2,3402,30,0.02460675],[1,306,30,0.004715917],[0,15,34,0.000365792]],"inputs":[["(pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","(*.f64 (PI.f64) u2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (PI.f64) u2) (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 u2 (*.f64 2 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 u2 2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 u2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 u2 2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 u2 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 u2 (*.f64 2 (PI.f64))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) (*.f64 u2 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u2 (*.f64 2 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) u2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 u2 (*.f64 2 (PI.f64))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) (sqrt.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 u2 (*.f64 2 (PI.f64))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) (cbrt.f64 (pow.f64 (*.f64 u2 (*.f64 2 (PI.f64))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) (*.f64 (cbrt.f64 (sqrt.f64 (*.f64 u2 (*.f64 2 (PI.f64))))) (sqrt.f64 (*.f64 u2 (*.f64 2 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 u2 (*.f64 2 (PI.f64))) 2)) (cbrt.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 2) (*.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) (*.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) (*.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) (sqrt.f64 (*.f64 u2 (*.f64 2 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 u2 (*.f64 2 (PI.f64))) 1/4) (*.f64 (pow.f64 (*.f64 u2 (*.f64 2 (PI.f64))) 1/4) (sqrt.f64 (*.f64 u2 (*.f64 2 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (PI.f64)) u2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 u2 (*.f64 2 (PI.f64))) 1/4) 3) (pow.f64 (*.f64 u2 (*.f64 2 (PI.f64))) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 2) 2) (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 u2) (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 2)) (cbrt.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sqrt.f64 (*.f64 (PI.f64) u2))) (sqrt.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) (cbrt.f64 (*.f64 u2 (*.f64 2 (PI.f64))))) (cbrt.f64 (sqrt.f64 (*.f64 u2 (*.f64 2 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) (sqrt.f64 2)) (sqrt.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 2 (PI.f64)) 1) u2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 2 (PI.f64)) (pow.f64 (cbrt.f64 u2) 2)) (cbrt.f64 u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 2 (PI.f64)) (sqrt.f64 u2)) (sqrt.f64 u2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 u2 (*.f64 2 (PI.f64))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (PI.f64)) (*.f64 u2 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 u2 (*.f64 2 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 u2 (*.f64 2 (PI.f64))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))) (sqrt.f64 (log1p.f64 u1)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))) (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))) (sqrt.f64 (log1p.f64 u1))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))) (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (log1p.f64 u1) (pow.f64 (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log1p.f64 u1) 3/2) (pow.f64 (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) 3) (pow.f64 (log1p.f64 u1) 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (log1p.f64 u1) (pow.f64 (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))) (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log1p.f64 u1) 3/2) (pow.f64 (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))) 3) (pow.f64 (log1p.f64 u1) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 (log1p.f64 u1)) (cos.f64 (*.f64 u2 (*.f64 2 (PI.f64)))))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (PI.f64)) u2)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (PI.f64)) u2))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (PI.f64)) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (PI.f64) u2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (PI.f64) u2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (PI.f64) u2)) 1))))))"]],"rules":[["egg-rr",21],["egg-rr",21],["egg-rr",38]],"stop":[["node limit",1]],"time":46.659912109375,"type":"rewrite"},{"count":[[92,81]],"egraph":[[1,5,60,6.949899999999999e-5],[0,4,60,3.8333e-5]],"inputs":[["(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))"]],"method":["egg-herbie"],"outputs":[["(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))"]],"stop":[["saturated",1]],"time":11.6650390625,"type":"simplify"},{"compiler":[[1891,1075]],"time":21.305908203125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (expm1.f64 (log1p.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","fresh",0.5222960949913559],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",0.6306518080187066],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",0.8477329536801603],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cos.f64 1)) (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sin.f64 1))))","fresh",0.4841234058803158],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (sqrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))","fresh",4.205953492676279],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","next",0.4466925919489767],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) (*.f64 (PI.f64) u2))))","fresh",0.5025351591348757],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","fresh",0.5802260754544717]],"compiler":[[17,15],[28,23],[30,25],[32,27],[18,16],[25,16],[18,16],[26,21],[17,15],[28,23],[30,25],[32,27],[18,16],[25,16],[18,16],[26,21]],"count":[[120,8]],"kept":[{"done":[0,0],"fresh":[8,7],"new":[111,1],"picked":[1,0]}],"min-error":[0.06766378162065376],"time":22.58203125,"type":"prune"},{"compiler":[[83,26]],"locations":[["(*.f64 (PI.f64) u2)",0.23828125,false],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))",0.30859375,true],["(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)",0.47169877930532605,true],["(fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))",0.4772262695368841,true]],"time":16.85791015625,"type":"localize"},{"count":[[3,24]],"series":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u2","-inf",0.52099609375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u2","inf",0.527099609375],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u2","0",0.60009765625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u1","-inf",0.888916015625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u1","inf",0.960205078125],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u1","0",0.876953125],["(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)","u2","-inf",0.14599609375],["(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)","u2","inf",0.153076171875],["(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)","u2","0",0.419921875],["(fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))","u2","-inf",0.55517578125],["(fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))","u2","inf",0.576904296875],["(fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))","u2","0",4.820068359375]],"time":11.2919921875,"type":"series"},{"count":[[3,25]],"egraph":[[2,3839,7,0.02725275],[1,322,55,0.005411083],[0,16,77,0.000393]],"inputs":[["(fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))","(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x . 1)))))","((#(struct:change #<rule egg-rr> (2) ((x . 0)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (log1p.f64 u1)) (*.f64 0 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (log1p.f64 u1)) (*.f64 (sqrt.f64 (log1p.f64 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (log1p.f64 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 u1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (log1p.f64 u1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (log1p.f64 u1))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (log1p.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 u1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log1p.f64 u1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (log1p.f64 u1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log1p.f64 u1)) 1 (*.f64 (sqrt.f64 (log1p.f64 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (log1p.f64 u1)) (*.f64 0 (sqrt.f64 (log1p.f64 u1))))))))"]],"rules":[["egg-rr",23],["egg-rr",1],["egg-rr",1]],"stop":[["node limit",1]],"time":44.9580078125,"type":"rewrite"},{"count":[[49,43]],"egraph":[[3,3206,474,0.018898917],[2,620,474,0.005726333],[1,188,476,0.001466042],[0,66,526,0.000361917]],"inputs":[["1","(+.f64 1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2)))","(+.f64 1 (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/12 (pow.f64 (PI.f64) 4)) (*.f64 1/4 (pow.f64 (PI.f64) 4))) (*.f64 -1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4)) (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2))))","(+.f64 1 (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/12 (pow.f64 (PI.f64) 4)) (*.f64 1/4 (pow.f64 (PI.f64) 4))) (*.f64 -1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4)) (+.f64 (*.f64 (pow.f64 u2 6) (-.f64 (+.f64 (*.f64 -1/24 (pow.f64 (PI.f64) 6)) (*.f64 -1/360 (pow.f64 (PI.f64) 6))) (+.f64 (*.f64 1/60 (pow.f64 (PI.f64) 6)) (*.f64 1/36 (pow.f64 (PI.f64) 6))))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2)))))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))","(+.f64 (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 1/60 (pow.f64 (PI.f64) 6)) (*.f64 1/36 (pow.f64 (PI.f64) 6)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))))","(+.f64 (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 1/60 (pow.f64 (PI.f64) 6)) (*.f64 1/36 (pow.f64 (PI.f64) 6)))) (+.f64 (*.f64 (+.f64 (*.f64 -1/2520 (pow.f64 (PI.f64) 8)) (*.f64 -1/360 (pow.f64 (PI.f64) 8))) (pow.f64 u2 8)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))))","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2)))","(+.f64 1 (*.f64 (-.f64 (neg.f64 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (*.f64 u2 u2)))","(fma.f64 (*.f64 (pow.f64 (PI.f64) 2) -2) (*.f64 u2 u2) 1)","(+.f64 1 (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/12 (pow.f64 (PI.f64) 4)) (*.f64 1/4 (pow.f64 (PI.f64) 4))) (*.f64 -1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4)) (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2))))","(+.f64 1 (fma.f64 (+.f64 (*.f64 (pow.f64 (PI.f64) 4) 1/3) (*.f64 1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4) (*.f64 (-.f64 (neg.f64 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (*.f64 u2 u2))))","(+.f64 (fma.f64 (*.f64 (pow.f64 (PI.f64) 2) -2) (*.f64 u2 u2) 1) (*.f64 (*.f64 (pow.f64 (PI.f64) 4) 2/3) (pow.f64 u2 4)))","(fma.f64 (*.f64 (pow.f64 (PI.f64) 2) -2) (*.f64 u2 u2) (fma.f64 (*.f64 (pow.f64 (PI.f64) 4) 2/3) (pow.f64 u2 4) 1))","(fma.f64 (*.f64 (pow.f64 (PI.f64) 4) 2/3) (pow.f64 u2 4) (fma.f64 (*.f64 (pow.f64 (PI.f64) 2) -2) (*.f64 u2 u2) 1))","(+.f64 1 (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/12 (pow.f64 (PI.f64) 4)) (*.f64 1/4 (pow.f64 (PI.f64) 4))) (*.f64 -1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4)) (+.f64 (*.f64 (pow.f64 u2 6) (-.f64 (+.f64 (*.f64 -1/24 (pow.f64 (PI.f64) 6)) (*.f64 -1/360 (pow.f64 (PI.f64) 6))) (+.f64 (*.f64 1/60 (pow.f64 (PI.f64) 6)) (*.f64 1/36 (pow.f64 (PI.f64) 6))))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2)))))","(+.f64 1 (fma.f64 (+.f64 (*.f64 (pow.f64 (PI.f64) 4) 1/3) (*.f64 1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4) (fma.f64 (pow.f64 u2 6) (-.f64 (*.f64 (pow.f64 (PI.f64) 6) -2/45) (*.f64 (pow.f64 (PI.f64) 6) 2/45)) (*.f64 (-.f64 (neg.f64 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (*.f64 u2 u2)))))","(+.f64 1 (fma.f64 (*.f64 (pow.f64 (PI.f64) 4) 2/3) (pow.f64 u2 4) (fma.f64 (*.f64 (pow.f64 (PI.f64) 2) -2) (*.f64 u2 u2) (*.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) -4/45)))))","(+.f64 1 (fma.f64 (*.f64 (pow.f64 (PI.f64) 4) 2/3) (pow.f64 u2 4) (fma.f64 u2 (*.f64 (pow.f64 (PI.f64) 2) (*.f64 -2 u2)) (*.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) -4/45)))))","(fma.f64 (*.f64 (pow.f64 (PI.f64) 4) 2/3) (pow.f64 u2 4) (+.f64 1 (fma.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) -4/45) (*.f64 (pow.f64 (PI.f64) 2) (*.f64 -2 (*.f64 u2 u2))))))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))","(*.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2))","(+.f64 (*.f64 -1/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))","(fma.f64 -1/3 (*.f64 (pow.f64 (PI.f64) 4) (pow.f64 u2 4)) (*.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2)))","(fma.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2) (*.f64 -1/3 (*.f64 (pow.f64 (PI.f64) 4) (pow.f64 u2 4))))","(fma.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2) (*.f64 (pow.f64 (PI.f64) 4) (*.f64 -1/3 (pow.f64 u2 4))))","(+.f64 (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 1/60 (pow.f64 (PI.f64) 6)) (*.f64 1/36 (pow.f64 (PI.f64) 6)))) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2))))","(fma.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) 2/45) (fma.f64 -1/3 (*.f64 (pow.f64 (PI.f64) 4) (pow.f64 u2 4)) (*.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2))))","(fma.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) 2/45) (fma.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2) (*.f64 -1/3 (*.f64 (pow.f64 (PI.f64) 4) (pow.f64 u2 4)))))","(fma.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2) (fma.f64 (pow.f64 (PI.f64) 4) (*.f64 -1/3 (pow.f64 u2 4)) (*.f64 (pow.f64 (PI.f64) 6) (*.f64 (pow.f64 u2 6) 2/45))))","(fma.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2) (fma.f64 -1/3 (*.f64 (pow.f64 (PI.f64) 4) (pow.f64 u2 4)) (*.f64 (pow.f64 (PI.f64) 6) (*.f64 (pow.f64 u2 6) 2/45))))","(+.f64 (*.f64 (pow.f64 u2 6) (+.f64 (*.f64 1/60 (pow.f64 (PI.f64) 6)) (*.f64 1/36 (pow.f64 (PI.f64) 6)))) (+.f64 (*.f64 (+.f64 (*.f64 -1/2520 (pow.f64 (PI.f64) 8)) (*.f64 -1/360 (pow.f64 (PI.f64) 8))) (pow.f64 u2 8)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 u2 4) (pow.f64 (PI.f64) 4))) (*.f64 (pow.f64 u2 2) (pow.f64 (PI.f64) 2)))))","(fma.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) 2/45) (fma.f64 (*.f64 (pow.f64 (PI.f64) 8) -1/315) (pow.f64 u2 8) (fma.f64 -1/3 (*.f64 (pow.f64 (PI.f64) 4) (pow.f64 u2 4)) (*.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2)))))","(fma.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) 2/45) (fma.f64 (*.f64 (pow.f64 (PI.f64) 8) -1/315) (pow.f64 u2 8) (fma.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2) (*.f64 -1/3 (*.f64 (pow.f64 (PI.f64) 4) (pow.f64 u2 4))))))","(fma.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) 2/45) (fma.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2) (fma.f64 (pow.f64 (PI.f64) 8) (*.f64 (pow.f64 u2 8) -1/315) (*.f64 (pow.f64 (PI.f64) 4) (*.f64 -1/3 (pow.f64 u2 4))))))","(fma.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) 2/45) (fma.f64 (pow.f64 (PI.f64) 4) (*.f64 -1/3 (pow.f64 u2 4)) (fma.f64 (pow.f64 (PI.f64) 2) (*.f64 u2 u2) (*.f64 (pow.f64 (PI.f64) 8) (*.f64 (pow.f64 u2 8) -1/315)))))","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)","(pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2)","(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)"]],"stop":[["node limit",1]],"time":35.629150390625,"type":"simplify"},{"compiler":[[2509,997]],"time":22.02587890625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",0.6306518080187066],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) 2))))","fresh",0.4393576534726134],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","next",0.43208227661226156],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (expm1.f64 (log1p.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","fresh",0.5222960949913559],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",0.8477329536801603],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cos.f64 1)) (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sin.f64 1))))","fresh",0.4841234058803158],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (sqrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))","fresh",4.205953492676279],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) (*.f64 (PI.f64) u2))))","fresh",0.5025351591348757],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","fresh",0.5802260754544717]],"compiler":[[28,23],[27,18],[27,19],[17,15],[30,25],[32,27],[18,16],[18,16],[26,21],[28,23],[27,18],[27,19],[17,15],[30,25],[32,27],[18,16],[18,16],[26,21]],"count":[[117,9]],"kept":[{"done":[0,0],"fresh":[7,7],"new":[109,2],"picked":[1,0]}],"min-error":[0.05925751953688403],"time":25.81494140625,"type":"prune"},{"compiler":[[102,29]],"locations":[["(expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))",0.25,true],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))",0.30859375,true],["(pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)",0.47169877930532605,false],["(fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))",0.4772262695368841,true]],"time":22.126220703125,"type":"localize"},{"count":[[3,24]],"series":[["(expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))","u2","-inf",0.136962890625],["(expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))","u2","inf",0.1650390625],["(expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))","u2","0",0.14013671875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u2","-inf",0.2060546875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u2","inf",0.226806640625],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u2","0",0.2861328125],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u1","-inf",0.369873046875],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u1","inf",0.44189453125],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","u1","0",0.38916015625],["(fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))","u2","-inf",0.2001953125],["(fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))","u2","inf",0.22900390625],["(fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))","u2","0",0.2958984375]],"time":3.328857421875,"type":"series"},{"count":[[3,64]],"egraph":[[2,4087,11,0.028190623999999997],[1,367,50,0.005664416],[0,19,72,0.000437166]],"inputs":[["(fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","(expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x . 1)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (log1p.f64 u1)) (*.f64 0 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (sqrt.f64 (log1p.f64 u1)) (*.f64 (sqrt.f64 (log1p.f64 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1)))) (cbrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1)))))) (log.f64 (cbrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))) (log.f64 (sqrt.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 (log1p.f64 u1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 u1) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 u1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 (log1p.f64 u1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 u1) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (log1p.f64 u1))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 (log1p.f64 u1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 (log1p.f64 u1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 u1) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 (log1p.f64 u1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log1p.f64 u1)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (log1p.f64 u1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log1p.f64 u1)) 1 (*.f64 (sqrt.f64 (log1p.f64 u1)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (sqrt.f64 (log1p.f64 u1)) (*.f64 0 (sqrt.f64 (log1p.f64 u1))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (PI.f64) u2 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 u2) (PI.f64))) (cbrt.f64 (pow.f64 (exp.f64 u2) (PI.f64))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 u2) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 u2) (PI.f64)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 u2) (PI.f64)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (PI.f64) u2 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (PI.f64) u2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 u2 (PI.f64))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (PI.f64) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) (pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 2) (cbrt.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 u2) 2) (*.f64 (cbrt.f64 u2) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (PI.f64)) 2) (*.f64 (cbrt.f64 (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) (sqrt.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 u2) (*.f64 (sqrt.f64 u2) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (PI.f64)) (*.f64 (sqrt.f64 (PI.f64)) u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) (pow.f64 (cbrt.f64 u2) 2)) (cbrt.f64 u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (PI.f64) (sqrt.f64 u2)) (sqrt.f64 u2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 u2 (pow.f64 (cbrt.f64 (PI.f64)) 2)) (cbrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 u2 (sqrt.f64 (PI.f64))) (sqrt.f64 (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 (PI.f64) u2 1) 3) 1) (fma.f64 (fma.f64 (PI.f64) u2 1) (fma.f64 (PI.f64) u2 1) (+.f64 1 (*.f64 (fma.f64 (PI.f64) u2 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fma.f64 (PI.f64) u2 1) (fma.f64 (PI.f64) u2 1) -1) (+.f64 (fma.f64 (PI.f64) u2 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (PI.f64) u2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (PI.f64) u2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (PI.f64) u2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (PI.f64) u2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (PI.f64) u2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 u2) (PI.f64)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (PI.f64) u2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (PI.f64) u2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (PI.f64) 3) (pow.f64 u2 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 u2 3) (pow.f64 (PI.f64) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (PI.f64) u2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (PI.f64) u2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (PI.f64) u2 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (fma.f64 (PI.f64) u2 1)) (cbrt.f64 (fma.f64 (PI.f64) u2 1))) (cbrt.f64 (fma.f64 (PI.f64) u2 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (PI.f64) u2 1)) (sqrt.f64 (fma.f64 (PI.f64) u2 1)) -1)))))"]],"rules":[["egg-rr",40],["egg-rr",23],["egg-rr",1]],"stop":[["node limit",1]],"time":48.06201171875,"type":"rewrite"},{"count":[[88,72]],"egraph":[[3,1976,326,0.015092168],[2,401,326,0.0037815839999999997],[1,135,328,0.001056334],[0,50,378,0.000279459]],"inputs":[["1","(+.f64 1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2)))","(+.f64 1 (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/12 (pow.f64 (PI.f64) 4)) (*.f64 1/4 (pow.f64 (PI.f64) 4))) (*.f64 -1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4)) (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2))))","(+.f64 1 (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/12 (pow.f64 (PI.f64) 4)) (*.f64 1/4 (pow.f64 (PI.f64) 4))) (*.f64 -1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4)) (+.f64 (*.f64 (pow.f64 u2 6) (-.f64 (+.f64 (*.f64 -1/24 (pow.f64 (PI.f64) 6)) (*.f64 -1/360 (pow.f64 (PI.f64) 6))) (+.f64 (*.f64 1/60 (pow.f64 (PI.f64) 6)) (*.f64 1/36 (pow.f64 (PI.f64) 6))))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2)))))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))","(*.f64 u2 (PI.f64))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2)))","(+.f64 1 (*.f64 (-.f64 (neg.f64 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (*.f64 u2 u2)))","(fma.f64 (*.f64 (pow.f64 (PI.f64) 2) -2) (*.f64 u2 u2) 1)","(+.f64 1 (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/12 (pow.f64 (PI.f64) 4)) (*.f64 1/4 (pow.f64 (PI.f64) 4))) (*.f64 -1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4)) (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2))))","(+.f64 1 (fma.f64 (+.f64 (*.f64 (pow.f64 (PI.f64) 4) 1/3) (*.f64 1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4) (*.f64 (-.f64 (neg.f64 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (*.f64 u2 u2))))","(+.f64 (fma.f64 (*.f64 (pow.f64 (PI.f64) 2) -2) (*.f64 u2 u2) 1) (*.f64 (*.f64 (pow.f64 (PI.f64) 4) 2/3) (pow.f64 u2 4)))","(fma.f64 (*.f64 (pow.f64 (PI.f64) 2) -2) (*.f64 u2 u2) (fma.f64 (*.f64 (pow.f64 (PI.f64) 4) 2/3) (pow.f64 u2 4) 1))","(+.f64 1 (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/12 (pow.f64 (PI.f64) 4)) (*.f64 1/4 (pow.f64 (PI.f64) 4))) (*.f64 -1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4)) (+.f64 (*.f64 (pow.f64 u2 6) (-.f64 (+.f64 (*.f64 -1/24 (pow.f64 (PI.f64) 6)) (*.f64 -1/360 (pow.f64 (PI.f64) 6))) (+.f64 (*.f64 1/60 (pow.f64 (PI.f64) 6)) (*.f64 1/36 (pow.f64 (PI.f64) 6))))) (*.f64 (-.f64 (*.f64 -1 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (pow.f64 u2 2)))))","(+.f64 1 (fma.f64 (+.f64 (*.f64 (pow.f64 (PI.f64) 4) 1/3) (*.f64 1/3 (pow.f64 (PI.f64) 4))) (pow.f64 u2 4) (fma.f64 (pow.f64 u2 6) (-.f64 (*.f64 (pow.f64 (PI.f64) 6) -2/45) (*.f64 (pow.f64 (PI.f64) 6) 2/45)) (*.f64 (-.f64 (neg.f64 (pow.f64 (PI.f64) 2)) (pow.f64 (PI.f64) 2)) (*.f64 u2 u2)))))","(+.f64 1 (fma.f64 (*.f64 (pow.f64 (PI.f64) 4) 2/3) (pow.f64 u2 4) (fma.f64 (pow.f64 u2 6) (*.f64 (pow.f64 (PI.f64) 6) -4/45) (*.f64 (*.f64 (pow.f64 (PI.f64) 2) -2) (*.f64 u2 u2)))))","(+.f64 (fma.f64 (*.f64 (pow.f64 (PI.f64) 2) -2) (*.f64 u2 u2) 1) (fma.f64 (*.f64 (pow.f64 (PI.f64) 4) 2/3) (pow.f64 u2 4) (*.f64 (pow.f64 (PI.f64) 6) (*.f64 -4/45 (pow.f64 u2 6)))))","(+.f64 (fma.f64 (*.f64 (pow.f64 (PI.f64) 2) -2) (*.f64 u2 u2) 1) (fma.f64 (*.f64 (pow.f64 (PI.f64) 4) 2/3) (pow.f64 u2 4) (*.f64 (pow.f64 (PI.f64) 6) (*.f64 (pow.f64 u2 6) -4/45))))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 u2 (PI.f64))) 2) (pow.f64 (sin.f64 (*.f64 u2 (PI.f64))) 2))","(-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)","(*.f64 u2 (PI.f64))","(*.f64 (PI.f64) u2)"]],"stop":[["node limit",1]],"time":29.89013671875,"type":"simplify"},{"compiler":[[1918,820]],"time":17.635986328125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (pow.f64 (cbrt.f64 (PI.f64)) 2) (*.f64 (cbrt.f64 (PI.f64)) u2))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","fresh",0.46573348694083655],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) (*.f64 (PI.f64) u2))))","fresh",0.5025351591348757],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","fresh",0.5802260754544717],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (pow.f64 (cbrt.f64 u2) 2) (*.f64 (cbrt.f64 u2) (PI.f64)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","fresh",0.4468981178324275],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","done",0.43208227661226156],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (expm1.f64 (log1p.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","fresh",0.5222960949913559],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",0.6306518080187066],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","fresh",0.8477329536801603],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cos.f64 1)) (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sin.f64 1))))","fresh",0.4841234058803158],["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (sqrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))","fresh",4.205953492676279]],"compiler":[[31,22],[18,16],[26,21],[31,22],[27,19],[17,15],[28,23],[30,25],[32,27],[18,16]],"count":[[92,10]],"kept":[{"done":[0,0],"fresh":[8,7],"new":[83,2],"picked":[1,1]}],"min-error":[0.05432379138909578],"time":16.06884765625,"type":"prune"},{"accuracy":[0.3647121961493977],"baseline":[0.36471219614939776],"branch":[["cosTheta_i",0.36471219614939776,1],["u1",0.36471219614939776,1],["u2",0.36471219614939776,1],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",0.3647121961493977,1],["(sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1))))",0.36471219614939776,1],["(neg.f64 (log.f64 (-.f64 1 u1)))",0.36471219614939776,1],["(log.f64 (-.f64 1 u1))",0.3647121961493977,1],["(-.f64 1 u1)",0.3647121961493977,1],["(cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",0.3647121961493977,1],["(*.f64 (*.f64 2 (PI.f64)) u2)",0.36471219614939776,1]],"compiler":[[4,3],[4,3],[4,3],[16,14],[9,8],[8,7],[7,6],[6,5],[9,8],[8,7],[336,160]],"count":[[16,1]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (pow.f64 (cbrt.f64 (PI.f64)) 2) (*.f64 (cbrt.f64 (PI.f64)) u2))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (pow.f64 (cbrt.f64 u2) 2) (*.f64 (cbrt.f64 u2) (PI.f64)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) 2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (expm1.f64 (log1p.f64 (*.f64 (PI.f64) u2)))) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (pow.f64 (sqrt.f64 2) 2) (*.f64 (PI.f64) u2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (-.f64 (pow.f64 (cos.f64 (*.f64 (PI.f64) u2)) 2) (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (pow.f64 (sqrt.f64 (*.f64 2 (*.f64 (PI.f64) u2))) 2)))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (expm1.f64 (log1p.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (+.f64 (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (cos.f64 1)) (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 2 (*.f64 (PI.f64) u2))))) (sin.f64 1))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (pow.f64 (sqrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (fma.f64 (cos.f64 (*.f64 (PI.f64) u2)) (cos.f64 (*.f64 (PI.f64) u2)) (neg.f64 (pow.f64 (sin.f64 (*.f64 (PI.f64) u2)) 2))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (*.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2)))) 2) (cbrt.f64 (cos.f64 (*.f64 2 (*.f64 (PI.f64) u2))))))","(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))","(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"link":["."],"name":["Beckmann Sample, near normal, slope_x"],"oracle":[14.567070686776953],"outputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"time":69.03515625,"times":[["cosTheta_i",6.177978515625],["u1",6.13916015625],["u2",5.836181640625],["(*.f64 (sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))",7.3798828125],["(sqrt.f64 (neg.f64 (log.f64 (-.f64 1 u1))))",6.224853515625],["(neg.f64 (log.f64 (-.f64 1 u1)))",6.2490234375],["(log.f64 (-.f64 1 u1))",6.032958984375],["(-.f64 1 u1)",6.14208984375],["(cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2))",6.425048828125],["(*.f64 (*.f64 2 (PI.f64)) u2)",6.222900390625]],"type":"regimes"},{"compiler":[[15,13]],"egraph":[[3,28,21,0.000138458],[2,26,21,0.000103958],[1,22,21,6.958299999999999e-5],[0,13,21,3.6666e-5]],"inputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 (neg.f64 (log1p.f64 (neg.f64 u1)))) (cos.f64 (*.f64 (*.f64 2 (PI.f64)) u2)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.546875,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[15,13]],"remove-preprocessing":[[]],"time":9.648193359375,"type":"end"}]
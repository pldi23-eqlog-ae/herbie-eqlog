[{"compiler":[[8,5]],"method":["search"],"sampling":[[12,0.7024385221302509,0.11804869608022273,0.17951278178952634],[11,0.6868287771940231,0.1463413587771356,0.16682986402884126],[10,0.6556092873215675,0.22243886534124613,0.12195184733718634],[9,0.6243897974491119,0.2731705363839865,0.10243966616690159],[8,0.5619508177042007,0.39024362340569496,0.047805558890104294],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":24.51416015625,"type":"analyze"},{"outcomes":[["body",256,"invalid",24.861328125,803],["body",256,"valid",259.071533203125,8256]],"time":291.843994140625,"type":"sample"},{"compiler":[[7,4]],"egraph":[[0,2,2,1.417e-6],[1,11,14,7.370799999999999e-5],[0,7,14,4.1166e-5]],"inputs":[["0","1"],["(/.f64 x (*.f64 y y))","(/.f64 y (*.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 x (*.f64 y y))","(/.f64 y (*.f64 x x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":23.031982421875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[1,7,7,5.4999e-5],[0,5,7,2.9958e-5]],"inputs":[["(/.f64 x (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (*.f64 y y))"]],"stop":[["saturated",1]],"time":10.14501953125,"type":"simplify"},{"compiler":[[7,4]],"time":0.171875,"type":"eval"},{"alts":[["(/.f64 x (*.f64 y y))","next",8.857365164819884]],"compiler":[[7,4],[7,4]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[8.857365164819884],"time":0.652099609375,"type":"prune"},{"compiler":[[12,4]],"locations":[["(/.f64 x (*.f64 y y))",8.629744002945102,true]],"time":2.697998046875,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 x (*.f64 y y))","y","-inf",0.1689453125],["(/.f64 x (*.f64 y y))","y","inf",0.32177734375],["(/.f64 x (*.f64 y y))","y","0",0.68603515625],["(/.f64 x (*.f64 y y))","x","-inf",0.382080078125],["(/.f64 x (*.f64 y y))","x","inf",0.639892578125],["(/.f64 x (*.f64 y y))","x","0",0.66796875]],"time":2.946044921875,"type":"series"},{"count":[[1,31]],"egraph":[[2,1449,7,0.015653583999999998],[1,106,7,0.001987917],[0,5,7,0.000131167]],"inputs":[["(/.f64 x (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 x (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 2) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) y) (/.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (*.f64 y (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) y) (/.f64 (cbrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 y 4))) (/.f64 x (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 (pow.f64 y 4))) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (pow.f64 y 4))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 x) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (*.f64 y (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (*.f64 x x) (pow.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (*.f64 y y))))))))"]],"rules":[["egg-rr",31]],"stop":[["node limit",1]],"time":33.137939453125,"type":"rewrite"},{"count":[[55,33]],"egraph":[[21,6929,168,0.10489712200000001],[20,6895,168,0.089354289],[19,6823,168,0.079057539],[18,6545,168,0.070268581],[17,6257,168,0.062269081000000004],[16,5863,168,0.054737998],[15,5028,168,0.047284665000000003],[14,4340,168,0.039215165],[13,3772,168,0.032350582],[12,3291,168,0.026440915000000002],[11,2898,168,0.020819915],[10,2601,168,0.01622554],[9,2393,168,0.012588123],[8,2209,168,0.009591207],[7,2043,168,0.007041499],[6,834,168,0.004341374],[5,224,168,0.001825166],[4,75,168,0.000724874],[3,35,168,0.000358749],[2,20,168,0.000209791],[1,11,168,0.000121416],[0,6,168,5.1125e-5]],"inputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))"]],"stop":[["node limit",1]],"time":123.26708984375,"type":"simplify"},{"compiler":[[294,126]],"time":3.519775390625,"type":"eval"},{"alts":[["(pow.f64 (/.f64 (sqrt.f64 x) y) 2)","fresh",33.72663886722131],["(*.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (pow.f64 y -2)))","fresh",9.197583857687851],["(pow.f64 (/.f64 (*.f64 y y) x) -1)","fresh",9.044535623642329],["(/.f64 x (*.f64 y y))","done",8.857365164819884],["(*.f64 x (pow.f64 y -2))","fresh",8.920751142782125],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) y) (/.f64 (cbrt.f64 x) y))","fresh",0.5490190430532607],["(*.f64 (/.f64 1 y) (/.f64 x y))","next",0.25619125976844204]],"compiler":[[8,6],[13,9],[9,6],[7,4],[7,5],[13,8],[9,6],[8,6],[13,9],[9,6],[7,5],[13,8],[9,6]],"count":[[34,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[33,6],"picked":[1,1]}],"min-error":[0.03125],"time":6.87109375,"type":"prune"},{"compiler":[[18,9]],"locations":[["(*.f64 (/.f64 1 y) (/.f64 x y))",0.25619125976844204,true]],"time":4.241943359375,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (/.f64 1 y) (/.f64 x y))","x","-inf",0.15087890625],["(*.f64 (/.f64 1 y) (/.f64 x y))","x","inf",0.14990234375],["(*.f64 (/.f64 1 y) (/.f64 x y))","x","0",0.16796875],["(*.f64 (/.f64 1 y) (/.f64 x y))","y","-inf",0.155029296875],["(*.f64 (/.f64 1 y) (/.f64 x y))","y","inf",0.158935546875],["(*.f64 (/.f64 1 y) (/.f64 x y))","y","0",0.218994140625]],"time":1.072021484375,"type":"series"},{"count":[[1,43]],"egraph":[[2,1909,7,0.018198334],[1,145,7,0.002601251],[0,7,7,0.000185667]],"inputs":[["(*.f64 (/.f64 1 y) (/.f64 x y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (pow.f64 y -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 y (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 y x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 y y) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 y) (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 y (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (/.f64 y (cbrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 (*.f64 y y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 x y)) (/.f64 y (sqrt.f64 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 x) (/.f64 (*.f64 y y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (neg.f64 y) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (/.f64 y x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (neg.f64 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 x y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) 1) (*.f64 (neg.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 x)) (*.f64 (neg.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x -1) (*.f64 y (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) -1) (*.f64 (neg.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 x y) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (/.f64 x y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 1 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 y) (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x y) -1) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 y -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (pow.f64 y -2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (pow.f64 y -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 x) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (pow.f64 y -2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 x (pow.f64 y -2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (pow.f64 y -2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 x y) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (/.f64 (pow.f64 y -2) y) (pow.f64 (/.f64 x y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 3) (/.f64 (pow.f64 y -2) y)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (pow.f64 y -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (pow.f64 y -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (pow.f64 y -2))))))))"]],"rules":[["egg-rr",43]],"stop":[["node limit",1]],"time":35.9111328125,"type":"rewrite"},{"count":[[67,44]],"egraph":[[21,6929,168,0.10475716600000001],[20,6895,168,0.08946987400000002],[19,6823,168,0.07915541600000002],[18,6545,168,0.07036254100000001],[17,6257,168,0.06235387400000001],[16,5863,168,0.05484762400000001],[15,5028,168,0.04734154100000001],[14,4340,168,0.039281166000000006],[13,3772,168,0.032431124000000006],[12,3291,168,0.026505416000000004],[11,2898,168,0.020942624000000003],[10,2601,168,0.016294291000000002],[9,2393,168,0.012622458000000001],[8,2209,168,0.009611166],[7,2043,168,0.007009499000000001],[6,834,168,0.004324332],[5,224,168,0.001819373],[4,75,168,0.000716832],[3,35,168,0.000362041],[2,20,168,0.000213499],[1,11,168,0.000125208],[0,6,168,5.1208e-5]],"inputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))"]],"stop":[["node limit",1]],"time":123.4990234375,"type":"simplify"},{"compiler":[[362,179]],"time":4.77880859375,"type":"eval"},{"alts":[["(/.f64 1 (/.f64 y (/.f64 x y)))","fresh",0.4205879881277706],["(/.f64 1 (*.f64 (/.f64 y x) y))","fresh",0.3698067381277706],["(pow.f64 (/.f64 (sqrt.f64 x) y) 2)","fresh",33.72663886722131],["(*.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (pow.f64 y -2)))","fresh",9.197583857687851],["(*.f64 x (pow.f64 y -2))","fresh",8.920751142782125],["(/.f64 (/.f64 x y) y)","next",0.17578125],["(/.f64 (/.f64 1 y) (/.f64 y x))","fresh",0.224941259768442]],"compiler":[[9,6],[9,6],[8,6],[13,9],[7,5],[7,4],[9,6],[9,6],[9,6],[8,6],[13,9],[7,5],[7,4],[9,6]],"count":[[51,7]],"kept":[{"done":[1,0],"fresh":[5,2],"new":[44,5],"picked":[1,0]}],"min-error":[0],"time":9.701171875,"type":"prune"},{"compiler":[[12,4]],"locations":[["(/.f64 (/.f64 x y) y)",0.17578125,true]],"time":2.6708984375,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (/.f64 x y) y)","y","-inf",0.14306640625],["(/.f64 (/.f64 x y) y)","y","inf",0.143798828125],["(/.f64 (/.f64 x y) y)","y","0",0.166015625],["(/.f64 (/.f64 x y) y)","x","-inf",0.14697265625],["(/.f64 (/.f64 x y) y)","x","inf",0.155029296875],["(/.f64 (/.f64 x y) y)","x","0",0.203125]],"time":1.029052734375,"type":"series"},{"count":[[1,36]],"egraph":[[2,1585,7,0.017016333],[1,109,7,0.002062333],[0,5,7,0.000124416]],"inputs":[["(/.f64 (/.f64 x y) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 x (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (/.f64 1 y) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) (pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 2) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (cbrt.f64 (/.f64 x y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) y) (/.f64 (sqrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x y)) (*.f64 (sqrt.f64 (/.f64 x y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 x) y) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) y) (/.f64 (cbrt.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 (/.f64 1 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) 1) (/.f64 (cbrt.f64 (/.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 x y)) 1) (/.f64 (sqrt.f64 (/.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (/.f64 (/.f64 1 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 y) 2)) (/.f64 (/.f64 x y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 x y)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (/.f64 x y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 y)) (/.f64 (/.f64 1 y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (/.f64 x y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (/.f64 x y)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 x) y) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (/.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 x y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (*.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (*.f64 y y))))))))"]],"rules":[["egg-rr",36]],"stop":[["node limit",1]],"time":34.90185546875,"type":"rewrite"},{"count":[[60,38]],"egraph":[[21,6929,168,0.104875544],[20,6895,168,0.089462544],[19,6823,168,0.07921471100000001],[18,6545,168,0.070357211],[17,6257,168,0.062362877],[16,5863,168,0.054855167999999996],[15,5028,168,0.04735529299999999],[14,4340,168,0.03926945899999999],[13,3772,168,0.032408125999999995],[12,3291,168,0.026536459],[11,2898,168,0.020987209],[10,2601,168,0.016348501],[9,2393,168,0.012667001],[8,2209,168,0.009638001],[7,2043,168,0.007066793],[6,834,168,0.004360876],[5,224,168,0.001827792],[4,75,168,0.000718126],[3,35,168,0.000363001],[2,20,168,0.000214167],[1,11,168,0.000126084],[0,6,168,5.1667e-5]],"inputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))"]],"stop":[["node limit",1]],"time":122.716064453125,"type":"simplify"},{"compiler":[[377,151]],"time":4.087158203125,"type":"eval"},{"alts":[["(pow.f64 (/.f64 (sqrt.f64 x) y) 2)","fresh",33.72663886722131],["(/.f64 1 (/.f64 y (/.f64 x y)))","fresh",0.4205879881277706],["(pow.f64 (*.f64 y (/.f64 y x)) -1)","fresh",0.3698067381277706],["(/.f64 (/.f64 1 y) (/.f64 y x))","next",0.224941259768442],["(*.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (pow.f64 y -2)))","fresh",9.197583857687851],["(*.f64 x (pow.f64 y -2))","fresh",8.920751142782125],["(/.f64 (/.f64 x y) y)","done",0.17578125]],"compiler":[[8,6],[9,6],[9,6],[9,6],[13,9],[7,5],[7,4],[8,6],[9,6],[9,6],[9,6],[13,9],[7,5]],"count":[[45,7]],"kept":[{"done":[0,0],"fresh":[6,4],"new":[38,2],"picked":[1,1]}],"min-error":[0],"time":8.169921875,"type":"prune"},{"compiler":[[18,9]],"locations":[["(/.f64 (/.f64 1 y) (/.f64 y x))",0.224941259768442,true]],"time":4.076904296875,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (/.f64 1 y) (/.f64 y x))","x","-inf",0.157958984375],["(/.f64 (/.f64 1 y) (/.f64 y x))","x","inf",0.151123046875],["(/.f64 (/.f64 1 y) (/.f64 y x))","x","0",0.138916015625],["(/.f64 (/.f64 1 y) (/.f64 y x))","y","-inf",0.15087890625],["(/.f64 (/.f64 1 y) (/.f64 y x))","y","inf",0.177001953125],["(/.f64 (/.f64 1 y) (/.f64 y x))","y","0",0.18603515625]],"time":1.047119140625,"type":"series"},{"count":[[1,40]],"egraph":[[2,2156,7,0.018886375],[1,152,7,0.002859],[0,7,10,0.000192208]],"inputs":[["(/.f64 (/.f64 1 y) (/.f64 y x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (pow.f64 y -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (pow.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (pow.f64 y -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (pow.f64 y -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (pow.f64 y -2))) (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 y -2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (pow.f64 y -2))) 2) (cbrt.f64 (*.f64 x (pow.f64 y -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 y -2)) (*.f64 (/.f64 1 (cbrt.f64 y)) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 y) (sqrt.f64 x)) (*.f64 (/.f64 1 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/2) (*.f64 (pow.f64 y -1/2) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 y) (/.f64 1 (/.f64 (neg.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 y -2)) 1) (/.f64 (/.f64 1 (cbrt.f64 y)) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y -1/2) 1) (/.f64 (pow.f64 y -1/2) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 y -2)) y) (/.f64 (/.f64 1 (cbrt.f64 y)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y -1/2) y) (/.f64 (pow.f64 y -1/2) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 y x)) 2)) (/.f64 (/.f64 1 y) (cbrt.f64 (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 y -2)) (pow.f64 (cbrt.f64 (/.f64 y x)) 2)) (cbrt.f64 (*.f64 x (pow.f64 y -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 y -1/2) (pow.f64 (cbrt.f64 (/.f64 y x)) 2)) (/.f64 (pow.f64 y -1/2) (cbrt.f64 (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (/.f64 y x))) (/.f64 (/.f64 1 y) (sqrt.f64 (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 y -2)) (sqrt.f64 (/.f64 y x))) (/.f64 (/.f64 1 (cbrt.f64 y)) (sqrt.f64 (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 y) 1) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 y) (neg.f64 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -2) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 y -2) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (pow.f64 y -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (pow.f64 y -2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (pow.f64 y -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 1 y) (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (/.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 1 y) (/.f64 (neg.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (pow.f64 y -2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (pow.f64 y -2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (pow.f64 y -2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (/.f64 (pow.f64 y -2) y) (pow.f64 (/.f64 y x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (pow.f64 y -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (pow.f64 y -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (pow.f64 y -2))))))))"]],"rules":[["egg-rr",40]],"stop":[["node limit",1]],"time":36.31396484375,"type":"rewrite"},{"count":[[64,42]],"egraph":[[21,6929,168,0.10472475099999999],[20,6895,168,0.08933583399999999],[19,6823,168,0.07912750099999999],[18,6545,168,0.070221918],[17,6257,168,0.06218246],[16,5863,168,0.054671126],[15,5028,168,0.047236501],[14,4340,168,0.039187751],[13,3772,168,0.032315959],[12,3291,168,0.026391334],[11,2898,168,0.02082525],[10,2601,168,0.016205208],[9,2393,168,0.012566625],[8,2209,168,0.00956225],[7,2043,168,0.007009042],[6,834,168,0.00431675],[5,224,168,0.001814667],[4,75,168,0.000722625],[3,35,168,0.000359542],[2,20,168,0.000210584],[1,11,168,0.000122875],[0,6,168,5.1292e-5]],"inputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))","(/.f64 x (pow.f64 y 2))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))"]],"stop":[["node limit",1]],"time":122.763916015625,"type":"simplify"},{"compiler":[[429,264]],"time":5.802001953125,"type":"eval"},{"alts":[["(*.f64 (/.f64 (cbrt.f64 (pow.f64 y -2)) 1) (/.f64 (/.f64 1 (cbrt.f64 y)) (/.f64 y x)))","fresh",9.027253705129779],["(/.f64 1 (/.f64 y (/.f64 x y)))","fresh",0.4205879881277706],["(pow.f64 (/.f64 (sqrt.f64 x) y) 2)","fresh",33.72663886722131],["(pow.f64 (*.f64 y (/.f64 y x)) -1)","fresh",0.3698067381277706],["(/.f64 (/.f64 1 y) (/.f64 y x))","done",0.224941259768442],["(*.f64 x (pow.f64 y -2))","fresh",8.920751142782125],["(/.f64 (/.f64 x y) y)","done",0.17578125]],"compiler":[[17,13],[9,6],[8,6],[9,6],[9,6],[7,5],[7,4]],"count":[[49,7]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[42,2],"picked":[1,1]}],"min-error":[0],"time":7.636962890625,"type":"prune"},{"accuracy":[0.17578125],"baseline":[0.17578125],"branch":[["x",0.17578125,1],["y",0.17578125,1],["(/.f64 x (*.f64 y y))",0.17578125,1],["(*.f64 y y)",0.17578125,1],["(*.f64 y y)",0.17578125,1]],"compiler":[[3,2],[3,2],[7,4],[5,3],[5,3],[119,61]],"count":[[16,1]],"inputs":[["(*.f64 (/.f64 (cbrt.f64 (pow.f64 y -2)) 1) (/.f64 (/.f64 1 (cbrt.f64 y)) (/.f64 y x)))","(*.f64 x (pow.f64 y -2))","(pow.f64 (/.f64 (sqrt.f64 x) y) 2)","(pow.f64 (*.f64 y (/.f64 y x)) -1)","(/.f64 1 (/.f64 y (/.f64 x y)))","(/.f64 1 (*.f64 (/.f64 y x) y))","(pow.f64 (/.f64 (sqrt.f64 x) y) 2)","(/.f64 (/.f64 x y) y)","(/.f64 (/.f64 1 y) (/.f64 y x))","(pow.f64 (/.f64 (sqrt.f64 x) y) 2)","(*.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (pow.f64 y -2)))","(pow.f64 (/.f64 (*.f64 y y) x) -1)","(*.f64 x (pow.f64 y -2))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) y) (/.f64 (cbrt.f64 x) y))","(*.f64 (/.f64 1 y) (/.f64 x y))","(/.f64 x (*.f64 y y))"]],"link":["."],"name":["Physics.ForceLayout:coulombForce from force-layout-0.4.0.2"],"oracle":[38.23172019485727],"outputs":[["(/.f64 (/.f64 x y) y)"]],"time":29.251220703125,"times":[["x",5.85888671875],["y",6.0830078125],["(/.f64 x (*.f64 y y))",4.43701171875],["(*.f64 y y)",5.094970703125],["(*.f64 y y)",5.31884765625]],"type":"regimes"},{"compiler":[[7,4]],"egraph":[[0,5,7,9.5e-6]],"inputs":[["(/.f64 (/.f64 x y) y)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (/.f64 x y) y)"]],"stop":[["fuel",1],["saturated",1]],"time":8.15380859375,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[7,4]],"remove-preprocessing":[[]],"time":6.77197265625,"type":"end"}]
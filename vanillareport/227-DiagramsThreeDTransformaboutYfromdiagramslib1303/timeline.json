[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[11,0.6552891655992426,0.34324670579007943,0.0014641286106780171],[10,0.5616764276564936,0.43685944373282837,0.0014641286106780171],[9,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[8,0.37445095177099574,0.6240849196183262,0.0014641286106780171],[7,0.2496339678473305,0.7489019035419915,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":107.65380859375,"type":"analyze"},{"outcomes":[["body",1024,"valid",512.483642578125,1993],["body",512,"valid",160.026123046875,1076],["body",2048,"valid",4.51318359375,8],["body",256,"valid",370.14697265625,5179]],"time":1056.044189453125,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,2.167e-6],[2,50,48,0.000365083],[1,38,48,0.000229958],[0,22,48,0.000100875]],"inputs":[["0","1","2"],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 y (cos.f64 x)) (*.f64 z (sin.f64 x)))","(+.f64 (*.f64 z (cos.f64 y)) (*.f64 x (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 z)) (*.f64 y (sin.f64 z)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 y (cos.f64 x)) (*.f64 z (sin.f64 x)))","(fma.f64 y (cos.f64 x) (*.f64 z (sin.f64 x)))","(+.f64 (*.f64 z (cos.f64 y)) (*.f64 x (sin.f64 y)))","(fma.f64 z (cos.f64 y) (*.f64 x (sin.f64 y)))","(fma.f64 x (sin.f64 y) (*.f64 (cos.f64 y) z))","(+.f64 (*.f64 x (cos.f64 z)) (*.f64 y (sin.f64 z)))","(fma.f64 x (cos.f64 z) (*.f64 y (sin.f64 z)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.301025390625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[2,16,12,0.000149666],[1,13,12,0.000100874],[0,9,12,4.9291e-5]],"inputs":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","(fma.f64 x (cos.f64 y) (*.f64 z (sin.f64 y)))"]],"stop":[["saturated",1]],"time":11.0830078125,"type":"simplify"},{"compiler":[[20,9]],"time":0.32177734375,"type":"eval"},{"alts":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))","next",0.109375]],"compiler":[[12,8],[12,8]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.109375],"time":0.843017578125,"type":"prune"},{"compiler":[[27,8]],"locations":[["(cos.f64 y)",0.015625,true],["(sin.f64 y)",0.015625,true],["(*.f64 z (sin.f64 y))",0.09375,true],["(*.f64 x (cos.f64 y))",0.109375,true]],"time":6.760986328125,"type":"localize"},{"count":[[4,36]],"series":[["(cos.f64 y)","y","-inf",0.130859375],["(cos.f64 y)","y","inf",0.14892578125],["(cos.f64 y)","y","0",0.178955078125],["(sin.f64 y)","y","-inf",0.15087890625],["(sin.f64 y)","y","inf",0.135009765625],["(sin.f64 y)","y","0",0.203125],["(*.f64 z (sin.f64 y))","y","-inf",0.31201171875],["(*.f64 z (sin.f64 y))","y","inf",0.288818359375],["(*.f64 z (sin.f64 y))","y","0",0.3349609375],["(*.f64 z (sin.f64 y))","z","-inf",0.552978515625],["(*.f64 z (sin.f64 y))","z","inf",0.322998046875],["(*.f64 z (sin.f64 y))","z","0",0.595947265625],["(*.f64 x (cos.f64 y))","y","-inf",0.258056640625],["(*.f64 x (cos.f64 y))","y","inf",0.30517578125],["(*.f64 x (cos.f64 y))","y","0",0.5078125],["(*.f64 x (cos.f64 y))","x","-inf",0.2919921875],["(*.f64 x (cos.f64 y))","x","inf",0.39794921875],["(*.f64 x (cos.f64 y))","x","0",0.718017578125]],"time":6.0322265625,"type":"series"},{"count":[[4,58]],"egraph":[[2,1836,18,0.017773458],[1,155,18,0.002406917],[0,8,18,0.000173917]],"inputs":[["(*.f64 x (cos.f64 y))","(*.f64 z (sin.f64 y))","(sin.f64 y)","(cos.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (cos.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (cos.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 z (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (sin.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 z 3) (pow.f64 (sin.f64 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 y) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (sin.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))"]],"rules":[["egg-rr",16],["egg-rr",16],["egg-rr",13],["egg-rr",13]],"stop":[["node limit",1]],"time":40.509765625,"type":"rewrite"},{"count":[[94,87]],"egraph":[[13,7679,325,0.08937487399999999],[12,6974,325,0.07927008299999999],[11,6377,325,0.067371249],[10,5865,325,0.056833083],[9,5442,325,0.046786624],[8,3564,325,0.037574833],[7,3350,325,0.028503833],[6,3133,325,0.022543916],[5,2995,325,0.017194],[4,2142,325,0.011906541],[3,1466,325,0.007128458],[2,443,327,0.003288124],[1,164,346,0.001098791],[0,63,360,0.000294166]],"inputs":[["(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/2 (*.f64 x (*.f64 y y)) x)","(*.f64 (fma.f64 -1/2 (*.f64 y y) 1) x)","(*.f64 x (fma.f64 y (*.f64 y -1/2) 1))","(fma.f64 x (*.f64 y (*.f64 y -1/2)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(fma.f64 1/24 (*.f64 x (pow.f64 y 4)) (fma.f64 -1/2 (*.f64 x (*.f64 y y)) x))","(+.f64 x (*.f64 x (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(*.f64 x (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1)))","(fma.f64 x (fma.f64 y (*.f64 y -1/2) (*.f64 1/24 (pow.f64 y 4))) x)","(fma.f64 x (*.f64 y (*.f64 y (fma.f64 y (*.f64 y 1/24) -1/2))) x)","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(fma.f64 -1/720 (*.f64 x (pow.f64 y 6)) (fma.f64 1/24 (*.f64 x (pow.f64 y 4)) (fma.f64 -1/2 (*.f64 x (*.f64 y y)) x)))","(fma.f64 -1/720 (*.f64 x (pow.f64 y 6)) (+.f64 x (*.f64 x (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))))","(+.f64 x (*.f64 x (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/2) (*.f64 1/24 (pow.f64 y 4))))))","(*.f64 x (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1))))","(*.f64 x (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) (fma.f64 -1/720 (pow.f64 y 6) 1))))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(fma.f64 -1/6 (*.f64 z (pow.f64 y 3)) (*.f64 y z))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(fma.f64 -1/6 (*.f64 z (pow.f64 y 3)) (fma.f64 y z (*.f64 1/120 (*.f64 z (pow.f64 y 5)))))","(fma.f64 -1/6 (*.f64 z (pow.f64 y 3)) (*.f64 z (fma.f64 1/120 (pow.f64 y 5) y)))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","(fma.f64 -1/6 (*.f64 z (pow.f64 y 3)) (fma.f64 y z (fma.f64 -1/5040 (*.f64 z (pow.f64 y 7)) (*.f64 1/120 (*.f64 z (pow.f64 y 5))))))","(+.f64 (*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y)) (*.f64 z (+.f64 (*.f64 1/120 (pow.f64 y 5)) (*.f64 -1/5040 (pow.f64 y 7)))))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y))))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/5040 (pow.f64 y 7) (fma.f64 1/120 (pow.f64 y 5) y))))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 (fma.f64 1/120 (pow.f64 y 5) y) (*.f64 -1/5040 (pow.f64 y 7))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y)))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 -1/5040 (pow.f64 y 7) (fma.f64 1/120 (pow.f64 y 5) y)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 y y)))","(fma.f64 -1/2 (*.f64 y y) 1)","(fma.f64 y (*.f64 y -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (*.f64 1/24 (pow.f64 y 4)))","(fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (*.f64 1/24 (pow.f64 y 4))))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) 1)))","(fma.f64 y (*.f64 y -1/2) (fma.f64 1/24 (pow.f64 y 4) (fma.f64 -1/720 (pow.f64 y 6) 1)))"]],"stop":[["node limit",1]],"time":110.273193359375,"type":"simplify"},{"compiler":[[1224,545]],"time":12.536865234375,"type":"eval"},{"alts":[["(+.f64 (*.f64 x (log.f64 (exp.f64 (cos.f64 y)))) (*.f64 z (sin.f64 y)))","fresh",0.23929303102870808],["(+.f64 (*.f64 x (cos.f64 y)) (cbrt.f64 (*.f64 (pow.f64 z 3) (pow.f64 (sin.f64 y) 3))))","fresh",26.2103151347448],["(+.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)) (*.f64 z (sin.f64 y)))","fresh",0.25722509768442015],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","fresh",0.3369713379159781],["(+.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","fresh",0.31876762698974626],["(+.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 3) (pow.f64 x 3))) (*.f64 z (sin.f64 y)))","fresh",28.77548281702984],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (log1p.f64 (expm1.f64 (sin.f64 y)))))","next",0.13185502930532605],["(+.f64 (pow.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) 2) (*.f64 z (sin.f64 y)))","fresh",33.93197250976844],["(+.f64 (*.f64 x (pow.f64 (sqrt.f64 (cos.f64 y)) 2)) (*.f64 z (sin.f64 y)))","fresh",16.606132519536885]],"compiler":[[14,10],[17,13],[15,11],[15,11],[15,11],[17,13],[14,10],[15,11],[15,11],[14,10],[17,13],[15,11],[15,11],[15,11],[17,13],[14,10],[15,11],[15,11]],"count":[[88,9]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[87,9],"picked":[1,0]}],"min-error":[0.04296875],"time":20.964111328125,"type":"prune"},{"compiler":[[38,10]],"locations":[["(*.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))))",0.09375,true],["(expm1.f64 (sin.f64 y))",0.10546875,true],["(*.f64 x (cos.f64 y))",0.109375,false],["(log1p.f64 (expm1.f64 (sin.f64 y)))",0.15853500976844204,true]],"time":9.303955078125,"type":"localize"},{"count":[[3,48]],"series":[["(*.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))))","y","-inf",0.155029296875],["(*.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))))","y","inf",0.139892578125],["(*.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))))","y","0",0.182861328125],["(*.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))))","z","-inf",0.140869140625],["(*.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))))","z","inf",0.14306640625],["(*.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))))","z","0",0.33203125],["(expm1.f64 (sin.f64 y))","y","-inf",0.189208984375],["(expm1.f64 (sin.f64 y))","y","inf",0.22216796875],["(expm1.f64 (sin.f64 y))","y","0",0.254150390625],["(log1p.f64 (expm1.f64 (sin.f64 y)))","y","-inf",0.177978515625],["(log1p.f64 (expm1.f64 (sin.f64 y)))","y","inf",0.162109375],["(log1p.f64 (expm1.f64 (sin.f64 y)))","y","0",0.23193359375]],"time":2.4638671875,"type":"series"},{"count":[[3,45]],"egraph":[[2,1356,14,0.014789375],[1,119,14,0.0018770420000000002],[0,7,14,0.000169917]],"inputs":[["(log1p.f64 (expm1.f64 (sin.f64 y)))","(expm1.f64 (sin.f64 y))","(*.f64 z (log1p.f64 (expm1.f64 (sin.f64 y))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (expm1.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 2) (cbrt.f64 (expm1.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (expm1.f64 (sin.f64 y))) (sqrt.f64 (expm1.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 (sin.f64 y)) 3) 1) (+.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) (+.f64 1 (*.f64 (exp.f64 (sin.f64 y)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) 1) (+.f64 (exp.f64 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (expm1.f64 (sin.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (expm1.f64 (sin.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (expm1.f64 (sin.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (expm1.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (expm1.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (expm1.f64 (sin.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (expm1.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (expm1.f64 (sin.f64 y))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sin.f64 y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sin.f64 y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sin.f64 y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sin.f64 y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sin.f64 y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sin.f64 y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sin.f64 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sin.f64 y) z)))))))"]],"rules":[["egg-rr",11],["egg-rr",18],["egg-rr",16]],"stop":[["node limit",1]],"time":35.799072265625,"type":"rewrite"},{"count":[[93,68]],"egraph":[[15,7738,334,0.11058549899999999],[14,7394,334,0.10065037399999999],[13,7068,334,0.09055891499999999],[12,6348,334,0.079636457],[11,5771,334,0.068087291],[10,5217,334,0.05744812399999999],[9,4793,334,0.04703554099999999],[8,4481,334,0.038451957999999994],[7,4207,334,0.030816540999999996],[6,3974,334,0.024153499999999998],[5,3777,334,0.0181075],[4,2840,334,0.012349791],[3,1016,334,0.0066525],[2,345,336,0.002527833],[1,143,348,0.0009393750000000001],[0,55,360,0.000281583]],"inputs":[["y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","y","(+.f64 y (*.f64 1/2 (pow.f64 y 2)))","(+.f64 y (+.f64 (*.f64 -1/8 (pow.f64 y 4)) (*.f64 1/2 (pow.f64 y 2))))","(+.f64 y (+.f64 (*.f64 -1/8 (pow.f64 y 4)) (+.f64 (*.f64 1/2 (pow.f64 y 2)) (*.f64 -1/15 (pow.f64 y 5)))))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(-.f64 (exp.f64 (sin.f64 y)) 1)","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 z (sin.f64 y))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 (fma.f64 1/120 (pow.f64 y 5) y) (*.f64 -1/5040 (pow.f64 y 7))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y)))","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","(sin.f64 y)","y","(+.f64 y (*.f64 1/2 (pow.f64 y 2)))","(+.f64 y (*.f64 1/2 (*.f64 y y)))","(fma.f64 1/2 (*.f64 y y) y)","(fma.f64 y (*.f64 y 1/2) y)","(*.f64 y (fma.f64 y 1/2 1))","(+.f64 y (+.f64 (*.f64 -1/8 (pow.f64 y 4)) (*.f64 1/2 (pow.f64 y 2))))","(+.f64 y (fma.f64 -1/8 (pow.f64 y 4) (*.f64 1/2 (*.f64 y y))))","(+.f64 (fma.f64 1/2 (*.f64 y y) y) (*.f64 -1/8 (pow.f64 y 4)))","(fma.f64 -1/8 (pow.f64 y 4) (fma.f64 y (*.f64 y 1/2) y))","(fma.f64 y (*.f64 y 1/2) (fma.f64 -1/8 (pow.f64 y 4) y))","(+.f64 y (+.f64 (*.f64 -1/8 (pow.f64 y 4)) (+.f64 (*.f64 1/2 (pow.f64 y 2)) (*.f64 -1/15 (pow.f64 y 5)))))","(+.f64 y (fma.f64 -1/8 (pow.f64 y 4) (fma.f64 1/2 (*.f64 y y) (*.f64 (pow.f64 y 5) -1/15))))","(+.f64 y (fma.f64 -1/8 (pow.f64 y 4) (fma.f64 (pow.f64 y 5) -1/15 (*.f64 y (*.f64 y 1/2)))))","(+.f64 y (fma.f64 y (*.f64 y 1/2) (fma.f64 (pow.f64 y 5) -1/15 (*.f64 -1/8 (pow.f64 y 4)))))","(fma.f64 -1/8 (pow.f64 y 4) (fma.f64 1/2 (*.f64 y y) (fma.f64 (pow.f64 y 5) -1/15 y)))","(fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y -1/8) 1/2) (fma.f64 (pow.f64 y 5) -1/15 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(-.f64 (exp.f64 (sin.f64 y)) 1)","(expm1.f64 (sin.f64 y))","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 y z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (*.f64 y z))","(fma.f64 -1/6 (*.f64 (pow.f64 y 3) z) (*.f64 y z))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y))","(*.f64 (fma.f64 -1/6 (pow.f64 y 3) y) z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (*.f64 1/120 (*.f64 (pow.f64 y 5) z))))","(fma.f64 -1/6 (*.f64 (pow.f64 y 3) z) (fma.f64 y z (*.f64 (*.f64 1/120 (pow.f64 y 5)) z)))","(fma.f64 -1/6 (*.f64 (pow.f64 y 3) z) (*.f64 z (fma.f64 1/120 (pow.f64 y 5) y)))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y)))","(*.f64 (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y)) z)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 3) z)) (+.f64 (*.f64 y z) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 7) z)) (*.f64 1/120 (*.f64 (pow.f64 y 5) z)))))","(fma.f64 -1/6 (*.f64 (pow.f64 y 3) z) (fma.f64 y z (fma.f64 -1/5040 (*.f64 (pow.f64 y 7) z) (*.f64 (*.f64 1/120 (pow.f64 y 5)) z))))","(+.f64 (*.f64 z (fma.f64 -1/6 (pow.f64 y 3) y)) (*.f64 z (+.f64 (*.f64 1/120 (pow.f64 y 5)) (*.f64 -1/5040 (pow.f64 y 7)))))","(*.f64 z (fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y))))","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)","(*.f64 z (sin.f64 y))","(*.f64 (sin.f64 y) z)"]],"stop":[["node limit",1]],"time":133.427001953125,"type":"simplify"},{"compiler":[[1350,567]],"time":12.85205078125,"type":"eval"},{"alts":[["(+.f64 (*.f64 x (log.f64 (exp.f64 (cos.f64 y)))) (*.f64 z (sin.f64 y)))","next",0.23929303102870808],["(+.f64 (*.f64 x (cos.f64 y)) (cbrt.f64 (*.f64 (pow.f64 z 3) (pow.f64 (sin.f64 y) 3))))","fresh",26.2103151347448],["(+.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)) (*.f64 z (sin.f64 y)))","fresh",0.25722509768442015],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","fresh",0.3369713379159781],["(+.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","fresh",0.31876762698974626],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 3))))","fresh",0.3093338867581883],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (log1p.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) 1) (+.f64 (exp.f64 (sin.f64 y)) 1)))))","fresh",9.251582656306477],["(+.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 3) (pow.f64 x 3))) (*.f64 z (sin.f64 y)))","fresh",28.77548281702984],["(+.f64 (pow.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) 2) (*.f64 z (sin.f64 y)))","fresh",33.93197250976844],["(+.f64 (*.f64 x (pow.f64 (sqrt.f64 (cos.f64 y)) 2)) (*.f64 z (sin.f64 y)))","fresh",16.606132519536885]],"compiler":[[14,10],[17,13],[15,11],[15,11],[15,11],[17,13],[26,16],[17,13],[15,11],[15,11],[14,10],[17,13],[15,11],[15,11],[15,11],[17,13],[26,16],[17,13],[15,11],[15,11]],"count":[[98,10]],"kept":[{"done":[0,0],"fresh":[8,8],"new":[89,2],"picked":[1,0]}],"min-error":[0.02734375],"time":23.62890625,"type":"prune"},{"compiler":[[38,10]],"locations":[["(exp.f64 (cos.f64 y))",0.0625,true],["(*.f64 z (sin.f64 y))",0.09375,false],["(*.f64 x (log.f64 (exp.f64 (cos.f64 y))))",0.109375,true],["(log.f64 (exp.f64 (cos.f64 y)))",0.3162176886697881,true]],"time":9.655029296875,"type":"localize"},{"count":[[3,40]],"series":[["(exp.f64 (cos.f64 y))","y","-inf",0.162841796875],["(exp.f64 (cos.f64 y))","y","inf",0.19091796875],["(exp.f64 (cos.f64 y))","y","0",0.299072265625],["(*.f64 x (log.f64 (exp.f64 (cos.f64 y))))","y","-inf",0.155029296875],["(*.f64 x (log.f64 (exp.f64 (cos.f64 y))))","y","inf",0.14111328125],["(*.f64 x (log.f64 (exp.f64 (cos.f64 y))))","y","0",0.17919921875],["(*.f64 x (log.f64 (exp.f64 (cos.f64 y))))","x","-inf",0.14111328125],["(*.f64 x (log.f64 (exp.f64 (cos.f64 y))))","x","inf",0.14404296875],["(*.f64 x (log.f64 (exp.f64 (cos.f64 y))))","x","0",0.160888671875],["(log.f64 (exp.f64 (cos.f64 y)))","y","-inf",0.154052734375],["(log.f64 (exp.f64 (cos.f64 y)))","y","inf",0.159912109375],["(log.f64 (exp.f64 (cos.f64 y)))","y","0",0.239013671875]],"time":2.254150390625,"type":"series"},{"count":[[3,49]],"egraph":[[2,1330,14,0.013859332],[1,119,14,0.001813499],[0,7,14,0.000158708]],"inputs":[["(log.f64 (exp.f64 (cos.f64 y)))","(*.f64 x (log.f64 (exp.f64 (cos.f64 y))))","(exp.f64 (cos.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (cos.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cos.f64 y) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (exp.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (exp.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2) (cbrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (exp.f64 (cos.f64 y))) (sqrt.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (exp.f64 (cos.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (exp.f64 (cos.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (cos.f64 y))) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2)) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (exp.f64 (cos.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (exp.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (exp.f64 (cos.f64 y))))))))"]],"rules":[["egg-rr",19],["egg-rr",11],["egg-rr",19]],"stop":[["node limit",1]],"time":35.432861328125,"type":"rewrite"},{"count":[[89,72]],"egraph":[[14,7870,304,0.08406875],[13,7137,304,0.074361792],[12,6484,304,0.063336375],[11,5922,304,0.053697125],[10,4233,304,0.043972958],[9,3991,304,0.03503175],[8,2476,304,0.028385],[7,2342,307,0.021772792],[6,2216,307,0.017398999999999998],[5,2083,307,0.013371999999999998],[4,1622,307,0.009242667],[3,1061,307,0.0054247919999999995],[2,324,311,0.002420625],[1,119,328,0.000815542],[0,46,334,0.000235292]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(exp.f64 1)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (exp.f64 1))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (exp.f64 1)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (+.f64 (*.f64 -31/720 (*.f64 (pow.f64 y 6) (exp.f64 1))) (exp.f64 1))))"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 y y)))","(fma.f64 -1/2 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (*.f64 1/24 (pow.f64 y 4)))","(fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))) (fma.f64 -1/720 (pow.f64 y 6) 1))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)))","(fma.f64 -1/2 (*.f64 y y) (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 1/24 (pow.f64 y 4) 1)))","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(cos.f64 y)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/2 (*.f64 (*.f64 y y) x) x)","(*.f64 (fma.f64 -1/2 (*.f64 y y) 1) x)","(fma.f64 (*.f64 y y) (*.f64 -1/2 x) x)","(fma.f64 y (*.f64 y (*.f64 -1/2 x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(fma.f64 1/24 (*.f64 (pow.f64 y 4) x) (fma.f64 -1/2 (*.f64 (*.f64 y y) x) x))","(+.f64 x (*.f64 x (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(*.f64 x (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)))","(*.f64 (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)) x)","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(fma.f64 -1/720 (*.f64 (pow.f64 y 6) x) (fma.f64 1/24 (*.f64 (pow.f64 y 4) x) (fma.f64 -1/2 (*.f64 (*.f64 y y) x) x)))","(fma.f64 -1/720 (*.f64 (pow.f64 y 6) x) (+.f64 x (*.f64 x (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))))","(+.f64 x (*.f64 x (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))))","(*.f64 x (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1))))","(fma.f64 x (fma.f64 -1/720 (pow.f64 y 6) (*.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/24) -1/2))) x)","(*.f64 x (fma.f64 -1/2 (*.f64 y y) (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 1/24 (pow.f64 y 4) 1))))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(exp.f64 1)","(E.f64)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (exp.f64 1))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (E.f64))","(*.f64 (fma.f64 -1/2 (*.f64 y y) 1) (E.f64))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (exp.f64 1)))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (fma.f64 1/6 (*.f64 (pow.f64 y 4) (E.f64)) (E.f64)))","(fma.f64 -1/2 (*.f64 y (*.f64 y (E.f64))) (fma.f64 (*.f64 (pow.f64 y 4) 1/6) (E.f64) (E.f64)))","(fma.f64 (E.f64) (fma.f64 -1/2 (*.f64 y y) (*.f64 (pow.f64 y 4) 1/6)) (E.f64))","(*.f64 (E.f64) (fma.f64 y (fma.f64 1/6 (pow.f64 y 3) (*.f64 -1/2 y)) 1))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) (exp.f64 1))) (+.f64 (*.f64 1/6 (*.f64 (pow.f64 y 4) (exp.f64 1))) (+.f64 (*.f64 -31/720 (*.f64 (pow.f64 y 6) (exp.f64 1))) (exp.f64 1))))","(fma.f64 -1/2 (*.f64 (*.f64 y y) (E.f64)) (fma.f64 1/6 (*.f64 (pow.f64 y 4) (E.f64)) (fma.f64 -31/720 (*.f64 (pow.f64 y 6) (E.f64)) (E.f64))))","(+.f64 (*.f64 (E.f64) (+.f64 (*.f64 (pow.f64 y 4) 1/6) (*.f64 (pow.f64 y 6) -31/720))) (*.f64 (fma.f64 -1/2 (*.f64 y y) 1) (E.f64)))","(fma.f64 (E.f64) (fma.f64 (pow.f64 y 4) 1/6 (*.f64 (pow.f64 y 6) -31/720)) (*.f64 (fma.f64 -1/2 (*.f64 y y) 1) (E.f64)))","(*.f64 (E.f64) (+.f64 (fma.f64 (pow.f64 y 6) -31/720 1) (fma.f64 -1/2 (*.f64 y y) (*.f64 (pow.f64 y 4) 1/6))))","(*.f64 (E.f64) (fma.f64 -1/2 (*.f64 y y) (fma.f64 (pow.f64 y 4) 1/6 (fma.f64 (pow.f64 y 6) -31/720 1))))","(*.f64 (E.f64) (fma.f64 y (fma.f64 1/6 (pow.f64 y 3) (*.f64 -1/2 y)) (fma.f64 (pow.f64 y 6) -31/720 1)))"]],"stop":[["node limit",1]],"time":104.97216796875,"type":"simplify"},{"compiler":[[1409,616]],"time":13.9638671875,"type":"eval"},{"alts":[["(+.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)) (*.f64 z (sin.f64 y)))","next",0.25722509768442015],["(+.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","fresh",0.31876762698974626],["(+.f64 (*.f64 x (log.f64 (exp.f64 (cos.f64 y)))) (*.f64 z (sin.f64 y)))","done",0.23929303102870808],["(+.f64 (*.f64 x (+.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))))) (*.f64 z (sin.f64 y)))","fresh",0.33196622628588957],["(+.f64 (*.f64 x (cos.f64 y)) (cbrt.f64 (*.f64 (pow.f64 z 3) (pow.f64 (sin.f64 y) 3))))","fresh",26.2103151347448],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 3))))","fresh",0.3093338867581883],["(+.f64 (pow.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) 2) (*.f64 z (sin.f64 y)))","fresh",33.93197250976844],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (log1p.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) 1) (+.f64 (exp.f64 (sin.f64 y)) 1)))))","fresh",9.251582656306477],["(+.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 3) (pow.f64 x 3))) (*.f64 z (sin.f64 y)))","fresh",28.77548281702984],["(+.f64 (*.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 y)))))) (*.f64 z (sin.f64 y)))","fresh",0.46409820361821486],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","fresh",0.3369713379159781]],"compiler":[[15,11],[15,11],[14,10],[21,12],[17,13],[17,13],[15,11],[26,16],[17,13],[23,15],[15,11],[15,11],[15,11],[21,12],[17,13],[17,13],[15,11],[26,16],[17,13],[23,15],[15,11]],"count":[[102,11]],"kept":[{"done":[0,0],"fresh":[9,6],"new":[92,4],"picked":[1,1]}],"min-error":[0.015625],"time":25.070068359375,"type":"prune"},{"compiler":[[42,17]],"locations":[["(cbrt.f64 (cos.f64 y))",0.0546875,true],["(*.f64 z (sin.f64 y))",0.09375,false],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))",0.109375,true],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)",0.34183505861065216,true]],"time":10.204833984375,"type":"localize"},{"count":[[3,48]],"series":[["(cbrt.f64 (cos.f64 y))","y","-inf",0.138916015625],["(cbrt.f64 (cos.f64 y))","y","inf",0.175048828125],["(cbrt.f64 (cos.f64 y))","y","0",0.179931640625],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","-inf",0.294921875],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","inf",0.291015625],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","y","0",0.26220703125],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","x","-inf",0.212158203125],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","x","inf",0.35205078125],["(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","x","0",0.300048828125],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","-inf",1.277099609375],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","inf",2.030029296875],["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","y","0",0.427001953125]],"time":6.087158203125,"type":"series"},{"count":[[3,50]],"egraph":[[2,1658,14,0.016979292],[1,166,14,0.002587875],[0,8,14,0.000237583]],"inputs":[["(pow.f64 (cbrt.f64 (cos.f64 y)) 3)","(*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3))","(cbrt.f64 (cos.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 y)) (sqrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 1/6) (*.f64 (pow.f64 (cos.f64 y) 1/6) (pow.f64 (cbrt.f64 (cos.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) 3) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cos.f64 y) 1/6) 3) (pow.f64 (pow.f64 (cos.f64 y) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 1) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2)) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) (pow.f64 (cos.f64 y) 1/6)) (pow.f64 (cos.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cos.f64 y)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (cos.f64 y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cos.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cos.f64 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (cos.f64 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cos.f64 y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (cos.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (cos.f64 y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (cos.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (cos.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (cos.f64 y) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (cos.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 2) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 y) 1/6) (pow.f64 (cos.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2) 1/3) (cbrt.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (cos.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cos.f64 y)) 1/3) (pow.f64 (sqrt.f64 (cos.f64 y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (cos.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (cos.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (cos.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (cos.f64 y))))))))"]],"rules":[["egg-rr",19],["egg-rr",11],["egg-rr",20]],"stop":[["node limit",1]],"time":38.64697265625,"type":"rewrite"},{"count":[[98,73]],"egraph":[[10,7499,331,0.08934629300000001],[9,7114,331,0.07287204300000001],[8,6804,331,0.05921720900000001],[7,6557,331,0.047195917000000004],[6,6304,331,0.036014417],[5,5946,331,0.025530126],[4,3477,331,0.014522876],[3,886,331,0.006616834],[2,282,333,0.002081918],[1,110,342,0.000766834],[0,44,376,0.000232125]],"inputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2))))","(+.f64 (*.f64 -23/6480 (pow.f64 y 6)) (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))))","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)","(pow.f64 (cos.f64 y) 1/3)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 -1/2 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/2 (*.f64 y y)))","(fma.f64 -1/2 (*.f64 y y) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) 1) (*.f64 1/24 (pow.f64 y 4)))","(fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1))","(fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/24) -1/2) 1)","(+.f64 (*.f64 -1/720 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 y 2)) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 -1/720 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(+.f64 (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))) (fma.f64 -1/720 (pow.f64 y 6) 1))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)))","(fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/24) -1/2) (fma.f64 -1/720 (pow.f64 y 6) 1))","(fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) (fma.f64 -1/720 (pow.f64 y 6) 1)))","(fma.f64 -1/720 (pow.f64 y 6) (fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/24) -1/2) 1))","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (pow.f64 1 1/3) (cos.f64 y))","(*.f64 1 (cos.f64 y))","(cos.f64 y)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","x","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/2 (*.f64 (*.f64 y y) x) x)","(*.f64 (fma.f64 -1/2 (*.f64 y y) 1) x)","(fma.f64 (*.f64 y y) (*.f64 -1/2 x) x)","(fma.f64 y (*.f64 y (*.f64 -1/2 x)) x)","(+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x))","(fma.f64 1/24 (*.f64 (pow.f64 y 4) x) (fma.f64 -1/2 (*.f64 (*.f64 y y) x) x))","(+.f64 x (*.f64 x (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4)))))","(fma.f64 x (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))) x)","(*.f64 (fma.f64 -1/2 (*.f64 y y) (fma.f64 1/24 (pow.f64 y 4) 1)) x)","(*.f64 (fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/24) -1/2) 1) x)","(+.f64 (*.f64 -1/720 (*.f64 (pow.f64 y 6) x)) (+.f64 (*.f64 1/24 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 y 2) x)) x)))","(fma.f64 -1/720 (*.f64 (pow.f64 y 6) x) (fma.f64 1/24 (*.f64 (pow.f64 y 4) x) (fma.f64 -1/2 (*.f64 (*.f64 y y) x) x)))","(fma.f64 -1/720 (*.f64 (pow.f64 y 6) x) (+.f64 x (*.f64 x (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))))","(+.f64 x (*.f64 x (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 -1/2 (*.f64 y y) (*.f64 1/24 (pow.f64 y 4))))))","(*.f64 x (fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/24) -1/2) (fma.f64 -1/720 (pow.f64 y 6) 1)))","(fma.f64 x (fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/24) -1/2) (*.f64 -1/720 (pow.f64 y 6))) x)","(*.f64 x (fma.f64 -1/720 (pow.f64 y 6) (fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/24) -1/2) 1)))","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","(*.f64 (cos.f64 y) x)","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (*.f64 (*.f64 y y) -1/6))","(fma.f64 (*.f64 y y) -1/6 1)","(fma.f64 y (*.f64 y -1/6) 1)","(+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2))))","(fma.f64 -1/72 (pow.f64 y 4) (+.f64 1 (*.f64 (*.f64 y y) -1/6)))","(fma.f64 (pow.f64 y 4) -1/72 (fma.f64 (*.f64 y y) -1/6 1))","(fma.f64 y (*.f64 y -1/6) (fma.f64 (pow.f64 y 4) -1/72 1))","(fma.f64 (*.f64 y y) (fma.f64 (*.f64 y y) -1/72 -1/6) 1)","(fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y -1/72) -1/6) 1)","(+.f64 (*.f64 -23/6480 (pow.f64 y 6)) (+.f64 (*.f64 -1/72 (pow.f64 y 4)) (+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))))","(fma.f64 -23/6480 (pow.f64 y 6) (fma.f64 -1/72 (pow.f64 y 4) (+.f64 1 (*.f64 (*.f64 y y) -1/6))))","(fma.f64 (pow.f64 y 6) -23/6480 (fma.f64 (pow.f64 y 4) -1/72 (fma.f64 (*.f64 y y) -1/6 1)))","(fma.f64 (pow.f64 y 4) -1/72 (fma.f64 (pow.f64 y 6) -23/6480 (fma.f64 (*.f64 y y) -1/6 1)))","(fma.f64 y (*.f64 y -1/6) (fma.f64 (pow.f64 y 4) -1/72 (fma.f64 (pow.f64 y 6) -23/6480 1)))","(fma.f64 (*.f64 y y) (fma.f64 y (*.f64 y -1/72) -1/6) (fma.f64 (pow.f64 y 6) -23/6480 1))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))","(pow.f64 (cos.f64 y) 1/3)","(cbrt.f64 (cos.f64 y))"]],"stop":[["node limit",1]],"time":108.717041015625,"type":"simplify"},{"compiler":[[1506,710]],"time":15.306884765625,"type":"eval"},{"alts":[["(+.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)) (*.f64 z (sin.f64 y)))","done",0.25722509768442015],["(+.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","fresh",0.31876762698974626],["(+.f64 (*.f64 x (log.f64 (exp.f64 (cos.f64 y)))) (*.f64 z (sin.f64 y)))","done",0.23929303102870808],["(+.f64 (*.f64 x (+.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))))) (*.f64 z (sin.f64 y)))","fresh",0.33196622628588957],["(+.f64 (*.f64 x (cos.f64 y)) (cbrt.f64 (*.f64 (pow.f64 z 3) (pow.f64 (sin.f64 y) 3))))","fresh",26.2103151347448],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 3))))","fresh",0.3093338867581883],["(+.f64 (pow.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) 2) (*.f64 z (sin.f64 y)))","fresh",33.93197250976844],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (log1p.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) 1) (+.f64 (exp.f64 (sin.f64 y)) 1)))))","fresh",9.251582656306477],["(+.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 3) (pow.f64 x 3))) (*.f64 z (sin.f64 y)))","fresh",28.77548281702984],["(+.f64 (*.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 y)))))) (*.f64 z (sin.f64 y)))","fresh",0.46409820361821486],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","fresh",0.3369713379159781]],"compiler":[[15,11],[15,11],[14,10],[21,12],[17,13],[17,13],[15,11],[26,16],[17,13],[23,15],[15,11]],"count":[[104,11]],"kept":[{"done":[1,1],"fresh":[9,9],"new":[93,0],"picked":[1,1]}],"min-error":[0.015625],"time":22.802978515625,"type":"prune"},{"accuracy":[0.109375],"baseline":[0.109375],"branch":[["x",0.109375,1],["y",0.109375,1],["z",0.109375,1],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",0.109375,1]],"compiler":[[4,3],[4,3],[4,3],[12,8],[221,91]],"count":[[16,1]],"inputs":[["(+.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (+.f64 (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))) (log.f64 (sqrt.f64 (exp.f64 (cos.f64 y)))))) (*.f64 z (sin.f64 y)))","(+.f64 (pow.f64 (sqrt.f64 (*.f64 (cos.f64 y) x)) 2) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cos.f64 y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cos.f64 y)))))) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (log1p.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 y))) 3))))","(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (log1p.f64 (/.f64 (-.f64 (*.f64 (exp.f64 (sin.f64 y)) (exp.f64 (sin.f64 y))) 1) (+.f64 (exp.f64 (sin.f64 y)) 1)))))","(+.f64 (*.f64 x (log.f64 (exp.f64 (cos.f64 y)))) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 y)) (cbrt.f64 (*.f64 (pow.f64 z 3) (pow.f64 (sin.f64 y) 3))))","(+.f64 (*.f64 x (pow.f64 (cbrt.f64 (cos.f64 y)) 3)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (pow.f64 (cbrt.f64 (sin.f64 y)) 3)))","(+.f64 (*.f64 x (cos.f64 y)) (pow.f64 (cbrt.f64 (*.f64 z (sin.f64 y))) 3))","(+.f64 (cbrt.f64 (*.f64 (pow.f64 (cos.f64 y) 3) (pow.f64 x 3))) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (log1p.f64 (expm1.f64 (sin.f64 y)))))","(+.f64 (pow.f64 (sqrt.f64 (*.f64 x (cos.f64 y))) 2) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (pow.f64 (sqrt.f64 (cos.f64 y)) 2)) (*.f64 z (sin.f64 y)))","(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"link":["."],"name":["Diagrams.ThreeD.Transform:aboutY from diagrams-lib-1.3.0.3"],"oracle":[59.406803221784315],"outputs":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"time":27.93310546875,"times":[["x",6.02392578125],["y",5.883056640625],["z",6.184814453125],["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))",6.340087890625]],"type":"regimes"},{"compiler":[[12,8]],"egraph":[[1,12,14,3.4875e-5],[0,9,14,2.025e-5]],"inputs":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 x (cos.f64 y)) (*.f64 z (sin.f64 y)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.175048828125,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[12,8]],"remove-preprocessing":[[]],"time":8.35009765625,"type":"end"}]
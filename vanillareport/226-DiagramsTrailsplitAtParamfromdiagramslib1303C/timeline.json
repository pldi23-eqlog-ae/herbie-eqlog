[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.8770725436042994,0.12195113231427968,0.0009763240814208984],[11,0.8487798809073865,0.15024379501119256,0.0009763240814208984],[10,0.7609750656411052,0.23804861027747393,0.0009763240814208984],[9,0.7102433945983648,0.28878028132021427,0.0009763240814208984],[8,0.546341072767973,0.45268260315060616,0.0009763240814208984],[7,0.46829234808683395,0.5307313278317451,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":28.133056640625,"type":"analyze"},{"outcomes":[["body",512,"valid",0.134765625,2],["body",1024,"valid",0.5390625,2],["body",256,"valid",274.7412109375,8252]],"time":283.051025390625,"type":"sample"},{"compiler":[[9,6]],"egraph":[[0,2,2,1.833e-6],[16,5512,20,0.10542837399999999],[15,5512,20,0.09260320699999999],[14,5488,20,0.081103207],[13,5388,20,0.067765957],[12,5386,20,0.053776707],[11,5362,20,0.046983457],[10,5330,20,0.040291874],[9,4933,20,0.033568624],[8,3646,20,0.024396541],[7,1607,20,0.014603625],[6,543,20,0.0053250829999999996],[5,270,20,0.002197708],[4,131,20,0.001059749],[3,64,20,0.000509958],[2,37,20,0.00024729099999999996],[1,24,20,0.000127833],[0,10,20,5.4125e-5]],"inputs":[["0","1"],["(/.f64 (-.f64 x y) (-.f64 1 y))","(/.f64 (-.f64 y x) (-.f64 1 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (-.f64 x y) (-.f64 1 y))","(/.f64 (-.f64 y x) (-.f64 1 x))","(/.f64 (-.f64 x y) (-.f64 x 1))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":130.0439453125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[13,3353,10,0.048379791],[12,3353,10,0.040848416],[11,3343,10,0.034062249999999995],[10,3051,10,0.027237874999999995],[9,2412,10,0.018760082999999997],[8,1082,10,0.010037375],[7,446,10,0.004195709],[6,227,10,0.001975125],[5,120,10,0.001023375],[4,70,10,0.000558959],[3,37,10,0.000311334],[2,22,10,0.000166334],[1,15,10,9.1084e-5],[0,7,10,4.3667e-5]],"inputs":[["(/.f64 (-.f64 x y) (-.f64 1 y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 x y) (-.f64 1 y))","(/.f64 (-.f64 y x) (+.f64 y -1))"]],"stop":[["saturated",1]],"time":59.510986328125,"type":"simplify"},{"compiler":[[16,10]],"time":0.31103515625,"type":"eval"},{"alts":[["(/.f64 (-.f64 y x) (+.f64 y -1))","next",0.00390625]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.00390625],"time":0.782958984375,"type":"prune"},{"compiler":[[18,9]],"locations":[["(/.f64 (-.f64 y x) (+.f64 y -1))",0.00390625,true]],"time":4.011962890625,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (-.f64 y x) (+.f64 y -1))","x","-inf",0.35400390625],["(/.f64 (-.f64 y x) (+.f64 y -1))","x","inf",0.373046875],["(/.f64 (-.f64 y x) (+.f64 y -1))","x","0",0.349853515625],["(/.f64 (-.f64 y x) (+.f64 y -1))","y","-inf",0.363037109375],["(/.f64 (-.f64 y x) (+.f64 y -1))","y","inf",0.40283203125],["(/.f64 (-.f64 y x) (+.f64 y -1))","y","0",0.4169921875]],"time":2.35205078125,"type":"series"},{"count":[[1,258]],"egraph":[[2,2503,10,0.022285542000000002],[1,163,10,0.0030255],[0,7,10,0.0001965]],"inputs":[["(/.f64 (-.f64 y x) (+.f64 y -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x (+.f64 y -1)))) (sqrt.f64 (/.f64 x (+.f64 y -1))) (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 y x) (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (/.f64 1 (+.f64 y -1)) x))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 y -1))) x (*.f64 (/.f64 1 (+.f64 y -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (/.f64 x (+.f64 y -1)) 1))) (fma.f64 (neg.f64 (/.f64 x (+.f64 y -1))) 1 (*.f64 (/.f64 x (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (+.f64 y -1)))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2) (*.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y -1))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) (+.f64 y -1)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1))) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) (+.f64 y -1)) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 (+.f64 y -1)))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 x (cbrt.f64 (+.f64 y -1))) (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1)))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 (+.f64 y -1)))) (/.f64 1 (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 x (sqrt.f64 (+.f64 y -1))) (/.f64 1 (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1)))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y -1))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3)))))) (fma.f64 (neg.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1))) (/.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 x (+.f64 -1 (pow.f64 y 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1))))) (fma.f64 (neg.f64 (+.f64 y 1)) (/.f64 x (fma.f64 y y -1)) (*.f64 (+.f64 y 1) (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 y x) (+.f64 y -1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 y x) (+.f64 y -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 y x) (/.f64 1 (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 y x) (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))) 2) (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (*.f64 (cbrt.f64 (-.f64 y x)) (/.f64 1 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (pow.f64 (*.f64 (cbrt.f64 (-.f64 y x)) (/.f64 1 (+.f64 y -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))) (sqrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 y x)) (*.f64 (sqrt.f64 (-.f64 y x)) (/.f64 1 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 y x)) (pow.f64 (*.f64 (sqrt.f64 (-.f64 y x)) (/.f64 1 (+.f64 y -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 y x)) (/.f64 1 (+.f64 1 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 y x)) (pow.f64 (/.f64 1 (+.f64 1 (neg.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y -1)) (-.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y -1)) (pow.f64 (/.f64 1 (-.f64 y x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (-.f64 y x) (cbrt.f64 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 (-.f64 y x) (sqrt.f64 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) 1) (/.f64 (cbrt.f64 (-.f64 y x)) (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 y x)) 1) (/.f64 (sqrt.f64 (-.f64 y x)) (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 y x)) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 (-.f64 y x)) (cbrt.f64 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 (-.f64 y x)) (sqrt.f64 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 y x) (fma.f64 y y -1)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (/.f64 (-.f64 y x) (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) 1) (pow.f64 (/.f64 (-.f64 y x) (cbrt.f64 (+.f64 y -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) 1) (pow.f64 (/.f64 (-.f64 y x) (sqrt.f64 (+.f64 y -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) 1) 1) (pow.f64 (/.f64 (cbrt.f64 (-.f64 y x)) (+.f64 y -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 y x)) 1) 1) (pow.f64 (/.f64 (sqrt.f64 (-.f64 y x)) (+.f64 y -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) 1) (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (-.f64 y x)) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) 1) (pow.f64 (/.f64 (sqrt.f64 (-.f64 y x)) (cbrt.f64 (+.f64 y -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 y x)) 2) (sqrt.f64 (+.f64 y -1))) 1) (pow.f64 (/.f64 (cbrt.f64 (-.f64 y x)) (sqrt.f64 (+.f64 y -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (-.f64 y x) (+.f64 -1 (pow.f64 y 3))) 1) (-.f64 (fma.f64 y y 1) (*.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (-.f64 y x) (fma.f64 y y -1)) 1) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) 2) (-.f64 y x)) 1/3) (cbrt.f64 (/.f64 1 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) 2) (pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))) 2)) 1/3) (cbrt.f64 (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) 2) (sqrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1)))) 1/3) (cbrt.f64 (sqrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1)))) 2) 3) (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 y -1) (-.f64 y x))) 2) -1) (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2) 1) -1) (pow.f64 (/.f64 (cbrt.f64 (+.f64 y -1)) (-.f64 y x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 y -1)) 1) -1) (pow.f64 (/.f64 (sqrt.f64 (+.f64 y -1)) (-.f64 y x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 (-.f64 y x)) 2)) -1) (pow.f64 (/.f64 (+.f64 y -1) (cbrt.f64 (-.f64 y x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2) (pow.f64 (cbrt.f64 (-.f64 y x)) 2)) -1) (pow.f64 (/.f64 (cbrt.f64 (+.f64 y -1)) (cbrt.f64 (-.f64 y x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 y -1)) (pow.f64 (cbrt.f64 (-.f64 y x)) 2)) -1) (pow.f64 (/.f64 (sqrt.f64 (+.f64 y -1)) (cbrt.f64 (-.f64 y x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 1 (sqrt.f64 (-.f64 y x))) -1) (pow.f64 (/.f64 (+.f64 y -1) (sqrt.f64 (-.f64 y x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2) (sqrt.f64 (-.f64 y x))) -1) (pow.f64 (/.f64 (cbrt.f64 (+.f64 y -1)) (sqrt.f64 (-.f64 y x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sqrt.f64 (+.f64 y -1)) (sqrt.f64 (-.f64 y x))) -1) (pow.f64 (/.f64 (sqrt.f64 (+.f64 y -1)) (sqrt.f64 (-.f64 y x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 y -1) (-.f64 (pow.f64 y 3) (pow.f64 x 3))) -1) (/.f64 1 (fma.f64 x (+.f64 y x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (+.f64 y -1) (-.f64 (*.f64 y y) (*.f64 x x))) -1) (/.f64 1 (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 y x) (+.f64 y -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 y -1) (-.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 y x) 3) (pow.f64 (+.f64 y -1) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (+.f64 y -1) (-.f64 y x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 y x) (+.f64 1 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 y x) (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 y x) (+.f64 y -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 y x) 3) (pow.f64 (+.f64 y -1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 y x) (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 y x) (+.f64 y -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y -1))) 2) (cbrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 y (+.f64 y -1))) (sqrt.f64 (/.f64 y (+.f64 y -1))) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y -1))) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 (+.f64 y -1))) (/.f64 y (sqrt.f64 (+.f64 y -1))) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y -1))) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y -1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (/.f64 (sqrt.f64 y) (sqrt.f64 (+.f64 y -1))) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y 1) (neg.f64 (/.f64 x (+.f64 y -1))))))))"]],"rules":[["egg-rr",258]],"stop":[["node limit",1]],"time":73.942138671875,"type":"rewrite"},{"count":[[282,282]],"egraph":[[3,3394,339,0.021453375],[2,754,360,0.0064275],[1,204,411,0.001385334],[0,61,468,0.000303125]],"inputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 3) (+.f64 1 (*.f64 -1 x)))) x)))","1","(+.f64 (/.f64 1 y) (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (*.f64 -1 (/.f64 x y))))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 -1 (/.f64 x y))))))))","1","(+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))) (/.f64 x (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3)))))) (/.f64 x (pow.f64 y 2)))","(/.f64 y (-.f64 y 1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) x)","(fma.f64 -1 (*.f64 y (+.f64 1 (neg.f64 x))) x)","(-.f64 x (*.f64 y (-.f64 1 x)))","(fma.f64 y (-.f64 x 1) x)","(fma.f64 y (+.f64 x -1) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) x))","(fma.f64 -1 (*.f64 y (+.f64 1 (neg.f64 x))) (fma.f64 -1 (*.f64 (+.f64 1 (neg.f64 x)) (*.f64 y y)) x))","(+.f64 x (*.f64 (-.f64 1 x) (+.f64 (neg.f64 y) (*.f64 (neg.f64 y) y))))","(-.f64 x (*.f64 (+.f64 y 1) (*.f64 y (-.f64 1 x))))","(fma.f64 (-.f64 1 x) (*.f64 y (-.f64 -1 y)) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) (+.f64 1 (*.f64 -1 x)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 3) (+.f64 1 (*.f64 -1 x)))) x)))","(fma.f64 -1 (*.f64 y (+.f64 1 (neg.f64 x))) (fma.f64 -1 (*.f64 (+.f64 1 (neg.f64 x)) (*.f64 y y)) (fma.f64 -1 (*.f64 (+.f64 1 (neg.f64 x)) (pow.f64 y 3)) x)))","(+.f64 (*.f64 (-.f64 1 x) (+.f64 (*.f64 (neg.f64 y) y) (neg.f64 (pow.f64 y 3)))) (-.f64 x (*.f64 y (-.f64 1 x))))","(+.f64 x (fma.f64 y (-.f64 x 1) (*.f64 (*.f64 y (*.f64 y (-.f64 1 x))) (-.f64 -1 y))))","(+.f64 x (*.f64 (-.f64 1 x) (*.f64 y (+.f64 -1 (*.f64 y (-.f64 -1 y))))))","1","(+.f64 (/.f64 1 y) (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 1 (/.f64 (neg.f64 x) y)))","(+.f64 (/.f64 1 y) (-.f64 1 (/.f64 x y)))","(+.f64 1 (/.f64 (-.f64 1 x) y))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (*.f64 -1 (/.f64 x y))))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (+.f64 1 (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 (neg.f64 x) y)))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (-.f64 (-.f64 1 (/.f64 x (*.f64 y y))) (/.f64 x y))))","(+.f64 1 (+.f64 (/.f64 (-.f64 1 x) y) (/.f64 (-.f64 1 x) (*.f64 y y))))","(+.f64 1 (*.f64 (/.f64 (+.f64 x -1) y) (+.f64 -1 (/.f64 -1 y))))","(+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 -1 (/.f64 x y))))))))","(+.f64 (/.f64 1 y) (fma.f64 -1 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (*.f64 y y)) (+.f64 1 (fma.f64 -1 (/.f64 x (*.f64 y y)) (+.f64 (/.f64 (neg.f64 x) y) (/.f64 1 (pow.f64 y 3))))))))","(+.f64 (/.f64 1 y) (-.f64 (+.f64 1 (+.f64 (-.f64 (-.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 x y)) (/.f64 x (*.f64 y y))) (/.f64 1 (*.f64 y y)))) (/.f64 x (pow.f64 y 3))))","(-.f64 (+.f64 (+.f64 (+.f64 1 (/.f64 (-.f64 1 x) (*.f64 y y))) (/.f64 1 (pow.f64 y 3))) (/.f64 (-.f64 1 x) y)) (/.f64 x (pow.f64 y 3)))","(+.f64 (+.f64 1 (/.f64 1 y)) (+.f64 (-.f64 (/.f64 (-.f64 1 x) (*.f64 y y)) (/.f64 x y)) (/.f64 (-.f64 1 x) (pow.f64 y 3))))","1","(+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))","(+.f64 (/.f64 1 y) (+.f64 1 (/.f64 (neg.f64 x) y)))","(+.f64 (/.f64 1 y) (-.f64 1 (/.f64 x y)))","(+.f64 1 (/.f64 (-.f64 1 x) y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 (-.f64 x 1) y)))) (/.f64 x (pow.f64 y 2)))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (+.f64 1 (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 (neg.f64 x) y)))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (-.f64 (-.f64 1 (/.f64 x (*.f64 y y))) (/.f64 x y))))","(+.f64 1 (+.f64 (/.f64 (-.f64 1 x) y) (/.f64 (-.f64 1 x) (*.f64 y y))))","(+.f64 1 (*.f64 (/.f64 (+.f64 x -1) y) (+.f64 -1 (/.f64 -1 y))))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 (-.f64 x 1) y)) (*.f64 -1 (/.f64 (-.f64 x 1) (pow.f64 y 3)))))) (/.f64 x (pow.f64 y 2)))","(+.f64 (/.f64 1 (*.f64 y y)) (-.f64 (+.f64 1 (*.f64 -1 (+.f64 (/.f64 (+.f64 x -1) y) (/.f64 (+.f64 x -1) (pow.f64 y 3))))) (/.f64 x (*.f64 y y))))","(+.f64 (/.f64 1 (*.f64 y y)) (+.f64 (+.f64 1 (/.f64 (-.f64 1 x) y)) (-.f64 (/.f64 (-.f64 1 x) (pow.f64 y 3)) (/.f64 x (*.f64 y y)))))","(-.f64 (+.f64 1 (/.f64 (-.f64 1 x) y)) (-.f64 (/.f64 (-.f64 x 1) (pow.f64 y 3)) (/.f64 (-.f64 1 x) (*.f64 y y))))","(+.f64 1 (*.f64 (/.f64 (+.f64 x -1) y) (+.f64 (+.f64 -1 (/.f64 -1 (*.f64 y y))) (/.f64 -1 y))))","(/.f64 y (-.f64 y 1))","(/.f64 y (+.f64 y -1))","(/.f64 y (+.f64 -1 y))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (/.f64 (neg.f64 x) (+.f64 y -1)))","(-.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (+.f64 -1 y)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (/.f64 (neg.f64 x) (+.f64 y -1)))","(-.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (+.f64 -1 y)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (/.f64 (neg.f64 x) (+.f64 y -1)))","(-.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (+.f64 -1 y)))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(/.f64 (neg.f64 x) (+.f64 y -1))","(/.f64 (neg.f64 x) (+.f64 -1 y))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (/.f64 (neg.f64 x) (+.f64 y -1)))","(-.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (+.f64 -1 y)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (/.f64 (neg.f64 x) (+.f64 y -1)))","(-.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (+.f64 -1 y)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (/.f64 (neg.f64 x) (+.f64 y -1)))","(-.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (+.f64 -1 y)))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(/.f64 (neg.f64 x) (+.f64 y -1))","(/.f64 (neg.f64 x) (+.f64 -1 y))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (/.f64 (neg.f64 x) (+.f64 y -1)))","(-.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (+.f64 -1 y)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (/.f64 (neg.f64 x) (+.f64 y -1)))","(-.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (+.f64 -1 y)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (/.f64 (neg.f64 x) (+.f64 y -1)))","(-.f64 (/.f64 y (+.f64 -1 y)) (/.f64 x (+.f64 -1 y)))"]],"stop":[["node limit",1]],"time":40.488037109375,"type":"simplify"},{"compiler":[[11380,7815]],"time":112.744873046875,"type":"eval"},{"alts":[["(fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","next",0.0390625],["(/.f64 (-.f64 y x) (+.f64 y -1))","done",0.00390625]],"compiler":[[15,11],[9,6],[15,11]],"count":[[283,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[282,1],"picked":[1,1]}],"min-error":[0],"time":89.509033203125,"type":"prune"},{"compiler":[[38,26]],"locations":[["(/.f64 1 (+.f64 y -1))",0.00390625,true],["(fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))",0.0390625,true]],"time":9.30908203125,"type":"localize"},{"count":[[2,36]],"series":[["(/.f64 1 (+.f64 y -1))","y","-inf",0.18603515625],["(/.f64 1 (+.f64 y -1))","y","inf",0.501953125],["(/.f64 1 (+.f64 y -1))","y","0",0.205810546875],["(fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","x","-inf",0.183837890625],["(fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","x","inf",0.35498046875],["(fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","x","0",0.4541015625],["(fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","y","-inf",0.31103515625],["(fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","y","inf",0.322998046875],["(fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","y","0",0.50390625]],"time":3.160888671875,"type":"series"},{"count":[[2,47]],"egraph":[[2,2722,23,0.022045417],[1,209,23,0.003597709],[0,10,26,0.000276709]],"inputs":[["(fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","(/.f64 1 (+.f64 y -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 y (+.f64 y -1)) 1) (/.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (/.f64 y (+.f64 y -1)) 0) (/.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))) (pow.f64 (cbrt.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))) 2) (cbrt.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))) (sqrt.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 y (+.f64 y -1)) 3) (pow.f64 (/.f64 x (+.f64 y -1)) 3)) (+.f64 (*.f64 (/.f64 y (+.f64 y -1)) (/.f64 y (+.f64 y -1))) (-.f64 (pow.f64 (/.f64 x (+.f64 y -1)) 2) (*.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (/.f64 y (+.f64 y -1)) (/.f64 y (+.f64 y -1))) (pow.f64 (/.f64 x (+.f64 y -1)) 2)) (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (/.f64 x (+.f64 y -1)) (/.f64 y (+.f64 y -1)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (+.f64 y -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (+.f64 1 (neg.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (+.f64 y -1))) (cbrt.f64 (pow.f64 (+.f64 y -1) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 y -1) -2)) (cbrt.f64 (/.f64 1 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y -1) -1/2) (pow.f64 (+.f64 y -1) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2) -1) (pow.f64 (cbrt.f64 (+.f64 y -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (+.f64 y -1)) -1) (pow.f64 (sqrt.f64 (+.f64 y -1)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 -1 (pow.f64 y 3))) (fma.f64 y y (-.f64 1 (*.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 y y -1)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 y -1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (+.f64 y -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (+.f64 y -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (+.f64 y -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y -1) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 y -1) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (+.f64 y -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (+.f64 y -1))))))))"]],"rules":[["egg-rr",23],["egg-rr",24]],"stop":[["node limit",1]],"time":42.625,"type":"rewrite"},{"count":[[83,83]],"egraph":[[4,6812,562,0.026014416999999998],[3,2695,562,0.0141575],[2,648,566,0.005082583],[1,212,577,0.0013115420000000002],[0,72,617,0.000331417]],"inputs":[["x","(+.f64 (*.f64 y (-.f64 x 1)) x)","(+.f64 (*.f64 y (-.f64 x 1)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x))","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 x 1)) (+.f64 (*.f64 y (-.f64 x 1)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x)))","1","(-.f64 (+.f64 (/.f64 1 y) 1) (/.f64 x y))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 x (pow.f64 y 2)))))) (/.f64 x y))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 1 (pow.f64 y 3))))))) (/.f64 x y))","1","(+.f64 (/.f64 1 y) (+.f64 1 (*.f64 -1 (/.f64 x y))))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 x y))))) (/.f64 x (pow.f64 y 2)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 -1 (/.f64 x y))))))) (/.f64 x (pow.f64 y 2)))","(/.f64 y (-.f64 y 1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","-1","(-.f64 (*.f64 -1 y) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 -1 y)) 1)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (*.f64 -1 (pow.f64 y 3)) (*.f64 -1 y))) 1)","(/.f64 1 y)","(+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 y (-.f64 x 1)) x)","(fma.f64 y (+.f64 x -1) x)","(+.f64 (*.f64 y (-.f64 x 1)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x))","(fma.f64 y (+.f64 x -1) (fma.f64 (*.f64 y y) (+.f64 x -1) x))","(+.f64 x (*.f64 (+.f64 x -1) (fma.f64 y y y)))","(fma.f64 (+.f64 x -1) (fma.f64 y y y) x)","(+.f64 (*.f64 (pow.f64 y 3) (-.f64 x 1)) (+.f64 (*.f64 y (-.f64 x 1)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x)))","(fma.f64 (pow.f64 y 3) (+.f64 x -1) (fma.f64 y (+.f64 x -1) (fma.f64 (*.f64 y y) (+.f64 x -1) x)))","(fma.f64 (+.f64 x -1) (pow.f64 y 3) (+.f64 x (*.f64 (+.f64 x -1) (fma.f64 y y y))))","(+.f64 x (*.f64 (+.f64 x -1) (+.f64 y (*.f64 y (fma.f64 y y y)))))","1","(-.f64 (+.f64 (/.f64 1 y) 1) (/.f64 x y))","(+.f64 (/.f64 1 y) (-.f64 1 (/.f64 x y)))","(+.f64 1 (-.f64 (/.f64 1 y) (/.f64 x y)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 x (pow.f64 y 2)))))) (/.f64 x y))","(+.f64 (/.f64 1 y) (-.f64 (+.f64 (/.f64 1 (*.f64 y y)) (+.f64 1 (neg.f64 (/.f64 x (*.f64 y y))))) (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (-.f64 (-.f64 1 (/.f64 x (*.f64 y y))) (/.f64 x y))))","(+.f64 (+.f64 1 (/.f64 1 (*.f64 y y))) (-.f64 (-.f64 (/.f64 1 y) (/.f64 x y)) (/.f64 x (*.f64 y y))))","(+.f64 (-.f64 1 (/.f64 x y)) (+.f64 (/.f64 (/.f64 1 y) y) (-.f64 (/.f64 1 y) (/.f64 (/.f64 x y) y))))","(+.f64 1 (-.f64 (+.f64 (/.f64 1 (*.f64 y y)) (-.f64 (/.f64 1 y) (/.f64 x (*.f64 y y)))) (/.f64 x y)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 1 (pow.f64 y 3))))))) (/.f64 x y))","(+.f64 (/.f64 1 y) (-.f64 (fma.f64 -1 (/.f64 x (pow.f64 y 3)) (+.f64 (+.f64 (/.f64 1 (*.f64 y y)) 1) (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 1 (pow.f64 y 3))))) (/.f64 x y)))","(+.f64 (/.f64 1 y) (-.f64 (-.f64 (+.f64 (/.f64 1 (*.f64 y y)) (+.f64 1 (-.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 x (*.f64 y y))))) (/.f64 x (pow.f64 y 3))) (/.f64 x y)))","(+.f64 (+.f64 (-.f64 1 (/.f64 x (*.f64 y y))) (/.f64 1 (pow.f64 y 3))) (+.f64 (-.f64 (/.f64 1 (*.f64 y y)) (/.f64 x (pow.f64 y 3))) (-.f64 (/.f64 1 y) (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (+.f64 1 (/.f64 (/.f64 1 y) y)) (-.f64 (-.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 (/.f64 x y) y)) (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x y)))))","(+.f64 (/.f64 1 y) (+.f64 (+.f64 (/.f64 1 (*.f64 y y)) (-.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 (/.f64 x (*.f64 y y)) (+.f64 (/.f64 -1 y) -1)))))","1","(+.f64 (/.f64 1 y) (+.f64 1 (*.f64 -1 (/.f64 x y))))","(+.f64 (/.f64 1 y) (-.f64 1 (/.f64 x y)))","(+.f64 1 (-.f64 (/.f64 1 y) (/.f64 x y)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (*.f64 -1 (/.f64 x y))))) (/.f64 x (pow.f64 y 2)))","(+.f64 (/.f64 1 y) (-.f64 (+.f64 (/.f64 1 (*.f64 y y)) (+.f64 1 (neg.f64 (/.f64 x (*.f64 y y))))) (/.f64 x y)))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (-.f64 (-.f64 1 (/.f64 x (*.f64 y y))) (/.f64 x y))))","(+.f64 (+.f64 1 (/.f64 1 (*.f64 y y))) (-.f64 (-.f64 (/.f64 1 y) (/.f64 x y)) (/.f64 x (*.f64 y y))))","(+.f64 (-.f64 1 (/.f64 x y)) (+.f64 (/.f64 (/.f64 1 y) y) (-.f64 (/.f64 1 y) (/.f64 (/.f64 x y) y))))","(+.f64 1 (-.f64 (+.f64 (/.f64 1 (*.f64 y y)) (-.f64 (/.f64 1 y) (/.f64 x (*.f64 y y)))) (/.f64 x y)))","(-.f64 (+.f64 (/.f64 1 y) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 -1 (/.f64 x y))))))) (/.f64 x (pow.f64 y 2)))","(+.f64 (/.f64 1 y) (-.f64 (fma.f64 -1 (/.f64 x (pow.f64 y 3)) (+.f64 (+.f64 (/.f64 1 (*.f64 y y)) 1) (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 1 (pow.f64 y 3))))) (/.f64 x y)))","(+.f64 (/.f64 1 y) (-.f64 (-.f64 (+.f64 (/.f64 1 (*.f64 y y)) (+.f64 1 (-.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 x (*.f64 y y))))) (/.f64 x (pow.f64 y 3))) (/.f64 x y)))","(+.f64 (+.f64 (-.f64 1 (/.f64 x (*.f64 y y))) (/.f64 1 (pow.f64 y 3))) (+.f64 (-.f64 (/.f64 1 (*.f64 y y)) (/.f64 x (pow.f64 y 3))) (-.f64 (/.f64 1 y) (/.f64 x y))))","(+.f64 (/.f64 1 y) (+.f64 (+.f64 1 (/.f64 (/.f64 1 y) y)) (-.f64 (-.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 (/.f64 x y) y)) (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x y)))))","(+.f64 (/.f64 1 y) (+.f64 (+.f64 (/.f64 1 (*.f64 y y)) (-.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 (pow.f64 y 3)) (*.f64 (/.f64 x (*.f64 y y)) (+.f64 (/.f64 -1 y) -1)))))","(/.f64 y (-.f64 y 1))","(/.f64 y (+.f64 y -1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","(-.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","(-.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","(-.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(neg.f64 (/.f64 x (+.f64 y -1)))","(/.f64 (neg.f64 x) (+.f64 y -1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","(-.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","(-.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","(-.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))","(*.f64 -1 (/.f64 x (-.f64 y 1)))","(neg.f64 (/.f64 x (+.f64 y -1)))","(/.f64 (neg.f64 x) (+.f64 y -1))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","(-.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","(-.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))","(+.f64 (/.f64 y (-.f64 y 1)) (*.f64 -1 (/.f64 x (-.f64 y 1))))","(+.f64 (/.f64 y (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","(-.f64 (/.f64 y (+.f64 y -1)) (/.f64 x (+.f64 y -1)))","-1","(-.f64 (*.f64 -1 y) 1)","(fma.f64 -1 y -1)","(fma.f64 y -1 -1)","(-.f64 -1 y)","(-.f64 (+.f64 (*.f64 -1 (pow.f64 y 2)) (*.f64 -1 y)) 1)","(+.f64 (neg.f64 (*.f64 y y)) (fma.f64 -1 y -1))","(fma.f64 -1 (fma.f64 y y y) -1)","(-.f64 -1 (fma.f64 y y y))","(-.f64 (+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (*.f64 -1 (pow.f64 y 3)) (*.f64 -1 y))) 1)","(+.f64 (fma.f64 -1 (*.f64 y y) (fma.f64 -1 (pow.f64 y 3) (neg.f64 y))) -1)","(+.f64 -1 (+.f64 (neg.f64 (fma.f64 y y y)) (neg.f64 (pow.f64 y 3))))","(fma.f64 -1 (*.f64 y (fma.f64 y y y)) (-.f64 -1 y))","(*.f64 (fma.f64 y y 1) (-.f64 -1 y))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(+.f64 (/.f64 1 y) (/.f64 1 (*.f64 y y)))","(+.f64 (/.f64 1 y) (/.f64 (/.f64 1 y) y))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3))))","(+.f64 (+.f64 (/.f64 1 y) (/.f64 1 (*.f64 y y))) (/.f64 1 (pow.f64 y 3)))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (/.f64 1 (pow.f64 y 3))))","(+.f64 (/.f64 1 (pow.f64 y 3)) (+.f64 (/.f64 1 y) (/.f64 1 (*.f64 y y))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 (/.f64 1 y) y) (/.f64 1 (pow.f64 y 3))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))","(+.f64 (+.f64 (/.f64 1 y) (/.f64 1 (*.f64 y y))) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))","(+.f64 (/.f64 1 (pow.f64 y 3)) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (/.f64 1 (pow.f64 y 4)))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 (/.f64 1 y) y) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))","(+.f64 (/.f64 1 (*.f64 y y)) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))","(/.f64 1 y)","(+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 2)))","(+.f64 (/.f64 1 y) (/.f64 1 (*.f64 y y)))","(+.f64 (/.f64 1 y) (/.f64 (/.f64 1 y) y))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3))))","(+.f64 (+.f64 (/.f64 1 y) (/.f64 1 (*.f64 y y))) (/.f64 1 (pow.f64 y 3)))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (/.f64 1 (pow.f64 y 3))))","(+.f64 (/.f64 1 (pow.f64 y 3)) (+.f64 (/.f64 1 y) (/.f64 1 (*.f64 y y))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 (/.f64 1 y) y) (/.f64 1 (pow.f64 y 3))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))","(+.f64 (+.f64 (/.f64 1 y) (/.f64 1 (*.f64 y y))) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))","(+.f64 (/.f64 1 (pow.f64 y 3)) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (*.f64 y y)) (/.f64 1 (pow.f64 y 4)))))","(+.f64 (/.f64 1 y) (+.f64 (/.f64 (/.f64 1 y) y) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))","(+.f64 (/.f64 1 (*.f64 y y)) (+.f64 (/.f64 1 y) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 (pow.f64 y 4)))))"]],"stop":[["node limit",1]],"time":45.302978515625,"type":"simplify"},{"compiler":[[1373,955]],"time":16.875,"type":"eval"},{"alts":[["(fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","done",0.0390625],["(/.f64 (-.f64 y x) (+.f64 y -1))","done",0.00390625]],"compiler":[[15,11],[9,6]],"count":[[85,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[83,0],"picked":[1,1]}],"min-error":[0],"time":14.698974609375,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["(/.f64 (-.f64 x y) (-.f64 1 y))",0.00390625,1]],"compiler":[[3,2],[3,2],[9,6],[29,19]],"count":[[3,1]],"inputs":[["(fma.f64 y (/.f64 1 (+.f64 y -1)) (neg.f64 (/.f64 x (+.f64 y -1))))","(/.f64 (-.f64 y x) (+.f64 y -1))","(/.f64 (-.f64 x y) (-.f64 1 y))"]],"link":["."],"name":["Diagrams.Trail:splitAtParam  from diagrams-lib-1.3.0.3, C"],"oracle":[0.04296875],"outputs":[["(/.f64 (-.f64 y x) (+.f64 y -1))"]],"time":9.614013671875,"times":[["x",2.97607421875],["y",3.0029296875],["(/.f64 (-.f64 x y) (-.f64 1 y))",2.89306640625]],"type":"regimes"},{"compiler":[[9,6]],"egraph":[[4,17,10,9.1291e-5],[3,16,10,7.2458e-5],[2,14,10,5.3291e-5],[1,10,10,3.4708e-5],[0,7,10,1.675e-5]],"inputs":[["(/.f64 (-.f64 y x) (+.f64 y -1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 y x) (+.f64 y -1))"]],"stop":[["done",1],["saturated",1]],"time":8.13916015625,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":7.992919921875,"type":"end"}]
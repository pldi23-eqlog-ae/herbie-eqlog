[{"compiler":[[9,7]],"method":["search"],"sampling":[[1,0.99951171875,0.0,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":0.14697265625,"type":"analyze"},{"outcomes":[["body",512,"valid",37.77001953125,519],["body",1024,"valid",109.903564453125,1059],["body",2048,"valid",316.067626953125,2155],["body",256,"valid",201.57470703125,4523]],"time":673.505859375,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,1,1,1.042e-6],[11,232,11,0.0035705],[10,230,11,0.003069125],[9,204,11,0.0025559999999999997],[8,168,11,0.001963333],[7,122,11,0.001421999],[6,86,11,0.000989541],[5,49,11,0.000587249],[4,32,11,0.000359833],[3,23,11,0.000244791],[2,16,11,0.000156791],[1,12,11,9.8374e-5],[0,7,11,5.1833e-5]],"inputs":[["0"],["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":26.55810546875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[11,232,11,0.003547041],[10,230,11,0.003054416],[9,204,11,0.0025486659999999998],[8,168,11,0.001955625],[7,122,11,0.001408208],[6,86,11,0.000977167],[5,49,11,0.000572375],[4,32,11,0.000351292],[3,23,11,0.00023583300000000002],[2,16,11,0.00014983300000000001],[1,12,11,9.3208e-5],[0,7,11,4.725e-5]],"inputs":[["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))"]],"stop":[["saturated",1]],"time":13.97607421875,"type":"simplify"},{"compiler":[[8,6]],"time":0.23193359375,"type":"eval"},{"alts":[["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))","next",14.363011632544486]],"compiler":[[8,6],[8,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[14.363011632544486],"time":0.680908203125,"type":"prune"},{"compiler":[[19,12]],"locations":[["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))",1.6830744991962767,true]],"time":5.22998046875,"type":"localize"},{"count":[[1,4]],"series":[["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))","N","-inf",0.23486328125],["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))","N","inf",0.22900390625],["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))","N","0",0.22314453125]],"time":0.72998046875,"type":"series"},{"count":[[1,36]],"egraph":[[2,2213,11,0.019653208000000002],[1,156,11,0.002871458],[0,7,11,0.00020475]],"inputs":[["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (atan.f64 (+.f64 N 1)) (neg.f64 (atan.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (atan.f64 (+.f64 N 1)) (*.f64 (neg.f64 (atan.f64 N)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) (fma.f64 (neg.f64 (atan.f64 N)) 1 (atan.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) (fma.f64 (neg.f64 (cbrt.f64 (atan.f64 N))) (pow.f64 (cbrt.f64 (atan.f64 N)) 2) (atan.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) (fma.f64 (neg.f64 (sqrt.f64 (atan.f64 N))) (sqrt.f64 (atan.f64 N)) (atan.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (atan.f64 N)) (atan.f64 (+.f64 N 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))) (pow.f64 (cbrt.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))) 2) (cbrt.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))) (sqrt.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 3) (pow.f64 (atan.f64 N) 3)) (/.f64 1 (+.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 2) (*.f64 (atan.f64 N) (+.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 2) (pow.f64 (atan.f64 N) 2)) (/.f64 1 (+.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (atan.f64 (+.f64 N 1))) (sqrt.f64 (atan.f64 N))) (-.f64 (sqrt.f64 (atan.f64 (+.f64 N 1))) (sqrt.f64 (atan.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 2) (*.f64 (atan.f64 N) (+.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)))) (-.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 3) (pow.f64 (atan.f64 N) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) (-.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 2) (pow.f64 (atan.f64 N) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 3) (pow.f64 (atan.f64 N) 3)) (+.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 2) (*.f64 (atan.f64 N) (+.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 2) (pow.f64 (atan.f64 N) 2)) (+.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 3) (pow.f64 (atan.f64 N) 3))) (neg.f64 (+.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 2) (*.f64 (atan.f64 N) (+.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 2) (pow.f64 (atan.f64 N) 2))) (neg.f64 (+.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 3) (pow.f64 (neg.f64 (atan.f64 N)) 3)) (+.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 2) (-.f64 (*.f64 (neg.f64 (atan.f64 N)) (neg.f64 (atan.f64 N))) (*.f64 (atan.f64 (+.f64 N 1)) (neg.f64 (atan.f64 N))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (atan.f64 (+.f64 N 1)) 2) (*.f64 (neg.f64 (atan.f64 N)) (neg.f64 (atan.f64 N)))) (-.f64 (atan.f64 (+.f64 N 1)) (neg.f64 (atan.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (*.f64 N (+.f64 N 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (atan.f64 (+.f64 N 1)) (neg.f64 (atan.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (atan.f64 (+.f64 N 1))) 2) (cbrt.f64 (atan.f64 (+.f64 N 1))) (neg.f64 (atan.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (atan.f64 (+.f64 N 1))) (sqrt.f64 (atan.f64 (+.f64 N 1))) (neg.f64 (atan.f64 N)))))))"]],"rules":[["egg-rr",36]],"stop":[["node limit",1]],"time":38.248046875,"type":"rewrite"},{"count":[[40,38]],"egraph":[[11,322,44,0.006250749999999999],[10,320,44,0.005455791999999999],[9,294,44,0.004646582999999999],[8,258,44,0.0037617909999999996],[7,215,44,0.0029194579999999998],[6,182,44,0.002178583],[5,134,44,0.001473875],[4,88,44,0.00089625],[3,61,44,0.000565416],[2,31,44,0.00032025],[1,20,44,0.000140666],[0,9,52,6.4875e-5]],"inputs":[["(-.f64 (atan.f64 (-.f64 1 (*.f64 -1 N))) (atan.f64 N))","(-.f64 (atan.f64 (-.f64 1 (*.f64 -1 N))) (atan.f64 N))","(-.f64 (atan.f64 (-.f64 1 (*.f64 -1 N))) (atan.f64 N))","(-.f64 (atan.f64 (-.f64 1 (*.f64 -1 N))) (atan.f64 N))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (atan.f64 (-.f64 1 (*.f64 -1 N))) (atan.f64 N))","(-.f64 (atan.f64 (-.f64 1 (neg.f64 N))) (atan.f64 N))","(-.f64 (atan.f64 (+.f64 1 N)) (atan.f64 N))","(-.f64 (atan.f64 (-.f64 1 (*.f64 -1 N))) (atan.f64 N))","(-.f64 (atan.f64 (-.f64 1 (neg.f64 N))) (atan.f64 N))","(-.f64 (atan.f64 (+.f64 1 N)) (atan.f64 N))","(-.f64 (atan.f64 (-.f64 1 (*.f64 -1 N))) (atan.f64 N))","(-.f64 (atan.f64 (-.f64 1 (neg.f64 N))) (atan.f64 N))","(-.f64 (atan.f64 (+.f64 1 N)) (atan.f64 N))","(-.f64 (atan.f64 (-.f64 1 (*.f64 -1 N))) (atan.f64 N))","(-.f64 (atan.f64 (-.f64 1 (neg.f64 N))) (atan.f64 N))","(-.f64 (atan.f64 (+.f64 1 N)) (atan.f64 N))"]],"stop":[["saturated",1]],"time":17.844970703125,"type":"simplify"},{"compiler":[[599,388]],"time":7.55712890625,"type":"eval"},{"alts":[["(atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (*.f64 N (+.f64 N 1))))","next",13.65377245653416],["(+.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) (fma.f64 (neg.f64 (sqrt.f64 (atan.f64 N))) (sqrt.f64 (atan.f64 N)) (atan.f64 N)))","fresh",47.83740456277416],["(+.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) (fma.f64 (neg.f64 (cbrt.f64 (atan.f64 N))) (pow.f64 (cbrt.f64 (atan.f64 N)) 2) (atan.f64 N)))","fresh",30.71250311127425]],"compiler":[[14,10],[19,10],[21,12],[14,10],[19,10],[21,12]],"count":[[39,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[38,3],"picked":[1,0]}],"min-error":[13.470170958265124],"time":6.557861328125,"type":"prune"},{"compiler":[[39,26]],"locations":[["(*.f64 N (+.f64 N 1))",0.00390625,true],["(atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (*.f64 N (+.f64 N 1))))",0.01953125,true],["(+.f64 N (-.f64 1 N))",2.421819938661927,true]],"time":9.233154296875,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 N (+.f64 N 1))","N","-inf",0.43603515625],["(*.f64 N (+.f64 N 1))","N","inf",0.349853515625],["(*.f64 N (+.f64 N 1))","N","0",0.297119140625],["(atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (*.f64 N (+.f64 N 1))))","N","-inf",0.2138671875],["(atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (*.f64 N (+.f64 N 1))))","N","inf",0.291015625],["(atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (*.f64 N (+.f64 N 1))))","N","0",0.177001953125],["(+.f64 N (-.f64 1 N))","N","-inf",0.135009765625],["(+.f64 N (-.f64 1 N))","N","inf",0.161865234375],["(+.f64 N (-.f64 1 N))","N","0",0.158935546875]],"time":2.328857421875,"type":"series"},{"count":[[3,181]],"egraph":[[2,3076,29,0.026179626],[1,210,29,0.003932959],[0,9,33,0.000257209]],"inputs":[["(+.f64 N (-.f64 1 N))","(atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (*.f64 N (+.f64 N 1))))","(*.f64 N (+.f64 N 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (-.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 N 1) N)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 N (-.f64 1 N)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 N N) (+.f64 (+.f64 N -1) N)) (/.f64 (pow.f64 (-.f64 1 N) 2) (+.f64 (+.f64 N -1) N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 N (-.f64 1 N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 N (-.f64 1 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) (pow.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) 2) (cbrt.f64 (+.f64 N (-.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 N (-.f64 1 N))) (sqrt.f64 (+.f64 N (-.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 N 3) (pow.f64 (-.f64 1 N) 3)) (/.f64 1 (fma.f64 (-.f64 1 N) (-.f64 (-.f64 1 N) N) (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 N N) (pow.f64 (-.f64 1 N) 2)) (/.f64 1 (+.f64 (+.f64 N -1) N)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (+.f64 N 1)) (sqrt.f64 N)) (-.f64 (sqrt.f64 (+.f64 N 1)) (sqrt.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (-.f64 1 N) (-.f64 (-.f64 1 N) N) (*.f64 N N)) (+.f64 (pow.f64 N 3) (pow.f64 (-.f64 1 N) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (+.f64 N -1) N) (-.f64 (*.f64 N N) (pow.f64 (-.f64 1 N) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 N 3) (pow.f64 (-.f64 1 N) 3)) (fma.f64 (-.f64 1 N) (-.f64 (-.f64 1 N) N) (*.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 N 3) (pow.f64 (-.f64 1 N) 3)) (+.f64 (pow.f64 (-.f64 1 N) 2) (-.f64 (*.f64 N N) (*.f64 N (-.f64 1 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 N N) (pow.f64 (-.f64 1 N) 2)) (+.f64 (+.f64 N -1) N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 N 3) (pow.f64 (-.f64 1 N) 3))) (neg.f64 (fma.f64 (-.f64 1 N) (-.f64 (-.f64 1 N) N) (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 N N) (pow.f64 (-.f64 1 N) 2))) (neg.f64 (+.f64 (+.f64 N -1) N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 N 1) 3) (pow.f64 N 3)) (+.f64 (pow.f64 (+.f64 N 1) 2) (fma.f64 N N (fma.f64 N N N))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 N 1) 2) (*.f64 N N)) (+.f64 (+.f64 N 1) N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 1 N) 2) (*.f64 N N)) (-.f64 (-.f64 1 N) N))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 N (-.f64 1 N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 N (-.f64 1 N)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 N (-.f64 1 N)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 N (-.f64 1 N))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (-.f64 1 N) (-.f64 (-.f64 1 N) N) (*.f64 N N)) (+.f64 (pow.f64 N 3) (pow.f64 (-.f64 1 N) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (+.f64 N -1) N) (-.f64 (*.f64 N N) (pow.f64 (-.f64 1 N) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 N (-.f64 1 N)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 N (-.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 N (-.f64 1 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 N 1))) (exp.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (+.f64 N 1)) (+.f64 1 (expm1.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 N 1))) (+.f64 1 (expm1.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 N)) (exp.f64 (-.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 N) (+.f64 1 (expm1.f64 (-.f64 1 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 N)) (+.f64 1 (expm1.f64 (-.f64 1 N)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 1 N))) (exp.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (-.f64 1 N)) (+.f64 1 (expm1.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 1 N))) (+.f64 1 (expm1.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 N 1)) (exp.f64 (neg.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 N 1))) (exp.f64 (neg.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 N 1))) (/.f64 1 (exp.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 N (-.f64 1 N)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 N (-.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 N (-.f64 1 N))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (-.f64 N N)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (-.f64 N N)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log1p.f64 (-.f64 N N))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (log1p.f64 (-.f64 N N))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (log1p.f64 (-.f64 N N))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 N 1 (-.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 N (-.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 1 N) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 N (-.f64 1 N)) (fma.f64 (neg.f64 N) 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 N (-.f64 1 N)) (fma.f64 (neg.f64 (cbrt.f64 N)) (cbrt.f64 (*.f64 N N)) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 N (-.f64 1 N)) (fma.f64 -1 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 N 1) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 N) 1 N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 N (-.f64 1 N)) 1 (fma.f64 (neg.f64 N) 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 N (-.f64 1 N)) 1 (fma.f64 (neg.f64 (cbrt.f64 N)) (cbrt.f64 (*.f64 N N)) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 N (-.f64 1 N)) 1 (fma.f64 -1 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 N 1) 1 (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) (pow.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) 2) (fma.f64 (neg.f64 N) 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) (pow.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) 2) (fma.f64 (neg.f64 (cbrt.f64 N)) (cbrt.f64 (*.f64 N N)) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) (pow.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) 2) (fma.f64 -1 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) 2) (cbrt.f64 (+.f64 N (-.f64 1 N))) (fma.f64 (neg.f64 N) 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) 2) (cbrt.f64 (+.f64 N (-.f64 1 N))) (fma.f64 (neg.f64 (cbrt.f64 N)) (cbrt.f64 (*.f64 N N)) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 N (-.f64 1 N))) 2) (cbrt.f64 (+.f64 N (-.f64 1 N))) (fma.f64 -1 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 N) (cbrt.f64 (*.f64 N N)) (-.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 N N)) (cbrt.f64 N) (-.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 N N)) (*.f64 (cbrt.f64 N) 1) (-.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 N 1)) (pow.f64 (cbrt.f64 (+.f64 N 1)) 2) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 N 1)) 2) (cbrt.f64 (+.f64 N 1)) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 1 N)) (pow.f64 (cbrt.f64 (-.f64 1 N)) 2) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 1 N)) 2) (cbrt.f64 (-.f64 1 N)) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 N (-.f64 1 N))) (sqrt.f64 (+.f64 N (-.f64 1 N))) (fma.f64 (neg.f64 N) 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 N (-.f64 1 N))) (sqrt.f64 (+.f64 N (-.f64 1 N))) (fma.f64 (neg.f64 (cbrt.f64 N)) (cbrt.f64 (*.f64 N N)) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 N (-.f64 1 N))) (sqrt.f64 (+.f64 N (-.f64 1 N))) (fma.f64 -1 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 N) (sqrt.f64 N) (-.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 N) (*.f64 (sqrt.f64 N) 1) (-.f64 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 N 1)) (sqrt.f64 (+.f64 N 1)) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 1 N)) (sqrt.f64 (-.f64 1 N)) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 N 3)) (/.f64 1 (+.f64 1 (fma.f64 N N N))) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 N 3) (pow.f64 (-.f64 1 N) 3)) (/.f64 1 (fma.f64 (-.f64 1 N) (-.f64 (-.f64 1 N) N) (*.f64 N N))) (fma.f64 (neg.f64 N) 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 N 3) (pow.f64 (-.f64 1 N) 3)) (/.f64 1 (fma.f64 (-.f64 1 N) (-.f64 (-.f64 1 N) N) (*.f64 N N))) (fma.f64 (neg.f64 (cbrt.f64 N)) (cbrt.f64 (*.f64 N N)) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 N 3) (pow.f64 (-.f64 1 N) 3)) (/.f64 1 (fma.f64 (-.f64 1 N) (-.f64 (-.f64 1 N) N) (*.f64 N N))) (fma.f64 -1 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 N 3)) (/.f64 1 (-.f64 (fma.f64 N N 1) N)) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (*.f64 N N)) (/.f64 1 (+.f64 N 1)) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 N N) (pow.f64 (-.f64 1 N) 2)) (/.f64 1 (+.f64 (+.f64 N -1) N)) (fma.f64 (neg.f64 N) 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 N N) (pow.f64 (-.f64 1 N) 2)) (/.f64 1 (+.f64 (+.f64 N -1) N)) (fma.f64 (neg.f64 (cbrt.f64 N)) (cbrt.f64 (*.f64 N N)) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 N N) (pow.f64 (-.f64 1 N) 2)) (/.f64 1 (+.f64 (+.f64 N -1) N)) (fma.f64 -1 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 N N -1) (/.f64 1 (+.f64 N -1)) (neg.f64 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 N 1)) (sqrt.f64 N)) (-.f64 (sqrt.f64 (+.f64 N 1)) (sqrt.f64 N)) (fma.f64 (neg.f64 N) 1 N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 N 1)) (sqrt.f64 N)) (-.f64 (sqrt.f64 (+.f64 N 1)) (sqrt.f64 N)) (fma.f64 (neg.f64 (cbrt.f64 N)) (cbrt.f64 (*.f64 N N)) N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 N 1)) (sqrt.f64 N)) (-.f64 (sqrt.f64 (+.f64 N 1)) (sqrt.f64 N)) (fma.f64 -1 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (pow.f64 N 3)) (+.f64 1 (pow.f64 (fma.f64 N N N) 3))) (fma.f64 (fma.f64 N N N) (-.f64 (fma.f64 N N N) 1) 1) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (pow.f64 N 3)) (-.f64 1 (pow.f64 (fma.f64 N N N) 2))) (-.f64 1 (fma.f64 N N N)) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (*.f64 N N)) (+.f64 1 (pow.f64 N 3))) (-.f64 (fma.f64 N N 1) N) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (-.f64 1 (*.f64 N N)) (fma.f64 N N -1)) (+.f64 N -1) N)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))))) (log.f64 (sqrt.f64 (exp.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))) (pow.f64 (cbrt.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))) 2) (cbrt.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))) (sqrt.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 N N N))))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 N (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 N N N))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 N N) N)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 N N) 1) N)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 N N N))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 N N N)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 N N N)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 N 6) (pow.f64 N 3)) (+.f64 (pow.f64 N 4) (-.f64 (*.f64 N N) (pow.f64 N 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 N 4) (*.f64 N N)) (fma.f64 N N (neg.f64 N)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1 (pow.f64 N 3)) N) (-.f64 (fma.f64 N N 1) N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 N N -1) N) (+.f64 N -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 N (+.f64 1 (pow.f64 N 3))) (-.f64 (fma.f64 N N 1) N))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 N (fma.f64 N N -1)) (+.f64 N -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 N N N) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 N N N) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 N N N)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 N (sqrt.f64 N)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 N N N) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 N N N) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 N N N)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 N N N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 N) (exp.f64 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 N)) (exp.f64 (*.f64 N N))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 N N)) (+.f64 1 (expm1.f64 N))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 N N N) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 N N N)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (*.f64 (log1p.f64 (fma.f64 N N N)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 N N N)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 N N N)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 N N N)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 N N N))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 N (sqrt.f64 N))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 N N N))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 N N N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 N 1 (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 N (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 1 (fma.f64 N N N)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 N N) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (fma.f64 N N N)) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 N N) 1 N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 1 (fma.f64 N N N))) (pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 N N N))) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 N N N))) 2) (cbrt.f64 (+.f64 1 (fma.f64 N N N))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 N) (cbrt.f64 (*.f64 N N)) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 N N)) (cbrt.f64 N) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 N N)) (*.f64 (cbrt.f64 N) N) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 N N)) (*.f64 (cbrt.f64 N) 1) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 1 (hypot.f64 N (sqrt.f64 N))) (hypot.f64 1 (hypot.f64 N (sqrt.f64 N))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 N) (sqrt.f64 N) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 N) (pow.f64 N 3/2) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 N) (*.f64 (sqrt.f64 N) 1) (*.f64 N N))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (pow.f64 (fma.f64 N N N) 3)) (/.f64 1 (fma.f64 (fma.f64 N N N) (-.f64 (fma.f64 N N N) 1) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 1 (pow.f64 (fma.f64 N N N) 2)) (/.f64 1 (-.f64 1 (fma.f64 N N N))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 N) N) (cbrt.f64 (*.f64 N N)) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 N 3/2) (sqrt.f64 N) N)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 N) 5) (cbrt.f64 N) N)))))"]],"rules":[["egg-rr",55],["egg-rr",25],["egg-rr",101]],"stop":[["node limit",1]],"time":53.77001953125,"type":"rewrite"},{"count":[[217,190]],"egraph":[[8,7339,198,0.044743209],[7,5643,198,0.034176459],[6,3616,198,0.022758001],[5,1634,198,0.01279746],[4,583,198,0.005373376],[3,163,198,0.001652334],[2,67,198,0.0006302510000000001],[1,44,198,0.000296876],[0,19,240,0.000114709]],"inputs":[["1","1","1","1","1","1","1","1","1","1","1","1","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 N 1))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 N 1))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 N 1))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 N 1))))","(atan2.f64 1 (+.f64 N (+.f64 1 (pow.f64 N 2))))","(atan2.f64 1 (+.f64 N (+.f64 1 (pow.f64 N 2))))","(atan2.f64 1 (+.f64 N (+.f64 1 (pow.f64 N 2))))","(atan2.f64 1 (+.f64 N (+.f64 1 (pow.f64 N 2))))","(atan2.f64 1 (+.f64 1 (*.f64 N (-.f64 1 (*.f64 -1 N)))))","(atan2.f64 1 (+.f64 1 (*.f64 N (-.f64 1 (*.f64 -1 N)))))","(atan2.f64 1 (+.f64 1 (*.f64 N (-.f64 1 (*.f64 -1 N)))))","(atan2.f64 1 (+.f64 1 (*.f64 N (-.f64 1 (*.f64 -1 N)))))","N","(+.f64 N (pow.f64 N 2))","(+.f64 N (pow.f64 N 2))","(+.f64 N (pow.f64 N 2))","(pow.f64 N 2)","(+.f64 N (pow.f64 N 2))","(+.f64 N (pow.f64 N 2))","(+.f64 N (pow.f64 N 2))","(pow.f64 N 2)","(+.f64 N (pow.f64 N 2))","(+.f64 N (pow.f64 N 2))","(+.f64 N (pow.f64 N 2))"]],"method":["egg-herbie"],"outputs":[["1","1","1","1","1","1","1","1","1","1","1","1","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 N 1))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 N 1))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 N 1))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 N 1))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 N (+.f64 1 (pow.f64 N 2))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 N (+.f64 1 (pow.f64 N 2))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 N (+.f64 1 (pow.f64 N 2))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 N (+.f64 1 (pow.f64 N 2))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 1 (*.f64 N (-.f64 1 (*.f64 -1 N)))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 1 (*.f64 N (-.f64 1 (*.f64 -1 N)))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 1 (*.f64 N (-.f64 1 (*.f64 -1 N)))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 1 (*.f64 N (-.f64 1 (*.f64 -1 N)))))","(atan2.f64 1 (+.f64 1 (*.f64 N (+.f64 1 N))))","(atan2.f64 1 (+.f64 N (fma.f64 N N 1)))","(atan2.f64 1 (fma.f64 N N (+.f64 1 N)))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","N","(+.f64 N (pow.f64 N 2))","(+.f64 N (*.f64 N N))","(fma.f64 N N N)","(+.f64 N (pow.f64 N 2))","(+.f64 N (*.f64 N N))","(fma.f64 N N N)","(+.f64 N (pow.f64 N 2))","(+.f64 N (*.f64 N N))","(fma.f64 N N N)","(pow.f64 N 2)","(*.f64 N N)","(+.f64 N (pow.f64 N 2))","(+.f64 N (*.f64 N N))","(fma.f64 N N N)","(+.f64 N (pow.f64 N 2))","(+.f64 N (*.f64 N N))","(fma.f64 N N N)","(+.f64 N (pow.f64 N 2))","(+.f64 N (*.f64 N N))","(fma.f64 N N N)","(pow.f64 N 2)","(*.f64 N N)","(+.f64 N (pow.f64 N 2))","(+.f64 N (*.f64 N N))","(fma.f64 N N N)","(+.f64 N (pow.f64 N 2))","(+.f64 N (*.f64 N N))","(fma.f64 N N N)","(+.f64 N (pow.f64 N 2))","(+.f64 N (*.f64 N N))","(fma.f64 N N N)"]],"stop":[["node limit",1]],"time":61.6259765625,"type":"simplify"},{"compiler":[[3743,2366]],"time":41.777099609375,"type":"eval"},{"alts":[["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","next",0.5023029195020046],["(atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 (pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 N N N))) 2) (cbrt.f64 (+.f64 1 (fma.f64 N N N))) -1)))","fresh",13.66158495653416]],"compiler":[[9,6],[27,18],[9,6],[27,18]],"count":[[193,2]],"kept":[{"done":[0,0],"fresh":[2,0],"new":[190,2],"picked":[1,0]}],"min-error":[0.4983966695020046],"time":57.0869140625,"type":"prune"},{"compiler":[[21,9]],"locations":[["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))",0.5023029195020046,true]],"time":4.252197265625,"type":"localize"},{"count":[[1,12]],"series":[["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","N","-inf",0.171142578125],["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","N","inf",0.199951171875],["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","N","0",0.209228515625]],"time":0.623779296875,"type":"series"},{"count":[[1,16]],"egraph":[[2,1493,11,0.015604417],[1,121,11,0.0020782500000000002],[0,6,11,0.000188417]],"inputs":[["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2) (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) (sqrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))))"]],"rules":[["egg-rr",16]],"stop":[["node limit",1]],"time":33.048095703125,"type":"rewrite"},{"count":[[28,18]],"egraph":[[9,69,132,0.001292334],[8,68,132,0.001101334],[7,63,132,0.000903543],[6,50,132,0.000712418],[5,38,132,0.000525293],[4,34,132,0.000385834],[3,26,132,0.000273084],[2,17,132,0.000183709],[1,11,132,0.000112626],[0,6,132,5.5459e-5]],"inputs":[["(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))"]],"method":["egg-herbie"],"outputs":[["(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 1 (+.f64 (fma.f64 N N N) 1))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))"]],"stop":[["saturated",1]],"time":13.9970703125,"type":"simplify"},{"compiler":[[216,133]],"time":2.8330078125,"type":"eval"},{"alts":[["(*.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2))","fresh",0.6332004781126568],["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","done",0.5023029195020046],["(pow.f64 (sqrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2)","fresh",1.0566967183442149],["(pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 3)","next",0.6309154683442147]],"compiler":[[22,15],[9,6],[12,9],[12,9],[22,15],[12,9],[12,9]],"count":[[20,4]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[18,3],"picked":[1,1]}],"min-error":[0.4788654195020046],"time":4.083984375,"type":"prune"},{"compiler":[[42,22]],"locations":[["(pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 3)",0.15919877930532605,true],["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))",0.5023029195020046,false],["(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))",15.522244186570942,true]],"time":8.508056640625,"type":"localize"},{"count":[[2,24]],"series":[["(pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 3)","N","-inf",0.6220703125],["(pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 3)","N","inf",0.659912109375],["(pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 3)","N","0",1.208984375],["(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","N","-inf",1.10986328125],["(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","N","inf",1.14306640625],["(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","N","0",1.2880859375]],"time":6.130859375,"type":"series"},{"count":[[2,39]],"egraph":[[2,1976,24,0.019452792],[1,188,24,0.0030106670000000003],[0,9,24,0.000284625]],"inputs":[["(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) (pow.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) (pow.f64 (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) 2) (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1/6) (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2) 1/3) (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 1/3) (pow.f64 (sqrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2) (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) (sqrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1/6) (*.f64 (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1/6) (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) 2) 3) (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1/6) 3) (pow.f64 (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2) 1) (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) 2)) (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2) (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1/6)) (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))))))))"]],"rules":[["egg-rr",20],["egg-rr",19]],"stop":[["node limit",1]],"time":41.1650390625,"type":"rewrite"},{"count":[[63,43]],"egraph":[[24,7970,288,0.119574875],[23,7504,288,0.11061262499999999],[22,6527,288,0.099396],[21,5584,288,0.084864542],[20,5504,288,0.072731833],[19,5324,288,0.065236958],[18,5104,288,0.058374792],[17,4820,288,0.051757292],[16,4497,288,0.045626125000000003],[15,3770,288,0.0391955],[14,3163,288,0.031853167],[13,2656,288,0.025541167000000004],[12,2228,288,0.020316459000000002],[11,1901,288,0.015954084],[10,1662,288,0.012210042],[9,1499,288,0.009350584],[8,1360,288,0.007084876],[7,1263,288,0.005236209],[6,586,288,0.003338834],[5,190,288,0.0017652920000000001],[4,93,288,0.0009277090000000001],[3,61,288,0.000568],[2,41,288,0.00037020900000000003],[1,27,288,0.000223709],[0,11,324,0.000108917]],"inputs":[["(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 (pow.f64 1 1/3) (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)))","(*.f64 (pow.f64 1 1/3) (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)))","(*.f64 (pow.f64 1 1/3) (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)))","(*.f64 (pow.f64 1 1/3) (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(pow.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) 1/3)","(cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(*.f64 (pow.f64 1 1/3) (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(*.f64 (pow.f64 1 1/3) (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(*.f64 (pow.f64 1 1/3) (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(*.f64 (pow.f64 1 1/3) (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(*.f64 (atan2.f64 1 (+.f64 (fma.f64 N N N) 1)) (pow.f64 1 1/3))","(*.f64 1 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))"]],"stop":[["node limit",1]],"time":144.001953125,"type":"simplify"},{"compiler":[[1013,678]],"time":13.300048828125,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 3)","done",0.6309154683442147],["(*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2)))","fresh",1.1175818378808466],["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","done",0.5023029195020046],["(pow.f64 (sqrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2)","fresh",1.0566967183442149]],"compiler":[[12,9],[36,25],[9,6],[12,9]],"count":[[65,4]],"kept":[{"done":[1,1],"fresh":[2,1],"new":[61,1],"picked":[1,1]}],"min-error":[0.4632404195020046],"time":10.9560546875,"type":"prune"},{"accuracy":[0.5023029195020046],"baseline":[0.5023029195020046],"branch":[["N",0.5023029195020046,1],["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))",0.5023029195020046,1]],"compiler":[[2,1],[8,6],[171,104]],"count":[[10,1]],"inputs":[["(*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N))))) (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2)))","(*.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) (pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2))","(pow.f64 (sqrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 2)","(pow.f64 (cbrt.f64 (atan2.f64 1 (+.f64 1 (fma.f64 N N N)))) 3)","(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))","(atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (fma.f64 (pow.f64 (cbrt.f64 (+.f64 1 (fma.f64 N N N))) 2) (cbrt.f64 (+.f64 1 (fma.f64 N N N))) -1)))","(atan2.f64 (+.f64 N (-.f64 1 N)) (+.f64 1 (*.f64 N (+.f64 N 1))))","(+.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) (fma.f64 (neg.f64 (sqrt.f64 (atan.f64 N))) (sqrt.f64 (atan.f64 N)) (atan.f64 N)))","(+.f64 (-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N)) (fma.f64 (neg.f64 (cbrt.f64 (atan.f64 N))) (pow.f64 (cbrt.f64 (atan.f64 N)) 2) (atan.f64 N)))","(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))"]],"link":["."],"name":["2atan (example 3.5)"],"oracle":[48.329623315490686],"outputs":[["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))"]],"time":9.536865234375,"times":[["N",4.639892578125],["(-.f64 (atan.f64 (+.f64 N 1)) (atan.f64 N))",2.113037109375]],"type":"regimes"},{"compiler":[[9,6]],"egraph":[[1,9,11,3.5666999999999996e-5],[0,6,11,2.225e-5]],"inputs":[["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))"]],"method":["egg-herbie"],"outputs":[["(atan2.f64 1 (+.f64 1 (fma.f64 N N N)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.219970703125,"type":"simplify"},{"time":0.01318359375,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":8.413818359375,"type":"end"}]
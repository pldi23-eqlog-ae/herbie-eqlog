[{"compiler":[[9,6]],"method":["search"],"sampling":[[12,0.4797652819565883,0.41930705536856294,0.10092766267484876],[11,0.40565519775191206,0.499267935694661,0.09507686655342695],[10,0.34324670579007943,0.5694774891517227,0.08727580505819788],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":67.76318359375,"type":"analyze"},{"outcomes":[["body",256,"invalid",39.346435546875,1165],["body",256,"valid",281.353515625,8256]],"time":328.85791015625,"type":"sample"},{"compiler":[[8,5]],"egraph":[[1,3,3,5.5e-6],[0,3,3,4.583e-6],[3,56,28,0.000317708],[2,36,28,0.000211333],[1,18,28,0.00011145799999999999],[0,12,28,5.375e-5]],"inputs":[["0","1","2"],["(*.f64 (+.f64 x y) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 z y) x)","(*.f64 (+.f64 x z) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0","2"],["(*.f64 (+.f64 x y) z)","(*.f64 z (+.f64 x y))","(*.f64 (+.f64 y x) z)","(*.f64 z (+.f64 x y))","(*.f64 (+.f64 z y) x)","(*.f64 x (+.f64 y z))","(*.f64 (+.f64 x z) y)","(*.f64 y (+.f64 x z))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y)"]],"time":23.198974609375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[3,22,7,0.000170792],[2,16,7,0.00011808399999999999],[1,8,7,6.412599999999999e-5],[0,6,7,3.1042e-5]],"inputs":[["(*.f64 (+.f64 x y) z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 x y) z)"]],"stop":[["saturated",1]],"time":10.258056640625,"type":"simplify"},{"compiler":[[8,5]],"time":0.181884765625,"type":"eval"},{"alts":[["(*.f64 (+.f64 x y) z)","next",0.01171875]],"compiler":[[8,5],[8,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.01171875],"time":0.653076171875,"type":"prune"},{"compiler":[[14,5]],"locations":[["(*.f64 (+.f64 x y) z)",0.01171875,true]],"time":2.963134765625,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (+.f64 x y) z)","z","-inf",0.299072265625],["(*.f64 (+.f64 x y) z)","z","inf",0.317138671875],["(*.f64 (+.f64 x y) z)","z","0",0.4169921875],["(*.f64 (+.f64 x y) z)","y","-inf",0.24609375],["(*.f64 (+.f64 x y) z)","y","inf",0.295166015625],["(*.f64 (+.f64 x y) z)","y","0",0.216064453125],["(*.f64 (+.f64 x y) z)","x","-inf",0.2978515625],["(*.f64 (+.f64 x y) z)","x","inf",0.358154296875],["(*.f64 (+.f64 x y) z)","x","0",0.30078125]],"time":2.848876953125,"type":"series"},{"count":[[1,21]],"egraph":[[2,1776,7,0.017880125],[1,128,7,0.002315625],[0,6,7,0.000138458]],"inputs":[["(*.f64 (+.f64 x y) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x z) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y z) (*.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z y) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (+.f64 x y) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 x 3) (pow.f64 y 3)) z) (fma.f64 x x (*.f64 y (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 x x) (*.f64 y y)) z) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (+.f64 (pow.f64 x 3) (pow.f64 y 3))) (fma.f64 x x (*.f64 y (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (-.f64 (*.f64 x x) (*.f64 y y))) (-.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 x y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 x y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (+.f64 x y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 x y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 x y) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 z 3) (pow.f64 (+.f64 x y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (+.f64 x y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (+.f64 x y) z)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":35.173095703125,"type":"rewrite"},{"count":[[57,26]],"egraph":[[2,18,234,0.000204959],[1,15,234,0.00013575000000000002],[0,9,264,6.2e-5]],"inputs":[["(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 y x))"]],"stop":[["saturated",1]],"time":12.423828125,"type":"simplify"},{"compiler":[[221,85]],"time":2.586181640625,"type":"eval"},{"alts":[["(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) z)) 3)","fresh",0.741089062590145],["(+.f64 (*.f64 y z) (*.f64 x z))","next",0.015625],["(*.f64 (+.f64 x y) z)","done",0.01171875]],"compiler":[[11,8],[10,6],[8,5],[11,8],[10,6]],"count":[[27,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[26,2],"picked":[1,1]}],"min-error":[0],"time":4.458984375,"type":"prune"},{"compiler":[[19,6]],"locations":[["(+.f64 (*.f64 y z) (*.f64 x z))",0.015625,true]],"time":3.8388671875,"type":"localize"},{"count":[[1,36]],"series":[["(+.f64 (*.f64 y z) (*.f64 x z))","x","-inf",0.19091796875],["(+.f64 (*.f64 y z) (*.f64 x z))","x","inf",0.22998046875],["(+.f64 (*.f64 y z) (*.f64 x z))","x","0",0.22705078125],["(+.f64 (*.f64 y z) (*.f64 x z))","z","-inf",0.419189453125],["(+.f64 (*.f64 y z) (*.f64 x z))","z","inf",0.735107421875],["(+.f64 (*.f64 y z) (*.f64 x z))","z","0",0.405029296875],["(+.f64 (*.f64 y z) (*.f64 x z))","y","-inf",0.218994140625],["(+.f64 (*.f64 y z) (*.f64 x z))","y","inf",0.282958984375],["(+.f64 (*.f64 y z) (*.f64 x z))","y","0",0.299072265625]],"time":3.110107421875,"type":"series"},{"count":[[1,41]],"egraph":[[2,2106,7,0.019916083],[1,151,7,0.0028015],[0,7,7,0.000159167]],"inputs":[["(+.f64 (*.f64 y z) (*.f64 x z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 z (+.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 y z) 2) (*.f64 z (-.f64 y x))) (/.f64 (pow.f64 (*.f64 z x) 2) (*.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (+.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (+.f64 y x))) (pow.f64 (cbrt.f64 (*.f64 z (+.f64 y x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z (+.f64 y x))) 2) (cbrt.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 z (+.f64 y x))) (sqrt.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (*.f64 z x) 3)) (/.f64 1 (+.f64 (pow.f64 (*.f64 y z) 2) (*.f64 (*.f64 z x) (-.f64 (*.f64 z x) (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 z (+.f64 y x)) (*.f64 z (-.f64 y x))) (/.f64 1 (*.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y x) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (*.f64 y z) 2) (*.f64 (*.f64 z x) (-.f64 (*.f64 z x) (*.f64 y z)))) (+.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (*.f64 z x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 z (-.f64 y x)) (*.f64 (*.f64 z (+.f64 y x)) (*.f64 z (-.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (*.f64 z x) 3)) (+.f64 (pow.f64 (*.f64 y z) 2) (*.f64 (*.f64 z x) (-.f64 (*.f64 z x) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (*.f64 z x) 3)) (+.f64 (pow.f64 (*.f64 z x) 2) (-.f64 (pow.f64 (*.f64 y z) 2) (*.f64 z (*.f64 y (*.f64 z x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (+.f64 y x)) (*.f64 z (-.f64 y x))) (*.f64 z (-.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 y z) 3) (pow.f64 (*.f64 z x) 3))) (neg.f64 (+.f64 (pow.f64 (*.f64 y z) 2) (*.f64 (*.f64 z x) (-.f64 (*.f64 z x) (*.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 z (+.f64 y x)) (*.f64 z (-.f64 y x)))) (neg.f64 (*.f64 z (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 z x) 2) (pow.f64 (*.f64 y z) 2)) (-.f64 (*.f64 z x) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (+.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (+.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (+.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (+.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (+.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y z (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z y (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z x (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x z (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y z) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 z x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 z x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y z)) 2) (cbrt.f64 (*.f64 y z)) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 z x)) (sqrt.f64 (*.f64 z x)) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y z)) (sqrt.f64 (*.f64 y z)) (*.f64 z x))))))"]],"rules":[["egg-rr",41]],"stop":[["node limit",1]],"time":38.281005859375,"type":"rewrite"},{"count":[[77,47]],"egraph":[[7,682,234,0.008146208],[6,677,234,0.006644042],[5,567,234,0.005125292],[4,434,234,0.003091833],[3,210,234,0.001626083],[2,80,234,0.000669333],[1,34,234,0.00026125],[0,15,264,8.9e-5]],"inputs":[["(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 y z)","(*.f64 z y)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 y z)","(*.f64 z y)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 (+.f64 y x) z)","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 y z)","(*.f64 z y)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))","(+.f64 (*.f64 y z) (*.f64 z x))","(fma.f64 y z (*.f64 z x))","(*.f64 z (+.f64 x y))"]],"stop":[["saturated",1]],"time":22.68994140625,"type":"simplify"},{"compiler":[[568,174]],"time":5.337890625,"type":"eval"},{"alts":[["(fma.f64 z y (*.f64 z x))","next",0.0078125],["(*.f64 (+.f64 x y) z)","done",0.01171875]],"compiler":[[9,5],[8,5],[9,5]],"count":[[50,2]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[47,1],"picked":[1,0]}],"min-error":[0],"time":7.793212890625,"type":"prune"},{"compiler":[[15,5]],"locations":[["(fma.f64 z y (*.f64 z x))",0.0078125,true]],"time":3.371826171875,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 z y (*.f64 z x))","x","-inf",0.1611328125],["(fma.f64 z y (*.f64 z x))","x","inf",0.177001953125],["(fma.f64 z y (*.f64 z x))","x","0",0.197021484375],["(fma.f64 z y (*.f64 z x))","y","-inf",0.285888671875],["(fma.f64 z y (*.f64 z x))","y","inf",0.236083984375],["(fma.f64 z y (*.f64 z x))","y","0",0.18505859375],["(fma.f64 z y (*.f64 z x))","z","-inf",0.389892578125],["(fma.f64 z y (*.f64 z x))","z","inf",0.347900390625],["(fma.f64 z y (*.f64 z x))","z","0",0.3291015625]],"time":2.406982421875,"type":"series"},{"count":[[1,22]],"egraph":[[2,1414,7,0.015335001],[1,118,7,0.001913751],[0,6,8,0.000133084]],"inputs":[["(fma.f64 z y (*.f64 z x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z x) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z y) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z y) 1) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 z (+.f64 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (+.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (+.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (+.f64 y x))) (pow.f64 (cbrt.f64 (*.f64 z (+.f64 y x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z (+.f64 y x))) 2) (cbrt.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 z (+.f64 y x))) (sqrt.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 z y) 3) (pow.f64 (*.f64 z x) 3)) (+.f64 (*.f64 (*.f64 z y) (*.f64 z y)) (-.f64 (pow.f64 (*.f64 z x) 2) (*.f64 (*.f64 z y) (*.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 z y) (*.f64 z y)) (pow.f64 (*.f64 z x) 2)) (-.f64 (*.f64 z y) (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (+.f64 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (+.f64 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (+.f64 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (+.f64 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (+.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (+.f64 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (+.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (+.f64 y x))))))))"]],"rules":[["egg-rr",22]],"stop":[["node limit",1]],"time":33.31103515625,"type":"rewrite"},{"count":[[58,28]],"egraph":[[7,682,234,0.008116083000000001],[6,677,234,0.006617291000000001],[5,567,234,0.0050927080000000005],[4,434,234,0.0030981660000000003],[3,210,234,0.001604916],[2,80,234,0.000646541],[1,34,234,0.000259374],[0,15,234,8.8333e-5]],"inputs":[["(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 z x)","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))","(+.f64 (*.f64 y z) (*.f64 z x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 (+.f64 y x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 (+.f64 y x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 (+.f64 y x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 (+.f64 y x) z)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x) (*.f64 -1 y)) z))","(*.f64 (+.f64 y x) z)","(*.f64 z x)","(*.f64 x z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 y z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 z x)","(*.f64 x z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(*.f64 z x)","(*.f64 x z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)","(+.f64 (*.f64 y z) (*.f64 z x))","(*.f64 (+.f64 y x) z)"]],"stop":[["saturated",1]],"time":22.553955078125,"type":"simplify"},{"compiler":[[259,82]],"time":2.84814453125,"type":"eval"},{"alts":[["(fma.f64 z y (*.f64 z x))","done",0.0078125],["(*.f64 (+.f64 x y) z)","done",0.01171875]],"compiler":[[9,5],[8,5]],"count":[[30,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[28,0],"picked":[1,1]}],"min-error":[0],"time":4.099853515625,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["z",0.0078125,1],["(*.f64 (+.f64 x y) z)",0.0078125,1],["(*.f64 (+.f64 x y) z)",0.0078125,1],["(+.f64 x y)",0.0078125,1],["(+.f64 x y)",0.0078125,1]],"compiler":[[4,3],[4,3],[4,3],[8,5],[8,5],[6,4],[6,4],[29,13]],"count":[[4,1]],"inputs":[["(fma.f64 z y (*.f64 z x))","(pow.f64 (cbrt.f64 (*.f64 (+.f64 x y) z)) 3)","(+.f64 (*.f64 y z) (*.f64 x z))","(*.f64 (+.f64 x y) z)"]],"link":["."],"name":["Text.Parsec.Token:makeTokenParser from parsec-3.1.9, B"],"oracle":[0.748901562590145],"outputs":[["(fma.f64 z y (*.f64 z x))"]],"time":23.244140625,"times":[["x",3.15380859375],["y",3.239990234375],["z",3.10888671875],["(*.f64 (+.f64 x y) z)",3.177978515625],["(*.f64 (+.f64 x y) z)",3.18408203125],["(+.f64 x y)",3.31396484375],["(+.f64 x y)",3.208984375]],"type":"regimes"},{"compiler":[[9,5]],"egraph":[[1,7,8,2.2417e-5],[0,6,8,1.2833e-5]],"inputs":[["(fma.f64 z y (*.f64 z x))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 z y (*.f64 z x))"]],"stop":[["done",1],["saturated",1]],"time":8.0390625,"type":"simplify"},{"time":0.00390625,"type":"soundness"},{"compiler":[[9,5],[9,5],[9,5]],"remove-preprocessing":[[]],"time":15.93603515625,"type":"end"}]
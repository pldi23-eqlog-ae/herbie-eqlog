[{"compiler":[[16,10]],"method":["search"],"sampling":[[12,0.4936581836082041,0.135609659133479,0.3707321572583169],[11,0.4721947843208909,0.17951206676661968,0.3482931489124894],[10,0.42926798574626446,0.2536583552137017,0.3170736590400338],[9,0.39024362340569496,0.32780464366078377,0.28195173293352127],[8,0.31219489872455597,0.43707285821437836,0.2507322430610657],[7,0.24975591897964478,0.5307313278317451,0.21951275318861008],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":41.43701171875,"type":"analyze"},{"outcomes":[["body",256,"invalid",43.9287109375,1022],["body",256,"valid",355.50830078125,8256]],"time":407.965087890625,"type":"sample"},{"compiler":[[15,9]],"egraph":[[1,2,2,5.417e-6],[0,2,2,4.792e-6],[4,102,24,0.0006987499999999999],[3,100,24,0.000535584],[2,62,24,0.00036816700000000003],[1,32,28,0.00018345900000000002],[0,14,34,7.2292e-5]],"inputs":[["0","1"],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","(+.f64 (+.f64 (*.f64 y y) (*.f64 (*.f64 y 2) x)) (*.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0"],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","(+.f64 (*.f64 x x) (fma.f64 y y (*.f64 x (*.f64 2 y))))","(fma.f64 x x (*.f64 y (+.f64 y (*.f64 x 2))))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(+.f64 (+.f64 (*.f64 y y) (*.f64 (*.f64 y 2) x)) (*.f64 x x))","(+.f64 (*.f64 x x) (fma.f64 y y (*.f64 x (*.f64 2 y))))","(fma.f64 x x (*.f64 y (+.f64 y (*.f64 x 2))))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y)"]],"time":24.5830078125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[4,83,12,0.000640834],[3,81,12,0.00047674999999999996],[2,47,12,0.00030345899999999996],[1,19,14,0.00014],[0,10,17,5.075e-5]],"inputs":[["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","(+.f64 (fma.f64 x x (*.f64 x (*.f64 2 y))) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 x (*.f64 2 y))))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))"]],"stop":[["saturated",1]],"time":10.9990234375,"type":"simplify"},{"compiler":[[24,13]],"time":0.385986328125,"type":"eval"},{"alts":[["(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","fresh",0.01171875],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","next",0.01171875]],"compiler":[[11,6],[15,9],[11,6],[15,9]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.00390625],"time":1.281982421875,"type":"prune"},{"compiler":[[41,19]],"locations":[["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))",0.00390625,true],["(+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y))",0.0078125,true]],"time":8.808837890625,"type":"localize"},{"count":[[2,48]],"series":[["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","y","-inf",0.18994140625],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","y","inf",0.244873046875],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","y","0",0.174072265625],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","x","-inf",0.192138671875],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","x","inf",0.176025390625],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))","x","0",0.239990234375],["(+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y))","y","-inf",0.224853515625],["(+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y))","y","inf",0.323974609375],["(+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y))","y","0",0.487060546875],["(+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y))","x","-inf",0.2529296875],["(+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y))","x","inf",0.5],["(+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y))","x","0",0.491943359375]],"time":3.7001953125,"type":"series"},{"count":[[2,174]],"egraph":[[2,3185,20,0.026560583999999998],[1,223,24,0.004155667],[0,10,28,0.000263417]],"inputs":[["(+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y))","(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (fma.f64 2 y x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 x 4) (*.f64 x (-.f64 x (*.f64 2 y)))) (/.f64 (pow.f64 (*.f64 x (*.f64 2 y)) 2) (*.f64 x (-.f64 x (*.f64 2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 x (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (fma.f64 2 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (fma.f64 2 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (fma.f64 2 y x))) (cbrt.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2)) (cbrt.f64 (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (fma.f64 2 y x))) (sqrt.f64 (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 6) (pow.f64 (*.f64 x (*.f64 2 y)) 3)) (/.f64 1 (fma.f64 (*.f64 x (*.f64 2 y)) (fma.f64 2 (*.f64 x y) (neg.f64 (*.f64 x x))) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 4) (pow.f64 (*.f64 x (*.f64 2 y)) 2)) (/.f64 1 (*.f64 x (-.f64 x (*.f64 2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 x (*.f64 2 y)) (fma.f64 2 (*.f64 x y) (neg.f64 (*.f64 x x))) (pow.f64 x 4)) (+.f64 (pow.f64 x 6) (pow.f64 (*.f64 x (*.f64 2 y)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 x (-.f64 x (*.f64 2 y))) (-.f64 (pow.f64 x 4) (pow.f64 (*.f64 x (*.f64 2 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) (pow.f64 (*.f64 x (*.f64 2 y)) 3)) (fma.f64 (*.f64 x (*.f64 2 y)) (fma.f64 2 (*.f64 x y) (neg.f64 (*.f64 x x))) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) (pow.f64 (*.f64 x (*.f64 2 y)) 3)) (+.f64 (pow.f64 (*.f64 x (*.f64 2 y)) 2) (-.f64 (pow.f64 x 4) (*.f64 (pow.f64 x 3) (*.f64 2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) (pow.f64 (*.f64 x (*.f64 2 y)) 2)) (*.f64 x (-.f64 x (*.f64 2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 6) (pow.f64 (*.f64 x (*.f64 2 y)) 3))) (neg.f64 (fma.f64 (*.f64 x (*.f64 2 y)) (fma.f64 2 (*.f64 x y) (neg.f64 (*.f64 x x))) (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 4) (pow.f64 (*.f64 x (*.f64 2 y)) 2))) (neg.f64 (*.f64 x (-.f64 x (*.f64 2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (*.f64 2 y)) 2) (pow.f64 x 4)) (fma.f64 2 (*.f64 x y) (neg.f64 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (fma.f64 2 y x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 2 y x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (fma.f64 2 y x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 x (*.f64 2 y)) (fma.f64 2 (*.f64 x y) (neg.f64 (*.f64 x x))) (pow.f64 x 4)) (+.f64 (pow.f64 x 6) (pow.f64 (*.f64 x (*.f64 2 y)) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (-.f64 x (*.f64 2 y))) (-.f64 (pow.f64 x 4) (pow.f64 (*.f64 x (*.f64 2 y)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (fma.f64 2 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x x))) (pow.f64 (exp.f64 x) (*.f64 2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) x) (+.f64 1 (expm1.f64 (*.f64 x (*.f64 2 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x x))) (+.f64 1 (expm1.f64 (*.f64 x (*.f64 2 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (*.f64 2 y)))) (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) (*.f64 2 y)) (+.f64 1 (expm1.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (*.f64 2 y)))) (+.f64 1 (expm1.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (fma.f64 2 y x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 x (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 2 y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (*.f64 x (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 x y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) y (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 x x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (*.f64 2 y)) 1 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 x (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (*.f64 2 y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) (*.f64 (cbrt.f64 (+.f64 x x)) y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (+.f64 x x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) x) (*.f64 x (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (*.f64 2 y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 x) 2) (*.f64 x (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (*.f64 2 y))) (pow.f64 (cbrt.f64 (*.f64 x (*.f64 2 y))) 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (*.f64 2 y))) 2) (cbrt.f64 (*.f64 x (*.f64 2 y))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x x)) (*.f64 (sqrt.f64 (+.f64 x x)) y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 x (sqrt.f64 x)) (*.f64 x (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (*.f64 2 y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (+.f64 x x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (*.f64 2 y))) (sqrt.f64 (*.f64 x (*.f64 2 y))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 y) x (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 x)) (sqrt.f64 x) (*.f64 x (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 x (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x x) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x x) (sqrt.f64 y)) (sqrt.f64 y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 2 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 (*.f64 x x) 4))) (cbrt.f64 (+.f64 x x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 (+.f64 x x))) (sqrt.f64 (+.f64 x x)) (*.f64 x x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2) (-.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 y y))) (/.f64 (pow.f64 y 4) (-.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (fma.f64 2 y x) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y))) (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y))) 2) (cbrt.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 x (sqrt.f64 (*.f64 y (fma.f64 x 2 y)))) (hypot.f64 x (sqrt.f64 (*.f64 y (fma.f64 x 2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3) (pow.f64 y 6)) (/.f64 1 (fma.f64 (*.f64 y y) (-.f64 (*.f64 y y) (*.f64 x (fma.f64 2 y x))) (pow.f64 (*.f64 x (fma.f64 2 y x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2) (pow.f64 y 4)) (/.f64 1 (-.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 y y) (-.f64 (*.f64 y y) (*.f64 x (fma.f64 2 y x))) (pow.f64 (*.f64 x (fma.f64 2 y x)) 2)) (+.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3) (pow.f64 y 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 y y)) (-.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2) (pow.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3) (pow.f64 y 6)) (fma.f64 (*.f64 y y) (-.f64 (*.f64 y y) (*.f64 x (fma.f64 2 y x))) (pow.f64 (*.f64 x (fma.f64 2 y x)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3) (pow.f64 y 6)) (+.f64 (pow.f64 y 4) (-.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2) (*.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2) (pow.f64 y 4)) (-.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3) (pow.f64 y 6))) (neg.f64 (fma.f64 (*.f64 y y) (-.f64 (*.f64 y y) (*.f64 x (fma.f64 2 y x))) (pow.f64 (*.f64 x (fma.f64 2 y x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2) (pow.f64 y 4))) (neg.f64 (-.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) (pow.f64 (*.f64 y (fma.f64 x 2 y)) 3)) (+.f64 (pow.f64 x 4) (-.f64 (pow.f64 (*.f64 y (fma.f64 x 2 y)) 2) (*.f64 (*.f64 x x) (*.f64 y (fma.f64 x 2 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) (pow.f64 (*.f64 y (fma.f64 x 2 y)) 2)) (-.f64 (*.f64 x x) (*.f64 y (fma.f64 x 2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 y 4) (pow.f64 (*.f64 x (fma.f64 2 y x)) 2)) (-.f64 (*.f64 y y) (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 x (sqrt.f64 (*.f64 y (fma.f64 x 2 y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 y y) (-.f64 (*.f64 y y) (*.f64 x (fma.f64 2 y x))) (pow.f64 (*.f64 x (fma.f64 2 y x)) 2)) (+.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 3) (pow.f64 y 6))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 y y)) (-.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2) (pow.f64 y 4))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x x))) (exp.f64 (*.f64 y (fma.f64 x 2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) x) (pow.f64 (*.f64 (pow.f64 (exp.f64 x) 2) (exp.f64 y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x x))) (pow.f64 (*.f64 (pow.f64 (exp.f64 x) 2) (exp.f64 y)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (fma.f64 2 y x)))) (pow.f64 (exp.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) (fma.f64 2 y x)) (+.f64 1 (expm1.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (fma.f64 2 y x)))) (+.f64 1 (expm1.f64 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y y))) (pow.f64 (exp.f64 x) (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) y) (+.f64 1 (expm1.f64 (*.f64 x (fma.f64 2 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y y))) (+.f64 1 (expm1.f64 (*.f64 x (fma.f64 2 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 y (fma.f64 x 2 y))) (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 x) 2) (exp.f64 y)) y) (pow.f64 (exp.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 y (fma.f64 x 2 y))) (+.f64 1 (expm1.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (*.f64 (pow.f64 (exp.f64 x) 2) (exp.f64 y)) y) (+.f64 1 (expm1.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (fma.f64 2 y x) (*.f64 y y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 y (fma.f64 x 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 (*.f64 y (fma.f64 x 2 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 x (*.f64 2 y)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (fma.f64 2 y x) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (*.f64 y (fma.f64 x 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) 1 (*.f64 (*.f64 y (fma.f64 x 2 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x x) y (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (+.f64 x x) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y y (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (fma.f64 x 2 y) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (*.f64 2 y)) 1 (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (fma.f64 2 y x)) 1 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y y) 1 (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 y (fma.f64 x 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 (*.f64 y (fma.f64 x 2 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (*.f64 2 y)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (fma.f64 2 y x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y y) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (fma.f64 x 2 y)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (fma.f64 2 y x))) (cbrt.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2)) (cbrt.f64 (*.f64 x (fma.f64 2 y x))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 4)) (*.f64 (cbrt.f64 (+.f64 x x)) y) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) y) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (+.f64 x x)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 y) y) (pow.f64 (cbrt.f64 y) 2) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) x) (*.f64 y (fma.f64 x 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) x) (*.f64 (*.f64 y (fma.f64 x 2 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (*.f64 2 y)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 x) 2) (*.f64 y (fma.f64 x 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 y (fma.f64 x 2 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (*.f64 2 y))) (pow.f64 (cbrt.f64 (*.f64 x (*.f64 2 y))) 2) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (*.f64 2 y))) 2) (cbrt.f64 (*.f64 x (*.f64 2 y))) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (fma.f64 2 y x))) (sqrt.f64 (*.f64 x (fma.f64 2 y x))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x x)) (*.f64 (sqrt.f64 (+.f64 x x)) y) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 x (sqrt.f64 x)) (*.f64 y (fma.f64 x 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 x (sqrt.f64 x)) (*.f64 (*.f64 y (fma.f64 x 2 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (*.f64 2 y)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 y (sqrt.f64 y)) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (+.f64 x x)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (*.f64 2 y))) (sqrt.f64 (*.f64 x (*.f64 2 y))) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 6) (pow.f64 (*.f64 x (*.f64 2 y)) 3)) (/.f64 1 (fma.f64 (*.f64 x (*.f64 2 y)) (fma.f64 2 (*.f64 x y) (neg.f64 (*.f64 x x))) (pow.f64 x 4))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 4) (pow.f64 (*.f64 x (*.f64 2 y)) 2)) (/.f64 1 (*.f64 x (-.f64 x (*.f64 2 y)))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 y) x (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 y)) (sqrt.f64 y) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 x)) (sqrt.f64 x) (*.f64 y (fma.f64 x 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (*.f64 y (fma.f64 x 2 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (fma.f64 x 2 y))) 2) (cbrt.f64 (*.f64 y (fma.f64 x 2 y))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (fma.f64 x 2 y))) (sqrt.f64 (*.f64 y (fma.f64 x 2 y))) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 y (fma.f64 x 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (*.f64 (*.f64 y (fma.f64 x 2 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x x) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 x x) (sqrt.f64 y)) (sqrt.f64 y) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) 2 (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (*.f64 (*.f64 x x) 4))) (cbrt.f64 (+.f64 x x)) (fma.f64 x x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 (+.f64 x x))) (sqrt.f64 (+.f64 x x)) (fma.f64 x x (*.f64 y y)))))))"]],"rules":[["egg-rr",105],["egg-rr",69]],"stop":[["node limit",1]],"time":54.156982421875,"type":"rewrite"},{"count":[[222,184]],"egraph":[[19,7404,393,0.11653783300000001],[18,7374,393,0.105109166],[17,7292,393,0.095928833],[16,6972,393,0.086791166],[15,6638,393,0.077550582],[14,6088,393,0.06849941600000001],[13,5336,393,0.058327416],[12,4760,393,0.048626082],[11,4249,393,0.040398541],[10,3856,393,0.032458791],[9,3555,393,0.025960416],[8,3311,393,0.020452749],[7,3125,393,0.015691498999999998],[6,2853,393,0.011418082999999999],[5,1566,393,0.007254248999999999],[4,416,393,0.003263791],[3,151,393,0.001222749],[2,69,399,0.000598499],[1,32,480,0.000295624],[0,12,525,0.000109708]],"inputs":[["(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(*.f64 2 (*.f64 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 y x))","(*.f64 (*.f64 2 y) x)","(*.f64 x (*.f64 2 y))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(*.f64 2 (*.f64 y x))","(*.f64 (*.f64 2 y) x)","(*.f64 x (*.f64 2 y))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(*.f64 2 (*.f64 y x))","(*.f64 (*.f64 2 y) x)","(*.f64 x (*.f64 2 y))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(fma.f64 2 (*.f64 y x) (*.f64 y y))","(*.f64 y (+.f64 (*.f64 2 x) y))","(*.f64 y (fma.f64 2 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 2 y) x))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(fma.f64 2 (*.f64 y x) (*.f64 y y))","(*.f64 y (+.f64 (*.f64 2 x) y))","(*.f64 y (fma.f64 2 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(fma.f64 2 (*.f64 y x) (*.f64 y y))","(*.f64 y (+.f64 (*.f64 2 x) y))","(*.f64 y (fma.f64 2 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 y y (*.f64 x (fma.f64 2 y x)))"]],"stop":[["node limit",1]],"time":143.974853515625,"type":"simplify"},{"compiler":[[3113,1482]],"time":31.591064453125,"type":"eval"},{"alts":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","next",0.00390625],["(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))","fresh",0.0078125]],"compiler":[[11,6],[13,7],[11,6],[13,7]],"count":[[186,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[184,2],"picked":[1,0]}],"min-error":[0],"time":53.968994140625,"type":"prune"},{"compiler":[[24,12]],"locations":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))",0.00390625,true]],"time":6.075927734375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","x","-inf",0.2978515625],["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","x","inf",0.277099609375],["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","x","0",0.2138671875],["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","y","-inf",0.535888671875],["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","y","inf",0.282958984375],["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","y","0",0.2919921875]],"time":1.984130859375,"type":"series"},{"count":[[1,21]],"egraph":[[2,1605,12,0.016761207],[1,140,12,0.002253332],[0,7,12,0.000196291]],"inputs":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 2 y x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y y) 1) (*.f64 x (fma.f64 2 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y y (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))) (pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))) 2) (cbrt.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 y (sqrt.f64 (*.f64 x (fma.f64 2 y x)))) (hypot.f64 y (sqrt.f64 (*.f64 x (fma.f64 2 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y y) 3) (pow.f64 (*.f64 x (fma.f64 2 y x)) 3)) (+.f64 (*.f64 (*.f64 y y) (*.f64 y y)) (-.f64 (pow.f64 (*.f64 x (fma.f64 2 y x)) 2) (*.f64 (*.f64 y y) (*.f64 x (fma.f64 2 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y y) (*.f64 y y)) (pow.f64 (*.f64 x (fma.f64 2 y x)) 2)) (-.f64 (*.f64 y y) (*.f64 x (fma.f64 2 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 y (sqrt.f64 (*.f64 x (fma.f64 2 y x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y y (*.f64 x (fma.f64 2 y x)))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":34.48291015625,"type":"rewrite"},{"count":[[45,31]],"egraph":[[19,7394,216,0.115763458],[18,7364,216,0.104409958],[17,7278,216,0.09524645799999999],[16,6952,216,0.08608099899999999],[15,6618,216,0.07680987399999999],[14,6072,216,0.06780328999999999],[13,5328,216,0.057752873999999996],[12,4750,216,0.048246831999999996],[11,4239,216,0.040230416],[10,3846,216,0.032339665999999996],[9,3545,216,0.025792666],[8,3301,216,0.020209540999999998],[7,3115,216,0.015460624999999999],[6,2843,216,0.011207333],[5,1556,216,0.007104042],[4,418,216,0.003120542],[3,151,216,0.0011414580000000001],[2,69,222,0.0005421250000000001],[1,32,267,0.00025775],[0,12,294,9.05e-5]],"inputs":[["(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 x y) (*.f64 x x))","(*.f64 x (+.f64 x (*.f64 2 y)))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(fma.f64 2 (*.f64 x y) (*.f64 y y))","(*.f64 y (+.f64 (*.f64 x 2) y))","(*.f64 y (fma.f64 x 2 y))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(fma.f64 2 (*.f64 x y) (*.f64 y y))","(*.f64 y (+.f64 (*.f64 x 2) y))","(*.f64 y (fma.f64 x 2 y))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(fma.f64 2 (*.f64 x y) (*.f64 y y))","(*.f64 y (+.f64 (*.f64 x 2) y))","(*.f64 y (fma.f64 x 2 y))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 x y) (*.f64 x x))","(*.f64 x (+.f64 x (*.f64 2 y)))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 x y) (*.f64 x x))","(*.f64 x (+.f64 x (*.f64 2 y)))","(*.f64 x (fma.f64 2 y x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 x y) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 x y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x (fma.f64 2 y x) (*.f64 y y))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))"]],"stop":[["node limit",1]],"time":135.16015625,"type":"simplify"},{"compiler":[[382,206]],"time":5.3330078125,"type":"eval"},{"alts":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","done",0.00390625],["(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))","next",0.0078125]],"compiler":[[11,6],[13,7],[13,7]],"count":[[33,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[31,0],"picked":[1,1]}],"min-error":[0],"time":4.786865234375,"type":"prune"},{"compiler":[[28,10]],"locations":[["(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))",0.0078125,true]],"time":5.798095703125,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))","y","-inf",0.22412109375],["(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))","y","inf",0.258056640625],["(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))","y","0",0.2060546875],["(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))","x","-inf",0.23583984375],["(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))","x","inf",0.2041015625],["(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))","x","0",0.294921875]],"time":1.531982421875,"type":"series"},{"count":[[1,22]],"egraph":[[2,1824,14,0.017832083999999998],[1,159,14,0.002597626],[0,8,15,0.000214959]],"inputs":[["(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (hypot.f64 x y) 2) (*.f64 x (*.f64 2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 2 y)) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (*.f64 2 y)) 1) (pow.f64 (hypot.f64 x y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 x (*.f64 2 y)) (*.f64 x x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))) (pow.f64 (cbrt.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))) 2) (cbrt.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))) (sqrt.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 2 y)) 3) (pow.f64 (pow.f64 (hypot.f64 x y) 2) 3)) (+.f64 (*.f64 (*.f64 x (*.f64 2 y)) (*.f64 x (*.f64 2 y))) (-.f64 (pow.f64 (pow.f64 (hypot.f64 x y) 2) 2) (*.f64 (*.f64 x (*.f64 2 y)) (pow.f64 (hypot.f64 x y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (*.f64 2 y)) (*.f64 x (*.f64 2 y))) (pow.f64 (pow.f64 (hypot.f64 x y) 2) 2)) (-.f64 (*.f64 x (*.f64 2 y)) (pow.f64 (hypot.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (*.f64 2 y) (pow.f64 (hypot.f64 x y) 2))))))))"]],"rules":[["egg-rr",22]],"stop":[["node limit",1]],"time":35.988037109375,"type":"rewrite"},{"count":[[46,32]],"egraph":[[19,7401,216,0.11568650100000001],[18,7371,216,0.10428633400000001],[17,7289,216,0.095213792],[16,6965,216,0.086028292],[15,6627,216,0.07681533300000001],[14,6075,216,0.06782570800000001],[13,5329,216,0.05768962400000001],[12,4749,216,0.048199790000000006],[11,4240,216,0.040178874],[10,3847,216,0.032308874],[9,3544,216,0.025799832],[8,3300,216,0.020234832],[7,3115,216,0.015467916],[6,2843,216,0.011178624],[5,1568,216,0.007063041],[4,418,216,0.003134416],[3,151,216,0.001137416],[2,69,222,0.000540666],[1,32,267,0.000260333],[0,12,294,9.0791e-5]],"inputs":[["(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(fma.f64 2 (*.f64 y x) (*.f64 y y))","(fma.f64 y y (*.f64 2 (*.f64 y x)))","(*.f64 y (+.f64 y (*.f64 2 x)))","(*.f64 y (fma.f64 2 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 y 2) x))","(*.f64 x (fma.f64 y 2 x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 y 2) x))","(*.f64 x (fma.f64 y 2 x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 x 2))","(fma.f64 2 (*.f64 y x) (*.f64 x x))","(*.f64 x (+.f64 (*.f64 y 2) x))","(*.f64 x (fma.f64 y 2 x))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(fma.f64 2 (*.f64 y x) (*.f64 y y))","(fma.f64 y y (*.f64 2 (*.f64 y x)))","(*.f64 y (+.f64 y (*.f64 2 x)))","(*.f64 y (fma.f64 2 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 (*.f64 y x)) (pow.f64 y 2))","(fma.f64 2 (*.f64 y x) (*.f64 y y))","(fma.f64 y y (*.f64 2 (*.f64 y x)))","(*.f64 y (+.f64 y (*.f64 2 x)))","(*.f64 y (fma.f64 2 x y))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))","(+.f64 (*.f64 2 (*.f64 y x)) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 (*.f64 y x) (*.f64 y y)) (*.f64 x x))","(fma.f64 2 (*.f64 y x) (fma.f64 y y (*.f64 x x)))","(fma.f64 x (fma.f64 y 2 x) (*.f64 y y))","(fma.f64 y (fma.f64 2 x y) (*.f64 x x))","(fma.f64 y y (*.f64 x (fma.f64 y 2 x)))"]],"stop":[["node limit",1]],"time":134.997802734375,"type":"simplify"},{"compiler":[[429,254]],"time":5.4970703125,"type":"eval"},{"alts":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","done",0.00390625],["(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))","done",0.0078125]],"compiler":[[11,6],[13,7]],"count":[[34,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[32,0],"picked":[1,1]}],"min-error":[0],"time":4.73095703125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))",0.00390625,1]],"compiler":[[3,2],[3,2],[15,9],[44,21]],"count":[[4,1]],"inputs":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))","(fma.f64 x (*.f64 2 y) (fma.f64 x x (*.f64 y y)))","(fma.f64 x x (*.f64 y (fma.f64 x 2 y)))","(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))"]],"link":["."],"name":["Examples.Basics.ProofTests:f4 from sbv-4.4"],"oracle":[0.01953125],"outputs":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))"]],"time":10.927978515625,"times":[["x",3.278076171875],["y",3.2578125],["(+.f64 (+.f64 (*.f64 x x) (*.f64 (*.f64 x 2) y)) (*.f64 y y))",3.429931640625]],"type":"regimes"},{"compiler":[[11,6]],"egraph":[[1,8,12,2.9084e-5],[0,7,12,1.7542e-5]],"inputs":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y y (*.f64 x (fma.f64 2 y x)))"]],"stop":[["done",1],["saturated",1]],"time":8.338134765625,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[11,6],[11,6],[11,6]],"remove-preprocessing":[["(sort x y)"]],"time":9.35205078125,"type":"end"}]
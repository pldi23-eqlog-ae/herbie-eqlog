[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.7808685302734375,0.2186431884765625,0.00048828125],[11,0.7808685302734375,0.2186431884765625,0.00048828125],[10,0.7808685302734375,0.2186431884765625,0.00048828125],[9,0.7808685302734375,0.2186431884765625,0.00048828125],[8,0.7808685302734375,0.2186431884765625,0.00048828125],[7,0.7808685302734375,0.2186431884765625,0.00048828125],[6,0.7496337890625,0.2498779296875,0.00048828125],[5,0.7496337890625,0.2498779296875,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":36.5029296875,"type":"analyze"},{"outcomes":[["body",4096,"valid",36.4619140625,122],["body",512,"valid",136.849365234375,1553],["body",1024,"valid",161.8447265625,1095],["body",2048,"valid",659.09423828125,2083],["body",256,"valid",148.2197265625,3403]],"time":1151.281982421875,"type":"sample"},{"compiler":[[9,6]],"egraph":[[0,1,1,1.125e-6],[11,1830,12,0.016847916],[10,1698,12,0.013687291],[9,1140,12,0.009889332],[8,623,12,0.005721374],[7,318,12,0.0030934990000000004],[6,192,12,0.0016500820000000002],[5,125,12,0.001011165],[4,73,12,0.000618249],[3,40,12,0.000355374],[2,27,12,0.000204666],[1,16,12,0.000115874],[0,7,12,5.6041e-5]],"inputs":[["0"],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":39.30908203125,"type":"preprocess"},{"count":[[1,1]],"egraph":[[11,1830,12,0.016756332000000002],[10,1698,12,0.013595373000000001],[9,1140,12,0.009822832],[8,623,12,0.0056710400000000005],[7,318,12,0.00305654],[6,192,12,0.0016301240000000002],[5,125,12,0.000994249],[4,73,12,0.000615207],[3,40,12,0.000353499],[2,27,12,0.000198624],[1,16,12,0.000112249],[0,7,12,5.2791e-5]],"inputs":[["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))"]],"stop":[["saturated",1]],"time":28.291015625,"type":"simplify"},{"compiler":[[9,6]],"time":0.212890625,"type":"eval"},{"alts":[["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","next",31.462158312468016]],"compiler":[[9,6],[9,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[31.462158312468016],"time":0.716064453125,"type":"prune"},{"compiler":[[20,9]],"locations":[["(cos.f64 x)",0.0390625,true],["(-.f64 1 (cos.f64 x))",1.4801368839066142,true],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))",18.535165326119238,true]],"time":5.141845703125,"type":"localize"},{"count":[[3,20]],"series":[["(cos.f64 x)","x","-inf",0.158935546875],["(cos.f64 x)","x","inf",0.135986328125],["(cos.f64 x)","x","0",0.18310546875],["(-.f64 1 (cos.f64 x))","x","-inf",0.166015625],["(-.f64 1 (cos.f64 x))","x","inf",0.14306640625],["(-.f64 1 (cos.f64 x))","x","0",0.23681640625],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","x","-inf",0.329833984375],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","x","inf",0.482177734375],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","x","0",0.447998046875]],"time":2.38916015625,"type":"series"},{"count":[[3,78]],"egraph":[[2,2135,21,0.019789750000000002],[1,152,21,0.002827083],[0,7,21,0.000207875]],"inputs":[["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","(-.f64 1 (cos.f64 x))","(cos.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 x -2) (neg.f64 (*.f64 (cos.f64 x) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (pow.f64 x -2) (*.f64 (cos.f64 x) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) (*.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) 2) (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (*.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) x) (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 1 (cos.f64 x))) (/.f64 1 (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -2) (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (cos.f64 x)) x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) 1) (/.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) 1) (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (/.f64 (-.f64 1 (cos.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) x) (/.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 x 4))) (/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (cbrt.f64 (pow.f64 x 4))) (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (/.f64 (-.f64 1 (cos.f64 x)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (-.f64 1 (cos.f64 x))) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3) (pow.f64 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) (cbrt.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (sqrt.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (/.f64 1 (+.f64 1 (+.f64 (cos.f64 x) (pow.f64 (cos.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (/.f64 1 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1 (+.f64 (cos.f64 x) (pow.f64 (cos.f64 x) 2))) (-.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1 (cos.f64 x)) (*.f64 (sin.f64 x) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3)) (+.f64 1 (+.f64 (cos.f64 x) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (pow.f64 (cos.f64 x) 3))) (neg.f64 (+.f64 1 (+.f64 (cos.f64 x) (pow.f64 (cos.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) (sin.f64 x))) (neg.f64 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (neg.f64 (cos.f64 x)) 3)) (+.f64 1 (-.f64 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x))) (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (*.f64 (neg.f64 (cos.f64 x)) (neg.f64 (cos.f64 x)))) (-.f64 1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (neg.f64 (cos.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 x)) (pow.f64 (cbrt.f64 (cos.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 x)) 2) (cbrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 x)))))))"]],"rules":[["egg-rr",16],["egg-rr",28],["egg-rr",34]],"stop":[["node limit",1]],"time":42.884033203125,"type":"rewrite"},{"count":[[98,102]],"egraph":[[5,6865,258,0.029267374],[4,3469,258,0.015334332],[3,889,258,0.006467749],[2,288,262,0.002040416],[1,118,266,0.000743291],[0,49,270,0.000218291]],"inputs":[["1/2","(+.f64 1/2 (*.f64 -1/24 (pow.f64 x 2)))","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (+.f64 (*.f64 -1/40320 (pow.f64 x 6)) (*.f64 1/720 (pow.f64 x 4)))))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(*.f64 1/2 (pow.f64 x 2))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/24 (pow.f64 x 4)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (+.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 -1/40320 (pow.f64 x 8)))))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))"]],"method":["egg-herbie"],"outputs":[["1/2","(+.f64 1/2 (*.f64 -1/24 (pow.f64 x 2)))","(+.f64 1/2 (*.f64 -1/24 (*.f64 x x)))","(fma.f64 -1/24 (*.f64 x x) 1/2)","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 (fma.f64 -1/24 (*.f64 x x) 1/2) (*.f64 1/720 (pow.f64 x 4)))","(fma.f64 -1/24 (*.f64 x x) (fma.f64 1/720 (pow.f64 x 4) 1/2))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) 1/720 -1/24) 1/2)","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (+.f64 (*.f64 -1/40320 (pow.f64 x 6)) (*.f64 1/720 (pow.f64 x 4)))))","(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4)))))","(+.f64 (fma.f64 -1/24 (*.f64 x x) 1/2) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 1/720 (pow.f64 x 4) (*.f64 -1/40320 (pow.f64 x 6)))))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) 1/720 -1/24) (fma.f64 -1/40320 (pow.f64 x 6) 1/2))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","(/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))","(*.f64 1/2 (pow.f64 x 2))","(*.f64 1/2 (*.f64 x x))","(*.f64 x (*.f64 1/2 x))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/24 (pow.f64 x 4)))","(fma.f64 1/2 (*.f64 x x) (*.f64 -1/24 (pow.f64 x 4)))","(*.f64 x (*.f64 x (fma.f64 -1/24 (*.f64 x x) 1/2)))","(*.f64 (*.f64 x x) (fma.f64 -1/24 (*.f64 x x) 1/2))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 1/720 (pow.f64 x 6) (*.f64 -1/24 (pow.f64 x 4))))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) 1/720 -1/24) 1/2))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (+.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 -1/40320 (pow.f64 x 8)))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (fma.f64 1/720 (pow.f64 x 6) (*.f64 -1/40320 (pow.f64 x 8)))))","(fma.f64 -1/24 (pow.f64 x 4) (fma.f64 1/720 (pow.f64 x 6) (*.f64 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) 1/2))))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) 1/720 -1/24) (fma.f64 -1/40320 (pow.f64 x 6) 1/2)))","1","(+.f64 1 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 1 (*.f64 (*.f64 x x) -1/2))","(fma.f64 (*.f64 x x) -1/2 1)","(fma.f64 x (*.f64 x -1/2) 1)","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (*.f64 (pow.f64 x 4) 1/24)))","(+.f64 1 (fma.f64 (*.f64 x x) -1/2 (*.f64 (pow.f64 x 4) 1/24)))","(fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 4) 1/24 1))","(+.f64 1 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 1 (fma.f64 -1/2 (*.f64 x x) (fma.f64 1/24 (pow.f64 x 4) (*.f64 (pow.f64 x 6) -1/720))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 1) (fma.f64 (pow.f64 x 6) -1/720 (*.f64 (pow.f64 x 4) 1/24)))","(+.f64 1 (fma.f64 (pow.f64 x 6) -1/720 (fma.f64 x (*.f64 x -1/2) (*.f64 (pow.f64 x 4) 1/24))))","(fma.f64 (pow.f64 x 6) -1/720 (fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 4) 1/24 1)))","(fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 4) 1/24 (fma.f64 (pow.f64 x 6) -1/720 1)))"]],"stop":[["node limit",1]],"time":44.302001953125,"type":"simplify"},{"compiler":[[1358,795]],"time":15.81689453125,"type":"eval"},{"alts":[["(*.f64 (pow.f64 x -2) (-.f64 1 (cos.f64 x)))","fresh",31.278835788268132],["(/.f64 (-.f64 1 (log1p.f64 (expm1.f64 (cos.f64 x)))) (*.f64 x x))","fresh",31.45663082223646],["(*.f64 (/.f64 1 x) (/.f64 (-.f64 1 (cos.f64 x)) x))","fresh",30.700170620385567],["(/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x))) (*.f64 x x))","next",19.27147669082558],["(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (/.f64 1 (+.f64 1 (cos.f64 x)))) (*.f64 x x))","fresh",19.28391916334814],["(fma.f64 -1/24 (*.f64 x x) 1/2)","fresh",32.088670732027964],["(/.f64 (*.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) (cbrt.f64 (-.f64 1 (cos.f64 x)))) (*.f64 x x))","fresh",31.534509735084605]],"compiler":[[9,7],[11,8],[11,8],[15,9],[17,11],[7,5],[18,13],[9,7],[11,8],[11,8],[15,9],[17,11],[7,5],[18,13]],"count":[[103,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[102,7],"picked":[1,0]}],"min-error":[0.03125],"time":17.612060546875,"type":"prune"},{"compiler":[[43,15]],"locations":[["(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x)))",0.171875,true],["(*.f64 (sin.f64 x) (sin.f64 x))",0.24609375,true],["(+.f64 1 (cos.f64 x))",0.42241055626447865,true],["(/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x))) (*.f64 x x))",18.491643946925244,true]],"time":9.428955078125,"type":"localize"},{"count":[[4,44]],"series":[["(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x)))","x","-inf",0.301025390625],["(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x)))","x","inf",0.278076171875],["(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x)))","x","0",0.2021484375],["(*.f64 (sin.f64 x) (sin.f64 x))","x","-inf",0.138916015625],["(*.f64 (sin.f64 x) (sin.f64 x))","x","inf",0.2060546875],["(*.f64 (sin.f64 x) (sin.f64 x))","x","0",0.192138671875],["(+.f64 1 (cos.f64 x))","x","-inf",0.141845703125],["(+.f64 1 (cos.f64 x))","x","inf",0.171142578125],["(+.f64 1 (cos.f64 x))","x","0",0.171142578125],["(/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x))) (*.f64 x x))","x","-inf",0.995849609375],["(/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x))) (*.f64 x x))","x","inf",0.802978515625],["(/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x))) (*.f64 x x))","x","0",0.47998046875]],"time":4.238037109375,"type":"series"},{"count":[[4,182]],"egraph":[[2,3540,30,0.027693375],[1,228,30,0.004653292000000001],[0,10,46,0.000291292]],"inputs":[["(/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x))) (*.f64 x x))","(+.f64 1 (cos.f64 x))","(*.f64 (sin.f64 x) (sin.f64 x))","(/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (-.f64 1 (cos.f64 x))) (pow.f64 x -2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (-.f64 1 (cos.f64 x))) (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (-.f64 1 (cos.f64 x))) (pow.f64 x -2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (-.f64 1 (cos.f64 x))) (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/2 (*.f64 (+.f64 1 (cos.f64 x)) (*.f64 x x))) (/.f64 (*.f64 (cos.f64 (+.f64 x x)) 1/2) (*.f64 (+.f64 1 (cos.f64 x)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2) (/.f64 1 (*.f64 (+.f64 1 (cos.f64 x)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) (*.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) 2) (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (*.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) x) (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 1 (cos.f64 x))) (/.f64 1 (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -2) (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 1 (cos.f64 x)) x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 x) 2) 1) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) 1) (/.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) 1) (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (*.f64 x x)) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (/.f64 (-.f64 1 (cos.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) x) (/.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (pow.f64 x 4))) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (pow.f64 x 4))) (/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) (cbrt.f64 (pow.f64 x 4))) (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (cbrt.f64 (pow.f64 x 4))) (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2) (pow.f64 x 4)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (/.f64 (-.f64 1 (cos.f64 x)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3) (pow.f64 (*.f64 x x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 1 (-.f64 1 (cos.f64 x))) (*.f64 x x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 1 (cos.f64 x)) (*.f64 x x)) (pow.f64 (sin.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 x (/.f64 (-.f64 1 (cos.f64 x)) x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2) (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (-.f64 1 (cos.f64 x))) (pow.f64 x -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3) (pow.f64 (*.f64 x x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1 (-.f64 1 (cos.f64 x))) (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 1 (cos.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2) (/.f64 1 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) (pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) 2) (cbrt.f64 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1 (cos.f64 x))) (sqrt.f64 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3)) (/.f64 1 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) 1) 1) (+.f64 1 (pow.f64 (cos.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (neg.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (-.f64 (cos.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3)) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3)) (fma.f64 (cos.f64 x) (cos.f64 x) (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1 (pow.f64 (cos.f64 x) 3))) (neg.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 (cos.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 1 (cos.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 1 (cos.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) 1) 1) (+.f64 1 (pow.f64 (cos.f64 x) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 (cos.f64 x)) (pow.f64 (sin.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 1 (cos.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 1 (cos.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (cos.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (cos.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 (-.f64 1 (cos.f64 x))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cos.f64 x) 1 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 1 (cos.f64 x)) (/.f64 1 (pow.f64 (sin.f64 x) 2)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (cos.f64 x)) (cbrt.f64 (pow.f64 (cos.f64 x) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2)) (cbrt.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cos.f64 x)) (sqrt.f64 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 1 (-.f64 1 (cos.f64 x)))) 2) (cbrt.f64 (/.f64 1 (-.f64 1 (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 1 (-.f64 1 (cos.f64 x)))) (sqrt.f64 (/.f64 1 (-.f64 1 (cos.f64 x)))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sin.f64 x)) (/.f64 1 (tan.f64 (/.f64 x 2))) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) 2) (sin.f64 x)) (/.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) (sin.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 1 (cos.f64 x))) (sin.f64 x)) (/.f64 (sqrt.f64 (+.f64 1 (cos.f64 x))) (sin.f64 x)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) 2) 1) (/.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) (pow.f64 (sin.f64 x) 2)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 1 (cos.f64 x))) 1) (/.f64 (sqrt.f64 (+.f64 1 (cos.f64 x))) (pow.f64 (sin.f64 x) 2)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (pow.f64 (sin.f64 x) 4))) (/.f64 (+.f64 1 (cos.f64 x)) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) 2) (cbrt.f64 (pow.f64 (sin.f64 x) 4))) (/.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (+.f64 1 (cos.f64 x))) (cbrt.f64 (pow.f64 (sin.f64 x) 4))) (/.f64 (sqrt.f64 (+.f64 1 (cos.f64 x))) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (+.f64 1 (cos.f64 x)) (-.f64 1 (cos.f64 (+.f64 x x)))) 2 (neg.f64 (/.f64 (pow.f64 (cos.f64 x) 2) (-.f64 1 (cos.f64 x)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (neg.f64 (*.f64 (cos.f64 (+.f64 x x)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1/2 (*.f64 -1/2 (cos.f64 (+.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/2 (*.f64 (cos.f64 (+.f64 x x)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/2 (/.f64 (cos.f64 (+.f64 x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (sin.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 2 (-.f64 1 (cos.f64 (+.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (cos.f64 (+.f64 x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (cos.f64 (+.f64 x x)))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 2) 3)) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (cos.f64 x) 2) 2) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/8 (pow.f64 (*.f64 (cos.f64 (+.f64 x x)) 1/2) 3)) (+.f64 1/4 (+.f64 (pow.f64 (*.f64 (cos.f64 (+.f64 x x)) 1/2) 2) (*.f64 1/2 (*.f64 (cos.f64 (+.f64 x x)) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 2) 2)) (+.f64 1 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/4 (pow.f64 (*.f64 (cos.f64 (+.f64 x x)) 1/2) 2)) (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 x) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 2 (-.f64 1 (cos.f64 (+.f64 x x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sin.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (sin.f64 x))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 -1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (cbrt.f64 (pow.f64 (cos.f64 x) 2))) (cbrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (sqrt.f64 (cos.f64 x))) (sqrt.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 1 (cos.f64 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 1 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (cos.f64 x))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 1 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 1 (cos.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/2 (+.f64 1 (cos.f64 x))) (/.f64 (*.f64 (cos.f64 (+.f64 x x)) 1/2) (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 (/.f64 1 (tan.f64 (/.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (*.f64 (sin.f64 x) (/.f64 1 (+.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2) (/.f64 1 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) (cbrt.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (/.f64 1 (+.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) (sqrt.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (/.f64 1 (+.f64 (neg.f64 (cos.f64 x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) 1) (tan.f64 (/.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 (/.f64 x 2)) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) 1) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) 2)) (/.f64 (sin.f64 x) (cbrt.f64 (+.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) 2)) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 (+.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) 2)) (cbrt.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (+.f64 1 (cos.f64 x)))) (/.f64 (pow.f64 (sin.f64 x) 2) (sqrt.f64 (+.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (sqrt.f64 (+.f64 1 (cos.f64 x)))) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (sqrt.f64 (+.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (pow.f64 (cos.f64 x) 3))) (fma.f64 (cos.f64 x) (-.f64 (cos.f64 x) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (pow.f64 (sin.f64 x) 2)) (-.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1 (cos.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (-.f64 1 (cos.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 3) (pow.f64 (+.f64 1 (cos.f64 x)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 1 (-.f64 1 (cos.f64 x))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 (neg.f64 (cos.f64 x)) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (pow.f64 (sin.f64 x) 2) 3) (pow.f64 (+.f64 1 (cos.f64 x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log1p.f64 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log1p.f64 (neg.f64 (cos.f64 x))) 1))))))"]],"rules":[["egg-rr",49],["egg-rr",33],["egg-rr",50],["egg-rr",50]],"stop":[["node limit",1]],"time":58.06787109375,"type":"rewrite"},{"count":[[226,220]],"egraph":[[5,7247,520,0.026680874],[4,2457,520,0.016415249],[3,1256,520,0.006721332],[2,393,520,0.002856124],[1,158,572,0.001021749],[0,68,576,0.000299666]],"inputs":[["1/2","(+.f64 1/2 (*.f64 -1/24 (pow.f64 x 2)))","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (+.f64 (*.f64 -1/40320 (pow.f64 x 6)) (*.f64 1/720 (pow.f64 x 4)))))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","2","(+.f64 2 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 (cos.f64 x) 1)","(+.f64 (cos.f64 x) 1)","(+.f64 (cos.f64 x) 1)","(+.f64 (cos.f64 x) 1)","(pow.f64 x 2)","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (pow.f64 x 2))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2)))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 -1/315 (pow.f64 x 8)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2))))","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(*.f64 1/2 (pow.f64 x 2))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/24 (pow.f64 x 4)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (+.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 -1/40320 (pow.f64 x 8)))))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 (cos.f64 x) 1))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 (cos.f64 x) 1))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 (cos.f64 x) 1))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 (cos.f64 x) 1))"]],"method":["egg-herbie"],"outputs":[["1/2","(+.f64 1/2 (*.f64 -1/24 (pow.f64 x 2)))","(+.f64 1/2 (*.f64 -1/24 (*.f64 x x)))","(fma.f64 -1/24 (*.f64 x x) 1/2)","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 (fma.f64 -1/24 (*.f64 x x) 1/2) (*.f64 1/720 (pow.f64 x 4)))","(fma.f64 -1/24 (*.f64 x x) (fma.f64 1/720 (pow.f64 x 4) 1/2))","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (+.f64 (*.f64 -1/40320 (pow.f64 x 6)) (*.f64 1/720 (pow.f64 x 4)))))","(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4)))))","(+.f64 (fma.f64 -1/24 (*.f64 x x) 1/2) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 1/720 (pow.f64 x 4) (*.f64 -1/40320 (pow.f64 x 6)))))","(+.f64 (fma.f64 -1/24 (*.f64 x x) 1/2) (fma.f64 1/720 (pow.f64 x 4) (*.f64 -1/40320 (pow.f64 x 6))))","(+.f64 1/2 (fma.f64 1/720 (pow.f64 x 4) (fma.f64 -1/24 (*.f64 x x) (*.f64 -1/40320 (pow.f64 x 6)))))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(/.f64 (sin.f64 x) (/.f64 (*.f64 x x) (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","2","(+.f64 2 (*.f64 -1/2 (pow.f64 x 2)))","(+.f64 2 (*.f64 (*.f64 x x) -1/2))","(fma.f64 (*.f64 x x) -1/2 2)","(fma.f64 x (*.f64 x -1/2) 2)","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 1/24 (pow.f64 x 4))))","(+.f64 2 (fma.f64 -1/2 (*.f64 x x) (*.f64 (pow.f64 x 4) 1/24)))","(+.f64 (fma.f64 (*.f64 x x) -1/2 2) (*.f64 (pow.f64 x 4) 1/24))","(fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 4) 1/24 2))","(fma.f64 (pow.f64 x 4) 1/24 (fma.f64 (*.f64 x x) -1/2 2))","(+.f64 2 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/24 (pow.f64 x 4)) (*.f64 -1/720 (pow.f64 x 6)))))","(+.f64 2 (fma.f64 -1/2 (*.f64 x x) (fma.f64 1/24 (pow.f64 x 4) (*.f64 (pow.f64 x 6) -1/720))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 2) (fma.f64 (pow.f64 x 4) 1/24 (*.f64 (pow.f64 x 6) -1/720)))","(+.f64 2 (fma.f64 (pow.f64 x 6) -1/720 (fma.f64 x (*.f64 x -1/2) (*.f64 (pow.f64 x 4) 1/24))))","(+.f64 (fma.f64 (*.f64 x x) -1/2 2) (fma.f64 (pow.f64 x 6) -1/720 (*.f64 (pow.f64 x 4) 1/24)))","(+.f64 (fma.f64 x (*.f64 x -1/2) 2) (fma.f64 (pow.f64 x 4) 1/24 (*.f64 (pow.f64 x 6) -1/720)))","(+.f64 (cos.f64 x) 1)","(+.f64 1 (cos.f64 x))","(+.f64 (cos.f64 x) 1)","(+.f64 1 (cos.f64 x))","(+.f64 (cos.f64 x) 1)","(+.f64 1 (cos.f64 x))","(+.f64 (cos.f64 x) 1)","(+.f64 1 (cos.f64 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (pow.f64 x 2))","(fma.f64 -1/3 (pow.f64 x 4) (*.f64 x x))","(fma.f64 (pow.f64 x 4) -1/3 (*.f64 x x))","(fma.f64 x x (*.f64 (pow.f64 x 4) -1/3))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2)))","(fma.f64 -1/3 (pow.f64 x 4) (fma.f64 2/45 (pow.f64 x 6) (*.f64 x x)))","(fma.f64 (pow.f64 x 4) -1/3 (fma.f64 x x (*.f64 (pow.f64 x 6) 2/45)))","(fma.f64 x x (fma.f64 (pow.f64 x 4) -1/3 (*.f64 (pow.f64 x 6) 2/45)))","(fma.f64 (pow.f64 x 4) -1/3 (fma.f64 (pow.f64 x 6) 2/45 (*.f64 x x)))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 -1/315 (pow.f64 x 8)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2))))","(fma.f64 -1/3 (pow.f64 x 4) (fma.f64 -1/315 (pow.f64 x 8) (fma.f64 2/45 (pow.f64 x 6) (*.f64 x x))))","(fma.f64 (pow.f64 x 4) -1/3 (fma.f64 -1/315 (pow.f64 x 8) (fma.f64 x x (*.f64 (pow.f64 x 6) 2/45))))","(fma.f64 (pow.f64 x 4) -1/3 (fma.f64 (pow.f64 x 6) 2/45 (fma.f64 x x (*.f64 -1/315 (pow.f64 x 8)))))","(fma.f64 (pow.f64 x 4) -1/3 (fma.f64 (pow.f64 x 6) 2/45 (fma.f64 -1/315 (pow.f64 x 8) (*.f64 x x))))","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(pow.f64 (sin.f64 x) 2)","(*.f64 1/2 (pow.f64 x 2))","(*.f64 1/2 (*.f64 x x))","(*.f64 x (*.f64 1/2 x))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (*.f64 -1/24 (pow.f64 x 4)))","(fma.f64 1/2 (*.f64 x x) (*.f64 -1/24 (pow.f64 x 4)))","(*.f64 (*.f64 x x) (fma.f64 -1/24 (*.f64 x x) 1/2))","(*.f64 x (*.f64 x (fma.f64 -1/24 (*.f64 x x) 1/2)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 1/720 (pow.f64 x 6))))","(fma.f64 -1/24 (pow.f64 x 4) (fma.f64 1/720 (pow.f64 x 6) (*.f64 x (*.f64 1/2 x))))","(fma.f64 -1/24 (pow.f64 x 4) (*.f64 (*.f64 x x) (fma.f64 1/720 (pow.f64 x 4) 1/2)))","(+.f64 (*.f64 1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/24 (pow.f64 x 4)) (+.f64 (*.f64 1/720 (pow.f64 x 6)) (*.f64 -1/40320 (pow.f64 x 8)))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (fma.f64 1/720 (pow.f64 x 6) (*.f64 -1/40320 (pow.f64 x 8)))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 -1/24 (pow.f64 x 4) (fma.f64 -1/40320 (pow.f64 x 8) (*.f64 1/720 (pow.f64 x 6)))))","(fma.f64 1/2 (*.f64 x x) (fma.f64 1/720 (pow.f64 x 6) (fma.f64 -1/24 (pow.f64 x 4) (*.f64 -1/40320 (pow.f64 x 8)))))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(*.f64 (tan.f64 (/.f64 x 2)) (sin.f64 x))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(*.f64 (tan.f64 (/.f64 x 2)) (sin.f64 x))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(*.f64 (tan.f64 (/.f64 x 2)) (sin.f64 x))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(*.f64 (tan.f64 (/.f64 x 2)) (sin.f64 x))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 (cos.f64 x) 1))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(*.f64 (tan.f64 (/.f64 x 2)) (sin.f64 x))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 (cos.f64 x) 1))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(*.f64 (tan.f64 (/.f64 x 2)) (sin.f64 x))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 (cos.f64 x) 1))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(*.f64 (tan.f64 (/.f64 x 2)) (sin.f64 x))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 (cos.f64 x) 1))","(/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 1 (cos.f64 x)))","(*.f64 (tan.f64 (/.f64 x 2)) (sin.f64 x))","(*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2)))"]],"stop":[["node limit",1]],"time":47.2431640625,"type":"simplify"},{"compiler":[[3870,2095]],"time":39.91796875,"type":"eval"},{"alts":[["(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","fresh",31.278835788268132],["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) x))","next",18.77598047010237],["(/.f64 (pow.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3) 1/3) (*.f64 x x))","fresh",31.46306671947689],["(/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x))) (*.f64 x x))","done",19.27147669082558],["(/.f64 (-.f64 1 (log1p.f64 (expm1.f64 (cos.f64 x)))) (*.f64 x x))","fresh",31.45663082223646],["(fma.f64 -1/24 (*.f64 x x) 1/2)","fresh",32.088670732027964],["(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2))) (*.f64 x x))","fresh",19.137556070147177]],"compiler":[[9,7],[16,12],[13,10],[15,9],[11,8],[7,5],[12,8],[9,7],[16,12],[13,10],[11,8],[7,5],[12,8]],"count":[[227,7]],"kept":[{"done":[0,0],"fresh":[6,2],"new":[220,4],"picked":[1,1]}],"min-error":[0],"time":56.243896484375,"type":"prune"},{"compiler":[[51,30]],"locations":[["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) x))",0.16796875,true],["(pow.f64 (sin.f64 x) 2)",0.2421875,true],["(+.f64 1 (cos.f64 x))",0.42241055626447865,false],["(/.f64 (pow.f64 (sin.f64 x) 2) x)",17.899096266768087,true]],"time":12.72314453125,"type":"localize"},{"count":[[3,20]],"series":[["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) x))","x","-inf",0.198974609375],["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) x))","x","inf",0.180908203125],["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) x))","x","0",0.18896484375],["(pow.f64 (sin.f64 x) 2)","x","-inf",0.135986328125],["(pow.f64 (sin.f64 x) 2)","x","inf",0.138916015625],["(pow.f64 (sin.f64 x) 2)","x","0",0.175048828125],["(/.f64 (pow.f64 (sin.f64 x) 2) x)","x","-inf",0.448974609375],["(/.f64 (pow.f64 (sin.f64 x) 2) x)","x","inf",0.327880859375],["(/.f64 (pow.f64 (sin.f64 x) 2) x)","x","0",0.392822265625]],"time":2.302978515625,"type":"series"},{"count":[[3,125]],"egraph":[[2,3747,27,0.028186874],[1,268,27,0.005082749],[0,12,38,0.000363416]],"inputs":[["(/.f64 (pow.f64 (sin.f64 x) 2) x)","(pow.f64 (sin.f64 x) 2)","(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (pow.f64 (sin.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (*.f64 (sin.f64 x) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (pow.f64 (sin.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (*.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)) (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)) 2) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (sqrt.f64 x)) (/.f64 (sin.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (/.f64 1 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (*.f64 x x))) (/.f64 (pow.f64 (sin.f64 x) 2) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 (pow.f64 (sin.f64 x) 2) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) 1) (/.f64 (sin.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) 1) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (cbrt.f64 (*.f64 x x))) (/.f64 (sin.f64 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (cbrt.f64 (*.f64 x x))) (cbrt.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (sqrt.f64 x)) (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (sin.f64 x) 4) (*.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 x) (sqrt.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (pow.f64 (sin.f64 x) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (pow.f64 (sin.f64 x) 3) 2) (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 x (pow.f64 (sin.f64 x) 2)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (sin.f64 x) 4) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (pow.f64 (sin.f64 x) 3) 2) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (neg.f64 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 (neg.f64 (cos.f64 x)) (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1 (pow.f64 (cos.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (sin.f64 x) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 1/2 (*.f64 1/2 (cos.f64 (*.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (sin.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (sin.f64 x) 4)) (pow.f64 (cbrt.f64 (sin.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (cbrt.f64 (pow.f64 (sin.f64 x) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (*.f64 (cbrt.f64 (sin.f64 x)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (sin.f64 x)) 3) (sqrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (cos.f64 (-.f64 x x)) (cos.f64 (*.f64 2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 2) 3)) (+.f64 1 (+.f64 (pow.f64 (pow.f64 (cos.f64 x) 2) 2) (pow.f64 (cos.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (pow.f64 (pow.f64 (cos.f64 x) 2) 2)) (+.f64 1 (pow.f64 (cos.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (sin.f64 x) 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (sin.f64 x))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (*.f64 x (fma.f64 x (cos.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (fma.f64 x (cos.f64 x) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (/.f64 (*.f64 x x) (/.f64 1 (+.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (/.f64 x (/.f64 1 (fma.f64 x (cos.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (fma.f64 x (cos.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 x (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (fma.f64 x (cos.f64 x) x) (/.f64 x (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 x x) (-.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 x (/.f64 (-.f64 1 (cos.f64 x)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) (*.f64 (/.f64 x (pow.f64 (sin.f64 x) 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) (*.f64 x (/.f64 x (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (fma.f64 x (cos.f64 x) x)) (/.f64 x (pow.f64 (sin.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 (fma.f64 x (cos.f64 x) x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (+.f64 1 (cos.f64 x))) (*.f64 (/.f64 x (pow.f64 (sin.f64 x) 2)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 1 (cos.f64 x)) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (-.f64 1 (cos.f64 x)) x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1 (cos.f64 x))) (neg.f64 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) 1) (*.f64 (neg.f64 x) (fma.f64 x (cos.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (/.f64 1 (+.f64 1 (cos.f64 x)))) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (sin.f64 x) 2) (/.f64 -1 (+.f64 1 (cos.f64 x)))) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (/.f64 -1 (+.f64 1 (cos.f64 x)))) (pow.f64 (neg.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (+.f64 1 (cos.f64 x))) (pow.f64 (sin.f64 x) 2)) (*.f64 (neg.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (+.f64 1 (cos.f64 x))) 1) (*.f64 (neg.f64 x) (/.f64 x (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) 2))) (*.f64 x (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (+.f64 1 (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) 2))) (pow.f64 (neg.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (cos.f64 x)) x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (cos.f64 x)) x) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (-.f64 1 (cos.f64 x)) x) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (/.f64 1 (fma.f64 x (cos.f64 x) x))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (+.f64 1 (cos.f64 x))) (/.f64 (pow.f64 (sin.f64 x) 2) x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 -1 (+.f64 1 (cos.f64 x)))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1 (fma.f64 x (cos.f64 x) x)) (neg.f64 (pow.f64 (sin.f64 x) 2))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (-.f64 1 (cos.f64 x))) x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) 3) (pow.f64 (/.f64 1 (fma.f64 x (cos.f64 x) x)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (/.f64 1 (fma.f64 x (cos.f64 x) x)) 3) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x (cos.f64 x) x) (/.f64 x (pow.f64 (sin.f64 x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x x) (-.f64 1 (cos.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (/.f64 (-.f64 1 (cos.f64 x)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) 3) (pow.f64 (/.f64 1 (fma.f64 x (cos.f64 x) x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (fma.f64 x (cos.f64 x) x)) 3) (pow.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))) 1))))))"]],"rules":[["egg-rr",58],["egg-rr",28],["egg-rr",39]],"stop":[["node limit",1]],"time":54.048828125,"type":"rewrite"},{"count":[[145,150]],"egraph":[[4,3269,286,0.016795708],[3,1076,286,0.00701025],[2,347,288,0.002482041],[1,140,314,0.000909083],[0,56,316,0.000271708]],"inputs":[["x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 2/45 (pow.f64 x 5)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) x))","(+.f64 (*.f64 -1/315 (pow.f64 x 7)) (+.f64 (*.f64 2/45 (pow.f64 x 5)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)))","(pow.f64 x 2)","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (pow.f64 x 2))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2)))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 -1/315 (pow.f64 x 8)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2))))","1/2","(+.f64 1/2 (*.f64 -1/24 (pow.f64 x 2)))","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (+.f64 (*.f64 -1/40320 (pow.f64 x 6)) (*.f64 1/720 (pow.f64 x 4)))))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(fma.f64 -1/3 (pow.f64 x 3) x)","(+.f64 (*.f64 2/45 (pow.f64 x 5)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) x))","(fma.f64 2/45 (pow.f64 x 5) (fma.f64 -1/3 (pow.f64 x 3) x))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/45 (pow.f64 x 5) x))","(+.f64 (*.f64 -1/315 (pow.f64 x 7)) (+.f64 (*.f64 2/45 (pow.f64 x 5)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)))","(fma.f64 -1/315 (pow.f64 x 7) (fma.f64 2/45 (pow.f64 x 5) (fma.f64 -1/3 (pow.f64 x 3) x)))","(fma.f64 -1/315 (pow.f64 x 7) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/45 (pow.f64 x 5) x)))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/45 (pow.f64 x 5) (fma.f64 -1/315 (pow.f64 x 7) x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (pow.f64 x 2))","(fma.f64 -1/3 (pow.f64 x 4) (*.f64 x x))","(fma.f64 x x (*.f64 -1/3 (pow.f64 x 4)))","(*.f64 x (fma.f64 -1/3 (pow.f64 x 3) x))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2)))","(fma.f64 -1/3 (pow.f64 x 4) (fma.f64 2/45 (pow.f64 x 6) (*.f64 x x)))","(fma.f64 -1/3 (pow.f64 x 4) (fma.f64 x x (*.f64 2/45 (pow.f64 x 6))))","(fma.f64 x x (fma.f64 2/45 (pow.f64 x 6) (*.f64 -1/3 (pow.f64 x 4))))","(fma.f64 x x (fma.f64 -1/3 (pow.f64 x 4) (*.f64 2/45 (pow.f64 x 6))))","(+.f64 (*.f64 -1/3 (pow.f64 x 4)) (+.f64 (*.f64 -1/315 (pow.f64 x 8)) (+.f64 (*.f64 2/45 (pow.f64 x 6)) (pow.f64 x 2))))","(fma.f64 -1/3 (pow.f64 x 4) (fma.f64 -1/315 (pow.f64 x 8) (fma.f64 2/45 (pow.f64 x 6) (*.f64 x x))))","(fma.f64 -1/3 (pow.f64 x 4) (fma.f64 -1/315 (pow.f64 x 8) (fma.f64 x x (*.f64 2/45 (pow.f64 x 6)))))","(fma.f64 -1/3 (pow.f64 x 4) (fma.f64 x x (fma.f64 2/45 (pow.f64 x 6) (*.f64 -1/315 (pow.f64 x 8)))))","(fma.f64 x x (fma.f64 -1/3 (pow.f64 x 4) (fma.f64 2/45 (pow.f64 x 6) (*.f64 -1/315 (pow.f64 x 8)))))","(fma.f64 x x (fma.f64 -1/315 (pow.f64 x 8) (fma.f64 -1/3 (pow.f64 x 4) (*.f64 2/45 (pow.f64 x 6)))))","1/2","(+.f64 1/2 (*.f64 -1/24 (pow.f64 x 2)))","(+.f64 1/2 (*.f64 (*.f64 x x) -1/24))","(fma.f64 (*.f64 x x) -1/24 1/2)","(fma.f64 x (*.f64 x -1/24) 1/2)","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (*.f64 1/720 (pow.f64 x 4))))","(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (*.f64 (pow.f64 x 4) 1/720)))","(+.f64 1/2 (fma.f64 (*.f64 x x) -1/24 (*.f64 (pow.f64 x 4) 1/720)))","(fma.f64 x (*.f64 x -1/24) (fma.f64 (pow.f64 x 4) 1/720 1/2))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) 1/720 -1/24) 1/2)","(+.f64 1/2 (+.f64 (*.f64 -1/24 (pow.f64 x 2)) (+.f64 (*.f64 -1/40320 (pow.f64 x 6)) (*.f64 1/720 (pow.f64 x 4)))))","(+.f64 1/2 (fma.f64 -1/24 (*.f64 x x) (fma.f64 -1/40320 (pow.f64 x 6) (*.f64 (pow.f64 x 4) 1/720))))","(+.f64 (fma.f64 (*.f64 x x) -1/24 1/2) (fma.f64 (pow.f64 x 4) 1/720 (*.f64 (pow.f64 x 6) -1/40320)))","(+.f64 1/2 (fma.f64 x (*.f64 x -1/24) (fma.f64 (pow.f64 x 4) 1/720 (*.f64 (pow.f64 x 6) -1/40320))))","(fma.f64 x (*.f64 x -1/24) (fma.f64 (pow.f64 x 4) 1/720 (fma.f64 (pow.f64 x 6) -1/40320 1/2)))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) 1/720 -1/24) (fma.f64 (pow.f64 x 6) -1/40320 1/2))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) (pow.f64 x 2)))","(/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (*.f64 x x) (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) (*.f64 x x)) (tan.f64 (/.f64 x 2)))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (/.f64 x 2)) (*.f64 x x)))"]],"stop":[["node limit",1]],"time":32.43603515625,"type":"simplify"},{"compiler":[[3999,2475]],"time":43.528076171875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 -1 (+.f64 1 (cos.f64 x)))) (neg.f64 x))","next",18.756085511491463],["(/.f64 (/.f64 (-.f64 1 (cos.f64 x)) x) x)","fresh",30.67408440200622],["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) x))","done",18.77598047010237],["(/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x))) (*.f64 x x))","done",19.27147669082558],["(/.f64 (-.f64 1 (log1p.f64 (expm1.f64 (cos.f64 x)))) (*.f64 x x))","fresh",31.45663082223646],["(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2))) (*.f64 x x))","fresh",19.137556070147177],["(fma.f64 x (*.f64 x -1/24) 1/2)","fresh",32.088670732027964]],"compiler":[[17,13],[9,6],[16,12],[15,9],[11,8],[12,8],[7,5],[17,13],[9,6],[11,8],[12,8],[7,5]],"count":[[216,7]],"kept":[{"done":[1,1],"fresh":[5,2],"new":[209,3],"picked":[1,1]}],"min-error":[0],"time":49.5810546875,"type":"prune"},{"compiler":[[60,35]],"locations":[["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 -1 (+.f64 1 (cos.f64 x))))",0.16796875,true],["(pow.f64 (sin.f64 x) 2)",0.2421875,false],["(+.f64 1 (cos.f64 x))",0.42241055626447865,false],["(/.f64 (pow.f64 (sin.f64 x) 2) x)",17.899096266768087,false]],"time":14.199951171875,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 -1 (+.f64 1 (cos.f64 x))))","x","-inf",0.35595703125],["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 -1 (+.f64 1 (cos.f64 x))))","x","inf",0.498046875],["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 -1 (+.f64 1 (cos.f64 x))))","x","0",0.363037109375]],"time":1.27490234375,"type":"series"},{"count":[[1,53]],"egraph":[[2,3400,17,0.02762575],[1,258,19,0.004530791],[0,12,20,0.000366541]],"inputs":[["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 -1 (+.f64 1 (cos.f64 x))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (*.f64 x (+.f64 -1 (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 -1 (neg.f64 (cos.f64 x))) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (/.f64 (fma.f64 x (cos.f64 x) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (sin.f64 x) 2) (/.f64 x (/.f64 -1 (+.f64 1 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (+.f64 -1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (*.f64 x (pow.f64 (sin.f64 x) -2)) (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (*.f64 (+.f64 1 (cos.f64 x)) (*.f64 x (pow.f64 (sin.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (*.f64 x (pow.f64 (sin.f64 x) -2)) (+.f64 -1 (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (+.f64 -1 (neg.f64 (cos.f64 x))) (*.f64 x (pow.f64 (sin.f64 x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x (cos.f64 x) x) (neg.f64 (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 x (/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 -1 (neg.f64 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1 (cos.f64 x)) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 -1 (+.f64 1 (cos.f64 x))) (*.f64 x (pow.f64 (sin.f64 x) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 (+.f64 -1 (neg.f64 (cos.f64 x))) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 -1 (neg.f64 (cos.f64 x)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) x) (+.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 -1 (neg.f64 (cos.f64 x))))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) x)) (+.f64 -1 (neg.f64 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (pow.f64 (sin.f64 x) 2))) (neg.f64 (fma.f64 x (cos.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) -1) (*.f64 (neg.f64 x) (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) 1) (*.f64 (neg.f64 x) (+.f64 -1 (neg.f64 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (neg.f64 (pow.f64 (sin.f64 x) 2))) (*.f64 (+.f64 1 (cos.f64 x)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 -1 (neg.f64 (cos.f64 x)))) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 -1 (neg.f64 (cos.f64 x)))) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 -1 (neg.f64 (cos.f64 x)))) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) x) 1) (+.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) x) (pow.f64 (cbrt.f64 (+.f64 1 (cos.f64 x))) 2)) (cbrt.f64 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) x) (sqrt.f64 (+.f64 1 (cos.f64 x)))) (sqrt.f64 (+.f64 1 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (/.f64 -1 (+.f64 1 (cos.f64 x)))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 -1 (+.f64 1 (cos.f64 x))) (neg.f64 (pow.f64 (sin.f64 x) 2))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x (pow.f64 (sin.f64 x) -2)) (+.f64 -1 (neg.f64 (cos.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 -1 (neg.f64 (cos.f64 x))) (*.f64 x (pow.f64 (sin.f64 x) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (cos.f64 x) x) (neg.f64 (pow.f64 (sin.f64 x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (/.f64 (pow.f64 (sin.f64 x) 2) (+.f64 -1 (neg.f64 (cos.f64 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 1 (cos.f64 x)) (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (fma.f64 x (cos.f64 x) x))) 1))))))"]],"rules":[["egg-rr",53]],"stop":[["node limit",1]],"time":46.51220703125,"type":"rewrite"},{"count":[[65,63]],"egraph":[[6,7665,170,0.030639792],[5,5424,170,0.020606833999999997],[4,1354,186,0.010910626],[3,492,186,0.0033792509999999998],[2,196,186,0.0013434179999999999],[1,84,210,0.000542876],[0,34,210,0.000182042]],"inputs":[["(*.f64 -1/2 x)","(+.f64 (*.f64 -1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 -1/720 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/40320 (pow.f64 x 7)) (+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 -1/720 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3)))))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) x)))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) x)))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) x)))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) x)))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) x)))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) x)))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) x)))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 x)","(+.f64 (*.f64 -1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 -1/2 x (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 1/24 (pow.f64 x 3) (*.f64 -1/2 x))","(+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 -1/720 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 -1/2 x (fma.f64 -1/720 (pow.f64 x 5) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 -1/2 x (fma.f64 1/24 (pow.f64 x 3) (*.f64 -1/720 (pow.f64 x 5))))","(fma.f64 1/24 (pow.f64 x 3) (fma.f64 -1/720 (pow.f64 x 5) (*.f64 -1/2 x)))","(+.f64 (*.f64 1/40320 (pow.f64 x 7)) (+.f64 (*.f64 -1/2 x) (+.f64 (*.f64 -1/720 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/40320 (pow.f64 x 7) (fma.f64 -1/2 x (fma.f64 -1/720 (pow.f64 x 5) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/40320 (pow.f64 x 7) (fma.f64 -1/2 x (fma.f64 1/24 (pow.f64 x 3) (*.f64 -1/720 (pow.f64 x 5)))))","(fma.f64 -1/2 x (fma.f64 1/40320 (pow.f64 x 7) (fma.f64 1/24 (pow.f64 x 3) (*.f64 -1/720 (pow.f64 x 5)))))","(fma.f64 -1/2 x (fma.f64 1/24 (pow.f64 x 3) (fma.f64 -1/720 (pow.f64 x 5) (*.f64 1/40320 (pow.f64 x 7)))))","(fma.f64 -1/2 x (fma.f64 -1/720 (pow.f64 x 5) (fma.f64 1/24 (pow.f64 x 3) (*.f64 1/40320 (pow.f64 x 7)))))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) x)))","(neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 x (+.f64 1 (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 x (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) x))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) x)))","(neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 x (+.f64 1 (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 x (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) x))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) x)))","(neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 x (+.f64 1 (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 x (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) x))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 1 (cos.f64 x)) x)))","(neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 x (+.f64 1 (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 x (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) x))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) x)))","(neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 x (+.f64 1 (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 x (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) x))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) x)))","(neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 x (+.f64 1 (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 x (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) x))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) x)))","(neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 x (+.f64 1 (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 x (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) x))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x))","(*.f64 -1 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 (+.f64 (cos.f64 x) 1) x)))","(neg.f64 (/.f64 (pow.f64 (sin.f64 x) 2) (*.f64 x (+.f64 1 (cos.f64 x)))))","(/.f64 (neg.f64 (pow.f64 (sin.f64 x) 2)) (*.f64 x (+.f64 1 (cos.f64 x))))","(*.f64 (/.f64 (sin.f64 x) x) (neg.f64 (tan.f64 (/.f64 x 2))))","(*.f64 (sin.f64 x) (/.f64 (neg.f64 (tan.f64 (*.f64 1/2 x))) x))","(*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x))"]],"stop":[["node limit",1]],"time":45.161865234375,"type":"simplify"},{"compiler":[[4323,2558]],"time":44.425048828125,"type":"eval"},{"alts":[["(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 -1 (+.f64 1 (cos.f64 x)))) (neg.f64 x))","done",18.756085511491463],["(/.f64 (/.f64 (-.f64 1 (cos.f64 x)) x) x)","fresh",30.67408440200622],["(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) x))","done",18.77598047010237],["(/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x))) (*.f64 x x))","done",19.27147669082558],["(/.f64 (-.f64 1 (log1p.f64 (expm1.f64 (cos.f64 x)))) (*.f64 x x))","fresh",31.45663082223646],["(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2))) (*.f64 x x))","fresh",19.137556070147177],["(/.f64 (*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x)) (neg.f64 x))","fresh",0.19501879884221007]],"compiler":[[17,13],[9,6],[16,12],[15,9],[11,8],[12,8],[13,9]],"count":[[211,7]],"kept":[{"done":[2,2],"fresh":[4,3],"new":[204,1],"picked":[1,1]}],"min-error":[0],"time":46.4169921875,"type":"prune"},{"accuracy":[0.19501879884221007],"baseline":[0.19501879884221007],"branch":[["x",0.19501879884221007,1],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))",0.19501879884221007,1]],"compiler":[[2,1],[9,6],[178,97]],"count":[[16,1]],"inputs":[["(/.f64 (*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x)) (neg.f64 x))","(/.f64 (*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 -1 (+.f64 1 (cos.f64 x)))) (neg.f64 x))","(/.f64 (/.f64 (-.f64 1 (cos.f64 x)) x) x)","(fma.f64 x (*.f64 x -1/24) 1/2)","(*.f64 (-.f64 1 (cos.f64 x)) (pow.f64 x -2))","(*.f64 (/.f64 (pow.f64 (sin.f64 x) 2) x) (/.f64 (/.f64 1 (+.f64 1 (cos.f64 x))) x))","(/.f64 (pow.f64 (pow.f64 (-.f64 1 (cos.f64 x)) 3) 1/3) (*.f64 x x))","(/.f64 (*.f64 (sin.f64 x) (tan.f64 (/.f64 x 2))) (*.f64 x x))","(*.f64 (pow.f64 x -2) (-.f64 1 (cos.f64 x)))","(/.f64 (-.f64 1 (log1p.f64 (expm1.f64 (cos.f64 x)))) (*.f64 x x))","(*.f64 (/.f64 1 x) (/.f64 (-.f64 1 (cos.f64 x)) x))","(/.f64 (/.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (+.f64 1 (cos.f64 x))) (*.f64 x x))","(/.f64 (*.f64 (*.f64 (sin.f64 x) (sin.f64 x)) (/.f64 1 (+.f64 1 (cos.f64 x)))) (*.f64 x x))","(fma.f64 -1/24 (*.f64 x x) 1/2)","(/.f64 (*.f64 (pow.f64 (cbrt.f64 (-.f64 1 (cos.f64 x))) 2) (cbrt.f64 (-.f64 1 (cos.f64 x)))) (*.f64 x x))","(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))"]],"link":["."],"name":["cos2 (problem 3.4.1)"],"oracle":[63.06968019572188],"outputs":[["(/.f64 (*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x)) (neg.f64 x))"]],"time":12.35498046875,"times":[["x",6.514892578125],["(/.f64 (-.f64 1 (cos.f64 x)) (*.f64 x x))",2.948974609375]],"type":"regimes"},{"compiler":[[13,9]],"egraph":[[3,19,19,0.000103375],[2,18,19,7.9292e-5],[1,16,19,5.4958e-5],[0,10,19,3.0583e-5]],"inputs":[["(/.f64 (*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x)) (neg.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 -1/2 x)) x)) (neg.f64 x))","(/.f64 (*.f64 (sin.f64 x) (/.f64 (tan.f64 (*.f64 x -1/2)) x)) (neg.f64 x))"]],"stop":[["fuel",1],["saturated",1]],"time":8.508056640625,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[13,9]],"remove-preprocessing":[[]],"time":8.869140625,"type":"end"}]